#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Commons

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Commons_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function Commons.BHUD.GetAvgFps
// 0x0004 (0x0004 - 0x0000)
struct BHUD_GetAvgFps final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BHUD_GetAvgFps) == 0x000004, "Wrong alignment on BHUD_GetAvgFps");
static_assert(sizeof(BHUD_GetAvgFps) == 0x000004, "Wrong size on BHUD_GetAvgFps");
static_assert(offsetof(BHUD_GetAvgFps, ReturnValue) == 0x000000, "Member 'BHUD_GetAvgFps::ReturnValue' has a wrong offset!");

// Function Commons.BHUD.GetHitches
// 0x0004 (0x0004 - 0x0000)
struct BHUD_GetHitches final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BHUD_GetHitches) == 0x000004, "Wrong alignment on BHUD_GetHitches");
static_assert(sizeof(BHUD_GetHitches) == 0x000004, "Wrong size on BHUD_GetHitches");
static_assert(offsetof(BHUD_GetHitches, ReturnValue) == 0x000000, "Member 'BHUD_GetHitches::ReturnValue' has a wrong offset!");

// Function Commons.UtilityStatics.AnglesMatchCondition
// 0x0020 (0x0020 - 0x0000)
struct UtilityStatics_AnglesMatchCondition final
{
public:
	struct FDirectionCondition                    Condition;                                         // 0x0000(0x0014)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         YawAngle;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchAngle;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UtilityStatics_AnglesMatchCondition) == 0x000004, "Wrong alignment on UtilityStatics_AnglesMatchCondition");
static_assert(sizeof(UtilityStatics_AnglesMatchCondition) == 0x000020, "Wrong size on UtilityStatics_AnglesMatchCondition");
static_assert(offsetof(UtilityStatics_AnglesMatchCondition, Condition) == 0x000000, "Member 'UtilityStatics_AnglesMatchCondition::Condition' has a wrong offset!");
static_assert(offsetof(UtilityStatics_AnglesMatchCondition, YawAngle) == 0x000014, "Member 'UtilityStatics_AnglesMatchCondition::YawAngle' has a wrong offset!");
static_assert(offsetof(UtilityStatics_AnglesMatchCondition, PitchAngle) == 0x000018, "Member 'UtilityStatics_AnglesMatchCondition::PitchAngle' has a wrong offset!");
static_assert(offsetof(UtilityStatics_AnglesMatchCondition, ReturnValue) == 0x00001C, "Member 'UtilityStatics_AnglesMatchCondition::ReturnValue' has a wrong offset!");

// Function Commons.UtilityStatics.ApplySimpleBentCurveAlpha
// 0x0010 (0x0010 - 0x0000)
struct UtilityStatics_ApplySimpleBentCurveAlpha final
{
public:
	struct FSimpleBentCurve                       Curve;                                             // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ALPHA;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityStatics_ApplySimpleBentCurveAlpha) == 0x000004, "Wrong alignment on UtilityStatics_ApplySimpleBentCurveAlpha");
static_assert(sizeof(UtilityStatics_ApplySimpleBentCurveAlpha) == 0x000010, "Wrong size on UtilityStatics_ApplySimpleBentCurveAlpha");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveAlpha, Curve) == 0x000000, "Member 'UtilityStatics_ApplySimpleBentCurveAlpha::Curve' has a wrong offset!");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveAlpha, ALPHA) == 0x000008, "Member 'UtilityStatics_ApplySimpleBentCurveAlpha::ALPHA' has a wrong offset!");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveAlpha, ReturnValue) == 0x00000C, "Member 'UtilityStatics_ApplySimpleBentCurveAlpha::ReturnValue' has a wrong offset!");

// Function Commons.UtilityStatics.ApplySimpleBentCurveFloat
// 0x0018 (0x0018 - 0x0000)
struct UtilityStatics_ApplySimpleBentCurveFloat final
{
public:
	struct FSimpleBentCurve                       Curve;                                             // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         From;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ALPHA;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityStatics_ApplySimpleBentCurveFloat) == 0x000004, "Wrong alignment on UtilityStatics_ApplySimpleBentCurveFloat");
static_assert(sizeof(UtilityStatics_ApplySimpleBentCurveFloat) == 0x000018, "Wrong size on UtilityStatics_ApplySimpleBentCurveFloat");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveFloat, Curve) == 0x000000, "Member 'UtilityStatics_ApplySimpleBentCurveFloat::Curve' has a wrong offset!");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveFloat, From) == 0x000008, "Member 'UtilityStatics_ApplySimpleBentCurveFloat::From' has a wrong offset!");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveFloat, To) == 0x00000C, "Member 'UtilityStatics_ApplySimpleBentCurveFloat::To' has a wrong offset!");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveFloat, ALPHA) == 0x000010, "Member 'UtilityStatics_ApplySimpleBentCurveFloat::ALPHA' has a wrong offset!");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveFloat, ReturnValue) == 0x000014, "Member 'UtilityStatics_ApplySimpleBentCurveFloat::ReturnValue' has a wrong offset!");

// Function Commons.UtilityStatics.ApplySimpleBentCurveQuat
// 0x0080 (0x0080 - 0x0000)
struct UtilityStatics_ApplySimpleBentCurveQuat final
{
public:
	struct FSimpleBentCurve                       Curve;                                             // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  From;                                              // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  To;                                                // 0x0030(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ALPHA;                                             // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0xC];                                       // 0x0054(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  ReturnValue;                                       // 0x0060(0x0020)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityStatics_ApplySimpleBentCurveQuat) == 0x000010, "Wrong alignment on UtilityStatics_ApplySimpleBentCurveQuat");
static_assert(sizeof(UtilityStatics_ApplySimpleBentCurveQuat) == 0x000080, "Wrong size on UtilityStatics_ApplySimpleBentCurveQuat");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveQuat, Curve) == 0x000000, "Member 'UtilityStatics_ApplySimpleBentCurveQuat::Curve' has a wrong offset!");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveQuat, From) == 0x000010, "Member 'UtilityStatics_ApplySimpleBentCurveQuat::From' has a wrong offset!");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveQuat, To) == 0x000030, "Member 'UtilityStatics_ApplySimpleBentCurveQuat::To' has a wrong offset!");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveQuat, ALPHA) == 0x000050, "Member 'UtilityStatics_ApplySimpleBentCurveQuat::ALPHA' has a wrong offset!");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveQuat, ReturnValue) == 0x000060, "Member 'UtilityStatics_ApplySimpleBentCurveQuat::ReturnValue' has a wrong offset!");

// Function Commons.UtilityStatics.ApplySimpleBentCurveRotator
// 0x0058 (0x0058 - 0x0000)
struct UtilityStatics_ApplySimpleBentCurveRotator final
{
public:
	struct FSimpleBentCurve                       Curve;                                             // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               From;                                              // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               To;                                                // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ALPHA;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityStatics_ApplySimpleBentCurveRotator) == 0x000008, "Wrong alignment on UtilityStatics_ApplySimpleBentCurveRotator");
static_assert(sizeof(UtilityStatics_ApplySimpleBentCurveRotator) == 0x000058, "Wrong size on UtilityStatics_ApplySimpleBentCurveRotator");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveRotator, Curve) == 0x000000, "Member 'UtilityStatics_ApplySimpleBentCurveRotator::Curve' has a wrong offset!");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveRotator, From) == 0x000008, "Member 'UtilityStatics_ApplySimpleBentCurveRotator::From' has a wrong offset!");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveRotator, To) == 0x000020, "Member 'UtilityStatics_ApplySimpleBentCurveRotator::To' has a wrong offset!");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveRotator, ALPHA) == 0x000038, "Member 'UtilityStatics_ApplySimpleBentCurveRotator::ALPHA' has a wrong offset!");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveRotator, ReturnValue) == 0x000040, "Member 'UtilityStatics_ApplySimpleBentCurveRotator::ReturnValue' has a wrong offset!");

// Function Commons.UtilityStatics.ApplySimpleBentCurveTransform
// 0x0140 (0x0140 - 0x0000)
struct UtilityStatics_ApplySimpleBentCurveTransform final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSimpleBentCurve                       Curve;                                             // 0x0060(0x0008)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             From;                                              // 0x0070(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             To;                                                // 0x00D0(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ALPHA;                                             // 0x0130(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0xC];                                      // 0x0134(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UtilityStatics_ApplySimpleBentCurveTransform) == 0x000010, "Wrong alignment on UtilityStatics_ApplySimpleBentCurveTransform");
static_assert(sizeof(UtilityStatics_ApplySimpleBentCurveTransform) == 0x000140, "Wrong size on UtilityStatics_ApplySimpleBentCurveTransform");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveTransform, Transform) == 0x000000, "Member 'UtilityStatics_ApplySimpleBentCurveTransform::Transform' has a wrong offset!");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveTransform, Curve) == 0x000060, "Member 'UtilityStatics_ApplySimpleBentCurveTransform::Curve' has a wrong offset!");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveTransform, From) == 0x000070, "Member 'UtilityStatics_ApplySimpleBentCurveTransform::From' has a wrong offset!");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveTransform, To) == 0x0000D0, "Member 'UtilityStatics_ApplySimpleBentCurveTransform::To' has a wrong offset!");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveTransform, ALPHA) == 0x000130, "Member 'UtilityStatics_ApplySimpleBentCurveTransform::ALPHA' has a wrong offset!");

// Function Commons.UtilityStatics.ApplySimpleBentCurveVector
// 0x0058 (0x0058 - 0x0000)
struct UtilityStatics_ApplySimpleBentCurveVector final
{
public:
	struct FSimpleBentCurve                       Curve;                                             // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                From;                                              // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ALPHA;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityStatics_ApplySimpleBentCurveVector) == 0x000008, "Wrong alignment on UtilityStatics_ApplySimpleBentCurveVector");
static_assert(sizeof(UtilityStatics_ApplySimpleBentCurveVector) == 0x000058, "Wrong size on UtilityStatics_ApplySimpleBentCurveVector");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveVector, Curve) == 0x000000, "Member 'UtilityStatics_ApplySimpleBentCurveVector::Curve' has a wrong offset!");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveVector, From) == 0x000008, "Member 'UtilityStatics_ApplySimpleBentCurveVector::From' has a wrong offset!");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveVector, To) == 0x000020, "Member 'UtilityStatics_ApplySimpleBentCurveVector::To' has a wrong offset!");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveVector, ALPHA) == 0x000038, "Member 'UtilityStatics_ApplySimpleBentCurveVector::ALPHA' has a wrong offset!");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveVector, ReturnValue) == 0x000040, "Member 'UtilityStatics_ApplySimpleBentCurveVector::ReturnValue' has a wrong offset!");

// Function Commons.UtilityStatics.ApplySimpleBentCurveVector2D
// 0x0040 (0x0040 - 0x0000)
struct UtilityStatics_ApplySimpleBentCurveVector2D final
{
public:
	struct FSimpleBentCurve                       Curve;                                             // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              From;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              To;                                                // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ALPHA;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityStatics_ApplySimpleBentCurveVector2D) == 0x000008, "Wrong alignment on UtilityStatics_ApplySimpleBentCurveVector2D");
static_assert(sizeof(UtilityStatics_ApplySimpleBentCurveVector2D) == 0x000040, "Wrong size on UtilityStatics_ApplySimpleBentCurveVector2D");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveVector2D, Curve) == 0x000000, "Member 'UtilityStatics_ApplySimpleBentCurveVector2D::Curve' has a wrong offset!");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveVector2D, From) == 0x000008, "Member 'UtilityStatics_ApplySimpleBentCurveVector2D::From' has a wrong offset!");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveVector2D, To) == 0x000018, "Member 'UtilityStatics_ApplySimpleBentCurveVector2D::To' has a wrong offset!");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveVector2D, ALPHA) == 0x000028, "Member 'UtilityStatics_ApplySimpleBentCurveVector2D::ALPHA' has a wrong offset!");
static_assert(offsetof(UtilityStatics_ApplySimpleBentCurveVector2D, ReturnValue) == 0x000030, "Member 'UtilityStatics_ApplySimpleBentCurveVector2D::ReturnValue' has a wrong offset!");

// Function Commons.UtilityStatics.QuatMatchesCondition
// 0x0050 (0x0050 - 0x0000)
struct UtilityStatics_QuatMatchesCondition final
{
public:
	struct FDirectionCondition                    Condition;                                         // 0x0000(0x0014)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Direction;                                         // 0x0020(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0xF];                                       // 0x0041(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UtilityStatics_QuatMatchesCondition) == 0x000010, "Wrong alignment on UtilityStatics_QuatMatchesCondition");
static_assert(sizeof(UtilityStatics_QuatMatchesCondition) == 0x000050, "Wrong size on UtilityStatics_QuatMatchesCondition");
static_assert(offsetof(UtilityStatics_QuatMatchesCondition, Condition) == 0x000000, "Member 'UtilityStatics_QuatMatchesCondition::Condition' has a wrong offset!");
static_assert(offsetof(UtilityStatics_QuatMatchesCondition, Direction) == 0x000020, "Member 'UtilityStatics_QuatMatchesCondition::Direction' has a wrong offset!");
static_assert(offsetof(UtilityStatics_QuatMatchesCondition, ReturnValue) == 0x000040, "Member 'UtilityStatics_QuatMatchesCondition::ReturnValue' has a wrong offset!");

// Function Commons.UtilityStatics.RotatorMatchesCondition
// 0x0038 (0x0038 - 0x0000)
struct UtilityStatics_RotatorMatchesCondition final
{
public:
	struct FDirectionCondition                    Condition;                                         // 0x0000(0x0014)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Direction;                                         // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UtilityStatics_RotatorMatchesCondition) == 0x000008, "Wrong alignment on UtilityStatics_RotatorMatchesCondition");
static_assert(sizeof(UtilityStatics_RotatorMatchesCondition) == 0x000038, "Wrong size on UtilityStatics_RotatorMatchesCondition");
static_assert(offsetof(UtilityStatics_RotatorMatchesCondition, Condition) == 0x000000, "Member 'UtilityStatics_RotatorMatchesCondition::Condition' has a wrong offset!");
static_assert(offsetof(UtilityStatics_RotatorMatchesCondition, Direction) == 0x000018, "Member 'UtilityStatics_RotatorMatchesCondition::Direction' has a wrong offset!");
static_assert(offsetof(UtilityStatics_RotatorMatchesCondition, ReturnValue) == 0x000030, "Member 'UtilityStatics_RotatorMatchesCondition::ReturnValue' has a wrong offset!");

// Function Commons.UtilityStatics.VectorMatchesCondition
// 0x0038 (0x0038 - 0x0000)
struct UtilityStatics_VectorMatchesCondition final
{
public:
	struct FDirectionCondition                    Condition;                                         // 0x0000(0x0014)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Direction;                                         // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowZeroVectorAtMaximumTolerance;                 // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UtilityStatics_VectorMatchesCondition) == 0x000008, "Wrong alignment on UtilityStatics_VectorMatchesCondition");
static_assert(sizeof(UtilityStatics_VectorMatchesCondition) == 0x000038, "Wrong size on UtilityStatics_VectorMatchesCondition");
static_assert(offsetof(UtilityStatics_VectorMatchesCondition, Condition) == 0x000000, "Member 'UtilityStatics_VectorMatchesCondition::Condition' has a wrong offset!");
static_assert(offsetof(UtilityStatics_VectorMatchesCondition, Direction) == 0x000018, "Member 'UtilityStatics_VectorMatchesCondition::Direction' has a wrong offset!");
static_assert(offsetof(UtilityStatics_VectorMatchesCondition, AllowZeroVectorAtMaximumTolerance) == 0x000030, "Member 'UtilityStatics_VectorMatchesCondition::AllowZeroVectorAtMaximumTolerance' has a wrong offset!");
static_assert(offsetof(UtilityStatics_VectorMatchesCondition, ReturnValue) == 0x000031, "Member 'UtilityStatics_VectorMatchesCondition::ReturnValue' has a wrong offset!");

// Function Commons.CommonsGameplayStatics.DelayTicks
// 0x0028 (0x0028 - 0x0000)
struct CommonsGameplayStatics_DelayTicks final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ticks;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonsGameplayStatics_DelayTicks) == 0x000008, "Wrong alignment on CommonsGameplayStatics_DelayTicks");
static_assert(sizeof(CommonsGameplayStatics_DelayTicks) == 0x000028, "Wrong size on CommonsGameplayStatics_DelayTicks");
static_assert(offsetof(CommonsGameplayStatics_DelayTicks, WorldContextObject) == 0x000000, "Member 'CommonsGameplayStatics_DelayTicks::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CommonsGameplayStatics_DelayTicks, Ticks) == 0x000008, "Member 'CommonsGameplayStatics_DelayTicks::Ticks' has a wrong offset!");
static_assert(offsetof(CommonsGameplayStatics_DelayTicks, LatentInfo) == 0x000010, "Member 'CommonsGameplayStatics_DelayTicks::LatentInfo' has a wrong offset!");

// Function Commons.CommonsGameplayStatics.IsBuildEditor
// 0x0001 (0x0001 - 0x0000)
struct CommonsGameplayStatics_IsBuildEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonsGameplayStatics_IsBuildEditor) == 0x000001, "Wrong alignment on CommonsGameplayStatics_IsBuildEditor");
static_assert(sizeof(CommonsGameplayStatics_IsBuildEditor) == 0x000001, "Wrong size on CommonsGameplayStatics_IsBuildEditor");
static_assert(offsetof(CommonsGameplayStatics_IsBuildEditor, ReturnValue) == 0x000000, "Member 'CommonsGameplayStatics_IsBuildEditor::ReturnValue' has a wrong offset!");

// Function Commons.CommonsGameplayStatics.IsBuildShipping
// 0x0001 (0x0001 - 0x0000)
struct CommonsGameplayStatics_IsBuildShipping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonsGameplayStatics_IsBuildShipping) == 0x000001, "Wrong alignment on CommonsGameplayStatics_IsBuildShipping");
static_assert(sizeof(CommonsGameplayStatics_IsBuildShipping) == 0x000001, "Wrong size on CommonsGameplayStatics_IsBuildShipping");
static_assert(offsetof(CommonsGameplayStatics_IsBuildShipping, ReturnValue) == 0x000000, "Member 'CommonsGameplayStatics_IsBuildShipping::ReturnValue' has a wrong offset!");

// Function Commons.CommonsGameplayStatics.IsButtonBottomForAccept
// 0x0001 (0x0001 - 0x0000)
struct CommonsGameplayStatics_IsButtonBottomForAccept final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonsGameplayStatics_IsButtonBottomForAccept) == 0x000001, "Wrong alignment on CommonsGameplayStatics_IsButtonBottomForAccept");
static_assert(sizeof(CommonsGameplayStatics_IsButtonBottomForAccept) == 0x000001, "Wrong size on CommonsGameplayStatics_IsButtonBottomForAccept");
static_assert(offsetof(CommonsGameplayStatics_IsButtonBottomForAccept, ReturnValue) == 0x000000, "Member 'CommonsGameplayStatics_IsButtonBottomForAccept::ReturnValue' has a wrong offset!");

// Function Commons.CommonsGameplayStatics.IsButtonRightForAccept
// 0x0001 (0x0001 - 0x0000)
struct CommonsGameplayStatics_IsButtonRightForAccept final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonsGameplayStatics_IsButtonRightForAccept) == 0x000001, "Wrong alignment on CommonsGameplayStatics_IsButtonRightForAccept");
static_assert(sizeof(CommonsGameplayStatics_IsButtonRightForAccept) == 0x000001, "Wrong size on CommonsGameplayStatics_IsButtonRightForAccept");
static_assert(offsetof(CommonsGameplayStatics_IsButtonRightForAccept, ReturnValue) == 0x000000, "Member 'CommonsGameplayStatics_IsButtonRightForAccept::ReturnValue' has a wrong offset!");

// Function Commons.CommonsGameplayStatics.IsCommandlet
// 0x0001 (0x0001 - 0x0000)
struct CommonsGameplayStatics_IsCommandlet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonsGameplayStatics_IsCommandlet) == 0x000001, "Wrong alignment on CommonsGameplayStatics_IsCommandlet");
static_assert(sizeof(CommonsGameplayStatics_IsCommandlet) == 0x000001, "Wrong size on CommonsGameplayStatics_IsCommandlet");
static_assert(offsetof(CommonsGameplayStatics_IsCommandlet, ReturnValue) == 0x000000, "Member 'CommonsGameplayStatics_IsCommandlet::ReturnValue' has a wrong offset!");

// Function Commons.CommonsGameplayStatics.IsConsolePlatform
// 0x0001 (0x0001 - 0x0000)
struct CommonsGameplayStatics_IsConsolePlatform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonsGameplayStatics_IsConsolePlatform) == 0x000001, "Wrong alignment on CommonsGameplayStatics_IsConsolePlatform");
static_assert(sizeof(CommonsGameplayStatics_IsConsolePlatform) == 0x000001, "Wrong size on CommonsGameplayStatics_IsConsolePlatform");
static_assert(offsetof(CommonsGameplayStatics_IsConsolePlatform, ReturnValue) == 0x000000, "Member 'CommonsGameplayStatics_IsConsolePlatform::ReturnValue' has a wrong offset!");

// Function Commons.CommonsGameplayStatics.IsLinuxPlatform
// 0x0001 (0x0001 - 0x0000)
struct CommonsGameplayStatics_IsLinuxPlatform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonsGameplayStatics_IsLinuxPlatform) == 0x000001, "Wrong alignment on CommonsGameplayStatics_IsLinuxPlatform");
static_assert(sizeof(CommonsGameplayStatics_IsLinuxPlatform) == 0x000001, "Wrong size on CommonsGameplayStatics_IsLinuxPlatform");
static_assert(offsetof(CommonsGameplayStatics_IsLinuxPlatform, ReturnValue) == 0x000000, "Member 'CommonsGameplayStatics_IsLinuxPlatform::ReturnValue' has a wrong offset!");

// Function Commons.CommonsGameplayStatics.IsMacPlatform
// 0x0001 (0x0001 - 0x0000)
struct CommonsGameplayStatics_IsMacPlatform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonsGameplayStatics_IsMacPlatform) == 0x000001, "Wrong alignment on CommonsGameplayStatics_IsMacPlatform");
static_assert(sizeof(CommonsGameplayStatics_IsMacPlatform) == 0x000001, "Wrong size on CommonsGameplayStatics_IsMacPlatform");
static_assert(offsetof(CommonsGameplayStatics_IsMacPlatform, ReturnValue) == 0x000000, "Member 'CommonsGameplayStatics_IsMacPlatform::ReturnValue' has a wrong offset!");

// Function Commons.CommonsGameplayStatics.IsPIE
// 0x0001 (0x0001 - 0x0000)
struct CommonsGameplayStatics_IsPIE final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonsGameplayStatics_IsPIE) == 0x000001, "Wrong alignment on CommonsGameplayStatics_IsPIE");
static_assert(sizeof(CommonsGameplayStatics_IsPIE) == 0x000001, "Wrong size on CommonsGameplayStatics_IsPIE");
static_assert(offsetof(CommonsGameplayStatics_IsPIE, ReturnValue) == 0x000000, "Member 'CommonsGameplayStatics_IsPIE::ReturnValue' has a wrong offset!");

// Function Commons.CommonsGameplayStatics.IsPs4Platform
// 0x0001 (0x0001 - 0x0000)
struct CommonsGameplayStatics_IsPs4Platform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonsGameplayStatics_IsPs4Platform) == 0x000001, "Wrong alignment on CommonsGameplayStatics_IsPs4Platform");
static_assert(sizeof(CommonsGameplayStatics_IsPs4Platform) == 0x000001, "Wrong size on CommonsGameplayStatics_IsPs4Platform");
static_assert(offsetof(CommonsGameplayStatics_IsPs4Platform, ReturnValue) == 0x000000, "Member 'CommonsGameplayStatics_IsPs4Platform::ReturnValue' has a wrong offset!");

// Function Commons.CommonsGameplayStatics.IsPS5Ext
// 0x0001 (0x0001 - 0x0000)
struct CommonsGameplayStatics_IsPS5Ext final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonsGameplayStatics_IsPS5Ext) == 0x000001, "Wrong alignment on CommonsGameplayStatics_IsPS5Ext");
static_assert(sizeof(CommonsGameplayStatics_IsPS5Ext) == 0x000001, "Wrong size on CommonsGameplayStatics_IsPS5Ext");
static_assert(offsetof(CommonsGameplayStatics_IsPS5Ext, ReturnValue) == 0x000000, "Member 'CommonsGameplayStatics_IsPS5Ext::ReturnValue' has a wrong offset!");

// Function Commons.CommonsGameplayStatics.IsPs5Platform
// 0x0001 (0x0001 - 0x0000)
struct CommonsGameplayStatics_IsPs5Platform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonsGameplayStatics_IsPs5Platform) == 0x000001, "Wrong alignment on CommonsGameplayStatics_IsPs5Platform");
static_assert(sizeof(CommonsGameplayStatics_IsPs5Platform) == 0x000001, "Wrong size on CommonsGameplayStatics_IsPs5Platform");
static_assert(offsetof(CommonsGameplayStatics_IsPs5Platform, ReturnValue) == 0x000000, "Member 'CommonsGameplayStatics_IsPs5Platform::ReturnValue' has a wrong offset!");

// Function Commons.CommonsGameplayStatics.IsScarletPlatform
// 0x0001 (0x0001 - 0x0000)
struct CommonsGameplayStatics_IsScarletPlatform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonsGameplayStatics_IsScarletPlatform) == 0x000001, "Wrong alignment on CommonsGameplayStatics_IsScarletPlatform");
static_assert(sizeof(CommonsGameplayStatics_IsScarletPlatform) == 0x000001, "Wrong size on CommonsGameplayStatics_IsScarletPlatform");
static_assert(offsetof(CommonsGameplayStatics_IsScarletPlatform, ReturnValue) == 0x000000, "Member 'CommonsGameplayStatics_IsScarletPlatform::ReturnValue' has a wrong offset!");

// Function Commons.CommonsGameplayStatics.IsSonyPlatform
// 0x0001 (0x0001 - 0x0000)
struct CommonsGameplayStatics_IsSonyPlatform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonsGameplayStatics_IsSonyPlatform) == 0x000001, "Wrong alignment on CommonsGameplayStatics_IsSonyPlatform");
static_assert(sizeof(CommonsGameplayStatics_IsSonyPlatform) == 0x000001, "Wrong size on CommonsGameplayStatics_IsSonyPlatform");
static_assert(offsetof(CommonsGameplayStatics_IsSonyPlatform, ReturnValue) == 0x000000, "Member 'CommonsGameplayStatics_IsSonyPlatform::ReturnValue' has a wrong offset!");

// Function Commons.CommonsGameplayStatics.IsSwitchPlatform
// 0x0001 (0x0001 - 0x0000)
struct CommonsGameplayStatics_IsSwitchPlatform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonsGameplayStatics_IsSwitchPlatform) == 0x000001, "Wrong alignment on CommonsGameplayStatics_IsSwitchPlatform");
static_assert(sizeof(CommonsGameplayStatics_IsSwitchPlatform) == 0x000001, "Wrong size on CommonsGameplayStatics_IsSwitchPlatform");
static_assert(offsetof(CommonsGameplayStatics_IsSwitchPlatform, ReturnValue) == 0x000000, "Member 'CommonsGameplayStatics_IsSwitchPlatform::ReturnValue' has a wrong offset!");

// Function Commons.CommonsGameplayStatics.IsWindowsPlatform
// 0x0001 (0x0001 - 0x0000)
struct CommonsGameplayStatics_IsWindowsPlatform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonsGameplayStatics_IsWindowsPlatform) == 0x000001, "Wrong alignment on CommonsGameplayStatics_IsWindowsPlatform");
static_assert(sizeof(CommonsGameplayStatics_IsWindowsPlatform) == 0x000001, "Wrong size on CommonsGameplayStatics_IsWindowsPlatform");
static_assert(offsetof(CommonsGameplayStatics_IsWindowsPlatform, ReturnValue) == 0x000000, "Member 'CommonsGameplayStatics_IsWindowsPlatform::ReturnValue' has a wrong offset!");

// Function Commons.CommonsGameplayStatics.IsXLockhart
// 0x0001 (0x0001 - 0x0000)
struct CommonsGameplayStatics_IsXLockhart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonsGameplayStatics_IsXLockhart) == 0x000001, "Wrong alignment on CommonsGameplayStatics_IsXLockhart");
static_assert(sizeof(CommonsGameplayStatics_IsXLockhart) == 0x000001, "Wrong size on CommonsGameplayStatics_IsXLockhart");
static_assert(offsetof(CommonsGameplayStatics_IsXLockhart, ReturnValue) == 0x000000, "Member 'CommonsGameplayStatics_IsXLockhart::ReturnValue' has a wrong offset!");

// Function Commons.CommonsGameplayStatics.IsXOnePlatform
// 0x0001 (0x0001 - 0x0000)
struct CommonsGameplayStatics_IsXOnePlatform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonsGameplayStatics_IsXOnePlatform) == 0x000001, "Wrong alignment on CommonsGameplayStatics_IsXOnePlatform");
static_assert(sizeof(CommonsGameplayStatics_IsXOnePlatform) == 0x000001, "Wrong size on CommonsGameplayStatics_IsXOnePlatform");
static_assert(offsetof(CommonsGameplayStatics_IsXOnePlatform, ReturnValue) == 0x000000, "Member 'CommonsGameplayStatics_IsXOnePlatform::ReturnValue' has a wrong offset!");

// Function Commons.CommonsGameplayStatics.IsXPlatform
// 0x0001 (0x0001 - 0x0000)
struct CommonsGameplayStatics_IsXPlatform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonsGameplayStatics_IsXPlatform) == 0x000001, "Wrong alignment on CommonsGameplayStatics_IsXPlatform");
static_assert(sizeof(CommonsGameplayStatics_IsXPlatform) == 0x000001, "Wrong size on CommonsGameplayStatics_IsXPlatform");
static_assert(offsetof(CommonsGameplayStatics_IsXPlatform, ReturnValue) == 0x000000, "Member 'CommonsGameplayStatics_IsXPlatform::ReturnValue' has a wrong offset!");

// Function Commons.CommonsGameplayStatics.IsXScorpio
// 0x0001 (0x0001 - 0x0000)
struct CommonsGameplayStatics_IsXScorpio final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonsGameplayStatics_IsXScorpio) == 0x000001, "Wrong alignment on CommonsGameplayStatics_IsXScorpio");
static_assert(sizeof(CommonsGameplayStatics_IsXScorpio) == 0x000001, "Wrong size on CommonsGameplayStatics_IsXScorpio");
static_assert(offsetof(CommonsGameplayStatics_IsXScorpio, ReturnValue) == 0x000000, "Member 'CommonsGameplayStatics_IsXScorpio::ReturnValue' has a wrong offset!");

// Function Commons.CommonsGameplayStatics.IsXSXPlatform
// 0x0001 (0x0001 - 0x0000)
struct CommonsGameplayStatics_IsXSXPlatform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonsGameplayStatics_IsXSXPlatform) == 0x000001, "Wrong alignment on CommonsGameplayStatics_IsXSXPlatform");
static_assert(sizeof(CommonsGameplayStatics_IsXSXPlatform) == 0x000001, "Wrong size on CommonsGameplayStatics_IsXSXPlatform");
static_assert(offsetof(CommonsGameplayStatics_IsXSXPlatform, ReturnValue) == 0x000000, "Member 'CommonsGameplayStatics_IsXSXPlatform::ReturnValue' has a wrong offset!");

// Function Commons.CommonsGameplayStatics.PlayGameplaySound2D
// 0x0030 (0x0030 - 0x0000)
struct CommonsGameplayStatics_PlayGameplaySound2D final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OwningActor;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonsGameplayStatics_PlayGameplaySound2D) == 0x000008, "Wrong alignment on CommonsGameplayStatics_PlayGameplaySound2D");
static_assert(sizeof(CommonsGameplayStatics_PlayGameplaySound2D) == 0x000030, "Wrong size on CommonsGameplayStatics_PlayGameplaySound2D");
static_assert(offsetof(CommonsGameplayStatics_PlayGameplaySound2D, WorldContextObject) == 0x000000, "Member 'CommonsGameplayStatics_PlayGameplaySound2D::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CommonsGameplayStatics_PlayGameplaySound2D, Sound) == 0x000008, "Member 'CommonsGameplayStatics_PlayGameplaySound2D::Sound' has a wrong offset!");
static_assert(offsetof(CommonsGameplayStatics_PlayGameplaySound2D, VolumeMultiplier) == 0x000010, "Member 'CommonsGameplayStatics_PlayGameplaySound2D::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(CommonsGameplayStatics_PlayGameplaySound2D, PitchMultiplier) == 0x000014, "Member 'CommonsGameplayStatics_PlayGameplaySound2D::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(CommonsGameplayStatics_PlayGameplaySound2D, StartTime) == 0x000018, "Member 'CommonsGameplayStatics_PlayGameplaySound2D::StartTime' has a wrong offset!");
static_assert(offsetof(CommonsGameplayStatics_PlayGameplaySound2D, ConcurrencySettings) == 0x000020, "Member 'CommonsGameplayStatics_PlayGameplaySound2D::ConcurrencySettings' has a wrong offset!");
static_assert(offsetof(CommonsGameplayStatics_PlayGameplaySound2D, OwningActor) == 0x000028, "Member 'CommonsGameplayStatics_PlayGameplaySound2D::OwningActor' has a wrong offset!");

// Function Commons.CommonsGameplayStatics.PostFinalizeActorComponentCreation
// 0x0010 (0x0010 - 0x0000)
struct CommonsGameplayStatics_PostFinalizeActorComponentCreation final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonsGameplayStatics_PostFinalizeActorComponentCreation) == 0x000008, "Wrong alignment on CommonsGameplayStatics_PostFinalizeActorComponentCreation");
static_assert(sizeof(CommonsGameplayStatics_PostFinalizeActorComponentCreation) == 0x000010, "Wrong size on CommonsGameplayStatics_PostFinalizeActorComponentCreation");
static_assert(offsetof(CommonsGameplayStatics_PostFinalizeActorComponentCreation, Actor) == 0x000000, "Member 'CommonsGameplayStatics_PostFinalizeActorComponentCreation::Actor' has a wrong offset!");
static_assert(offsetof(CommonsGameplayStatics_PostFinalizeActorComponentCreation, Component) == 0x000008, "Member 'CommonsGameplayStatics_PostFinalizeActorComponentCreation::Component' has a wrong offset!");

// Function Commons.CommonsGameplayStatics.SpawnGameplaySound2D
// 0x0038 (0x0038 - 0x0000)
struct CommonsGameplayStatics_SpawnGameplaySound2D final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PersistAcrossLevelTransition;                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoDestroy;                                       // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonsGameplayStatics_SpawnGameplaySound2D) == 0x000008, "Wrong alignment on CommonsGameplayStatics_SpawnGameplaySound2D");
static_assert(sizeof(CommonsGameplayStatics_SpawnGameplaySound2D) == 0x000038, "Wrong size on CommonsGameplayStatics_SpawnGameplaySound2D");
static_assert(offsetof(CommonsGameplayStatics_SpawnGameplaySound2D, WorldContextObject) == 0x000000, "Member 'CommonsGameplayStatics_SpawnGameplaySound2D::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CommonsGameplayStatics_SpawnGameplaySound2D, Sound) == 0x000008, "Member 'CommonsGameplayStatics_SpawnGameplaySound2D::Sound' has a wrong offset!");
static_assert(offsetof(CommonsGameplayStatics_SpawnGameplaySound2D, VolumeMultiplier) == 0x000010, "Member 'CommonsGameplayStatics_SpawnGameplaySound2D::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(CommonsGameplayStatics_SpawnGameplaySound2D, PitchMultiplier) == 0x000014, "Member 'CommonsGameplayStatics_SpawnGameplaySound2D::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(CommonsGameplayStatics_SpawnGameplaySound2D, StartTime) == 0x000018, "Member 'CommonsGameplayStatics_SpawnGameplaySound2D::StartTime' has a wrong offset!");
static_assert(offsetof(CommonsGameplayStatics_SpawnGameplaySound2D, ConcurrencySettings) == 0x000020, "Member 'CommonsGameplayStatics_SpawnGameplaySound2D::ConcurrencySettings' has a wrong offset!");
static_assert(offsetof(CommonsGameplayStatics_SpawnGameplaySound2D, PersistAcrossLevelTransition) == 0x000028, "Member 'CommonsGameplayStatics_SpawnGameplaySound2D::PersistAcrossLevelTransition' has a wrong offset!");
static_assert(offsetof(CommonsGameplayStatics_SpawnGameplaySound2D, AutoDestroy) == 0x000029, "Member 'CommonsGameplayStatics_SpawnGameplaySound2D::AutoDestroy' has a wrong offset!");
static_assert(offsetof(CommonsGameplayStatics_SpawnGameplaySound2D, ReturnValue) == 0x000030, "Member 'CommonsGameplayStatics_SpawnGameplaySound2D::ReturnValue' has a wrong offset!");

// Function Commons.SharedBoolSwitchBlueprintUtility.Acquire
// 0x0018 (0x0018 - 0x0000)
struct SharedBoolSwitchBlueprintUtility_Acquire final
{
public:
	struct FSharedBoolSwitchBlueprint             BoolSwitch;                                        // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UObject*                                User;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SharedBoolSwitchBlueprintUtility_Acquire) == 0x000008, "Wrong alignment on SharedBoolSwitchBlueprintUtility_Acquire");
static_assert(sizeof(SharedBoolSwitchBlueprintUtility_Acquire) == 0x000018, "Wrong size on SharedBoolSwitchBlueprintUtility_Acquire");
static_assert(offsetof(SharedBoolSwitchBlueprintUtility_Acquire, BoolSwitch) == 0x000000, "Member 'SharedBoolSwitchBlueprintUtility_Acquire::BoolSwitch' has a wrong offset!");
static_assert(offsetof(SharedBoolSwitchBlueprintUtility_Acquire, User) == 0x000010, "Member 'SharedBoolSwitchBlueprintUtility_Acquire::User' has a wrong offset!");

// Function Commons.SharedBoolSwitchBlueprintUtility.ChangeDefaultValue
// 0x0018 (0x0018 - 0x0000)
struct SharedBoolSwitchBlueprintUtility_ChangeDefaultValue final
{
public:
	struct FSharedBoolSwitchBlueprint             BoolSwitch;                                        // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          NewDefaultValue;                                   // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SharedBoolSwitchBlueprintUtility_ChangeDefaultValue) == 0x000008, "Wrong alignment on SharedBoolSwitchBlueprintUtility_ChangeDefaultValue");
static_assert(sizeof(SharedBoolSwitchBlueprintUtility_ChangeDefaultValue) == 0x000018, "Wrong size on SharedBoolSwitchBlueprintUtility_ChangeDefaultValue");
static_assert(offsetof(SharedBoolSwitchBlueprintUtility_ChangeDefaultValue, BoolSwitch) == 0x000000, "Member 'SharedBoolSwitchBlueprintUtility_ChangeDefaultValue::BoolSwitch' has a wrong offset!");
static_assert(offsetof(SharedBoolSwitchBlueprintUtility_ChangeDefaultValue, NewDefaultValue) == 0x000010, "Member 'SharedBoolSwitchBlueprintUtility_ChangeDefaultValue::NewDefaultValue' has a wrong offset!");

// Function Commons.SharedBoolSwitchBlueprintUtility.ClearAllUsers
// 0x0010 (0x0010 - 0x0000)
struct SharedBoolSwitchBlueprintUtility_ClearAllUsers final
{
public:
	struct FSharedBoolSwitchBlueprint             BoolSwitch;                                        // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SharedBoolSwitchBlueprintUtility_ClearAllUsers) == 0x000008, "Wrong alignment on SharedBoolSwitchBlueprintUtility_ClearAllUsers");
static_assert(sizeof(SharedBoolSwitchBlueprintUtility_ClearAllUsers) == 0x000010, "Wrong size on SharedBoolSwitchBlueprintUtility_ClearAllUsers");
static_assert(offsetof(SharedBoolSwitchBlueprintUtility_ClearAllUsers, BoolSwitch) == 0x000000, "Member 'SharedBoolSwitchBlueprintUtility_ClearAllUsers::BoolSwitch' has a wrong offset!");

// Function Commons.SharedBoolSwitchBlueprintUtility.GetCurrentValue
// 0x0018 (0x0018 - 0x0000)
struct SharedBoolSwitchBlueprintUtility_GetCurrentValue final
{
public:
	struct FSharedBoolSwitchBlueprint             BoolSwitch;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SharedBoolSwitchBlueprintUtility_GetCurrentValue) == 0x000008, "Wrong alignment on SharedBoolSwitchBlueprintUtility_GetCurrentValue");
static_assert(sizeof(SharedBoolSwitchBlueprintUtility_GetCurrentValue) == 0x000018, "Wrong size on SharedBoolSwitchBlueprintUtility_GetCurrentValue");
static_assert(offsetof(SharedBoolSwitchBlueprintUtility_GetCurrentValue, BoolSwitch) == 0x000000, "Member 'SharedBoolSwitchBlueprintUtility_GetCurrentValue::BoolSwitch' has a wrong offset!");
static_assert(offsetof(SharedBoolSwitchBlueprintUtility_GetCurrentValue, ReturnValue) == 0x000010, "Member 'SharedBoolSwitchBlueprintUtility_GetCurrentValue::ReturnValue' has a wrong offset!");

// Function Commons.SharedBoolSwitchBlueprintUtility.GetDefaultValue
// 0x0018 (0x0018 - 0x0000)
struct SharedBoolSwitchBlueprintUtility_GetDefaultValue final
{
public:
	struct FSharedBoolSwitchBlueprint             BoolSwitch;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SharedBoolSwitchBlueprintUtility_GetDefaultValue) == 0x000008, "Wrong alignment on SharedBoolSwitchBlueprintUtility_GetDefaultValue");
static_assert(sizeof(SharedBoolSwitchBlueprintUtility_GetDefaultValue) == 0x000018, "Wrong size on SharedBoolSwitchBlueprintUtility_GetDefaultValue");
static_assert(offsetof(SharedBoolSwitchBlueprintUtility_GetDefaultValue, BoolSwitch) == 0x000000, "Member 'SharedBoolSwitchBlueprintUtility_GetDefaultValue::BoolSwitch' has a wrong offset!");
static_assert(offsetof(SharedBoolSwitchBlueprintUtility_GetDefaultValue, ReturnValue) == 0x000010, "Member 'SharedBoolSwitchBlueprintUtility_GetDefaultValue::ReturnValue' has a wrong offset!");

// Function Commons.SharedBoolSwitchBlueprintUtility.IsSwitched
// 0x0018 (0x0018 - 0x0000)
struct SharedBoolSwitchBlueprintUtility_IsSwitched final
{
public:
	struct FSharedBoolSwitchBlueprint             BoolSwitch;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SharedBoolSwitchBlueprintUtility_IsSwitched) == 0x000008, "Wrong alignment on SharedBoolSwitchBlueprintUtility_IsSwitched");
static_assert(sizeof(SharedBoolSwitchBlueprintUtility_IsSwitched) == 0x000018, "Wrong size on SharedBoolSwitchBlueprintUtility_IsSwitched");
static_assert(offsetof(SharedBoolSwitchBlueprintUtility_IsSwitched, BoolSwitch) == 0x000000, "Member 'SharedBoolSwitchBlueprintUtility_IsSwitched::BoolSwitch' has a wrong offset!");
static_assert(offsetof(SharedBoolSwitchBlueprintUtility_IsSwitched, ReturnValue) == 0x000010, "Member 'SharedBoolSwitchBlueprintUtility_IsSwitched::ReturnValue' has a wrong offset!");

// Function Commons.SharedBoolSwitchBlueprintUtility.Release
// 0x0018 (0x0018 - 0x0000)
struct SharedBoolSwitchBlueprintUtility_Release final
{
public:
	struct FSharedBoolSwitchBlueprint             BoolSwitch;                                        // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UObject*                                User;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SharedBoolSwitchBlueprintUtility_Release) == 0x000008, "Wrong alignment on SharedBoolSwitchBlueprintUtility_Release");
static_assert(sizeof(SharedBoolSwitchBlueprintUtility_Release) == 0x000018, "Wrong size on SharedBoolSwitchBlueprintUtility_Release");
static_assert(offsetof(SharedBoolSwitchBlueprintUtility_Release, BoolSwitch) == 0x000000, "Member 'SharedBoolSwitchBlueprintUtility_Release::BoolSwitch' has a wrong offset!");
static_assert(offsetof(SharedBoolSwitchBlueprintUtility_Release, User) == 0x000010, "Member 'SharedBoolSwitchBlueprintUtility_Release::User' has a wrong offset!");

}

