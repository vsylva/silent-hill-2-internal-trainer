#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Mai

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Being_structs.hpp"
#include "AIModule_structs.hpp"
#include "Dai_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum Mai.EMaiAggroStance
// NumValues: 0x0004
enum class EMaiAggroStance : uint8
{
	Neutral                                  = 0,
	Cautious                                 = 1,
	Aggressive                               = 2,
	Max                                      = 3,
};

// Enum Mai.ESplineMoveResult
// NumValues: 0x0005
enum class ESplineMoveResult : uint8
{
	UNKNOWN                                  = 0,
	COMPLETED                                = 1,
	BREAKED                                  = 2,
	FAILED                                   = 3,
	ESplineMoveResult_MAX                    = 4,
};

// Enum Mai.EBeingActionFailHandling
// NumValues: 0x0003
enum class EBeingActionFailHandling : uint8
{
	RequireSuccess                           = 0,
	IgnoreFailure                            = 1,
	EBeingActionFailHandling_MAX             = 2,
};

// Enum Mai.EMaiSyncRotationMode
// NumValues: 0x0005
enum class EMaiSyncRotationMode : uint8
{
	TowardsTheOwner                          = 0,
	TowardsTheOther                          = 1,
	UseOwnerRotation                         = 2,
	UseOtherRotation                         = 3,
	EMaiSyncRotationMode_MAX                 = 4,
};

// Enum Mai.EMaiSenseType
// NumValues: 0x0009
enum class EMaiSenseType : uint8
{
	Any                                      = 0,
	Sight                                    = 1,
	Hearing                                  = 2,
	Pain                                     = 3,
	Smell                                    = 4,
	Touch                                    = 5,
	The6thSense                              = 6,
	COUNT                                    = 7,
	EMaiSenseType_MAX                        = 8,
};

// Enum Mai.EMaiShapeType
// NumValues: 0x0005
enum class EMaiShapeType : uint8
{
	None                                     = 0,
	Sphere                                   = 1,
	Box                                      = 2,
	Cylinder                                 = 3,
	EMaiShapeType_MAX                        = 4,
};

// Enum Mai.EMaiAttackStatus
// NumValues: 0x0005
enum class EMaiAttackStatus : uint8
{
	Undefined                                = 0,
	InProgress                               = 1,
	Aborted                                  = 2,
	Finished                                 = 3,
	EMaiAttackStatus_MAX                     = 4,
};

// Enum Mai.EMaiAttackDodgeReaction
// NumValues: 0x0005
enum class EMaiAttackDodgeReaction : uint8
{
	Off                                      = 0,
	On                                       = 1,
	Notify                                   = 2,
	TimeToHitEnemy                           = 3,
	EMaiAttackDodgeReaction_MAX              = 4,
};

// Enum Mai.EMaiAttackFocus
// NumValues: 0x0005
enum class EMaiAttackFocus : uint8
{
	Manual                                   = 0,
	AllTime                                  = 1,
	TillLastHit                              = 2,
	ToFirstBlow                              = 3,
	EMaiAttackFocus_MAX                      = 4,
};

// Enum Mai.EMaiAttackSnap
// NumValues: 0x0005
enum class EMaiAttackSnap : uint8
{
	Off                                      = 0,
	Sliding                                  = 1,
	TlouPureRM                               = 2,
	TlouSlide                                = 3,
	EMaiAttackSnap_MAX                       = 4,
};

// Enum Mai.EMaiAttackInitialStance
// NumValues: 0x0004
enum class EMaiAttackInitialStance : uint8
{
	Any                                      = 0,
	InPlace                                  = 1,
	InMotion                                 = 2,
	EMaiAttackInitialStance_MAX              = 3,
};

// Enum Mai.EMaiAttackRange
// NumValues: 0x0006
enum class EMaiAttackRange : uint8
{
	InRange                                  = 0,
	TooClose                                 = 1,
	TooFar                                   = 2,
	Closer                                   = 3,
	Farther                                  = 4,
	EMaiAttackRange_MAX                      = 5,
};

// Enum Mai.EMaiNodePathExistanceQueryType
// NumValues: 0x0003
enum class EMaiNodePathExistanceQueryType : uint8
{
	Raycast                                  = 0,
	PathFinding                              = 1,
	EMaiNodePathExistanceQueryType_MAX       = 2,
};

// Enum Mai.EMaiWallPathExistanceQueryType
// NumValues: 0x0003
enum class EMaiWallPathExistanceQueryType : uint8
{
	Raycast                                  = 0,
	PathFinding                              = 1,
	EMaiWallPathExistanceQueryType_MAX       = 2,
};

// Enum Mai.EMaiFocusType
// NumValues: 0x0004
enum class EMaiFocusType : uint8
{
	HeadOnly                                 = 0,
	BodyOnly                                 = 1,
	Full                                     = 2,
	EMaiFocusType_MAX                        = 3,
};

// Enum Mai.EMaiOnPathFail
// NumValues: 0x0004
enum class EMaiOnPathFail : uint8
{
	Nothing                                  = 0,
	Teleport                                 = 1,
	MoveDirect                               = 2,
	EMaiOnPathFail_MAX                       = 3,
};

// Enum Mai.EMaiWallOnPathFail
// NumValues: 0x0004
enum class EMaiWallOnPathFail : uint8
{
	Nothing                                  = 0,
	Teleport                                 = 1,
	MoveDirect                               = 2,
	EMaiWallOnPathFail_MAX                   = 3,
};

// Enum Mai.EMaiTribool
// NumValues: 0x0004
enum class EMaiTribool : uint8
{
	Unkonown                                 = 0,
	Set                                      = 1,
	Unset                                    = 2,
	EMaiTribool_MAX                          = 3,
};

// Enum Mai.ENavMeshState
// NumValues: 0x0005
enum class ENavMeshState : uint8
{
	None                                     = 0,
	Loaded                                   = 1,
	Built                                    = 2,
	Ready                                    = 3,
	ENavMeshState_MAX                        = 4,
};

// Enum Mai.EMaiActionPointState
// NumValues: 0x0005
enum class EMaiActionPointState : uint8
{
	None                                     = 0,
	Goto                                     = 1,
	Reached                                  = 2,
	Used                                     = 3,
	EMaiActionPointState_MAX                 = 4,
};

// Enum Mai.EMaiSelectionMethod
// NumValues: 0x0004
enum class EMaiSelectionMethod : uint8
{
	NEAREST                                  = 0,
	HIGHEST_WEIGHT                           = 1,
	PERCENTAGE_CHANCE                        = 2,
	EMaiSelectionMethod_MAX                  = 3,
};

// Enum Mai.EMaiParty
// NumValues: 0x0026
enum class EMaiParty : uint8
{
	PARTY_0                                  = 0,
	PARTY_1                                  = 1,
	PARTY_2                                  = 2,
	PARTY_3                                  = 3,
	PARTY_4                                  = 4,
	PARTY_5                                  = 5,
	PARTY_6                                  = 6,
	PARTY_7                                  = 7,
	PARTY_8                                  = 8,
	PARTY_9                                  = 9,
	PARTY_10                                 = 10,
	PARTY_11                                 = 11,
	PARTY_12                                 = 12,
	PARTY_13                                 = 13,
	PARTY_14                                 = 14,
	PARTY_15                                 = 15,
	PARTY_16                                 = 16,
	PARTY_17                                 = 17,
	PARTY_18                                 = 18,
	PARTY_19                                 = 19,
	PARTY_20                                 = 20,
	PARTY_21                                 = 21,
	PARTY_22                                 = 22,
	PARTY_23                                 = 23,
	PARTY_24                                 = 24,
	PARTY_25                                 = 25,
	PARTY_26                                 = 26,
	PARTY_27                                 = 27,
	PARTY_28                                 = 28,
	PARTY_29                                 = 29,
	PARTY_30                                 = 30,
	PARTY_31                                 = 31,
	ALLY                                     = 251,
	NEUTRAL                                  = 252,
	ENEMY                                    = 253,
	PLAYER                                   = 254,
	NONE                                     = 255,
	EMaiParty_MAX                            = 256,
};

// Enum Mai.EMaiToken
// NumValues: 0x0022
enum class EMaiToken : uint8
{
	TOKEN_0                                  = 0,
	TOKEN_1                                  = 1,
	TOKEN_2                                  = 2,
	TOKEN_3                                  = 3,
	TOKEN_4                                  = 4,
	TOKEN_5                                  = 5,
	TOKEN_6                                  = 6,
	TOKEN_7                                  = 7,
	TOKEN_8                                  = 8,
	TOKEN_9                                  = 9,
	TOKEN_10                                 = 10,
	TOKEN_11                                 = 11,
	TOKEN_12                                 = 12,
	TOKEN_13                                 = 13,
	TOKEN_14                                 = 14,
	TOKEN_15                                 = 15,
	TOKEN_16                                 = 16,
	TOKEN_17                                 = 17,
	TOKEN_18                                 = 18,
	TOKEN_19                                 = 19,
	TOKEN_20                                 = 20,
	TOKEN_21                                 = 21,
	TOKEN_22                                 = 22,
	TOKEN_23                                 = 23,
	TOKEN_24                                 = 24,
	TOKEN_25                                 = 25,
	TOKEN_26                                 = 26,
	TOKEN_27                                 = 27,
	TOKEN_28                                 = 28,
	TOKEN_29                                 = 29,
	TOKEN_30                                 = 30,
	TOKEN_31                                 = 31,
	TOKEN_COUNT                              = 32,
	TOKEN_MAX                                = 33,
};

// Enum Mai.EPointSelection
// NumValues: 0x0005
enum class EPointSelection : uint8
{
	PathOnly                                 = 0,
	Random                                   = 1,
	Nearest                                  = 2,
	Farthest                                 = 3,
	EPointSelection_MAX                      = 4,
};

// Enum Mai.EMaiDifficultyLevel
// NumValues: 0x000C
enum class EMaiDifficultyLevel : uint8
{
	NONE                                     = 0,
	Story                                    = 1,
	VeryEasy                                 = 2,
	Easy                                     = 3,
	Easier                                   = 4,
	Default                                  = 5,
	Harder                                   = 6,
	Hard                                     = 7,
	VeryHard                                 = 8,
	Hell                                     = 9,
	COUNT                                    = 10,
	EMaiDifficultyLevel_MAX                  = 11,
};

// Enum Mai.EEqsVisitedAPScore
// NumValues: 0x0004
enum class EEqsVisitedAPScore : uint8
{
	NullScore                                = 0,
	HalfScore                                = 1,
	ProgressiveScore                         = 2,
	EEqsVisitedAPScore_MAX                   = 3,
};

// Enum Mai.EMaiLookAt
// NumValues: 0x0006
enum class EMaiLookAt : uint8
{
	ACTOR                                    = 0,
	COMPONENT                                = 1,
	LOCATION                                 = 2,
	ROTATION                                 = 3,
	COUNT                                    = 4,
	EMaiLookAt_MAX                           = 5,
};

// Enum Mai.EPartyAttitude
// NumValues: 0x0005
enum class EPartyAttitude : uint8
{
	Unknown                                  = 0,
	Friendly                                 = 1,
	Neutral                                  = 2,
	Hostile                                  = 3,
	EPartyAttitude_MAX                       = 4,
};

// Enum Mai.ENavAreaFlag
// NumValues: 0x0004
enum class ENavAreaFlag : uint8
{
	Default                                  = 0,
	Jump                                     = 1,
	Crouch                                   = 2,
	ENavAreaFlag_MAX                         = 3,
};

// Enum Mai.EMaiDespawnReason
// NumValues: 0x0006
enum class EMaiDespawnReason : uint8
{
	None                                     = 0,
	OnSpawnAreaExit                          = 1,
	OnSpawnerDeactivate                      = 2,
	OnSpawnerUnload                          = 3,
	OnFloorUnload                            = 4,
	EMaiDespawnReason_MAX                    = 5,
};

// Enum Mai.EMaiTickLOD
// NumValues: 0x0006
enum class EMaiTickLOD : uint8
{
	TickLOD0                                 = 0,
	TickLOD1                                 = 1,
	TickLOD2                                 = 2,
	TickLOD3                                 = 3,
	COUNT                                    = 3,
	EMaiTickLOD_MAX                          = 4,
};

// Enum Mai.EMaiOnMeshState
// NumValues: 0x0004
enum class EMaiOnMeshState : uint8
{
	Unknown                                  = 0,
	OnMesh                                   = 1,
	OffMesh                                  = 2,
	EMaiOnMeshState_MAX                      = 3,
};

// Enum Mai.EMaiWallFollowingStatus
// NumValues: 0x0005
enum class EMaiWallFollowingStatus : uint8
{
	Idle                                     = 0,
	Waiting                                  = 1,
	Paused                                   = 2,
	Moving                                   = 3,
	EMaiWallFollowingStatus_MAX              = 4,
};

// Enum Mai.EMaiVoxelSide
// NumValues: 0x0008
enum class EMaiVoxelSide : uint8
{
	TOP                                      = 0,
	BOTTOM                                   = 1,
	NORTH                                    = 2,
	SOUTH                                    = 3,
	WEST                                     = 4,
	EAST                                     = 5,
	COUNT                                    = 6,
	EMaiVoxelSide_MAX                        = 7,
};

// Enum Mai.EMaiVoxelFlags
// NumValues: 0x000A
enum class EMaiVoxelFlags : uint8
{
	UNKNOWN                                  = 0,
	TOP                                      = 1,
	BOTTOM                                   = 2,
	NORTH                                    = 4,
	SOUTH                                    = 8,
	WEST                                     = 16,
	EAST                                     = 32,
	FILLED                                   = 64,
	INVALID                                  = 128,
	EMaiVoxelFlags_MAX                       = 129,
};

// Enum Mai.EMaiLinkType
// NumValues: 0x0005
enum class EMaiLinkType : uint8
{
	Internal                                 = 0,
	External                                 = 1,
	BetweenSurfaces                          = 2,
	PointLink                                = 3,
	EMaiLinkType_MAX                         = 4,
};

// Enum Mai.EMaiEnvTestPathfinding
// NumValues: 0x0004
enum class EMaiEnvTestPathfinding : uint8
{
	PathExist                                = 0,
	PathCost                                 = 1,
	PathLength                               = 2,
	EMaiEnvTestPathfinding_MAX               = 3,
};

// ScriptStruct Mai.MaiTickIntervalRange
// 0x0008 (0x0008 - 0x0000)
struct FMaiTickIntervalRange final
{
public:
	float                                         _MinInterval;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _MaxInterval;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiTickIntervalRange) == 0x000004, "Wrong alignment on FMaiTickIntervalRange");
static_assert(sizeof(FMaiTickIntervalRange) == 0x000008, "Wrong size on FMaiTickIntervalRange");
static_assert(offsetof(FMaiTickIntervalRange, _MinInterval) == 0x000000, "Member 'FMaiTickIntervalRange::_MinInterval' has a wrong offset!");
static_assert(offsetof(FMaiTickIntervalRange, _MaxInterval) == 0x000004, "Member 'FMaiTickIntervalRange::_MaxInterval' has a wrong offset!");

// ScriptStruct Mai.MaiActionPointQuery
// 0x0030 (0x0030 - 0x0000)
struct FMaiActionPointQuery final
{
public:
	class AMaiController*                         _User;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _FromGraph;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _FromObjects;                                      // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _CheckWeight;                                      // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _SequenceOnly;                                     // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _Usable;                                           // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _Safe;                                             // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _Radius;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                _Location;                                         // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiActionPointQuery) == 0x000008, "Wrong alignment on FMaiActionPointQuery");
static_assert(sizeof(FMaiActionPointQuery) == 0x000030, "Wrong size on FMaiActionPointQuery");
static_assert(offsetof(FMaiActionPointQuery, _User) == 0x000000, "Member 'FMaiActionPointQuery::_User' has a wrong offset!");
static_assert(offsetof(FMaiActionPointQuery, _FromGraph) == 0x000008, "Member 'FMaiActionPointQuery::_FromGraph' has a wrong offset!");
static_assert(offsetof(FMaiActionPointQuery, _FromObjects) == 0x000009, "Member 'FMaiActionPointQuery::_FromObjects' has a wrong offset!");
static_assert(offsetof(FMaiActionPointQuery, _CheckWeight) == 0x00000A, "Member 'FMaiActionPointQuery::_CheckWeight' has a wrong offset!");
static_assert(offsetof(FMaiActionPointQuery, _SequenceOnly) == 0x00000B, "Member 'FMaiActionPointQuery::_SequenceOnly' has a wrong offset!");
static_assert(offsetof(FMaiActionPointQuery, _Usable) == 0x00000C, "Member 'FMaiActionPointQuery::_Usable' has a wrong offset!");
static_assert(offsetof(FMaiActionPointQuery, _Safe) == 0x00000D, "Member 'FMaiActionPointQuery::_Safe' has a wrong offset!");
static_assert(offsetof(FMaiActionPointQuery, _Radius) == 0x000010, "Member 'FMaiActionPointQuery::_Radius' has a wrong offset!");
static_assert(offsetof(FMaiActionPointQuery, _Location) == 0x000018, "Member 'FMaiActionPointQuery::_Location' has a wrong offset!");

// ScriptStruct Mai.MaiVoxelInfo
// 0x0030 (0x0030 - 0x0000)
struct FMaiVoxelInfo final
{
public:
	EMaiVoxelSide                                 _Surface;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _Index;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             _Coords;                                           // 0x0008(0x000C)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             _TileCoords;                                       // 0x0014(0x000C)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _RawFlags;                                         // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _WalkableFlags;                                    // 0x0021(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _Dists[0x6];                                       // 0x0022(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _Regions[0x6];                                     // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaiVoxelInfo) == 0x000004, "Wrong alignment on FMaiVoxelInfo");
static_assert(sizeof(FMaiVoxelInfo) == 0x000030, "Wrong size on FMaiVoxelInfo");
static_assert(offsetof(FMaiVoxelInfo, _Surface) == 0x000000, "Member 'FMaiVoxelInfo::_Surface' has a wrong offset!");
static_assert(offsetof(FMaiVoxelInfo, _Index) == 0x000004, "Member 'FMaiVoxelInfo::_Index' has a wrong offset!");
static_assert(offsetof(FMaiVoxelInfo, _Coords) == 0x000008, "Member 'FMaiVoxelInfo::_Coords' has a wrong offset!");
static_assert(offsetof(FMaiVoxelInfo, _TileCoords) == 0x000014, "Member 'FMaiVoxelInfo::_TileCoords' has a wrong offset!");
static_assert(offsetof(FMaiVoxelInfo, _RawFlags) == 0x000020, "Member 'FMaiVoxelInfo::_RawFlags' has a wrong offset!");
static_assert(offsetof(FMaiVoxelInfo, _WalkableFlags) == 0x000021, "Member 'FMaiVoxelInfo::_WalkableFlags' has a wrong offset!");
static_assert(offsetof(FMaiVoxelInfo, _Dists) == 0x000022, "Member 'FMaiVoxelInfo::_Dists' has a wrong offset!");
static_assert(offsetof(FMaiVoxelInfo, _Regions) == 0x000028, "Member 'FMaiVoxelInfo::_Regions' has a wrong offset!");

// ScriptStruct Mai.MaiSyncActionConfig
// 0x0050 (0x0058 - 0x0008)
struct FMaiSyncActionConfig final : public FTableRowBase
{
public:
	struct FGameplayTagContainer                  _OwnerAnimTags;                                    // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  _OtherAnimTags;                                    // 0x0028(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         _PlayRate;                                         // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMaiAction_SyncAnimations>  _ActionClass;                                      // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiSyncActionConfig) == 0x000008, "Wrong alignment on FMaiSyncActionConfig");
static_assert(sizeof(FMaiSyncActionConfig) == 0x000058, "Wrong size on FMaiSyncActionConfig");
static_assert(offsetof(FMaiSyncActionConfig, _OwnerAnimTags) == 0x000008, "Member 'FMaiSyncActionConfig::_OwnerAnimTags' has a wrong offset!");
static_assert(offsetof(FMaiSyncActionConfig, _OtherAnimTags) == 0x000028, "Member 'FMaiSyncActionConfig::_OtherAnimTags' has a wrong offset!");
static_assert(offsetof(FMaiSyncActionConfig, _PlayRate) == 0x000048, "Member 'FMaiSyncActionConfig::_PlayRate' has a wrong offset!");
static_assert(offsetof(FMaiSyncActionConfig, _ActionClass) == 0x000050, "Member 'FMaiSyncActionConfig::_ActionClass' has a wrong offset!");

// ScriptStruct Mai.MaiWallNavDraw
// 0x0040 (0x0040 - 0x0000)
struct FMaiWallNavDraw final
{
public:
	float                                         _Range;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _TileBounds;                                       // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _RawVoxels;                                        // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _WalkableVoxels;                                   // 0x0006(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _Distances;                                        // 0x0007(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _Regions;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _VoxelContours;                                    // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _VectorContours;                                   // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _NavMesh;                                          // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _Links;                                            // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _RegionsMinLevel;                                  // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _SideFlag;                                         // 0x000E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMaiVoxelInfo                          _SelectedVoxel;                                    // 0x0010(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiWallNavDraw) == 0x000004, "Wrong alignment on FMaiWallNavDraw");
static_assert(sizeof(FMaiWallNavDraw) == 0x000040, "Wrong size on FMaiWallNavDraw");
static_assert(offsetof(FMaiWallNavDraw, _Range) == 0x000000, "Member 'FMaiWallNavDraw::_Range' has a wrong offset!");
static_assert(offsetof(FMaiWallNavDraw, _TileBounds) == 0x000004, "Member 'FMaiWallNavDraw::_TileBounds' has a wrong offset!");
static_assert(offsetof(FMaiWallNavDraw, _RawVoxels) == 0x000005, "Member 'FMaiWallNavDraw::_RawVoxels' has a wrong offset!");
static_assert(offsetof(FMaiWallNavDraw, _WalkableVoxels) == 0x000006, "Member 'FMaiWallNavDraw::_WalkableVoxels' has a wrong offset!");
static_assert(offsetof(FMaiWallNavDraw, _Distances) == 0x000007, "Member 'FMaiWallNavDraw::_Distances' has a wrong offset!");
static_assert(offsetof(FMaiWallNavDraw, _Regions) == 0x000008, "Member 'FMaiWallNavDraw::_Regions' has a wrong offset!");
static_assert(offsetof(FMaiWallNavDraw, _VoxelContours) == 0x000009, "Member 'FMaiWallNavDraw::_VoxelContours' has a wrong offset!");
static_assert(offsetof(FMaiWallNavDraw, _VectorContours) == 0x00000A, "Member 'FMaiWallNavDraw::_VectorContours' has a wrong offset!");
static_assert(offsetof(FMaiWallNavDraw, _NavMesh) == 0x00000B, "Member 'FMaiWallNavDraw::_NavMesh' has a wrong offset!");
static_assert(offsetof(FMaiWallNavDraw, _Links) == 0x00000C, "Member 'FMaiWallNavDraw::_Links' has a wrong offset!");
static_assert(offsetof(FMaiWallNavDraw, _RegionsMinLevel) == 0x00000D, "Member 'FMaiWallNavDraw::_RegionsMinLevel' has a wrong offset!");
static_assert(offsetof(FMaiWallNavDraw, _SideFlag) == 0x00000E, "Member 'FMaiWallNavDraw::_SideFlag' has a wrong offset!");
static_assert(offsetof(FMaiWallNavDraw, _SelectedVoxel) == 0x000010, "Member 'FMaiWallNavDraw::_SelectedVoxel' has a wrong offset!");

// ScriptStruct Mai.MaiAggroConfig
// 0x002C (0x002C - 0x0000)
struct FMaiAggroConfig final
{
public:
	float                                         _RequiredAggro;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _AddAggroOnEnter;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _AggroDecayCooldown;                               // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _AggroDecayRate;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _BaseAggroGain[0x7];                               // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiAggroConfig) == 0x000004, "Wrong alignment on FMaiAggroConfig");
static_assert(sizeof(FMaiAggroConfig) == 0x00002C, "Wrong size on FMaiAggroConfig");
static_assert(offsetof(FMaiAggroConfig, _RequiredAggro) == 0x000000, "Member 'FMaiAggroConfig::_RequiredAggro' has a wrong offset!");
static_assert(offsetof(FMaiAggroConfig, _AddAggroOnEnter) == 0x000004, "Member 'FMaiAggroConfig::_AddAggroOnEnter' has a wrong offset!");
static_assert(offsetof(FMaiAggroConfig, _AggroDecayCooldown) == 0x000008, "Member 'FMaiAggroConfig::_AggroDecayCooldown' has a wrong offset!");
static_assert(offsetof(FMaiAggroConfig, _AggroDecayRate) == 0x00000C, "Member 'FMaiAggroConfig::_AggroDecayRate' has a wrong offset!");
static_assert(offsetof(FMaiAggroConfig, _BaseAggroGain) == 0x000010, "Member 'FMaiAggroConfig::_BaseAggroGain' has a wrong offset!");

// ScriptStruct Mai.MaiAggroDifficulty
// 0x0008 (0x0008 - 0x0000)
struct FMaiAggroDifficulty final
{
public:
	float                                         _AggroDecayMul;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _AggroGainMul;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiAggroDifficulty) == 0x000004, "Wrong alignment on FMaiAggroDifficulty");
static_assert(sizeof(FMaiAggroDifficulty) == 0x000008, "Wrong size on FMaiAggroDifficulty");
static_assert(offsetof(FMaiAggroDifficulty, _AggroDecayMul) == 0x000000, "Member 'FMaiAggroDifficulty::_AggroDecayMul' has a wrong offset!");
static_assert(offsetof(FMaiAggroDifficulty, _AggroGainMul) == 0x000004, "Member 'FMaiAggroDifficulty::_AggroGainMul' has a wrong offset!");

// ScriptStruct Mai.MaiExtMovementAttack
// 0x0010 (0x0010 - 0x0000)
struct FMaiExtMovementAttack final
{
public:
	struct FDataTableRowHandle                    _AttackRow;                                        // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiExtMovementAttack) == 0x000008, "Wrong alignment on FMaiExtMovementAttack");
static_assert(sizeof(FMaiExtMovementAttack) == 0x000010, "Wrong size on FMaiExtMovementAttack");
static_assert(offsetof(FMaiExtMovementAttack, _AttackRow) == 0x000000, "Member 'FMaiExtMovementAttack::_AttackRow' has a wrong offset!");

// ScriptStruct Mai.MaiShape
// 0x0020 (0x0020 - 0x0000)
struct FMaiShape final
{
public:
	EMaiShapeType                                 _Shape;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                _Extents;                                          // 0x0008(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiShape) == 0x000008, "Wrong alignment on FMaiShape");
static_assert(sizeof(FMaiShape) == 0x000020, "Wrong size on FMaiShape");
static_assert(offsetof(FMaiShape, _Shape) == 0x000000, "Member 'FMaiShape::_Shape' has a wrong offset!");
static_assert(offsetof(FMaiShape, _Extents) == 0x000008, "Member 'FMaiShape::_Extents' has a wrong offset!");

// ScriptStruct Mai.MaiImpactConfig
// 0x0030 (0x0030 - 0x0000)
struct FMaiImpactConfig final
{
public:
	bool                                          _PhysicalHit;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _OverrideImpactAngle;                              // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _OverrideImpactRange;                              // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _OverrideImpactDir;                                // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _ImpactAngle;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _ImpactRange;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _ImpactDir;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                _DamageType;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _OverrideDamage;                                   // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInt32Range                            _Damage;                                           // 0x001C(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaiImpactConfig) == 0x000008, "Wrong alignment on FMaiImpactConfig");
static_assert(sizeof(FMaiImpactConfig) == 0x000030, "Wrong size on FMaiImpactConfig");
static_assert(offsetof(FMaiImpactConfig, _PhysicalHit) == 0x000000, "Member 'FMaiImpactConfig::_PhysicalHit' has a wrong offset!");
static_assert(offsetof(FMaiImpactConfig, _OverrideImpactAngle) == 0x000001, "Member 'FMaiImpactConfig::_OverrideImpactAngle' has a wrong offset!");
static_assert(offsetof(FMaiImpactConfig, _OverrideImpactRange) == 0x000002, "Member 'FMaiImpactConfig::_OverrideImpactRange' has a wrong offset!");
static_assert(offsetof(FMaiImpactConfig, _OverrideImpactDir) == 0x000003, "Member 'FMaiImpactConfig::_OverrideImpactDir' has a wrong offset!");
static_assert(offsetof(FMaiImpactConfig, _ImpactAngle) == 0x000004, "Member 'FMaiImpactConfig::_ImpactAngle' has a wrong offset!");
static_assert(offsetof(FMaiImpactConfig, _ImpactRange) == 0x000008, "Member 'FMaiImpactConfig::_ImpactRange' has a wrong offset!");
static_assert(offsetof(FMaiImpactConfig, _ImpactDir) == 0x00000C, "Member 'FMaiImpactConfig::_ImpactDir' has a wrong offset!");
static_assert(offsetof(FMaiImpactConfig, _DamageType) == 0x000010, "Member 'FMaiImpactConfig::_DamageType' has a wrong offset!");
static_assert(offsetof(FMaiImpactConfig, _OverrideDamage) == 0x000018, "Member 'FMaiImpactConfig::_OverrideDamage' has a wrong offset!");
static_assert(offsetof(FMaiImpactConfig, _Damage) == 0x00001C, "Member 'FMaiImpactConfig::_Damage' has a wrong offset!");

// ScriptStruct Mai.MaiAttackConfig
// 0x0050 (0x0050 - 0x0000)
struct FMaiAttackConfig final
{
public:
	uint8                                         _Weight;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDaiConditions                         _Conditions;                                       // 0x0008(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    _AttackRow;                                        // 0x0038(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class UMaiAttack*                             _Attack;                                           // 0x0048(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiAttackConfig) == 0x000008, "Wrong alignment on FMaiAttackConfig");
static_assert(sizeof(FMaiAttackConfig) == 0x000050, "Wrong size on FMaiAttackConfig");
static_assert(offsetof(FMaiAttackConfig, _Weight) == 0x000000, "Member 'FMaiAttackConfig::_Weight' has a wrong offset!");
static_assert(offsetof(FMaiAttackConfig, _Conditions) == 0x000008, "Member 'FMaiAttackConfig::_Conditions' has a wrong offset!");
static_assert(offsetof(FMaiAttackConfig, _AttackRow) == 0x000038, "Member 'FMaiAttackConfig::_AttackRow' has a wrong offset!");
static_assert(offsetof(FMaiAttackConfig, _Attack) == 0x000048, "Member 'FMaiAttackConfig::_Attack' has a wrong offset!");

// ScriptStruct Mai.MaiAttackerConfig
// 0x0028 (0x0028 - 0x0000)
struct FMaiAttackerConfig final
{
public:
	class UBehaviorTree*                          _AttacksTree;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBehaviorTree*                          _CountersTree;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _DelayAfterAttack;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           _IgnoreLocks;                                      // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiAttackerConfig) == 0x000008, "Wrong alignment on FMaiAttackerConfig");
static_assert(sizeof(FMaiAttackerConfig) == 0x000028, "Wrong size on FMaiAttackerConfig");
static_assert(offsetof(FMaiAttackerConfig, _AttacksTree) == 0x000000, "Member 'FMaiAttackerConfig::_AttacksTree' has a wrong offset!");
static_assert(offsetof(FMaiAttackerConfig, _CountersTree) == 0x000008, "Member 'FMaiAttackerConfig::_CountersTree' has a wrong offset!");
static_assert(offsetof(FMaiAttackerConfig, _DelayAfterAttack) == 0x000010, "Member 'FMaiAttackerConfig::_DelayAfterAttack' has a wrong offset!");
static_assert(offsetof(FMaiAttackerConfig, _IgnoreLocks) == 0x000018, "Member 'FMaiAttackerConfig::_IgnoreLocks' has a wrong offset!");

// ScriptStruct Mai.MaiAttackBTDecorators
// 0x0010 (0x0010 - 0x0000)
struct FMaiAttackBTDecorators final
{
public:
	class UBTCompositeNode*                       _ParentNode;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _Index;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaiAttackBTDecorators) == 0x000008, "Wrong alignment on FMaiAttackBTDecorators");
static_assert(sizeof(FMaiAttackBTDecorators) == 0x000010, "Wrong size on FMaiAttackBTDecorators");
static_assert(offsetof(FMaiAttackBTDecorators, _ParentNode) == 0x000000, "Member 'FMaiAttackBTDecorators::_ParentNode' has a wrong offset!");
static_assert(offsetof(FMaiAttackBTDecorators, _Index) == 0x000008, "Member 'FMaiAttackBTDecorators::_Index' has a wrong offset!");

// ScriptStruct Mai.MaiAttackBTNode
// 0x0040 (0x0040 - 0x0000)
struct FMaiAttackBTNode final
{
public:
	class FName                                   _Name;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaiAttack*                             _FirstAttack;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBTCompositeNode*                       _ParentNode;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _Index;                                            // 0x0018(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMaiAttackBTDecorators>         _DerivedDecorators;                                // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaiAttackBTNode) == 0x000008, "Wrong alignment on FMaiAttackBTNode");
static_assert(sizeof(FMaiAttackBTNode) == 0x000040, "Wrong size on FMaiAttackBTNode");
static_assert(offsetof(FMaiAttackBTNode, _Name) == 0x000000, "Member 'FMaiAttackBTNode::_Name' has a wrong offset!");
static_assert(offsetof(FMaiAttackBTNode, _FirstAttack) == 0x000008, "Member 'FMaiAttackBTNode::_FirstAttack' has a wrong offset!");
static_assert(offsetof(FMaiAttackBTNode, _ParentNode) == 0x000010, "Member 'FMaiAttackBTNode::_ParentNode' has a wrong offset!");
static_assert(offsetof(FMaiAttackBTNode, _Index) == 0x000018, "Member 'FMaiAttackBTNode::_Index' has a wrong offset!");
static_assert(offsetof(FMaiAttackBTNode, _DerivedDecorators) == 0x000020, "Member 'FMaiAttackBTNode::_DerivedDecorators' has a wrong offset!");

// ScriptStruct Mai.MaiTokenConfig
// 0x000C (0x000C - 0x0000)
struct FMaiTokenConfig final
{
public:
	float                                         _Cooldown;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _Cost;                                             // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _Pool;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiTokenConfig) == 0x000004, "Wrong alignment on FMaiTokenConfig");
static_assert(sizeof(FMaiTokenConfig) == 0x00000C, "Wrong size on FMaiTokenConfig");
static_assert(offsetof(FMaiTokenConfig, _Cooldown) == 0x000000, "Member 'FMaiTokenConfig::_Cooldown' has a wrong offset!");
static_assert(offsetof(FMaiTokenConfig, _Cost) == 0x000004, "Member 'FMaiTokenConfig::_Cost' has a wrong offset!");
static_assert(offsetof(FMaiTokenConfig, _Pool) == 0x000008, "Member 'FMaiTokenConfig::_Pool' has a wrong offset!");

// ScriptStruct Mai.MaiTokenCooldown
// 0x0008 (0x0008 - 0x0000)
struct FMaiTokenCooldown final
{
public:
	int32                                         _Token;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _Cooldown;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiTokenCooldown) == 0x000004, "Wrong alignment on FMaiTokenCooldown");
static_assert(sizeof(FMaiTokenCooldown) == 0x000008, "Wrong size on FMaiTokenCooldown");
static_assert(offsetof(FMaiTokenCooldown, _Token) == 0x000000, "Member 'FMaiTokenCooldown::_Token' has a wrong offset!");
static_assert(offsetof(FMaiTokenCooldown, _Cooldown) == 0x000004, "Member 'FMaiTokenCooldown::_Cooldown' has a wrong offset!");

// ScriptStruct Mai.MaiTokenLocks
// 0x0010 (0x0010 - 0x0000)
struct FMaiTokenLocks final
{
public:
	class AActor*                                 _Actor;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _Lock;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiTokenLocks) == 0x000008, "Wrong alignment on FMaiTokenLocks");
static_assert(sizeof(FMaiTokenLocks) == 0x000010, "Wrong size on FMaiTokenLocks");
static_assert(offsetof(FMaiTokenLocks, _Actor) == 0x000000, "Member 'FMaiTokenLocks::_Actor' has a wrong offset!");
static_assert(offsetof(FMaiTokenLocks, _Lock) == 0x000008, "Member 'FMaiTokenLocks::_Lock' has a wrong offset!");

// ScriptStruct Mai.MaiActorTable
// 0x0010 (0x0010 - 0x0000)
struct FMaiActorTable final
{
public:
	TArray<class AActor*>                         _Actors;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiActorTable) == 0x000008, "Wrong alignment on FMaiActorTable");
static_assert(sizeof(FMaiActorTable) == 0x000010, "Wrong size on FMaiActorTable");
static_assert(offsetof(FMaiActorTable, _Actors) == 0x000000, "Member 'FMaiActorTable::_Actors' has a wrong offset!");

// ScriptStruct Mai.MaiHostileConfig
// 0x0188 (0x0188 - 0x0000)
struct FMaiHostileConfig final
{
public:
	uint8                                         _SlotNum;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _TokenCoins;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMaiTokenConfig                        _TokenConfig[0x20];                                // 0x0008(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiHostileConfig) == 0x000004, "Wrong alignment on FMaiHostileConfig");
static_assert(sizeof(FMaiHostileConfig) == 0x000188, "Wrong size on FMaiHostileConfig");
static_assert(offsetof(FMaiHostileConfig, _SlotNum) == 0x000000, "Member 'FMaiHostileConfig::_SlotNum' has a wrong offset!");
static_assert(offsetof(FMaiHostileConfig, _TokenCoins) == 0x000004, "Member 'FMaiHostileConfig::_TokenCoins' has a wrong offset!");
static_assert(offsetof(FMaiHostileConfig, _TokenConfig) == 0x000008, "Member 'FMaiHostileConfig::_TokenConfig' has a wrong offset!");

// ScriptStruct Mai.MaiBlackboardValue
// 0x0078 (0x0078 - 0x0000)
struct FMaiBlackboardValue final
{
public:
	class UBlackboardData*                        _Board;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _Name;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _Bool;                                             // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 _Class;                                            // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _Float;                                            // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _Int;                                              // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _String;                                           // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _Object;                                           // 0x0038(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDaiEnum                               _Enum;                                             // 0x0068(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiBlackboardValue) == 0x000008, "Wrong alignment on FMaiBlackboardValue");
static_assert(sizeof(FMaiBlackboardValue) == 0x000078, "Wrong size on FMaiBlackboardValue");
static_assert(offsetof(FMaiBlackboardValue, _Board) == 0x000000, "Member 'FMaiBlackboardValue::_Board' has a wrong offset!");
static_assert(offsetof(FMaiBlackboardValue, _Name) == 0x000008, "Member 'FMaiBlackboardValue::_Name' has a wrong offset!");
static_assert(offsetof(FMaiBlackboardValue, _Bool) == 0x000010, "Member 'FMaiBlackboardValue::_Bool' has a wrong offset!");
static_assert(offsetof(FMaiBlackboardValue, _Class) == 0x000018, "Member 'FMaiBlackboardValue::_Class' has a wrong offset!");
static_assert(offsetof(FMaiBlackboardValue, _Float) == 0x000020, "Member 'FMaiBlackboardValue::_Float' has a wrong offset!");
static_assert(offsetof(FMaiBlackboardValue, _Int) == 0x000024, "Member 'FMaiBlackboardValue::_Int' has a wrong offset!");
static_assert(offsetof(FMaiBlackboardValue, _String) == 0x000028, "Member 'FMaiBlackboardValue::_String' has a wrong offset!");
static_assert(offsetof(FMaiBlackboardValue, _Object) == 0x000038, "Member 'FMaiBlackboardValue::_Object' has a wrong offset!");
static_assert(offsetof(FMaiBlackboardValue, _Enum) == 0x000068, "Member 'FMaiBlackboardValue::_Enum' has a wrong offset!");

// ScriptStruct Mai.MaiBlackboardFloat
// 0x0030 (0x0030 - 0x0000)
struct FMaiBlackboardFloat final
{
public:
	struct FBlackboardKeySelector                 _Entry;                                            // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         _Value;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _DirectValue;                                      // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaiBlackboardFloat) == 0x000008, "Wrong alignment on FMaiBlackboardFloat");
static_assert(sizeof(FMaiBlackboardFloat) == 0x000030, "Wrong size on FMaiBlackboardFloat");
static_assert(offsetof(FMaiBlackboardFloat, _Entry) == 0x000000, "Member 'FMaiBlackboardFloat::_Entry' has a wrong offset!");
static_assert(offsetof(FMaiBlackboardFloat, _Value) == 0x000028, "Member 'FMaiBlackboardFloat::_Value' has a wrong offset!");
static_assert(offsetof(FMaiBlackboardFloat, _DirectValue) == 0x00002C, "Member 'FMaiBlackboardFloat::_DirectValue' has a wrong offset!");

// ScriptStruct Mai.MaiBlackboardInt
// 0x0030 (0x0030 - 0x0000)
struct FMaiBlackboardInt final
{
public:
	struct FBlackboardKeySelector                 _Entry;                                            // 0x0000(0x0028)(Edit, NativeAccessSpecifierPublic)
	int32                                         _Value;                                            // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _DirectValue;                                      // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaiBlackboardInt) == 0x000008, "Wrong alignment on FMaiBlackboardInt");
static_assert(sizeof(FMaiBlackboardInt) == 0x000030, "Wrong size on FMaiBlackboardInt");
static_assert(offsetof(FMaiBlackboardInt, _Entry) == 0x000000, "Member 'FMaiBlackboardInt::_Entry' has a wrong offset!");
static_assert(offsetof(FMaiBlackboardInt, _Value) == 0x000028, "Member 'FMaiBlackboardInt::_Value' has a wrong offset!");
static_assert(offsetof(FMaiBlackboardInt, _DirectValue) == 0x00002C, "Member 'FMaiBlackboardInt::_DirectValue' has a wrong offset!");

// ScriptStruct Mai.MaiBlackboardObject
// 0x0020 (0x0020 - 0x0000)
struct FMaiBlackboardObject final
{
public:
	class FName                                   _LevelName;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 _Class;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, EditConst, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  _Guid;                                             // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiBlackboardObject) == 0x000008, "Wrong alignment on FMaiBlackboardObject");
static_assert(sizeof(FMaiBlackboardObject) == 0x000020, "Wrong size on FMaiBlackboardObject");
static_assert(offsetof(FMaiBlackboardObject, _LevelName) == 0x000000, "Member 'FMaiBlackboardObject::_LevelName' has a wrong offset!");
static_assert(offsetof(FMaiBlackboardObject, _Class) == 0x000008, "Member 'FMaiBlackboardObject::_Class' has a wrong offset!");
static_assert(offsetof(FMaiBlackboardObject, _Guid) == 0x000010, "Member 'FMaiBlackboardObject::_Guid' has a wrong offset!");

// ScriptStruct Mai.MaiBlackboardData
// 0x0280 (0x0280 - 0x0000)
struct FMaiBlackboardData final
{
public:
	TMap<class FName, bool>                       _Bools;                                            // 0x0000(0x0050)(Edit, EditConst, SaveGame, NativeAccessSpecifierPublic)
	TMap<class FName, uint8>                      _Enums;                                            // 0x0050(0x0050)(Edit, EditConst, SaveGame, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      _Floats;                                           // 0x00A0(0x0050)(Edit, EditConst, SaveGame, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      _Ints;                                             // 0x00F0(0x0050)(Edit, EditConst, SaveGame, NativeAccessSpecifierPublic)
	TMap<class FName, class FName>                _Names;                                            // 0x0140(0x0050)(Edit, EditConst, SaveGame, NativeAccessSpecifierPublic)
	TMap<class FName, struct FMaiBlackboardObject> _Objects;                                          // 0x0190(0x0050)(Edit, EditConst, SaveGame, NativeAccessSpecifierPublic)
	TMap<class FName, struct FRotator>            _Rotators;                                         // 0x01E0(0x0050)(Edit, EditConst, SaveGame, NativeAccessSpecifierPublic)
	TMap<class FName, struct FVector>             _Vectors;                                          // 0x0230(0x0050)(Edit, EditConst, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiBlackboardData) == 0x000008, "Wrong alignment on FMaiBlackboardData");
static_assert(sizeof(FMaiBlackboardData) == 0x000280, "Wrong size on FMaiBlackboardData");
static_assert(offsetof(FMaiBlackboardData, _Bools) == 0x000000, "Member 'FMaiBlackboardData::_Bools' has a wrong offset!");
static_assert(offsetof(FMaiBlackboardData, _Enums) == 0x000050, "Member 'FMaiBlackboardData::_Enums' has a wrong offset!");
static_assert(offsetof(FMaiBlackboardData, _Floats) == 0x0000A0, "Member 'FMaiBlackboardData::_Floats' has a wrong offset!");
static_assert(offsetof(FMaiBlackboardData, _Ints) == 0x0000F0, "Member 'FMaiBlackboardData::_Ints' has a wrong offset!");
static_assert(offsetof(FMaiBlackboardData, _Names) == 0x000140, "Member 'FMaiBlackboardData::_Names' has a wrong offset!");
static_assert(offsetof(FMaiBlackboardData, _Objects) == 0x000190, "Member 'FMaiBlackboardData::_Objects' has a wrong offset!");
static_assert(offsetof(FMaiBlackboardData, _Rotators) == 0x0001E0, "Member 'FMaiBlackboardData::_Rotators' has a wrong offset!");
static_assert(offsetof(FMaiBlackboardData, _Vectors) == 0x000230, "Member 'FMaiBlackboardData::_Vectors' has a wrong offset!");

// ScriptStruct Mai.Range
// 0x0008 (0x0008 - 0x0000)
struct FRange
{
public:
	float                                         _Min;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _Max;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRange) == 0x000004, "Wrong alignment on FRange");
static_assert(sizeof(FRange) == 0x000008, "Wrong size on FRange");
static_assert(offsetof(FRange, _Min) == 0x000000, "Member 'FRange::_Min' has a wrong offset!");
static_assert(offsetof(FRange, _Max) == 0x000004, "Member 'FRange::_Max' has a wrong offset!");

// ScriptStruct Mai.StanceRange
// 0x0004 (0x000C - 0x0008)
struct FStanceRange final : public FRange
{
public:
	EBeingWalkingStance                           _Stance;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStanceRange) == 0x000004, "Wrong alignment on FStanceRange");
static_assert(sizeof(FStanceRange) == 0x00000C, "Wrong size on FStanceRange");
static_assert(offsetof(FStanceRange, _Stance) == 0x000008, "Member 'FStanceRange::_Stance' has a wrong offset!");

// ScriptStruct Mai.MaiLocations
// 0x0010 (0x0010 - 0x0000)
struct FMaiLocations final
{
public:
	TArray<struct FVector>                        _Locations;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiLocations) == 0x000008, "Wrong alignment on FMaiLocations");
static_assert(sizeof(FMaiLocations) == 0x000010, "Wrong size on FMaiLocations");
static_assert(offsetof(FMaiLocations, _Locations) == 0x000000, "Member 'FMaiLocations::_Locations' has a wrong offset!");

// ScriptStruct Mai.MaiLevelLocation
// 0x0048 (0x0048 - 0x0000)
struct FMaiLevelLocation final
{
public:
	struct FVector                                _Location;                                         // 0x0000(0x0018)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 _Level;                                            // 0x0018(0x0030)(Edit, DisableEditOnTemplate, EditConst, SaveGame, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiLevelLocation) == 0x000008, "Wrong alignment on FMaiLevelLocation");
static_assert(sizeof(FMaiLevelLocation) == 0x000048, "Wrong size on FMaiLevelLocation");
static_assert(offsetof(FMaiLevelLocation, _Location) == 0x000000, "Member 'FMaiLevelLocation::_Location' has a wrong offset!");
static_assert(offsetof(FMaiLevelLocation, _Level) == 0x000018, "Member 'FMaiLevelLocation::_Level' has a wrong offset!");

// ScriptStruct Mai.AIDataProviderNameValue
// 0x0008 (0x0038 - 0x0030)
struct FAIDataProviderNameValue final : public FAIDataProviderTypedValue
{
public:
	class FName                                   DefaultValue;                                      // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAIDataProviderNameValue) == 0x000008, "Wrong alignment on FAIDataProviderNameValue");
static_assert(sizeof(FAIDataProviderNameValue) == 0x000038, "Wrong size on FAIDataProviderNameValue");
static_assert(offsetof(FAIDataProviderNameValue, DefaultValue) == 0x000030, "Member 'FAIDataProviderNameValue::DefaultValue' has a wrong offset!");

// ScriptStruct Mai.AIDataProviderClassValue
// 0x0008 (0x0038 - 0x0030)
struct FAIDataProviderClassValue final : public FAIDataProviderTypedValue
{
public:
	class UClass*                                 DefaultValue;                                      // 0x0030(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAIDataProviderClassValue) == 0x000008, "Wrong alignment on FAIDataProviderClassValue");
static_assert(sizeof(FAIDataProviderClassValue) == 0x000038, "Wrong size on FAIDataProviderClassValue");
static_assert(offsetof(FAIDataProviderClassValue, DefaultValue) == 0x000030, "Member 'FAIDataProviderClassValue::DefaultValue' has a wrong offset!");

// ScriptStruct Mai.MaiDebugPrintParams
// 0x0030 (0x0030 - 0x0000)
struct FMaiDebugPrintParams final
{
public:
	bool                                          _ToScreen;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _ToLog;                                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           _Color;                                            // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _Duration;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _IgnoreActor;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _Category;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiDebugPrintParams) == 0x000008, "Wrong alignment on FMaiDebugPrintParams");
static_assert(sizeof(FMaiDebugPrintParams) == 0x000030, "Wrong size on FMaiDebugPrintParams");
static_assert(offsetof(FMaiDebugPrintParams, _ToScreen) == 0x000000, "Member 'FMaiDebugPrintParams::_ToScreen' has a wrong offset!");
static_assert(offsetof(FMaiDebugPrintParams, _ToLog) == 0x000001, "Member 'FMaiDebugPrintParams::_ToLog' has a wrong offset!");
static_assert(offsetof(FMaiDebugPrintParams, _Color) == 0x000004, "Member 'FMaiDebugPrintParams::_Color' has a wrong offset!");
static_assert(offsetof(FMaiDebugPrintParams, _Duration) == 0x000014, "Member 'FMaiDebugPrintParams::_Duration' has a wrong offset!");
static_assert(offsetof(FMaiDebugPrintParams, _IgnoreActor) == 0x000018, "Member 'FMaiDebugPrintParams::_IgnoreActor' has a wrong offset!");
static_assert(offsetof(FMaiDebugPrintParams, _Category) == 0x000020, "Member 'FMaiDebugPrintParams::_Category' has a wrong offset!");

// ScriptStruct Mai.MaiFlyingConnection
// 0x0010 (0x0010 - 0x0000)
struct FMaiFlyingConnection final
{
public:
	class AMaiFlyingPoint*                        _Target;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _Dist;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaiFlyingConnection) == 0x000008, "Wrong alignment on FMaiFlyingConnection");
static_assert(sizeof(FMaiFlyingConnection) == 0x000010, "Wrong size on FMaiFlyingConnection");
static_assert(offsetof(FMaiFlyingConnection, _Target) == 0x000000, "Member 'FMaiFlyingConnection::_Target' has a wrong offset!");
static_assert(offsetof(FMaiFlyingConnection, _Dist) == 0x000008, "Member 'FMaiFlyingConnection::_Dist' has a wrong offset!");

// ScriptStruct Mai.MaiReincarnationInfo
// 0x0028 (0x0028 - 0x0000)
struct FMaiReincarnationInfo final
{
public:
	uint8                                         _PreCooldown;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _EnterCountToActivate;                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInt32Range                            _Chance;                                           // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt32Range                            _HealthPercent;                                    // 0x0014(0x0010)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _SeizuresNumber;                                   // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaiReincarnationInfo) == 0x000004, "Wrong alignment on FMaiReincarnationInfo");
static_assert(sizeof(FMaiReincarnationInfo) == 0x000028, "Wrong size on FMaiReincarnationInfo");
static_assert(offsetof(FMaiReincarnationInfo, _PreCooldown) == 0x000000, "Member 'FMaiReincarnationInfo::_PreCooldown' has a wrong offset!");
static_assert(offsetof(FMaiReincarnationInfo, _EnterCountToActivate) == 0x000001, "Member 'FMaiReincarnationInfo::_EnterCountToActivate' has a wrong offset!");
static_assert(offsetof(FMaiReincarnationInfo, _Chance) == 0x000004, "Member 'FMaiReincarnationInfo::_Chance' has a wrong offset!");
static_assert(offsetof(FMaiReincarnationInfo, _HealthPercent) == 0x000014, "Member 'FMaiReincarnationInfo::_HealthPercent' has a wrong offset!");
static_assert(offsetof(FMaiReincarnationInfo, _SeizuresNumber) == 0x000024, "Member 'FMaiReincarnationInfo::_SeizuresNumber' has a wrong offset!");

// ScriptStruct Mai.MaiLightRay
// 0x0080 (0x0080 - 0x0000)
struct FMaiLightRay final
{
public:
	struct FVector                                _Dir;                                              // 0x0000(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _Start;                                            // 0x0018(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _End;                                              // 0x0030(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _Hit;                                              // 0x0048(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                _HitNormal;                                        // 0x0050(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _HitPoint;                                         // 0x0068(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiLightRay) == 0x000008, "Wrong alignment on FMaiLightRay");
static_assert(sizeof(FMaiLightRay) == 0x000080, "Wrong size on FMaiLightRay");
static_assert(offsetof(FMaiLightRay, _Dir) == 0x000000, "Member 'FMaiLightRay::_Dir' has a wrong offset!");
static_assert(offsetof(FMaiLightRay, _Start) == 0x000018, "Member 'FMaiLightRay::_Start' has a wrong offset!");
static_assert(offsetof(FMaiLightRay, _End) == 0x000030, "Member 'FMaiLightRay::_End' has a wrong offset!");
static_assert(offsetof(FMaiLightRay, _Hit) == 0x000048, "Member 'FMaiLightRay::_Hit' has a wrong offset!");
static_assert(offsetof(FMaiLightRay, _HitNormal) == 0x000050, "Member 'FMaiLightRay::_HitNormal' has a wrong offset!");
static_assert(offsetof(FMaiLightRay, _HitPoint) == 0x000068, "Member 'FMaiLightRay::_HitPoint' has a wrong offset!");

// ScriptStruct Mai.MaiLightRaySegment
// 0x0058 (0x0058 - 0x0000)
struct FMaiLightRaySegment final
{
public:
	struct FVector                                _Start;                                            // 0x0000(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _End;                                              // 0x0018(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _DistSqr;                                          // 0x0030(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                _LocalEnd;                                         // 0x0038(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _CutEnd;                                           // 0x0050(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _CutStart;                                         // 0x0051(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaiLightRaySegment) == 0x000008, "Wrong alignment on FMaiLightRaySegment");
static_assert(sizeof(FMaiLightRaySegment) == 0x000058, "Wrong size on FMaiLightRaySegment");
static_assert(offsetof(FMaiLightRaySegment, _Start) == 0x000000, "Member 'FMaiLightRaySegment::_Start' has a wrong offset!");
static_assert(offsetof(FMaiLightRaySegment, _End) == 0x000018, "Member 'FMaiLightRaySegment::_End' has a wrong offset!");
static_assert(offsetof(FMaiLightRaySegment, _DistSqr) == 0x000030, "Member 'FMaiLightRaySegment::_DistSqr' has a wrong offset!");
static_assert(offsetof(FMaiLightRaySegment, _LocalEnd) == 0x000038, "Member 'FMaiLightRaySegment::_LocalEnd' has a wrong offset!");
static_assert(offsetof(FMaiLightRaySegment, _CutEnd) == 0x000050, "Member 'FMaiLightRaySegment::_CutEnd' has a wrong offset!");
static_assert(offsetof(FMaiLightRaySegment, _CutStart) == 0x000051, "Member 'FMaiLightRaySegment::_CutStart' has a wrong offset!");

// ScriptStruct Mai.MaiLightData
// 0x0004 (0x0004 - 0x0000)
struct FMaiLightData final
{
public:
	float                                         _LastTestTime;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiLightData) == 0x000004, "Wrong alignment on FMaiLightData");
static_assert(sizeof(FMaiLightData) == 0x000004, "Wrong size on FMaiLightData");
static_assert(offsetof(FMaiLightData, _LastTestTime) == 0x000000, "Member 'FMaiLightData::_LastTestTime' has a wrong offset!");

// ScriptStruct Mai.MaiLightedActors
// 0x0018 (0x0018 - 0x0000)
struct FMaiLightedActors final
{
public:
	float                                         _LastTestTime;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class UMaiLightEmitter>> _LightingLights;                                   // 0x0008(0x0010)(Edit, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiLightedActors) == 0x000008, "Wrong alignment on FMaiLightedActors");
static_assert(sizeof(FMaiLightedActors) == 0x000018, "Wrong size on FMaiLightedActors");
static_assert(offsetof(FMaiLightedActors, _LastTestTime) == 0x000000, "Member 'FMaiLightedActors::_LastTestTime' has a wrong offset!");
static_assert(offsetof(FMaiLightedActors, _LightingLights) == 0x000008, "Member 'FMaiLightedActors::_LightingLights' has a wrong offset!");

// ScriptStruct Mai.MaiLookAtTarget
// 0x0048 (0x0048 - 0x0000)
struct FMaiLookAtTarget final
{
public:
	class AActor*                                 _Actor;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        _Component;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _Location;                                         // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               _Rotation;                                         // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EMaiLookAt                                    _Type;                                             // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaiLookAtTarget) == 0x000008, "Wrong alignment on FMaiLookAtTarget");
static_assert(sizeof(FMaiLookAtTarget) == 0x000048, "Wrong size on FMaiLookAtTarget");
static_assert(offsetof(FMaiLookAtTarget, _Actor) == 0x000000, "Member 'FMaiLookAtTarget::_Actor' has a wrong offset!");
static_assert(offsetof(FMaiLookAtTarget, _Component) == 0x000008, "Member 'FMaiLookAtTarget::_Component' has a wrong offset!");
static_assert(offsetof(FMaiLookAtTarget, _Location) == 0x000010, "Member 'FMaiLookAtTarget::_Location' has a wrong offset!");
static_assert(offsetof(FMaiLookAtTarget, _Rotation) == 0x000028, "Member 'FMaiLookAtTarget::_Rotation' has a wrong offset!");
static_assert(offsetof(FMaiLookAtTarget, _Type) == 0x000040, "Member 'FMaiLookAtTarget::_Type' has a wrong offset!");

// ScriptStruct Mai.MaiLookAtData
// 0x0060 (0x0060 - 0x0000)
struct FMaiLookAtData final
{
public:
	struct FMaiLookAtTarget                       _LookAtTarget;                                     // 0x0000(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          _Enabled;                                          // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _OnlyHeadLookAt;                                   // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _CheckConeRange;                                   // 0x004A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x1];                                       // 0x004B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _ConeRange;                                        // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _PitchLimit;                                       // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _YawLimit;                                         // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _RotationRate;                                     // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaiLookAtData) == 0x000008, "Wrong alignment on FMaiLookAtData");
static_assert(sizeof(FMaiLookAtData) == 0x000060, "Wrong size on FMaiLookAtData");
static_assert(offsetof(FMaiLookAtData, _LookAtTarget) == 0x000000, "Member 'FMaiLookAtData::_LookAtTarget' has a wrong offset!");
static_assert(offsetof(FMaiLookAtData, _Enabled) == 0x000048, "Member 'FMaiLookAtData::_Enabled' has a wrong offset!");
static_assert(offsetof(FMaiLookAtData, _OnlyHeadLookAt) == 0x000049, "Member 'FMaiLookAtData::_OnlyHeadLookAt' has a wrong offset!");
static_assert(offsetof(FMaiLookAtData, _CheckConeRange) == 0x00004A, "Member 'FMaiLookAtData::_CheckConeRange' has a wrong offset!");
static_assert(offsetof(FMaiLookAtData, _ConeRange) == 0x00004C, "Member 'FMaiLookAtData::_ConeRange' has a wrong offset!");
static_assert(offsetof(FMaiLookAtData, _PitchLimit) == 0x000050, "Member 'FMaiLookAtData::_PitchLimit' has a wrong offset!");
static_assert(offsetof(FMaiLookAtData, _YawLimit) == 0x000054, "Member 'FMaiLookAtData::_YawLimit' has a wrong offset!");
static_assert(offsetof(FMaiLookAtData, _RotationRate) == 0x000058, "Member 'FMaiLookAtData::_RotationRate' has a wrong offset!");

// ScriptStruct Mai.PartyAttitude
// 0x0010 (0x0010 - 0x0000)
struct FPartyAttitude final
{
public:
	TArray<EPartyAttitude>                        _Attitudes;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyAttitude) == 0x000008, "Wrong alignment on FPartyAttitude");
static_assert(sizeof(FPartyAttitude) == 0x000010, "Wrong size on FPartyAttitude");
static_assert(offsetof(FPartyAttitude, _Attitudes) == 0x000000, "Member 'FPartyAttitude::_Attitudes' has a wrong offset!");

// ScriptStruct Mai.PartyAttitudes
// 0x0010 (0x0010 - 0x0000)
struct FPartyAttitudes final
{
public:
	TArray<struct FPartyAttitude>                 _Attitudes;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyAttitudes) == 0x000008, "Wrong alignment on FPartyAttitudes");
static_assert(sizeof(FPartyAttitudes) == 0x000010, "Wrong size on FPartyAttitudes");
static_assert(offsetof(FPartyAttitudes, _Attitudes) == 0x000000, "Member 'FPartyAttitudes::_Attitudes' has a wrong offset!");

// ScriptStruct Mai.MaiPartyAttitudeData
// 0x0004 (0x0004 - 0x0000)
struct FMaiPartyAttitudeData final
{
public:
	EMaiParty                                     _Party1;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaiParty                                     _Party2;                                           // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPartyAttitude                                _Attitude;                                         // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _Mirrored;                                         // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiPartyAttitudeData) == 0x000001, "Wrong alignment on FMaiPartyAttitudeData");
static_assert(sizeof(FMaiPartyAttitudeData) == 0x000004, "Wrong size on FMaiPartyAttitudeData");
static_assert(offsetof(FMaiPartyAttitudeData, _Party1) == 0x000000, "Member 'FMaiPartyAttitudeData::_Party1' has a wrong offset!");
static_assert(offsetof(FMaiPartyAttitudeData, _Party2) == 0x000001, "Member 'FMaiPartyAttitudeData::_Party2' has a wrong offset!");
static_assert(offsetof(FMaiPartyAttitudeData, _Attitude) == 0x000002, "Member 'FMaiPartyAttitudeData::_Attitude' has a wrong offset!");
static_assert(offsetof(FMaiPartyAttitudeData, _Mirrored) == 0x000003, "Member 'FMaiPartyAttitudeData::_Mirrored' has a wrong offset!");

// ScriptStruct Mai.MaiPartyData
// 0x000C (0x000C - 0x0000)
struct FMaiPartyData final
{
public:
	class FName                                   _Name;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPartyAttitude                                _DefaultAttitude;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaiPartyData) == 0x000004, "Wrong alignment on FMaiPartyData");
static_assert(sizeof(FMaiPartyData) == 0x00000C, "Wrong size on FMaiPartyData");
static_assert(offsetof(FMaiPartyData, _Name) == 0x000000, "Member 'FMaiPartyData::_Name' has a wrong offset!");
static_assert(offsetof(FMaiPartyData, _DefaultAttitude) == 0x000008, "Member 'FMaiPartyData::_DefaultAttitude' has a wrong offset!");

// ScriptStruct Mai.MaiTokenData
// 0x000C (0x000C - 0x0000)
struct FMaiTokenData final
{
public:
	class FName                                   _Name;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _CanBeStolen;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaiTokenData) == 0x000004, "Wrong alignment on FMaiTokenData");
static_assert(sizeof(FMaiTokenData) == 0x00000C, "Wrong size on FMaiTokenData");
static_assert(offsetof(FMaiTokenData, _Name) == 0x000000, "Member 'FMaiTokenData::_Name' has a wrong offset!");
static_assert(offsetof(FMaiTokenData, _CanBeStolen) == 0x000008, "Member 'FMaiTokenData::_CanBeStolen' has a wrong offset!");

// ScriptStruct Mai.MaiReceiverFilter
// 0x0020 (0x0020 - 0x0000)
struct FMaiReceiverFilter final
{
public:
	class FName                                   _HasTag;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APawn>                      _IsAClass;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDaiDistanceType                              _RangeType;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _InRange;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _InAngle;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaiReceiverFilter) == 0x000008, "Wrong alignment on FMaiReceiverFilter");
static_assert(sizeof(FMaiReceiverFilter) == 0x000020, "Wrong size on FMaiReceiverFilter");
static_assert(offsetof(FMaiReceiverFilter, _HasTag) == 0x000000, "Member 'FMaiReceiverFilter::_HasTag' has a wrong offset!");
static_assert(offsetof(FMaiReceiverFilter, _IsAClass) == 0x000008, "Member 'FMaiReceiverFilter::_IsAClass' has a wrong offset!");
static_assert(offsetof(FMaiReceiverFilter, _RangeType) == 0x000010, "Member 'FMaiReceiverFilter::_RangeType' has a wrong offset!");
static_assert(offsetof(FMaiReceiverFilter, _InRange) == 0x000014, "Member 'FMaiReceiverFilter::_InRange' has a wrong offset!");
static_assert(offsetof(FMaiReceiverFilter, _InAngle) == 0x000018, "Member 'FMaiReceiverFilter::_InAngle' has a wrong offset!");

// ScriptStruct Mai.MaiDelayedMessage
// 0x0078 (0x0078 - 0x0000)
struct FMaiDelayedMessage final
{
public:
	class UMaiMessage*                            _Message;                                          // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x70];                                       // 0x0008(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaiDelayedMessage) == 0x000008, "Wrong alignment on FMaiDelayedMessage");
static_assert(sizeof(FMaiDelayedMessage) == 0x000078, "Wrong size on FMaiDelayedMessage");
static_assert(offsetof(FMaiDelayedMessage, _Message) == 0x000000, "Member 'FMaiDelayedMessage::_Message' has a wrong offset!");

// ScriptStruct Mai.MaiNodeRef
// 0x0020 (0x0020 - 0x0000)
struct FMaiNodeRef final
{
public:
	class FString                                 _Name;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _ID;                                               // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaiNodeRef) == 0x000008, "Wrong alignment on FMaiNodeRef");
static_assert(sizeof(FMaiNodeRef) == 0x000020, "Wrong size on FMaiNodeRef");
static_assert(offsetof(FMaiNodeRef, _Name) == 0x000000, "Member 'FMaiNodeRef::_Name' has a wrong offset!");
static_assert(offsetof(FMaiNodeRef, _ID) == 0x000010, "Member 'FMaiNodeRef::_ID' has a wrong offset!");

// ScriptStruct Mai.MaiNodeConnection
// 0x0028 (0x0028 - 0x0000)
struct FMaiNodeConnection final
{
public:
	struct FMaiNodeRef                            _Target;                                           // 0x0000(0x0020)(Edit, BlueprintVisible, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _Dist;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaiNodeConnection) == 0x000008, "Wrong alignment on FMaiNodeConnection");
static_assert(sizeof(FMaiNodeConnection) == 0x000028, "Wrong size on FMaiNodeConnection");
static_assert(offsetof(FMaiNodeConnection, _Target) == 0x000000, "Member 'FMaiNodeConnection::_Target' has a wrong offset!");
static_assert(offsetof(FMaiNodeConnection, _Dist) == 0x000020, "Member 'FMaiNodeConnection::_Dist' has a wrong offset!");

// ScriptStruct Mai.MaiNodeData
// 0x0040 (0x0040 - 0x0000)
struct FMaiNodeData final
{
public:
	class FString                                 _Name;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _Location;                                         // 0x0010(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMaiNodeConnection>             _Connections;                                      // 0x0028(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	bool                                          _PendingKill;                                      // 0x0038(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaiNodeData) == 0x000008, "Wrong alignment on FMaiNodeData");
static_assert(sizeof(FMaiNodeData) == 0x000040, "Wrong size on FMaiNodeData");
static_assert(offsetof(FMaiNodeData, _Name) == 0x000000, "Member 'FMaiNodeData::_Name' has a wrong offset!");
static_assert(offsetof(FMaiNodeData, _Location) == 0x000010, "Member 'FMaiNodeData::_Location' has a wrong offset!");
static_assert(offsetof(FMaiNodeData, _Connections) == 0x000028, "Member 'FMaiNodeData::_Connections' has a wrong offset!");
static_assert(offsetof(FMaiNodeData, _PendingKill) == 0x000038, "Member 'FMaiNodeData::_PendingKill' has a wrong offset!");

// ScriptStruct Mai.MaiNoiseEvent
// 0x0060 (0x0060 - 0x0000)
struct FMaiNoiseEvent final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NoiseLocation;                                     // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Aggro;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseRange;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Loudness;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRange;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Instigator;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 IgnoreActor;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x18];                                      // 0x0048(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaiNoiseEvent) == 0x000008, "Wrong alignment on FMaiNoiseEvent");
static_assert(sizeof(FMaiNoiseEvent) == 0x000060, "Wrong size on FMaiNoiseEvent");
static_assert(offsetof(FMaiNoiseEvent, NoiseLocation) == 0x000008, "Member 'FMaiNoiseEvent::NoiseLocation' has a wrong offset!");
static_assert(offsetof(FMaiNoiseEvent, Aggro) == 0x000020, "Member 'FMaiNoiseEvent::Aggro' has a wrong offset!");
static_assert(offsetof(FMaiNoiseEvent, NoiseRange) == 0x000024, "Member 'FMaiNoiseEvent::NoiseRange' has a wrong offset!");
static_assert(offsetof(FMaiNoiseEvent, Loudness) == 0x000028, "Member 'FMaiNoiseEvent::Loudness' has a wrong offset!");
static_assert(offsetof(FMaiNoiseEvent, MaxRange) == 0x00002C, "Member 'FMaiNoiseEvent::MaxRange' has a wrong offset!");
static_assert(offsetof(FMaiNoiseEvent, Instigator) == 0x000030, "Member 'FMaiNoiseEvent::Instigator' has a wrong offset!");
static_assert(offsetof(FMaiNoiseEvent, IgnoreActor) == 0x000038, "Member 'FMaiNoiseEvent::IgnoreActor' has a wrong offset!");
static_assert(offsetof(FMaiNoiseEvent, Tag) == 0x000040, "Member 'FMaiNoiseEvent::Tag' has a wrong offset!");

// ScriptStruct Mai.MaiThe6thSenseEvent
// 0x0048 (0x0048 - 0x0000)
struct FMaiThe6thSenseEvent final
{
public:
	class AActor*                                 _Instigator;                                       // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x40];                                       // 0x0008(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaiThe6thSenseEvent) == 0x000008, "Wrong alignment on FMaiThe6thSenseEvent");
static_assert(sizeof(FMaiThe6thSenseEvent) == 0x000048, "Wrong size on FMaiThe6thSenseEvent");
static_assert(offsetof(FMaiThe6thSenseEvent, _Instigator) == 0x000000, "Member 'FMaiThe6thSenseEvent::_Instigator' has a wrong offset!");

// ScriptStruct Mai.MaiSpawnInfo
// 0x0010 (0x0010 - 0x0000)
struct FMaiSpawnInfo final
{
public:
	TSubclassOf<class APawn>                      _PawnClass;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _Weight;                                           // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaiSpawnInfo) == 0x000008, "Wrong alignment on FMaiSpawnInfo");
static_assert(sizeof(FMaiSpawnInfo) == 0x000010, "Wrong size on FMaiSpawnInfo");
static_assert(offsetof(FMaiSpawnInfo, _PawnClass) == 0x000000, "Member 'FMaiSpawnInfo::_PawnClass' has a wrong offset!");
static_assert(offsetof(FMaiSpawnInfo, _Weight) == 0x000008, "Member 'FMaiSpawnInfo::_Weight' has a wrong offset!");

// ScriptStruct Mai.MaiSpawnedActor
// 0x0098 (0x0098 - 0x0000)
struct FMaiSpawnedActor final
{
public:
	struct FGuid                                  _ActorGuid;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  _Actor;                                            // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  _ControllerGuid;                                   // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AController>             _Controller;                                       // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  _SpawnerGuid;                                      // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _IsHidden : 1;                                     // 0x0040(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnTemplate, EditConst, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         _OnPersisent : 1;                                  // 0x0040(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnTemplate, EditConst, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         _ResetTransform : 1;                               // 0x0040(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, DisableEditOnTemplate, EditConst, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         _HasFloor : 1;                                     // 0x0040(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         _Restoring : 1;                                    // 0x0040(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                _LastLocation;                                     // 0x0048(0x0018)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  _SoftOrigin;                                       // 0x0060(0x0030)(Edit, DisableEditOnTemplate, EditConst, SaveGame, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _OriginCache;                                      // 0x0090(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiSpawnedActor) == 0x000008, "Wrong alignment on FMaiSpawnedActor");
static_assert(sizeof(FMaiSpawnedActor) == 0x000098, "Wrong size on FMaiSpawnedActor");
static_assert(offsetof(FMaiSpawnedActor, _ActorGuid) == 0x000000, "Member 'FMaiSpawnedActor::_ActorGuid' has a wrong offset!");
static_assert(offsetof(FMaiSpawnedActor, _Actor) == 0x000010, "Member 'FMaiSpawnedActor::_Actor' has a wrong offset!");
static_assert(offsetof(FMaiSpawnedActor, _ControllerGuid) == 0x000018, "Member 'FMaiSpawnedActor::_ControllerGuid' has a wrong offset!");
static_assert(offsetof(FMaiSpawnedActor, _Controller) == 0x000028, "Member 'FMaiSpawnedActor::_Controller' has a wrong offset!");
static_assert(offsetof(FMaiSpawnedActor, _SpawnerGuid) == 0x000030, "Member 'FMaiSpawnedActor::_SpawnerGuid' has a wrong offset!");
static_assert(offsetof(FMaiSpawnedActor, _LastLocation) == 0x000048, "Member 'FMaiSpawnedActor::_LastLocation' has a wrong offset!");
static_assert(offsetof(FMaiSpawnedActor, _SoftOrigin) == 0x000060, "Member 'FMaiSpawnedActor::_SoftOrigin' has a wrong offset!");
static_assert(offsetof(FMaiSpawnedActor, _OriginCache) == 0x000090, "Member 'FMaiSpawnedActor::_OriginCache' has a wrong offset!");

// ScriptStruct Mai.MaiSpawnerData
// 0x0050 (0x0050 - 0x0000)
struct FMaiSpawnerData final
{
public:
	TWeakObjectPtr<class AMaiSpawner>             _Spawner;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          _Active;                                           // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          _AutoSpawn;                                        // 0x0009(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          _Spawned;                                          // 0x000A(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _SpawnerTag;                                       // 0x000C(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           _ActorTag;                                         // 0x0014(0x0008)(Edit, DisableEditOnTemplate, EditConst, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class AMaiSpawner>             _SoftRef;                                          // 0x0020(0x0030)(Edit, DisableEditOnTemplate, EditConst, SaveGame, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiSpawnerData) == 0x000008, "Wrong alignment on FMaiSpawnerData");
static_assert(sizeof(FMaiSpawnerData) == 0x000050, "Wrong size on FMaiSpawnerData");
static_assert(offsetof(FMaiSpawnerData, _Spawner) == 0x000000, "Member 'FMaiSpawnerData::_Spawner' has a wrong offset!");
static_assert(offsetof(FMaiSpawnerData, _Active) == 0x000008, "Member 'FMaiSpawnerData::_Active' has a wrong offset!");
static_assert(offsetof(FMaiSpawnerData, _AutoSpawn) == 0x000009, "Member 'FMaiSpawnerData::_AutoSpawn' has a wrong offset!");
static_assert(offsetof(FMaiSpawnerData, _Spawned) == 0x00000A, "Member 'FMaiSpawnerData::_Spawned' has a wrong offset!");
static_assert(offsetof(FMaiSpawnerData, _SpawnerTag) == 0x00000C, "Member 'FMaiSpawnerData::_SpawnerTag' has a wrong offset!");
static_assert(offsetof(FMaiSpawnerData, _ActorTag) == 0x000014, "Member 'FMaiSpawnerData::_ActorTag' has a wrong offset!");
static_assert(offsetof(FMaiSpawnerData, _SoftRef) == 0x000020, "Member 'FMaiSpawnerData::_SoftRef' has a wrong offset!");

// ScriptStruct Mai.MaiSpawnerID
// 0x0010 (0x0010 - 0x0000)
struct FMaiSpawnerID final
{
public:
	struct FGuid                                  _Uid;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiSpawnerID) == 0x000004, "Wrong alignment on FMaiSpawnerID");
static_assert(sizeof(FMaiSpawnerID) == 0x000010, "Wrong size on FMaiSpawnerID");
static_assert(offsetof(FMaiSpawnerID, _Uid) == 0x000000, "Member 'FMaiSpawnerID::_Uid' has a wrong offset!");

// ScriptStruct Mai.MaiSpawnerDebugData
// 0x0040 (0x0040 - 0x0000)
struct FMaiSpawnerDebugData final
{
public:
	struct FGuid                                  _Guid;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _Location;                                         // 0x0010(0x0018)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _HasFloor;                                         // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _IsHidden;                                         // 0x0029(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _Restoring;                                        // 0x002A(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _WantSpawn;                                        // 0x002B(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _Text;                                             // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiSpawnerDebugData) == 0x000008, "Wrong alignment on FMaiSpawnerDebugData");
static_assert(sizeof(FMaiSpawnerDebugData) == 0x000040, "Wrong size on FMaiSpawnerDebugData");
static_assert(offsetof(FMaiSpawnerDebugData, _Guid) == 0x000000, "Member 'FMaiSpawnerDebugData::_Guid' has a wrong offset!");
static_assert(offsetof(FMaiSpawnerDebugData, _Location) == 0x000010, "Member 'FMaiSpawnerDebugData::_Location' has a wrong offset!");
static_assert(offsetof(FMaiSpawnerDebugData, _HasFloor) == 0x000028, "Member 'FMaiSpawnerDebugData::_HasFloor' has a wrong offset!");
static_assert(offsetof(FMaiSpawnerDebugData, _IsHidden) == 0x000029, "Member 'FMaiSpawnerDebugData::_IsHidden' has a wrong offset!");
static_assert(offsetof(FMaiSpawnerDebugData, _Restoring) == 0x00002A, "Member 'FMaiSpawnerDebugData::_Restoring' has a wrong offset!");
static_assert(offsetof(FMaiSpawnerDebugData, _WantSpawn) == 0x00002B, "Member 'FMaiSpawnerDebugData::_WantSpawn' has a wrong offset!");
static_assert(offsetof(FMaiSpawnerDebugData, _Text) == 0x000030, "Member 'FMaiSpawnerDebugData::_Text' has a wrong offset!");

// ScriptStruct Mai.MaiSpawnerDebugStamp
// 0x0070 (0x0070 - 0x0000)
struct FMaiSpawnerDebugStamp final
{
public:
	TArray<struct FMaiSpawnerDebugData>           _DebugData;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	struct FTransform                             _PlayerTransform;                                  // 0x0010(0x0060)(Edit, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiSpawnerDebugStamp) == 0x000010, "Wrong alignment on FMaiSpawnerDebugStamp");
static_assert(sizeof(FMaiSpawnerDebugStamp) == 0x000070, "Wrong size on FMaiSpawnerDebugStamp");
static_assert(offsetof(FMaiSpawnerDebugStamp, _DebugData) == 0x000000, "Member 'FMaiSpawnerDebugStamp::_DebugData' has a wrong offset!");
static_assert(offsetof(FMaiSpawnerDebugStamp, _PlayerTransform) == 0x000010, "Member 'FMaiSpawnerDebugStamp::_PlayerTransform' has a wrong offset!");

// ScriptStruct Mai.MaiWaveSpawn
// 0x0010 (0x0010 - 0x0000)
struct FMaiWaveSpawn final
{
public:
	int32                                         _Limit;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _MinDelay;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _MaxDelay;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _NextSpawn;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiWaveSpawn) == 0x000004, "Wrong alignment on FMaiWaveSpawn");
static_assert(sizeof(FMaiWaveSpawn) == 0x000010, "Wrong size on FMaiWaveSpawn");
static_assert(offsetof(FMaiWaveSpawn, _Limit) == 0x000000, "Member 'FMaiWaveSpawn::_Limit' has a wrong offset!");
static_assert(offsetof(FMaiWaveSpawn, _MinDelay) == 0x000004, "Member 'FMaiWaveSpawn::_MinDelay' has a wrong offset!");
static_assert(offsetof(FMaiWaveSpawn, _MaxDelay) == 0x000008, "Member 'FMaiWaveSpawn::_MaxDelay' has a wrong offset!");
static_assert(offsetof(FMaiWaveSpawn, _NextSpawn) == 0x00000C, "Member 'FMaiWaveSpawn::_NextSpawn' has a wrong offset!");

// ScriptStruct Mai.MaiHitDifficulty
// 0x0010 (0x0010 - 0x0000)
struct FMaiHitDifficulty final
{
public:
	TArray<uint8>                                 _ChancePerHit;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiHitDifficulty) == 0x000008, "Wrong alignment on FMaiHitDifficulty");
static_assert(sizeof(FMaiHitDifficulty) == 0x000010, "Wrong size on FMaiHitDifficulty");
static_assert(offsetof(FMaiHitDifficulty, _ChancePerHit) == 0x000000, "Member 'FMaiHitDifficulty::_ChancePerHit' has a wrong offset!");

// ScriptStruct Mai.MaiFloatDiff
// 0x0028 (0x0028 - 0x0000)
struct FMaiFloatDiff final
{
public:
	float                                         _Value[0xA];                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiFloatDiff) == 0x000004, "Wrong alignment on FMaiFloatDiff");
static_assert(sizeof(FMaiFloatDiff) == 0x000028, "Wrong size on FMaiFloatDiff");
static_assert(offsetof(FMaiFloatDiff, _Value) == 0x000000, "Member 'FMaiFloatDiff::_Value' has a wrong offset!");

// ScriptStruct Mai.MaiTableOfBytes
// 0x0010 (0x0010 - 0x0000)
struct FMaiTableOfBytes final
{
public:
	TArray<uint8>                                 _Table;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiTableOfBytes) == 0x000008, "Wrong alignment on FMaiTableOfBytes");
static_assert(sizeof(FMaiTableOfBytes) == 0x000010, "Wrong size on FMaiTableOfBytes");
static_assert(offsetof(FMaiTableOfBytes, _Table) == 0x000000, "Member 'FMaiTableOfBytes::_Table' has a wrong offset!");

// ScriptStruct Mai.MaiTableOfBytesDiff
// 0x00A0 (0x00A0 - 0x0000)
struct FMaiTableOfBytesDiff final
{
public:
	struct FMaiTableOfBytes                       _Value[0xA];                                       // 0x0000(0x0010)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiTableOfBytesDiff) == 0x000008, "Wrong alignment on FMaiTableOfBytesDiff");
static_assert(sizeof(FMaiTableOfBytesDiff) == 0x0000A0, "Wrong size on FMaiTableOfBytesDiff");
static_assert(offsetof(FMaiTableOfBytesDiff, _Value) == 0x000000, "Member 'FMaiTableOfBytesDiff::_Value' has a wrong offset!");

// ScriptStruct Mai.MaiCone
// 0x0050 (0x0050 - 0x0000)
struct FMaiCone final
{
public:
	struct FVector                                _Origin;                                           // 0x0000(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _Direction;                                        // 0x0018(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _Angle;                                            // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _Length;                                           // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               _Rotation;                                         // 0x0038(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiCone) == 0x000008, "Wrong alignment on FMaiCone");
static_assert(sizeof(FMaiCone) == 0x000050, "Wrong size on FMaiCone");
static_assert(offsetof(FMaiCone, _Origin) == 0x000000, "Member 'FMaiCone::_Origin' has a wrong offset!");
static_assert(offsetof(FMaiCone, _Direction) == 0x000018, "Member 'FMaiCone::_Direction' has a wrong offset!");
static_assert(offsetof(FMaiCone, _Angle) == 0x000030, "Member 'FMaiCone::_Angle' has a wrong offset!");
static_assert(offsetof(FMaiCone, _Length) == 0x000034, "Member 'FMaiCone::_Length' has a wrong offset!");
static_assert(offsetof(FMaiCone, _Rotation) == 0x000038, "Member 'FMaiCone::_Rotation' has a wrong offset!");

// ScriptStruct Mai.MaiTickLODConfig
// 0x0008 (0x0008 - 0x0000)
struct FMaiTickLODConfig final
{
public:
	float                                         _MaxDistance;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _TickInterval;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiTickLODConfig) == 0x000004, "Wrong alignment on FMaiTickLODConfig");
static_assert(sizeof(FMaiTickLODConfig) == 0x000008, "Wrong size on FMaiTickLODConfig");
static_assert(offsetof(FMaiTickLODConfig, _MaxDistance) == 0x000000, "Member 'FMaiTickLODConfig::_MaxDistance' has a wrong offset!");
static_assert(offsetof(FMaiTickLODConfig, _TickInterval) == 0x000004, "Member 'FMaiTickLODConfig::_TickInterval' has a wrong offset!");

// ScriptStruct Mai.MaiWallNavGeneration
// 0x0028 (0x0028 - 0x0000)
struct FMaiWallNavGeneration final
{
public:
	bool                                          _Synchronous;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _TileSize;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _CellSize;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _AgentHeight;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _AgentRadius;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _AgentMaxStepHeight;                               // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EObjectTypeQuery>                      _ObjectTypeQueries;                                // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiWallNavGeneration) == 0x000008, "Wrong alignment on FMaiWallNavGeneration");
static_assert(sizeof(FMaiWallNavGeneration) == 0x000028, "Wrong size on FMaiWallNavGeneration");
static_assert(offsetof(FMaiWallNavGeneration, _Synchronous) == 0x000000, "Member 'FMaiWallNavGeneration::_Synchronous' has a wrong offset!");
static_assert(offsetof(FMaiWallNavGeneration, _TileSize) == 0x000004, "Member 'FMaiWallNavGeneration::_TileSize' has a wrong offset!");
static_assert(offsetof(FMaiWallNavGeneration, _CellSize) == 0x000008, "Member 'FMaiWallNavGeneration::_CellSize' has a wrong offset!");
static_assert(offsetof(FMaiWallNavGeneration, _AgentHeight) == 0x00000C, "Member 'FMaiWallNavGeneration::_AgentHeight' has a wrong offset!");
static_assert(offsetof(FMaiWallNavGeneration, _AgentRadius) == 0x000010, "Member 'FMaiWallNavGeneration::_AgentRadius' has a wrong offset!");
static_assert(offsetof(FMaiWallNavGeneration, _AgentMaxStepHeight) == 0x000014, "Member 'FMaiWallNavGeneration::_AgentMaxStepHeight' has a wrong offset!");
static_assert(offsetof(FMaiWallNavGeneration, _ObjectTypeQueries) == 0x000018, "Member 'FMaiWallNavGeneration::_ObjectTypeQueries' has a wrong offset!");

// ScriptStruct Mai.MaiWallNavTriVerts
// 0x0060 (0x0060 - 0x0000)
struct FMaiWallNavTriVerts final
{
public:
	struct FVector                                _Points[0x3];                                      // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _Normal;                                           // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiWallNavTriVerts) == 0x000008, "Wrong alignment on FMaiWallNavTriVerts");
static_assert(sizeof(FMaiWallNavTriVerts) == 0x000060, "Wrong size on FMaiWallNavTriVerts");
static_assert(offsetof(FMaiWallNavTriVerts, _Points) == 0x000000, "Member 'FMaiWallNavTriVerts::_Points' has a wrong offset!");
static_assert(offsetof(FMaiWallNavTriVerts, _Normal) == 0x000048, "Member 'FMaiWallNavTriVerts::_Normal' has a wrong offset!");

// ScriptStruct Mai.MaiWallNavTriangle
// 0x0014 (0x0014 - 0x0000)
struct FMaiWallNavTriangle final
{
public:
	uint32                                        _FirstLink;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        _PointIdx[0x3];                                    // 0x0004(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        _NeigsIdx[0x3];                                    // 0x000A(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          _RegionIdx;                                        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _AreaType;                                         // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        _Flags;                                            // 0x0012(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiWallNavTriangle) == 0x000004, "Wrong alignment on FMaiWallNavTriangle");
static_assert(sizeof(FMaiWallNavTriangle) == 0x000014, "Wrong size on FMaiWallNavTriangle");
static_assert(offsetof(FMaiWallNavTriangle, _FirstLink) == 0x000000, "Member 'FMaiWallNavTriangle::_FirstLink' has a wrong offset!");
static_assert(offsetof(FMaiWallNavTriangle, _PointIdx) == 0x000004, "Member 'FMaiWallNavTriangle::_PointIdx' has a wrong offset!");
static_assert(offsetof(FMaiWallNavTriangle, _NeigsIdx) == 0x00000A, "Member 'FMaiWallNavTriangle::_NeigsIdx' has a wrong offset!");
static_assert(offsetof(FMaiWallNavTriangle, _RegionIdx) == 0x000010, "Member 'FMaiWallNavTriangle::_RegionIdx' has a wrong offset!");
static_assert(offsetof(FMaiWallNavTriangle, _AreaType) == 0x000011, "Member 'FMaiWallNavTriangle::_AreaType' has a wrong offset!");
static_assert(offsetof(FMaiWallNavTriangle, _Flags) == 0x000012, "Member 'FMaiWallNavTriangle::_Flags' has a wrong offset!");

// ScriptStruct Mai.MaiWallNavConnection
// 0x0006 (0x0006 - 0x0000)
struct FMaiWallNavConnection
{
public:
	int16                                         _TargetPointIdx;                                   // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         _RightTriIdx;                                      // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         _LinkIdx;                                          // 0x0004(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiWallNavConnection) == 0x000002, "Wrong alignment on FMaiWallNavConnection");
static_assert(sizeof(FMaiWallNavConnection) == 0x000006, "Wrong size on FMaiWallNavConnection");
static_assert(offsetof(FMaiWallNavConnection, _TargetPointIdx) == 0x000000, "Member 'FMaiWallNavConnection::_TargetPointIdx' has a wrong offset!");
static_assert(offsetof(FMaiWallNavConnection, _RightTriIdx) == 0x000002, "Member 'FMaiWallNavConnection::_RightTriIdx' has a wrong offset!");
static_assert(offsetof(FMaiWallNavConnection, _LinkIdx) == 0x000004, "Member 'FMaiWallNavConnection::_LinkIdx' has a wrong offset!");

// ScriptStruct Mai.MaiWallNavPoint
// 0x0028 (0x0028 - 0x0000)
struct FMaiWallNavPoint final
{
public:
	struct FVector                                _Location;                                         // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMaiWallNavConnection>          _Connections;                                      // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiWallNavPoint) == 0x000008, "Wrong alignment on FMaiWallNavPoint");
static_assert(sizeof(FMaiWallNavPoint) == 0x000028, "Wrong size on FMaiWallNavPoint");
static_assert(offsetof(FMaiWallNavPoint, _Location) == 0x000000, "Member 'FMaiWallNavPoint::_Location' has a wrong offset!");
static_assert(offsetof(FMaiWallNavPoint, _Connections) == 0x000018, "Member 'FMaiWallNavPoint::_Connections' has a wrong offset!");

// ScriptStruct Mai.MaiWallNavSurface
// 0x0020 (0x0020 - 0x0000)
struct FMaiWallNavSurface final
{
public:
	TArray<struct FMaiWallNavPoint>               _NavVerts;                                         // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMaiWallNavTriangle>            _NavPolys;                                         // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiWallNavSurface) == 0x000008, "Wrong alignment on FMaiWallNavSurface");
static_assert(sizeof(FMaiWallNavSurface) == 0x000020, "Wrong size on FMaiWallNavSurface");
static_assert(offsetof(FMaiWallNavSurface, _NavVerts) == 0x000000, "Member 'FMaiWallNavSurface::_NavVerts' has a wrong offset!");
static_assert(offsetof(FMaiWallNavSurface, _NavPolys) == 0x000010, "Member 'FMaiWallNavSurface::_NavPolys' has a wrong offset!");

// ScriptStruct Mai.MaiWallNavPolyLink
// 0x000C (0x000C - 0x0000)
struct FMaiWallNavPolyLink final
{
public:
	uint32                                        _TargetPoly;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        _NextLink;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _Edge;                                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _BorderSide;                                       // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _BMin;                                             // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _BMax;                                             // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiWallNavPolyLink) == 0x000004, "Wrong alignment on FMaiWallNavPolyLink");
static_assert(sizeof(FMaiWallNavPolyLink) == 0x00000C, "Wrong size on FMaiWallNavPolyLink");
static_assert(offsetof(FMaiWallNavPolyLink, _TargetPoly) == 0x000000, "Member 'FMaiWallNavPolyLink::_TargetPoly' has a wrong offset!");
static_assert(offsetof(FMaiWallNavPolyLink, _NextLink) == 0x000004, "Member 'FMaiWallNavPolyLink::_NextLink' has a wrong offset!");
static_assert(offsetof(FMaiWallNavPolyLink, _Edge) == 0x000008, "Member 'FMaiWallNavPolyLink::_Edge' has a wrong offset!");
static_assert(offsetof(FMaiWallNavPolyLink, _BorderSide) == 0x000009, "Member 'FMaiWallNavPolyLink::_BorderSide' has a wrong offset!");
static_assert(offsetof(FMaiWallNavPolyLink, _BMin) == 0x00000A, "Member 'FMaiWallNavPolyLink::_BMin' has a wrong offset!");
static_assert(offsetof(FMaiWallNavPolyLink, _BMax) == 0x00000B, "Member 'FMaiWallNavPolyLink::_BMax' has a wrong offset!");

// ScriptStruct Mai.MaiWallPathLink
// 0x0050 (0x0050 - 0x0000)
struct FMaiWallPathLink final
{
public:
	uint32                                        _TargetPoly;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaiLinkType                                  _Type;                                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                _Location;                                         // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _Start;                                            // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _End;                                              // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiWallPathLink) == 0x000008, "Wrong alignment on FMaiWallPathLink");
static_assert(sizeof(FMaiWallPathLink) == 0x000050, "Wrong size on FMaiWallPathLink");
static_assert(offsetof(FMaiWallPathLink, _TargetPoly) == 0x000000, "Member 'FMaiWallPathLink::_TargetPoly' has a wrong offset!");
static_assert(offsetof(FMaiWallPathLink, _Type) == 0x000004, "Member 'FMaiWallPathLink::_Type' has a wrong offset!");
static_assert(offsetof(FMaiWallPathLink, _Location) == 0x000008, "Member 'FMaiWallPathLink::_Location' has a wrong offset!");
static_assert(offsetof(FMaiWallPathLink, _Start) == 0x000020, "Member 'FMaiWallPathLink::_Start' has a wrong offset!");
static_assert(offsetof(FMaiWallPathLink, _End) == 0x000038, "Member 'FMaiWallPathLink::_End' has a wrong offset!");

// ScriptStruct Mai.MaiWallPathPoint
// 0x0040 (0x0040 - 0x0000)
struct FMaiWallPathPoint final
{
public:
	struct FVector                                _Location;                                         // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _Normal;                                           // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        _NavID;                                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        _CustomLinkId;                                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaiWallPathPoint) == 0x000008, "Wrong alignment on FMaiWallPathPoint");
static_assert(sizeof(FMaiWallPathPoint) == 0x000040, "Wrong size on FMaiWallPathPoint");
static_assert(offsetof(FMaiWallPathPoint, _Location) == 0x000000, "Member 'FMaiWallPathPoint::_Location' has a wrong offset!");
static_assert(offsetof(FMaiWallPathPoint, _Normal) == 0x000018, "Member 'FMaiWallPathPoint::_Normal' has a wrong offset!");
static_assert(offsetof(FMaiWallPathPoint, _NavID) == 0x000030, "Member 'FMaiWallPathPoint::_NavID' has a wrong offset!");
static_assert(offsetof(FMaiWallPathPoint, _CustomLinkId) == 0x000038, "Member 'FMaiWallPathPoint::_CustomLinkId' has a wrong offset!");

// ScriptStruct Mai.MaiWallOffMeshConnection
// 0x0098 (0x0098 - 0x0000)
struct FMaiWallOffMeshConnection final
{
public:
	struct FMaiWallPathPoint                      _Left;                                             // 0x0000(0x0040)(NoDestructor, NativeAccessSpecifierPublic)
	struct FMaiWallPathPoint                      _Right;                                            // 0x0040(0x0040)(NoDestructor, NativeAccessSpecifierPublic)
	int32                                         _UserID;                                           // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNavArea*                               _Area;                                             // 0x0088(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _SnapHeight;                                       // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _SnapRadius;                                       // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _BorderSide;                                       // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_93[0x5];                                       // 0x0093(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaiWallOffMeshConnection) == 0x000008, "Wrong alignment on FMaiWallOffMeshConnection");
static_assert(sizeof(FMaiWallOffMeshConnection) == 0x000098, "Wrong size on FMaiWallOffMeshConnection");
static_assert(offsetof(FMaiWallOffMeshConnection, _Left) == 0x000000, "Member 'FMaiWallOffMeshConnection::_Left' has a wrong offset!");
static_assert(offsetof(FMaiWallOffMeshConnection, _Right) == 0x000040, "Member 'FMaiWallOffMeshConnection::_Right' has a wrong offset!");
static_assert(offsetof(FMaiWallOffMeshConnection, _UserID) == 0x000080, "Member 'FMaiWallOffMeshConnection::_UserID' has a wrong offset!");
static_assert(offsetof(FMaiWallOffMeshConnection, _Area) == 0x000088, "Member 'FMaiWallOffMeshConnection::_Area' has a wrong offset!");
static_assert(offsetof(FMaiWallOffMeshConnection, _SnapHeight) == 0x000090, "Member 'FMaiWallOffMeshConnection::_SnapHeight' has a wrong offset!");
static_assert(offsetof(FMaiWallOffMeshConnection, _SnapRadius) == 0x000091, "Member 'FMaiWallOffMeshConnection::_SnapRadius' has a wrong offset!");
static_assert(offsetof(FMaiWallOffMeshConnection, _BorderSide) == 0x000092, "Member 'FMaiWallOffMeshConnection::_BorderSide' has a wrong offset!");

// ScriptStruct Mai.MaiWallPathConnection
// 0x0048 (0x0048 - 0x0000)
struct FMaiWallPathConnection final
{
public:
	struct FMaiWallPathPoint                      _TargetPoint;                                      // 0x0000(0x0040)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         _Dist;                                             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaiWallPathConnection) == 0x000008, "Wrong alignment on FMaiWallPathConnection");
static_assert(sizeof(FMaiWallPathConnection) == 0x000048, "Wrong size on FMaiWallPathConnection");
static_assert(offsetof(FMaiWallPathConnection, _TargetPoint) == 0x000000, "Member 'FMaiWallPathConnection::_TargetPoint' has a wrong offset!");
static_assert(offsetof(FMaiWallPathConnection, _Dist) == 0x000040, "Member 'FMaiWallPathConnection::_Dist' has a wrong offset!");

// ScriptStruct Mai.MaiWallMeshTileData
// 0x0120 (0x0120 - 0x0000)
struct FMaiWallMeshTileData final
{
public:
	int32                                         _TileID;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                _BoxOrigin;                                        // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _BoxExtent;                                        // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _Margin;                                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMaiWallNavSurface                     _NavSurfs[0x6];                                    // 0x0040(0x0020)(NativeAccessSpecifierPublic)
	TArray<struct FMaiWallNavPolyLink>            _NavLinks;                                         // 0x0100(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMaiWallOffMeshConnection>      _NavOffMeshConnections;                            // 0x0110(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiWallMeshTileData) == 0x000008, "Wrong alignment on FMaiWallMeshTileData");
static_assert(sizeof(FMaiWallMeshTileData) == 0x000120, "Wrong size on FMaiWallMeshTileData");
static_assert(offsetof(FMaiWallMeshTileData, _TileID) == 0x000000, "Member 'FMaiWallMeshTileData::_TileID' has a wrong offset!");
static_assert(offsetof(FMaiWallMeshTileData, _BoxOrigin) == 0x000008, "Member 'FMaiWallMeshTileData::_BoxOrigin' has a wrong offset!");
static_assert(offsetof(FMaiWallMeshTileData, _BoxExtent) == 0x000020, "Member 'FMaiWallMeshTileData::_BoxExtent' has a wrong offset!");
static_assert(offsetof(FMaiWallMeshTileData, _Margin) == 0x000038, "Member 'FMaiWallMeshTileData::_Margin' has a wrong offset!");
static_assert(offsetof(FMaiWallMeshTileData, _NavSurfs) == 0x000040, "Member 'FMaiWallMeshTileData::_NavSurfs' has a wrong offset!");
static_assert(offsetof(FMaiWallMeshTileData, _NavLinks) == 0x000100, "Member 'FMaiWallMeshTileData::_NavLinks' has a wrong offset!");
static_assert(offsetof(FMaiWallMeshTileData, _NavOffMeshConnections) == 0x000110, "Member 'FMaiWallMeshTileData::_NavOffMeshConnections' has a wrong offset!");

// ScriptStruct Mai.MaiWallNavPortal
// 0x0040 (0x0040 - 0x0000)
struct FMaiWallNavPortal final
{
public:
	struct FVector                                _PointA;                                           // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _PointB;                                           // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          _Region;                                           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _IdxA;                                             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _IdxB;                                             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaiWallNavPortal) == 0x000008, "Wrong alignment on FMaiWallNavPortal");
static_assert(sizeof(FMaiWallNavPortal) == 0x000040, "Wrong size on FMaiWallNavPortal");
static_assert(offsetof(FMaiWallNavPortal, _PointA) == 0x000000, "Member 'FMaiWallNavPortal::_PointA' has a wrong offset!");
static_assert(offsetof(FMaiWallNavPortal, _PointB) == 0x000018, "Member 'FMaiWallNavPortal::_PointB' has a wrong offset!");
static_assert(offsetof(FMaiWallNavPortal, _Region) == 0x000030, "Member 'FMaiWallNavPortal::_Region' has a wrong offset!");
static_assert(offsetof(FMaiWallNavPortal, _IdxA) == 0x000034, "Member 'FMaiWallNavPortal::_IdxA' has a wrong offset!");
static_assert(offsetof(FMaiWallNavPortal, _IdxB) == 0x000038, "Member 'FMaiWallNavPortal::_IdxB' has a wrong offset!");

// ScriptStruct Mai.MaiWallPointBorder
// 0x0002 (0x0008 - 0x0006)
struct FMaiWallPointBorder final : public FMaiWallNavConnection
{
public:
	int16                                         _SourcePointIdx;                                   // 0x0006(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaiWallPointBorder) == 0x000002, "Wrong alignment on FMaiWallPointBorder");
static_assert(sizeof(FMaiWallPointBorder) == 0x000008, "Wrong size on FMaiWallPointBorder");
static_assert(offsetof(FMaiWallPointBorder, _SourcePointIdx) == 0x000006, "Member 'FMaiWallPointBorder::_SourcePointIdx' has a wrong offset!");

// ScriptStruct Mai.MaiWallNavSegment
// 0x0006 (0x0006 - 0x0000)
struct FMaiWallNavSegment final
{
public:
	int16                                         _PointLeftIdx;                                     // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         _PointRightIdx;                                    // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          _Surface;                                          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x1];                                        // 0x0005(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaiWallNavSegment) == 0x000002, "Wrong alignment on FMaiWallNavSegment");
static_assert(sizeof(FMaiWallNavSegment) == 0x000006, "Wrong size on FMaiWallNavSegment");
static_assert(offsetof(FMaiWallNavSegment, _PointLeftIdx) == 0x000000, "Member 'FMaiWallNavSegment::_PointLeftIdx' has a wrong offset!");
static_assert(offsetof(FMaiWallNavSegment, _PointRightIdx) == 0x000002, "Member 'FMaiWallNavSegment::_PointRightIdx' has a wrong offset!");
static_assert(offsetof(FMaiWallNavSegment, _Surface) == 0x000004, "Member 'FMaiWallNavSegment::_Surface' has a wrong offset!");

// ScriptStruct Mai.MaiWallNavBorder
// 0x0004 (0x0004 - 0x0000)
struct FMaiWallNavBorder
{
public:
	uint16                                        _PolyIdx;                                          // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _PolyEdge;                                         // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaiWallNavBorder) == 0x000002, "Wrong alignment on FMaiWallNavBorder");
static_assert(sizeof(FMaiWallNavBorder) == 0x000004, "Wrong size on FMaiWallNavBorder");
static_assert(offsetof(FMaiWallNavBorder, _PolyIdx) == 0x000000, "Member 'FMaiWallNavBorder::_PolyIdx' has a wrong offset!");
static_assert(offsetof(FMaiWallNavBorder, _PolyEdge) == 0x000002, "Member 'FMaiWallNavBorder::_PolyEdge' has a wrong offset!");

// ScriptStruct Mai.MaiWallNavContour
// 0x003C (0x0040 - 0x0004)
struct FMaiWallNavContour final : public FMaiWallNavBorder
{
public:
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                _Start;                                            // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _End;                                              // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          _Region;                                           // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          _Surface;                                          // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaiWallNavContour) == 0x000008, "Wrong alignment on FMaiWallNavContour");
static_assert(sizeof(FMaiWallNavContour) == 0x000040, "Wrong size on FMaiWallNavContour");
static_assert(offsetof(FMaiWallNavContour, _Start) == 0x000008, "Member 'FMaiWallNavContour::_Start' has a wrong offset!");
static_assert(offsetof(FMaiWallNavContour, _End) == 0x000020, "Member 'FMaiWallNavContour::_End' has a wrong offset!");
static_assert(offsetof(FMaiWallNavContour, _Region) == 0x000038, "Member 'FMaiWallNavContour::_Region' has a wrong offset!");
static_assert(offsetof(FMaiWallNavContour, _Surface) == 0x000039, "Member 'FMaiWallNavContour::_Surface' has a wrong offset!");

// ScriptStruct Mai.MaiWork
// 0x0068 (0x0068 - 0x0000)
struct FMaiWork final
{
public:
	bool                                          _UseSingleAction;                                  // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaiAction*                             _Action;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBehaviorTree*                          _Behavior;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDaiConditions                         _Conditions;                                       // 0x0018(0x0030)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FDaiNotifies                           _Config;                                           // 0x0048(0x0018)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         _Weight;                                           // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaiWork) == 0x000008, "Wrong alignment on FMaiWork");
static_assert(sizeof(FMaiWork) == 0x000068, "Wrong size on FMaiWork");
static_assert(offsetof(FMaiWork, _UseSingleAction) == 0x000000, "Member 'FMaiWork::_UseSingleAction' has a wrong offset!");
static_assert(offsetof(FMaiWork, _Action) == 0x000008, "Member 'FMaiWork::_Action' has a wrong offset!");
static_assert(offsetof(FMaiWork, _Behavior) == 0x000010, "Member 'FMaiWork::_Behavior' has a wrong offset!");
static_assert(offsetof(FMaiWork, _Conditions) == 0x000018, "Member 'FMaiWork::_Conditions' has a wrong offset!");
static_assert(offsetof(FMaiWork, _Config) == 0x000048, "Member 'FMaiWork::_Config' has a wrong offset!");
static_assert(offsetof(FMaiWork, _Weight) == 0x000060, "Member 'FMaiWork::_Weight' has a wrong offset!");

}

