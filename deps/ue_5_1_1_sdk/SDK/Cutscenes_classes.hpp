#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Cutscenes

#include "Basic.hpp"

#include "InputRebinding_structs.hpp"
#include "Cutscenes_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "UCW_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class Cutscenes.CutsceneCachedCharacter
// 0x0018 (0x02C8 - 0x02B0)
class ACutsceneCachedCharacter final : public AActor
{
public:
	uint8                                         Pad_2B0[0x8];                                      // 0x02B0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        RootSceneComponent;                                // 0x02B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshExComponent*               Mesh;                                              // 0x02C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CutsceneCachedCharacter">();
	}
	static class ACutsceneCachedCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACutsceneCachedCharacter>();
	}
};
static_assert(alignof(ACutsceneCachedCharacter) == 0x000008, "Wrong alignment on ACutsceneCachedCharacter");
static_assert(sizeof(ACutsceneCachedCharacter) == 0x0002C8, "Wrong size on ACutsceneCachedCharacter");
static_assert(offsetof(ACutsceneCachedCharacter, RootSceneComponent) == 0x0002B8, "Member 'ACutsceneCachedCharacter::RootSceneComponent' has a wrong offset!");
static_assert(offsetof(ACutsceneCachedCharacter, Mesh) == 0x0002C0, "Member 'ACutsceneCachedCharacter::Mesh' has a wrong offset!");

// Class Cutscenes.CutsceneCachedCharacterInterface
// 0x0000 (0x0028 - 0x0028)
class ICutsceneCachedCharacterInterface final : public IInterface
{
public:
	bool CachedActorDespawned();
	bool CachedActorDisabled();
	bool CachedActorEnabled();
	bool CachedActorSpawned();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CutsceneCachedCharacterInterface">();
	}
	static class ICutsceneCachedCharacterInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ICutsceneCachedCharacterInterface>();
	}
};
static_assert(alignof(ICutsceneCachedCharacterInterface) == 0x000008, "Wrong alignment on ICutsceneCachedCharacterInterface");
static_assert(sizeof(ICutsceneCachedCharacterInterface) == 0x000028, "Wrong size on ICutsceneCachedCharacterInterface");

// Class Cutscenes.CutsceneCharacterAnimInstance
// 0x0020 (0x0370 - 0x0350)
class UCutsceneCharacterAnimInstance final : public UAnimInstance
{
public:
	class FName                                   CutsceneFaceSlotName;                              // 0x0348(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IgnoreInputPose;                                   // 0x0350(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_351[0x3];                                      // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CutsceneAlpha;                                     // 0x0354(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_358[0x18];                                     // 0x0358(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float CalculateFaceSlotAlpha() const;
	bool IsPlayingAnySlotAnimation(class FName SlotName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CutsceneCharacterAnimInstance">();
	}
	static class UCutsceneCharacterAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCutsceneCharacterAnimInstance>();
	}
};
static_assert(alignof(UCutsceneCharacterAnimInstance) == 0x000010, "Wrong alignment on UCutsceneCharacterAnimInstance");
static_assert(sizeof(UCutsceneCharacterAnimInstance) == 0x000370, "Wrong size on UCutsceneCharacterAnimInstance");
static_assert(offsetof(UCutsceneCharacterAnimInstance, CutsceneFaceSlotName) == 0x000348, "Member 'UCutsceneCharacterAnimInstance::CutsceneFaceSlotName' has a wrong offset!");
static_assert(offsetof(UCutsceneCharacterAnimInstance, IgnoreInputPose) == 0x000350, "Member 'UCutsceneCharacterAnimInstance::IgnoreInputPose' has a wrong offset!");
static_assert(offsetof(UCutsceneCharacterAnimInstance, CutsceneAlpha) == 0x000354, "Member 'UCutsceneCharacterAnimInstance::CutsceneAlpha' has a wrong offset!");

// Class Cutscenes.CutsceneCharacterManager
// 0x00C8 (0x00F8 - 0x0030)
class UCutsceneCharacterManager final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0xC8];                                      // 0x0030(0x00C8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CutsceneCharacterManager">();
	}
	static class UCutsceneCharacterManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCutsceneCharacterManager>();
	}
};
static_assert(alignof(UCutsceneCharacterManager) == 0x000008, "Wrong alignment on UCutsceneCharacterManager");
static_assert(sizeof(UCutsceneCharacterManager) == 0x0000F8, "Wrong size on UCutsceneCharacterManager");

// Class Cutscenes.CutsceneCharacterPossessorInterface
// 0x0000 (0x0028 - 0x0028)
class ICutsceneCharacterPossessorInterface final : public IInterface
{
public:
	void CutsceneCharacterProxyPossessed();
	void CutsceneCharacterProxyUnPossessed();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CutsceneCharacterPossessorInterface">();
	}
	static class ICutsceneCharacterPossessorInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ICutsceneCharacterPossessorInterface>();
	}
};
static_assert(alignof(ICutsceneCharacterPossessorInterface) == 0x000008, "Wrong alignment on ICutsceneCharacterPossessorInterface");
static_assert(sizeof(ICutsceneCharacterPossessorInterface) == 0x000028, "Wrong size on ICutsceneCharacterPossessorInterface");

// Class Cutscenes.CutsceneCharacterProxy
// 0x0040 (0x02F0 - 0x02B0)
class ACutsceneCharacterProxy final : public AActor
{
public:
	struct FLightingChannels                      MeshLightingChannels;                              // 0x02B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B1[0x37];                                     // 0x02B1(0x0037)(Fixing Size After Last Property [ Dumper-7 ])
	class UCapsuleComponent*                      CapsuleComponent;                                  // 0x02E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CutsceneCharacterProxy">();
	}
	static class ACutsceneCharacterProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACutsceneCharacterProxy>();
	}
};
static_assert(alignof(ACutsceneCharacterProxy) == 0x000008, "Wrong alignment on ACutsceneCharacterProxy");
static_assert(sizeof(ACutsceneCharacterProxy) == 0x0002F0, "Wrong size on ACutsceneCharacterProxy");
static_assert(offsetof(ACutsceneCharacterProxy, MeshLightingChannels) == 0x0002B0, "Member 'ACutsceneCharacterProxy::MeshLightingChannels' has a wrong offset!");
static_assert(offsetof(ACutsceneCharacterProxy, CapsuleComponent) == 0x0002E8, "Member 'ACutsceneCharacterProxy::CapsuleComponent' has a wrong offset!");

// Class Cutscenes.CutscenePlayer
// 0x0288 (0x0538 - 0x02B0)
class ACutscenePlayer : public AActor
{
public:
	class ALevelSequenceActor*                    LevelSequenceActor;                                // 0x02B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkComponent*                           SoundTrackComponent;                               // 0x02B8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          MusicTrack;                                        // 0x02C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          StopMusicTrackWithCutscene;                        // 0x02C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          SkipAudioEvent;                                    // 0x02D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bPlayOnlyOnce : 1;                                 // 0x02D8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bStopAllActiveDialogsAtStart : 1;                  // 0x02D8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bTeleportPlayerAfterCutscene : 1;                  // 0x02D8(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_2D9[0x7];                                      // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCutsceneSkipSettings                  SkipSettings;                                      // 0x02E0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	bool                                          UseCustomCharacterBlendInTime;                     // 0x02F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F9[0x3];                                      // 0x02F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomCharacterBlendInTime;                        // 0x02FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          UseCustomCharacterBlendOutTime;                    // 0x0300(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_301[0x3];                                      // 0x0301(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomCharacterBlendOutTime;                       // 0x0304(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          DisableCharacterCollisions;                        // 0x0308(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          DisableCharacterFootIK;                            // 0x0309(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          OverrideLightingChannelsUsingProxyMesh;            // 0x030A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ForceLOD0OnCharacters;                             // 0x030B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ACutscenePlayer>         PlayAsNextCutcene;                                 // 0x0310(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          PropagateSkipToNextCutscene;                       // 0x0340(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class ACutsceneTexturesStreamingBoostLocation>> TexturesStreamingBoostLocations;                   // 0x0348(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<struct FCutsceneBoostMaterialConfig>   MaterialsStreamingBoostInstances;                  // 0x0358(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          WaitForAllAssetsToStreamInAtCutsceneStart;         // 0x0368(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnCutscenePreStart;                                // 0x0370(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_380[0x18];                                     // 0x0380(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnCutscenePlay;                                    // 0x0398(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A8[0x18];                                     // 0x03A8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnCutscenePlayReverse;                             // 0x03C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D0[0x18];                                     // 0x03D0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnCutsceneStop;                                    // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F8[0x18];                                     // 0x03F8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnCutscenePause;                                   // 0x0410(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_420[0x18];                                     // 0x0420(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnCutscenePreFinished;                             // 0x0438(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_448[0x18];                                     // 0x0448(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnCutsceneFinished;                                // 0x0460(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_470[0x18];                                     // 0x0470(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnCameraCut;                                       // 0x0488(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_498[0x30];                                     // 0x0498(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bPlayedOnce : 1;                                   // 0x04C8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_4C9[0xF];                                      // 0x04C9(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          StreamingSkipConditionsMet;                        // 0x04D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          WaitForStreamingRequestsCompletion;                // 0x04D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4DA[0x6];                                      // 0x04DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCharacterBinding>              CharacterBindings;                                 // 0x04E0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FDialogSpeakerBinding>          DialogSpeakersBindings;                            // 0x04F0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class USceneComponent*>                StandaloneDialogSpeakers;                          // 0x0500(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class AActor*>                         ActorsSynchronizedWithPlayer;                      // 0x0510(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class ULevelStreamingManager*                 LevelStreamingManager;                             // 0x0520(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_528[0x10];                                     // 0x0528(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool Activate();
	void CutsceneEvent__DelegateSignature();
	void CutsceneFinishedEvent__DelegateSignature(bool WasSkiped);
	void Deactivate();
	bool IsCharacterBindedWithProxy(class ACharacter* Character);
	void OnCutsceneCameraCutEvent__DelegateSignature(class UCameraComponent* CameraComponent);
	void OnLevelSequenceCameraCut(class UCameraComponent* CameraComponent);
	void OnLevelSequenceFinished();
	void OnLevelSequencePause();
	void OnLevelSequencePlay();
	void OnLevelSequencePlayReverse();
	void OnLevelSequenceStop();
	bool UnbindCharacterWithProxy(class ACharacter* Character);

	bool IsAlreadyPlayedOnce() const;
	bool IsPlaying() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CutscenePlayer">();
	}
	static class ACutscenePlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACutscenePlayer>();
	}
};
static_assert(alignof(ACutscenePlayer) == 0x000008, "Wrong alignment on ACutscenePlayer");
static_assert(sizeof(ACutscenePlayer) == 0x000538, "Wrong size on ACutscenePlayer");
static_assert(offsetof(ACutscenePlayer, LevelSequenceActor) == 0x0002B0, "Member 'ACutscenePlayer::LevelSequenceActor' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, SoundTrackComponent) == 0x0002B8, "Member 'ACutscenePlayer::SoundTrackComponent' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, MusicTrack) == 0x0002C0, "Member 'ACutscenePlayer::MusicTrack' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, StopMusicTrackWithCutscene) == 0x0002C8, "Member 'ACutscenePlayer::StopMusicTrackWithCutscene' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, SkipAudioEvent) == 0x0002D0, "Member 'ACutscenePlayer::SkipAudioEvent' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, SkipSettings) == 0x0002E0, "Member 'ACutscenePlayer::SkipSettings' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, UseCustomCharacterBlendInTime) == 0x0002F8, "Member 'ACutscenePlayer::UseCustomCharacterBlendInTime' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, CustomCharacterBlendInTime) == 0x0002FC, "Member 'ACutscenePlayer::CustomCharacterBlendInTime' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, UseCustomCharacterBlendOutTime) == 0x000300, "Member 'ACutscenePlayer::UseCustomCharacterBlendOutTime' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, CustomCharacterBlendOutTime) == 0x000304, "Member 'ACutscenePlayer::CustomCharacterBlendOutTime' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, DisableCharacterCollisions) == 0x000308, "Member 'ACutscenePlayer::DisableCharacterCollisions' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, DisableCharacterFootIK) == 0x000309, "Member 'ACutscenePlayer::DisableCharacterFootIK' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, OverrideLightingChannelsUsingProxyMesh) == 0x00030A, "Member 'ACutscenePlayer::OverrideLightingChannelsUsingProxyMesh' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, ForceLOD0OnCharacters) == 0x00030B, "Member 'ACutscenePlayer::ForceLOD0OnCharacters' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, PlayAsNextCutcene) == 0x000310, "Member 'ACutscenePlayer::PlayAsNextCutcene' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, PropagateSkipToNextCutscene) == 0x000340, "Member 'ACutscenePlayer::PropagateSkipToNextCutscene' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, TexturesStreamingBoostLocations) == 0x000348, "Member 'ACutscenePlayer::TexturesStreamingBoostLocations' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, MaterialsStreamingBoostInstances) == 0x000358, "Member 'ACutscenePlayer::MaterialsStreamingBoostInstances' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, WaitForAllAssetsToStreamInAtCutsceneStart) == 0x000368, "Member 'ACutscenePlayer::WaitForAllAssetsToStreamInAtCutsceneStart' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, OnCutscenePreStart) == 0x000370, "Member 'ACutscenePlayer::OnCutscenePreStart' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, OnCutscenePlay) == 0x000398, "Member 'ACutscenePlayer::OnCutscenePlay' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, OnCutscenePlayReverse) == 0x0003C0, "Member 'ACutscenePlayer::OnCutscenePlayReverse' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, OnCutsceneStop) == 0x0003E8, "Member 'ACutscenePlayer::OnCutsceneStop' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, OnCutscenePause) == 0x000410, "Member 'ACutscenePlayer::OnCutscenePause' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, OnCutscenePreFinished) == 0x000438, "Member 'ACutscenePlayer::OnCutscenePreFinished' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, OnCutsceneFinished) == 0x000460, "Member 'ACutscenePlayer::OnCutsceneFinished' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, OnCameraCut) == 0x000488, "Member 'ACutscenePlayer::OnCameraCut' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, StreamingSkipConditionsMet) == 0x0004D8, "Member 'ACutscenePlayer::StreamingSkipConditionsMet' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, WaitForStreamingRequestsCompletion) == 0x0004D9, "Member 'ACutscenePlayer::WaitForStreamingRequestsCompletion' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, CharacterBindings) == 0x0004E0, "Member 'ACutscenePlayer::CharacterBindings' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, DialogSpeakersBindings) == 0x0004F0, "Member 'ACutscenePlayer::DialogSpeakersBindings' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, StandaloneDialogSpeakers) == 0x000500, "Member 'ACutscenePlayer::StandaloneDialogSpeakers' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, ActorsSynchronizedWithPlayer) == 0x000510, "Member 'ACutscenePlayer::ActorsSynchronizedWithPlayer' has a wrong offset!");
static_assert(offsetof(ACutscenePlayer, LevelStreamingManager) == 0x000520, "Member 'ACutscenePlayer::LevelStreamingManager' has a wrong offset!");

// Class Cutscenes.CutscenePlayerSettings
// 0x0098 (0x00D0 - 0x0038)
class UCutscenePlayerSettings final : public UDeveloperSettings
{
public:
	struct FSoftClassPath                         SkipWidgetClass;                                   // 0x0038(0x0020)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FCutsceneToGameClassMap                CutsceneToGameClass;                               // 0x0058(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Config, Protected, NativeAccessSpecifierProtected)
	class FName                                   CharacterCutsceneSlotName;                         // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CharacterCutsceneFaceSlotName;                     // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CutsceneCharacterAnimGraphTag;                     // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CharacterMainMeshTag;                              // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CharacterCutsceneBlendInTime;                      // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CharacterCutsceneBlendOutTime;                     // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CutscenePlayerSettings">();
	}
	static class UCutscenePlayerSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCutscenePlayerSettings>();
	}
};
static_assert(alignof(UCutscenePlayerSettings) == 0x000008, "Wrong alignment on UCutscenePlayerSettings");
static_assert(sizeof(UCutscenePlayerSettings) == 0x0000D0, "Wrong size on UCutscenePlayerSettings");
static_assert(offsetof(UCutscenePlayerSettings, SkipWidgetClass) == 0x000038, "Member 'UCutscenePlayerSettings::SkipWidgetClass' has a wrong offset!");
static_assert(offsetof(UCutscenePlayerSettings, CutsceneToGameClass) == 0x000058, "Member 'UCutscenePlayerSettings::CutsceneToGameClass' has a wrong offset!");
static_assert(offsetof(UCutscenePlayerSettings, CharacterCutsceneSlotName) == 0x0000A8, "Member 'UCutscenePlayerSettings::CharacterCutsceneSlotName' has a wrong offset!");
static_assert(offsetof(UCutscenePlayerSettings, CharacterCutsceneFaceSlotName) == 0x0000B0, "Member 'UCutscenePlayerSettings::CharacterCutsceneFaceSlotName' has a wrong offset!");
static_assert(offsetof(UCutscenePlayerSettings, CutsceneCharacterAnimGraphTag) == 0x0000B8, "Member 'UCutscenePlayerSettings::CutsceneCharacterAnimGraphTag' has a wrong offset!");
static_assert(offsetof(UCutscenePlayerSettings, CharacterMainMeshTag) == 0x0000C0, "Member 'UCutscenePlayerSettings::CharacterMainMeshTag' has a wrong offset!");
static_assert(offsetof(UCutscenePlayerSettings, CharacterCutsceneBlendInTime) == 0x0000C8, "Member 'UCutscenePlayerSettings::CharacterCutsceneBlendInTime' has a wrong offset!");
static_assert(offsetof(UCutscenePlayerSettings, CharacterCutsceneBlendOutTime) == 0x0000CC, "Member 'UCutscenePlayerSettings::CharacterCutsceneBlendOutTime' has a wrong offset!");

// Class Cutscenes.CutsceneProxyToGameplayEventsRelay
// 0x0000 (0x00A0 - 0x00A0)
class UCutsceneProxyToGameplayEventsRelay final : public UActorComponent
{
public:
	void IgnoreInputPose(bool Ignore);
	void SetClothAnimDrive(class FName ClothName, const struct FVector2D& AnimDriveStiffness, const struct FVector2D& AnimDriveDamping);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CutsceneProxyToGameplayEventsRelay">();
	}
	static class UCutsceneProxyToGameplayEventsRelay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCutsceneProxyToGameplayEventsRelay>();
	}
};
static_assert(alignof(UCutsceneProxyToGameplayEventsRelay) == 0x000008, "Wrong alignment on UCutsceneProxyToGameplayEventsRelay");
static_assert(sizeof(UCutsceneProxyToGameplayEventsRelay) == 0x0000A0, "Wrong size on UCutsceneProxyToGameplayEventsRelay");

// Class Cutscenes.CutsceneSkipWidget
// 0x00C8 (0x0368 - 0x02A0)
class UCutsceneSkipWidget final : public UBUserWidget
{
public:
	struct FUE4InputActionHandle                  SkipAction;                                        // 0x02A0(0x0008)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FUE4InputActionHandle                  InGameMenuAction;                                  // 0x02A8(0x0008)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SkipHoldTime;                                      // 0x02B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FadeOutTime;                                       // 0x02B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGameTextsConfig*                       GameTextsConfig;                                   // 0x02B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          UseKeyTag;                                         // 0x02C0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStyledRichTextBlock*                   Key_rtx;                                           // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           Debug_panel;                                       // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       FadeIn_anim;                                       // 0x02D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       FadeOut_anim;                                      // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       SkipedFadeOut_anim;                                // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       ButtonInfo_anim;                                   // 0x02F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F8[0x70];                                     // 0x02F8(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FadedOut();
	void OnDebugTick(float ActualTime, float TotalTime);
	void OnFadedOutAnim();
	void OnFadeInAnim();
	void OnFadeOutEnd();
	void OnFadeOutStart();
	void OnHide();
	void OnReset();
	void OnShow();
	void OnSkip();
	void OnSkipCancel();
	void OnSkipedFadeOutAnim();
	void OnSkipStart();
	void OnSkipTick(float Progress);
	void ResetApplied();

	bool GetCanSkip() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CutsceneSkipWidget">();
	}
	static class UCutsceneSkipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCutsceneSkipWidget>();
	}
};
static_assert(alignof(UCutsceneSkipWidget) == 0x000008, "Wrong alignment on UCutsceneSkipWidget");
static_assert(sizeof(UCutsceneSkipWidget) == 0x000368, "Wrong size on UCutsceneSkipWidget");
static_assert(offsetof(UCutsceneSkipWidget, SkipAction) == 0x0002A0, "Member 'UCutsceneSkipWidget::SkipAction' has a wrong offset!");
static_assert(offsetof(UCutsceneSkipWidget, InGameMenuAction) == 0x0002A8, "Member 'UCutsceneSkipWidget::InGameMenuAction' has a wrong offset!");
static_assert(offsetof(UCutsceneSkipWidget, SkipHoldTime) == 0x0002B0, "Member 'UCutsceneSkipWidget::SkipHoldTime' has a wrong offset!");
static_assert(offsetof(UCutsceneSkipWidget, FadeOutTime) == 0x0002B4, "Member 'UCutsceneSkipWidget::FadeOutTime' has a wrong offset!");
static_assert(offsetof(UCutsceneSkipWidget, GameTextsConfig) == 0x0002B8, "Member 'UCutsceneSkipWidget::GameTextsConfig' has a wrong offset!");
static_assert(offsetof(UCutsceneSkipWidget, UseKeyTag) == 0x0002C0, "Member 'UCutsceneSkipWidget::UseKeyTag' has a wrong offset!");
static_assert(offsetof(UCutsceneSkipWidget, Key_rtx) == 0x0002C8, "Member 'UCutsceneSkipWidget::Key_rtx' has a wrong offset!");
static_assert(offsetof(UCutsceneSkipWidget, Debug_panel) == 0x0002D0, "Member 'UCutsceneSkipWidget::Debug_panel' has a wrong offset!");
static_assert(offsetof(UCutsceneSkipWidget, FadeIn_anim) == 0x0002D8, "Member 'UCutsceneSkipWidget::FadeIn_anim' has a wrong offset!");
static_assert(offsetof(UCutsceneSkipWidget, FadeOut_anim) == 0x0002E0, "Member 'UCutsceneSkipWidget::FadeOut_anim' has a wrong offset!");
static_assert(offsetof(UCutsceneSkipWidget, SkipedFadeOut_anim) == 0x0002E8, "Member 'UCutsceneSkipWidget::SkipedFadeOut_anim' has a wrong offset!");
static_assert(offsetof(UCutsceneSkipWidget, ButtonInfo_anim) == 0x0002F0, "Member 'UCutsceneSkipWidget::ButtonInfo_anim' has a wrong offset!");

// Class Cutscenes.CutscenesLog
// 0x0000 (0x0028 - 0x0028)
class UCutscenesLog final : public UObject
{
public:
	static void PrintStringToMessageLog(const class UObject* WorldContextObject, const class FString& String, ELogMessageSeverity MessageSeverity);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CutscenesLog">();
	}
	static class UCutscenesLog* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCutscenesLog>();
	}
};
static_assert(alignof(UCutscenesLog) == 0x000008, "Wrong alignment on UCutscenesLog");
static_assert(sizeof(UCutscenesLog) == 0x000028, "Wrong size on UCutscenesLog");

// Class Cutscenes.CutsceneTexturesStreamingBoostLocation
// 0x0000 (0x02B0 - 0x02B0)
class ACutsceneTexturesStreamingBoostLocation final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CutsceneTexturesStreamingBoostLocation">();
	}
	static class ACutsceneTexturesStreamingBoostLocation* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACutsceneTexturesStreamingBoostLocation>();
	}
};
static_assert(alignof(ACutsceneTexturesStreamingBoostLocation) == 0x000008, "Wrong alignment on ACutsceneTexturesStreamingBoostLocation");
static_assert(sizeof(ACutsceneTexturesStreamingBoostLocation) == 0x0002B0, "Wrong size on ACutsceneTexturesStreamingBoostLocation");

}

