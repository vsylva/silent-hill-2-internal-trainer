#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Mai

#include "Basic.hpp"

#include "Being_structs.hpp"
#include "AIModule_structs.hpp"
#include "Engine_structs.hpp"
#include "Dai_structs.hpp"
#include "Mai_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function Mai.MaiAction.SetActionName
// 0x0008 (0x0008 - 0x0000)
struct MaiAction_SetActionName final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAction_SetActionName) == 0x000004, "Wrong alignment on MaiAction_SetActionName");
static_assert(sizeof(MaiAction_SetActionName) == 0x000008, "Wrong size on MaiAction_SetActionName");
static_assert(offsetof(MaiAction_SetActionName, Name_0) == 0x000000, "Member 'MaiAction_SetActionName::Name_0' has a wrong offset!");

// Function Mai.MaiAction.GetActionName
// 0x0008 (0x0008 - 0x0000)
struct MaiAction_GetActionName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAction_GetActionName) == 0x000004, "Wrong alignment on MaiAction_GetActionName");
static_assert(sizeof(MaiAction_GetActionName) == 0x000008, "Wrong size on MaiAction_GetActionName");
static_assert(offsetof(MaiAction_GetActionName, ReturnValue) == 0x000000, "Member 'MaiAction_GetActionName::ReturnValue' has a wrong offset!");

// Function Mai.MaiAction.IsActionFinished
// 0x0001 (0x0001 - 0x0000)
struct MaiAction_IsActionFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAction_IsActionFinished) == 0x000001, "Wrong alignment on MaiAction_IsActionFinished");
static_assert(sizeof(MaiAction_IsActionFinished) == 0x000001, "Wrong size on MaiAction_IsActionFinished");
static_assert(offsetof(MaiAction_IsActionFinished, ReturnValue) == 0x000000, "Member 'MaiAction_IsActionFinished::ReturnValue' has a wrong offset!");

// Function Mai.MaiActionGraph.FindNearestPoint
// 0x0020 (0x0020 - 0x0000)
struct MaiActionGraph_FindNearestPoint final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMaiActionPoint*                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiActionGraph_FindNearestPoint) == 0x000008, "Wrong alignment on MaiActionGraph_FindNearestPoint");
static_assert(sizeof(MaiActionGraph_FindNearestPoint) == 0x000020, "Wrong size on MaiActionGraph_FindNearestPoint");
static_assert(offsetof(MaiActionGraph_FindNearestPoint, Location) == 0x000000, "Member 'MaiActionGraph_FindNearestPoint::Location' has a wrong offset!");
static_assert(offsetof(MaiActionGraph_FindNearestPoint, ReturnValue) == 0x000018, "Member 'MaiActionGraph_FindNearestPoint::ReturnValue' has a wrong offset!");

// Function Mai.MaiActionGraph.GetActionPointCount
// 0x0004 (0x0004 - 0x0000)
struct MaiActionGraph_GetActionPointCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiActionGraph_GetActionPointCount) == 0x000004, "Wrong alignment on MaiActionGraph_GetActionPointCount");
static_assert(sizeof(MaiActionGraph_GetActionPointCount) == 0x000004, "Wrong size on MaiActionGraph_GetActionPointCount");
static_assert(offsetof(MaiActionGraph_GetActionPointCount, ReturnValue) == 0x000000, "Member 'MaiActionGraph_GetActionPointCount::ReturnValue' has a wrong offset!");

// Function Mai.MaiActionGraph.GetActionPoints
// 0x0010 (0x0010 - 0x0000)
struct MaiActionGraph_GetActionPoints final
{
public:
	TArray<class AMaiActionPoint*>                ActionPoints;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiActionGraph_GetActionPoints) == 0x000008, "Wrong alignment on MaiActionGraph_GetActionPoints");
static_assert(sizeof(MaiActionGraph_GetActionPoints) == 0x000010, "Wrong size on MaiActionGraph_GetActionPoints");
static_assert(offsetof(MaiActionGraph_GetActionPoints, ActionPoints) == 0x000000, "Member 'MaiActionGraph_GetActionPoints::ActionPoints' has a wrong offset!");

// Function Mai.MaiActionGraph.GetActionPointsWithQuery
// 0x0040 (0x0040 - 0x0000)
struct MaiActionGraph_GetActionPointsWithQuery final
{
public:
	TArray<class AMaiActionPoint*>                ActionPoints;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMaiActionPointQuery                   Query;                                             // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiActionGraph_GetActionPointsWithQuery) == 0x000008, "Wrong alignment on MaiActionGraph_GetActionPointsWithQuery");
static_assert(sizeof(MaiActionGraph_GetActionPointsWithQuery) == 0x000040, "Wrong size on MaiActionGraph_GetActionPointsWithQuery");
static_assert(offsetof(MaiActionGraph_GetActionPointsWithQuery, ActionPoints) == 0x000000, "Member 'MaiActionGraph_GetActionPointsWithQuery::ActionPoints' has a wrong offset!");
static_assert(offsetof(MaiActionGraph_GetActionPointsWithQuery, Query) == 0x000010, "Member 'MaiActionGraph_GetActionPointsWithQuery::Query' has a wrong offset!");

// Function Mai.MaiActionGraph.GetNextActionPoint
// 0x0018 (0x0018 - 0x0000)
struct MaiActionGraph_GetNextActionPoint final
{
public:
	class AMaiActionPoint*                        Ap;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SequenceTag;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMaiActionPoint*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiActionGraph_GetNextActionPoint) == 0x000008, "Wrong alignment on MaiActionGraph_GetNextActionPoint");
static_assert(sizeof(MaiActionGraph_GetNextActionPoint) == 0x000018, "Wrong size on MaiActionGraph_GetNextActionPoint");
static_assert(offsetof(MaiActionGraph_GetNextActionPoint, Ap) == 0x000000, "Member 'MaiActionGraph_GetNextActionPoint::Ap' has a wrong offset!");
static_assert(offsetof(MaiActionGraph_GetNextActionPoint, SequenceTag) == 0x000008, "Member 'MaiActionGraph_GetNextActionPoint::SequenceTag' has a wrong offset!");
static_assert(offsetof(MaiActionGraph_GetNextActionPoint, ReturnValue) == 0x000010, "Member 'MaiActionGraph_GetNextActionPoint::ReturnValue' has a wrong offset!");

// Function Mai.MaiActionGraph.GetSequenceActionPoints
// 0x0018 (0x0018 - 0x0000)
struct MaiActionGraph_GetSequenceActionPoints final
{
public:
	TArray<class AMaiActionPoint*>                ActionPoints;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   SequenceTag;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiActionGraph_GetSequenceActionPoints) == 0x000008, "Wrong alignment on MaiActionGraph_GetSequenceActionPoints");
static_assert(sizeof(MaiActionGraph_GetSequenceActionPoints) == 0x000018, "Wrong size on MaiActionGraph_GetSequenceActionPoints");
static_assert(offsetof(MaiActionGraph_GetSequenceActionPoints, ActionPoints) == 0x000000, "Member 'MaiActionGraph_GetSequenceActionPoints::ActionPoints' has a wrong offset!");
static_assert(offsetof(MaiActionGraph_GetSequenceActionPoints, SequenceTag) == 0x000010, "Member 'MaiActionGraph_GetSequenceActionPoints::SequenceTag' has a wrong offset!");

// Function Mai.MaiPointGraphComponent.FindNearestPoint
// 0x0020 (0x0020 - 0x0000)
struct MaiPointGraphComponent_FindNearestPoint final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMaiActionPoint*                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiPointGraphComponent_FindNearestPoint) == 0x000008, "Wrong alignment on MaiPointGraphComponent_FindNearestPoint");
static_assert(sizeof(MaiPointGraphComponent_FindNearestPoint) == 0x000020, "Wrong size on MaiPointGraphComponent_FindNearestPoint");
static_assert(offsetof(MaiPointGraphComponent_FindNearestPoint, Location) == 0x000000, "Member 'MaiPointGraphComponent_FindNearestPoint::Location' has a wrong offset!");
static_assert(offsetof(MaiPointGraphComponent_FindNearestPoint, ReturnValue) == 0x000018, "Member 'MaiPointGraphComponent_FindNearestPoint::ReturnValue' has a wrong offset!");

// Function Mai.MaiPointGraphComponent.GetActionPointCount
// 0x0004 (0x0004 - 0x0000)
struct MaiPointGraphComponent_GetActionPointCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiPointGraphComponent_GetActionPointCount) == 0x000004, "Wrong alignment on MaiPointGraphComponent_GetActionPointCount");
static_assert(sizeof(MaiPointGraphComponent_GetActionPointCount) == 0x000004, "Wrong size on MaiPointGraphComponent_GetActionPointCount");
static_assert(offsetof(MaiPointGraphComponent_GetActionPointCount, ReturnValue) == 0x000000, "Member 'MaiPointGraphComponent_GetActionPointCount::ReturnValue' has a wrong offset!");

// Function Mai.MaiPointGraphComponent.GetActionPoints
// 0x0018 (0x0018 - 0x0000)
struct MaiPointGraphComponent_GetActionPoints final
{
public:
	TArray<class AMaiActionPoint*>                ActionPoints;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   WithTag;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiPointGraphComponent_GetActionPoints) == 0x000008, "Wrong alignment on MaiPointGraphComponent_GetActionPoints");
static_assert(sizeof(MaiPointGraphComponent_GetActionPoints) == 0x000018, "Wrong size on MaiPointGraphComponent_GetActionPoints");
static_assert(offsetof(MaiPointGraphComponent_GetActionPoints, ActionPoints) == 0x000000, "Member 'MaiPointGraphComponent_GetActionPoints::ActionPoints' has a wrong offset!");
static_assert(offsetof(MaiPointGraphComponent_GetActionPoints, WithTag) == 0x000010, "Member 'MaiPointGraphComponent_GetActionPoints::WithTag' has a wrong offset!");

// Function Mai.MaiPointGraphComponent.GetActionPointsWithQuery
// 0x0040 (0x0040 - 0x0000)
struct MaiPointGraphComponent_GetActionPointsWithQuery final
{
public:
	TArray<class AMaiActionPoint*>                ActionPoints;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMaiActionPointQuery                   Query;                                             // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiPointGraphComponent_GetActionPointsWithQuery) == 0x000008, "Wrong alignment on MaiPointGraphComponent_GetActionPointsWithQuery");
static_assert(sizeof(MaiPointGraphComponent_GetActionPointsWithQuery) == 0x000040, "Wrong size on MaiPointGraphComponent_GetActionPointsWithQuery");
static_assert(offsetof(MaiPointGraphComponent_GetActionPointsWithQuery, ActionPoints) == 0x000000, "Member 'MaiPointGraphComponent_GetActionPointsWithQuery::ActionPoints' has a wrong offset!");
static_assert(offsetof(MaiPointGraphComponent_GetActionPointsWithQuery, Query) == 0x000010, "Member 'MaiPointGraphComponent_GetActionPointsWithQuery::Query' has a wrong offset!");

// Function Mai.MaiPointGraphComponent.GetRandomActionPoint
// 0x0008 (0x0008 - 0x0000)
struct MaiPointGraphComponent_GetRandomActionPoint final
{
public:
	class AMaiActionPoint*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiPointGraphComponent_GetRandomActionPoint) == 0x000008, "Wrong alignment on MaiPointGraphComponent_GetRandomActionPoint");
static_assert(sizeof(MaiPointGraphComponent_GetRandomActionPoint) == 0x000008, "Wrong size on MaiPointGraphComponent_GetRandomActionPoint");
static_assert(offsetof(MaiPointGraphComponent_GetRandomActionPoint, ReturnValue) == 0x000000, "Member 'MaiPointGraphComponent_GetRandomActionPoint::ReturnValue' has a wrong offset!");

// Function Mai.MaiActionSequenceComponent.GetNextActionPoint
// 0x0018 (0x0018 - 0x0000)
struct MaiActionSequenceComponent_GetNextActionPoint final
{
public:
	class AMaiActionPoint*                        Point;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  ConditionCaller;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMaiActionPoint*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiActionSequenceComponent_GetNextActionPoint) == 0x000008, "Wrong alignment on MaiActionSequenceComponent_GetNextActionPoint");
static_assert(sizeof(MaiActionSequenceComponent_GetNextActionPoint) == 0x000018, "Wrong size on MaiActionSequenceComponent_GetNextActionPoint");
static_assert(offsetof(MaiActionSequenceComponent_GetNextActionPoint, Point) == 0x000000, "Member 'MaiActionSequenceComponent_GetNextActionPoint::Point' has a wrong offset!");
static_assert(offsetof(MaiActionSequenceComponent_GetNextActionPoint, ConditionCaller) == 0x000008, "Member 'MaiActionSequenceComponent_GetNextActionPoint::ConditionCaller' has a wrong offset!");
static_assert(offsetof(MaiActionSequenceComponent_GetNextActionPoint, ReturnValue) == 0x000010, "Member 'MaiActionSequenceComponent_GetNextActionPoint::ReturnValue' has a wrong offset!");

// Function Mai.MaiActionSequenceComponent.GetSequenceActionPoints
// 0x0010 (0x0010 - 0x0000)
struct MaiActionSequenceComponent_GetSequenceActionPoints final
{
public:
	TArray<class AMaiActionPoint*>                Points;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiActionSequenceComponent_GetSequenceActionPoints) == 0x000008, "Wrong alignment on MaiActionSequenceComponent_GetSequenceActionPoints");
static_assert(sizeof(MaiActionSequenceComponent_GetSequenceActionPoints) == 0x000010, "Wrong size on MaiActionSequenceComponent_GetSequenceActionPoints");
static_assert(offsetof(MaiActionSequenceComponent_GetSequenceActionPoints, Points) == 0x000000, "Member 'MaiActionSequenceComponent_GetSequenceActionPoints::Points' has a wrong offset!");

// Function Mai.MaiActionSequenceComponent.GetTargetActionPoint
// 0x0008 (0x0008 - 0x0000)
struct MaiActionSequenceComponent_GetTargetActionPoint final
{
public:
	class AMaiActionPoint*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiActionSequenceComponent_GetTargetActionPoint) == 0x000008, "Wrong alignment on MaiActionSequenceComponent_GetTargetActionPoint");
static_assert(sizeof(MaiActionSequenceComponent_GetTargetActionPoint) == 0x000008, "Wrong size on MaiActionSequenceComponent_GetTargetActionPoint");
static_assert(offsetof(MaiActionSequenceComponent_GetTargetActionPoint, ReturnValue) == 0x000000, "Member 'MaiActionSequenceComponent_GetTargetActionPoint::ReturnValue' has a wrong offset!");

// Function Mai.MaiActionPoint.OnActionPointAbandoned
// 0x0008 (0x0008 - 0x0000)
struct MaiActionPoint_OnActionPointAbandoned final
{
public:
	class AMaiController*                         User;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiActionPoint_OnActionPointAbandoned) == 0x000008, "Wrong alignment on MaiActionPoint_OnActionPointAbandoned");
static_assert(sizeof(MaiActionPoint_OnActionPointAbandoned) == 0x000008, "Wrong size on MaiActionPoint_OnActionPointAbandoned");
static_assert(offsetof(MaiActionPoint_OnActionPointAbandoned, User) == 0x000000, "Member 'MaiActionPoint_OnActionPointAbandoned::User' has a wrong offset!");

// Function Mai.MaiActionPoint.OnActionPointReached
// 0x0008 (0x0008 - 0x0000)
struct MaiActionPoint_OnActionPointReached final
{
public:
	class AMaiController*                         User;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiActionPoint_OnActionPointReached) == 0x000008, "Wrong alignment on MaiActionPoint_OnActionPointReached");
static_assert(sizeof(MaiActionPoint_OnActionPointReached) == 0x000008, "Wrong size on MaiActionPoint_OnActionPointReached");
static_assert(offsetof(MaiActionPoint_OnActionPointReached, User) == 0x000000, "Member 'MaiActionPoint_OnActionPointReached::User' has a wrong offset!");

// Function Mai.MaiActionPoint.OnActionPointSelected
// 0x0008 (0x0008 - 0x0000)
struct MaiActionPoint_OnActionPointSelected final
{
public:
	class AMaiController*                         User;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiActionPoint_OnActionPointSelected) == 0x000008, "Wrong alignment on MaiActionPoint_OnActionPointSelected");
static_assert(sizeof(MaiActionPoint_OnActionPointSelected) == 0x000008, "Wrong size on MaiActionPoint_OnActionPointSelected");
static_assert(offsetof(MaiActionPoint_OnActionPointSelected, User) == 0x000000, "Member 'MaiActionPoint_OnActionPointSelected::User' has a wrong offset!");

// Function Mai.MaiActionPoint.PrepareActionSet
// 0x0008 (0x0008 - 0x0000)
struct MaiActionPoint_PrepareActionSet final
{
public:
	class AMaiController*                         User;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiActionPoint_PrepareActionSet) == 0x000008, "Wrong alignment on MaiActionPoint_PrepareActionSet");
static_assert(sizeof(MaiActionPoint_PrepareActionSet) == 0x000008, "Wrong size on MaiActionPoint_PrepareActionSet");
static_assert(offsetof(MaiActionPoint_PrepareActionSet, User) == 0x000000, "Member 'MaiActionPoint_PrepareActionSet::User' has a wrong offset!");

// Function Mai.MaiActionPoint.PrepareToWork
// 0x0008 (0x0008 - 0x0000)
struct MaiActionPoint_PrepareToWork final
{
public:
	class AMaiController*                         User;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiActionPoint_PrepareToWork) == 0x000008, "Wrong alignment on MaiActionPoint_PrepareToWork");
static_assert(sizeof(MaiActionPoint_PrepareToWork) == 0x000008, "Wrong size on MaiActionPoint_PrepareToWork");
static_assert(offsetof(MaiActionPoint_PrepareToWork, User) == 0x000000, "Member 'MaiActionPoint_PrepareToWork::User' has a wrong offset!");

// Function Mai.MaiActionPoint.CanBeUsedBy
// 0x0010 (0x0010 - 0x0000)
struct MaiActionPoint_CanBeUsedBy final
{
public:
	class AMaiController*                         User;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiActionPoint_CanBeUsedBy) == 0x000008, "Wrong alignment on MaiActionPoint_CanBeUsedBy");
static_assert(sizeof(MaiActionPoint_CanBeUsedBy) == 0x000010, "Wrong size on MaiActionPoint_CanBeUsedBy");
static_assert(offsetof(MaiActionPoint_CanBeUsedBy, User) == 0x000000, "Member 'MaiActionPoint_CanBeUsedBy::User' has a wrong offset!");
static_assert(offsetof(MaiActionPoint_CanBeUsedBy, ReturnValue) == 0x000008, "Member 'MaiActionPoint_CanBeUsedBy::ReturnValue' has a wrong offset!");

// Function Mai.MaiActionPoint.GetActionRotation
// 0x0018 (0x0018 - 0x0000)
struct MaiActionPoint_GetActionRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiActionPoint_GetActionRotation) == 0x000008, "Wrong alignment on MaiActionPoint_GetActionRotation");
static_assert(sizeof(MaiActionPoint_GetActionRotation) == 0x000018, "Wrong size on MaiActionPoint_GetActionRotation");
static_assert(offsetof(MaiActionPoint_GetActionRotation, ReturnValue) == 0x000000, "Member 'MaiActionPoint_GetActionRotation::ReturnValue' has a wrong offset!");

// Function Mai.MaiActionPoint.GetSequence
// 0x0010 (0x0010 - 0x0000)
struct MaiActionPoint_GetSequence final
{
public:
	class FName                                   SequenceTag;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaiActionSequenceComponent*            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiActionPoint_GetSequence) == 0x000008, "Wrong alignment on MaiActionPoint_GetSequence");
static_assert(sizeof(MaiActionPoint_GetSequence) == 0x000010, "Wrong size on MaiActionPoint_GetSequence");
static_assert(offsetof(MaiActionPoint_GetSequence, SequenceTag) == 0x000000, "Member 'MaiActionPoint_GetSequence::SequenceTag' has a wrong offset!");
static_assert(offsetof(MaiActionPoint_GetSequence, ReturnValue) == 0x000008, "Member 'MaiActionPoint_GetSequence::ReturnValue' has a wrong offset!");

// Function Mai.MaiActionPoint.GetWeight
// 0x0001 (0x0001 - 0x0000)
struct MaiActionPoint_GetWeight final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiActionPoint_GetWeight) == 0x000001, "Wrong alignment on MaiActionPoint_GetWeight");
static_assert(sizeof(MaiActionPoint_GetWeight) == 0x000001, "Wrong size on MaiActionPoint_GetWeight");
static_assert(offsetof(MaiActionPoint_GetWeight, ReturnValue) == 0x000000, "Member 'MaiActionPoint_GetWeight::ReturnValue' has a wrong offset!");

// Function Mai.MaiActionPoint.HasAnyWork
// 0x0001 (0x0001 - 0x0000)
struct MaiActionPoint_HasAnyWork final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiActionPoint_HasAnyWork) == 0x000001, "Wrong alignment on MaiActionPoint_HasAnyWork");
static_assert(sizeof(MaiActionPoint_HasAnyWork) == 0x000001, "Wrong size on MaiActionPoint_HasAnyWork");
static_assert(offsetof(MaiActionPoint_HasAnyWork, ReturnValue) == 0x000000, "Member 'MaiActionPoint_HasAnyWork::ReturnValue' has a wrong offset!");

// Function Mai.MaiActionPoint.InDetectionArea
// 0x0020 (0x0020 - 0x0000)
struct MaiActionPoint_InDetectionArea final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AreaExtent;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiActionPoint_InDetectionArea) == 0x000008, "Wrong alignment on MaiActionPoint_InDetectionArea");
static_assert(sizeof(MaiActionPoint_InDetectionArea) == 0x000020, "Wrong size on MaiActionPoint_InDetectionArea");
static_assert(offsetof(MaiActionPoint_InDetectionArea, Location) == 0x000000, "Member 'MaiActionPoint_InDetectionArea::Location' has a wrong offset!");
static_assert(offsetof(MaiActionPoint_InDetectionArea, AreaExtent) == 0x000018, "Member 'MaiActionPoint_InDetectionArea::AreaExtent' has a wrong offset!");
static_assert(offsetof(MaiActionPoint_InDetectionArea, ReturnValue) == 0x00001C, "Member 'MaiActionPoint_InDetectionArea::ReturnValue' has a wrong offset!");

// Function Mai.MaiActionPoint.IsUsable
// 0x0001 (0x0001 - 0x0000)
struct MaiActionPoint_IsUsable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiActionPoint_IsUsable) == 0x000001, "Wrong alignment on MaiActionPoint_IsUsable");
static_assert(sizeof(MaiActionPoint_IsUsable) == 0x000001, "Wrong size on MaiActionPoint_IsUsable");
static_assert(offsetof(MaiActionPoint_IsUsable, ReturnValue) == 0x000000, "Member 'MaiActionPoint_IsUsable::ReturnValue' has a wrong offset!");

// Function Mai.MaiActionPoint.IsUsableBy
// 0x0010 (0x0010 - 0x0000)
struct MaiActionPoint_IsUsableBy final
{
public:
	class AMaiController*                         User;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiActionPoint_IsUsableBy) == 0x000008, "Wrong alignment on MaiActionPoint_IsUsableBy");
static_assert(sizeof(MaiActionPoint_IsUsableBy) == 0x000010, "Wrong size on MaiActionPoint_IsUsableBy");
static_assert(offsetof(MaiActionPoint_IsUsableBy, User) == 0x000000, "Member 'MaiActionPoint_IsUsableBy::User' has a wrong offset!");
static_assert(offsetof(MaiActionPoint_IsUsableBy, ReturnValue) == 0x000008, "Member 'MaiActionPoint_IsUsableBy::ReturnValue' has a wrong offset!");

// Function Mai.MaiActionPoint.IsVisibleFrom
// 0x0028 (0x0028 - 0x0000)
struct MaiActionPoint_IsVisibleFrom final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultVisibilityRange;                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerceptionMod;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiActionPoint_IsVisibleFrom) == 0x000008, "Wrong alignment on MaiActionPoint_IsVisibleFrom");
static_assert(sizeof(MaiActionPoint_IsVisibleFrom) == 0x000028, "Wrong size on MaiActionPoint_IsVisibleFrom");
static_assert(offsetof(MaiActionPoint_IsVisibleFrom, Location) == 0x000000, "Member 'MaiActionPoint_IsVisibleFrom::Location' has a wrong offset!");
static_assert(offsetof(MaiActionPoint_IsVisibleFrom, DefaultVisibilityRange) == 0x000018, "Member 'MaiActionPoint_IsVisibleFrom::DefaultVisibilityRange' has a wrong offset!");
static_assert(offsetof(MaiActionPoint_IsVisibleFrom, PerceptionMod) == 0x00001C, "Member 'MaiActionPoint_IsVisibleFrom::PerceptionMod' has a wrong offset!");
static_assert(offsetof(MaiActionPoint_IsVisibleFrom, ReturnValue) == 0x000020, "Member 'MaiActionPoint_IsVisibleFrom::ReturnValue' has a wrong offset!");

// Function Mai.MaiNavBox.SetAreaClass
// 0x0008 (0x0008 - 0x0000)
struct MaiNavBox_SetAreaClass final
{
public:
	TSubclassOf<class UNavArea>                   NewAreaClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiNavBox_SetAreaClass) == 0x000008, "Wrong alignment on MaiNavBox_SetAreaClass");
static_assert(sizeof(MaiNavBox_SetAreaClass) == 0x000008, "Wrong size on MaiNavBox_SetAreaClass");
static_assert(offsetof(MaiNavBox_SetAreaClass, NewAreaClass) == 0x000000, "Member 'MaiNavBox_SetAreaClass::NewAreaClass' has a wrong offset!");

// Function Mai.MaiNavBox.IsInArea
// 0x0020 (0x0020 - 0x0000)
struct MaiNavBox_IsInArea final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Extent;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiNavBox_IsInArea) == 0x000008, "Wrong alignment on MaiNavBox_IsInArea");
static_assert(sizeof(MaiNavBox_IsInArea) == 0x000020, "Wrong size on MaiNavBox_IsInArea");
static_assert(offsetof(MaiNavBox_IsInArea, Location) == 0x000000, "Member 'MaiNavBox_IsInArea::Location' has a wrong offset!");
static_assert(offsetof(MaiNavBox_IsInArea, Extent) == 0x000018, "Member 'MaiNavBox_IsInArea::Extent' has a wrong offset!");
static_assert(offsetof(MaiNavBox_IsInArea, ReturnValue) == 0x00001C, "Member 'MaiNavBox_IsInArea::ReturnValue' has a wrong offset!");

// Function Mai.MaiNarrowTriggerBox.OnOverlapBegin
// 0x0108 (0x0108 - 0x0000)
struct MaiNarrowTriggerBox_OnOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiNarrowTriggerBox_OnOverlapBegin) == 0x000008, "Wrong alignment on MaiNarrowTriggerBox_OnOverlapBegin");
static_assert(sizeof(MaiNarrowTriggerBox_OnOverlapBegin) == 0x000108, "Wrong size on MaiNarrowTriggerBox_OnOverlapBegin");
static_assert(offsetof(MaiNarrowTriggerBox_OnOverlapBegin, OverlappedComponent) == 0x000000, "Member 'MaiNarrowTriggerBox_OnOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(MaiNarrowTriggerBox_OnOverlapBegin, OtherActor) == 0x000008, "Member 'MaiNarrowTriggerBox_OnOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(MaiNarrowTriggerBox_OnOverlapBegin, OtherComp) == 0x000010, "Member 'MaiNarrowTriggerBox_OnOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(MaiNarrowTriggerBox_OnOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'MaiNarrowTriggerBox_OnOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(MaiNarrowTriggerBox_OnOverlapBegin, bFromSweep) == 0x00001C, "Member 'MaiNarrowTriggerBox_OnOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(MaiNarrowTriggerBox_OnOverlapBegin, SweepResult) == 0x000020, "Member 'MaiNarrowTriggerBox_OnOverlapBegin::SweepResult' has a wrong offset!");

// Function Mai.MaiNarrowTriggerBox.OnOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct MaiNarrowTriggerBox_OnOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiNarrowTriggerBox_OnOverlapEnd) == 0x000008, "Wrong alignment on MaiNarrowTriggerBox_OnOverlapEnd");
static_assert(sizeof(MaiNarrowTriggerBox_OnOverlapEnd) == 0x000020, "Wrong size on MaiNarrowTriggerBox_OnOverlapEnd");
static_assert(offsetof(MaiNarrowTriggerBox_OnOverlapEnd, OverlappedComponent) == 0x000000, "Member 'MaiNarrowTriggerBox_OnOverlapEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(MaiNarrowTriggerBox_OnOverlapEnd, OtherActor) == 0x000008, "Member 'MaiNarrowTriggerBox_OnOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(MaiNarrowTriggerBox_OnOverlapEnd, OtherComp) == 0x000010, "Member 'MaiNarrowTriggerBox_OnOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(MaiNarrowTriggerBox_OnOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'MaiNarrowTriggerBox_OnOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function Mai.MaiAction_AnimationBase.OnOwnerMontageEnds
// 0x0010 (0x0010 - 0x0000)
struct MaiAction_AnimationBase_OnOwnerMontageEnds final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Interrupted;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiAction_AnimationBase_OnOwnerMontageEnds) == 0x000008, "Wrong alignment on MaiAction_AnimationBase_OnOwnerMontageEnds");
static_assert(sizeof(MaiAction_AnimationBase_OnOwnerMontageEnds) == 0x000010, "Wrong size on MaiAction_AnimationBase_OnOwnerMontageEnds");
static_assert(offsetof(MaiAction_AnimationBase_OnOwnerMontageEnds, Montage) == 0x000000, "Member 'MaiAction_AnimationBase_OnOwnerMontageEnds::Montage' has a wrong offset!");
static_assert(offsetof(MaiAction_AnimationBase_OnOwnerMontageEnds, Interrupted) == 0x000008, "Member 'MaiAction_AnimationBase_OnOwnerMontageEnds::Interrupted' has a wrong offset!");

// Function Mai.MaiAction_AnimationBase.SetOwnerCH
// 0x0008 (0x0008 - 0x0000)
struct MaiAction_AnimationBase_SetOwnerCH final
{
public:
	class ACharacter*                             OwnerCH;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAction_AnimationBase_SetOwnerCH) == 0x000008, "Wrong alignment on MaiAction_AnimationBase_SetOwnerCH");
static_assert(sizeof(MaiAction_AnimationBase_SetOwnerCH) == 0x000008, "Wrong size on MaiAction_AnimationBase_SetOwnerCH");
static_assert(offsetof(MaiAction_AnimationBase_SetOwnerCH, OwnerCH) == 0x000000, "Member 'MaiAction_AnimationBase_SetOwnerCH::OwnerCH' has a wrong offset!");

// Function Mai.MaiAction_AnimationBase.SetOwnerMontage
// 0x0008 (0x0008 - 0x0000)
struct MaiAction_AnimationBase_SetOwnerMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAction_AnimationBase_SetOwnerMontage) == 0x000008, "Wrong alignment on MaiAction_AnimationBase_SetOwnerMontage");
static_assert(sizeof(MaiAction_AnimationBase_SetOwnerMontage) == 0x000008, "Wrong size on MaiAction_AnimationBase_SetOwnerMontage");
static_assert(offsetof(MaiAction_AnimationBase_SetOwnerMontage, Montage) == 0x000000, "Member 'MaiAction_AnimationBase_SetOwnerMontage::Montage' has a wrong offset!");

// Function Mai.MaiAction_SynchronizationBase.OnOtherMontageEnds
// 0x0010 (0x0010 - 0x0000)
struct MaiAction_SynchronizationBase_OnOtherMontageEnds final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Interrupted;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiAction_SynchronizationBase_OnOtherMontageEnds) == 0x000008, "Wrong alignment on MaiAction_SynchronizationBase_OnOtherMontageEnds");
static_assert(sizeof(MaiAction_SynchronizationBase_OnOtherMontageEnds) == 0x000010, "Wrong size on MaiAction_SynchronizationBase_OnOtherMontageEnds");
static_assert(offsetof(MaiAction_SynchronizationBase_OnOtherMontageEnds, Montage) == 0x000000, "Member 'MaiAction_SynchronizationBase_OnOtherMontageEnds::Montage' has a wrong offset!");
static_assert(offsetof(MaiAction_SynchronizationBase_OnOtherMontageEnds, Interrupted) == 0x000008, "Member 'MaiAction_SynchronizationBase_OnOtherMontageEnds::Interrupted' has a wrong offset!");

// Function Mai.MaiAction_SynchronizationBase.SetOtherCH
// 0x0008 (0x0008 - 0x0000)
struct MaiAction_SynchronizationBase_SetOtherCH final
{
public:
	class ACharacter*                             OtherCH;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAction_SynchronizationBase_SetOtherCH) == 0x000008, "Wrong alignment on MaiAction_SynchronizationBase_SetOtherCH");
static_assert(sizeof(MaiAction_SynchronizationBase_SetOtherCH) == 0x000008, "Wrong size on MaiAction_SynchronizationBase_SetOtherCH");
static_assert(offsetof(MaiAction_SynchronizationBase_SetOtherCH, OtherCH) == 0x000000, "Member 'MaiAction_SynchronizationBase_SetOtherCH::OtherCH' has a wrong offset!");

// Function Mai.MaiAction_SynchronizationBase.SetOtherMontage
// 0x0008 (0x0008 - 0x0000)
struct MaiAction_SynchronizationBase_SetOtherMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAction_SynchronizationBase_SetOtherMontage) == 0x000008, "Wrong alignment on MaiAction_SynchronizationBase_SetOtherMontage");
static_assert(sizeof(MaiAction_SynchronizationBase_SetOtherMontage) == 0x000008, "Wrong size on MaiAction_SynchronizationBase_SetOtherMontage");
static_assert(offsetof(MaiAction_SynchronizationBase_SetOtherMontage, Montage) == 0x000000, "Member 'MaiAction_SynchronizationBase_SetOtherMontage::Montage' has a wrong offset!");

// Function Mai.MaiAction_Snap2Base.OnSectionEnd
// 0x0008 (0x0008 - 0x0000)
struct MaiAction_Snap2Base_OnSectionEnd final
{
public:
	class FName                                   Section;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAction_Snap2Base_OnSectionEnd) == 0x000004, "Wrong alignment on MaiAction_Snap2Base_OnSectionEnd");
static_assert(sizeof(MaiAction_Snap2Base_OnSectionEnd) == 0x000008, "Wrong size on MaiAction_Snap2Base_OnSectionEnd");
static_assert(offsetof(MaiAction_Snap2Base_OnSectionEnd, Section) == 0x000000, "Member 'MaiAction_Snap2Base_OnSectionEnd::Section' has a wrong offset!");

// Function Mai.MaiAction_Snap2Base.OnSectionStart
// 0x0008 (0x0008 - 0x0000)
struct MaiAction_Snap2Base_OnSectionStart final
{
public:
	class FName                                   Section;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAction_Snap2Base_OnSectionStart) == 0x000004, "Wrong alignment on MaiAction_Snap2Base_OnSectionStart");
static_assert(sizeof(MaiAction_Snap2Base_OnSectionStart) == 0x000008, "Wrong size on MaiAction_Snap2Base_OnSectionStart");
static_assert(offsetof(MaiAction_Snap2Base_OnSectionStart, Section) == 0x000000, "Member 'MaiAction_Snap2Base_OnSectionStart::Section' has a wrong offset!");

// Function Mai.MaiAction_Snap1Base.OnSectionEnd
// 0x0008 (0x0008 - 0x0000)
struct MaiAction_Snap1Base_OnSectionEnd final
{
public:
	class FName                                   Section;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAction_Snap1Base_OnSectionEnd) == 0x000004, "Wrong alignment on MaiAction_Snap1Base_OnSectionEnd");
static_assert(sizeof(MaiAction_Snap1Base_OnSectionEnd) == 0x000008, "Wrong size on MaiAction_Snap1Base_OnSectionEnd");
static_assert(offsetof(MaiAction_Snap1Base_OnSectionEnd, Section) == 0x000000, "Member 'MaiAction_Snap1Base_OnSectionEnd::Section' has a wrong offset!");

// Function Mai.MaiAction_Snap1Base.OnSectionStart
// 0x0008 (0x0008 - 0x0000)
struct MaiAction_Snap1Base_OnSectionStart final
{
public:
	class FName                                   Section;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAction_Snap1Base_OnSectionStart) == 0x000004, "Wrong alignment on MaiAction_Snap1Base_OnSectionStart");
static_assert(sizeof(MaiAction_Snap1Base_OnSectionStart) == 0x000008, "Wrong size on MaiAction_Snap1Base_OnSectionStart");
static_assert(offsetof(MaiAction_Snap1Base_OnSectionStart, Section) == 0x000000, "Member 'MaiAction_Snap1Base_OnSectionStart::Section' has a wrong offset!");

// Function Mai.MaiAction_Snap1Base.PlayOwnerMontage
// 0x0008 (0x0008 - 0x0000)
struct MaiAction_Snap1Base_PlayOwnerMontage final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAction_Snap1Base_PlayOwnerMontage) == 0x000008, "Wrong alignment on MaiAction_Snap1Base_PlayOwnerMontage");
static_assert(sizeof(MaiAction_Snap1Base_PlayOwnerMontage) == 0x000008, "Wrong size on MaiAction_Snap1Base_PlayOwnerMontage");
static_assert(offsetof(MaiAction_Snap1Base_PlayOwnerMontage, ReturnValue) == 0x000000, "Member 'MaiAction_Snap1Base_PlayOwnerMontage::ReturnValue' has a wrong offset!");

// Function Mai.MaiAction_Snap1Base.GetSectionOffset
// 0x0018 (0x0018 - 0x0000)
struct MaiAction_Snap1Base_GetSectionOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAction_Snap1Base_GetSectionOffset) == 0x000008, "Wrong alignment on MaiAction_Snap1Base_GetSectionOffset");
static_assert(sizeof(MaiAction_Snap1Base_GetSectionOffset) == 0x000018, "Wrong size on MaiAction_Snap1Base_GetSectionOffset");
static_assert(offsetof(MaiAction_Snap1Base_GetSectionOffset, ReturnValue) == 0x000000, "Member 'MaiAction_Snap1Base_GetSectionOffset::ReturnValue' has a wrong offset!");

// Function Mai.MaiAction_MoveOnSpline.createActionMoveOnSpline
// 0x0018 (0x0018 - 0x0000)
struct MaiAction_MoveOnSpline_CreateActionMoveOnSpline final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMaiSplineActor*                        Spline;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaiAction_MoveOnSpline*                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAction_MoveOnSpline_CreateActionMoveOnSpline) == 0x000008, "Wrong alignment on MaiAction_MoveOnSpline_CreateActionMoveOnSpline");
static_assert(sizeof(MaiAction_MoveOnSpline_CreateActionMoveOnSpline) == 0x000018, "Wrong size on MaiAction_MoveOnSpline_CreateActionMoveOnSpline");
static_assert(offsetof(MaiAction_MoveOnSpline_CreateActionMoveOnSpline, WorldContextObject) == 0x000000, "Member 'MaiAction_MoveOnSpline_CreateActionMoveOnSpline::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MaiAction_MoveOnSpline_CreateActionMoveOnSpline, Spline) == 0x000008, "Member 'MaiAction_MoveOnSpline_CreateActionMoveOnSpline::Spline' has a wrong offset!");
static_assert(offsetof(MaiAction_MoveOnSpline_CreateActionMoveOnSpline, ReturnValue) == 0x000010, "Member 'MaiAction_MoveOnSpline_CreateActionMoveOnSpline::ReturnValue' has a wrong offset!");

// Function Mai.MaiAction_MoveOnSpline.createActionMoveOnSplineToAP
// 0x0020 (0x0020 - 0x0000)
struct MaiAction_MoveOnSpline_CreateActionMoveOnSplineToAP final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMaiActionPoint*                        Point;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaiAction_MoveOnSpline*                ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAction_MoveOnSpline_CreateActionMoveOnSplineToAP) == 0x000008, "Wrong alignment on MaiAction_MoveOnSpline_CreateActionMoveOnSplineToAP");
static_assert(sizeof(MaiAction_MoveOnSpline_CreateActionMoveOnSplineToAP) == 0x000020, "Wrong size on MaiAction_MoveOnSpline_CreateActionMoveOnSplineToAP");
static_assert(offsetof(MaiAction_MoveOnSpline_CreateActionMoveOnSplineToAP, WorldContextObject) == 0x000000, "Member 'MaiAction_MoveOnSpline_CreateActionMoveOnSplineToAP::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MaiAction_MoveOnSpline_CreateActionMoveOnSplineToAP, Pawn) == 0x000008, "Member 'MaiAction_MoveOnSpline_CreateActionMoveOnSplineToAP::Pawn' has a wrong offset!");
static_assert(offsetof(MaiAction_MoveOnSpline_CreateActionMoveOnSplineToAP, Point) == 0x000010, "Member 'MaiAction_MoveOnSpline_CreateActionMoveOnSplineToAP::Point' has a wrong offset!");
static_assert(offsetof(MaiAction_MoveOnSpline_CreateActionMoveOnSplineToAP, ReturnValue) == 0x000018, "Member 'MaiAction_MoveOnSpline_CreateActionMoveOnSplineToAP::ReturnValue' has a wrong offset!");

// Function Mai.MaiAction_PlayAnimation.createActionPlayAnimWithParams
// 0x0098 (0x0098 - 0x0000)
struct MaiAction_PlayAnimation_CreateActionPlayAnimWithParams final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDaiAnimPlayParams                     AnimParams;                                        // 0x0008(0x0078)(Parm, NativeAccessSpecifierPublic)
	class FName                                   blockBT;                                           // 0x0080(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopCount;                                         // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaiAction_PlayAnimation*               ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAction_PlayAnimation_CreateActionPlayAnimWithParams) == 0x000008, "Wrong alignment on MaiAction_PlayAnimation_CreateActionPlayAnimWithParams");
static_assert(sizeof(MaiAction_PlayAnimation_CreateActionPlayAnimWithParams) == 0x000098, "Wrong size on MaiAction_PlayAnimation_CreateActionPlayAnimWithParams");
static_assert(offsetof(MaiAction_PlayAnimation_CreateActionPlayAnimWithParams, WorldContextObject) == 0x000000, "Member 'MaiAction_PlayAnimation_CreateActionPlayAnimWithParams::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MaiAction_PlayAnimation_CreateActionPlayAnimWithParams, AnimParams) == 0x000008, "Member 'MaiAction_PlayAnimation_CreateActionPlayAnimWithParams::AnimParams' has a wrong offset!");
static_assert(offsetof(MaiAction_PlayAnimation_CreateActionPlayAnimWithParams, blockBT) == 0x000080, "Member 'MaiAction_PlayAnimation_CreateActionPlayAnimWithParams::blockBT' has a wrong offset!");
static_assert(offsetof(MaiAction_PlayAnimation_CreateActionPlayAnimWithParams, LoopCount) == 0x000088, "Member 'MaiAction_PlayAnimation_CreateActionPlayAnimWithParams::LoopCount' has a wrong offset!");
static_assert(offsetof(MaiAction_PlayAnimation_CreateActionPlayAnimWithParams, ReturnValue) == 0x000090, "Member 'MaiAction_PlayAnimation_CreateActionPlayAnimWithParams::ReturnValue' has a wrong offset!");

// Function Mai.MaiAction_PlayAnimation.createActionPlayFromTags
// 0x0040 (0x0040 - 0x0000)
struct MaiAction_PlayAnimation_CreateActionPlayFromTags final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AnimTags;                                          // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	class FName                                   blockBT;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopCount;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaiAction_PlayAnimation*               ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAction_PlayAnimation_CreateActionPlayFromTags) == 0x000008, "Wrong alignment on MaiAction_PlayAnimation_CreateActionPlayFromTags");
static_assert(sizeof(MaiAction_PlayAnimation_CreateActionPlayFromTags) == 0x000040, "Wrong size on MaiAction_PlayAnimation_CreateActionPlayFromTags");
static_assert(offsetof(MaiAction_PlayAnimation_CreateActionPlayFromTags, WorldContextObject) == 0x000000, "Member 'MaiAction_PlayAnimation_CreateActionPlayFromTags::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MaiAction_PlayAnimation_CreateActionPlayFromTags, AnimTags) == 0x000008, "Member 'MaiAction_PlayAnimation_CreateActionPlayFromTags::AnimTags' has a wrong offset!");
static_assert(offsetof(MaiAction_PlayAnimation_CreateActionPlayFromTags, blockBT) == 0x000028, "Member 'MaiAction_PlayAnimation_CreateActionPlayFromTags::blockBT' has a wrong offset!");
static_assert(offsetof(MaiAction_PlayAnimation_CreateActionPlayFromTags, LoopCount) == 0x000030, "Member 'MaiAction_PlayAnimation_CreateActionPlayFromTags::LoopCount' has a wrong offset!");
static_assert(offsetof(MaiAction_PlayAnimation_CreateActionPlayFromTags, ReturnValue) == 0x000038, "Member 'MaiAction_PlayAnimation_CreateActionPlayFromTags::ReturnValue' has a wrong offset!");

// Function Mai.MaiAction_PlayAnimation.createActionPlayLoopedAnim
// 0x0040 (0x0040 - 0x0000)
struct MaiAction_PlayAnimation_CreateActionPlayLoopedAnim final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AnimTags;                                          // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	class FName                                   blockBT;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopCount;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaiAction_PlayAnimation*               ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAction_PlayAnimation_CreateActionPlayLoopedAnim) == 0x000008, "Wrong alignment on MaiAction_PlayAnimation_CreateActionPlayLoopedAnim");
static_assert(sizeof(MaiAction_PlayAnimation_CreateActionPlayLoopedAnim) == 0x000040, "Wrong size on MaiAction_PlayAnimation_CreateActionPlayLoopedAnim");
static_assert(offsetof(MaiAction_PlayAnimation_CreateActionPlayLoopedAnim, WorldContextObject) == 0x000000, "Member 'MaiAction_PlayAnimation_CreateActionPlayLoopedAnim::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MaiAction_PlayAnimation_CreateActionPlayLoopedAnim, AnimTags) == 0x000008, "Member 'MaiAction_PlayAnimation_CreateActionPlayLoopedAnim::AnimTags' has a wrong offset!");
static_assert(offsetof(MaiAction_PlayAnimation_CreateActionPlayLoopedAnim, blockBT) == 0x000028, "Member 'MaiAction_PlayAnimation_CreateActionPlayLoopedAnim::blockBT' has a wrong offset!");
static_assert(offsetof(MaiAction_PlayAnimation_CreateActionPlayLoopedAnim, LoopCount) == 0x000030, "Member 'MaiAction_PlayAnimation_CreateActionPlayLoopedAnim::LoopCount' has a wrong offset!");
static_assert(offsetof(MaiAction_PlayAnimation_CreateActionPlayLoopedAnim, ReturnValue) == 0x000038, "Member 'MaiAction_PlayAnimation_CreateActionPlayLoopedAnim::ReturnValue' has a wrong offset!");

// Function Mai.MaiAction_ExtMovementAnimation.createActionExtMovementAnimation
// 0x0048 (0x0048 - 0x0000)
struct MaiAction_ExtMovementAnimation_CreateActionExtMovementAnimation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AnimTags;                                          // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	class AMaiNavLink*                            NavLink;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartSide;                                         // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMaiAction_ExtMovementAnimation> ActionClass;                                       // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaiAction_ExtMovementAnimation*        ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAction_ExtMovementAnimation_CreateActionExtMovementAnimation) == 0x000008, "Wrong alignment on MaiAction_ExtMovementAnimation_CreateActionExtMovementAnimation");
static_assert(sizeof(MaiAction_ExtMovementAnimation_CreateActionExtMovementAnimation) == 0x000048, "Wrong size on MaiAction_ExtMovementAnimation_CreateActionExtMovementAnimation");
static_assert(offsetof(MaiAction_ExtMovementAnimation_CreateActionExtMovementAnimation, WorldContextObject) == 0x000000, "Member 'MaiAction_ExtMovementAnimation_CreateActionExtMovementAnimation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MaiAction_ExtMovementAnimation_CreateActionExtMovementAnimation, AnimTags) == 0x000008, "Member 'MaiAction_ExtMovementAnimation_CreateActionExtMovementAnimation::AnimTags' has a wrong offset!");
static_assert(offsetof(MaiAction_ExtMovementAnimation_CreateActionExtMovementAnimation, NavLink) == 0x000028, "Member 'MaiAction_ExtMovementAnimation_CreateActionExtMovementAnimation::NavLink' has a wrong offset!");
static_assert(offsetof(MaiAction_ExtMovementAnimation_CreateActionExtMovementAnimation, StartSide) == 0x000030, "Member 'MaiAction_ExtMovementAnimation_CreateActionExtMovementAnimation::StartSide' has a wrong offset!");
static_assert(offsetof(MaiAction_ExtMovementAnimation_CreateActionExtMovementAnimation, ActionClass) == 0x000038, "Member 'MaiAction_ExtMovementAnimation_CreateActionExtMovementAnimation::ActionClass' has a wrong offset!");
static_assert(offsetof(MaiAction_ExtMovementAnimation_CreateActionExtMovementAnimation, ReturnValue) == 0x000040, "Member 'MaiAction_ExtMovementAnimation_CreateActionExtMovementAnimation::ReturnValue' has a wrong offset!");

// Function Mai.MaiAction_ChangeSurface.createActionChangeSurface
// 0x00B0 (0x00B0 - 0x0000)
struct MaiAction_ChangeSurface_CreateActionChangeSurface final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AnimTags;                                          // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TargetTransform;                                   // 0x0030(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMaiAction_ChangeSurface>   ActionClass;                                       // 0x0090(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0098(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaiAction_ChangeSurface*               ReturnValue;                                       // 0x00A0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiAction_ChangeSurface_CreateActionChangeSurface) == 0x000010, "Wrong alignment on MaiAction_ChangeSurface_CreateActionChangeSurface");
static_assert(sizeof(MaiAction_ChangeSurface_CreateActionChangeSurface) == 0x0000B0, "Wrong size on MaiAction_ChangeSurface_CreateActionChangeSurface");
static_assert(offsetof(MaiAction_ChangeSurface_CreateActionChangeSurface, WorldContextObject) == 0x000000, "Member 'MaiAction_ChangeSurface_CreateActionChangeSurface::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MaiAction_ChangeSurface_CreateActionChangeSurface, AnimTags) == 0x000008, "Member 'MaiAction_ChangeSurface_CreateActionChangeSurface::AnimTags' has a wrong offset!");
static_assert(offsetof(MaiAction_ChangeSurface_CreateActionChangeSurface, TargetTransform) == 0x000030, "Member 'MaiAction_ChangeSurface_CreateActionChangeSurface::TargetTransform' has a wrong offset!");
static_assert(offsetof(MaiAction_ChangeSurface_CreateActionChangeSurface, ActionClass) == 0x000090, "Member 'MaiAction_ChangeSurface_CreateActionChangeSurface::ActionClass' has a wrong offset!");
static_assert(offsetof(MaiAction_ChangeSurface_CreateActionChangeSurface, PlayRate) == 0x000098, "Member 'MaiAction_ChangeSurface_CreateActionChangeSurface::PlayRate' has a wrong offset!");
static_assert(offsetof(MaiAction_ChangeSurface_CreateActionChangeSurface, ReturnValue) == 0x0000A0, "Member 'MaiAction_ChangeSurface_CreateActionChangeSurface::ReturnValue' has a wrong offset!");

// Function Mai.MaiAction_SyncAnimations.createActionSyncAnims
// 0x0070 (0x0070 - 0x0000)
struct MaiAction_SyncAnimations_CreateActionSyncAnims final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  OwnerAnimTags;                                     // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  OtherAnimTags;                                     // 0x0028(0x0020)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMaiAction_SyncAnimations>  ActionClass;                                       // 0x0050(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   behaviorName;                                      // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaiAction_SyncAnimations*              ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAction_SyncAnimations_CreateActionSyncAnims) == 0x000008, "Wrong alignment on MaiAction_SyncAnimations_CreateActionSyncAnims");
static_assert(sizeof(MaiAction_SyncAnimations_CreateActionSyncAnims) == 0x000070, "Wrong size on MaiAction_SyncAnimations_CreateActionSyncAnims");
static_assert(offsetof(MaiAction_SyncAnimations_CreateActionSyncAnims, WorldContextObject) == 0x000000, "Member 'MaiAction_SyncAnimations_CreateActionSyncAnims::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MaiAction_SyncAnimations_CreateActionSyncAnims, OwnerAnimTags) == 0x000008, "Member 'MaiAction_SyncAnimations_CreateActionSyncAnims::OwnerAnimTags' has a wrong offset!");
static_assert(offsetof(MaiAction_SyncAnimations_CreateActionSyncAnims, OtherAnimTags) == 0x000028, "Member 'MaiAction_SyncAnimations_CreateActionSyncAnims::OtherAnimTags' has a wrong offset!");
static_assert(offsetof(MaiAction_SyncAnimations_CreateActionSyncAnims, Other) == 0x000048, "Member 'MaiAction_SyncAnimations_CreateActionSyncAnims::Other' has a wrong offset!");
static_assert(offsetof(MaiAction_SyncAnimations_CreateActionSyncAnims, ActionClass) == 0x000050, "Member 'MaiAction_SyncAnimations_CreateActionSyncAnims::ActionClass' has a wrong offset!");
static_assert(offsetof(MaiAction_SyncAnimations_CreateActionSyncAnims, behaviorName) == 0x000058, "Member 'MaiAction_SyncAnimations_CreateActionSyncAnims::behaviorName' has a wrong offset!");
static_assert(offsetof(MaiAction_SyncAnimations_CreateActionSyncAnims, PlayRate) == 0x000060, "Member 'MaiAction_SyncAnimations_CreateActionSyncAnims::PlayRate' has a wrong offset!");
static_assert(offsetof(MaiAction_SyncAnimations_CreateActionSyncAnims, ReturnValue) == 0x000068, "Member 'MaiAction_SyncAnimations_CreateActionSyncAnims::ReturnValue' has a wrong offset!");

// Function Mai.MaiAction_SyncAnimations.createActionSyncAnimsSingle
// 0x0040 (0x0040 - 0x0000)
struct MaiAction_SyncAnimations_CreateActionSyncAnimsSingle final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OwnerAnimTag;                                      // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OtherAnimTag;                                      // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMaiAction_SyncAnimations>  ActionClass;                                       // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   behaviorName;                                      // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaiAction_SyncAnimations*              ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAction_SyncAnimations_CreateActionSyncAnimsSingle) == 0x000008, "Wrong alignment on MaiAction_SyncAnimations_CreateActionSyncAnimsSingle");
static_assert(sizeof(MaiAction_SyncAnimations_CreateActionSyncAnimsSingle) == 0x000040, "Wrong size on MaiAction_SyncAnimations_CreateActionSyncAnimsSingle");
static_assert(offsetof(MaiAction_SyncAnimations_CreateActionSyncAnimsSingle, WorldContextObject) == 0x000000, "Member 'MaiAction_SyncAnimations_CreateActionSyncAnimsSingle::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MaiAction_SyncAnimations_CreateActionSyncAnimsSingle, OwnerAnimTag) == 0x000008, "Member 'MaiAction_SyncAnimations_CreateActionSyncAnimsSingle::OwnerAnimTag' has a wrong offset!");
static_assert(offsetof(MaiAction_SyncAnimations_CreateActionSyncAnimsSingle, OtherAnimTag) == 0x000010, "Member 'MaiAction_SyncAnimations_CreateActionSyncAnimsSingle::OtherAnimTag' has a wrong offset!");
static_assert(offsetof(MaiAction_SyncAnimations_CreateActionSyncAnimsSingle, Other) == 0x000018, "Member 'MaiAction_SyncAnimations_CreateActionSyncAnimsSingle::Other' has a wrong offset!");
static_assert(offsetof(MaiAction_SyncAnimations_CreateActionSyncAnimsSingle, ActionClass) == 0x000020, "Member 'MaiAction_SyncAnimations_CreateActionSyncAnimsSingle::ActionClass' has a wrong offset!");
static_assert(offsetof(MaiAction_SyncAnimations_CreateActionSyncAnimsSingle, behaviorName) == 0x000028, "Member 'MaiAction_SyncAnimations_CreateActionSyncAnimsSingle::behaviorName' has a wrong offset!");
static_assert(offsetof(MaiAction_SyncAnimations_CreateActionSyncAnimsSingle, PlayRate) == 0x000030, "Member 'MaiAction_SyncAnimations_CreateActionSyncAnimsSingle::PlayRate' has a wrong offset!");
static_assert(offsetof(MaiAction_SyncAnimations_CreateActionSyncAnimsSingle, ReturnValue) == 0x000038, "Member 'MaiAction_SyncAnimations_CreateActionSyncAnimsSingle::ReturnValue' has a wrong offset!");

// Function Mai.MaiAction_SyncAnimations.createActionSyncFromConfig
// 0x0078 (0x0078 - 0x0000)
struct MaiAction_SyncAnimations_CreateActionSyncFromConfig final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMaiSyncActionConfig                   Config;                                            // 0x0010(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   behaviorName;                                      // 0x0068(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaiAction_SyncAnimations*              ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAction_SyncAnimations_CreateActionSyncFromConfig) == 0x000008, "Wrong alignment on MaiAction_SyncAnimations_CreateActionSyncFromConfig");
static_assert(sizeof(MaiAction_SyncAnimations_CreateActionSyncFromConfig) == 0x000078, "Wrong size on MaiAction_SyncAnimations_CreateActionSyncFromConfig");
static_assert(offsetof(MaiAction_SyncAnimations_CreateActionSyncFromConfig, WorldContext) == 0x000000, "Member 'MaiAction_SyncAnimations_CreateActionSyncFromConfig::WorldContext' has a wrong offset!");
static_assert(offsetof(MaiAction_SyncAnimations_CreateActionSyncFromConfig, Other) == 0x000008, "Member 'MaiAction_SyncAnimations_CreateActionSyncFromConfig::Other' has a wrong offset!");
static_assert(offsetof(MaiAction_SyncAnimations_CreateActionSyncFromConfig, Config) == 0x000010, "Member 'MaiAction_SyncAnimations_CreateActionSyncFromConfig::Config' has a wrong offset!");
static_assert(offsetof(MaiAction_SyncAnimations_CreateActionSyncFromConfig, behaviorName) == 0x000068, "Member 'MaiAction_SyncAnimations_CreateActionSyncFromConfig::behaviorName' has a wrong offset!");
static_assert(offsetof(MaiAction_SyncAnimations_CreateActionSyncFromConfig, ReturnValue) == 0x000070, "Member 'MaiAction_SyncAnimations_CreateActionSyncFromConfig::ReturnValue' has a wrong offset!");

// Function Mai.MaiAction_SyncAnimations.createActionSyncFromRow
// 0x0028 (0x0028 - 0x0000)
struct MaiAction_SyncAnimations_CreateActionSyncFromRow final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    Row;                                               // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UMaiAction_SyncAnimations*              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAction_SyncAnimations_CreateActionSyncFromRow) == 0x000008, "Wrong alignment on MaiAction_SyncAnimations_CreateActionSyncFromRow");
static_assert(sizeof(MaiAction_SyncAnimations_CreateActionSyncFromRow) == 0x000028, "Wrong size on MaiAction_SyncAnimations_CreateActionSyncFromRow");
static_assert(offsetof(MaiAction_SyncAnimations_CreateActionSyncFromRow, WorldContext) == 0x000000, "Member 'MaiAction_SyncAnimations_CreateActionSyncFromRow::WorldContext' has a wrong offset!");
static_assert(offsetof(MaiAction_SyncAnimations_CreateActionSyncFromRow, Other) == 0x000008, "Member 'MaiAction_SyncAnimations_CreateActionSyncFromRow::Other' has a wrong offset!");
static_assert(offsetof(MaiAction_SyncAnimations_CreateActionSyncFromRow, Row) == 0x000010, "Member 'MaiAction_SyncAnimations_CreateActionSyncFromRow::Row' has a wrong offset!");
static_assert(offsetof(MaiAction_SyncAnimations_CreateActionSyncFromRow, ReturnValue) == 0x000020, "Member 'MaiAction_SyncAnimations_CreateActionSyncFromRow::ReturnValue' has a wrong offset!");

// Function Mai.MaiAction_SyncAnimations.PlayOtherMontage
// 0x0008 (0x0008 - 0x0000)
struct MaiAction_SyncAnimations_PlayOtherMontage final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAction_SyncAnimations_PlayOtherMontage) == 0x000008, "Wrong alignment on MaiAction_SyncAnimations_PlayOtherMontage");
static_assert(sizeof(MaiAction_SyncAnimations_PlayOtherMontage) == 0x000008, "Wrong size on MaiAction_SyncAnimations_PlayOtherMontage");
static_assert(offsetof(MaiAction_SyncAnimations_PlayOtherMontage, ReturnValue) == 0x000000, "Member 'MaiAction_SyncAnimations_PlayOtherMontage::ReturnValue' has a wrong offset!");

// Function Mai.MaiAction_SyncAnimations.PlayOwnerMontage
// 0x0008 (0x0008 - 0x0000)
struct MaiAction_SyncAnimations_PlayOwnerMontage final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAction_SyncAnimations_PlayOwnerMontage) == 0x000008, "Wrong alignment on MaiAction_SyncAnimations_PlayOwnerMontage");
static_assert(sizeof(MaiAction_SyncAnimations_PlayOwnerMontage) == 0x000008, "Wrong size on MaiAction_SyncAnimations_PlayOwnerMontage");
static_assert(offsetof(MaiAction_SyncAnimations_PlayOwnerMontage, ReturnValue) == 0x000000, "Member 'MaiAction_SyncAnimations_PlayOwnerMontage::ReturnValue' has a wrong offset!");

// Function Mai.MaiAction_RotateTo.createActionRotateToActor
// 0x0020 (0x0020 - 0x0000)
struct MaiAction_RotateTo_CreateActionRotateToActor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Precision;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaiAction_RotateTo*                    ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAction_RotateTo_CreateActionRotateToActor) == 0x000008, "Wrong alignment on MaiAction_RotateTo_CreateActionRotateToActor");
static_assert(sizeof(MaiAction_RotateTo_CreateActionRotateToActor) == 0x000020, "Wrong size on MaiAction_RotateTo_CreateActionRotateToActor");
static_assert(offsetof(MaiAction_RotateTo_CreateActionRotateToActor, WorldContextObject) == 0x000000, "Member 'MaiAction_RotateTo_CreateActionRotateToActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MaiAction_RotateTo_CreateActionRotateToActor, Actor) == 0x000008, "Member 'MaiAction_RotateTo_CreateActionRotateToActor::Actor' has a wrong offset!");
static_assert(offsetof(MaiAction_RotateTo_CreateActionRotateToActor, Precision) == 0x000010, "Member 'MaiAction_RotateTo_CreateActionRotateToActor::Precision' has a wrong offset!");
static_assert(offsetof(MaiAction_RotateTo_CreateActionRotateToActor, ReturnValue) == 0x000018, "Member 'MaiAction_RotateTo_CreateActionRotateToActor::ReturnValue' has a wrong offset!");

// Function Mai.MaiAction_RotateTo.createActionRotateToLocation
// 0x0030 (0x0030 - 0x0000)
struct MaiAction_RotateTo_CreateActionRotateToLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Precision;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaiAction_RotateTo*                    ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAction_RotateTo_CreateActionRotateToLocation) == 0x000008, "Wrong alignment on MaiAction_RotateTo_CreateActionRotateToLocation");
static_assert(sizeof(MaiAction_RotateTo_CreateActionRotateToLocation) == 0x000030, "Wrong size on MaiAction_RotateTo_CreateActionRotateToLocation");
static_assert(offsetof(MaiAction_RotateTo_CreateActionRotateToLocation, WorldContextObject) == 0x000000, "Member 'MaiAction_RotateTo_CreateActionRotateToLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MaiAction_RotateTo_CreateActionRotateToLocation, Location) == 0x000008, "Member 'MaiAction_RotateTo_CreateActionRotateToLocation::Location' has a wrong offset!");
static_assert(offsetof(MaiAction_RotateTo_CreateActionRotateToLocation, Precision) == 0x000020, "Member 'MaiAction_RotateTo_CreateActionRotateToLocation::Precision' has a wrong offset!");
static_assert(offsetof(MaiAction_RotateTo_CreateActionRotateToLocation, ReturnValue) == 0x000028, "Member 'MaiAction_RotateTo_CreateActionRotateToLocation::ReturnValue' has a wrong offset!");

// Function Mai.MaiAction_WaitUntilStops.createActionWaitUntilStops
// 0x0010 (0x0010 - 0x0000)
struct MaiAction_WaitUntilStops_CreateActionWaitUntilStops final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaiAction_WaitUntilStops*              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAction_WaitUntilStops_CreateActionWaitUntilStops) == 0x000008, "Wrong alignment on MaiAction_WaitUntilStops_CreateActionWaitUntilStops");
static_assert(sizeof(MaiAction_WaitUntilStops_CreateActionWaitUntilStops) == 0x000010, "Wrong size on MaiAction_WaitUntilStops_CreateActionWaitUntilStops");
static_assert(offsetof(MaiAction_WaitUntilStops_CreateActionWaitUntilStops, WorldContextObject) == 0x000000, "Member 'MaiAction_WaitUntilStops_CreateActionWaitUntilStops::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MaiAction_WaitUntilStops_CreateActionWaitUntilStops, ReturnValue) == 0x000008, "Member 'MaiAction_WaitUntilStops_CreateActionWaitUntilStops::ReturnValue' has a wrong offset!");

// Function Mai.MaiAggroMeter.getAggroMeter
// 0x0010 (0x0010 - 0x0000)
struct MaiAggroMeter_GetAggroMeter final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaiAggroMeter*                         ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAggroMeter_GetAggroMeter) == 0x000008, "Wrong alignment on MaiAggroMeter_GetAggroMeter");
static_assert(sizeof(MaiAggroMeter_GetAggroMeter) == 0x000010, "Wrong size on MaiAggroMeter_GetAggroMeter");
static_assert(offsetof(MaiAggroMeter_GetAggroMeter, Actor) == 0x000000, "Member 'MaiAggroMeter_GetAggroMeter::Actor' has a wrong offset!");
static_assert(offsetof(MaiAggroMeter_GetAggroMeter, ReturnValue) == 0x000008, "Member 'MaiAggroMeter_GetAggroMeter::ReturnValue' has a wrong offset!");

// Function Mai.MaiAggroMeter.getSenseTypeForStimulus
// 0x0068 (0x0068 - 0x0000)
struct MaiAggroMeter_GetSenseTypeForStimulus final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIStimulus                            Stimulus;                                          // 0x0008(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EMaiSenseType                                 ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiAggroMeter_GetSenseTypeForStimulus) == 0x000008, "Wrong alignment on MaiAggroMeter_GetSenseTypeForStimulus");
static_assert(sizeof(MaiAggroMeter_GetSenseTypeForStimulus) == 0x000068, "Wrong size on MaiAggroMeter_GetSenseTypeForStimulus");
static_assert(offsetof(MaiAggroMeter_GetSenseTypeForStimulus, WorldContextObject) == 0x000000, "Member 'MaiAggroMeter_GetSenseTypeForStimulus::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MaiAggroMeter_GetSenseTypeForStimulus, Stimulus) == 0x000008, "Member 'MaiAggroMeter_GetSenseTypeForStimulus::Stimulus' has a wrong offset!");
static_assert(offsetof(MaiAggroMeter_GetSenseTypeForStimulus, ReturnValue) == 0x000060, "Member 'MaiAggroMeter_GetSenseTypeForStimulus::ReturnValue' has a wrong offset!");

// Function Mai.MaiAggroMeter.AddAggro
// 0x0008 (0x0008 - 0x0000)
struct MaiAggroMeter_AddAggro final
{
public:
	float                                         Aggro;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Force;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiAggroMeter_AddAggro) == 0x000004, "Wrong alignment on MaiAggroMeter_AddAggro");
static_assert(sizeof(MaiAggroMeter_AddAggro) == 0x000008, "Wrong size on MaiAggroMeter_AddAggro");
static_assert(offsetof(MaiAggroMeter_AddAggro, Aggro) == 0x000000, "Member 'MaiAggroMeter_AddAggro::Aggro' has a wrong offset!");
static_assert(offsetof(MaiAggroMeter_AddAggro, Force) == 0x000004, "Member 'MaiAggroMeter_AddAggro::Force' has a wrong offset!");

// Function Mai.MaiAggroMeter.AddGainMod
// 0x0018 (0x0018 - 0x0000)
struct MaiAggroMeter_AddGainMod final
{
public:
	class UDaiFloatModifier*                      Mod;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaiSenseType                                 Sense;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name_0;                                            // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiAggroMeter_AddGainMod) == 0x000008, "Wrong alignment on MaiAggroMeter_AddGainMod");
static_assert(sizeof(MaiAggroMeter_AddGainMod) == 0x000018, "Wrong size on MaiAggroMeter_AddGainMod");
static_assert(offsetof(MaiAggroMeter_AddGainMod, Mod) == 0x000000, "Member 'MaiAggroMeter_AddGainMod::Mod' has a wrong offset!");
static_assert(offsetof(MaiAggroMeter_AddGainMod, Sense) == 0x000008, "Member 'MaiAggroMeter_AddGainMod::Sense' has a wrong offset!");
static_assert(offsetof(MaiAggroMeter_AddGainMod, Name_0) == 0x00000C, "Member 'MaiAggroMeter_AddGainMod::Name_0' has a wrong offset!");

// Function Mai.MaiAggroMeter.DisableDecay
// 0x000C (0x000C - 0x0000)
struct MaiAggroMeter_DisableDecay final
{
public:
	bool                                          Disable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Reason;                                            // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAggroMeter_DisableDecay) == 0x000004, "Wrong alignment on MaiAggroMeter_DisableDecay");
static_assert(sizeof(MaiAggroMeter_DisableDecay) == 0x00000C, "Wrong size on MaiAggroMeter_DisableDecay");
static_assert(offsetof(MaiAggroMeter_DisableDecay, Disable) == 0x000000, "Member 'MaiAggroMeter_DisableDecay::Disable' has a wrong offset!");
static_assert(offsetof(MaiAggroMeter_DisableDecay, Reason) == 0x000004, "Member 'MaiAggroMeter_DisableDecay::Reason' has a wrong offset!");

// Function Mai.MaiAggroMeter.DisableGain
// 0x000C (0x000C - 0x0000)
struct MaiAggroMeter_DisableGain final
{
public:
	bool                                          Disable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Reason;                                            // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAggroMeter_DisableGain) == 0x000004, "Wrong alignment on MaiAggroMeter_DisableGain");
static_assert(sizeof(MaiAggroMeter_DisableGain) == 0x00000C, "Wrong size on MaiAggroMeter_DisableGain");
static_assert(offsetof(MaiAggroMeter_DisableGain, Disable) == 0x000000, "Member 'MaiAggroMeter_DisableGain::Disable' has a wrong offset!");
static_assert(offsetof(MaiAggroMeter_DisableGain, Reason) == 0x000004, "Member 'MaiAggroMeter_DisableGain::Reason' has a wrong offset!");

// Function Mai.MaiAggroMeter.OnTargetPerceptionUpdated
// 0x0060 (0x0060 - 0x0000)
struct MaiAggroMeter_OnTargetPerceptionUpdated final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIStimulus                            Stimulus;                                          // 0x0008(0x0058)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAggroMeter_OnTargetPerceptionUpdated) == 0x000008, "Wrong alignment on MaiAggroMeter_OnTargetPerceptionUpdated");
static_assert(sizeof(MaiAggroMeter_OnTargetPerceptionUpdated) == 0x000060, "Wrong size on MaiAggroMeter_OnTargetPerceptionUpdated");
static_assert(offsetof(MaiAggroMeter_OnTargetPerceptionUpdated, Actor) == 0x000000, "Member 'MaiAggroMeter_OnTargetPerceptionUpdated::Actor' has a wrong offset!");
static_assert(offsetof(MaiAggroMeter_OnTargetPerceptionUpdated, Stimulus) == 0x000008, "Member 'MaiAggroMeter_OnTargetPerceptionUpdated::Stimulus' has a wrong offset!");

// Function Mai.MaiAggroMeter.RemoveGainMod
// 0x0018 (0x0018 - 0x0000)
struct MaiAggroMeter_RemoveGainMod final
{
public:
	class UDaiFloatModifier*                      Mod;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaiSenseType                                 Sense;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name_0;                                            // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiAggroMeter_RemoveGainMod) == 0x000008, "Wrong alignment on MaiAggroMeter_RemoveGainMod");
static_assert(sizeof(MaiAggroMeter_RemoveGainMod) == 0x000018, "Wrong size on MaiAggroMeter_RemoveGainMod");
static_assert(offsetof(MaiAggroMeter_RemoveGainMod, Mod) == 0x000000, "Member 'MaiAggroMeter_RemoveGainMod::Mod' has a wrong offset!");
static_assert(offsetof(MaiAggroMeter_RemoveGainMod, Sense) == 0x000008, "Member 'MaiAggroMeter_RemoveGainMod::Sense' has a wrong offset!");
static_assert(offsetof(MaiAggroMeter_RemoveGainMod, Name_0) == 0x00000C, "Member 'MaiAggroMeter_RemoveGainMod::Name_0' has a wrong offset!");

// Function Mai.MaiAggroMeter.SetAggro
// 0x0008 (0x0008 - 0x0000)
struct MaiAggroMeter_SetAggro final
{
public:
	float                                         NewAggro;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Force;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiAggroMeter_SetAggro) == 0x000004, "Wrong alignment on MaiAggroMeter_SetAggro");
static_assert(sizeof(MaiAggroMeter_SetAggro) == 0x000008, "Wrong size on MaiAggroMeter_SetAggro");
static_assert(offsetof(MaiAggroMeter_SetAggro, NewAggro) == 0x000000, "Member 'MaiAggroMeter_SetAggro::NewAggro' has a wrong offset!");
static_assert(offsetof(MaiAggroMeter_SetAggro, Force) == 0x000004, "Member 'MaiAggroMeter_SetAggro::Force' has a wrong offset!");

// Function Mai.MaiAggroMeter.SetBehaviorStance
// 0x0001 (0x0001 - 0x0000)
struct MaiAggroMeter_SetBehaviorStance final
{
public:
	EMaiAggroStance                               Stance;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAggroMeter_SetBehaviorStance) == 0x000001, "Wrong alignment on MaiAggroMeter_SetBehaviorStance");
static_assert(sizeof(MaiAggroMeter_SetBehaviorStance) == 0x000001, "Wrong size on MaiAggroMeter_SetBehaviorStance");
static_assert(offsetof(MaiAggroMeter_SetBehaviorStance, Stance) == 0x000000, "Member 'MaiAggroMeter_SetBehaviorStance::Stance' has a wrong offset!");

// Function Mai.MaiAggroMeter.WeakDisableGain
// 0x000C (0x000C - 0x0000)
struct MaiAggroMeter_WeakDisableGain final
{
public:
	bool                                          Disable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Reason;                                            // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAggroMeter_WeakDisableGain) == 0x000004, "Wrong alignment on MaiAggroMeter_WeakDisableGain");
static_assert(sizeof(MaiAggroMeter_WeakDisableGain) == 0x00000C, "Wrong size on MaiAggroMeter_WeakDisableGain");
static_assert(offsetof(MaiAggroMeter_WeakDisableGain, Disable) == 0x000000, "Member 'MaiAggroMeter_WeakDisableGain::Disable' has a wrong offset!");
static_assert(offsetof(MaiAggroMeter_WeakDisableGain, Reason) == 0x000004, "Member 'MaiAggroMeter_WeakDisableGain::Reason' has a wrong offset!");

// Function Mai.MaiAggroMeter.GetAggro
// 0x0004 (0x0004 - 0x0000)
struct MaiAggroMeter_GetAggro final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAggroMeter_GetAggro) == 0x000004, "Wrong alignment on MaiAggroMeter_GetAggro");
static_assert(sizeof(MaiAggroMeter_GetAggro) == 0x000004, "Wrong size on MaiAggroMeter_GetAggro");
static_assert(offsetof(MaiAggroMeter_GetAggro, ReturnValue) == 0x000000, "Member 'MaiAggroMeter_GetAggro::ReturnValue' has a wrong offset!");

// Function Mai.MaiAggroMeter.GetBehaviorStance
// 0x0001 (0x0001 - 0x0000)
struct MaiAggroMeter_GetBehaviorStance final
{
public:
	EMaiAggroStance                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAggroMeter_GetBehaviorStance) == 0x000001, "Wrong alignment on MaiAggroMeter_GetBehaviorStance");
static_assert(sizeof(MaiAggroMeter_GetBehaviorStance) == 0x000001, "Wrong size on MaiAggroMeter_GetBehaviorStance");
static_assert(offsetof(MaiAggroMeter_GetBehaviorStance, ReturnValue) == 0x000000, "Member 'MaiAggroMeter_GetBehaviorStance::ReturnValue' has a wrong offset!");

// Function Mai.MaiAggroMeter.GetDebugColor
// 0x0004 (0x0004 - 0x0000)
struct MaiAggroMeter_GetDebugColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAggroMeter_GetDebugColor) == 0x000004, "Wrong alignment on MaiAggroMeter_GetDebugColor");
static_assert(sizeof(MaiAggroMeter_GetDebugColor) == 0x000004, "Wrong size on MaiAggroMeter_GetDebugColor");
static_assert(offsetof(MaiAggroMeter_GetDebugColor, ReturnValue) == 0x000000, "Member 'MaiAggroMeter_GetDebugColor::ReturnValue' has a wrong offset!");

// Function Mai.MaiAggroMeter.GetDebugText
// 0x0010 (0x0010 - 0x0000)
struct MaiAggroMeter_GetDebugText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAggroMeter_GetDebugText) == 0x000008, "Wrong alignment on MaiAggroMeter_GetDebugText");
static_assert(sizeof(MaiAggroMeter_GetDebugText) == 0x000010, "Wrong size on MaiAggroMeter_GetDebugText");
static_assert(offsetof(MaiAggroMeter_GetDebugText, ReturnValue) == 0x000000, "Member 'MaiAggroMeter_GetDebugText::ReturnValue' has a wrong offset!");

// Function Mai.MaiAggroMeter.GetMostHated
// 0x0008 (0x0008 - 0x0000)
struct MaiAggroMeter_GetMostHated final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAggroMeter_GetMostHated) == 0x000008, "Wrong alignment on MaiAggroMeter_GetMostHated");
static_assert(sizeof(MaiAggroMeter_GetMostHated) == 0x000008, "Wrong size on MaiAggroMeter_GetMostHated");
static_assert(offsetof(MaiAggroMeter_GetMostHated, ReturnValue) == 0x000000, "Member 'MaiAggroMeter_GetMostHated::ReturnValue' has a wrong offset!");

// Function Mai.MaiAggroMeter.GetStance
// 0x0001 (0x0001 - 0x0000)
struct MaiAggroMeter_GetStance final
{
public:
	EMaiAggroStance                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAggroMeter_GetStance) == 0x000001, "Wrong alignment on MaiAggroMeter_GetStance");
static_assert(sizeof(MaiAggroMeter_GetStance) == 0x000001, "Wrong size on MaiAggroMeter_GetStance");
static_assert(offsetof(MaiAggroMeter_GetStance, ReturnValue) == 0x000000, "Member 'MaiAggroMeter_GetStance::ReturnValue' has a wrong offset!");

// Function Mai.MaiAggroMeter.GetStanceMaxAggro
// 0x0008 (0x0008 - 0x0000)
struct MaiAggroMeter_GetStanceMaxAggro final
{
public:
	EMaiAggroStance                               Stance;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAggroMeter_GetStanceMaxAggro) == 0x000004, "Wrong alignment on MaiAggroMeter_GetStanceMaxAggro");
static_assert(sizeof(MaiAggroMeter_GetStanceMaxAggro) == 0x000008, "Wrong size on MaiAggroMeter_GetStanceMaxAggro");
static_assert(offsetof(MaiAggroMeter_GetStanceMaxAggro, Stance) == 0x000000, "Member 'MaiAggroMeter_GetStanceMaxAggro::Stance' has a wrong offset!");
static_assert(offsetof(MaiAggroMeter_GetStanceMaxAggro, ReturnValue) == 0x000004, "Member 'MaiAggroMeter_GetStanceMaxAggro::ReturnValue' has a wrong offset!");

// Function Mai.MaiAggroMeter.GetStanceMinAggro
// 0x0008 (0x0008 - 0x0000)
struct MaiAggroMeter_GetStanceMinAggro final
{
public:
	EMaiAggroStance                               Stance;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAggroMeter_GetStanceMinAggro) == 0x000004, "Wrong alignment on MaiAggroMeter_GetStanceMinAggro");
static_assert(sizeof(MaiAggroMeter_GetStanceMinAggro) == 0x000008, "Wrong size on MaiAggroMeter_GetStanceMinAggro");
static_assert(offsetof(MaiAggroMeter_GetStanceMinAggro, Stance) == 0x000000, "Member 'MaiAggroMeter_GetStanceMinAggro::Stance' has a wrong offset!");
static_assert(offsetof(MaiAggroMeter_GetStanceMinAggro, ReturnValue) == 0x000004, "Member 'MaiAggroMeter_GetStanceMinAggro::ReturnValue' has a wrong offset!");

// Function Mai.MaiAggroMeter.IsAggressive
// 0x0001 (0x0001 - 0x0000)
struct MaiAggroMeter_IsAggressive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAggroMeter_IsAggressive) == 0x000001, "Wrong alignment on MaiAggroMeter_IsAggressive");
static_assert(sizeof(MaiAggroMeter_IsAggressive) == 0x000001, "Wrong size on MaiAggroMeter_IsAggressive");
static_assert(offsetof(MaiAggroMeter_IsAggressive, ReturnValue) == 0x000000, "Member 'MaiAggroMeter_IsAggressive::ReturnValue' has a wrong offset!");

// Function Mai.MaiAggroMeter.IsAggroGainDisabled
// 0x0001 (0x0001 - 0x0000)
struct MaiAggroMeter_IsAggroGainDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAggroMeter_IsAggroGainDisabled) == 0x000001, "Wrong alignment on MaiAggroMeter_IsAggroGainDisabled");
static_assert(sizeof(MaiAggroMeter_IsAggroGainDisabled) == 0x000001, "Wrong size on MaiAggroMeter_IsAggroGainDisabled");
static_assert(offsetof(MaiAggroMeter_IsAggroGainDisabled, ReturnValue) == 0x000000, "Member 'MaiAggroMeter_IsAggroGainDisabled::ReturnValue' has a wrong offset!");

// Function Mai.MaiAggroMeter.IsCautious
// 0x0001 (0x0001 - 0x0000)
struct MaiAggroMeter_IsCautious final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAggroMeter_IsCautious) == 0x000001, "Wrong alignment on MaiAggroMeter_IsCautious");
static_assert(sizeof(MaiAggroMeter_IsCautious) == 0x000001, "Wrong size on MaiAggroMeter_IsCautious");
static_assert(offsetof(MaiAggroMeter_IsCautious, ReturnValue) == 0x000000, "Member 'MaiAggroMeter_IsCautious::ReturnValue' has a wrong offset!");

// Function Mai.MaiAggroMeter.IsNeutral
// 0x0001 (0x0001 - 0x0000)
struct MaiAggroMeter_IsNeutral final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAggroMeter_IsNeutral) == 0x000001, "Wrong alignment on MaiAggroMeter_IsNeutral");
static_assert(sizeof(MaiAggroMeter_IsNeutral) == 0x000001, "Wrong size on MaiAggroMeter_IsNeutral");
static_assert(offsetof(MaiAggroMeter_IsNeutral, ReturnValue) == 0x000000, "Member 'MaiAggroMeter_IsNeutral::ReturnValue' has a wrong offset!");

// Function Mai.MaiSense_SightDecorator.IsInSight
// 0x0018 (0x0018 - 0x0000)
struct MaiSense_SightDecorator_IsInSight final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaiSenseDebugger*                      Debugger;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiSense_SightDecorator_IsInSight) == 0x000008, "Wrong alignment on MaiSense_SightDecorator_IsInSight");
static_assert(sizeof(MaiSense_SightDecorator_IsInSight) == 0x000018, "Wrong size on MaiSense_SightDecorator_IsInSight");
static_assert(offsetof(MaiSense_SightDecorator_IsInSight, Actor) == 0x000000, "Member 'MaiSense_SightDecorator_IsInSight::Actor' has a wrong offset!");
static_assert(offsetof(MaiSense_SightDecorator_IsInSight, Debugger) == 0x000008, "Member 'MaiSense_SightDecorator_IsInSight::Debugger' has a wrong offset!");
static_assert(offsetof(MaiSense_SightDecorator_IsInSight, ReturnValue) == 0x000010, "Member 'MaiSense_SightDecorator_IsInSight::ReturnValue' has a wrong offset!");

// Function Mai.MaiFloatAggroModifier.GetStimulus
// 0x0058 (0x0058 - 0x0000)
struct MaiFloatAggroModifier_GetStimulus final
{
public:
	struct FAIStimulus                            ReturnValue;                                       // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFloatAggroModifier_GetStimulus) == 0x000008, "Wrong alignment on MaiFloatAggroModifier_GetStimulus");
static_assert(sizeof(MaiFloatAggroModifier_GetStimulus) == 0x000058, "Wrong size on MaiFloatAggroModifier_GetStimulus");
static_assert(offsetof(MaiFloatAggroModifier_GetStimulus, ReturnValue) == 0x000000, "Member 'MaiFloatAggroModifier_GetStimulus::ReturnValue' has a wrong offset!");

// Function Mai.MsgMadeDodgeReceiverInterface.ReceiveMadeDodgeMsg
// 0x0010 (0x0010 - 0x0000)
struct MsgMadeDodgeReceiverInterface_ReceiveMadeDodgeMsg final
{
public:
	class UMaiMessage*                            Message;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Sender;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MsgMadeDodgeReceiverInterface_ReceiveMadeDodgeMsg) == 0x000008, "Wrong alignment on MsgMadeDodgeReceiverInterface_ReceiveMadeDodgeMsg");
static_assert(sizeof(MsgMadeDodgeReceiverInterface_ReceiveMadeDodgeMsg) == 0x000010, "Wrong size on MsgMadeDodgeReceiverInterface_ReceiveMadeDodgeMsg");
static_assert(offsetof(MsgMadeDodgeReceiverInterface_ReceiveMadeDodgeMsg, Message) == 0x000000, "Member 'MsgMadeDodgeReceiverInterface_ReceiveMadeDodgeMsg::Message' has a wrong offset!");
static_assert(offsetof(MsgMadeDodgeReceiverInterface_ReceiveMadeDodgeMsg, Sender) == 0x000008, "Member 'MsgMadeDodgeReceiverInterface_ReceiveMadeDodgeMsg::Sender' has a wrong offset!");

// Function Mai.MaiAreaComponent.GetAreaShape
// 0x0020 (0x0020 - 0x0000)
struct MaiAreaComponent_GetAreaShape final
{
public:
	struct FVector                                Extents;                                           // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaiShapeType                                 ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiAreaComponent_GetAreaShape) == 0x000008, "Wrong alignment on MaiAreaComponent_GetAreaShape");
static_assert(sizeof(MaiAreaComponent_GetAreaShape) == 0x000020, "Wrong size on MaiAreaComponent_GetAreaShape");
static_assert(offsetof(MaiAreaComponent_GetAreaShape, Extents) == 0x000000, "Member 'MaiAreaComponent_GetAreaShape::Extents' has a wrong offset!");
static_assert(offsetof(MaiAreaComponent_GetAreaShape, ReturnValue) == 0x000018, "Member 'MaiAreaComponent_GetAreaShape::ReturnValue' has a wrong offset!");

// Function Mai.MaiAreaComponent.GetRandomPoint
// 0x0020 (0x0020 - 0x0000)
struct MaiAreaComponent_GetRandomPoint final
{
public:
	float                                         Extent;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAreaComponent_GetRandomPoint) == 0x000008, "Wrong alignment on MaiAreaComponent_GetRandomPoint");
static_assert(sizeof(MaiAreaComponent_GetRandomPoint) == 0x000020, "Wrong size on MaiAreaComponent_GetRandomPoint");
static_assert(offsetof(MaiAreaComponent_GetRandomPoint, Extent) == 0x000000, "Member 'MaiAreaComponent_GetRandomPoint::Extent' has a wrong offset!");
static_assert(offsetof(MaiAreaComponent_GetRandomPoint, ReturnValue) == 0x000008, "Member 'MaiAreaComponent_GetRandomPoint::ReturnValue' has a wrong offset!");

// Function Mai.MaiAreaComponent.IsInArea
// 0x0020 (0x0020 - 0x0000)
struct MaiAreaComponent_IsInArea final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Extent;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiAreaComponent_IsInArea) == 0x000008, "Wrong alignment on MaiAreaComponent_IsInArea");
static_assert(sizeof(MaiAreaComponent_IsInArea) == 0x000020, "Wrong size on MaiAreaComponent_IsInArea");
static_assert(offsetof(MaiAreaComponent_IsInArea, Location) == 0x000000, "Member 'MaiAreaComponent_IsInArea::Location' has a wrong offset!");
static_assert(offsetof(MaiAreaComponent_IsInArea, Extent) == 0x000018, "Member 'MaiAreaComponent_IsInArea::Extent' has a wrong offset!");
static_assert(offsetof(MaiAreaComponent_IsInArea, ReturnValue) == 0x00001C, "Member 'MaiAreaComponent_IsInArea::ReturnValue' has a wrong offset!");

// Function Mai.MaiFlyingPoint.IsReachableFrom
// 0x0028 (0x0028 - 0x0000)
struct MaiFlyingPoint_IsReachableFrom final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMaiController*                         User;                                              // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFlyingPoint_IsReachableFrom) == 0x000008, "Wrong alignment on MaiFlyingPoint_IsReachableFrom");
static_assert(sizeof(MaiFlyingPoint_IsReachableFrom) == 0x000028, "Wrong size on MaiFlyingPoint_IsReachableFrom");
static_assert(offsetof(MaiFlyingPoint_IsReachableFrom, Location) == 0x000000, "Member 'MaiFlyingPoint_IsReachableFrom::Location' has a wrong offset!");
static_assert(offsetof(MaiFlyingPoint_IsReachableFrom, User) == 0x000018, "Member 'MaiFlyingPoint_IsReachableFrom::User' has a wrong offset!");
static_assert(offsetof(MaiFlyingPoint_IsReachableFrom, ReturnValue) == 0x000020, "Member 'MaiFlyingPoint_IsReachableFrom::ReturnValue' has a wrong offset!");

// Function Mai.MaiAttack.EndAttack
// 0x0001 (0x0001 - 0x0000)
struct MaiAttack_EndAttack final
{
public:
	bool                                          Abort;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttack_EndAttack) == 0x000001, "Wrong alignment on MaiAttack_EndAttack");
static_assert(sizeof(MaiAttack_EndAttack) == 0x000001, "Wrong size on MaiAttack_EndAttack");
static_assert(offsetof(MaiAttack_EndAttack, Abort) == 0x000000, "Member 'MaiAttack_EndAttack::Abort' has a wrong offset!");

// Function Mai.MaiAttack.EventAllowDodge
// 0x0008 (0x0008 - 0x0000)
struct MaiAttack_EventAllowDodge final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttack_EventAllowDodge) == 0x000008, "Wrong alignment on MaiAttack_EventAllowDodge");
static_assert(sizeof(MaiAttack_EventAllowDodge) == 0x000008, "Wrong size on MaiAttack_EventAllowDodge");
static_assert(offsetof(MaiAttack_EventAllowDodge, Owner) == 0x000000, "Member 'MaiAttack_EventAllowDodge::Owner' has a wrong offset!");

// Function Mai.MaiAttack.EventAttackHit
// 0x0008 (0x0008 - 0x0000)
struct MaiAttack_EventAttackHit final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttack_EventAttackHit) == 0x000008, "Wrong alignment on MaiAttack_EventAttackHit");
static_assert(sizeof(MaiAttack_EventAttackHit) == 0x000008, "Wrong size on MaiAttack_EventAttackHit");
static_assert(offsetof(MaiAttack_EventAttackHit, Owner) == 0x000000, "Member 'MaiAttack_EventAttackHit::Owner' has a wrong offset!");

// Function Mai.MaiAttack.EventAttackMiss
// 0x0008 (0x0008 - 0x0000)
struct MaiAttack_EventAttackMiss final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttack_EventAttackMiss) == 0x000008, "Wrong alignment on MaiAttack_EventAttackMiss");
static_assert(sizeof(MaiAttack_EventAttackMiss) == 0x000008, "Wrong size on MaiAttack_EventAttackMiss");
static_assert(offsetof(MaiAttack_EventAttackMiss, Owner) == 0x000000, "Member 'MaiAttack_EventAttackMiss::Owner' has a wrong offset!");

// Function Mai.MaiAttack.EventBeginAttack
// 0x0008 (0x0008 - 0x0000)
struct MaiAttack_EventBeginAttack final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttack_EventBeginAttack) == 0x000008, "Wrong alignment on MaiAttack_EventBeginAttack");
static_assert(sizeof(MaiAttack_EventBeginAttack) == 0x000008, "Wrong size on MaiAttack_EventBeginAttack");
static_assert(offsetof(MaiAttack_EventBeginAttack, Owner) == 0x000000, "Member 'MaiAttack_EventBeginAttack::Owner' has a wrong offset!");

// Function Mai.MaiAttack.EventEndBlow
// 0x0008 (0x0008 - 0x0000)
struct MaiAttack_EventEndBlow final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttack_EventEndBlow) == 0x000008, "Wrong alignment on MaiAttack_EventEndBlow");
static_assert(sizeof(MaiAttack_EventEndBlow) == 0x000008, "Wrong size on MaiAttack_EventEndBlow");
static_assert(offsetof(MaiAttack_EventEndBlow, Owner) == 0x000000, "Member 'MaiAttack_EventEndBlow::Owner' has a wrong offset!");

// Function Mai.MaiAttack.EventInitAttack
// 0x0008 (0x0008 - 0x0000)
struct MaiAttack_EventInitAttack final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttack_EventInitAttack) == 0x000008, "Wrong alignment on MaiAttack_EventInitAttack");
static_assert(sizeof(MaiAttack_EventInitAttack) == 0x000008, "Wrong size on MaiAttack_EventInitAttack");
static_assert(offsetof(MaiAttack_EventInitAttack, Owner) == 0x000000, "Member 'MaiAttack_EventInitAttack::Owner' has a wrong offset!");

// Function Mai.MaiAttack.EventStartBlow
// 0x0010 (0x0010 - 0x0000)
struct MaiAttack_EventStartBlow final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ImpactID;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiAttack_EventStartBlow) == 0x000008, "Wrong alignment on MaiAttack_EventStartBlow");
static_assert(sizeof(MaiAttack_EventStartBlow) == 0x000010, "Wrong size on MaiAttack_EventStartBlow");
static_assert(offsetof(MaiAttack_EventStartBlow, Owner) == 0x000000, "Member 'MaiAttack_EventStartBlow::Owner' has a wrong offset!");
static_assert(offsetof(MaiAttack_EventStartBlow, ImpactID) == 0x000008, "Member 'MaiAttack_EventStartBlow::ImpactID' has a wrong offset!");

// Function Mai.MaiAttack.EventStopAttack
// 0x0010 (0x0010 - 0x0000)
struct MaiAttack_EventStopAttack final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Aborted;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiAttack_EventStopAttack) == 0x000008, "Wrong alignment on MaiAttack_EventStopAttack");
static_assert(sizeof(MaiAttack_EventStopAttack) == 0x000010, "Wrong size on MaiAttack_EventStopAttack");
static_assert(offsetof(MaiAttack_EventStopAttack, Owner) == 0x000000, "Member 'MaiAttack_EventStopAttack::Owner' has a wrong offset!");
static_assert(offsetof(MaiAttack_EventStopAttack, Aborted) == 0x000008, "Member 'MaiAttack_EventStopAttack::Aborted' has a wrong offset!");

// Function Mai.MaiAttack.EventTickAttack
// 0x0010 (0x0010 - 0x0000)
struct MaiAttack_EventTickAttack final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaSeconds;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiAttack_EventTickAttack) == 0x000008, "Wrong alignment on MaiAttack_EventTickAttack");
static_assert(sizeof(MaiAttack_EventTickAttack) == 0x000010, "Wrong size on MaiAttack_EventTickAttack");
static_assert(offsetof(MaiAttack_EventTickAttack, Owner) == 0x000000, "Member 'MaiAttack_EventTickAttack::Owner' has a wrong offset!");
static_assert(offsetof(MaiAttack_EventTickAttack, DeltaSeconds) == 0x000008, "Member 'MaiAttack_EventTickAttack::DeltaSeconds' has a wrong offset!");

// Function Mai.MaiAttack.LoadRowHandle
// 0x0010 (0x0010 - 0x0000)
struct MaiAttack_LoadRowHandle final
{
public:
	struct FDataTableRowHandle                    AttackRow;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttack_LoadRowHandle) == 0x000008, "Wrong alignment on MaiAttack_LoadRowHandle");
static_assert(sizeof(MaiAttack_LoadRowHandle) == 0x000010, "Wrong size on MaiAttack_LoadRowHandle");
static_assert(offsetof(MaiAttack_LoadRowHandle, AttackRow) == 0x000000, "Member 'MaiAttack_LoadRowHandle::AttackRow' has a wrong offset!");

// Function Mai.MaiAttack.SetAllowDodgeReaction
// 0x0001 (0x0001 - 0x0000)
struct MaiAttack_SetAllowDodgeReaction final
{
public:
	bool                                          Allow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttack_SetAllowDodgeReaction) == 0x000001, "Wrong alignment on MaiAttack_SetAllowDodgeReaction");
static_assert(sizeof(MaiAttack_SetAllowDodgeReaction) == 0x000001, "Wrong size on MaiAttack_SetAllowDodgeReaction");
static_assert(offsetof(MaiAttack_SetAllowDodgeReaction, Allow) == 0x000000, "Member 'MaiAttack_SetAllowDodgeReaction::Allow' has a wrong offset!");

// Function Mai.MaiAttack.SetAttackCone
// 0x0008 (0x0008 - 0x0000)
struct MaiAttack_SetAttackCone final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dir;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttack_SetAttackCone) == 0x000004, "Wrong alignment on MaiAttack_SetAttackCone");
static_assert(sizeof(MaiAttack_SetAttackCone) == 0x000008, "Wrong size on MaiAttack_SetAttackCone");
static_assert(offsetof(MaiAttack_SetAttackCone, Angle) == 0x000000, "Member 'MaiAttack_SetAttackCone::Angle' has a wrong offset!");
static_assert(offsetof(MaiAttack_SetAttackCone, Dir) == 0x000004, "Member 'MaiAttack_SetAttackCone::Dir' has a wrong offset!");

// Function Mai.MaiAttack.SetAttackRange
// 0x0008 (0x0008 - 0x0000)
struct MaiAttack_SetAttackRange final
{
public:
	float                                         Min;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttack_SetAttackRange) == 0x000004, "Wrong alignment on MaiAttack_SetAttackRange");
static_assert(sizeof(MaiAttack_SetAttackRange) == 0x000008, "Wrong size on MaiAttack_SetAttackRange");
static_assert(offsetof(MaiAttack_SetAttackRange, Min) == 0x000000, "Member 'MaiAttack_SetAttackRange::Min' has a wrong offset!");
static_assert(offsetof(MaiAttack_SetAttackRange, Max) == 0x000004, "Member 'MaiAttack_SetAttackRange::Max' has a wrong offset!");

// Function Mai.MaiAttack.SetBehavior
// 0x0018 (0x0018 - 0x0000)
struct MaiAttack_SetBehavior final
{
public:
	class UBehaviorTree*                          Behavior;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTag>                   AnimTags;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttack_SetBehavior) == 0x000008, "Wrong alignment on MaiAttack_SetBehavior");
static_assert(sizeof(MaiAttack_SetBehavior) == 0x000018, "Wrong size on MaiAttack_SetBehavior");
static_assert(offsetof(MaiAttack_SetBehavior, Behavior) == 0x000000, "Member 'MaiAttack_SetBehavior::Behavior' has a wrong offset!");
static_assert(offsetof(MaiAttack_SetBehavior, AnimTags) == 0x000008, "Member 'MaiAttack_SetBehavior::AnimTags' has a wrong offset!");

// Function Mai.MaiAttack.SetCooldown
// 0x0008 (0x0008 - 0x0000)
struct MaiAttack_SetCooldown final
{
public:
	float                                         Min;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttack_SetCooldown) == 0x000004, "Wrong alignment on MaiAttack_SetCooldown");
static_assert(sizeof(MaiAttack_SetCooldown) == 0x000008, "Wrong size on MaiAttack_SetCooldown");
static_assert(offsetof(MaiAttack_SetCooldown, Min) == 0x000000, "Member 'MaiAttack_SetCooldown::Min' has a wrong offset!");
static_assert(offsetof(MaiAttack_SetCooldown, Max) == 0x000004, "Member 'MaiAttack_SetCooldown::Max' has a wrong offset!");

// Function Mai.MaiAttack.SetDamage
// 0x0010 (0x0010 - 0x0000)
struct MaiAttack_SetDamage final
{
public:
	TSubclassOf<class UDamageType>                DamageType;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Min;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max;                                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttack_SetDamage) == 0x000008, "Wrong alignment on MaiAttack_SetDamage");
static_assert(sizeof(MaiAttack_SetDamage) == 0x000010, "Wrong size on MaiAttack_SetDamage");
static_assert(offsetof(MaiAttack_SetDamage, DamageType) == 0x000000, "Member 'MaiAttack_SetDamage::DamageType' has a wrong offset!");
static_assert(offsetof(MaiAttack_SetDamage, Min) == 0x000008, "Member 'MaiAttack_SetDamage::Min' has a wrong offset!");
static_assert(offsetof(MaiAttack_SetDamage, Max) == 0x00000C, "Member 'MaiAttack_SetDamage::Max' has a wrong offset!");

// Function Mai.MaiAttack.SetFocus
// 0x0008 (0x0008 - 0x0000)
struct MaiAttack_SetFocus final
{
public:
	EMaiAttackFocus                               Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Charging;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttack_SetFocus) == 0x000004, "Wrong alignment on MaiAttack_SetFocus");
static_assert(sizeof(MaiAttack_SetFocus) == 0x000008, "Wrong size on MaiAttack_SetFocus");
static_assert(offsetof(MaiAttack_SetFocus, Mode) == 0x000000, "Member 'MaiAttack_SetFocus::Mode' has a wrong offset!");
static_assert(offsetof(MaiAttack_SetFocus, Charging) == 0x000004, "Member 'MaiAttack_SetFocus::Charging' has a wrong offset!");

// Function Mai.MaiAttack.SetLogicalImpact
// 0x0010 (0x0010 - 0x0000)
struct MaiAttack_SetLogicalImpact final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Range;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dir;                                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttack_SetLogicalImpact) == 0x000004, "Wrong alignment on MaiAttack_SetLogicalImpact");
static_assert(sizeof(MaiAttack_SetLogicalImpact) == 0x000010, "Wrong size on MaiAttack_SetLogicalImpact");
static_assert(offsetof(MaiAttack_SetLogicalImpact, Enable) == 0x000000, "Member 'MaiAttack_SetLogicalImpact::Enable' has a wrong offset!");
static_assert(offsetof(MaiAttack_SetLogicalImpact, Range) == 0x000004, "Member 'MaiAttack_SetLogicalImpact::Range' has a wrong offset!");
static_assert(offsetof(MaiAttack_SetLogicalImpact, Angle) == 0x000008, "Member 'MaiAttack_SetLogicalImpact::Angle' has a wrong offset!");
static_assert(offsetof(MaiAttack_SetLogicalImpact, Dir) == 0x00000C, "Member 'MaiAttack_SetLogicalImpact::Dir' has a wrong offset!");

// Function Mai.MaiAttack.SetSnapMode
// 0x0001 (0x0001 - 0x0000)
struct MaiAttack_SetSnapMode final
{
public:
	EMaiAttackSnap                                Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttack_SetSnapMode) == 0x000001, "Wrong alignment on MaiAttack_SetSnapMode");
static_assert(sizeof(MaiAttack_SetSnapMode) == 0x000001, "Wrong size on MaiAttack_SetSnapMode");
static_assert(offsetof(MaiAttack_SetSnapMode, Mode) == 0x000000, "Member 'MaiAttack_SetSnapMode::Mode' has a wrong offset!");

// Function Mai.MaiAttack.GetAllowDodgeReaction
// 0x0001 (0x0001 - 0x0000)
struct MaiAttack_GetAllowDodgeReaction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttack_GetAllowDodgeReaction) == 0x000001, "Wrong alignment on MaiAttack_GetAllowDodgeReaction");
static_assert(sizeof(MaiAttack_GetAllowDodgeReaction) == 0x000001, "Wrong size on MaiAttack_GetAllowDodgeReaction");
static_assert(offsetof(MaiAttack_GetAllowDodgeReaction, ReturnValue) == 0x000000, "Member 'MaiAttack_GetAllowDodgeReaction::ReturnValue' has a wrong offset!");

// Function Mai.MaiAttack.GetAttackerComponent
// 0x0008 (0x0008 - 0x0000)
struct MaiAttack_GetAttackerComponent final
{
public:
	class UMaiAttackerComponent*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttack_GetAttackerComponent) == 0x000008, "Wrong alignment on MaiAttack_GetAttackerComponent");
static_assert(sizeof(MaiAttack_GetAttackerComponent) == 0x000008, "Wrong size on MaiAttack_GetAttackerComponent");
static_assert(offsetof(MaiAttack_GetAttackerComponent, ReturnValue) == 0x000000, "Member 'MaiAttack_GetAttackerComponent::ReturnValue' has a wrong offset!");

// Function Mai.MaiAttack.GetAttackRange
// 0x0008 (0x0008 - 0x0000)
struct MaiAttack_GetAttackRange final
{
public:
	float                                         Min;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttack_GetAttackRange) == 0x000004, "Wrong alignment on MaiAttack_GetAttackRange");
static_assert(sizeof(MaiAttack_GetAttackRange) == 0x000008, "Wrong size on MaiAttack_GetAttackRange");
static_assert(offsetof(MaiAttack_GetAttackRange, Min) == 0x000000, "Member 'MaiAttack_GetAttackRange::Min' has a wrong offset!");
static_assert(offsetof(MaiAttack_GetAttackRange, Max) == 0x000004, "Member 'MaiAttack_GetAttackRange::Max' has a wrong offset!");

// Function Mai.MaiAttack.GetAttackTarget
// 0x0008 (0x0008 - 0x0000)
struct MaiAttack_GetAttackTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttack_GetAttackTarget) == 0x000008, "Wrong alignment on MaiAttack_GetAttackTarget");
static_assert(sizeof(MaiAttack_GetAttackTarget) == 0x000008, "Wrong size on MaiAttack_GetAttackTarget");
static_assert(offsetof(MaiAttack_GetAttackTarget, ReturnValue) == 0x000000, "Member 'MaiAttack_GetAttackTarget::ReturnValue' has a wrong offset!");

// Function Mai.MaiAttack.GetDamage
// 0x0008 (0x0008 - 0x0000)
struct MaiAttack_GetDamage final
{
public:
	int32                                         ImpactID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttack_GetDamage) == 0x000004, "Wrong alignment on MaiAttack_GetDamage");
static_assert(sizeof(MaiAttack_GetDamage) == 0x000008, "Wrong size on MaiAttack_GetDamage");
static_assert(offsetof(MaiAttack_GetDamage, ImpactID) == 0x000000, "Member 'MaiAttack_GetDamage::ImpactID' has a wrong offset!");
static_assert(offsetof(MaiAttack_GetDamage, ReturnValue) == 0x000004, "Member 'MaiAttack_GetDamage::ReturnValue' has a wrong offset!");

// Function Mai.MaiAttack.GetDamageType
// 0x0010 (0x0010 - 0x0000)
struct MaiAttack_GetDamageType final
{
public:
	int32                                         ImpactID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDamageType>                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttack_GetDamageType) == 0x000008, "Wrong alignment on MaiAttack_GetDamageType");
static_assert(sizeof(MaiAttack_GetDamageType) == 0x000010, "Wrong size on MaiAttack_GetDamageType");
static_assert(offsetof(MaiAttack_GetDamageType, ImpactID) == 0x000000, "Member 'MaiAttack_GetDamageType::ImpactID' has a wrong offset!");
static_assert(offsetof(MaiAttack_GetDamageType, ReturnValue) == 0x000008, "Member 'MaiAttack_GetDamageType::ReturnValue' has a wrong offset!");

// Function Mai.MaiAttack.GetImpactAngle
// 0x0008 (0x0008 - 0x0000)
struct MaiAttack_GetImpactAngle final
{
public:
	int32                                         ImpactID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttack_GetImpactAngle) == 0x000004, "Wrong alignment on MaiAttack_GetImpactAngle");
static_assert(sizeof(MaiAttack_GetImpactAngle) == 0x000008, "Wrong size on MaiAttack_GetImpactAngle");
static_assert(offsetof(MaiAttack_GetImpactAngle, ImpactID) == 0x000000, "Member 'MaiAttack_GetImpactAngle::ImpactID' has a wrong offset!");
static_assert(offsetof(MaiAttack_GetImpactAngle, ReturnValue) == 0x000004, "Member 'MaiAttack_GetImpactAngle::ReturnValue' has a wrong offset!");

// Function Mai.MaiAttack.GetImpactDir
// 0x0008 (0x0008 - 0x0000)
struct MaiAttack_GetImpactDir final
{
public:
	int32                                         ImpactID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttack_GetImpactDir) == 0x000004, "Wrong alignment on MaiAttack_GetImpactDir");
static_assert(sizeof(MaiAttack_GetImpactDir) == 0x000008, "Wrong size on MaiAttack_GetImpactDir");
static_assert(offsetof(MaiAttack_GetImpactDir, ImpactID) == 0x000000, "Member 'MaiAttack_GetImpactDir::ImpactID' has a wrong offset!");
static_assert(offsetof(MaiAttack_GetImpactDir, ReturnValue) == 0x000004, "Member 'MaiAttack_GetImpactDir::ReturnValue' has a wrong offset!");

// Function Mai.MaiAttack.GetImpactRange
// 0x0008 (0x0008 - 0x0000)
struct MaiAttack_GetImpactRange final
{
public:
	int32                                         ImpactID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttack_GetImpactRange) == 0x000004, "Wrong alignment on MaiAttack_GetImpactRange");
static_assert(sizeof(MaiAttack_GetImpactRange) == 0x000008, "Wrong size on MaiAttack_GetImpactRange");
static_assert(offsetof(MaiAttack_GetImpactRange, ImpactID) == 0x000000, "Member 'MaiAttack_GetImpactRange::ImpactID' has a wrong offset!");
static_assert(offsetof(MaiAttack_GetImpactRange, ReturnValue) == 0x000004, "Member 'MaiAttack_GetImpactRange::ReturnValue' has a wrong offset!");

// Function Mai.MaiAttack.GetOwnerActor
// 0x0008 (0x0008 - 0x0000)
struct MaiAttack_GetOwnerActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttack_GetOwnerActor) == 0x000008, "Wrong alignment on MaiAttack_GetOwnerActor");
static_assert(sizeof(MaiAttack_GetOwnerActor) == 0x000008, "Wrong size on MaiAttack_GetOwnerActor");
static_assert(offsetof(MaiAttack_GetOwnerActor, ReturnValue) == 0x000000, "Member 'MaiAttack_GetOwnerActor::ReturnValue' has a wrong offset!");

// Function Mai.MaiAttack.GetOwnerAI
// 0x0008 (0x0008 - 0x0000)
struct MaiAttack_GetOwnerAI final
{
public:
	class AAIController*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttack_GetOwnerAI) == 0x000008, "Wrong alignment on MaiAttack_GetOwnerAI");
static_assert(sizeof(MaiAttack_GetOwnerAI) == 0x000008, "Wrong size on MaiAttack_GetOwnerAI");
static_assert(offsetof(MaiAttack_GetOwnerAI, ReturnValue) == 0x000000, "Member 'MaiAttack_GetOwnerAI::ReturnValue' has a wrong offset!");

// Function Mai.MaiAttack.GetOwnerCH
// 0x0008 (0x0008 - 0x0000)
struct MaiAttack_GetOwnerCH final
{
public:
	class ACharacter*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttack_GetOwnerCH) == 0x000008, "Wrong alignment on MaiAttack_GetOwnerCH");
static_assert(sizeof(MaiAttack_GetOwnerCH) == 0x000008, "Wrong size on MaiAttack_GetOwnerCH");
static_assert(offsetof(MaiAttack_GetOwnerCH, ReturnValue) == 0x000000, "Member 'MaiAttack_GetOwnerCH::ReturnValue' has a wrong offset!");

// Function Mai.MaiAttack.IsFocusing
// 0x0001 (0x0001 - 0x0000)
struct MaiAttack_IsFocusing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttack_IsFocusing) == 0x000001, "Wrong alignment on MaiAttack_IsFocusing");
static_assert(sizeof(MaiAttack_IsFocusing) == 0x000001, "Wrong size on MaiAttack_IsFocusing");
static_assert(offsetof(MaiAttack_IsFocusing, ReturnValue) == 0x000000, "Member 'MaiAttack_IsFocusing::ReturnValue' has a wrong offset!");

// Function Mai.MaiAttack.IsSnapping
// 0x0001 (0x0001 - 0x0000)
struct MaiAttack_IsSnapping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttack_IsSnapping) == 0x000001, "Wrong alignment on MaiAttack_IsSnapping");
static_assert(sizeof(MaiAttack_IsSnapping) == 0x000001, "Wrong size on MaiAttack_IsSnapping");
static_assert(offsetof(MaiAttack_IsSnapping, ReturnValue) == 0x000000, "Member 'MaiAttack_IsSnapping::ReturnValue' has a wrong offset!");

// Function Mai.MaiLightObserver.GetIsLit
// 0x0001 (0x0001 - 0x0000)
struct MaiLightObserver_GetIsLit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiLightObserver_GetIsLit) == 0x000001, "Wrong alignment on MaiLightObserver_GetIsLit");
static_assert(sizeof(MaiLightObserver_GetIsLit) == 0x000001, "Wrong size on MaiLightObserver_GetIsLit");
static_assert(offsetof(MaiLightObserver_GetIsLit, ReturnValue) == 0x000000, "Member 'MaiLightObserver_GetIsLit::ReturnValue' has a wrong offset!");

// Function Mai.MaiLightObserver.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct MaiLightObserver_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiLightObserver_IsEnabled) == 0x000001, "Wrong alignment on MaiLightObserver_IsEnabled");
static_assert(sizeof(MaiLightObserver_IsEnabled) == 0x000001, "Wrong size on MaiLightObserver_IsEnabled");
static_assert(offsetof(MaiLightObserver_IsEnabled, ReturnValue) == 0x000000, "Member 'MaiLightObserver_IsEnabled::ReturnValue' has a wrong offset!");

// Function Mai.MaiScriptAttack.OnOwnerMontageEnds
// 0x0010 (0x0010 - 0x0000)
struct MaiScriptAttack_OnOwnerMontageEnds final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Interrupted;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiScriptAttack_OnOwnerMontageEnds) == 0x000008, "Wrong alignment on MaiScriptAttack_OnOwnerMontageEnds");
static_assert(sizeof(MaiScriptAttack_OnOwnerMontageEnds) == 0x000010, "Wrong size on MaiScriptAttack_OnOwnerMontageEnds");
static_assert(offsetof(MaiScriptAttack_OnOwnerMontageEnds, Montage) == 0x000000, "Member 'MaiScriptAttack_OnOwnerMontageEnds::Montage' has a wrong offset!");
static_assert(offsetof(MaiScriptAttack_OnOwnerMontageEnds, Interrupted) == 0x000008, "Member 'MaiScriptAttack_OnOwnerMontageEnds::Interrupted' has a wrong offset!");

// Function Mai.MaiScriptAttack.PlayOwnerMontage
// 0x0008 (0x0008 - 0x0000)
struct MaiScriptAttack_PlayOwnerMontage final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiScriptAttack_PlayOwnerMontage) == 0x000008, "Wrong alignment on MaiScriptAttack_PlayOwnerMontage");
static_assert(sizeof(MaiScriptAttack_PlayOwnerMontage) == 0x000008, "Wrong size on MaiScriptAttack_PlayOwnerMontage");
static_assert(offsetof(MaiScriptAttack_PlayOwnerMontage, ReturnValue) == 0x000000, "Member 'MaiScriptAttack_PlayOwnerMontage::ReturnValue' has a wrong offset!");

// Function Mai.MaiScriptAttack.SelectBestAnim
// 0x0018 (0x0018 - 0x0000)
struct MaiScriptAttack_SelectBestAnim final
{
public:
	struct FVector                                Forward;                                           // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiScriptAttack_SelectBestAnim) == 0x000008, "Wrong alignment on MaiScriptAttack_SelectBestAnim");
static_assert(sizeof(MaiScriptAttack_SelectBestAnim) == 0x000018, "Wrong size on MaiScriptAttack_SelectBestAnim");
static_assert(offsetof(MaiScriptAttack_SelectBestAnim, Forward) == 0x000000, "Member 'MaiScriptAttack_SelectBestAnim::Forward' has a wrong offset!");

// Function Mai.MaiScriptAttack.SetOwnerMontage
// 0x0008 (0x0008 - 0x0000)
struct MaiScriptAttack_SetOwnerMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiScriptAttack_SetOwnerMontage) == 0x000008, "Wrong alignment on MaiScriptAttack_SetOwnerMontage");
static_assert(sizeof(MaiScriptAttack_SetOwnerMontage) == 0x000008, "Wrong size on MaiScriptAttack_SetOwnerMontage");
static_assert(offsetof(MaiScriptAttack_SetOwnerMontage, Montage) == 0x000000, "Member 'MaiScriptAttack_SetOwnerMontage::Montage' has a wrong offset!");

// Function Mai.MaiScriptAttack.SetSliding
// 0x0010 (0x0010 - 0x0000)
struct MaiScriptAttack_SetSliding final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Curve;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiScriptAttack_SetSliding) == 0x000008, "Wrong alignment on MaiScriptAttack_SetSliding");
static_assert(sizeof(MaiScriptAttack_SetSliding) == 0x000010, "Wrong size on MaiScriptAttack_SetSliding");
static_assert(offsetof(MaiScriptAttack_SetSliding, Distance) == 0x000000, "Member 'MaiScriptAttack_SetSliding::Distance' has a wrong offset!");
static_assert(offsetof(MaiScriptAttack_SetSliding, Curve) == 0x000008, "Member 'MaiScriptAttack_SetSliding::Curve' has a wrong offset!");

// Function Mai.MaiAttackerComponent.getAttacker
// 0x0010 (0x0010 - 0x0000)
struct MaiAttackerComponent_GetAttacker final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaiAttackerComponent*                  ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttackerComponent_GetAttacker) == 0x000008, "Wrong alignment on MaiAttackerComponent_GetAttacker");
static_assert(sizeof(MaiAttackerComponent_GetAttacker) == 0x000010, "Wrong size on MaiAttackerComponent_GetAttacker");
static_assert(offsetof(MaiAttackerComponent_GetAttacker, Actor) == 0x000000, "Member 'MaiAttackerComponent_GetAttacker::Actor' has a wrong offset!");
static_assert(offsetof(MaiAttackerComponent_GetAttacker, ReturnValue) == 0x000008, "Member 'MaiAttackerComponent_GetAttacker::ReturnValue' has a wrong offset!");

// Function Mai.MaiAttackerComponent.ApplyDamage
// 0x0100 (0x0100 - 0x0000)
struct MaiAttackerComponent_ApplyDamage final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0008(0x00E8)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                DamageType;                                        // 0x00F0(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x00F8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SingleDamage;                                      // 0x00FC(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00FD(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FE[0x2];                                       // 0x00FE(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiAttackerComponent_ApplyDamage) == 0x000008, "Wrong alignment on MaiAttackerComponent_ApplyDamage");
static_assert(sizeof(MaiAttackerComponent_ApplyDamage) == 0x000100, "Wrong size on MaiAttackerComponent_ApplyDamage");
static_assert(offsetof(MaiAttackerComponent_ApplyDamage, Enemy) == 0x000000, "Member 'MaiAttackerComponent_ApplyDamage::Enemy' has a wrong offset!");
static_assert(offsetof(MaiAttackerComponent_ApplyDamage, Hit) == 0x000008, "Member 'MaiAttackerComponent_ApplyDamage::Hit' has a wrong offset!");
static_assert(offsetof(MaiAttackerComponent_ApplyDamage, DamageType) == 0x0000F0, "Member 'MaiAttackerComponent_ApplyDamage::DamageType' has a wrong offset!");
static_assert(offsetof(MaiAttackerComponent_ApplyDamage, Damage) == 0x0000F8, "Member 'MaiAttackerComponent_ApplyDamage::Damage' has a wrong offset!");
static_assert(offsetof(MaiAttackerComponent_ApplyDamage, SingleDamage) == 0x0000FC, "Member 'MaiAttackerComponent_ApplyDamage::SingleDamage' has a wrong offset!");
static_assert(offsetof(MaiAttackerComponent_ApplyDamage, ReturnValue) == 0x0000FD, "Member 'MaiAttackerComponent_ApplyDamage::ReturnValue' has a wrong offset!");

// Function Mai.MaiAttackerComponent.ChangeAttacksBT
// 0x0008 (0x0008 - 0x0000)
struct MaiAttackerComponent_ChangeAttacksBT final
{
public:
	class UBehaviorTree*                          AttacksTree;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttackerComponent_ChangeAttacksBT) == 0x000008, "Wrong alignment on MaiAttackerComponent_ChangeAttacksBT");
static_assert(sizeof(MaiAttackerComponent_ChangeAttacksBT) == 0x000008, "Wrong size on MaiAttackerComponent_ChangeAttacksBT");
static_assert(offsetof(MaiAttackerComponent_ChangeAttacksBT, AttacksTree) == 0x000000, "Member 'MaiAttackerComponent_ChangeAttacksBT::AttacksTree' has a wrong offset!");

// Function Mai.MaiAttackerComponent.CleanUpAttack
// 0x0008 (0x0008 - 0x0000)
struct MaiAttackerComponent_CleanUpAttack final
{
public:
	class FName                                   AttackName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttackerComponent_CleanUpAttack) == 0x000004, "Wrong alignment on MaiAttackerComponent_CleanUpAttack");
static_assert(sizeof(MaiAttackerComponent_CleanUpAttack) == 0x000008, "Wrong size on MaiAttackerComponent_CleanUpAttack");
static_assert(offsetof(MaiAttackerComponent_CleanUpAttack, AttackName) == 0x000000, "Member 'MaiAttackerComponent_CleanUpAttack::AttackName' has a wrong offset!");

// Function Mai.MaiAttackerComponent.DebugAttack
// 0x0008 (0x0008 - 0x0000)
struct MaiAttackerComponent_DebugAttack final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttackerComponent_DebugAttack) == 0x000008, "Wrong alignment on MaiAttackerComponent_DebugAttack");
static_assert(sizeof(MaiAttackerComponent_DebugAttack) == 0x000008, "Wrong size on MaiAttackerComponent_DebugAttack");
static_assert(offsetof(MaiAttackerComponent_DebugAttack, Enemy) == 0x000000, "Member 'MaiAttackerComponent_DebugAttack::Enemy' has a wrong offset!");

// Function Mai.MaiAttackerComponent.EnableChaseMode
// 0x0001 (0x0001 - 0x0000)
struct MaiAttackerComponent_EnableChaseMode final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttackerComponent_EnableChaseMode) == 0x000001, "Wrong alignment on MaiAttackerComponent_EnableChaseMode");
static_assert(sizeof(MaiAttackerComponent_EnableChaseMode) == 0x000001, "Wrong size on MaiAttackerComponent_EnableChaseMode");
static_assert(offsetof(MaiAttackerComponent_EnableChaseMode, Enable) == 0x000000, "Member 'MaiAttackerComponent_EnableChaseMode::Enable' has a wrong offset!");

// Function Mai.MaiAttackerComponent.EnableFocusOnEnemy
// 0x0001 (0x0001 - 0x0000)
struct MaiAttackerComponent_EnableFocusOnEnemy final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttackerComponent_EnableFocusOnEnemy) == 0x000001, "Wrong alignment on MaiAttackerComponent_EnableFocusOnEnemy");
static_assert(sizeof(MaiAttackerComponent_EnableFocusOnEnemy) == 0x000001, "Wrong size on MaiAttackerComponent_EnableFocusOnEnemy");
static_assert(offsetof(MaiAttackerComponent_EnableFocusOnEnemy, Enable) == 0x000000, "Member 'MaiAttackerComponent_EnableFocusOnEnemy::Enable' has a wrong offset!");

// Function Mai.MaiAttackerComponent.EndBlow
// 0x0004 (0x0004 - 0x0000)
struct MaiAttackerComponent_EndBlow final
{
public:
	int32                                         ImpactID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttackerComponent_EndBlow) == 0x000004, "Wrong alignment on MaiAttackerComponent_EndBlow");
static_assert(sizeof(MaiAttackerComponent_EndBlow) == 0x000004, "Wrong size on MaiAttackerComponent_EndBlow");
static_assert(offsetof(MaiAttackerComponent_EndBlow, ImpactID) == 0x000000, "Member 'MaiAttackerComponent_EndBlow::ImpactID' has a wrong offset!");

// Function Mai.MaiAttackerComponent.ForceMiss
// 0x0001 (0x0001 - 0x0000)
struct MaiAttackerComponent_ForceMiss final
{
public:
	bool                                          Miss;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttackerComponent_ForceMiss) == 0x000001, "Wrong alignment on MaiAttackerComponent_ForceMiss");
static_assert(sizeof(MaiAttackerComponent_ForceMiss) == 0x000001, "Wrong size on MaiAttackerComponent_ForceMiss");
static_assert(offsetof(MaiAttackerComponent_ForceMiss, Miss) == 0x000000, "Member 'MaiAttackerComponent_ForceMiss::Miss' has a wrong offset!");

// Function Mai.MaiAttackerComponent.ForceNextAttack
// 0x0008 (0x0008 - 0x0000)
struct MaiAttackerComponent_ForceNextAttack final
{
public:
	class FName                                   AttackName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttackerComponent_ForceNextAttack) == 0x000004, "Wrong alignment on MaiAttackerComponent_ForceNextAttack");
static_assert(sizeof(MaiAttackerComponent_ForceNextAttack) == 0x000008, "Wrong size on MaiAttackerComponent_ForceNextAttack");
static_assert(offsetof(MaiAttackerComponent_ForceNextAttack, AttackName) == 0x000000, "Member 'MaiAttackerComponent_ForceNextAttack::AttackName' has a wrong offset!");

// Function Mai.MaiAttackerComponent.InjectBT
// 0x0001 (0x0001 - 0x0000)
struct MaiAttackerComponent_InjectBT final
{
public:
	bool                                          Inject;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttackerComponent_InjectBT) == 0x000001, "Wrong alignment on MaiAttackerComponent_InjectBT");
static_assert(sizeof(MaiAttackerComponent_InjectBT) == 0x000001, "Wrong size on MaiAttackerComponent_InjectBT");
static_assert(offsetof(MaiAttackerComponent_InjectBT, Inject) == 0x000000, "Member 'MaiAttackerComponent_InjectBT::Inject' has a wrong offset!");

// Function Mai.MaiAttackerComponent.RunPureAttack
// 0x0010 (0x0010 - 0x0000)
struct MaiAttackerComponent_RunPureAttack final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttackName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttackerComponent_RunPureAttack) == 0x000008, "Wrong alignment on MaiAttackerComponent_RunPureAttack");
static_assert(sizeof(MaiAttackerComponent_RunPureAttack) == 0x000010, "Wrong size on MaiAttackerComponent_RunPureAttack");
static_assert(offsetof(MaiAttackerComponent_RunPureAttack, Enemy) == 0x000000, "Member 'MaiAttackerComponent_RunPureAttack::Enemy' has a wrong offset!");
static_assert(offsetof(MaiAttackerComponent_RunPureAttack, AttackName) == 0x000008, "Member 'MaiAttackerComponent_RunPureAttack::AttackName' has a wrong offset!");

// Function Mai.MaiAttackerComponent.SelectAttack
// 0x0010 (0x0010 - 0x0000)
struct MaiAttackerComponent_SelectAttack final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttackName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttackerComponent_SelectAttack) == 0x000008, "Wrong alignment on MaiAttackerComponent_SelectAttack");
static_assert(sizeof(MaiAttackerComponent_SelectAttack) == 0x000010, "Wrong size on MaiAttackerComponent_SelectAttack");
static_assert(offsetof(MaiAttackerComponent_SelectAttack, Enemy) == 0x000000, "Member 'MaiAttackerComponent_SelectAttack::Enemy' has a wrong offset!");
static_assert(offsetof(MaiAttackerComponent_SelectAttack, AttackName) == 0x000008, "Member 'MaiAttackerComponent_SelectAttack::AttackName' has a wrong offset!");

// Function Mai.MaiAttackerComponent.StartBlow
// 0x0004 (0x0004 - 0x0000)
struct MaiAttackerComponent_StartBlow final
{
public:
	int32                                         ImpactID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttackerComponent_StartBlow) == 0x000004, "Wrong alignment on MaiAttackerComponent_StartBlow");
static_assert(sizeof(MaiAttackerComponent_StartBlow) == 0x000004, "Wrong size on MaiAttackerComponent_StartBlow");
static_assert(offsetof(MaiAttackerComponent_StartBlow, ImpactID) == 0x000000, "Member 'MaiAttackerComponent_StartBlow::ImpactID' has a wrong offset!");

// Function Mai.MaiAttackerComponent.StopAttack
// 0x000C (0x000C - 0x0000)
struct MaiAttackerComponent_StopAttack final
{
public:
	bool                                          Aborted;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttackName;                                        // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttackerComponent_StopAttack) == 0x000004, "Wrong alignment on MaiAttackerComponent_StopAttack");
static_assert(sizeof(MaiAttackerComponent_StopAttack) == 0x00000C, "Wrong size on MaiAttackerComponent_StopAttack");
static_assert(offsetof(MaiAttackerComponent_StopAttack, Aborted) == 0x000000, "Member 'MaiAttackerComponent_StopAttack::Aborted' has a wrong offset!");
static_assert(offsetof(MaiAttackerComponent_StopAttack, AttackName) == 0x000004, "Member 'MaiAttackerComponent_StopAttack::AttackName' has a wrong offset!");

// Function Mai.MaiAttackerComponent.TryApplyLogicalDamage
// 0x0018 (0x0018 - 0x0000)
struct MaiAttackerComponent_TryApplyLogicalDamage final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ImpactID;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiAttackerComponent_TryApplyLogicalDamage) == 0x000008, "Wrong alignment on MaiAttackerComponent_TryApplyLogicalDamage");
static_assert(sizeof(MaiAttackerComponent_TryApplyLogicalDamage) == 0x000018, "Wrong size on MaiAttackerComponent_TryApplyLogicalDamage");
static_assert(offsetof(MaiAttackerComponent_TryApplyLogicalDamage, Enemy) == 0x000000, "Member 'MaiAttackerComponent_TryApplyLogicalDamage::Enemy' has a wrong offset!");
static_assert(offsetof(MaiAttackerComponent_TryApplyLogicalDamage, Damage) == 0x000008, "Member 'MaiAttackerComponent_TryApplyLogicalDamage::Damage' has a wrong offset!");
static_assert(offsetof(MaiAttackerComponent_TryApplyLogicalDamage, ImpactID) == 0x00000C, "Member 'MaiAttackerComponent_TryApplyLogicalDamage::ImpactID' has a wrong offset!");
static_assert(offsetof(MaiAttackerComponent_TryApplyLogicalDamage, ReturnValue) == 0x000010, "Member 'MaiAttackerComponent_TryApplyLogicalDamage::ReturnValue' has a wrong offset!");

// Function Mai.MaiAttackerComponent.TryApplyPhysicalDamage
// 0x00F8 (0x00F8 - 0x0000)
struct MaiAttackerComponent_TryApplyPhysicalDamage final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0008(0x00E8)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiAttackerComponent_TryApplyPhysicalDamage) == 0x000008, "Wrong alignment on MaiAttackerComponent_TryApplyPhysicalDamage");
static_assert(sizeof(MaiAttackerComponent_TryApplyPhysicalDamage) == 0x0000F8, "Wrong size on MaiAttackerComponent_TryApplyPhysicalDamage");
static_assert(offsetof(MaiAttackerComponent_TryApplyPhysicalDamage, Enemy) == 0x000000, "Member 'MaiAttackerComponent_TryApplyPhysicalDamage::Enemy' has a wrong offset!");
static_assert(offsetof(MaiAttackerComponent_TryApplyPhysicalDamage, Hit) == 0x000008, "Member 'MaiAttackerComponent_TryApplyPhysicalDamage::Hit' has a wrong offset!");
static_assert(offsetof(MaiAttackerComponent_TryApplyPhysicalDamage, ReturnValue) == 0x0000F0, "Member 'MaiAttackerComponent_TryApplyPhysicalDamage::ReturnValue' has a wrong offset!");

// Function Mai.MaiAttackerComponent.FindBestAttack
// 0x0008 (0x0008 - 0x0000)
struct MaiAttackerComponent_FindBestAttack final
{
public:
	class UMaiAttack*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttackerComponent_FindBestAttack) == 0x000008, "Wrong alignment on MaiAttackerComponent_FindBestAttack");
static_assert(sizeof(MaiAttackerComponent_FindBestAttack) == 0x000008, "Wrong size on MaiAttackerComponent_FindBestAttack");
static_assert(offsetof(MaiAttackerComponent_FindBestAttack, ReturnValue) == 0x000000, "Member 'MaiAttackerComponent_FindBestAttack::ReturnValue' has a wrong offset!");

// Function Mai.MaiAttackerComponent.GetAttackRangeType
// 0x0018 (0x0018 - 0x0000)
struct MaiAttackerComponent_GetAttackRangeType final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttackName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaiAttackRange                               ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiAttackerComponent_GetAttackRangeType) == 0x000008, "Wrong alignment on MaiAttackerComponent_GetAttackRangeType");
static_assert(sizeof(MaiAttackerComponent_GetAttackRangeType) == 0x000018, "Wrong size on MaiAttackerComponent_GetAttackRangeType");
static_assert(offsetof(MaiAttackerComponent_GetAttackRangeType, Enemy) == 0x000000, "Member 'MaiAttackerComponent_GetAttackRangeType::Enemy' has a wrong offset!");
static_assert(offsetof(MaiAttackerComponent_GetAttackRangeType, AttackName) == 0x000008, "Member 'MaiAttackerComponent_GetAttackRangeType::AttackName' has a wrong offset!");
static_assert(offsetof(MaiAttackerComponent_GetAttackRangeType, ReturnValue) == 0x000010, "Member 'MaiAttackerComponent_GetAttackRangeType::ReturnValue' has a wrong offset!");

// Function Mai.MaiAttackerComponent.GetCurrentAttackTarget
// 0x0008 (0x0008 - 0x0000)
struct MaiAttackerComponent_GetCurrentAttackTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttackerComponent_GetCurrentAttackTarget) == 0x000008, "Wrong alignment on MaiAttackerComponent_GetCurrentAttackTarget");
static_assert(sizeof(MaiAttackerComponent_GetCurrentAttackTarget) == 0x000008, "Wrong size on MaiAttackerComponent_GetCurrentAttackTarget");
static_assert(offsetof(MaiAttackerComponent_GetCurrentAttackTarget, ReturnValue) == 0x000000, "Member 'MaiAttackerComponent_GetCurrentAttackTarget::ReturnValue' has a wrong offset!");

// Function Mai.MaiAttackerComponent.GetCurrentAttackTime
// 0x0004 (0x0004 - 0x0000)
struct MaiAttackerComponent_GetCurrentAttackTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttackerComponent_GetCurrentAttackTime) == 0x000004, "Wrong alignment on MaiAttackerComponent_GetCurrentAttackTime");
static_assert(sizeof(MaiAttackerComponent_GetCurrentAttackTime) == 0x000004, "Wrong size on MaiAttackerComponent_GetCurrentAttackTime");
static_assert(offsetof(MaiAttackerComponent_GetCurrentAttackTime, ReturnValue) == 0x000000, "Member 'MaiAttackerComponent_GetCurrentAttackTime::ReturnValue' has a wrong offset!");

// Function Mai.MaiAttackerComponent.HasAnyValidAttack
// 0x0010 (0x0010 - 0x0000)
struct MaiAttackerComponent_HasAnyValidAttack final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaiAttackRange                               Range;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckCone;                                         // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckToken;                                        // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000B(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiAttackerComponent_HasAnyValidAttack) == 0x000008, "Wrong alignment on MaiAttackerComponent_HasAnyValidAttack");
static_assert(sizeof(MaiAttackerComponent_HasAnyValidAttack) == 0x000010, "Wrong size on MaiAttackerComponent_HasAnyValidAttack");
static_assert(offsetof(MaiAttackerComponent_HasAnyValidAttack, Enemy) == 0x000000, "Member 'MaiAttackerComponent_HasAnyValidAttack::Enemy' has a wrong offset!");
static_assert(offsetof(MaiAttackerComponent_HasAnyValidAttack, Range) == 0x000008, "Member 'MaiAttackerComponent_HasAnyValidAttack::Range' has a wrong offset!");
static_assert(offsetof(MaiAttackerComponent_HasAnyValidAttack, CheckCone) == 0x000009, "Member 'MaiAttackerComponent_HasAnyValidAttack::CheckCone' has a wrong offset!");
static_assert(offsetof(MaiAttackerComponent_HasAnyValidAttack, CheckToken) == 0x00000A, "Member 'MaiAttackerComponent_HasAnyValidAttack::CheckToken' has a wrong offset!");
static_assert(offsetof(MaiAttackerComponent_HasAnyValidAttack, ReturnValue) == 0x00000B, "Member 'MaiAttackerComponent_HasAnyValidAttack::ReturnValue' has a wrong offset!");

// Function Mai.MaiAttackerComponent.HasHit
// 0x0001 (0x0001 - 0x0000)
struct MaiAttackerComponent_HasHit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiAttackerComponent_HasHit) == 0x000001, "Wrong alignment on MaiAttackerComponent_HasHit");
static_assert(sizeof(MaiAttackerComponent_HasHit) == 0x000001, "Wrong size on MaiAttackerComponent_HasHit");
static_assert(offsetof(MaiAttackerComponent_HasHit, ReturnValue) == 0x000000, "Member 'MaiAttackerComponent_HasHit::ReturnValue' has a wrong offset!");

// Function Mai.MaiAttackerComponent.IsInAttackRange
// 0x0010 (0x0010 - 0x0000)
struct MaiAttackerComponent_IsInAttackRange final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityScale;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiAttackerComponent_IsInAttackRange) == 0x000008, "Wrong alignment on MaiAttackerComponent_IsInAttackRange");
static_assert(sizeof(MaiAttackerComponent_IsInAttackRange) == 0x000010, "Wrong size on MaiAttackerComponent_IsInAttackRange");
static_assert(offsetof(MaiAttackerComponent_IsInAttackRange, Enemy) == 0x000000, "Member 'MaiAttackerComponent_IsInAttackRange::Enemy' has a wrong offset!");
static_assert(offsetof(MaiAttackerComponent_IsInAttackRange, VelocityScale) == 0x000008, "Member 'MaiAttackerComponent_IsInAttackRange::VelocityScale' has a wrong offset!");
static_assert(offsetof(MaiAttackerComponent_IsInAttackRange, ReturnValue) == 0x00000C, "Member 'MaiAttackerComponent_IsInAttackRange::ReturnValue' has a wrong offset!");

// Function Mai.MaiAttackerComponent.IsMissed
// 0x0010 (0x0010 - 0x0000)
struct MaiAttackerComponent_IsMissed final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiAttackerComponent_IsMissed) == 0x000008, "Wrong alignment on MaiAttackerComponent_IsMissed");
static_assert(sizeof(MaiAttackerComponent_IsMissed) == 0x000010, "Wrong size on MaiAttackerComponent_IsMissed");
static_assert(offsetof(MaiAttackerComponent_IsMissed, Enemy) == 0x000000, "Member 'MaiAttackerComponent_IsMissed::Enemy' has a wrong offset!");
static_assert(offsetof(MaiAttackerComponent_IsMissed, ReturnValue) == 0x000008, "Member 'MaiAttackerComponent_IsMissed::ReturnValue' has a wrong offset!");

// Function Mai.MaiBTService_Notify.ReceiveNotify
// 0x0010 (0x0010 - 0x0000)
struct MaiBTService_Notify_ReceiveNotify final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiBTService_Notify_ReceiveNotify) == 0x000008, "Wrong alignment on MaiBTService_Notify_ReceiveNotify");
static_assert(sizeof(MaiBTService_Notify_ReceiveNotify) == 0x000010, "Wrong size on MaiBTService_Notify_ReceiveNotify");
static_assert(offsetof(MaiBTService_Notify_ReceiveNotify, OwnerController) == 0x000000, "Member 'MaiBTService_Notify_ReceiveNotify::OwnerController' has a wrong offset!");
static_assert(offsetof(MaiBTService_Notify_ReceiveNotify, ControlledPawn) == 0x000008, "Member 'MaiBTService_Notify_ReceiveNotify::ControlledPawn' has a wrong offset!");

// Function Mai.MaiHostileAttackers.getHostileAttackers
// 0x0010 (0x0010 - 0x0000)
struct MaiHostileAttackers_GetHostileAttackers final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaiHostileAttackers*                   ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiHostileAttackers_GetHostileAttackers) == 0x000008, "Wrong alignment on MaiHostileAttackers_GetHostileAttackers");
static_assert(sizeof(MaiHostileAttackers_GetHostileAttackers) == 0x000010, "Wrong size on MaiHostileAttackers_GetHostileAttackers");
static_assert(offsetof(MaiHostileAttackers_GetHostileAttackers, Actor) == 0x000000, "Member 'MaiHostileAttackers_GetHostileAttackers::Actor' has a wrong offset!");
static_assert(offsetof(MaiHostileAttackers_GetHostileAttackers, ReturnValue) == 0x000008, "Member 'MaiHostileAttackers_GetHostileAttackers::ReturnValue' has a wrong offset!");

// Function Mai.MaiHostileAttackers.AddAttacker
// 0x0010 (0x0010 - 0x0000)
struct MaiHostileAttackers_AddAttacker final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiHostileAttackers_AddAttacker) == 0x000008, "Wrong alignment on MaiHostileAttackers_AddAttacker");
static_assert(sizeof(MaiHostileAttackers_AddAttacker) == 0x000010, "Wrong size on MaiHostileAttackers_AddAttacker");
static_assert(offsetof(MaiHostileAttackers_AddAttacker, Enemy) == 0x000000, "Member 'MaiHostileAttackers_AddAttacker::Enemy' has a wrong offset!");
static_assert(offsetof(MaiHostileAttackers_AddAttacker, ReturnValue) == 0x000008, "Member 'MaiHostileAttackers_AddAttacker::ReturnValue' has a wrong offset!");

// Function Mai.MaiHostileAttackers.CaptureTokenLock
// 0x0010 (0x0010 - 0x0000)
struct MaiHostileAttackers_CaptureTokenLock final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Lock;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiHostileAttackers_CaptureTokenLock) == 0x000008, "Wrong alignment on MaiHostileAttackers_CaptureTokenLock");
static_assert(sizeof(MaiHostileAttackers_CaptureTokenLock) == 0x000010, "Wrong size on MaiHostileAttackers_CaptureTokenLock");
static_assert(offsetof(MaiHostileAttackers_CaptureTokenLock, Enemy) == 0x000000, "Member 'MaiHostileAttackers_CaptureTokenLock::Enemy' has a wrong offset!");
static_assert(offsetof(MaiHostileAttackers_CaptureTokenLock, Lock) == 0x000008, "Member 'MaiHostileAttackers_CaptureTokenLock::Lock' has a wrong offset!");

// Function Mai.MaiHostileAttackers.ChangeMaxActiveAttackers
// 0x0001 (0x0001 - 0x0000)
struct MaiHostileAttackers_ChangeMaxActiveAttackers final
{
public:
	uint8                                         Count;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiHostileAttackers_ChangeMaxActiveAttackers) == 0x000001, "Wrong alignment on MaiHostileAttackers_ChangeMaxActiveAttackers");
static_assert(sizeof(MaiHostileAttackers_ChangeMaxActiveAttackers) == 0x000001, "Wrong size on MaiHostileAttackers_ChangeMaxActiveAttackers");
static_assert(offsetof(MaiHostileAttackers_ChangeMaxActiveAttackers, Count) == 0x000000, "Member 'MaiHostileAttackers_ChangeMaxActiveAttackers::Count' has a wrong offset!");

// Function Mai.MaiHostileAttackers.HardLockTokens
// 0x0010 (0x0010 - 0x0000)
struct MaiHostileAttackers_HardLockTokens final
{
public:
	class FName                                   Reason;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Enemy;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiHostileAttackers_HardLockTokens) == 0x000008, "Wrong alignment on MaiHostileAttackers_HardLockTokens");
static_assert(sizeof(MaiHostileAttackers_HardLockTokens) == 0x000010, "Wrong size on MaiHostileAttackers_HardLockTokens");
static_assert(offsetof(MaiHostileAttackers_HardLockTokens, Reason) == 0x000000, "Member 'MaiHostileAttackers_HardLockTokens::Reason' has a wrong offset!");
static_assert(offsetof(MaiHostileAttackers_HardLockTokens, Enemy) == 0x000008, "Member 'MaiHostileAttackers_HardLockTokens::Enemy' has a wrong offset!");

// Function Mai.MaiHostileAttackers.IgnoreLockFor
// 0x0018 (0x0018 - 0x0000)
struct MaiHostileAttackers_IgnoreLockFor final
{
public:
	class FName                                   Reason;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Enemy;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyIfLocked;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiHostileAttackers_IgnoreLockFor) == 0x000008, "Wrong alignment on MaiHostileAttackers_IgnoreLockFor");
static_assert(sizeof(MaiHostileAttackers_IgnoreLockFor) == 0x000018, "Wrong size on MaiHostileAttackers_IgnoreLockFor");
static_assert(offsetof(MaiHostileAttackers_IgnoreLockFor, Reason) == 0x000000, "Member 'MaiHostileAttackers_IgnoreLockFor::Reason' has a wrong offset!");
static_assert(offsetof(MaiHostileAttackers_IgnoreLockFor, Enemy) == 0x000008, "Member 'MaiHostileAttackers_IgnoreLockFor::Enemy' has a wrong offset!");
static_assert(offsetof(MaiHostileAttackers_IgnoreLockFor, OnlyIfLocked) == 0x000010, "Member 'MaiHostileAttackers_IgnoreLockFor::OnlyIfLocked' has a wrong offset!");

// Function Mai.MaiHostileAttackers.LockTokens
// 0x000C (0x000C - 0x0000)
struct MaiHostileAttackers_LockTokens final
{
public:
	class FName                                   Reason;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Lock;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiHostileAttackers_LockTokens) == 0x000004, "Wrong alignment on MaiHostileAttackers_LockTokens");
static_assert(sizeof(MaiHostileAttackers_LockTokens) == 0x00000C, "Wrong size on MaiHostileAttackers_LockTokens");
static_assert(offsetof(MaiHostileAttackers_LockTokens, Reason) == 0x000000, "Member 'MaiHostileAttackers_LockTokens::Reason' has a wrong offset!");
static_assert(offsetof(MaiHostileAttackers_LockTokens, Lock) == 0x000008, "Member 'MaiHostileAttackers_LockTokens::Lock' has a wrong offset!");

// Function Mai.MaiHostileAttackers.LockTokensDistribution
// 0x000C (0x000C - 0x0000)
struct MaiHostileAttackers_LockTokensDistribution final
{
public:
	class FName                                   Reason;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Lock;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiHostileAttackers_LockTokensDistribution) == 0x000004, "Wrong alignment on MaiHostileAttackers_LockTokensDistribution");
static_assert(sizeof(MaiHostileAttackers_LockTokensDistribution) == 0x00000C, "Wrong size on MaiHostileAttackers_LockTokensDistribution");
static_assert(offsetof(MaiHostileAttackers_LockTokensDistribution, Reason) == 0x000000, "Member 'MaiHostileAttackers_LockTokensDistribution::Reason' has a wrong offset!");
static_assert(offsetof(MaiHostileAttackers_LockTokensDistribution, Lock) == 0x000008, "Member 'MaiHostileAttackers_LockTokensDistribution::Lock' has a wrong offset!");

// Function Mai.MaiHostileAttackers.OfferSlotToOthers
// 0x0008 (0x0008 - 0x0000)
struct MaiHostileAttackers_OfferSlotToOthers final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiHostileAttackers_OfferSlotToOthers) == 0x000008, "Wrong alignment on MaiHostileAttackers_OfferSlotToOthers");
static_assert(sizeof(MaiHostileAttackers_OfferSlotToOthers) == 0x000008, "Wrong size on MaiHostileAttackers_OfferSlotToOthers");
static_assert(offsetof(MaiHostileAttackers_OfferSlotToOthers, Enemy) == 0x000000, "Member 'MaiHostileAttackers_OfferSlotToOthers::Enemy' has a wrong offset!");

// Function Mai.MaiHostileAttackers.ReleaseAttackPosition
// 0x0008 (0x0008 - 0x0000)
struct MaiHostileAttackers_ReleaseAttackPosition final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiHostileAttackers_ReleaseAttackPosition) == 0x000008, "Wrong alignment on MaiHostileAttackers_ReleaseAttackPosition");
static_assert(sizeof(MaiHostileAttackers_ReleaseAttackPosition) == 0x000008, "Wrong size on MaiHostileAttackers_ReleaseAttackPosition");
static_assert(offsetof(MaiHostileAttackers_ReleaseAttackPosition, Enemy) == 0x000000, "Member 'MaiHostileAttackers_ReleaseAttackPosition::Enemy' has a wrong offset!");

// Function Mai.MaiHostileAttackers.RemoveAttacker
// 0x0008 (0x0008 - 0x0000)
struct MaiHostileAttackers_RemoveAttacker final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiHostileAttackers_RemoveAttacker) == 0x000008, "Wrong alignment on MaiHostileAttackers_RemoveAttacker");
static_assert(sizeof(MaiHostileAttackers_RemoveAttacker) == 0x000008, "Wrong size on MaiHostileAttackers_RemoveAttacker");
static_assert(offsetof(MaiHostileAttackers_RemoveAttacker, Enemy) == 0x000000, "Member 'MaiHostileAttackers_RemoveAttacker::Enemy' has a wrong offset!");

// Function Mai.MaiHostileAttackers.ReturnToken
// 0x0010 (0x0010 - 0x0000)
struct MaiHostileAttackers_ReturnToken final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddCooldown;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiHostileAttackers_ReturnToken) == 0x000008, "Wrong alignment on MaiHostileAttackers_ReturnToken");
static_assert(sizeof(MaiHostileAttackers_ReturnToken) == 0x000010, "Wrong size on MaiHostileAttackers_ReturnToken");
static_assert(offsetof(MaiHostileAttackers_ReturnToken, Enemy) == 0x000000, "Member 'MaiHostileAttackers_ReturnToken::Enemy' has a wrong offset!");
static_assert(offsetof(MaiHostileAttackers_ReturnToken, AddCooldown) == 0x000008, "Member 'MaiHostileAttackers_ReturnToken::AddCooldown' has a wrong offset!");

// Function Mai.MaiHostileAttackers.TakeAttackPosition
// 0x0020 (0x0020 - 0x0000)
struct MaiHostileAttackers_TakeAttackPosition final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiHostileAttackers_TakeAttackPosition) == 0x000008, "Wrong alignment on MaiHostileAttackers_TakeAttackPosition");
static_assert(sizeof(MaiHostileAttackers_TakeAttackPosition) == 0x000020, "Wrong size on MaiHostileAttackers_TakeAttackPosition");
static_assert(offsetof(MaiHostileAttackers_TakeAttackPosition, Enemy) == 0x000000, "Member 'MaiHostileAttackers_TakeAttackPosition::Enemy' has a wrong offset!");
static_assert(offsetof(MaiHostileAttackers_TakeAttackPosition, Location) == 0x000008, "Member 'MaiHostileAttackers_TakeAttackPosition::Location' has a wrong offset!");

// Function Mai.MaiHostileAttackers.TakeToken
// 0x0028 (0x0028 - 0x0000)
struct MaiHostileAttackers_TakeToken final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaiToken                                     Token;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           IgnoreLocks;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Force;                                             // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiHostileAttackers_TakeToken) == 0x000008, "Wrong alignment on MaiHostileAttackers_TakeToken");
static_assert(sizeof(MaiHostileAttackers_TakeToken) == 0x000028, "Wrong size on MaiHostileAttackers_TakeToken");
static_assert(offsetof(MaiHostileAttackers_TakeToken, Enemy) == 0x000000, "Member 'MaiHostileAttackers_TakeToken::Enemy' has a wrong offset!");
static_assert(offsetof(MaiHostileAttackers_TakeToken, Token) == 0x000008, "Member 'MaiHostileAttackers_TakeToken::Token' has a wrong offset!");
static_assert(offsetof(MaiHostileAttackers_TakeToken, IgnoreLocks) == 0x000010, "Member 'MaiHostileAttackers_TakeToken::IgnoreLocks' has a wrong offset!");
static_assert(offsetof(MaiHostileAttackers_TakeToken, Force) == 0x000020, "Member 'MaiHostileAttackers_TakeToken::Force' has a wrong offset!");
static_assert(offsetof(MaiHostileAttackers_TakeToken, ReturnValue) == 0x000021, "Member 'MaiHostileAttackers_TakeToken::ReturnValue' has a wrong offset!");

// Function Mai.MaiHostileAttackers.CanCaptureToken
// 0x0010 (0x0010 - 0x0000)
struct MaiHostileAttackers_CanCaptureToken final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiHostileAttackers_CanCaptureToken) == 0x000008, "Wrong alignment on MaiHostileAttackers_CanCaptureToken");
static_assert(sizeof(MaiHostileAttackers_CanCaptureToken) == 0x000010, "Wrong size on MaiHostileAttackers_CanCaptureToken");
static_assert(offsetof(MaiHostileAttackers_CanCaptureToken, Enemy) == 0x000000, "Member 'MaiHostileAttackers_CanCaptureToken::Enemy' has a wrong offset!");
static_assert(offsetof(MaiHostileAttackers_CanCaptureToken, ReturnValue) == 0x000008, "Member 'MaiHostileAttackers_CanCaptureToken::ReturnValue' has a wrong offset!");

// Function Mai.MaiHostileAttackers.CanGetSlot
// 0x0010 (0x0010 - 0x0000)
struct MaiHostileAttackers_CanGetSlot final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiHostileAttackers_CanGetSlot) == 0x000008, "Wrong alignment on MaiHostileAttackers_CanGetSlot");
static_assert(sizeof(MaiHostileAttackers_CanGetSlot) == 0x000010, "Wrong size on MaiHostileAttackers_CanGetSlot");
static_assert(offsetof(MaiHostileAttackers_CanGetSlot, Enemy) == 0x000000, "Member 'MaiHostileAttackers_CanGetSlot::Enemy' has a wrong offset!");
static_assert(offsetof(MaiHostileAttackers_CanGetSlot, ReturnValue) == 0x000008, "Member 'MaiHostileAttackers_CanGetSlot::ReturnValue' has a wrong offset!");

// Function Mai.MaiHostileAttackers.CanHaveSlot
// 0x0010 (0x0010 - 0x0000)
struct MaiHostileAttackers_CanHaveSlot final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiHostileAttackers_CanHaveSlot) == 0x000008, "Wrong alignment on MaiHostileAttackers_CanHaveSlot");
static_assert(sizeof(MaiHostileAttackers_CanHaveSlot) == 0x000010, "Wrong size on MaiHostileAttackers_CanHaveSlot");
static_assert(offsetof(MaiHostileAttackers_CanHaveSlot, Enemy) == 0x000000, "Member 'MaiHostileAttackers_CanHaveSlot::Enemy' has a wrong offset!");
static_assert(offsetof(MaiHostileAttackers_CanHaveSlot, ReturnValue) == 0x000008, "Member 'MaiHostileAttackers_CanHaveSlot::ReturnValue' has a wrong offset!");

// Function Mai.MaiHostileAttackers.DisallowSlotGive
// 0x0010 (0x0010 - 0x0000)
struct MaiHostileAttackers_DisallowSlotGive final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiHostileAttackers_DisallowSlotGive) == 0x000008, "Wrong alignment on MaiHostileAttackers_DisallowSlotGive");
static_assert(sizeof(MaiHostileAttackers_DisallowSlotGive) == 0x000010, "Wrong size on MaiHostileAttackers_DisallowSlotGive");
static_assert(offsetof(MaiHostileAttackers_DisallowSlotGive, Enemy) == 0x000000, "Member 'MaiHostileAttackers_DisallowSlotGive::Enemy' has a wrong offset!");
static_assert(offsetof(MaiHostileAttackers_DisallowSlotGive, ReturnValue) == 0x000008, "Member 'MaiHostileAttackers_DisallowSlotGive::ReturnValue' has a wrong offset!");

// Function Mai.MaiHostileAttackers.GetAttackerCount
// 0x0001 (0x0001 - 0x0000)
struct MaiHostileAttackers_GetAttackerCount final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiHostileAttackers_GetAttackerCount) == 0x000001, "Wrong alignment on MaiHostileAttackers_GetAttackerCount");
static_assert(sizeof(MaiHostileAttackers_GetAttackerCount) == 0x000001, "Wrong size on MaiHostileAttackers_GetAttackerCount");
static_assert(offsetof(MaiHostileAttackers_GetAttackerCount, ReturnValue) == 0x000000, "Member 'MaiHostileAttackers_GetAttackerCount::ReturnValue' has a wrong offset!");

// Function Mai.MaiHostileAttackers.GetSlotHoldersCount
// 0x0010 (0x0010 - 0x0000)
struct MaiHostileAttackers_GetSlotHoldersCount final
{
public:
	TSubclassOf<class AActor>                     Klass;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiHostileAttackers_GetSlotHoldersCount) == 0x000008, "Wrong alignment on MaiHostileAttackers_GetSlotHoldersCount");
static_assert(sizeof(MaiHostileAttackers_GetSlotHoldersCount) == 0x000010, "Wrong size on MaiHostileAttackers_GetSlotHoldersCount");
static_assert(offsetof(MaiHostileAttackers_GetSlotHoldersCount, Klass) == 0x000000, "Member 'MaiHostileAttackers_GetSlotHoldersCount::Klass' has a wrong offset!");
static_assert(offsetof(MaiHostileAttackers_GetSlotHoldersCount, ReturnValue) == 0x000008, "Member 'MaiHostileAttackers_GetSlotHoldersCount::ReturnValue' has a wrong offset!");

// Function Mai.MaiHostileAttackers.GetTokenHolder
// 0x0008 (0x0008 - 0x0000)
struct MaiHostileAttackers_GetTokenHolder final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiHostileAttackers_GetTokenHolder) == 0x000008, "Wrong alignment on MaiHostileAttackers_GetTokenHolder");
static_assert(sizeof(MaiHostileAttackers_GetTokenHolder) == 0x000008, "Wrong size on MaiHostileAttackers_GetTokenHolder");
static_assert(offsetof(MaiHostileAttackers_GetTokenHolder, ReturnValue) == 0x000000, "Member 'MaiHostileAttackers_GetTokenHolder::ReturnValue' has a wrong offset!");

// Function Mai.MaiHostileAttackers.GetTokenLockOwner
// 0x0008 (0x0008 - 0x0000)
struct MaiHostileAttackers_GetTokenLockOwner final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiHostileAttackers_GetTokenLockOwner) == 0x000008, "Wrong alignment on MaiHostileAttackers_GetTokenLockOwner");
static_assert(sizeof(MaiHostileAttackers_GetTokenLockOwner) == 0x000008, "Wrong size on MaiHostileAttackers_GetTokenLockOwner");
static_assert(offsetof(MaiHostileAttackers_GetTokenLockOwner, ReturnValue) == 0x000000, "Member 'MaiHostileAttackers_GetTokenLockOwner::ReturnValue' has a wrong offset!");

// Function Mai.MaiHostileAttackers.HasAnyAttacker
// 0x0001 (0x0001 - 0x0000)
struct MaiHostileAttackers_HasAnyAttacker final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiHostileAttackers_HasAnyAttacker) == 0x000001, "Wrong alignment on MaiHostileAttackers_HasAnyAttacker");
static_assert(sizeof(MaiHostileAttackers_HasAnyAttacker) == 0x000001, "Wrong size on MaiHostileAttackers_HasAnyAttacker");
static_assert(offsetof(MaiHostileAttackers_HasAnyAttacker, ReturnValue) == 0x000000, "Member 'MaiHostileAttackers_HasAnyAttacker::ReturnValue' has a wrong offset!");

// Function Mai.MaiHostileAttackers.HasHardLock
// 0x0001 (0x0001 - 0x0000)
struct MaiHostileAttackers_HasHardLock final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiHostileAttackers_HasHardLock) == 0x000001, "Wrong alignment on MaiHostileAttackers_HasHardLock");
static_assert(sizeof(MaiHostileAttackers_HasHardLock) == 0x000001, "Wrong size on MaiHostileAttackers_HasHardLock");
static_assert(offsetof(MaiHostileAttackers_HasHardLock, ReturnValue) == 0x000000, "Member 'MaiHostileAttackers_HasHardLock::ReturnValue' has a wrong offset!");

// Function Mai.MaiHostileAttackers.HasOtherAttacker
// 0x0010 (0x0010 - 0x0000)
struct MaiHostileAttackers_HasOtherAttacker final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiHostileAttackers_HasOtherAttacker) == 0x000008, "Wrong alignment on MaiHostileAttackers_HasOtherAttacker");
static_assert(sizeof(MaiHostileAttackers_HasOtherAttacker) == 0x000010, "Wrong size on MaiHostileAttackers_HasOtherAttacker");
static_assert(offsetof(MaiHostileAttackers_HasOtherAttacker, Enemy) == 0x000000, "Member 'MaiHostileAttackers_HasOtherAttacker::Enemy' has a wrong offset!");
static_assert(offsetof(MaiHostileAttackers_HasOtherAttacker, ReturnValue) == 0x000008, "Member 'MaiHostileAttackers_HasOtherAttacker::ReturnValue' has a wrong offset!");

// Function Mai.MaiHostileAttackers.HasToken
// 0x0010 (0x0010 - 0x0000)
struct MaiHostileAttackers_HasToken final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiHostileAttackers_HasToken) == 0x000008, "Wrong alignment on MaiHostileAttackers_HasToken");
static_assert(sizeof(MaiHostileAttackers_HasToken) == 0x000010, "Wrong size on MaiHostileAttackers_HasToken");
static_assert(offsetof(MaiHostileAttackers_HasToken, Enemy) == 0x000000, "Member 'MaiHostileAttackers_HasToken::Enemy' has a wrong offset!");
static_assert(offsetof(MaiHostileAttackers_HasToken, ReturnValue) == 0x000008, "Member 'MaiHostileAttackers_HasToken::ReturnValue' has a wrong offset!");

// Function Mai.MsgEndBlowReceiverInterface.ReceiveEndBlowMsg
// 0x0010 (0x0010 - 0x0000)
struct MsgEndBlowReceiverInterface_ReceiveEndBlowMsg final
{
public:
	class UMaiMessage*                            Message;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Attacker;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MsgEndBlowReceiverInterface_ReceiveEndBlowMsg) == 0x000008, "Wrong alignment on MsgEndBlowReceiverInterface_ReceiveEndBlowMsg");
static_assert(sizeof(MsgEndBlowReceiverInterface_ReceiveEndBlowMsg) == 0x000010, "Wrong size on MsgEndBlowReceiverInterface_ReceiveEndBlowMsg");
static_assert(offsetof(MsgEndBlowReceiverInterface_ReceiveEndBlowMsg, Message) == 0x000000, "Member 'MsgEndBlowReceiverInterface_ReceiveEndBlowMsg::Message' has a wrong offset!");
static_assert(offsetof(MsgEndBlowReceiverInterface_ReceiveEndBlowMsg, Attacker) == 0x000008, "Member 'MsgEndBlowReceiverInterface_ReceiveEndBlowMsg::Attacker' has a wrong offset!");

// Function Mai.BTTask_BeingActionBase.OnActionEvent
// 0x0010 (0x0010 - 0x0000)
struct BTTask_BeingActionBase_OnActionEvent final
{
public:
	class UBeingAction*                           Action;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBeingActionEventType                         EventType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BTTask_BeingActionBase_OnActionEvent) == 0x000008, "Wrong alignment on BTTask_BeingActionBase_OnActionEvent");
static_assert(sizeof(BTTask_BeingActionBase_OnActionEvent) == 0x000010, "Wrong size on BTTask_BeingActionBase_OnActionEvent");
static_assert(offsetof(BTTask_BeingActionBase_OnActionEvent, Action) == 0x000000, "Member 'BTTask_BeingActionBase_OnActionEvent::Action' has a wrong offset!");
static_assert(offsetof(BTTask_BeingActionBase_OnActionEvent, EventType) == 0x000008, "Member 'BTTask_BeingActionBase_OnActionEvent::EventType' has a wrong offset!");

// Function Mai.MaiBTTask_State.OnStateStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct MaiBTTask_State_OnStateStatusChanged final
{
public:
	EStateStatus                                  Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiBTTask_State_OnStateStatusChanged) == 0x000001, "Wrong alignment on MaiBTTask_State_OnStateStatusChanged");
static_assert(sizeof(MaiBTTask_State_OnStateStatusChanged) == 0x000001, "Wrong size on MaiBTTask_State_OnStateStatusChanged");
static_assert(offsetof(MaiBTTask_State_OnStateStatusChanged, Status) == 0x000000, "Member 'MaiBTTask_State_OnStateStatusChanged::Status' has a wrong offset!");

// Function Mai.MaiCharacter.getFixedCapsuleLocation
// 0x0038 (0x0038 - 0x0000)
struct MaiCharacter_GetFixedCapsuleLocation final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCharacter_GetFixedCapsuleLocation) == 0x000008, "Wrong alignment on MaiCharacter_GetFixedCapsuleLocation");
static_assert(sizeof(MaiCharacter_GetFixedCapsuleLocation) == 0x000038, "Wrong size on MaiCharacter_GetFixedCapsuleLocation");
static_assert(offsetof(MaiCharacter_GetFixedCapsuleLocation, Pawn) == 0x000000, "Member 'MaiCharacter_GetFixedCapsuleLocation::Pawn' has a wrong offset!");
static_assert(offsetof(MaiCharacter_GetFixedCapsuleLocation, Location) == 0x000008, "Member 'MaiCharacter_GetFixedCapsuleLocation::Location' has a wrong offset!");
static_assert(offsetof(MaiCharacter_GetFixedCapsuleLocation, ReturnValue) == 0x000020, "Member 'MaiCharacter_GetFixedCapsuleLocation::ReturnValue' has a wrong offset!");

// Function Mai.MaiCharacter.getFixedGroundLocation
// 0x0038 (0x0038 - 0x0000)
struct MaiCharacter_GetFixedGroundLocation final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCharacter_GetFixedGroundLocation) == 0x000008, "Wrong alignment on MaiCharacter_GetFixedGroundLocation");
static_assert(sizeof(MaiCharacter_GetFixedGroundLocation) == 0x000038, "Wrong size on MaiCharacter_GetFixedGroundLocation");
static_assert(offsetof(MaiCharacter_GetFixedGroundLocation, Pawn) == 0x000000, "Member 'MaiCharacter_GetFixedGroundLocation::Pawn' has a wrong offset!");
static_assert(offsetof(MaiCharacter_GetFixedGroundLocation, Location) == 0x000008, "Member 'MaiCharacter_GetFixedGroundLocation::Location' has a wrong offset!");
static_assert(offsetof(MaiCharacter_GetFixedGroundLocation, ReturnValue) == 0x000020, "Member 'MaiCharacter_GetFixedGroundLocation::ReturnValue' has a wrong offset!");

// Function Mai.MaiCharacter.AbortAttack
// 0x0008 (0x0008 - 0x0000)
struct MaiCharacter_AbortAttack final
{
public:
	class FName                                   AttackName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCharacter_AbortAttack) == 0x000004, "Wrong alignment on MaiCharacter_AbortAttack");
static_assert(sizeof(MaiCharacter_AbortAttack) == 0x000008, "Wrong size on MaiCharacter_AbortAttack");
static_assert(offsetof(MaiCharacter_AbortAttack, AttackName) == 0x000000, "Member 'MaiCharacter_AbortAttack::AttackName' has a wrong offset!");

// Function Mai.MaiCharacter.Activate
// 0x0008 (0x0008 - 0x0000)
struct MaiCharacter_Activate final
{
public:
	class FName                                   Reason;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCharacter_Activate) == 0x000004, "Wrong alignment on MaiCharacter_Activate");
static_assert(sizeof(MaiCharacter_Activate) == 0x000008, "Wrong size on MaiCharacter_Activate");
static_assert(offsetof(MaiCharacter_Activate, Reason) == 0x000000, "Member 'MaiCharacter_Activate::Reason' has a wrong offset!");

// Function Mai.MaiCharacter.AIDebuggerTick
// 0x0010 (0x0010 - 0x0000)
struct MaiCharacter_AIDebuggerTick final
{
public:
	class AMaiDebugger*                           Debugger;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaSeconds;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiCharacter_AIDebuggerTick) == 0x000008, "Wrong alignment on MaiCharacter_AIDebuggerTick");
static_assert(sizeof(MaiCharacter_AIDebuggerTick) == 0x000010, "Wrong size on MaiCharacter_AIDebuggerTick");
static_assert(offsetof(MaiCharacter_AIDebuggerTick, Debugger) == 0x000000, "Member 'MaiCharacter_AIDebuggerTick::Debugger' has a wrong offset!");
static_assert(offsetof(MaiCharacter_AIDebuggerTick, DeltaSeconds) == 0x000008, "Member 'MaiCharacter_AIDebuggerTick::DeltaSeconds' has a wrong offset!");

// Function Mai.MaiCharacter.AppendGameplayTags
// 0x0020 (0x0020 - 0x0000)
struct MaiCharacter_AppendGameplayTags final
{
public:
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCharacter_AppendGameplayTags) == 0x000008, "Wrong alignment on MaiCharacter_AppendGameplayTags");
static_assert(sizeof(MaiCharacter_AppendGameplayTags) == 0x000020, "Wrong size on MaiCharacter_AppendGameplayTags");
static_assert(offsetof(MaiCharacter_AppendGameplayTags, GameplayTags) == 0x000000, "Member 'MaiCharacter_AppendGameplayTags::GameplayTags' has a wrong offset!");

// Function Mai.MaiCharacter.Deactivate
// 0x0008 (0x0008 - 0x0000)
struct MaiCharacter_Deactivate final
{
public:
	class FName                                   Reason;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCharacter_Deactivate) == 0x000004, "Wrong alignment on MaiCharacter_Deactivate");
static_assert(sizeof(MaiCharacter_Deactivate) == 0x000008, "Wrong size on MaiCharacter_Deactivate");
static_assert(offsetof(MaiCharacter_Deactivate, Reason) == 0x000000, "Member 'MaiCharacter_Deactivate::Reason' has a wrong offset!");

// Function Mai.MaiCharacter.DisableAttackColliders
// 0x0010 (0x0010 - 0x0000)
struct MaiCharacter_DisableAttackColliders final
{
public:
	TArray<class FName>                           CollidersTags;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCharacter_DisableAttackColliders) == 0x000008, "Wrong alignment on MaiCharacter_DisableAttackColliders");
static_assert(sizeof(MaiCharacter_DisableAttackColliders) == 0x000010, "Wrong size on MaiCharacter_DisableAttackColliders");
static_assert(offsetof(MaiCharacter_DisableAttackColliders, CollidersTags) == 0x000000, "Member 'MaiCharacter_DisableAttackColliders::CollidersTags' has a wrong offset!");

// Function Mai.MaiCharacter.EnableAttackColliders
// 0x0010 (0x0010 - 0x0000)
struct MaiCharacter_EnableAttackColliders final
{
public:
	TArray<class FName>                           CollidersTags;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCharacter_EnableAttackColliders) == 0x000008, "Wrong alignment on MaiCharacter_EnableAttackColliders");
static_assert(sizeof(MaiCharacter_EnableAttackColliders) == 0x000010, "Wrong size on MaiCharacter_EnableAttackColliders");
static_assert(offsetof(MaiCharacter_EnableAttackColliders, CollidersTags) == 0x000000, "Member 'MaiCharacter_EnableAttackColliders::CollidersTags' has a wrong offset!");

// Function Mai.MaiCharacter.ReceiveShouldDespawn
// 0x0002 (0x0002 - 0x0000)
struct MaiCharacter_ReceiveShouldDespawn final
{
public:
	EMaiDespawnReason                             Reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCharacter_ReceiveShouldDespawn) == 0x000001, "Wrong alignment on MaiCharacter_ReceiveShouldDespawn");
static_assert(sizeof(MaiCharacter_ReceiveShouldDespawn) == 0x000002, "Wrong size on MaiCharacter_ReceiveShouldDespawn");
static_assert(offsetof(MaiCharacter_ReceiveShouldDespawn, Reason) == 0x000000, "Member 'MaiCharacter_ReceiveShouldDespawn::Reason' has a wrong offset!");
static_assert(offsetof(MaiCharacter_ReceiveShouldDespawn, ReturnValue) == 0x000001, "Member 'MaiCharacter_ReceiveShouldDespawn::ReturnValue' has a wrong offset!");

// Function Mai.MaiCharacter.RemoveGameplayTags
// 0x0020 (0x0020 - 0x0000)
struct MaiCharacter_RemoveGameplayTags final
{
public:
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCharacter_RemoveGameplayTags) == 0x000008, "Wrong alignment on MaiCharacter_RemoveGameplayTags");
static_assert(sizeof(MaiCharacter_RemoveGameplayTags) == 0x000020, "Wrong size on MaiCharacter_RemoveGameplayTags");
static_assert(offsetof(MaiCharacter_RemoveGameplayTags, GameplayTags) == 0x000000, "Member 'MaiCharacter_RemoveGameplayTags::GameplayTags' has a wrong offset!");

// Function Mai.MaiCharacter.SetGameplayTags
// 0x0020 (0x0020 - 0x0000)
struct MaiCharacter_SetGameplayTags final
{
public:
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCharacter_SetGameplayTags) == 0x000008, "Wrong alignment on MaiCharacter_SetGameplayTags");
static_assert(sizeof(MaiCharacter_SetGameplayTags) == 0x000020, "Wrong size on MaiCharacter_SetGameplayTags");
static_assert(offsetof(MaiCharacter_SetGameplayTags, GameplayTags) == 0x000000, "Member 'MaiCharacter_SetGameplayTags::GameplayTags' has a wrong offset!");

// Function Mai.MaiCharacter.TakePointDamage
// 0x0028 (0x0028 - 0x0000)
struct MaiCharacter_TakePointDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDamageType>                DamageClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiCharacter_TakePointDamage) == 0x000008, "Wrong alignment on MaiCharacter_TakePointDamage");
static_assert(sizeof(MaiCharacter_TakePointDamage) == 0x000028, "Wrong size on MaiCharacter_TakePointDamage");
static_assert(offsetof(MaiCharacter_TakePointDamage, Damage) == 0x000000, "Member 'MaiCharacter_TakePointDamage::Damage' has a wrong offset!");
static_assert(offsetof(MaiCharacter_TakePointDamage, DamageClass) == 0x000008, "Member 'MaiCharacter_TakePointDamage::DamageClass' has a wrong offset!");
static_assert(offsetof(MaiCharacter_TakePointDamage, EventInstigator) == 0x000010, "Member 'MaiCharacter_TakePointDamage::EventInstigator' has a wrong offset!");
static_assert(offsetof(MaiCharacter_TakePointDamage, DamageCauser) == 0x000018, "Member 'MaiCharacter_TakePointDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(MaiCharacter_TakePointDamage, ReturnValue) == 0x000020, "Member 'MaiCharacter_TakePointDamage::ReturnValue' has a wrong offset!");

// Function Mai.MaiCharacter.WantDespawn
// 0x0001 (0x0001 - 0x0000)
struct MaiCharacter_WantDespawn final
{
public:
	bool                                          Despawn;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCharacter_WantDespawn) == 0x000001, "Wrong alignment on MaiCharacter_WantDespawn");
static_assert(sizeof(MaiCharacter_WantDespawn) == 0x000001, "Wrong size on MaiCharacter_WantDespawn");
static_assert(offsetof(MaiCharacter_WantDespawn, Despawn) == 0x000000, "Member 'MaiCharacter_WantDespawn::Despawn' has a wrong offset!");

// Function Mai.MaiCharacter.GetMaiCharacterMovement
// 0x0008 (0x0008 - 0x0000)
struct MaiCharacter_GetMaiCharacterMovement final
{
public:
	class UMaiCharacterMovementComponent*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCharacter_GetMaiCharacterMovement) == 0x000008, "Wrong alignment on MaiCharacter_GetMaiCharacterMovement");
static_assert(sizeof(MaiCharacter_GetMaiCharacterMovement) == 0x000008, "Wrong size on MaiCharacter_GetMaiCharacterMovement");
static_assert(offsetof(MaiCharacter_GetMaiCharacterMovement, ReturnValue) == 0x000000, "Member 'MaiCharacter_GetMaiCharacterMovement::ReturnValue' has a wrong offset!");

// Function Mai.MaiCharacter.GetMaiController
// 0x0008 (0x0008 - 0x0000)
struct MaiCharacter_GetMaiController final
{
public:
	class AMaiController*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCharacter_GetMaiController) == 0x000008, "Wrong alignment on MaiCharacter_GetMaiController");
static_assert(sizeof(MaiCharacter_GetMaiController) == 0x000008, "Wrong size on MaiCharacter_GetMaiController");
static_assert(offsetof(MaiCharacter_GetMaiController, ReturnValue) == 0x000000, "Member 'MaiCharacter_GetMaiController::ReturnValue' has a wrong offset!");

// Function Mai.MaiCharacter.GetMaiSpawner
// 0x0008 (0x0008 - 0x0000)
struct MaiCharacter_GetMaiSpawner final
{
public:
	class AMaiSpawner*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCharacter_GetMaiSpawner) == 0x000008, "Wrong alignment on MaiCharacter_GetMaiSpawner");
static_assert(sizeof(MaiCharacter_GetMaiSpawner) == 0x000008, "Wrong size on MaiCharacter_GetMaiSpawner");
static_assert(offsetof(MaiCharacter_GetMaiSpawner, ReturnValue) == 0x000000, "Member 'MaiCharacter_GetMaiSpawner::ReturnValue' has a wrong offset!");

// Function Mai.MaiCharacter.GetPrevLevelLocation
// 0x0020 (0x0020 - 0x0000)
struct MaiCharacter_GetPrevLevelLocation final
{
public:
	float                                         MinDist;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCharacter_GetPrevLevelLocation) == 0x000008, "Wrong alignment on MaiCharacter_GetPrevLevelLocation");
static_assert(sizeof(MaiCharacter_GetPrevLevelLocation) == 0x000020, "Wrong size on MaiCharacter_GetPrevLevelLocation");
static_assert(offsetof(MaiCharacter_GetPrevLevelLocation, MinDist) == 0x000000, "Member 'MaiCharacter_GetPrevLevelLocation::MinDist' has a wrong offset!");
static_assert(offsetof(MaiCharacter_GetPrevLevelLocation, ReturnValue) == 0x000008, "Member 'MaiCharacter_GetPrevLevelLocation::ReturnValue' has a wrong offset!");

// Function Mai.MaiCharacter.IsActive
// 0x0001 (0x0001 - 0x0000)
struct MaiCharacter_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCharacter_IsActive) == 0x000001, "Wrong alignment on MaiCharacter_IsActive");
static_assert(sizeof(MaiCharacter_IsActive) == 0x000001, "Wrong size on MaiCharacter_IsActive");
static_assert(offsetof(MaiCharacter_IsActive, ReturnValue) == 0x000000, "Member 'MaiCharacter_IsActive::ReturnValue' has a wrong offset!");

// Function Mai.MaiCharacter.IsDead
// 0x0001 (0x0001 - 0x0000)
struct MaiCharacter_IsDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCharacter_IsDead) == 0x000001, "Wrong alignment on MaiCharacter_IsDead");
static_assert(sizeof(MaiCharacter_IsDead) == 0x000001, "Wrong size on MaiCharacter_IsDead");
static_assert(offsetof(MaiCharacter_IsDead, ReturnValue) == 0x000000, "Member 'MaiCharacter_IsDead::ReturnValue' has a wrong offset!");

// Function Mai.MaiCharacter.IsNotMoving
// 0x0001 (0x0001 - 0x0000)
struct MaiCharacter_IsNotMoving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCharacter_IsNotMoving) == 0x000001, "Wrong alignment on MaiCharacter_IsNotMoving");
static_assert(sizeof(MaiCharacter_IsNotMoving) == 0x000001, "Wrong size on MaiCharacter_IsNotMoving");
static_assert(offsetof(MaiCharacter_IsNotMoving, ReturnValue) == 0x000000, "Member 'MaiCharacter_IsNotMoving::ReturnValue' has a wrong offset!");

// Function Mai.MaiCharacterMovementComponent.MoveToward
// 0x0018 (0x0018 - 0x0000)
struct MaiCharacterMovementComponent_MoveToward final
{
public:
	struct FVector                                Move;                                              // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCharacterMovementComponent_MoveToward) == 0x000008, "Wrong alignment on MaiCharacterMovementComponent_MoveToward");
static_assert(sizeof(MaiCharacterMovementComponent_MoveToward) == 0x000018, "Wrong size on MaiCharacterMovementComponent_MoveToward");
static_assert(offsetof(MaiCharacterMovementComponent_MoveToward, Move) == 0x000000, "Member 'MaiCharacterMovementComponent_MoveToward::Move' has a wrong offset!");

// Function Mai.MaiCharacterMovementComponent.SetCustomWalkSpeed
// 0x0004 (0x0004 - 0x0000)
struct MaiCharacterMovementComponent_SetCustomWalkSpeed final
{
public:
	float                                         NewSpeed;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCharacterMovementComponent_SetCustomWalkSpeed) == 0x000004, "Wrong alignment on MaiCharacterMovementComponent_SetCustomWalkSpeed");
static_assert(sizeof(MaiCharacterMovementComponent_SetCustomWalkSpeed) == 0x000004, "Wrong size on MaiCharacterMovementComponent_SetCustomWalkSpeed");
static_assert(offsetof(MaiCharacterMovementComponent_SetCustomWalkSpeed, NewSpeed) == 0x000000, "Member 'MaiCharacterMovementComponent_SetCustomWalkSpeed::NewSpeed' has a wrong offset!");

// Function Mai.MaiCharacterMovementComponent.SetLimitedBackwardsMovement
// 0x0004 (0x0004 - 0x0000)
struct MaiCharacterMovementComponent_SetLimitedBackwardsMovement final
{
public:
	float                                         MaximumBackwardsMovement;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCharacterMovementComponent_SetLimitedBackwardsMovement) == 0x000004, "Wrong alignment on MaiCharacterMovementComponent_SetLimitedBackwardsMovement");
static_assert(sizeof(MaiCharacterMovementComponent_SetLimitedBackwardsMovement) == 0x000004, "Wrong size on MaiCharacterMovementComponent_SetLimitedBackwardsMovement");
static_assert(offsetof(MaiCharacterMovementComponent_SetLimitedBackwardsMovement, MaximumBackwardsMovement) == 0x000000, "Member 'MaiCharacterMovementComponent_SetLimitedBackwardsMovement::MaximumBackwardsMovement' has a wrong offset!");

// Function Mai.MaiCharacterMovementComponent.SetLimitedForwardMovement
// 0x0004 (0x0004 - 0x0000)
struct MaiCharacterMovementComponent_SetLimitedForwardMovement final
{
public:
	float                                         MaximumForwardMovement;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCharacterMovementComponent_SetLimitedForwardMovement) == 0x000004, "Wrong alignment on MaiCharacterMovementComponent_SetLimitedForwardMovement");
static_assert(sizeof(MaiCharacterMovementComponent_SetLimitedForwardMovement) == 0x000004, "Wrong size on MaiCharacterMovementComponent_SetLimitedForwardMovement");
static_assert(offsetof(MaiCharacterMovementComponent_SetLimitedForwardMovement, MaximumForwardMovement) == 0x000000, "Member 'MaiCharacterMovementComponent_SetLimitedForwardMovement::MaximumForwardMovement' has a wrong offset!");

// Function Mai.MaiCharacterMovementComponent.SetLimitedMovement
// 0x000C (0x000C - 0x0000)
struct MaiCharacterMovementComponent_SetLimitedMovement final
{
public:
	float                                         MaximumForwardMovement;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumBackwardMovement;                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumSidewaysMovement;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCharacterMovementComponent_SetLimitedMovement) == 0x000004, "Wrong alignment on MaiCharacterMovementComponent_SetLimitedMovement");
static_assert(sizeof(MaiCharacterMovementComponent_SetLimitedMovement) == 0x00000C, "Wrong size on MaiCharacterMovementComponent_SetLimitedMovement");
static_assert(offsetof(MaiCharacterMovementComponent_SetLimitedMovement, MaximumForwardMovement) == 0x000000, "Member 'MaiCharacterMovementComponent_SetLimitedMovement::MaximumForwardMovement' has a wrong offset!");
static_assert(offsetof(MaiCharacterMovementComponent_SetLimitedMovement, MaximumBackwardMovement) == 0x000004, "Member 'MaiCharacterMovementComponent_SetLimitedMovement::MaximumBackwardMovement' has a wrong offset!");
static_assert(offsetof(MaiCharacterMovementComponent_SetLimitedMovement, MaximumSidewaysMovement) == 0x000008, "Member 'MaiCharacterMovementComponent_SetLimitedMovement::MaximumSidewaysMovement' has a wrong offset!");

// Function Mai.MaiCharacterMovementComponent.SetLimitedSidewaysMovement
// 0x0004 (0x0004 - 0x0000)
struct MaiCharacterMovementComponent_SetLimitedSidewaysMovement final
{
public:
	float                                         MaximumSidewaysMovement;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCharacterMovementComponent_SetLimitedSidewaysMovement) == 0x000004, "Wrong alignment on MaiCharacterMovementComponent_SetLimitedSidewaysMovement");
static_assert(sizeof(MaiCharacterMovementComponent_SetLimitedSidewaysMovement) == 0x000004, "Wrong size on MaiCharacterMovementComponent_SetLimitedSidewaysMovement");
static_assert(offsetof(MaiCharacterMovementComponent_SetLimitedSidewaysMovement, MaximumSidewaysMovement) == 0x000000, "Member 'MaiCharacterMovementComponent_SetLimitedSidewaysMovement::MaximumSidewaysMovement' has a wrong offset!");

// Function Mai.MaiCharacterMovementComponent.SetSideMovement
// 0x0001 (0x0001 - 0x0000)
struct MaiCharacterMovementComponent_SetSideMovement final
{
public:
	bool                                          Side;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCharacterMovementComponent_SetSideMovement) == 0x000001, "Wrong alignment on MaiCharacterMovementComponent_SetSideMovement");
static_assert(sizeof(MaiCharacterMovementComponent_SetSideMovement) == 0x000001, "Wrong size on MaiCharacterMovementComponent_SetSideMovement");
static_assert(offsetof(MaiCharacterMovementComponent_SetSideMovement, Side) == 0x000000, "Member 'MaiCharacterMovementComponent_SetSideMovement::Side' has a wrong offset!");

// Function Mai.MaiCharacterMovementComponent.GetLimitedBackwardsMovement
// 0x0004 (0x0004 - 0x0000)
struct MaiCharacterMovementComponent_GetLimitedBackwardsMovement final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCharacterMovementComponent_GetLimitedBackwardsMovement) == 0x000004, "Wrong alignment on MaiCharacterMovementComponent_GetLimitedBackwardsMovement");
static_assert(sizeof(MaiCharacterMovementComponent_GetLimitedBackwardsMovement) == 0x000004, "Wrong size on MaiCharacterMovementComponent_GetLimitedBackwardsMovement");
static_assert(offsetof(MaiCharacterMovementComponent_GetLimitedBackwardsMovement, ReturnValue) == 0x000000, "Member 'MaiCharacterMovementComponent_GetLimitedBackwardsMovement::ReturnValue' has a wrong offset!");

// Function Mai.MaiCharacterMovementComponent.GetLimitedForwardMovement
// 0x0004 (0x0004 - 0x0000)
struct MaiCharacterMovementComponent_GetLimitedForwardMovement final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCharacterMovementComponent_GetLimitedForwardMovement) == 0x000004, "Wrong alignment on MaiCharacterMovementComponent_GetLimitedForwardMovement");
static_assert(sizeof(MaiCharacterMovementComponent_GetLimitedForwardMovement) == 0x000004, "Wrong size on MaiCharacterMovementComponent_GetLimitedForwardMovement");
static_assert(offsetof(MaiCharacterMovementComponent_GetLimitedForwardMovement, ReturnValue) == 0x000000, "Member 'MaiCharacterMovementComponent_GetLimitedForwardMovement::ReturnValue' has a wrong offset!");

// Function Mai.MaiCharacterMovementComponent.GetLimitedSidewaysMovement
// 0x0004 (0x0004 - 0x0000)
struct MaiCharacterMovementComponent_GetLimitedSidewaysMovement final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCharacterMovementComponent_GetLimitedSidewaysMovement) == 0x000004, "Wrong alignment on MaiCharacterMovementComponent_GetLimitedSidewaysMovement");
static_assert(sizeof(MaiCharacterMovementComponent_GetLimitedSidewaysMovement) == 0x000004, "Wrong size on MaiCharacterMovementComponent_GetLimitedSidewaysMovement");
static_assert(offsetof(MaiCharacterMovementComponent_GetLimitedSidewaysMovement, ReturnValue) == 0x000000, "Member 'MaiCharacterMovementComponent_GetLimitedSidewaysMovement::ReturnValue' has a wrong offset!");

// Function Mai.MaiCharacterMovementComponent.GetMaxWalkSpeed
// 0x0004 (0x0004 - 0x0000)
struct MaiCharacterMovementComponent_GetMaxWalkSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCharacterMovementComponent_GetMaxWalkSpeed) == 0x000004, "Wrong alignment on MaiCharacterMovementComponent_GetMaxWalkSpeed");
static_assert(sizeof(MaiCharacterMovementComponent_GetMaxWalkSpeed) == 0x000004, "Wrong size on MaiCharacterMovementComponent_GetMaxWalkSpeed");
static_assert(offsetof(MaiCharacterMovementComponent_GetMaxWalkSpeed, ReturnValue) == 0x000000, "Member 'MaiCharacterMovementComponent_GetMaxWalkSpeed::ReturnValue' has a wrong offset!");

// Function Mai.MaiController.abortAction
// 0x0010 (0x0010 - 0x0000)
struct MaiController_AbortAction final
{
public:
	class AAIController*                          AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UBeingAction>               ActionClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_AbortAction) == 0x000008, "Wrong alignment on MaiController_AbortAction");
static_assert(sizeof(MaiController_AbortAction) == 0x000010, "Wrong size on MaiController_AbortAction");
static_assert(offsetof(MaiController_AbortAction, AIController) == 0x000000, "Member 'MaiController_AbortAction::AIController' has a wrong offset!");
static_assert(offsetof(MaiController_AbortAction, ActionClass) == 0x000008, "Member 'MaiController_AbortAction::ActionClass' has a wrong offset!");

// Function Mai.MaiController.abortAllActions
// 0x0010 (0x0010 - 0x0000)
struct MaiController_AbortAllActions final
{
public:
	class AAIController*                          AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InstigatedBy;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_AbortAllActions) == 0x000008, "Wrong alignment on MaiController_AbortAllActions");
static_assert(sizeof(MaiController_AbortAllActions) == 0x000010, "Wrong size on MaiController_AbortAllActions");
static_assert(offsetof(MaiController_AbortAllActions, AIController) == 0x000000, "Member 'MaiController_AbortAllActions::AIController' has a wrong offset!");
static_assert(offsetof(MaiController_AbortAllActions, InstigatedBy) == 0x000008, "Member 'MaiController_AbortAllActions::InstigatedBy' has a wrong offset!");

// Function Mai.MaiController.pushAction
// 0x0020 (0x0020 - 0x0000)
struct MaiController_PushAction final
{
public:
	class AAIController*                          AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBeingAction*                           Action;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIRequestPriority                            Priority;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 InstigatedBy;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_PushAction) == 0x000008, "Wrong alignment on MaiController_PushAction");
static_assert(sizeof(MaiController_PushAction) == 0x000020, "Wrong size on MaiController_PushAction");
static_assert(offsetof(MaiController_PushAction, AIController) == 0x000000, "Member 'MaiController_PushAction::AIController' has a wrong offset!");
static_assert(offsetof(MaiController_PushAction, Action) == 0x000008, "Member 'MaiController_PushAction::Action' has a wrong offset!");
static_assert(offsetof(MaiController_PushAction, Priority) == 0x000010, "Member 'MaiController_PushAction::Priority' has a wrong offset!");
static_assert(offsetof(MaiController_PushAction, InstigatedBy) == 0x000018, "Member 'MaiController_PushAction::InstigatedBy' has a wrong offset!");

// Function Mai.MaiController.reportTouchEvent
// 0x0028 (0x0028 - 0x0000)
struct MaiController_ReportTouchEvent final
{
public:
	class AController*                            TouchReceiver;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_ReportTouchEvent) == 0x000008, "Wrong alignment on MaiController_ReportTouchEvent");
static_assert(sizeof(MaiController_ReportTouchEvent) == 0x000028, "Wrong size on MaiController_ReportTouchEvent");
static_assert(offsetof(MaiController_ReportTouchEvent, TouchReceiver) == 0x000000, "Member 'MaiController_ReportTouchEvent::TouchReceiver' has a wrong offset!");
static_assert(offsetof(MaiController_ReportTouchEvent, Other) == 0x000008, "Member 'MaiController_ReportTouchEvent::Other' has a wrong offset!");
static_assert(offsetof(MaiController_ReportTouchEvent, Location) == 0x000010, "Member 'MaiController_ReportTouchEvent::Location' has a wrong offset!");

// Function Mai.MaiController.AbandonActionPoint
// 0x0010 (0x0010 - 0x0000)
struct MaiController_AbandonActionPoint final
{
public:
	class AMaiActionPoint*                        ActionPoint;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Immediately;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiController_AbandonActionPoint) == 0x000008, "Wrong alignment on MaiController_AbandonActionPoint");
static_assert(sizeof(MaiController_AbandonActionPoint) == 0x000010, "Wrong size on MaiController_AbandonActionPoint");
static_assert(offsetof(MaiController_AbandonActionPoint, ActionPoint) == 0x000000, "Member 'MaiController_AbandonActionPoint::ActionPoint' has a wrong offset!");
static_assert(offsetof(MaiController_AbandonActionPoint, Immediately) == 0x000008, "Member 'MaiController_AbandonActionPoint::Immediately' has a wrong offset!");

// Function Mai.MaiController.AIDebuggerTick
// 0x0010 (0x0010 - 0x0000)
struct MaiController_AIDebuggerTick final
{
public:
	class AMaiDebugger*                           Debugger;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaSeconds;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiController_AIDebuggerTick) == 0x000008, "Wrong alignment on MaiController_AIDebuggerTick");
static_assert(sizeof(MaiController_AIDebuggerTick) == 0x000010, "Wrong size on MaiController_AIDebuggerTick");
static_assert(offsetof(MaiController_AIDebuggerTick, Debugger) == 0x000000, "Member 'MaiController_AIDebuggerTick::Debugger' has a wrong offset!");
static_assert(offsetof(MaiController_AIDebuggerTick, DeltaSeconds) == 0x000008, "Member 'MaiController_AIDebuggerTick::DeltaSeconds' has a wrong offset!");

// Function Mai.MaiController.DebugLog
// 0x0020 (0x0020 - 0x0000)
struct MaiController_DebugLog final
{
public:
	class FString                                 Log;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_DebugLog) == 0x000008, "Wrong alignment on MaiController_DebugLog");
static_assert(sizeof(MaiController_DebugLog) == 0x000020, "Wrong size on MaiController_DebugLog");
static_assert(offsetof(MaiController_DebugLog, Log) == 0x000000, "Member 'MaiController_DebugLog::Log' has a wrong offset!");
static_assert(offsetof(MaiController_DebugLog, Color) == 0x000010, "Member 'MaiController_DebugLog::Color' has a wrong offset!");

// Function Mai.MaiController.DisableBehaviorTree
// 0x0008 (0x0008 - 0x0000)
struct MaiController_DisableBehaviorTree final
{
public:
	class FName                                   Reason;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_DisableBehaviorTree) == 0x000004, "Wrong alignment on MaiController_DisableBehaviorTree");
static_assert(sizeof(MaiController_DisableBehaviorTree) == 0x000008, "Wrong size on MaiController_DisableBehaviorTree");
static_assert(offsetof(MaiController_DisableBehaviorTree, Reason) == 0x000000, "Member 'MaiController_DisableBehaviorTree::Reason' has a wrong offset!");

// Function Mai.MaiController.EnableBehaviorTree
// 0x0008 (0x0008 - 0x0000)
struct MaiController_EnableBehaviorTree final
{
public:
	class FName                                   Reason;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_EnableBehaviorTree) == 0x000004, "Wrong alignment on MaiController_EnableBehaviorTree");
static_assert(sizeof(MaiController_EnableBehaviorTree) == 0x000008, "Wrong size on MaiController_EnableBehaviorTree");
static_assert(offsetof(MaiController_EnableBehaviorTree, Reason) == 0x000000, "Member 'MaiController_EnableBehaviorTree::Reason' has a wrong offset!");

// Function Mai.MaiController.FilterActionPointsByCooldown
// 0x0020 (0x0020 - 0x0000)
struct MaiController_FilterActionPointsByCooldown final
{
public:
	TArray<class AMaiActionPoint*>                InPoints;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AMaiActionPoint*>                OutPoints;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_FilterActionPointsByCooldown) == 0x000008, "Wrong alignment on MaiController_FilterActionPointsByCooldown");
static_assert(sizeof(MaiController_FilterActionPointsByCooldown) == 0x000020, "Wrong size on MaiController_FilterActionPointsByCooldown");
static_assert(offsetof(MaiController_FilterActionPointsByCooldown, InPoints) == 0x000000, "Member 'MaiController_FilterActionPointsByCooldown::InPoints' has a wrong offset!");
static_assert(offsetof(MaiController_FilterActionPointsByCooldown, OutPoints) == 0x000010, "Member 'MaiController_FilterActionPointsByCooldown::OutPoints' has a wrong offset!");

// Function Mai.MaiController.FilterGraphPointsScript
// 0x0028 (0x0028 - 0x0000)
struct MaiController_FilterGraphPointsScript final
{
public:
	TArray<class AMaiActionPoint*>                InPoints;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AMaiActionPoint*>                OutPoints;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class AActor*                                 Origin;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_FilterGraphPointsScript) == 0x000008, "Wrong alignment on MaiController_FilterGraphPointsScript");
static_assert(sizeof(MaiController_FilterGraphPointsScript) == 0x000028, "Wrong size on MaiController_FilterGraphPointsScript");
static_assert(offsetof(MaiController_FilterGraphPointsScript, InPoints) == 0x000000, "Member 'MaiController_FilterGraphPointsScript::InPoints' has a wrong offset!");
static_assert(offsetof(MaiController_FilterGraphPointsScript, OutPoints) == 0x000010, "Member 'MaiController_FilterGraphPointsScript::OutPoints' has a wrong offset!");
static_assert(offsetof(MaiController_FilterGraphPointsScript, Origin) == 0x000020, "Member 'MaiController_FilterGraphPointsScript::Origin' has a wrong offset!");

// Function Mai.MaiController.GetActionGraph
// 0x0008 (0x0008 - 0x0000)
struct MaiController_GetActionGraph final
{
public:
	class AMaiActionGraph*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_GetActionGraph) == 0x000008, "Wrong alignment on MaiController_GetActionGraph");
static_assert(sizeof(MaiController_GetActionGraph) == 0x000008, "Wrong size on MaiController_GetActionGraph");
static_assert(offsetof(MaiController_GetActionGraph, ReturnValue) == 0x000000, "Member 'MaiController_GetActionGraph::ReturnValue' has a wrong offset!");

// Function Mai.MaiController.GetSenseConfig
// 0x0010 (0x0010 - 0x0000)
struct MaiController_GetSenseConfig final
{
public:
	TSubclassOf<class UAISense>                   SenseClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAISenseConfig*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_GetSenseConfig) == 0x000008, "Wrong alignment on MaiController_GetSenseConfig");
static_assert(sizeof(MaiController_GetSenseConfig) == 0x000010, "Wrong size on MaiController_GetSenseConfig");
static_assert(offsetof(MaiController_GetSenseConfig, SenseClass) == 0x000000, "Member 'MaiController_GetSenseConfig::SenseClass' has a wrong offset!");
static_assert(offsetof(MaiController_GetSenseConfig, ReturnValue) == 0x000008, "Member 'MaiController_GetSenseConfig::ReturnValue' has a wrong offset!");

// Function Mai.MaiController.GetWallPathFollowing
// 0x0008 (0x0008 - 0x0000)
struct MaiController_GetWallPathFollowing final
{
public:
	class UMaiWallFollowing*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_GetWallPathFollowing) == 0x000008, "Wrong alignment on MaiController_GetWallPathFollowing");
static_assert(sizeof(MaiController_GetWallPathFollowing) == 0x000008, "Wrong size on MaiController_GetWallPathFollowing");
static_assert(offsetof(MaiController_GetWallPathFollowing, ReturnValue) == 0x000000, "Member 'MaiController_GetWallPathFollowing::ReturnValue' has a wrong offset!");

// Function Mai.MaiController.IgnorePoint
// 0x0010 (0x0010 - 0x0000)
struct MaiController_IgnorePoint final
{
public:
	class AMaiActionPoint*                        Point;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Cooldown;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiController_IgnorePoint) == 0x000008, "Wrong alignment on MaiController_IgnorePoint");
static_assert(sizeof(MaiController_IgnorePoint) == 0x000010, "Wrong size on MaiController_IgnorePoint");
static_assert(offsetof(MaiController_IgnorePoint, Point) == 0x000000, "Member 'MaiController_IgnorePoint::Point' has a wrong offset!");
static_assert(offsetof(MaiController_IgnorePoint, Cooldown) == 0x000008, "Member 'MaiController_IgnorePoint::Cooldown' has a wrong offset!");

// Function Mai.MaiController.IsCurrentlyPerceived
// 0x0070 (0x0070 - 0x0000)
struct MaiController_IsCurrentlyPerceived final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyHostile;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAIStimulus                            Stimulus;                                          // 0x0010(0x0058)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiController_IsCurrentlyPerceived) == 0x000008, "Wrong alignment on MaiController_IsCurrentlyPerceived");
static_assert(sizeof(MaiController_IsCurrentlyPerceived) == 0x000070, "Wrong size on MaiController_IsCurrentlyPerceived");
static_assert(offsetof(MaiController_IsCurrentlyPerceived, Actor) == 0x000000, "Member 'MaiController_IsCurrentlyPerceived::Actor' has a wrong offset!");
static_assert(offsetof(MaiController_IsCurrentlyPerceived, OnlyHostile) == 0x000008, "Member 'MaiController_IsCurrentlyPerceived::OnlyHostile' has a wrong offset!");
static_assert(offsetof(MaiController_IsCurrentlyPerceived, Stimulus) == 0x000010, "Member 'MaiController_IsCurrentlyPerceived::Stimulus' has a wrong offset!");
static_assert(offsetof(MaiController_IsCurrentlyPerceived, ReturnValue) == 0x000068, "Member 'MaiController_IsCurrentlyPerceived::ReturnValue' has a wrong offset!");

// Function Mai.MaiController.IsLocationSafe
// 0x0020 (0x0020 - 0x0000)
struct MaiController_IsLocationSafe final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiController_IsLocationSafe) == 0x000008, "Wrong alignment on MaiController_IsLocationSafe");
static_assert(sizeof(MaiController_IsLocationSafe) == 0x000020, "Wrong size on MaiController_IsLocationSafe");
static_assert(offsetof(MaiController_IsLocationSafe, Location) == 0x000000, "Member 'MaiController_IsLocationSafe::Location' has a wrong offset!");
static_assert(offsetof(MaiController_IsLocationSafe, ReturnValue) == 0x000018, "Member 'MaiController_IsLocationSafe::ReturnValue' has a wrong offset!");

// Function Mai.MaiController.OnActionGraphChanged
// 0x0008 (0x0008 - 0x0000)
struct MaiController_OnActionGraphChanged final
{
public:
	class AMaiActionGraph*                        ActionGraph;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_OnActionGraphChanged) == 0x000008, "Wrong alignment on MaiController_OnActionGraphChanged");
static_assert(sizeof(MaiController_OnActionGraphChanged) == 0x000008, "Wrong size on MaiController_OnActionGraphChanged");
static_assert(offsetof(MaiController_OnActionGraphChanged, ActionGraph) == 0x000000, "Member 'MaiController_OnActionGraphChanged::ActionGraph' has a wrong offset!");

// Function Mai.MaiController.OnActionPointAbandoned
// 0x0008 (0x0008 - 0x0000)
struct MaiController_OnActionPointAbandoned final
{
public:
	class AMaiActionPoint*                        ActionPoint;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_OnActionPointAbandoned) == 0x000008, "Wrong alignment on MaiController_OnActionPointAbandoned");
static_assert(sizeof(MaiController_OnActionPointAbandoned) == 0x000008, "Wrong size on MaiController_OnActionPointAbandoned");
static_assert(offsetof(MaiController_OnActionPointAbandoned, ActionPoint) == 0x000000, "Member 'MaiController_OnActionPointAbandoned::ActionPoint' has a wrong offset!");

// Function Mai.MaiController.OnActionPointReached
// 0x0008 (0x0008 - 0x0000)
struct MaiController_OnActionPointReached final
{
public:
	class AMaiActionPoint*                        ActionPoint;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_OnActionPointReached) == 0x000008, "Wrong alignment on MaiController_OnActionPointReached");
static_assert(sizeof(MaiController_OnActionPointReached) == 0x000008, "Wrong size on MaiController_OnActionPointReached");
static_assert(offsetof(MaiController_OnActionPointReached, ActionPoint) == 0x000000, "Member 'MaiController_OnActionPointReached::ActionPoint' has a wrong offset!");

// Function Mai.MaiController.OnActionPointSelected
// 0x0008 (0x0008 - 0x0000)
struct MaiController_OnActionPointSelected final
{
public:
	class AMaiActionPoint*                        ActionPoint;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_OnActionPointSelected) == 0x000008, "Wrong alignment on MaiController_OnActionPointSelected");
static_assert(sizeof(MaiController_OnActionPointSelected) == 0x000008, "Wrong size on MaiController_OnActionPointSelected");
static_assert(offsetof(MaiController_OnActionPointSelected, ActionPoint) == 0x000000, "Member 'MaiController_OnActionPointSelected::ActionPoint' has a wrong offset!");

// Function Mai.MaiController.OnPerceived
// 0x0060 (0x0060 - 0x0000)
struct MaiController_OnPerceived final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIStimulus                            Stimulus;                                          // 0x0008(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_OnPerceived) == 0x000008, "Wrong alignment on MaiController_OnPerceived");
static_assert(sizeof(MaiController_OnPerceived) == 0x000060, "Wrong size on MaiController_OnPerceived");
static_assert(offsetof(MaiController_OnPerceived, Actor) == 0x000000, "Member 'MaiController_OnPerceived::Actor' has a wrong offset!");
static_assert(offsetof(MaiController_OnPerceived, Stimulus) == 0x000008, "Member 'MaiController_OnPerceived::Stimulus' has a wrong offset!");

// Function Mai.MaiController.OnPointerLoaded
// 0x0010 (0x0010 - 0x0000)
struct MaiController_OnPointerLoaded final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_OnPointerLoaded) == 0x000008, "Wrong alignment on MaiController_OnPointerLoaded");
static_assert(sizeof(MaiController_OnPointerLoaded) == 0x000010, "Wrong size on MaiController_OnPointerLoaded");
static_assert(offsetof(MaiController_OnPointerLoaded, Key) == 0x000000, "Member 'MaiController_OnPointerLoaded::Key' has a wrong offset!");
static_assert(offsetof(MaiController_OnPointerLoaded, Actor) == 0x000008, "Member 'MaiController_OnPointerLoaded::Actor' has a wrong offset!");

// Function Mai.MaiController.PopBehaviorName
// 0x0008 (0x0008 - 0x0000)
struct MaiController_PopBehaviorName final
{
public:
	class FName                                   behaviorName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_PopBehaviorName) == 0x000004, "Wrong alignment on MaiController_PopBehaviorName");
static_assert(sizeof(MaiController_PopBehaviorName) == 0x000008, "Wrong size on MaiController_PopBehaviorName");
static_assert(offsetof(MaiController_PopBehaviorName, behaviorName) == 0x000000, "Member 'MaiController_PopBehaviorName::behaviorName' has a wrong offset!");

// Function Mai.MaiController.PushBehaviorName
// 0x0008 (0x0008 - 0x0000)
struct MaiController_PushBehaviorName final
{
public:
	class FName                                   behaviorName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_PushBehaviorName) == 0x000004, "Wrong alignment on MaiController_PushBehaviorName");
static_assert(sizeof(MaiController_PushBehaviorName) == 0x000008, "Wrong size on MaiController_PushBehaviorName");
static_assert(offsetof(MaiController_PushBehaviorName, behaviorName) == 0x000000, "Member 'MaiController_PushBehaviorName::behaviorName' has a wrong offset!");

// Function Mai.MaiController.ReachCurrentActionPoint
// 0x000C (0x000C - 0x0000)
struct MaiController_ReachCurrentActionPoint final
{
public:
	struct FGameplayTag                           InjectTag;                                         // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RunActions;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiController_ReachCurrentActionPoint) == 0x000004, "Wrong alignment on MaiController_ReachCurrentActionPoint");
static_assert(sizeof(MaiController_ReachCurrentActionPoint) == 0x00000C, "Wrong size on MaiController_ReachCurrentActionPoint");
static_assert(offsetof(MaiController_ReachCurrentActionPoint, InjectTag) == 0x000000, "Member 'MaiController_ReachCurrentActionPoint::InjectTag' has a wrong offset!");
static_assert(offsetof(MaiController_ReachCurrentActionPoint, RunActions) == 0x000008, "Member 'MaiController_ReachCurrentActionPoint::RunActions' has a wrong offset!");

// Function Mai.MaiController.ReceiveTokens
// 0x0002 (0x0002 - 0x0000)
struct MaiController_ReceiveTokens final
{
public:
	uint8                                         Pool;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_ReceiveTokens) == 0x000001, "Wrong alignment on MaiController_ReceiveTokens");
static_assert(sizeof(MaiController_ReceiveTokens) == 0x000002, "Wrong size on MaiController_ReceiveTokens");
static_assert(offsetof(MaiController_ReceiveTokens, Pool) == 0x000000, "Member 'MaiController_ReceiveTokens::Pool' has a wrong offset!");
static_assert(offsetof(MaiController_ReceiveTokens, ReturnValue) == 0x000001, "Member 'MaiController_ReceiveTokens::ReturnValue' has a wrong offset!");

// Function Mai.MaiController.RunActionPointActions
// 0x0010 (0x0010 - 0x0000)
struct MaiController_RunActionPointActions final
{
public:
	struct FGameplayTag                           InjectTag;                                         // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMaiActionPoint*                        ActionPoint;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_RunActionPointActions) == 0x000008, "Wrong alignment on MaiController_RunActionPointActions");
static_assert(sizeof(MaiController_RunActionPointActions) == 0x000010, "Wrong size on MaiController_RunActionPointActions");
static_assert(offsetof(MaiController_RunActionPointActions, InjectTag) == 0x000000, "Member 'MaiController_RunActionPointActions::InjectTag' has a wrong offset!");
static_assert(offsetof(MaiController_RunActionPointActions, ActionPoint) == 0x000008, "Member 'MaiController_RunActionPointActions::ActionPoint' has a wrong offset!");

// Function Mai.MaiController.RunActionPointWaitWork
// 0x0010 (0x0010 - 0x0000)
struct MaiController_RunActionPointWaitWork final
{
public:
	struct FGameplayTag                           InjectTag;                                         // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMaiActionPoint*                        ActionPoint;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_RunActionPointWaitWork) == 0x000008, "Wrong alignment on MaiController_RunActionPointWaitWork");
static_assert(sizeof(MaiController_RunActionPointWaitWork) == 0x000010, "Wrong size on MaiController_RunActionPointWaitWork");
static_assert(offsetof(MaiController_RunActionPointWaitWork, InjectTag) == 0x000000, "Member 'MaiController_RunActionPointWaitWork::InjectTag' has a wrong offset!");
static_assert(offsetof(MaiController_RunActionPointWaitWork, ActionPoint) == 0x000008, "Member 'MaiController_RunActionPointWaitWork::ActionPoint' has a wrong offset!");

// Function Mai.MaiController.SaveActorPointer
// 0x0010 (0x0010 - 0x0000)
struct MaiController_SaveActorPointer final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_SaveActorPointer) == 0x000008, "Wrong alignment on MaiController_SaveActorPointer");
static_assert(sizeof(MaiController_SaveActorPointer) == 0x000010, "Wrong size on MaiController_SaveActorPointer");
static_assert(offsetof(MaiController_SaveActorPointer, Key) == 0x000000, "Member 'MaiController_SaveActorPointer::Key' has a wrong offset!");
static_assert(offsetof(MaiController_SaveActorPointer, Actor) == 0x000008, "Member 'MaiController_SaveActorPointer::Actor' has a wrong offset!");

// Function Mai.MaiController.SelectActionPoint
// 0x0068 (0x0068 - 0x0000)
struct MaiController_SelectActionPoint final
{
public:
	TMap<class AMaiActionPoint*, uint8>           ActionPoints;                                      // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
	EPointSelection                               Method;                                            // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Origin;                                            // 0x0058(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiController_SelectActionPoint) == 0x000008, "Wrong alignment on MaiController_SelectActionPoint");
static_assert(sizeof(MaiController_SelectActionPoint) == 0x000068, "Wrong size on MaiController_SelectActionPoint");
static_assert(offsetof(MaiController_SelectActionPoint, ActionPoints) == 0x000000, "Member 'MaiController_SelectActionPoint::ActionPoints' has a wrong offset!");
static_assert(offsetof(MaiController_SelectActionPoint, Method) == 0x000050, "Member 'MaiController_SelectActionPoint::Method' has a wrong offset!");
static_assert(offsetof(MaiController_SelectActionPoint, Origin) == 0x000058, "Member 'MaiController_SelectActionPoint::Origin' has a wrong offset!");
static_assert(offsetof(MaiController_SelectActionPoint, ReturnValue) == 0x000060, "Member 'MaiController_SelectActionPoint::ReturnValue' has a wrong offset!");

// Function Mai.MaiController.SelectNearestActionGraph
// 0x0008 (0x0008 - 0x0000)
struct MaiController_SelectNearestActionGraph final
{
public:
	class FName                                   GraphTag;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_SelectNearestActionGraph) == 0x000004, "Wrong alignment on MaiController_SelectNearestActionGraph");
static_assert(sizeof(MaiController_SelectNearestActionGraph) == 0x000008, "Wrong size on MaiController_SelectNearestActionGraph");
static_assert(offsetof(MaiController_SelectNearestActionGraph, GraphTag) == 0x000000, "Member 'MaiController_SelectNearestActionGraph::GraphTag' has a wrong offset!");

// Function Mai.MaiController.SelectNextActionPoint
// 0x0018 (0x0018 - 0x0000)
struct MaiController_SelectNextActionPoint final
{
public:
	EPointSelection                               Method;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Origin;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiController_SelectNextActionPoint) == 0x000008, "Wrong alignment on MaiController_SelectNextActionPoint");
static_assert(sizeof(MaiController_SelectNextActionPoint) == 0x000018, "Wrong size on MaiController_SelectNextActionPoint");
static_assert(offsetof(MaiController_SelectNextActionPoint, Method) == 0x000000, "Member 'MaiController_SelectNextActionPoint::Method' has a wrong offset!");
static_assert(offsetof(MaiController_SelectNextActionPoint, Origin) == 0x000008, "Member 'MaiController_SelectNextActionPoint::Origin' has a wrong offset!");
static_assert(offsetof(MaiController_SelectNextActionPoint, ReturnValue) == 0x000010, "Member 'MaiController_SelectNextActionPoint::ReturnValue' has a wrong offset!");

// Function Mai.MaiController.SetCurrentActionGraph
// 0x0008 (0x0008 - 0x0000)
struct MaiController_SetCurrentActionGraph final
{
public:
	class AMaiActionGraph*                        PointGraph;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_SetCurrentActionGraph) == 0x000008, "Wrong alignment on MaiController_SetCurrentActionGraph");
static_assert(sizeof(MaiController_SetCurrentActionGraph) == 0x000008, "Wrong size on MaiController_SetCurrentActionGraph");
static_assert(offsetof(MaiController_SetCurrentActionGraph, PointGraph) == 0x000000, "Member 'MaiController_SetCurrentActionGraph::PointGraph' has a wrong offset!");

// Function Mai.MaiController.SetCurrentActionPoint
// 0x0010 (0x0010 - 0x0000)
struct MaiController_SetCurrentActionPoint final
{
public:
	class AMaiActionPoint*                        ActionPoint;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Reset;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiController_SetCurrentActionPoint) == 0x000008, "Wrong alignment on MaiController_SetCurrentActionPoint");
static_assert(sizeof(MaiController_SetCurrentActionPoint) == 0x000010, "Wrong size on MaiController_SetCurrentActionPoint");
static_assert(offsetof(MaiController_SetCurrentActionPoint, ActionPoint) == 0x000000, "Member 'MaiController_SetCurrentActionPoint::ActionPoint' has a wrong offset!");
static_assert(offsetof(MaiController_SetCurrentActionPoint, Reset) == 0x000008, "Member 'MaiController_SetCurrentActionPoint::Reset' has a wrong offset!");
static_assert(offsetof(MaiController_SetCurrentActionPoint, ReturnValue) == 0x000009, "Member 'MaiController_SetCurrentActionPoint::ReturnValue' has a wrong offset!");

// Function Mai.MaiController.SetDespawnLocation
// 0x0018 (0x0018 - 0x0000)
struct MaiController_SetDespawnLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_SetDespawnLocation) == 0x000008, "Wrong alignment on MaiController_SetDespawnLocation");
static_assert(sizeof(MaiController_SetDespawnLocation) == 0x000018, "Wrong size on MaiController_SetDespawnLocation");
static_assert(offsetof(MaiController_SetDespawnLocation, Location) == 0x000000, "Member 'MaiController_SetDespawnLocation::Location' has a wrong offset!");

// Function Mai.MaiController.SetGoalActionPoint
// 0x0018 (0x0018 - 0x0000)
struct MaiController_SetGoalActionPoint final
{
public:
	class AMaiActionPoint*                        GoalPoint;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMaiActionPoint*                        SubgoalPoint;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SequenceTag;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_SetGoalActionPoint) == 0x000008, "Wrong alignment on MaiController_SetGoalActionPoint");
static_assert(sizeof(MaiController_SetGoalActionPoint) == 0x000018, "Wrong size on MaiController_SetGoalActionPoint");
static_assert(offsetof(MaiController_SetGoalActionPoint, GoalPoint) == 0x000000, "Member 'MaiController_SetGoalActionPoint::GoalPoint' has a wrong offset!");
static_assert(offsetof(MaiController_SetGoalActionPoint, SubgoalPoint) == 0x000008, "Member 'MaiController_SetGoalActionPoint::SubgoalPoint' has a wrong offset!");
static_assert(offsetof(MaiController_SetGoalActionPoint, SequenceTag) == 0x000010, "Member 'MaiController_SetGoalActionPoint::SequenceTag' has a wrong offset!");

// Function Mai.MaiController.SetPartyID
// 0x0001 (0x0001 - 0x0000)
struct MaiController_SetPartyID final
{
public:
	uint8                                         PartyID;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_SetPartyID) == 0x000001, "Wrong alignment on MaiController_SetPartyID");
static_assert(sizeof(MaiController_SetPartyID) == 0x000001, "Wrong size on MaiController_SetPartyID");
static_assert(offsetof(MaiController_SetPartyID, PartyID) == 0x000000, "Member 'MaiController_SetPartyID::PartyID' has a wrong offset!");

// Function Mai.MaiController.TeleportFrom
// 0x0020 (0x0020 - 0x0000)
struct MaiController_TeleportFrom final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceDirect;                                       // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiController_TeleportFrom) == 0x000008, "Wrong alignment on MaiController_TeleportFrom");
static_assert(sizeof(MaiController_TeleportFrom) == 0x000020, "Wrong size on MaiController_TeleportFrom");
static_assert(offsetof(MaiController_TeleportFrom, Location) == 0x000000, "Member 'MaiController_TeleportFrom::Location' has a wrong offset!");
static_assert(offsetof(MaiController_TeleportFrom, Distance) == 0x000018, "Member 'MaiController_TeleportFrom::Distance' has a wrong offset!");
static_assert(offsetof(MaiController_TeleportFrom, ForceDirect) == 0x00001C, "Member 'MaiController_TeleportFrom::ForceDirect' has a wrong offset!");
static_assert(offsetof(MaiController_TeleportFrom, ReturnValue) == 0x00001D, "Member 'MaiController_TeleportFrom::ReturnValue' has a wrong offset!");

// Function Mai.MaiController.TeleportInFrontOf
// 0x0010 (0x0010 - 0x0000)
struct MaiController_TeleportInFrontOf final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiController_TeleportInFrontOf) == 0x000008, "Wrong alignment on MaiController_TeleportInFrontOf");
static_assert(sizeof(MaiController_TeleportInFrontOf) == 0x000010, "Wrong size on MaiController_TeleportInFrontOf");
static_assert(offsetof(MaiController_TeleportInFrontOf, Actor) == 0x000000, "Member 'MaiController_TeleportInFrontOf::Actor' has a wrong offset!");
static_assert(offsetof(MaiController_TeleportInFrontOf, Distance) == 0x000008, "Member 'MaiController_TeleportInFrontOf::Distance' has a wrong offset!");
static_assert(offsetof(MaiController_TeleportInFrontOf, ReturnValue) == 0x00000C, "Member 'MaiController_TeleportInFrontOf::ReturnValue' has a wrong offset!");

// Function Mai.MaiController.TeleportTowards
// 0x0020 (0x0020 - 0x0000)
struct MaiController_TeleportTowards final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiController_TeleportTowards) == 0x000008, "Wrong alignment on MaiController_TeleportTowards");
static_assert(sizeof(MaiController_TeleportTowards) == 0x000020, "Wrong size on MaiController_TeleportTowards");
static_assert(offsetof(MaiController_TeleportTowards, Location) == 0x000000, "Member 'MaiController_TeleportTowards::Location' has a wrong offset!");
static_assert(offsetof(MaiController_TeleportTowards, Distance) == 0x000018, "Member 'MaiController_TeleportTowards::Distance' has a wrong offset!");
static_assert(offsetof(MaiController_TeleportTowards, ReturnValue) == 0x00001C, "Member 'MaiController_TeleportTowards::ReturnValue' has a wrong offset!");

// Function Mai.MaiController.GetNavData
// 0x0008 (0x0008 - 0x0000)
struct MaiController_GetNavData final
{
public:
	class ANavigationData*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_GetNavData) == 0x000008, "Wrong alignment on MaiController_GetNavData");
static_assert(sizeof(MaiController_GetNavData) == 0x000008, "Wrong size on MaiController_GetNavData");
static_assert(offsetof(MaiController_GetNavData, ReturnValue) == 0x000000, "Member 'MaiController_GetNavData::ReturnValue' has a wrong offset!");

// Function Mai.MaiController.GetPartyID
// 0x0001 (0x0001 - 0x0000)
struct MaiController_GetPartyID final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_GetPartyID) == 0x000001, "Wrong alignment on MaiController_GetPartyID");
static_assert(sizeof(MaiController_GetPartyID) == 0x000001, "Wrong size on MaiController_GetPartyID");
static_assert(offsetof(MaiController_GetPartyID, ReturnValue) == 0x000000, "Member 'MaiController_GetPartyID::ReturnValue' has a wrong offset!");

// Function Mai.MaiController.GetPrevActionPoint
// 0x0008 (0x0008 - 0x0000)
struct MaiController_GetPrevActionPoint final
{
public:
	class AMaiActionPoint*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_GetPrevActionPoint) == 0x000008, "Wrong alignment on MaiController_GetPrevActionPoint");
static_assert(sizeof(MaiController_GetPrevActionPoint) == 0x000008, "Wrong size on MaiController_GetPrevActionPoint");
static_assert(offsetof(MaiController_GetPrevActionPoint, ReturnValue) == 0x000000, "Member 'MaiController_GetPrevActionPoint::ReturnValue' has a wrong offset!");

// Function Mai.MaiController.GetWorkLocation
// 0x0018 (0x0018 - 0x0000)
struct MaiController_GetWorkLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_GetWorkLocation) == 0x000008, "Wrong alignment on MaiController_GetWorkLocation");
static_assert(sizeof(MaiController_GetWorkLocation) == 0x000018, "Wrong size on MaiController_GetWorkLocation");
static_assert(offsetof(MaiController_GetWorkLocation, ReturnValue) == 0x000000, "Member 'MaiController_GetWorkLocation::ReturnValue' has a wrong offset!");

// Function Mai.MaiController.GetYoungestStimulusAge
// 0x0010 (0x0010 - 0x0000)
struct MaiController_GetYoungestStimulusAge final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiController_GetYoungestStimulusAge) == 0x000008, "Wrong alignment on MaiController_GetYoungestStimulusAge");
static_assert(sizeof(MaiController_GetYoungestStimulusAge) == 0x000010, "Wrong size on MaiController_GetYoungestStimulusAge");
static_assert(offsetof(MaiController_GetYoungestStimulusAge, Actor) == 0x000000, "Member 'MaiController_GetYoungestStimulusAge::Actor' has a wrong offset!");
static_assert(offsetof(MaiController_GetYoungestStimulusAge, ReturnValue) == 0x000008, "Member 'MaiController_GetYoungestStimulusAge::ReturnValue' has a wrong offset!");

// Function Mai.MaiController.HasAction
// 0x0010 (0x0010 - 0x0000)
struct MaiController_HasAction final
{
public:
	TSubclassOf<class UBeingAction>               ActionClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiController_HasAction) == 0x000008, "Wrong alignment on MaiController_HasAction");
static_assert(sizeof(MaiController_HasAction) == 0x000010, "Wrong size on MaiController_HasAction");
static_assert(offsetof(MaiController_HasAction, ActionClass) == 0x000000, "Member 'MaiController_HasAction::ActionClass' has a wrong offset!");
static_assert(offsetof(MaiController_HasAction, ReturnValue) == 0x000008, "Member 'MaiController_HasAction::ReturnValue' has a wrong offset!");

// Function Mai.MaiController.HasAnyAction
// 0x0001 (0x0001 - 0x0000)
struct MaiController_HasAnyAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_HasAnyAction) == 0x000001, "Wrong alignment on MaiController_HasAnyAction");
static_assert(sizeof(MaiController_HasAnyAction) == 0x000001, "Wrong size on MaiController_HasAnyAction");
static_assert(offsetof(MaiController_HasAnyAction, ReturnValue) == 0x000000, "Member 'MaiController_HasAnyAction::ReturnValue' has a wrong offset!");

// Function Mai.MaiController.HasAnyBehaviorName
// 0x0018 (0x0018 - 0x0000)
struct MaiController_HasAnyBehaviorName final
{
public:
	TArray<class FName>                           behaviorNames;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiController_HasAnyBehaviorName) == 0x000008, "Wrong alignment on MaiController_HasAnyBehaviorName");
static_assert(sizeof(MaiController_HasAnyBehaviorName) == 0x000018, "Wrong size on MaiController_HasAnyBehaviorName");
static_assert(offsetof(MaiController_HasAnyBehaviorName, behaviorNames) == 0x000000, "Member 'MaiController_HasAnyBehaviorName::behaviorNames' has a wrong offset!");
static_assert(offsetof(MaiController_HasAnyBehaviorName, ReturnValue) == 0x000010, "Member 'MaiController_HasAnyBehaviorName::ReturnValue' has a wrong offset!");

// Function Mai.MaiController.HasBehaviorName
// 0x000C (0x000C - 0x0000)
struct MaiController_HasBehaviorName final
{
public:
	class FName                                   behaviorName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiController_HasBehaviorName) == 0x000004, "Wrong alignment on MaiController_HasBehaviorName");
static_assert(sizeof(MaiController_HasBehaviorName) == 0x00000C, "Wrong size on MaiController_HasBehaviorName");
static_assert(offsetof(MaiController_HasBehaviorName, behaviorName) == 0x000000, "Member 'MaiController_HasBehaviorName::behaviorName' has a wrong offset!");
static_assert(offsetof(MaiController_HasBehaviorName, ReturnValue) == 0x000008, "Member 'MaiController_HasBehaviorName::ReturnValue' has a wrong offset!");

// Function Mai.MaiController.HasValidNavData
// 0x0001 (0x0001 - 0x0000)
struct MaiController_HasValidNavData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_HasValidNavData) == 0x000001, "Wrong alignment on MaiController_HasValidNavData");
static_assert(sizeof(MaiController_HasValidNavData) == 0x000001, "Wrong size on MaiController_HasValidNavData");
static_assert(offsetof(MaiController_HasValidNavData, ReturnValue) == 0x000000, "Member 'MaiController_HasValidNavData::ReturnValue' has a wrong offset!");

// Function Mai.MaiController.HavePlaceToAvoid
// 0x0010 (0x0010 - 0x0000)
struct MaiController_HavePlaceToAvoid final
{
public:
	class APawn*                                  Other;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiController_HavePlaceToAvoid) == 0x000008, "Wrong alignment on MaiController_HavePlaceToAvoid");
static_assert(sizeof(MaiController_HavePlaceToAvoid) == 0x000010, "Wrong size on MaiController_HavePlaceToAvoid");
static_assert(offsetof(MaiController_HavePlaceToAvoid, Other) == 0x000000, "Member 'MaiController_HavePlaceToAvoid::Other' has a wrong offset!");
static_assert(offsetof(MaiController_HavePlaceToAvoid, ReturnValue) == 0x000008, "Member 'MaiController_HavePlaceToAvoid::ReturnValue' has a wrong offset!");

// Function Mai.MaiController.IsBehaviorTreeRunning
// 0x0001 (0x0001 - 0x0000)
struct MaiController_IsBehaviorTreeRunning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_IsBehaviorTreeRunning) == 0x000001, "Wrong alignment on MaiController_IsBehaviorTreeRunning");
static_assert(sizeof(MaiController_IsBehaviorTreeRunning) == 0x000001, "Wrong size on MaiController_IsBehaviorTreeRunning");
static_assert(offsetof(MaiController_IsBehaviorTreeRunning, ReturnValue) == 0x000000, "Member 'MaiController_IsBehaviorTreeRunning::ReturnValue' has a wrong offset!");

// Function Mai.MaiController.IsCurrentActionPointReached
// 0x0001 (0x0001 - 0x0000)
struct MaiController_IsCurrentActionPointReached final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_IsCurrentActionPointReached) == 0x000001, "Wrong alignment on MaiController_IsCurrentActionPointReached");
static_assert(sizeof(MaiController_IsCurrentActionPointReached) == 0x000001, "Wrong size on MaiController_IsCurrentActionPointReached");
static_assert(offsetof(MaiController_IsCurrentActionPointReached, ReturnValue) == 0x000000, "Member 'MaiController_IsCurrentActionPointReached::ReturnValue' has a wrong offset!");

// Function Mai.MaiController.IsCurrentWayPointReached
// 0x0001 (0x0001 - 0x0000)
struct MaiController_IsCurrentWayPointReached final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_IsCurrentWayPointReached) == 0x000001, "Wrong alignment on MaiController_IsCurrentWayPointReached");
static_assert(sizeof(MaiController_IsCurrentWayPointReached) == 0x000001, "Wrong size on MaiController_IsCurrentWayPointReached");
static_assert(offsetof(MaiController_IsCurrentWayPointReached, ReturnValue) == 0x000000, "Member 'MaiController_IsCurrentWayPointReached::ReturnValue' has a wrong offset!");

// Function Mai.MaiController.IsIndoor
// 0x0001 (0x0001 - 0x0000)
struct MaiController_IsIndoor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_IsIndoor) == 0x000001, "Wrong alignment on MaiController_IsIndoor");
static_assert(sizeof(MaiController_IsIndoor) == 0x000001, "Wrong size on MaiController_IsIndoor");
static_assert(offsetof(MaiController_IsIndoor, ReturnValue) == 0x000000, "Member 'MaiController_IsIndoor::ReturnValue' has a wrong offset!");

// Function Mai.MaiController.TopBehaviorName
// 0x0008 (0x0008 - 0x0000)
struct MaiController_TopBehaviorName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiController_TopBehaviorName) == 0x000004, "Wrong alignment on MaiController_TopBehaviorName");
static_assert(sizeof(MaiController_TopBehaviorName) == 0x000008, "Wrong size on MaiController_TopBehaviorName");
static_assert(offsetof(MaiController_TopBehaviorName, ReturnValue) == 0x000000, "Member 'MaiController_TopBehaviorName::ReturnValue' has a wrong offset!");

// Function Mai.MaiControllerExt.FindEnemyToFight
// 0x0008 (0x0008 - 0x0000)
struct MaiControllerExt_FindEnemyToFight final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiControllerExt_FindEnemyToFight) == 0x000008, "Wrong alignment on MaiControllerExt_FindEnemyToFight");
static_assert(sizeof(MaiControllerExt_FindEnemyToFight) == 0x000008, "Wrong size on MaiControllerExt_FindEnemyToFight");
static_assert(offsetof(MaiControllerExt_FindEnemyToFight, ReturnValue) == 0x000000, "Member 'MaiControllerExt_FindEnemyToFight::ReturnValue' has a wrong offset!");

// Function Mai.MaiControllerExt.ForceChase
// 0x0010 (0x0010 - 0x0000)
struct MaiControllerExt_ForceChase final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClearWhenPerceived;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiControllerExt_ForceChase) == 0x000008, "Wrong alignment on MaiControllerExt_ForceChase");
static_assert(sizeof(MaiControllerExt_ForceChase) == 0x000010, "Wrong size on MaiControllerExt_ForceChase");
static_assert(offsetof(MaiControllerExt_ForceChase, Enemy) == 0x000000, "Member 'MaiControllerExt_ForceChase::Enemy' has a wrong offset!");
static_assert(offsetof(MaiControllerExt_ForceChase, ClearWhenPerceived) == 0x000008, "Member 'MaiControllerExt_ForceChase::ClearWhenPerceived' has a wrong offset!");

// Function Mai.MaiControllerExt.SetAlertInstigator
// 0x0008 (0x0008 - 0x0000)
struct MaiControllerExt_SetAlertInstigator final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiControllerExt_SetAlertInstigator) == 0x000008, "Wrong alignment on MaiControllerExt_SetAlertInstigator");
static_assert(sizeof(MaiControllerExt_SetAlertInstigator) == 0x000008, "Wrong size on MaiControllerExt_SetAlertInstigator");
static_assert(offsetof(MaiControllerExt_SetAlertInstigator, Actor) == 0x000000, "Member 'MaiControllerExt_SetAlertInstigator::Actor' has a wrong offset!");

// Function Mai.MaiControllerExt.SetAlertLocation
// 0x0018 (0x0018 - 0x0000)
struct MaiControllerExt_SetAlertLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiControllerExt_SetAlertLocation) == 0x000008, "Wrong alignment on MaiControllerExt_SetAlertLocation");
static_assert(sizeof(MaiControllerExt_SetAlertLocation) == 0x000018, "Wrong size on MaiControllerExt_SetAlertLocation");
static_assert(offsetof(MaiControllerExt_SetAlertLocation, Location) == 0x000000, "Member 'MaiControllerExt_SetAlertLocation::Location' has a wrong offset!");

// Function Mai.MaiControllerExt.SetArchEnemy
// 0x0008 (0x0008 - 0x0000)
struct MaiControllerExt_SetArchEnemy final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiControllerExt_SetArchEnemy) == 0x000008, "Wrong alignment on MaiControllerExt_SetArchEnemy");
static_assert(sizeof(MaiControllerExt_SetArchEnemy) == 0x000008, "Wrong size on MaiControllerExt_SetArchEnemy");
static_assert(offsetof(MaiControllerExt_SetArchEnemy, Enemy) == 0x000000, "Member 'MaiControllerExt_SetArchEnemy::Enemy' has a wrong offset!");

// Function Mai.MaiControllerExt.SetChaseLocation
// 0x0018 (0x0018 - 0x0000)
struct MaiControllerExt_SetChaseLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiControllerExt_SetChaseLocation) == 0x000008, "Wrong alignment on MaiControllerExt_SetChaseLocation");
static_assert(sizeof(MaiControllerExt_SetChaseLocation) == 0x000018, "Wrong size on MaiControllerExt_SetChaseLocation");
static_assert(offsetof(MaiControllerExt_SetChaseLocation, Location) == 0x000000, "Member 'MaiControllerExt_SetChaseLocation::Location' has a wrong offset!");

// Function Mai.MaiControllerExt.SetFightingEnemy
// 0x0008 (0x0008 - 0x0000)
struct MaiControllerExt_SetFightingEnemy final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiControllerExt_SetFightingEnemy) == 0x000008, "Wrong alignment on MaiControllerExt_SetFightingEnemy");
static_assert(sizeof(MaiControllerExt_SetFightingEnemy) == 0x000008, "Wrong size on MaiControllerExt_SetFightingEnemy");
static_assert(offsetof(MaiControllerExt_SetFightingEnemy, Enemy) == 0x000000, "Member 'MaiControllerExt_SetFightingEnemy::Enemy' has a wrong offset!");

// Function Mai.MaiControllerExt.SetForcedEnemy
// 0x0008 (0x0008 - 0x0000)
struct MaiControllerExt_SetForcedEnemy final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiControllerExt_SetForcedEnemy) == 0x000008, "Wrong alignment on MaiControllerExt_SetForcedEnemy");
static_assert(sizeof(MaiControllerExt_SetForcedEnemy) == 0x000008, "Wrong size on MaiControllerExt_SetForcedEnemy");
static_assert(offsetof(MaiControllerExt_SetForcedEnemy, Enemy) == 0x000000, "Member 'MaiControllerExt_SetForcedEnemy::Enemy' has a wrong offset!");

// Function Mai.MaiControllerExt.SetParty
// 0x0001 (0x0001 - 0x0000)
struct MaiControllerExt_SetParty final
{
public:
	EMaiParty                                     Party;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiControllerExt_SetParty) == 0x000001, "Wrong alignment on MaiControllerExt_SetParty");
static_assert(sizeof(MaiControllerExt_SetParty) == 0x000001, "Wrong size on MaiControllerExt_SetParty");
static_assert(offsetof(MaiControllerExt_SetParty, Party) == 0x000000, "Member 'MaiControllerExt_SetParty::Party' has a wrong offset!");

// Function Mai.MaiControllerExt.GetAlertInstigator
// 0x0008 (0x0008 - 0x0000)
struct MaiControllerExt_GetAlertInstigator final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiControllerExt_GetAlertInstigator) == 0x000008, "Wrong alignment on MaiControllerExt_GetAlertInstigator");
static_assert(sizeof(MaiControllerExt_GetAlertInstigator) == 0x000008, "Wrong size on MaiControllerExt_GetAlertInstigator");
static_assert(offsetof(MaiControllerExt_GetAlertInstigator, ReturnValue) == 0x000000, "Member 'MaiControllerExt_GetAlertInstigator::ReturnValue' has a wrong offset!");

// Function Mai.MaiControllerExt.GetAlertLocation
// 0x0018 (0x0018 - 0x0000)
struct MaiControllerExt_GetAlertLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiControllerExt_GetAlertLocation) == 0x000008, "Wrong alignment on MaiControllerExt_GetAlertLocation");
static_assert(sizeof(MaiControllerExt_GetAlertLocation) == 0x000018, "Wrong size on MaiControllerExt_GetAlertLocation");
static_assert(offsetof(MaiControllerExt_GetAlertLocation, ReturnValue) == 0x000000, "Member 'MaiControllerExt_GetAlertLocation::ReturnValue' has a wrong offset!");

// Function Mai.MaiControllerExt.GetArchEnemy
// 0x0008 (0x0008 - 0x0000)
struct MaiControllerExt_GetArchEnemy final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiControllerExt_GetArchEnemy) == 0x000008, "Wrong alignment on MaiControllerExt_GetArchEnemy");
static_assert(sizeof(MaiControllerExt_GetArchEnemy) == 0x000008, "Wrong size on MaiControllerExt_GetArchEnemy");
static_assert(offsetof(MaiControllerExt_GetArchEnemy, ReturnValue) == 0x000000, "Member 'MaiControllerExt_GetArchEnemy::ReturnValue' has a wrong offset!");

// Function Mai.MaiControllerExt.GetChaseLocation
// 0x0018 (0x0018 - 0x0000)
struct MaiControllerExt_GetChaseLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiControllerExt_GetChaseLocation) == 0x000008, "Wrong alignment on MaiControllerExt_GetChaseLocation");
static_assert(sizeof(MaiControllerExt_GetChaseLocation) == 0x000018, "Wrong size on MaiControllerExt_GetChaseLocation");
static_assert(offsetof(MaiControllerExt_GetChaseLocation, ReturnValue) == 0x000000, "Member 'MaiControllerExt_GetChaseLocation::ReturnValue' has a wrong offset!");

// Function Mai.MaiControllerExt.GetFightingEnemy
// 0x0008 (0x0008 - 0x0000)
struct MaiControllerExt_GetFightingEnemy final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiControllerExt_GetFightingEnemy) == 0x000008, "Wrong alignment on MaiControllerExt_GetFightingEnemy");
static_assert(sizeof(MaiControllerExt_GetFightingEnemy) == 0x000008, "Wrong size on MaiControllerExt_GetFightingEnemy");
static_assert(offsetof(MaiControllerExt_GetFightingEnemy, ReturnValue) == 0x000000, "Member 'MaiControllerExt_GetFightingEnemy::ReturnValue' has a wrong offset!");

// Function Mai.MaiControllerExt.GetForcedEnemy
// 0x0008 (0x0008 - 0x0000)
struct MaiControllerExt_GetForcedEnemy final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiControllerExt_GetForcedEnemy) == 0x000008, "Wrong alignment on MaiControllerExt_GetForcedEnemy");
static_assert(sizeof(MaiControllerExt_GetForcedEnemy) == 0x000008, "Wrong size on MaiControllerExt_GetForcedEnemy");
static_assert(offsetof(MaiControllerExt_GetForcedEnemy, ReturnValue) == 0x000000, "Member 'MaiControllerExt_GetForcedEnemy::ReturnValue' has a wrong offset!");

// Function Mai.MaiControllerExt.GetParty
// 0x0001 (0x0001 - 0x0000)
struct MaiControllerExt_GetParty final
{
public:
	EMaiParty                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiControllerExt_GetParty) == 0x000001, "Wrong alignment on MaiControllerExt_GetParty");
static_assert(sizeof(MaiControllerExt_GetParty) == 0x000001, "Wrong size on MaiControllerExt_GetParty");
static_assert(offsetof(MaiControllerExt_GetParty, ReturnValue) == 0x000000, "Member 'MaiControllerExt_GetParty::ReturnValue' has a wrong offset!");

// Function Mai.MaiControllerExt.IsFightingWith
// 0x0010 (0x0010 - 0x0000)
struct MaiControllerExt_IsFightingWith final
{
public:
	class AActor*                                 Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiControllerExt_IsFightingWith) == 0x000008, "Wrong alignment on MaiControllerExt_IsFightingWith");
static_assert(sizeof(MaiControllerExt_IsFightingWith) == 0x000010, "Wrong size on MaiControllerExt_IsFightingWith");
static_assert(offsetof(MaiControllerExt_IsFightingWith, Enemy) == 0x000000, "Member 'MaiControllerExt_IsFightingWith::Enemy' has a wrong offset!");
static_assert(offsetof(MaiControllerExt_IsFightingWith, ReturnValue) == 0x000008, "Member 'MaiControllerExt_IsFightingWith::ReturnValue' has a wrong offset!");

// Function Mai.MaiCoverComponent.IsActorInCover
// 0x0010 (0x0010 - 0x0000)
struct MaiCoverComponent_IsActorInCover final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiCoverComponent_IsActorInCover) == 0x000008, "Wrong alignment on MaiCoverComponent_IsActorInCover");
static_assert(sizeof(MaiCoverComponent_IsActorInCover) == 0x000010, "Wrong size on MaiCoverComponent_IsActorInCover");
static_assert(offsetof(MaiCoverComponent_IsActorInCover, Actor) == 0x000000, "Member 'MaiCoverComponent_IsActorInCover::Actor' has a wrong offset!");
static_assert(offsetof(MaiCoverComponent_IsActorInCover, ReturnValue) == 0x000008, "Member 'MaiCoverComponent_IsActorInCover::ReturnValue' has a wrong offset!");

// Function Mai.MaiCoverComponent.IsUserInCover
// 0x0010 (0x0010 - 0x0000)
struct MaiCoverComponent_IsUserInCover final
{
public:
	class UMaiCoverUser*                          User;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiCoverComponent_IsUserInCover) == 0x000008, "Wrong alignment on MaiCoverComponent_IsUserInCover");
static_assert(sizeof(MaiCoverComponent_IsUserInCover) == 0x000010, "Wrong size on MaiCoverComponent_IsUserInCover");
static_assert(offsetof(MaiCoverComponent_IsUserInCover, User) == 0x000000, "Member 'MaiCoverComponent_IsUserInCover::User' has a wrong offset!");
static_assert(offsetof(MaiCoverComponent_IsUserInCover, ReturnValue) == 0x000008, "Member 'MaiCoverComponent_IsUserInCover::ReturnValue' has a wrong offset!");

// Function Mai.MaiCoverComponent.OnOverlapBegin
// 0x0010 (0x0010 - 0x0000)
struct MaiCoverComponent_OnOverlapBegin final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCoverComponent_OnOverlapBegin) == 0x000008, "Wrong alignment on MaiCoverComponent_OnOverlapBegin");
static_assert(sizeof(MaiCoverComponent_OnOverlapBegin) == 0x000010, "Wrong size on MaiCoverComponent_OnOverlapBegin");
static_assert(offsetof(MaiCoverComponent_OnOverlapBegin, OverlappedActor) == 0x000000, "Member 'MaiCoverComponent_OnOverlapBegin::OverlappedActor' has a wrong offset!");
static_assert(offsetof(MaiCoverComponent_OnOverlapBegin, OtherActor) == 0x000008, "Member 'MaiCoverComponent_OnOverlapBegin::OtherActor' has a wrong offset!");

// Function Mai.MaiCoverComponent.OnOverlapEnd
// 0x0010 (0x0010 - 0x0000)
struct MaiCoverComponent_OnOverlapEnd final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCoverComponent_OnOverlapEnd) == 0x000008, "Wrong alignment on MaiCoverComponent_OnOverlapEnd");
static_assert(sizeof(MaiCoverComponent_OnOverlapEnd) == 0x000010, "Wrong size on MaiCoverComponent_OnOverlapEnd");
static_assert(offsetof(MaiCoverComponent_OnOverlapEnd, OverlappedActor) == 0x000000, "Member 'MaiCoverComponent_OnOverlapEnd::OverlappedActor' has a wrong offset!");
static_assert(offsetof(MaiCoverComponent_OnOverlapEnd, OtherActor) == 0x000008, "Member 'MaiCoverComponent_OnOverlapEnd::OtherActor' has a wrong offset!");

// Function Mai.MaiCoverUser.IsInCover
// 0x000C (0x000C - 0x0000)
struct MaiCoverUser_IsInCover final
{
public:
	struct FGameplayTag                           Filter;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiCoverUser_IsInCover) == 0x000004, "Wrong alignment on MaiCoverUser_IsInCover");
static_assert(sizeof(MaiCoverUser_IsInCover) == 0x00000C, "Wrong size on MaiCoverUser_IsInCover");
static_assert(offsetof(MaiCoverUser_IsInCover, Filter) == 0x000000, "Member 'MaiCoverUser_IsInCover::Filter' has a wrong offset!");
static_assert(offsetof(MaiCoverUser_IsInCover, ReturnValue) == 0x000008, "Member 'MaiCoverUser_IsInCover::ReturnValue' has a wrong offset!");

// Function Mai.MaiCoverUser.IsInFullCover
// 0x000C (0x000C - 0x0000)
struct MaiCoverUser_IsInFullCover final
{
public:
	struct FGameplayTag                           Filter;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiCoverUser_IsInFullCover) == 0x000004, "Wrong alignment on MaiCoverUser_IsInFullCover");
static_assert(sizeof(MaiCoverUser_IsInFullCover) == 0x00000C, "Wrong size on MaiCoverUser_IsInFullCover");
static_assert(offsetof(MaiCoverUser_IsInFullCover, Filter) == 0x000000, "Member 'MaiCoverUser_IsInFullCover::Filter' has a wrong offset!");
static_assert(offsetof(MaiCoverUser_IsInFullCover, ReturnValue) == 0x000008, "Member 'MaiCoverUser_IsInFullCover::ReturnValue' has a wrong offset!");

// Function Mai.MaiPointOfInterest.SwitchOnFor
// 0x0004 (0x0004 - 0x0000)
struct MaiPointOfInterest_SwitchOnFor final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiPointOfInterest_SwitchOnFor) == 0x000004, "Wrong alignment on MaiPointOfInterest_SwitchOnFor");
static_assert(sizeof(MaiPointOfInterest_SwitchOnFor) == 0x000004, "Wrong size on MaiPointOfInterest_SwitchOnFor");
static_assert(offsetof(MaiPointOfInterest_SwitchOnFor, Duration) == 0x000000, "Member 'MaiPointOfInterest_SwitchOnFor::Duration' has a wrong offset!");

// Function Mai.MaiCuriosityComponent.IgnorePoint
// 0x0008 (0x0008 - 0x0000)
struct MaiCuriosityComponent_IgnorePoint final
{
public:
	class AMaiPointOfInterest*                    Point;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCuriosityComponent_IgnorePoint) == 0x000008, "Wrong alignment on MaiCuriosityComponent_IgnorePoint");
static_assert(sizeof(MaiCuriosityComponent_IgnorePoint) == 0x000008, "Wrong size on MaiCuriosityComponent_IgnorePoint");
static_assert(offsetof(MaiCuriosityComponent_IgnorePoint, Point) == 0x000000, "Member 'MaiCuriosityComponent_IgnorePoint::Point' has a wrong offset!");

// Function Mai.MaiCuriosityComponent.OnTargetPerceptionUpdated
// 0x0060 (0x0060 - 0x0000)
struct MaiCuriosityComponent_OnTargetPerceptionUpdated final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIStimulus                            Stimulus;                                          // 0x0008(0x0058)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCuriosityComponent_OnTargetPerceptionUpdated) == 0x000008, "Wrong alignment on MaiCuriosityComponent_OnTargetPerceptionUpdated");
static_assert(sizeof(MaiCuriosityComponent_OnTargetPerceptionUpdated) == 0x000060, "Wrong size on MaiCuriosityComponent_OnTargetPerceptionUpdated");
static_assert(offsetof(MaiCuriosityComponent_OnTargetPerceptionUpdated, Actor) == 0x000000, "Member 'MaiCuriosityComponent_OnTargetPerceptionUpdated::Actor' has a wrong offset!");
static_assert(offsetof(MaiCuriosityComponent_OnTargetPerceptionUpdated, Stimulus) == 0x000008, "Member 'MaiCuriosityComponent_OnTargetPerceptionUpdated::Stimulus' has a wrong offset!");

// Function Mai.MaiCuriosityComponent.SelectPointOfInterest
// 0x0018 (0x0018 - 0x0000)
struct MaiCuriosityComponent_SelectPointOfInterest final
{
public:
	EMaiSelectionMethod                           Selection;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AMaiPointOfInterest>        PointClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMaiPointOfInterest*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCuriosityComponent_SelectPointOfInterest) == 0x000008, "Wrong alignment on MaiCuriosityComponent_SelectPointOfInterest");
static_assert(sizeof(MaiCuriosityComponent_SelectPointOfInterest) == 0x000018, "Wrong size on MaiCuriosityComponent_SelectPointOfInterest");
static_assert(offsetof(MaiCuriosityComponent_SelectPointOfInterest, Selection) == 0x000000, "Member 'MaiCuriosityComponent_SelectPointOfInterest::Selection' has a wrong offset!");
static_assert(offsetof(MaiCuriosityComponent_SelectPointOfInterest, PointClass) == 0x000008, "Member 'MaiCuriosityComponent_SelectPointOfInterest::PointClass' has a wrong offset!");
static_assert(offsetof(MaiCuriosityComponent_SelectPointOfInterest, ReturnValue) == 0x000010, "Member 'MaiCuriosityComponent_SelectPointOfInterest::ReturnValue' has a wrong offset!");

// Function Mai.MaiCuriosityComponent.UpdateDetectedPoints
// 0x0004 (0x0004 - 0x0000)
struct MaiCuriosityComponent_UpdateDetectedPoints final
{
public:
	float                                         AreaExtent;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiCuriosityComponent_UpdateDetectedPoints) == 0x000004, "Wrong alignment on MaiCuriosityComponent_UpdateDetectedPoints");
static_assert(sizeof(MaiCuriosityComponent_UpdateDetectedPoints) == 0x000004, "Wrong size on MaiCuriosityComponent_UpdateDetectedPoints");
static_assert(offsetof(MaiCuriosityComponent_UpdateDetectedPoints, AreaExtent) == 0x000000, "Member 'MaiCuriosityComponent_UpdateDetectedPoints::AreaExtent' has a wrong offset!");

// Function Mai.MaiCuriosityComponent.UpdatePointsInPerception
// 0x0010 (0x0010 - 0x0000)
struct MaiCuriosityComponent_UpdatePointsInPerception final
{
public:
	TSubclassOf<class AMaiPointOfInterest>        PointClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AreaExtent;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiCuriosityComponent_UpdatePointsInPerception) == 0x000008, "Wrong alignment on MaiCuriosityComponent_UpdatePointsInPerception");
static_assert(sizeof(MaiCuriosityComponent_UpdatePointsInPerception) == 0x000010, "Wrong size on MaiCuriosityComponent_UpdatePointsInPerception");
static_assert(offsetof(MaiCuriosityComponent_UpdatePointsInPerception, PointClass) == 0x000000, "Member 'MaiCuriosityComponent_UpdatePointsInPerception::PointClass' has a wrong offset!");
static_assert(offsetof(MaiCuriosityComponent_UpdatePointsInPerception, AreaExtent) == 0x000008, "Member 'MaiCuriosityComponent_UpdatePointsInPerception::AreaExtent' has a wrong offset!");

// Function Mai.MaiCuriosityComponent.ShouldIgnorePoint
// 0x0010 (0x0010 - 0x0000)
struct MaiCuriosityComponent_ShouldIgnorePoint final
{
public:
	class AMaiPointOfInterest*                    Point;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiCuriosityComponent_ShouldIgnorePoint) == 0x000008, "Wrong alignment on MaiCuriosityComponent_ShouldIgnorePoint");
static_assert(sizeof(MaiCuriosityComponent_ShouldIgnorePoint) == 0x000010, "Wrong size on MaiCuriosityComponent_ShouldIgnorePoint");
static_assert(offsetof(MaiCuriosityComponent_ShouldIgnorePoint, Point) == 0x000000, "Member 'MaiCuriosityComponent_ShouldIgnorePoint::Point' has a wrong offset!");
static_assert(offsetof(MaiCuriosityComponent_ShouldIgnorePoint, ReturnValue) == 0x000008, "Member 'MaiCuriosityComponent_ShouldIgnorePoint::ReturnValue' has a wrong offset!");

// Function Mai.AIDataProvider_FromScript.ScriptBindData
// 0x0008 (0x0008 - 0x0000)
struct AIDataProvider_FromScript_ScriptBindData final
{
public:
	const class APawn*                            Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIDataProvider_FromScript_ScriptBindData) == 0x000008, "Wrong alignment on AIDataProvider_FromScript_ScriptBindData");
static_assert(sizeof(AIDataProvider_FromScript_ScriptBindData) == 0x000008, "Wrong size on AIDataProvider_FromScript_ScriptBindData");
static_assert(offsetof(AIDataProvider_FromScript_ScriptBindData, Pawn) == 0x000000, "Member 'AIDataProvider_FromScript_ScriptBindData::Pawn' has a wrong offset!");

// Function Mai.AIDataProvider_FromScript.SetBoolValue
// 0x0001 (0x0001 - 0x0000)
struct AIDataProvider_FromScript_SetBoolValue final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIDataProvider_FromScript_SetBoolValue) == 0x000001, "Wrong alignment on AIDataProvider_FromScript_SetBoolValue");
static_assert(sizeof(AIDataProvider_FromScript_SetBoolValue) == 0x000001, "Wrong size on AIDataProvider_FromScript_SetBoolValue");
static_assert(offsetof(AIDataProvider_FromScript_SetBoolValue, Value) == 0x000000, "Member 'AIDataProvider_FromScript_SetBoolValue::Value' has a wrong offset!");

// Function Mai.AIDataProvider_FromScript.SetFloatValue
// 0x0004 (0x0004 - 0x0000)
struct AIDataProvider_FromScript_SetFloatValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIDataProvider_FromScript_SetFloatValue) == 0x000004, "Wrong alignment on AIDataProvider_FromScript_SetFloatValue");
static_assert(sizeof(AIDataProvider_FromScript_SetFloatValue) == 0x000004, "Wrong size on AIDataProvider_FromScript_SetFloatValue");
static_assert(offsetof(AIDataProvider_FromScript_SetFloatValue, Value) == 0x000000, "Member 'AIDataProvider_FromScript_SetFloatValue::Value' has a wrong offset!");

// Function Mai.AIDataProvider_FromScript.SetIntValue
// 0x0004 (0x0004 - 0x0000)
struct AIDataProvider_FromScript_SetIntValue final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIDataProvider_FromScript_SetIntValue) == 0x000004, "Wrong alignment on AIDataProvider_FromScript_SetIntValue");
static_assert(sizeof(AIDataProvider_FromScript_SetIntValue) == 0x000004, "Wrong size on AIDataProvider_FromScript_SetIntValue");
static_assert(offsetof(AIDataProvider_FromScript_SetIntValue, Value) == 0x000000, "Member 'AIDataProvider_FromScript_SetIntValue::Value' has a wrong offset!");

// Function Mai.AIDataProvider_FromScript.ScriptToString
// 0x0010 (0x0010 - 0x0000)
struct AIDataProvider_FromScript_ScriptToString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIDataProvider_FromScript_ScriptToString) == 0x000008, "Wrong alignment on AIDataProvider_FromScript_ScriptToString");
static_assert(sizeof(AIDataProvider_FromScript_ScriptToString) == 0x000010, "Wrong size on AIDataProvider_FromScript_ScriptToString");
static_assert(offsetof(AIDataProvider_FromScript_ScriptToString, ReturnValue) == 0x000000, "Member 'AIDataProvider_FromScript_ScriptToString::ReturnValue' has a wrong offset!");

// Function Mai.MaiDebugger.aiDebugPrint
// 0x0048 (0x0048 - 0x0000)
struct MaiDebugger_AiDebugPrint final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InString;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ToScreen;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ToLog;                                             // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x001C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreActor;                                       // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Category;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiDebugger_AiDebugPrint) == 0x000008, "Wrong alignment on MaiDebugger_AiDebugPrint");
static_assert(sizeof(MaiDebugger_AiDebugPrint) == 0x000048, "Wrong size on MaiDebugger_AiDebugPrint");
static_assert(offsetof(MaiDebugger_AiDebugPrint, Actor) == 0x000000, "Member 'MaiDebugger_AiDebugPrint::Actor' has a wrong offset!");
static_assert(offsetof(MaiDebugger_AiDebugPrint, InString) == 0x000008, "Member 'MaiDebugger_AiDebugPrint::InString' has a wrong offset!");
static_assert(offsetof(MaiDebugger_AiDebugPrint, ToScreen) == 0x000018, "Member 'MaiDebugger_AiDebugPrint::ToScreen' has a wrong offset!");
static_assert(offsetof(MaiDebugger_AiDebugPrint, ToLog) == 0x000019, "Member 'MaiDebugger_AiDebugPrint::ToLog' has a wrong offset!");
static_assert(offsetof(MaiDebugger_AiDebugPrint, Color) == 0x00001C, "Member 'MaiDebugger_AiDebugPrint::Color' has a wrong offset!");
static_assert(offsetof(MaiDebugger_AiDebugPrint, Duration) == 0x00002C, "Member 'MaiDebugger_AiDebugPrint::Duration' has a wrong offset!");
static_assert(offsetof(MaiDebugger_AiDebugPrint, IgnoreActor) == 0x000030, "Member 'MaiDebugger_AiDebugPrint::IgnoreActor' has a wrong offset!");
static_assert(offsetof(MaiDebugger_AiDebugPrint, Category) == 0x000038, "Member 'MaiDebugger_AiDebugPrint::Category' has a wrong offset!");

// Function Mai.MaiDebugger.aiDebugPrint2
// 0x0048 (0x0048 - 0x0000)
struct MaiDebugger_AiDebugPrint2 final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InString;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMaiDebugPrintParams                   Params_0;                                          // 0x0018(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiDebugger_AiDebugPrint2) == 0x000008, "Wrong alignment on MaiDebugger_AiDebugPrint2");
static_assert(sizeof(MaiDebugger_AiDebugPrint2) == 0x000048, "Wrong size on MaiDebugger_AiDebugPrint2");
static_assert(offsetof(MaiDebugger_AiDebugPrint2, Actor) == 0x000000, "Member 'MaiDebugger_AiDebugPrint2::Actor' has a wrong offset!");
static_assert(offsetof(MaiDebugger_AiDebugPrint2, InString) == 0x000008, "Member 'MaiDebugger_AiDebugPrint2::InString' has a wrong offset!");
static_assert(offsetof(MaiDebugger_AiDebugPrint2, Params_0) == 0x000018, "Member 'MaiDebugger_AiDebugPrint2::Params_0' has a wrong offset!");

// Function Mai.MaiDebugger.getAIDebugActionPath
// 0x0010 (0x0010 - 0x0000)
struct MaiDebugger_GetAIDebugActionPath final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiDebugger_GetAIDebugActionPath) == 0x000008, "Wrong alignment on MaiDebugger_GetAIDebugActionPath");
static_assert(sizeof(MaiDebugger_GetAIDebugActionPath) == 0x000010, "Wrong size on MaiDebugger_GetAIDebugActionPath");
static_assert(offsetof(MaiDebugger_GetAIDebugActionPath, Being) == 0x000000, "Member 'MaiDebugger_GetAIDebugActionPath::Being' has a wrong offset!");
static_assert(offsetof(MaiDebugger_GetAIDebugActionPath, ReturnValue) == 0x000008, "Member 'MaiDebugger_GetAIDebugActionPath::ReturnValue' has a wrong offset!");

// Function Mai.MaiDebugger.getAIDebugActor
// 0x0010 (0x0010 - 0x0000)
struct MaiDebugger_GetAIDebugActor final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiDebugger_GetAIDebugActor) == 0x000008, "Wrong alignment on MaiDebugger_GetAIDebugActor");
static_assert(sizeof(MaiDebugger_GetAIDebugActor) == 0x000010, "Wrong size on MaiDebugger_GetAIDebugActor");
static_assert(offsetof(MaiDebugger_GetAIDebugActor, WorldContext) == 0x000000, "Member 'MaiDebugger_GetAIDebugActor::WorldContext' has a wrong offset!");
static_assert(offsetof(MaiDebugger_GetAIDebugActor, ReturnValue) == 0x000008, "Member 'MaiDebugger_GetAIDebugActor::ReturnValue' has a wrong offset!");

// Function Mai.MaiDebugger.getAIDebugAggro
// 0x0010 (0x0010 - 0x0000)
struct MaiDebugger_GetAIDebugAggro final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiDebugger_GetAIDebugAggro) == 0x000008, "Wrong alignment on MaiDebugger_GetAIDebugAggro");
static_assert(sizeof(MaiDebugger_GetAIDebugAggro) == 0x000010, "Wrong size on MaiDebugger_GetAIDebugAggro");
static_assert(offsetof(MaiDebugger_GetAIDebugAggro, Being) == 0x000000, "Member 'MaiDebugger_GetAIDebugAggro::Being' has a wrong offset!");
static_assert(offsetof(MaiDebugger_GetAIDebugAggro, ReturnValue) == 0x000008, "Member 'MaiDebugger_GetAIDebugAggro::ReturnValue' has a wrong offset!");

// Function Mai.MaiDebugger.getAIDebugAttack
// 0x0010 (0x0010 - 0x0000)
struct MaiDebugger_GetAIDebugAttack final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiDebugger_GetAIDebugAttack) == 0x000008, "Wrong alignment on MaiDebugger_GetAIDebugAttack");
static_assert(sizeof(MaiDebugger_GetAIDebugAttack) == 0x000010, "Wrong size on MaiDebugger_GetAIDebugAttack");
static_assert(offsetof(MaiDebugger_GetAIDebugAttack, Being) == 0x000000, "Member 'MaiDebugger_GetAIDebugAttack::Being' has a wrong offset!");
static_assert(offsetof(MaiDebugger_GetAIDebugAttack, ReturnValue) == 0x000008, "Member 'MaiDebugger_GetAIDebugAttack::ReturnValue' has a wrong offset!");

// Function Mai.MaiDebugger.getAIDebugCuriosity
// 0x0010 (0x0010 - 0x0000)
struct MaiDebugger_GetAIDebugCuriosity final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiDebugger_GetAIDebugCuriosity) == 0x000008, "Wrong alignment on MaiDebugger_GetAIDebugCuriosity");
static_assert(sizeof(MaiDebugger_GetAIDebugCuriosity) == 0x000010, "Wrong size on MaiDebugger_GetAIDebugCuriosity");
static_assert(offsetof(MaiDebugger_GetAIDebugCuriosity, Being) == 0x000000, "Member 'MaiDebugger_GetAIDebugCuriosity::Being' has a wrong offset!");
static_assert(offsetof(MaiDebugger_GetAIDebugCuriosity, ReturnValue) == 0x000008, "Member 'MaiDebugger_GetAIDebugCuriosity::ReturnValue' has a wrong offset!");

// Function Mai.MaiDebugger.getAIDebugger
// 0x0018 (0x0018 - 0x0000)
struct MaiDebugger_GetAIDebugger final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyIfActive;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMaiDebugger*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiDebugger_GetAIDebugger) == 0x000008, "Wrong alignment on MaiDebugger_GetAIDebugger");
static_assert(sizeof(MaiDebugger_GetAIDebugger) == 0x000018, "Wrong size on MaiDebugger_GetAIDebugger");
static_assert(offsetof(MaiDebugger_GetAIDebugger, WorldContext) == 0x000000, "Member 'MaiDebugger_GetAIDebugger::WorldContext' has a wrong offset!");
static_assert(offsetof(MaiDebugger_GetAIDebugger, OnlyIfActive) == 0x000008, "Member 'MaiDebugger_GetAIDebugger::OnlyIfActive' has a wrong offset!");
static_assert(offsetof(MaiDebugger_GetAIDebugger, ReturnValue) == 0x000010, "Member 'MaiDebugger_GetAIDebugger::ReturnValue' has a wrong offset!");

// Function Mai.MaiDebugger.getAIDebugGState
// 0x0018 (0x0018 - 0x0000)
struct MaiDebugger_GetAIDebugGState final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiDebugger_GetAIDebugGState) == 0x000008, "Wrong alignment on MaiDebugger_GetAIDebugGState");
static_assert(sizeof(MaiDebugger_GetAIDebugGState) == 0x000018, "Wrong size on MaiDebugger_GetAIDebugGState");
static_assert(offsetof(MaiDebugger_GetAIDebugGState, WorldContext) == 0x000000, "Member 'MaiDebugger_GetAIDebugGState::WorldContext' has a wrong offset!");
static_assert(offsetof(MaiDebugger_GetAIDebugGState, Name_0) == 0x000008, "Member 'MaiDebugger_GetAIDebugGState::Name_0' has a wrong offset!");
static_assert(offsetof(MaiDebugger_GetAIDebugGState, ReturnValue) == 0x000010, "Member 'MaiDebugger_GetAIDebugGState::ReturnValue' has a wrong offset!");

// Function Mai.MaiDebugger.getAIDebugHearing
// 0x0010 (0x0010 - 0x0000)
struct MaiDebugger_GetAIDebugHearing final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiDebugger_GetAIDebugHearing) == 0x000008, "Wrong alignment on MaiDebugger_GetAIDebugHearing");
static_assert(sizeof(MaiDebugger_GetAIDebugHearing) == 0x000010, "Wrong size on MaiDebugger_GetAIDebugHearing");
static_assert(offsetof(MaiDebugger_GetAIDebugHearing, WorldContext) == 0x000000, "Member 'MaiDebugger_GetAIDebugHearing::WorldContext' has a wrong offset!");
static_assert(offsetof(MaiDebugger_GetAIDebugHearing, ReturnValue) == 0x000008, "Member 'MaiDebugger_GetAIDebugHearing::ReturnValue' has a wrong offset!");

// Function Mai.MaiDebugger.getAIDebugMovement
// 0x0010 (0x0010 - 0x0000)
struct MaiDebugger_GetAIDebugMovement final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiDebugger_GetAIDebugMovement) == 0x000008, "Wrong alignment on MaiDebugger_GetAIDebugMovement");
static_assert(sizeof(MaiDebugger_GetAIDebugMovement) == 0x000010, "Wrong size on MaiDebugger_GetAIDebugMovement");
static_assert(offsetof(MaiDebugger_GetAIDebugMovement, Being) == 0x000000, "Member 'MaiDebugger_GetAIDebugMovement::Being' has a wrong offset!");
static_assert(offsetof(MaiDebugger_GetAIDebugMovement, ReturnValue) == 0x000008, "Member 'MaiDebugger_GetAIDebugMovement::ReturnValue' has a wrong offset!");

// Function Mai.MaiDebugger.getAIDebugNavPath
// 0x0010 (0x0010 - 0x0000)
struct MaiDebugger_GetAIDebugNavPath final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiDebugger_GetAIDebugNavPath) == 0x000008, "Wrong alignment on MaiDebugger_GetAIDebugNavPath");
static_assert(sizeof(MaiDebugger_GetAIDebugNavPath) == 0x000010, "Wrong size on MaiDebugger_GetAIDebugNavPath");
static_assert(offsetof(MaiDebugger_GetAIDebugNavPath, Being) == 0x000000, "Member 'MaiDebugger_GetAIDebugNavPath::Being' has a wrong offset!");
static_assert(offsetof(MaiDebugger_GetAIDebugNavPath, ReturnValue) == 0x000008, "Member 'MaiDebugger_GetAIDebugNavPath::ReturnValue' has a wrong offset!");

// Function Mai.MaiDebugger.getAIDebugNoises
// 0x0010 (0x0010 - 0x0000)
struct MaiDebugger_GetAIDebugNoises final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiDebugger_GetAIDebugNoises) == 0x000008, "Wrong alignment on MaiDebugger_GetAIDebugNoises");
static_assert(sizeof(MaiDebugger_GetAIDebugNoises) == 0x000010, "Wrong size on MaiDebugger_GetAIDebugNoises");
static_assert(offsetof(MaiDebugger_GetAIDebugNoises, Being) == 0x000000, "Member 'MaiDebugger_GetAIDebugNoises::Being' has a wrong offset!");
static_assert(offsetof(MaiDebugger_GetAIDebugNoises, ReturnValue) == 0x000008, "Member 'MaiDebugger_GetAIDebugNoises::ReturnValue' has a wrong offset!");

// Function Mai.MaiDebugger.getAIDebugOdor
// 0x0010 (0x0010 - 0x0000)
struct MaiDebugger_GetAIDebugOdor final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiDebugger_GetAIDebugOdor) == 0x000008, "Wrong alignment on MaiDebugger_GetAIDebugOdor");
static_assert(sizeof(MaiDebugger_GetAIDebugOdor) == 0x000010, "Wrong size on MaiDebugger_GetAIDebugOdor");
static_assert(offsetof(MaiDebugger_GetAIDebugOdor, Being) == 0x000000, "Member 'MaiDebugger_GetAIDebugOdor::Being' has a wrong offset!");
static_assert(offsetof(MaiDebugger_GetAIDebugOdor, ReturnValue) == 0x000008, "Member 'MaiDebugger_GetAIDebugOdor::ReturnValue' has a wrong offset!");

// Function Mai.MaiDebugger.getAIDebugSight
// 0x0010 (0x0010 - 0x0000)
struct MaiDebugger_GetAIDebugSight final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiDebugger_GetAIDebugSight) == 0x000008, "Wrong alignment on MaiDebugger_GetAIDebugSight");
static_assert(sizeof(MaiDebugger_GetAIDebugSight) == 0x000010, "Wrong size on MaiDebugger_GetAIDebugSight");
static_assert(offsetof(MaiDebugger_GetAIDebugSight, WorldContext) == 0x000000, "Member 'MaiDebugger_GetAIDebugSight::WorldContext' has a wrong offset!");
static_assert(offsetof(MaiDebugger_GetAIDebugSight, ReturnValue) == 0x000008, "Member 'MaiDebugger_GetAIDebugSight::ReturnValue' has a wrong offset!");

// Function Mai.MaiDebugger.getAIDebugSmell
// 0x0010 (0x0010 - 0x0000)
struct MaiDebugger_GetAIDebugSmell final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiDebugger_GetAIDebugSmell) == 0x000008, "Wrong alignment on MaiDebugger_GetAIDebugSmell");
static_assert(sizeof(MaiDebugger_GetAIDebugSmell) == 0x000010, "Wrong size on MaiDebugger_GetAIDebugSmell");
static_assert(offsetof(MaiDebugger_GetAIDebugSmell, WorldContext) == 0x000000, "Member 'MaiDebugger_GetAIDebugSmell::WorldContext' has a wrong offset!");
static_assert(offsetof(MaiDebugger_GetAIDebugSmell, ReturnValue) == 0x000008, "Member 'MaiDebugger_GetAIDebugSmell::ReturnValue' has a wrong offset!");

// Function Mai.MaiDebugger.getAIDebugState
// 0x0018 (0x0018 - 0x0000)
struct MaiDebugger_GetAIDebugState final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiDebugger_GetAIDebugState) == 0x000008, "Wrong alignment on MaiDebugger_GetAIDebugState");
static_assert(sizeof(MaiDebugger_GetAIDebugState) == 0x000018, "Wrong size on MaiDebugger_GetAIDebugState");
static_assert(offsetof(MaiDebugger_GetAIDebugState, Being) == 0x000000, "Member 'MaiDebugger_GetAIDebugState::Being' has a wrong offset!");
static_assert(offsetof(MaiDebugger_GetAIDebugState, Name_0) == 0x000008, "Member 'MaiDebugger_GetAIDebugState::Name_0' has a wrong offset!");
static_assert(offsetof(MaiDebugger_GetAIDebugState, ReturnValue) == 0x000010, "Member 'MaiDebugger_GetAIDebugState::ReturnValue' has a wrong offset!");

// Function Mai.MaiDebugger.getAIDebugVisibility
// 0x0010 (0x0010 - 0x0000)
struct MaiDebugger_GetAIDebugVisibility final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiDebugger_GetAIDebugVisibility) == 0x000008, "Wrong alignment on MaiDebugger_GetAIDebugVisibility");
static_assert(sizeof(MaiDebugger_GetAIDebugVisibility) == 0x000010, "Wrong size on MaiDebugger_GetAIDebugVisibility");
static_assert(offsetof(MaiDebugger_GetAIDebugVisibility, Being) == 0x000000, "Member 'MaiDebugger_GetAIDebugVisibility::Being' has a wrong offset!");
static_assert(offsetof(MaiDebugger_GetAIDebugVisibility, ReturnValue) == 0x000008, "Member 'MaiDebugger_GetAIDebugVisibility::ReturnValue' has a wrong offset!");

// Function Mai.MaiDebugger.AIDebugActionPath
// 0x0001 (0x0001 - 0x0000)
struct MaiDebugger_AIDebugActionPath final
{
public:
	bool                                          Debug;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiDebugger_AIDebugActionPath) == 0x000001, "Wrong alignment on MaiDebugger_AIDebugActionPath");
static_assert(sizeof(MaiDebugger_AIDebugActionPath) == 0x000001, "Wrong size on MaiDebugger_AIDebugActionPath");
static_assert(offsetof(MaiDebugger_AIDebugActionPath, Debug) == 0x000000, "Member 'MaiDebugger_AIDebugActionPath::Debug' has a wrong offset!");

// Function Mai.MaiDebugger.AIDebugActor
// 0x0008 (0x0008 - 0x0000)
struct MaiDebugger_AIDebugActor final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiDebugger_AIDebugActor) == 0x000004, "Wrong alignment on MaiDebugger_AIDebugActor");
static_assert(sizeof(MaiDebugger_AIDebugActor) == 0x000008, "Wrong size on MaiDebugger_AIDebugActor");
static_assert(offsetof(MaiDebugger_AIDebugActor, Name_0) == 0x000000, "Member 'MaiDebugger_AIDebugActor::Name_0' has a wrong offset!");

// Function Mai.MaiDebugger.AIDebugAddState
// 0x000C (0x000C - 0x0000)
struct MaiDebugger_AIDebugAddState final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Debug;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiDebugger_AIDebugAddState) == 0x000004, "Wrong alignment on MaiDebugger_AIDebugAddState");
static_assert(sizeof(MaiDebugger_AIDebugAddState) == 0x00000C, "Wrong size on MaiDebugger_AIDebugAddState");
static_assert(offsetof(MaiDebugger_AIDebugAddState, Name_0) == 0x000000, "Member 'MaiDebugger_AIDebugAddState::Name_0' has a wrong offset!");
static_assert(offsetof(MaiDebugger_AIDebugAddState, Debug) == 0x000008, "Member 'MaiDebugger_AIDebugAddState::Debug' has a wrong offset!");

// Function Mai.MaiDebugger.AIDebugAggro
// 0x0001 (0x0001 - 0x0000)
struct MaiDebugger_AIDebugAggro final
{
public:
	bool                                          Debug;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiDebugger_AIDebugAggro) == 0x000001, "Wrong alignment on MaiDebugger_AIDebugAggro");
static_assert(sizeof(MaiDebugger_AIDebugAggro) == 0x000001, "Wrong size on MaiDebugger_AIDebugAggro");
static_assert(offsetof(MaiDebugger_AIDebugAggro, Debug) == 0x000000, "Member 'MaiDebugger_AIDebugAggro::Debug' has a wrong offset!");

// Function Mai.MaiDebugger.AIDebugAInfo
// 0x0001 (0x0001 - 0x0000)
struct MaiDebugger_AIDebugAInfo final
{
public:
	bool                                          Debug;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiDebugger_AIDebugAInfo) == 0x000001, "Wrong alignment on MaiDebugger_AIDebugAInfo");
static_assert(sizeof(MaiDebugger_AIDebugAInfo) == 0x000001, "Wrong size on MaiDebugger_AIDebugAInfo");
static_assert(offsetof(MaiDebugger_AIDebugAInfo, Debug) == 0x000000, "Member 'MaiDebugger_AIDebugAInfo::Debug' has a wrong offset!");

// Function Mai.MaiDebugger.AIDebugAttack
// 0x0001 (0x0001 - 0x0000)
struct MaiDebugger_AIDebugAttack final
{
public:
	bool                                          Debug;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiDebugger_AIDebugAttack) == 0x000001, "Wrong alignment on MaiDebugger_AIDebugAttack");
static_assert(sizeof(MaiDebugger_AIDebugAttack) == 0x000001, "Wrong size on MaiDebugger_AIDebugAttack");
static_assert(offsetof(MaiDebugger_AIDebugAttack, Debug) == 0x000000, "Member 'MaiDebugger_AIDebugAttack::Debug' has a wrong offset!");

// Function Mai.MaiDebugger.AIDebugBehaviorTree
// 0x0001 (0x0001 - 0x0000)
struct MaiDebugger_AIDebugBehaviorTree final
{
public:
	bool                                          Debug;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiDebugger_AIDebugBehaviorTree) == 0x000001, "Wrong alignment on MaiDebugger_AIDebugBehaviorTree");
static_assert(sizeof(MaiDebugger_AIDebugBehaviorTree) == 0x000001, "Wrong size on MaiDebugger_AIDebugBehaviorTree");
static_assert(offsetof(MaiDebugger_AIDebugBehaviorTree, Debug) == 0x000000, "Member 'MaiDebugger_AIDebugBehaviorTree::Debug' has a wrong offset!");

// Function Mai.MaiDebugger.AIDebugCuriosity
// 0x0001 (0x0001 - 0x0000)
struct MaiDebugger_AIDebugCuriosity final
{
public:
	bool                                          Debug;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiDebugger_AIDebugCuriosity) == 0x000001, "Wrong alignment on MaiDebugger_AIDebugCuriosity");
static_assert(sizeof(MaiDebugger_AIDebugCuriosity) == 0x000001, "Wrong size on MaiDebugger_AIDebugCuriosity");
static_assert(offsetof(MaiDebugger_AIDebugCuriosity, Debug) == 0x000000, "Member 'MaiDebugger_AIDebugCuriosity::Debug' has a wrong offset!");

// Function Mai.MaiDebugger.AIDebugEQS
// 0x0001 (0x0001 - 0x0000)
struct MaiDebugger_AIDebugEQS final
{
public:
	bool                                          Debug;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiDebugger_AIDebugEQS) == 0x000001, "Wrong alignment on MaiDebugger_AIDebugEQS");
static_assert(sizeof(MaiDebugger_AIDebugEQS) == 0x000001, "Wrong size on MaiDebugger_AIDebugEQS");
static_assert(offsetof(MaiDebugger_AIDebugEQS, Debug) == 0x000000, "Member 'MaiDebugger_AIDebugEQS::Debug' has a wrong offset!");

// Function Mai.MaiDebugger.AIDebugger
// 0x0001 (0x0001 - 0x0000)
struct MaiDebugger_AIDebugger final
{
public:
	bool                                          Activate;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiDebugger_AIDebugger) == 0x000001, "Wrong alignment on MaiDebugger_AIDebugger");
static_assert(sizeof(MaiDebugger_AIDebugger) == 0x000001, "Wrong size on MaiDebugger_AIDebugger");
static_assert(offsetof(MaiDebugger_AIDebugger, Activate) == 0x000000, "Member 'MaiDebugger_AIDebugger::Activate' has a wrong offset!");

// Function Mai.MaiDebugger.AIDebugHearing
// 0x0001 (0x0001 - 0x0000)
struct MaiDebugger_AIDebugHearing final
{
public:
	bool                                          Debug;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiDebugger_AIDebugHearing) == 0x000001, "Wrong alignment on MaiDebugger_AIDebugHearing");
static_assert(sizeof(MaiDebugger_AIDebugHearing) == 0x000001, "Wrong size on MaiDebugger_AIDebugHearing");
static_assert(offsetof(MaiDebugger_AIDebugHearing, Debug) == 0x000000, "Member 'MaiDebugger_AIDebugHearing::Debug' has a wrong offset!");

// Function Mai.MaiDebugger.AIDebugMovement
// 0x0001 (0x0001 - 0x0000)
struct MaiDebugger_AIDebugMovement final
{
public:
	bool                                          Debug;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiDebugger_AIDebugMovement) == 0x000001, "Wrong alignment on MaiDebugger_AIDebugMovement");
static_assert(sizeof(MaiDebugger_AIDebugMovement) == 0x000001, "Wrong size on MaiDebugger_AIDebugMovement");
static_assert(offsetof(MaiDebugger_AIDebugMovement, Debug) == 0x000000, "Member 'MaiDebugger_AIDebugMovement::Debug' has a wrong offset!");

// Function Mai.MaiDebugger.AIDebugNavMesh
// 0x0001 (0x0001 - 0x0000)
struct MaiDebugger_AIDebugNavMesh final
{
public:
	bool                                          Debug;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiDebugger_AIDebugNavMesh) == 0x000001, "Wrong alignment on MaiDebugger_AIDebugNavMesh");
static_assert(sizeof(MaiDebugger_AIDebugNavMesh) == 0x000001, "Wrong size on MaiDebugger_AIDebugNavMesh");
static_assert(offsetof(MaiDebugger_AIDebugNavMesh, Debug) == 0x000000, "Member 'MaiDebugger_AIDebugNavMesh::Debug' has a wrong offset!");

// Function Mai.MaiDebugger.AIDebugNavPath
// 0x0001 (0x0001 - 0x0000)
struct MaiDebugger_AIDebugNavPath final
{
public:
	bool                                          Debug;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiDebugger_AIDebugNavPath) == 0x000001, "Wrong alignment on MaiDebugger_AIDebugNavPath");
static_assert(sizeof(MaiDebugger_AIDebugNavPath) == 0x000001, "Wrong size on MaiDebugger_AIDebugNavPath");
static_assert(offsetof(MaiDebugger_AIDebugNavPath, Debug) == 0x000000, "Member 'MaiDebugger_AIDebugNavPath::Debug' has a wrong offset!");

// Function Mai.MaiDebugger.AIDebugNoises
// 0x0001 (0x0001 - 0x0000)
struct MaiDebugger_AIDebugNoises final
{
public:
	bool                                          Debug;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiDebugger_AIDebugNoises) == 0x000001, "Wrong alignment on MaiDebugger_AIDebugNoises");
static_assert(sizeof(MaiDebugger_AIDebugNoises) == 0x000001, "Wrong size on MaiDebugger_AIDebugNoises");
static_assert(offsetof(MaiDebugger_AIDebugNoises, Debug) == 0x000000, "Member 'MaiDebugger_AIDebugNoises::Debug' has a wrong offset!");

// Function Mai.MaiDebugger.AIDebugOdor
// 0x0001 (0x0001 - 0x0000)
struct MaiDebugger_AIDebugOdor final
{
public:
	bool                                          Debug;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiDebugger_AIDebugOdor) == 0x000001, "Wrong alignment on MaiDebugger_AIDebugOdor");
static_assert(sizeof(MaiDebugger_AIDebugOdor) == 0x000001, "Wrong size on MaiDebugger_AIDebugOdor");
static_assert(offsetof(MaiDebugger_AIDebugOdor, Debug) == 0x000000, "Member 'MaiDebugger_AIDebugOdor::Debug' has a wrong offset!");

// Function Mai.MaiDebugger.AIDebugPerception
// 0x0001 (0x0001 - 0x0000)
struct MaiDebugger_AIDebugPerception final
{
public:
	bool                                          Debug;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiDebugger_AIDebugPerception) == 0x000001, "Wrong alignment on MaiDebugger_AIDebugPerception");
static_assert(sizeof(MaiDebugger_AIDebugPerception) == 0x000001, "Wrong size on MaiDebugger_AIDebugPerception");
static_assert(offsetof(MaiDebugger_AIDebugPerception, Debug) == 0x000000, "Member 'MaiDebugger_AIDebugPerception::Debug' has a wrong offset!");

// Function Mai.MaiDebugger.AIDebugSight
// 0x0001 (0x0001 - 0x0000)
struct MaiDebugger_AIDebugSight final
{
public:
	bool                                          Debug;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiDebugger_AIDebugSight) == 0x000001, "Wrong alignment on MaiDebugger_AIDebugSight");
static_assert(sizeof(MaiDebugger_AIDebugSight) == 0x000001, "Wrong size on MaiDebugger_AIDebugSight");
static_assert(offsetof(MaiDebugger_AIDebugSight, Debug) == 0x000000, "Member 'MaiDebugger_AIDebugSight::Debug' has a wrong offset!");

// Function Mai.MaiDebugger.AIDebugSmell
// 0x0001 (0x0001 - 0x0000)
struct MaiDebugger_AIDebugSmell final
{
public:
	bool                                          Debug;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiDebugger_AIDebugSmell) == 0x000001, "Wrong alignment on MaiDebugger_AIDebugSmell");
static_assert(sizeof(MaiDebugger_AIDebugSmell) == 0x000001, "Wrong size on MaiDebugger_AIDebugSmell");
static_assert(offsetof(MaiDebugger_AIDebugSmell, Debug) == 0x000000, "Member 'MaiDebugger_AIDebugSmell::Debug' has a wrong offset!");

// Function Mai.MaiDebugger.AIDebugState
// 0x000C (0x000C - 0x0000)
struct MaiDebugger_AIDebugState final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Debug;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiDebugger_AIDebugState) == 0x000004, "Wrong alignment on MaiDebugger_AIDebugState");
static_assert(sizeof(MaiDebugger_AIDebugState) == 0x00000C, "Wrong size on MaiDebugger_AIDebugState");
static_assert(offsetof(MaiDebugger_AIDebugState, Name_0) == 0x000000, "Member 'MaiDebugger_AIDebugState::Name_0' has a wrong offset!");
static_assert(offsetof(MaiDebugger_AIDebugState, Debug) == 0x000008, "Member 'MaiDebugger_AIDebugState::Debug' has a wrong offset!");

// Function Mai.MaiDebugger.AIDebugUnreal
// 0x0001 (0x0001 - 0x0000)
struct MaiDebugger_AIDebugUnreal final
{
public:
	bool                                          Debug;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiDebugger_AIDebugUnreal) == 0x000001, "Wrong alignment on MaiDebugger_AIDebugUnreal");
static_assert(sizeof(MaiDebugger_AIDebugUnreal) == 0x000001, "Wrong size on MaiDebugger_AIDebugUnreal");
static_assert(offsetof(MaiDebugger_AIDebugUnreal, Debug) == 0x000000, "Member 'MaiDebugger_AIDebugUnreal::Debug' has a wrong offset!");

// Function Mai.MaiDebugger.AIDebugVisibility
// 0x0001 (0x0001 - 0x0000)
struct MaiDebugger_AIDebugVisibility final
{
public:
	bool                                          Debug;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiDebugger_AIDebugVisibility) == 0x000001, "Wrong alignment on MaiDebugger_AIDebugVisibility");
static_assert(sizeof(MaiDebugger_AIDebugVisibility) == 0x000001, "Wrong size on MaiDebugger_AIDebugVisibility");
static_assert(offsetof(MaiDebugger_AIDebugVisibility, Debug) == 0x000000, "Member 'MaiDebugger_AIDebugVisibility::Debug' has a wrong offset!");

// Function Mai.MaiFlyingGraph.FindNearestPoint
// 0x0030 (0x0030 - 0x0000)
struct MaiFlyingGraph_FindNearestPoint final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMaiController*                         User;                                              // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMaiFlyingPoint*                        ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFlyingGraph_FindNearestPoint) == 0x000008, "Wrong alignment on MaiFlyingGraph_FindNearestPoint");
static_assert(sizeof(MaiFlyingGraph_FindNearestPoint) == 0x000030, "Wrong size on MaiFlyingGraph_FindNearestPoint");
static_assert(offsetof(MaiFlyingGraph_FindNearestPoint, Location) == 0x000000, "Member 'MaiFlyingGraph_FindNearestPoint::Location' has a wrong offset!");
static_assert(offsetof(MaiFlyingGraph_FindNearestPoint, Radius) == 0x000018, "Member 'MaiFlyingGraph_FindNearestPoint::Radius' has a wrong offset!");
static_assert(offsetof(MaiFlyingGraph_FindNearestPoint, User) == 0x000020, "Member 'MaiFlyingGraph_FindNearestPoint::User' has a wrong offset!");
static_assert(offsetof(MaiFlyingGraph_FindNearestPoint, ReturnValue) == 0x000028, "Member 'MaiFlyingGraph_FindNearestPoint::ReturnValue' has a wrong offset!");

// Function Mai.MaiFlyingGraph.GetPointCount
// 0x0004 (0x0004 - 0x0000)
struct MaiFlyingGraph_GetPointCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFlyingGraph_GetPointCount) == 0x000004, "Wrong alignment on MaiFlyingGraph_GetPointCount");
static_assert(sizeof(MaiFlyingGraph_GetPointCount) == 0x000004, "Wrong size on MaiFlyingGraph_GetPointCount");
static_assert(offsetof(MaiFlyingGraph_GetPointCount, ReturnValue) == 0x000000, "Member 'MaiFlyingGraph_GetPointCount::ReturnValue' has a wrong offset!");

// Function Mai.MaiFlyingGraph.GetPoints
// 0x0010 (0x0010 - 0x0000)
struct MaiFlyingGraph_GetPoints final
{
public:
	TArray<class AMaiFlyingPoint*>                ActionPoints;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFlyingGraph_GetPoints) == 0x000008, "Wrong alignment on MaiFlyingGraph_GetPoints");
static_assert(sizeof(MaiFlyingGraph_GetPoints) == 0x000010, "Wrong size on MaiFlyingGraph_GetPoints");
static_assert(offsetof(MaiFlyingGraph_GetPoints, ActionPoints) == 0x000000, "Member 'MaiFlyingGraph_GetPoints::ActionPoints' has a wrong offset!");

// Function Mai.MaiFlyingGraph.GetPointsInRange
// 0x0030 (0x0030 - 0x0000)
struct MaiFlyingGraph_GetPointsInRange final
{
public:
	TArray<class AMaiFlyingPoint*>                ActionPoints;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Pos;                                               // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFlyingGraph_GetPointsInRange) == 0x000008, "Wrong alignment on MaiFlyingGraph_GetPointsInRange");
static_assert(sizeof(MaiFlyingGraph_GetPointsInRange) == 0x000030, "Wrong size on MaiFlyingGraph_GetPointsInRange");
static_assert(offsetof(MaiFlyingGraph_GetPointsInRange, ActionPoints) == 0x000000, "Member 'MaiFlyingGraph_GetPointsInRange::ActionPoints' has a wrong offset!");
static_assert(offsetof(MaiFlyingGraph_GetPointsInRange, Pos) == 0x000010, "Member 'MaiFlyingGraph_GetPointsInRange::Pos' has a wrong offset!");
static_assert(offsetof(MaiFlyingGraph_GetPointsInRange, Radius) == 0x000028, "Member 'MaiFlyingGraph_GetPointsInRange::Radius' has a wrong offset!");

// Function Mai.MaiFlyingGraph.GetRandomPoint
// 0x0018 (0x0018 - 0x0000)
struct MaiFlyingGraph_GetRandomPoint final
{
public:
	TArray<class AMaiFlyingPoint*>                ActionPoints;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class AMaiFlyingPoint*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFlyingGraph_GetRandomPoint) == 0x000008, "Wrong alignment on MaiFlyingGraph_GetRandomPoint");
static_assert(sizeof(MaiFlyingGraph_GetRandomPoint) == 0x000018, "Wrong size on MaiFlyingGraph_GetRandomPoint");
static_assert(offsetof(MaiFlyingGraph_GetRandomPoint, ActionPoints) == 0x000000, "Member 'MaiFlyingGraph_GetRandomPoint::ActionPoints' has a wrong offset!");
static_assert(offsetof(MaiFlyingGraph_GetRandomPoint, ReturnValue) == 0x000010, "Member 'MaiFlyingGraph_GetRandomPoint::ReturnValue' has a wrong offset!");

// Function Mai.MaiFlyingGraphComponent.FindNearestPoint
// 0x0020 (0x0020 - 0x0000)
struct MaiFlyingGraphComponent_FindNearestPoint final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMaiFlyingPoint*                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFlyingGraphComponent_FindNearestPoint) == 0x000008, "Wrong alignment on MaiFlyingGraphComponent_FindNearestPoint");
static_assert(sizeof(MaiFlyingGraphComponent_FindNearestPoint) == 0x000020, "Wrong size on MaiFlyingGraphComponent_FindNearestPoint");
static_assert(offsetof(MaiFlyingGraphComponent_FindNearestPoint, Location) == 0x000000, "Member 'MaiFlyingGraphComponent_FindNearestPoint::Location' has a wrong offset!");
static_assert(offsetof(MaiFlyingGraphComponent_FindNearestPoint, ReturnValue) == 0x000018, "Member 'MaiFlyingGraphComponent_FindNearestPoint::ReturnValue' has a wrong offset!");

// Function Mai.MaiFlyingGraphComponent.GetPointCount
// 0x0004 (0x0004 - 0x0000)
struct MaiFlyingGraphComponent_GetPointCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFlyingGraphComponent_GetPointCount) == 0x000004, "Wrong alignment on MaiFlyingGraphComponent_GetPointCount");
static_assert(sizeof(MaiFlyingGraphComponent_GetPointCount) == 0x000004, "Wrong size on MaiFlyingGraphComponent_GetPointCount");
static_assert(offsetof(MaiFlyingGraphComponent_GetPointCount, ReturnValue) == 0x000000, "Member 'MaiFlyingGraphComponent_GetPointCount::ReturnValue' has a wrong offset!");

// Function Mai.MaiFlyingGraphComponent.GetPoints
// 0x0010 (0x0010 - 0x0000)
struct MaiFlyingGraphComponent_GetPoints final
{
public:
	TArray<class AMaiFlyingPoint*>                ActionPoints;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFlyingGraphComponent_GetPoints) == 0x000008, "Wrong alignment on MaiFlyingGraphComponent_GetPoints");
static_assert(sizeof(MaiFlyingGraphComponent_GetPoints) == 0x000010, "Wrong size on MaiFlyingGraphComponent_GetPoints");
static_assert(offsetof(MaiFlyingGraphComponent_GetPoints, ActionPoints) == 0x000000, "Member 'MaiFlyingGraphComponent_GetPoints::ActionPoints' has a wrong offset!");

// Function Mai.MaiFlyingGraphComponent.GetPointsInRange
// 0x0030 (0x0030 - 0x0000)
struct MaiFlyingGraphComponent_GetPointsInRange final
{
public:
	TArray<class AMaiFlyingPoint*>                ActionPoints;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Pos;                                               // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFlyingGraphComponent_GetPointsInRange) == 0x000008, "Wrong alignment on MaiFlyingGraphComponent_GetPointsInRange");
static_assert(sizeof(MaiFlyingGraphComponent_GetPointsInRange) == 0x000030, "Wrong size on MaiFlyingGraphComponent_GetPointsInRange");
static_assert(offsetof(MaiFlyingGraphComponent_GetPointsInRange, ActionPoints) == 0x000000, "Member 'MaiFlyingGraphComponent_GetPointsInRange::ActionPoints' has a wrong offset!");
static_assert(offsetof(MaiFlyingGraphComponent_GetPointsInRange, Pos) == 0x000010, "Member 'MaiFlyingGraphComponent_GetPointsInRange::Pos' has a wrong offset!");
static_assert(offsetof(MaiFlyingGraphComponent_GetPointsInRange, Radius) == 0x000028, "Member 'MaiFlyingGraphComponent_GetPointsInRange::Radius' has a wrong offset!");

// Function Mai.MaiFlyingGraphComponent.GetRandomPoint
// 0x0008 (0x0008 - 0x0000)
struct MaiFlyingGraphComponent_GetRandomPoint final
{
public:
	class AMaiFlyingPoint*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFlyingGraphComponent_GetRandomPoint) == 0x000008, "Wrong alignment on MaiFlyingGraphComponent_GetRandomPoint");
static_assert(sizeof(MaiFlyingGraphComponent_GetRandomPoint) == 0x000008, "Wrong size on MaiFlyingGraphComponent_GetRandomPoint");
static_assert(offsetof(MaiFlyingGraphComponent_GetRandomPoint, ReturnValue) == 0x000000, "Member 'MaiFlyingGraphComponent_GetRandomPoint::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.actionsAbortByClass
// 0x0018 (0x0018 - 0x0000)
struct MaiFunctions_ActionsAbortByClass final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UBeingAction>               ActionClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Exact;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_ActionsAbortByClass) == 0x000008, "Wrong alignment on MaiFunctions_ActionsAbortByClass");
static_assert(sizeof(MaiFunctions_ActionsAbortByClass) == 0x000018, "Wrong size on MaiFunctions_ActionsAbortByClass");
static_assert(offsetof(MaiFunctions_ActionsAbortByClass, Controller) == 0x000000, "Member 'MaiFunctions_ActionsAbortByClass::Controller' has a wrong offset!");
static_assert(offsetof(MaiFunctions_ActionsAbortByClass, ActionClass) == 0x000008, "Member 'MaiFunctions_ActionsAbortByClass::ActionClass' has a wrong offset!");
static_assert(offsetof(MaiFunctions_ActionsAbortByClass, Exact) == 0x000010, "Member 'MaiFunctions_ActionsAbortByClass::Exact' has a wrong offset!");

// Function Mai.MaiFunctions.actionsAbortByPriority
// 0x0010 (0x0010 - 0x0000)
struct MaiFunctions_ActionsAbortByPriority final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIRequestPriority                            Priority;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Exact;                                             // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_ActionsAbortByPriority) == 0x000008, "Wrong alignment on MaiFunctions_ActionsAbortByPriority");
static_assert(sizeof(MaiFunctions_ActionsAbortByPriority) == 0x000010, "Wrong size on MaiFunctions_ActionsAbortByPriority");
static_assert(offsetof(MaiFunctions_ActionsAbortByPriority, Controller) == 0x000000, "Member 'MaiFunctions_ActionsAbortByPriority::Controller' has a wrong offset!");
static_assert(offsetof(MaiFunctions_ActionsAbortByPriority, Priority) == 0x000008, "Member 'MaiFunctions_ActionsAbortByPriority::Priority' has a wrong offset!");
static_assert(offsetof(MaiFunctions_ActionsAbortByPriority, Exact) == 0x000009, "Member 'MaiFunctions_ActionsAbortByPriority::Exact' has a wrong offset!");

// Function Mai.MaiFunctions.actionsAbortInstigatedBy
// 0x0010 (0x0010 - 0x0000)
struct MaiFunctions_ActionsAbortInstigatedBy final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          InstigatedBy;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_ActionsAbortInstigatedBy) == 0x000008, "Wrong alignment on MaiFunctions_ActionsAbortInstigatedBy");
static_assert(sizeof(MaiFunctions_ActionsAbortInstigatedBy) == 0x000010, "Wrong size on MaiFunctions_ActionsAbortInstigatedBy");
static_assert(offsetof(MaiFunctions_ActionsAbortInstigatedBy, Controller) == 0x000000, "Member 'MaiFunctions_ActionsAbortInstigatedBy::Controller' has a wrong offset!");
static_assert(offsetof(MaiFunctions_ActionsAbortInstigatedBy, InstigatedBy) == 0x000008, "Member 'MaiFunctions_ActionsAbortInstigatedBy::InstigatedBy' has a wrong offset!");

// Function Mai.MaiFunctions.actionsAdd
// 0x0028 (0x0028 - 0x0000)
struct MaiFunctions_ActionsAdd final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBeingAction*                           Action;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIRequestPriority                            Priority;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                InstigatedBy;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_ActionsAdd) == 0x000008, "Wrong alignment on MaiFunctions_ActionsAdd");
static_assert(sizeof(MaiFunctions_ActionsAdd) == 0x000028, "Wrong size on MaiFunctions_ActionsAdd");
static_assert(offsetof(MaiFunctions_ActionsAdd, Controller) == 0x000000, "Member 'MaiFunctions_ActionsAdd::Controller' has a wrong offset!");
static_assert(offsetof(MaiFunctions_ActionsAdd, Action) == 0x000008, "Member 'MaiFunctions_ActionsAdd::Action' has a wrong offset!");
static_assert(offsetof(MaiFunctions_ActionsAdd, Priority) == 0x000010, "Member 'MaiFunctions_ActionsAdd::Priority' has a wrong offset!");
static_assert(offsetof(MaiFunctions_ActionsAdd, InstigatedBy) == 0x000018, "Member 'MaiFunctions_ActionsAdd::InstigatedBy' has a wrong offset!");
static_assert(offsetof(MaiFunctions_ActionsAdd, ReturnValue) == 0x000020, "Member 'MaiFunctions_ActionsAdd::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.actionsClearAll
// 0x0008 (0x0008 - 0x0000)
struct MaiFunctions_ActionsClearAll final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_ActionsClearAll) == 0x000008, "Wrong alignment on MaiFunctions_ActionsClearAll");
static_assert(sizeof(MaiFunctions_ActionsClearAll) == 0x000008, "Wrong size on MaiFunctions_ActionsClearAll");
static_assert(offsetof(MaiFunctions_ActionsClearAll, Controller) == 0x000000, "Member 'MaiFunctions_ActionsClearAll::Controller' has a wrong offset!");

// Function Mai.MaiFunctions.actionsGetCurrent
// 0x0010 (0x0010 - 0x0000)
struct MaiFunctions_ActionsGetCurrent final
{
public:
	const class AController*                      Controller;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBeingAction*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_ActionsGetCurrent) == 0x000008, "Wrong alignment on MaiFunctions_ActionsGetCurrent");
static_assert(sizeof(MaiFunctions_ActionsGetCurrent) == 0x000010, "Wrong size on MaiFunctions_ActionsGetCurrent");
static_assert(offsetof(MaiFunctions_ActionsGetCurrent, Controller) == 0x000000, "Member 'MaiFunctions_ActionsGetCurrent::Controller' has a wrong offset!");
static_assert(offsetof(MaiFunctions_ActionsGetCurrent, ReturnValue) == 0x000008, "Member 'MaiFunctions_ActionsGetCurrent::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.actionsHasAny
// 0x0010 (0x0010 - 0x0000)
struct MaiFunctions_ActionsHasAny final
{
public:
	const class AController*                      Controller;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_ActionsHasAny) == 0x000008, "Wrong alignment on MaiFunctions_ActionsHasAny");
static_assert(sizeof(MaiFunctions_ActionsHasAny) == 0x000010, "Wrong size on MaiFunctions_ActionsHasAny");
static_assert(offsetof(MaiFunctions_ActionsHasAny, Controller) == 0x000000, "Member 'MaiFunctions_ActionsHasAny::Controller' has a wrong offset!");
static_assert(offsetof(MaiFunctions_ActionsHasAny, ReturnValue) == 0x000008, "Member 'MaiFunctions_ActionsHasAny::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.actionsHasOfClass
// 0x0018 (0x0018 - 0x0000)
struct MaiFunctions_ActionsHasOfClass final
{
public:
	const class AController*                      Controller;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UBeingAction>               ActionClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_ActionsHasOfClass) == 0x000008, "Wrong alignment on MaiFunctions_ActionsHasOfClass");
static_assert(sizeof(MaiFunctions_ActionsHasOfClass) == 0x000018, "Wrong size on MaiFunctions_ActionsHasOfClass");
static_assert(offsetof(MaiFunctions_ActionsHasOfClass, Controller) == 0x000000, "Member 'MaiFunctions_ActionsHasOfClass::Controller' has a wrong offset!");
static_assert(offsetof(MaiFunctions_ActionsHasOfClass, ActionClass) == 0x000008, "Member 'MaiFunctions_ActionsHasOfClass::ActionClass' has a wrong offset!");
static_assert(offsetof(MaiFunctions_ActionsHasOfClass, ReturnValue) == 0x000010, "Member 'MaiFunctions_ActionsHasOfClass::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.actionsIsActive
// 0x0018 (0x0018 - 0x0000)
struct MaiFunctions_ActionsIsActive final
{
public:
	const class AController*                      Controller;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UBeingAction>               ActionClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_ActionsIsActive) == 0x000008, "Wrong alignment on MaiFunctions_ActionsIsActive");
static_assert(sizeof(MaiFunctions_ActionsIsActive) == 0x000018, "Wrong size on MaiFunctions_ActionsIsActive");
static_assert(offsetof(MaiFunctions_ActionsIsActive, Controller) == 0x000000, "Member 'MaiFunctions_ActionsIsActive::Controller' has a wrong offset!");
static_assert(offsetof(MaiFunctions_ActionsIsActive, ActionClass) == 0x000008, "Member 'MaiFunctions_ActionsIsActive::ActionClass' has a wrong offset!");
static_assert(offsetof(MaiFunctions_ActionsIsActive, ReturnValue) == 0x000010, "Member 'MaiFunctions_ActionsIsActive::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.allowPhysicsRotationDuringRootMotion
// 0x0010 (0x0010 - 0x0000)
struct MaiFunctions_AllowPhysicsRotationDuringRootMotion final
{
public:
	class ACharacter*                             Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Allow;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_AllowPhysicsRotationDuringRootMotion) == 0x000008, "Wrong alignment on MaiFunctions_AllowPhysicsRotationDuringRootMotion");
static_assert(sizeof(MaiFunctions_AllowPhysicsRotationDuringRootMotion) == 0x000010, "Wrong size on MaiFunctions_AllowPhysicsRotationDuringRootMotion");
static_assert(offsetof(MaiFunctions_AllowPhysicsRotationDuringRootMotion, Being) == 0x000000, "Member 'MaiFunctions_AllowPhysicsRotationDuringRootMotion::Being' has a wrong offset!");
static_assert(offsetof(MaiFunctions_AllowPhysicsRotationDuringRootMotion, Allow) == 0x000008, "Member 'MaiFunctions_AllowPhysicsRotationDuringRootMotion::Allow' has a wrong offset!");
static_assert(offsetof(MaiFunctions_AllowPhysicsRotationDuringRootMotion, Priority) == 0x000009, "Member 'MaiFunctions_AllowPhysicsRotationDuringRootMotion::Priority' has a wrong offset!");

// Function Mai.MaiFunctions.calcAvaragePosition
// 0x0030 (0x0030 - 0x0000)
struct MaiFunctions_CalcAvaragePosition final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	const class AActor*                           Weighted;                                          // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_CalcAvaragePosition) == 0x000008, "Wrong alignment on MaiFunctions_CalcAvaragePosition");
static_assert(sizeof(MaiFunctions_CalcAvaragePosition) == 0x000030, "Wrong size on MaiFunctions_CalcAvaragePosition");
static_assert(offsetof(MaiFunctions_CalcAvaragePosition, Actors) == 0x000000, "Member 'MaiFunctions_CalcAvaragePosition::Actors' has a wrong offset!");
static_assert(offsetof(MaiFunctions_CalcAvaragePosition, Weighted) == 0x000010, "Member 'MaiFunctions_CalcAvaragePosition::Weighted' has a wrong offset!");
static_assert(offsetof(MaiFunctions_CalcAvaragePosition, ReturnValue) == 0x000018, "Member 'MaiFunctions_CalcAvaragePosition::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.calcDirLocation
// 0x0048 (0x0048 - 0x0000)
struct MaiFunctions_CalcDirLocation final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Source;                                            // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Inversed;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_CalcDirLocation) == 0x000008, "Wrong alignment on MaiFunctions_CalcDirLocation");
static_assert(sizeof(MaiFunctions_CalcDirLocation) == 0x000048, "Wrong size on MaiFunctions_CalcDirLocation");
static_assert(offsetof(MaiFunctions_CalcDirLocation, Being) == 0x000000, "Member 'MaiFunctions_CalcDirLocation::Being' has a wrong offset!");
static_assert(offsetof(MaiFunctions_CalcDirLocation, Target) == 0x000008, "Member 'MaiFunctions_CalcDirLocation::Target' has a wrong offset!");
static_assert(offsetof(MaiFunctions_CalcDirLocation, Source) == 0x000010, "Member 'MaiFunctions_CalcDirLocation::Source' has a wrong offset!");
static_assert(offsetof(MaiFunctions_CalcDirLocation, Radius) == 0x000028, "Member 'MaiFunctions_CalcDirLocation::Radius' has a wrong offset!");
static_assert(offsetof(MaiFunctions_CalcDirLocation, Inversed) == 0x00002C, "Member 'MaiFunctions_CalcDirLocation::Inversed' has a wrong offset!");
static_assert(offsetof(MaiFunctions_CalcDirLocation, ReturnValue) == 0x000030, "Member 'MaiFunctions_CalcDirLocation::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.canGoDirectly
// 0x0050 (0x0050 - 0x0000)
struct MaiFunctions_CanGoDirectly final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PointA;                                            // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PointB;                                            // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANavigationData*                        NavData;                                           // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x004C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_CanGoDirectly) == 0x000008, "Wrong alignment on MaiFunctions_CanGoDirectly");
static_assert(sizeof(MaiFunctions_CanGoDirectly) == 0x000050, "Wrong size on MaiFunctions_CanGoDirectly");
static_assert(offsetof(MaiFunctions_CanGoDirectly, WorldContext) == 0x000000, "Member 'MaiFunctions_CanGoDirectly::WorldContext' has a wrong offset!");
static_assert(offsetof(MaiFunctions_CanGoDirectly, PointA) == 0x000008, "Member 'MaiFunctions_CanGoDirectly::PointA' has a wrong offset!");
static_assert(offsetof(MaiFunctions_CanGoDirectly, PointB) == 0x000020, "Member 'MaiFunctions_CanGoDirectly::PointB' has a wrong offset!");
static_assert(offsetof(MaiFunctions_CanGoDirectly, NavData) == 0x000038, "Member 'MaiFunctions_CanGoDirectly::NavData' has a wrong offset!");
static_assert(offsetof(MaiFunctions_CanGoDirectly, FilterClass) == 0x000040, "Member 'MaiFunctions_CanGoDirectly::FilterClass' has a wrong offset!");
static_assert(offsetof(MaiFunctions_CanGoDirectly, Tolerance) == 0x000048, "Member 'MaiFunctions_CanGoDirectly::Tolerance' has a wrong offset!");
static_assert(offsetof(MaiFunctions_CanGoDirectly, ReturnValue) == 0x00004C, "Member 'MaiFunctions_CanGoDirectly::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.canWalkOnWalls
// 0x0010 (0x0010 - 0x0000)
struct MaiFunctions_CanWalkOnWalls final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_CanWalkOnWalls) == 0x000008, "Wrong alignment on MaiFunctions_CanWalkOnWalls");
static_assert(sizeof(MaiFunctions_CanWalkOnWalls) == 0x000010, "Wrong size on MaiFunctions_CanWalkOnWalls");
static_assert(offsetof(MaiFunctions_CanWalkOnWalls, Being) == 0x000000, "Member 'MaiFunctions_CanWalkOnWalls::Being' has a wrong offset!");
static_assert(offsetof(MaiFunctions_CanWalkOnWalls, ReturnValue) == 0x000008, "Member 'MaiFunctions_CanWalkOnWalls::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.clearBlackboard
// 0x0008 (0x0008 - 0x0000)
struct MaiFunctions_ClearBlackboard final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_ClearBlackboard) == 0x000008, "Wrong alignment on MaiFunctions_ClearBlackboard");
static_assert(sizeof(MaiFunctions_ClearBlackboard) == 0x000008, "Wrong size on MaiFunctions_ClearBlackboard");
static_assert(offsetof(MaiFunctions_ClearBlackboard, Controller) == 0x000000, "Member 'MaiFunctions_ClearBlackboard::Controller' has a wrong offset!");

// Function Mai.MaiFunctions.clearPhysicsRotationDuringRootMotion
// 0x0010 (0x0010 - 0x0000)
struct MaiFunctions_ClearPhysicsRotationDuringRootMotion final
{
public:
	class ACharacter*                             Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_ClearPhysicsRotationDuringRootMotion) == 0x000008, "Wrong alignment on MaiFunctions_ClearPhysicsRotationDuringRootMotion");
static_assert(sizeof(MaiFunctions_ClearPhysicsRotationDuringRootMotion) == 0x000010, "Wrong size on MaiFunctions_ClearPhysicsRotationDuringRootMotion");
static_assert(offsetof(MaiFunctions_ClearPhysicsRotationDuringRootMotion, Being) == 0x000000, "Member 'MaiFunctions_ClearPhysicsRotationDuringRootMotion::Being' has a wrong offset!");
static_assert(offsetof(MaiFunctions_ClearPhysicsRotationDuringRootMotion, Priority) == 0x000008, "Member 'MaiFunctions_ClearPhysicsRotationDuringRootMotion::Priority' has a wrong offset!");

// Function Mai.MaiFunctions.disableActionSync
// 0x0008 (0x0008 - 0x0000)
struct MaiFunctions_DisableActionSync final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_DisableActionSync) == 0x000008, "Wrong alignment on MaiFunctions_DisableActionSync");
static_assert(sizeof(MaiFunctions_DisableActionSync) == 0x000008, "Wrong size on MaiFunctions_DisableActionSync");
static_assert(offsetof(MaiFunctions_DisableActionSync, Actor) == 0x000000, "Member 'MaiFunctions_DisableActionSync::Actor' has a wrong offset!");

// Function Mai.MaiFunctions.DisableActor
// 0x0010 (0x0010 - 0x0000)
struct MaiFunctions_DisableActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Disable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_DisableActor) == 0x000008, "Wrong alignment on MaiFunctions_DisableActor");
static_assert(sizeof(MaiFunctions_DisableActor) == 0x000010, "Wrong size on MaiFunctions_DisableActor");
static_assert(offsetof(MaiFunctions_DisableActor, Actor) == 0x000000, "Member 'MaiFunctions_DisableActor::Actor' has a wrong offset!");
static_assert(offsetof(MaiFunctions_DisableActor, Disable) == 0x000008, "Member 'MaiFunctions_DisableActor::Disable' has a wrong offset!");

// Function Mai.MaiFunctions.DisableBehaviorTree
// 0x0010 (0x0010 - 0x0000)
struct MaiFunctions_DisableBehaviorTree final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Reason;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_DisableBehaviorTree) == 0x000008, "Wrong alignment on MaiFunctions_DisableBehaviorTree");
static_assert(sizeof(MaiFunctions_DisableBehaviorTree) == 0x000010, "Wrong size on MaiFunctions_DisableBehaviorTree");
static_assert(offsetof(MaiFunctions_DisableBehaviorTree, Actor) == 0x000000, "Member 'MaiFunctions_DisableBehaviorTree::Actor' has a wrong offset!");
static_assert(offsetof(MaiFunctions_DisableBehaviorTree, Reason) == 0x000008, "Member 'MaiFunctions_DisableBehaviorTree::Reason' has a wrong offset!");

// Function Mai.MaiFunctions.doesPathToLocationExists
// 0x0050 (0x0050 - 0x0000)
struct MaiFunctions_DoesPathToLocationExists final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PathStart;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PathEnd;                                           // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 PathfindingContext;                                // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_DoesPathToLocationExists) == 0x000008, "Wrong alignment on MaiFunctions_DoesPathToLocationExists");
static_assert(sizeof(MaiFunctions_DoesPathToLocationExists) == 0x000050, "Wrong size on MaiFunctions_DoesPathToLocationExists");
static_assert(offsetof(MaiFunctions_DoesPathToLocationExists, WorldContext) == 0x000000, "Member 'MaiFunctions_DoesPathToLocationExists::WorldContext' has a wrong offset!");
static_assert(offsetof(MaiFunctions_DoesPathToLocationExists, PathStart) == 0x000008, "Member 'MaiFunctions_DoesPathToLocationExists::PathStart' has a wrong offset!");
static_assert(offsetof(MaiFunctions_DoesPathToLocationExists, PathEnd) == 0x000020, "Member 'MaiFunctions_DoesPathToLocationExists::PathEnd' has a wrong offset!");
static_assert(offsetof(MaiFunctions_DoesPathToLocationExists, PathfindingContext) == 0x000038, "Member 'MaiFunctions_DoesPathToLocationExists::PathfindingContext' has a wrong offset!");
static_assert(offsetof(MaiFunctions_DoesPathToLocationExists, FilterClass) == 0x000040, "Member 'MaiFunctions_DoesPathToLocationExists::FilterClass' has a wrong offset!");
static_assert(offsetof(MaiFunctions_DoesPathToLocationExists, ReturnValue) == 0x000048, "Member 'MaiFunctions_DoesPathToLocationExists::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.drawLastLocations
// 0x0010 (0x0010 - 0x0000)
struct MaiFunctions_DrawLastLocations final
{
public:
	class UBeingLocationTracker*                  Tracker;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Extent;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_DrawLastLocations) == 0x000008, "Wrong alignment on MaiFunctions_DrawLastLocations");
static_assert(sizeof(MaiFunctions_DrawLastLocations) == 0x000010, "Wrong size on MaiFunctions_DrawLastLocations");
static_assert(offsetof(MaiFunctions_DrawLastLocations, Tracker) == 0x000000, "Member 'MaiFunctions_DrawLastLocations::Tracker' has a wrong offset!");
static_assert(offsetof(MaiFunctions_DrawLastLocations, Extent) == 0x000008, "Member 'MaiFunctions_DrawLastLocations::Extent' has a wrong offset!");

// Function Mai.MaiFunctions.EnableBehaviorTree
// 0x0010 (0x0010 - 0x0000)
struct MaiFunctions_EnableBehaviorTree final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Reason;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_EnableBehaviorTree) == 0x000008, "Wrong alignment on MaiFunctions_EnableBehaviorTree");
static_assert(sizeof(MaiFunctions_EnableBehaviorTree) == 0x000010, "Wrong size on MaiFunctions_EnableBehaviorTree");
static_assert(offsetof(MaiFunctions_EnableBehaviorTree, Actor) == 0x000000, "Member 'MaiFunctions_EnableBehaviorTree::Actor' has a wrong offset!");
static_assert(offsetof(MaiFunctions_EnableBehaviorTree, Reason) == 0x000008, "Member 'MaiFunctions_EnableBehaviorTree::Reason' has a wrong offset!");

// Function Mai.MaiFunctions.filterActionPoints_ByClass
// 0x0028 (0x0028 - 0x0000)
struct MaiFunctions_FilterActionPoints_ByClass final
{
public:
	TArray<class AMaiActionPoint*>                InPoints;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AMaiActionPoint*>                OutPoints;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class AMaiActionPoint>            PointClass;                                        // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_FilterActionPoints_ByClass) == 0x000008, "Wrong alignment on MaiFunctions_FilterActionPoints_ByClass");
static_assert(sizeof(MaiFunctions_FilterActionPoints_ByClass) == 0x000028, "Wrong size on MaiFunctions_FilterActionPoints_ByClass");
static_assert(offsetof(MaiFunctions_FilterActionPoints_ByClass, InPoints) == 0x000000, "Member 'MaiFunctions_FilterActionPoints_ByClass::InPoints' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_ByClass, OutPoints) == 0x000010, "Member 'MaiFunctions_FilterActionPoints_ByClass::OutPoints' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_ByClass, PointClass) == 0x000020, "Member 'MaiFunctions_FilterActionPoints_ByClass::PointClass' has a wrong offset!");

// Function Mai.MaiFunctions.filterActionPoints_ByCondition
// 0x0030 (0x0030 - 0x0000)
struct MaiFunctions_FilterActionPoints_ByCondition final
{
public:
	TArray<class AMaiActionPoint*>                InPoints;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AMaiActionPoint*>                OutPoints;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class AActor*                                 Caller;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDaiCondition*                          Condition;                                         // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_FilterActionPoints_ByCondition) == 0x000008, "Wrong alignment on MaiFunctions_FilterActionPoints_ByCondition");
static_assert(sizeof(MaiFunctions_FilterActionPoints_ByCondition) == 0x000030, "Wrong size on MaiFunctions_FilterActionPoints_ByCondition");
static_assert(offsetof(MaiFunctions_FilterActionPoints_ByCondition, InPoints) == 0x000000, "Member 'MaiFunctions_FilterActionPoints_ByCondition::InPoints' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_ByCondition, OutPoints) == 0x000010, "Member 'MaiFunctions_FilterActionPoints_ByCondition::OutPoints' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_ByCondition, Caller) == 0x000020, "Member 'MaiFunctions_FilterActionPoints_ByCondition::Caller' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_ByCondition, Condition) == 0x000028, "Member 'MaiFunctions_FilterActionPoints_ByCondition::Condition' has a wrong offset!");

// Function Mai.MaiFunctions.filterActionPoints_ByConditions
// 0x0058 (0x0058 - 0x0000)
struct MaiFunctions_FilterActionPoints_ByConditions final
{
public:
	TArray<class AMaiActionPoint*>                InPoints;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AMaiActionPoint*>                OutPoints;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class AActor*                                 Caller;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDaiConditions                         Conditions;                                        // 0x0028(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_FilterActionPoints_ByConditions) == 0x000008, "Wrong alignment on MaiFunctions_FilterActionPoints_ByConditions");
static_assert(sizeof(MaiFunctions_FilterActionPoints_ByConditions) == 0x000058, "Wrong size on MaiFunctions_FilterActionPoints_ByConditions");
static_assert(offsetof(MaiFunctions_FilterActionPoints_ByConditions, InPoints) == 0x000000, "Member 'MaiFunctions_FilterActionPoints_ByConditions::InPoints' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_ByConditions, OutPoints) == 0x000010, "Member 'MaiFunctions_FilterActionPoints_ByConditions::OutPoints' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_ByConditions, Caller) == 0x000020, "Member 'MaiFunctions_FilterActionPoints_ByConditions::Caller' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_ByConditions, Conditions) == 0x000028, "Member 'MaiFunctions_FilterActionPoints_ByConditions::Conditions' has a wrong offset!");

// Function Mai.MaiFunctions.filterActionPoints_ByUseConditions
// 0x0028 (0x0028 - 0x0000)
struct MaiFunctions_FilterActionPoints_ByUseConditions final
{
public:
	TArray<class AMaiActionPoint*>                InPoints;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AMaiActionPoint*>                OutPoints;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class AActor*                                 User;                                              // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_FilterActionPoints_ByUseConditions) == 0x000008, "Wrong alignment on MaiFunctions_FilterActionPoints_ByUseConditions");
static_assert(sizeof(MaiFunctions_FilterActionPoints_ByUseConditions) == 0x000028, "Wrong size on MaiFunctions_FilterActionPoints_ByUseConditions");
static_assert(offsetof(MaiFunctions_FilterActionPoints_ByUseConditions, InPoints) == 0x000000, "Member 'MaiFunctions_FilterActionPoints_ByUseConditions::InPoints' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_ByUseConditions, OutPoints) == 0x000010, "Member 'MaiFunctions_FilterActionPoints_ByUseConditions::OutPoints' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_ByUseConditions, User) == 0x000020, "Member 'MaiFunctions_FilterActionPoints_ByUseConditions::User' has a wrong offset!");

// Function Mai.MaiFunctions.filterActionPoints_ByWeight
// 0x0028 (0x0028 - 0x0000)
struct MaiFunctions_FilterActionPoints_ByWeight final
{
public:
	TArray<class AMaiActionPoint*>                InPoints;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AMaiActionPoint*>                OutPoints;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         IgnoreWeight;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_FilterActionPoints_ByWeight) == 0x000008, "Wrong alignment on MaiFunctions_FilterActionPoints_ByWeight");
static_assert(sizeof(MaiFunctions_FilterActionPoints_ByWeight) == 0x000028, "Wrong size on MaiFunctions_FilterActionPoints_ByWeight");
static_assert(offsetof(MaiFunctions_FilterActionPoints_ByWeight, InPoints) == 0x000000, "Member 'MaiFunctions_FilterActionPoints_ByWeight::InPoints' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_ByWeight, OutPoints) == 0x000010, "Member 'MaiFunctions_FilterActionPoints_ByWeight::OutPoints' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_ByWeight, IgnoreWeight) == 0x000020, "Member 'MaiFunctions_FilterActionPoints_ByWeight::IgnoreWeight' has a wrong offset!");

// Function Mai.MaiFunctions.filterActionPoints_InDetectionArea
// 0x0040 (0x0040 - 0x0000)
struct MaiFunctions_FilterActionPoints_InDetectionArea final
{
public:
	TArray<class AMaiActionPoint*>                InPoints;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AMaiActionPoint*>                OutPoints;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AreaExtent;                                        // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_FilterActionPoints_InDetectionArea) == 0x000008, "Wrong alignment on MaiFunctions_FilterActionPoints_InDetectionArea");
static_assert(sizeof(MaiFunctions_FilterActionPoints_InDetectionArea) == 0x000040, "Wrong size on MaiFunctions_FilterActionPoints_InDetectionArea");
static_assert(offsetof(MaiFunctions_FilterActionPoints_InDetectionArea, InPoints) == 0x000000, "Member 'MaiFunctions_FilterActionPoints_InDetectionArea::InPoints' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_InDetectionArea, OutPoints) == 0x000010, "Member 'MaiFunctions_FilterActionPoints_InDetectionArea::OutPoints' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_InDetectionArea, Location) == 0x000020, "Member 'MaiFunctions_FilterActionPoints_InDetectionArea::Location' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_InDetectionArea, AreaExtent) == 0x000038, "Member 'MaiFunctions_FilterActionPoints_InDetectionArea::AreaExtent' has a wrong offset!");

// Function Mai.MaiFunctions.filterActionPoints_InRange
// 0x0040 (0x0040 - 0x0000)
struct MaiFunctions_FilterActionPoints_InRange final
{
public:
	TArray<class AMaiActionPoint*>                InPoints;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AMaiActionPoint*>                OutPoints;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_FilterActionPoints_InRange) == 0x000008, "Wrong alignment on MaiFunctions_FilterActionPoints_InRange");
static_assert(sizeof(MaiFunctions_FilterActionPoints_InRange) == 0x000040, "Wrong size on MaiFunctions_FilterActionPoints_InRange");
static_assert(offsetof(MaiFunctions_FilterActionPoints_InRange, InPoints) == 0x000000, "Member 'MaiFunctions_FilterActionPoints_InRange::InPoints' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_InRange, OutPoints) == 0x000010, "Member 'MaiFunctions_FilterActionPoints_InRange::OutPoints' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_InRange, Location) == 0x000020, "Member 'MaiFunctions_FilterActionPoints_InRange::Location' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_InRange, Radius) == 0x000038, "Member 'MaiFunctions_FilterActionPoints_InRange::Radius' has a wrong offset!");

// Function Mai.MaiFunctions.filterActionPoints_InsideRange
// 0x0040 (0x0040 - 0x0000)
struct MaiFunctions_FilterActionPoints_InsideRange final
{
public:
	TArray<class AMaiActionPoint*>                InPoints;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AMaiActionPoint*>                OutPoints;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min;                                               // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_FilterActionPoints_InsideRange) == 0x000008, "Wrong alignment on MaiFunctions_FilterActionPoints_InsideRange");
static_assert(sizeof(MaiFunctions_FilterActionPoints_InsideRange) == 0x000040, "Wrong size on MaiFunctions_FilterActionPoints_InsideRange");
static_assert(offsetof(MaiFunctions_FilterActionPoints_InsideRange, InPoints) == 0x000000, "Member 'MaiFunctions_FilterActionPoints_InsideRange::InPoints' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_InsideRange, OutPoints) == 0x000010, "Member 'MaiFunctions_FilterActionPoints_InsideRange::OutPoints' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_InsideRange, Location) == 0x000020, "Member 'MaiFunctions_FilterActionPoints_InsideRange::Location' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_InsideRange, Min) == 0x000038, "Member 'MaiFunctions_FilterActionPoints_InsideRange::Min' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_InsideRange, Max) == 0x00003C, "Member 'MaiFunctions_FilterActionPoints_InsideRange::Max' has a wrong offset!");

// Function Mai.MaiFunctions.filterActionPoints_InVisibilityRadius
// 0x0040 (0x0040 - 0x0000)
struct MaiFunctions_FilterActionPoints_InVisibilityRadius final
{
public:
	TArray<class AMaiActionPoint*>                InPoints;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AMaiActionPoint*>                OutPoints;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerceptionMod;                                     // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_FilterActionPoints_InVisibilityRadius) == 0x000008, "Wrong alignment on MaiFunctions_FilterActionPoints_InVisibilityRadius");
static_assert(sizeof(MaiFunctions_FilterActionPoints_InVisibilityRadius) == 0x000040, "Wrong size on MaiFunctions_FilterActionPoints_InVisibilityRadius");
static_assert(offsetof(MaiFunctions_FilterActionPoints_InVisibilityRadius, InPoints) == 0x000000, "Member 'MaiFunctions_FilterActionPoints_InVisibilityRadius::InPoints' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_InVisibilityRadius, OutPoints) == 0x000010, "Member 'MaiFunctions_FilterActionPoints_InVisibilityRadius::OutPoints' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_InVisibilityRadius, Location) == 0x000020, "Member 'MaiFunctions_FilterActionPoints_InVisibilityRadius::Location' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_InVisibilityRadius, Radius) == 0x000038, "Member 'MaiFunctions_FilterActionPoints_InVisibilityRadius::Radius' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_InVisibilityRadius, PerceptionMod) == 0x00003C, "Member 'MaiFunctions_FilterActionPoints_InVisibilityRadius::PerceptionMod' has a wrong offset!");

// Function Mai.MaiFunctions.filterActionPoints_IsSafe
// 0x0028 (0x0028 - 0x0000)
struct MaiFunctions_FilterActionPoints_IsSafe final
{
public:
	TArray<class AMaiActionPoint*>                InPoints;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AMaiActionPoint*>                OutPoints;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_FilterActionPoints_IsSafe) == 0x000008, "Wrong alignment on MaiFunctions_FilterActionPoints_IsSafe");
static_assert(sizeof(MaiFunctions_FilterActionPoints_IsSafe) == 0x000028, "Wrong size on MaiFunctions_FilterActionPoints_IsSafe");
static_assert(offsetof(MaiFunctions_FilterActionPoints_IsSafe, InPoints) == 0x000000, "Member 'MaiFunctions_FilterActionPoints_IsSafe::InPoints' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_IsSafe, OutPoints) == 0x000010, "Member 'MaiFunctions_FilterActionPoints_IsSafe::OutPoints' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_IsSafe, Actor) == 0x000020, "Member 'MaiFunctions_FilterActionPoints_IsSafe::Actor' has a wrong offset!");

// Function Mai.MaiFunctions.filterActionPoints_OutRange
// 0x0040 (0x0040 - 0x0000)
struct MaiFunctions_FilterActionPoints_OutRange final
{
public:
	TArray<class AMaiActionPoint*>                InPoints;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AMaiActionPoint*>                OutPoints;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_FilterActionPoints_OutRange) == 0x000008, "Wrong alignment on MaiFunctions_FilterActionPoints_OutRange");
static_assert(sizeof(MaiFunctions_FilterActionPoints_OutRange) == 0x000040, "Wrong size on MaiFunctions_FilterActionPoints_OutRange");
static_assert(offsetof(MaiFunctions_FilterActionPoints_OutRange, InPoints) == 0x000000, "Member 'MaiFunctions_FilterActionPoints_OutRange::InPoints' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_OutRange, OutPoints) == 0x000010, "Member 'MaiFunctions_FilterActionPoints_OutRange::OutPoints' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_OutRange, Location) == 0x000020, "Member 'MaiFunctions_FilterActionPoints_OutRange::Location' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_OutRange, Radius) == 0x000038, "Member 'MaiFunctions_FilterActionPoints_OutRange::Radius' has a wrong offset!");

// Function Mai.MaiFunctions.filterActionPoints_SortByRange
// 0x0038 (0x0038 - 0x0000)
struct MaiFunctions_FilterActionPoints_SortByRange final
{
public:
	TArray<class AMaiActionPoint*>                InPoints;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AMaiActionPoint*>                OutPoints;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_FilterActionPoints_SortByRange) == 0x000008, "Wrong alignment on MaiFunctions_FilterActionPoints_SortByRange");
static_assert(sizeof(MaiFunctions_FilterActionPoints_SortByRange) == 0x000038, "Wrong size on MaiFunctions_FilterActionPoints_SortByRange");
static_assert(offsetof(MaiFunctions_FilterActionPoints_SortByRange, InPoints) == 0x000000, "Member 'MaiFunctions_FilterActionPoints_SortByRange::InPoints' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_SortByRange, OutPoints) == 0x000010, "Member 'MaiFunctions_FilterActionPoints_SortByRange::OutPoints' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterActionPoints_SortByRange, Location) == 0x000020, "Member 'MaiFunctions_FilterActionPoints_SortByRange::Location' has a wrong offset!");

// Function Mai.MaiFunctions.filterBeings_By2D5Distance
// 0x0030 (0x0030 - 0x0000)
struct MaiFunctions_FilterBeings_By2D5Distance final
{
public:
	TArray<class APawn*>                          InBeings;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class APawn*>                          OutBeings;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDist;                                           // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDist;                                           // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_FilterBeings_By2D5Distance) == 0x000008, "Wrong alignment on MaiFunctions_FilterBeings_By2D5Distance");
static_assert(sizeof(MaiFunctions_FilterBeings_By2D5Distance) == 0x000030, "Wrong size on MaiFunctions_FilterBeings_By2D5Distance");
static_assert(offsetof(MaiFunctions_FilterBeings_By2D5Distance, InBeings) == 0x000000, "Member 'MaiFunctions_FilterBeings_By2D5Distance::InBeings' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterBeings_By2D5Distance, OutBeings) == 0x000010, "Member 'MaiFunctions_FilterBeings_By2D5Distance::OutBeings' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterBeings_By2D5Distance, Actor) == 0x000020, "Member 'MaiFunctions_FilterBeings_By2D5Distance::Actor' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterBeings_By2D5Distance, MaxDist) == 0x000028, "Member 'MaiFunctions_FilterBeings_By2D5Distance::MaxDist' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterBeings_By2D5Distance, MinDist) == 0x00002C, "Member 'MaiFunctions_FilterBeings_By2D5Distance::MinDist' has a wrong offset!");

// Function Mai.MaiFunctions.filterBeings_ByAggro
// 0x0030 (0x0030 - 0x0000)
struct MaiFunctions_FilterBeings_ByAggro final
{
public:
	TArray<class APawn*>                          InBeings;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class APawn*>                          OutBeings;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class APawn*                                  Being;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Neutral;                                           // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Cautious;                                          // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Aggressive;                                        // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_FilterBeings_ByAggro) == 0x000008, "Wrong alignment on MaiFunctions_FilterBeings_ByAggro");
static_assert(sizeof(MaiFunctions_FilterBeings_ByAggro) == 0x000030, "Wrong size on MaiFunctions_FilterBeings_ByAggro");
static_assert(offsetof(MaiFunctions_FilterBeings_ByAggro, InBeings) == 0x000000, "Member 'MaiFunctions_FilterBeings_ByAggro::InBeings' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterBeings_ByAggro, OutBeings) == 0x000010, "Member 'MaiFunctions_FilterBeings_ByAggro::OutBeings' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterBeings_ByAggro, Being) == 0x000020, "Member 'MaiFunctions_FilterBeings_ByAggro::Being' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterBeings_ByAggro, Neutral) == 0x000028, "Member 'MaiFunctions_FilterBeings_ByAggro::Neutral' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterBeings_ByAggro, Cautious) == 0x000029, "Member 'MaiFunctions_FilterBeings_ByAggro::Cautious' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterBeings_ByAggro, Aggressive) == 0x00002A, "Member 'MaiFunctions_FilterBeings_ByAggro::Aggressive' has a wrong offset!");

// Function Mai.MaiFunctions.filterBeings_ByAngle
// 0x0058 (0x0058 - 0x0000)
struct MaiFunctions_FilterBeings_ByAngle final
{
public:
	TArray<class APawn*>                          InBeings;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class APawn*>                          OutBeings;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0038(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InAngle;                                           // 0x0054(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_FilterBeings_ByAngle) == 0x000008, "Wrong alignment on MaiFunctions_FilterBeings_ByAngle");
static_assert(sizeof(MaiFunctions_FilterBeings_ByAngle) == 0x000058, "Wrong size on MaiFunctions_FilterBeings_ByAngle");
static_assert(offsetof(MaiFunctions_FilterBeings_ByAngle, InBeings) == 0x000000, "Member 'MaiFunctions_FilterBeings_ByAngle::InBeings' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterBeings_ByAngle, OutBeings) == 0x000010, "Member 'MaiFunctions_FilterBeings_ByAngle::OutBeings' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterBeings_ByAngle, Origin) == 0x000020, "Member 'MaiFunctions_FilterBeings_ByAngle::Origin' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterBeings_ByAngle, Direction) == 0x000038, "Member 'MaiFunctions_FilterBeings_ByAngle::Direction' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterBeings_ByAngle, Angle) == 0x000050, "Member 'MaiFunctions_FilterBeings_ByAngle::Angle' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterBeings_ByAngle, InAngle) == 0x000054, "Member 'MaiFunctions_FilterBeings_ByAngle::InAngle' has a wrong offset!");

// Function Mai.MaiFunctions.filterBeings_ByAttitude
// 0x0030 (0x0030 - 0x0000)
struct MaiFunctions_FilterBeings_ByAttitude final
{
public:
	TArray<class APawn*>                          InBeings;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class APawn*>                          OutBeings;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class APawn*                                  Being;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Friendly;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Neutral;                                           // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Hostile;                                           // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_FilterBeings_ByAttitude) == 0x000008, "Wrong alignment on MaiFunctions_FilterBeings_ByAttitude");
static_assert(sizeof(MaiFunctions_FilterBeings_ByAttitude) == 0x000030, "Wrong size on MaiFunctions_FilterBeings_ByAttitude");
static_assert(offsetof(MaiFunctions_FilterBeings_ByAttitude, InBeings) == 0x000000, "Member 'MaiFunctions_FilterBeings_ByAttitude::InBeings' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterBeings_ByAttitude, OutBeings) == 0x000010, "Member 'MaiFunctions_FilterBeings_ByAttitude::OutBeings' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterBeings_ByAttitude, Being) == 0x000020, "Member 'MaiFunctions_FilterBeings_ByAttitude::Being' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterBeings_ByAttitude, Friendly) == 0x000028, "Member 'MaiFunctions_FilterBeings_ByAttitude::Friendly' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterBeings_ByAttitude, Neutral) == 0x000029, "Member 'MaiFunctions_FilterBeings_ByAttitude::Neutral' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterBeings_ByAttitude, Hostile) == 0x00002A, "Member 'MaiFunctions_FilterBeings_ByAttitude::Hostile' has a wrong offset!");

// Function Mai.MaiFunctions.filterBeings_ByDistance
// 0x0048 (0x0048 - 0x0000)
struct MaiFunctions_FilterBeings_ByDistance final
{
public:
	TArray<class APawn*>                          InBeings;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class APawn*>                          OutBeings;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	EDaiDistanceType                              DistanceType;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Origin;                                            // 0x0028(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDist;                                           // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDist;                                           // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_FilterBeings_ByDistance) == 0x000008, "Wrong alignment on MaiFunctions_FilterBeings_ByDistance");
static_assert(sizeof(MaiFunctions_FilterBeings_ByDistance) == 0x000048, "Wrong size on MaiFunctions_FilterBeings_ByDistance");
static_assert(offsetof(MaiFunctions_FilterBeings_ByDistance, InBeings) == 0x000000, "Member 'MaiFunctions_FilterBeings_ByDistance::InBeings' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterBeings_ByDistance, OutBeings) == 0x000010, "Member 'MaiFunctions_FilterBeings_ByDistance::OutBeings' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterBeings_ByDistance, DistanceType) == 0x000020, "Member 'MaiFunctions_FilterBeings_ByDistance::DistanceType' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterBeings_ByDistance, Origin) == 0x000028, "Member 'MaiFunctions_FilterBeings_ByDistance::Origin' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterBeings_ByDistance, MaxDist) == 0x000040, "Member 'MaiFunctions_FilterBeings_ByDistance::MaxDist' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterBeings_ByDistance, MinDist) == 0x000044, "Member 'MaiFunctions_FilterBeings_ByDistance::MinDist' has a wrong offset!");

// Function Mai.MaiFunctions.filterBeings_OnlyAlive
// 0x0020 (0x0020 - 0x0000)
struct MaiFunctions_FilterBeings_OnlyAlive final
{
public:
	TArray<class APawn*>                          InBeings;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class APawn*>                          OutBeings;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_FilterBeings_OnlyAlive) == 0x000008, "Wrong alignment on MaiFunctions_FilterBeings_OnlyAlive");
static_assert(sizeof(MaiFunctions_FilterBeings_OnlyAlive) == 0x000020, "Wrong size on MaiFunctions_FilterBeings_OnlyAlive");
static_assert(offsetof(MaiFunctions_FilterBeings_OnlyAlive, InBeings) == 0x000000, "Member 'MaiFunctions_FilterBeings_OnlyAlive::InBeings' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FilterBeings_OnlyAlive, OutBeings) == 0x000010, "Member 'MaiFunctions_FilterBeings_OnlyAlive::OutBeings' has a wrong offset!");

// Function Mai.MaiFunctions.findAllBeingsByTag
// 0x0030 (0x0030 - 0x0000)
struct MaiFunctions_FindAllBeingsByTag final
{
public:
	const class UObject*                          Context;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APawn>                      beingClass;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeDisabled;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APawn*>                          ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_FindAllBeingsByTag) == 0x000008, "Wrong alignment on MaiFunctions_FindAllBeingsByTag");
static_assert(sizeof(MaiFunctions_FindAllBeingsByTag) == 0x000030, "Wrong size on MaiFunctions_FindAllBeingsByTag");
static_assert(offsetof(MaiFunctions_FindAllBeingsByTag, Context) == 0x000000, "Member 'MaiFunctions_FindAllBeingsByTag::Context' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindAllBeingsByTag, Tag) == 0x000008, "Member 'MaiFunctions_FindAllBeingsByTag::Tag' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindAllBeingsByTag, beingClass) == 0x000010, "Member 'MaiFunctions_FindAllBeingsByTag::beingClass' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindAllBeingsByTag, IncludeDisabled) == 0x000018, "Member 'MaiFunctions_FindAllBeingsByTag::IncludeDisabled' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindAllBeingsByTag, ReturnValue) == 0x000020, "Member 'MaiFunctions_FindAllBeingsByTag::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.findAllBeingsWithInterface
// 0x0028 (0x0028 - 0x0000)
struct MaiFunctions_FindAllBeingsWithInterface final
{
public:
	const class UObject*                          Context;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class IInterface>                 beingInterface;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class APawn*>                          ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_FindAllBeingsWithInterface) == 0x000008, "Wrong alignment on MaiFunctions_FindAllBeingsWithInterface");
static_assert(sizeof(MaiFunctions_FindAllBeingsWithInterface) == 0x000028, "Wrong size on MaiFunctions_FindAllBeingsWithInterface");
static_assert(offsetof(MaiFunctions_FindAllBeingsWithInterface, Context) == 0x000000, "Member 'MaiFunctions_FindAllBeingsWithInterface::Context' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindAllBeingsWithInterface, Tag) == 0x000008, "Member 'MaiFunctions_FindAllBeingsWithInterface::Tag' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindAllBeingsWithInterface, beingInterface) == 0x000010, "Member 'MaiFunctions_FindAllBeingsWithInterface::beingInterface' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindAllBeingsWithInterface, ReturnValue) == 0x000018, "Member 'MaiFunctions_FindAllBeingsWithInterface::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.findAllEnemies
// 0x0020 (0x0020 - 0x0000)
struct MaiFunctions_FindAllEnemies final
{
public:
	class AMaiController*                         Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         Enemies;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_FindAllEnemies) == 0x000008, "Wrong alignment on MaiFunctions_FindAllEnemies");
static_assert(sizeof(MaiFunctions_FindAllEnemies) == 0x000020, "Wrong size on MaiFunctions_FindAllEnemies");
static_assert(offsetof(MaiFunctions_FindAllEnemies, Controller) == 0x000000, "Member 'MaiFunctions_FindAllEnemies::Controller' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindAllEnemies, Enemies) == 0x000008, "Member 'MaiFunctions_FindAllEnemies::Enemies' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindAllEnemies, ReturnValue) == 0x000018, "Member 'MaiFunctions_FindAllEnemies::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.findArchEnemy
// 0x0010 (0x0010 - 0x0000)
struct MaiFunctions_FindArchEnemy final
{
public:
	class AMaiController*                         Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_FindArchEnemy) == 0x000008, "Wrong alignment on MaiFunctions_FindArchEnemy");
static_assert(sizeof(MaiFunctions_FindArchEnemy) == 0x000010, "Wrong size on MaiFunctions_FindArchEnemy");
static_assert(offsetof(MaiFunctions_FindArchEnemy, Controller) == 0x000000, "Member 'MaiFunctions_FindArchEnemy::Controller' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindArchEnemy, ReturnValue) == 0x000008, "Member 'MaiFunctions_FindArchEnemy::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.findComponentFromAI
// 0x0018 (0x0018 - 0x0000)
struct MaiFunctions_FindComponentFromAI final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UActorComponent>            ComponentClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_FindComponentFromAI) == 0x000008, "Wrong alignment on MaiFunctions_FindComponentFromAI");
static_assert(sizeof(MaiFunctions_FindComponentFromAI) == 0x000018, "Wrong size on MaiFunctions_FindComponentFromAI");
static_assert(offsetof(MaiFunctions_FindComponentFromAI, Actor) == 0x000000, "Member 'MaiFunctions_FindComponentFromAI::Actor' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindComponentFromAI, ComponentClass) == 0x000008, "Member 'MaiFunctions_FindComponentFromAI::ComponentClass' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindComponentFromAI, ReturnValue) == 0x000010, "Member 'MaiFunctions_FindComponentFromAI::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.findFarestActionPoint
// 0x0030 (0x0030 - 0x0000)
struct MaiFunctions_FindFarestActionPoint final
{
public:
	TArray<class AMaiActionPoint*>                InPoints;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMaiActionPoint*                        ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_FindFarestActionPoint) == 0x000008, "Wrong alignment on MaiFunctions_FindFarestActionPoint");
static_assert(sizeof(MaiFunctions_FindFarestActionPoint) == 0x000030, "Wrong size on MaiFunctions_FindFarestActionPoint");
static_assert(offsetof(MaiFunctions_FindFarestActionPoint, InPoints) == 0x000000, "Member 'MaiFunctions_FindFarestActionPoint::InPoints' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindFarestActionPoint, Location) == 0x000010, "Member 'MaiFunctions_FindFarestActionPoint::Location' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindFarestActionPoint, ReturnValue) == 0x000028, "Member 'MaiFunctions_FindFarestActionPoint::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.findHighestWeight
// 0x0018 (0x0018 - 0x0000)
struct MaiFunctions_FindHighestWeight final
{
public:
	TArray<class AMaiActionPoint*>                InPoints;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_FindHighestWeight) == 0x000008, "Wrong alignment on MaiFunctions_FindHighestWeight");
static_assert(sizeof(MaiFunctions_FindHighestWeight) == 0x000018, "Wrong size on MaiFunctions_FindHighestWeight");
static_assert(offsetof(MaiFunctions_FindHighestWeight, InPoints) == 0x000000, "Member 'MaiFunctions_FindHighestWeight::InPoints' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindHighestWeight, ReturnValue) == 0x000010, "Member 'MaiFunctions_FindHighestWeight::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.findLastLocationNotInNarrowArea
// 0x0028 (0x0028 - 0x0000)
struct MaiFunctions_FindLastLocationNotInNarrowArea final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_FindLastLocationNotInNarrowArea) == 0x000008, "Wrong alignment on MaiFunctions_FindLastLocationNotInNarrowArea");
static_assert(sizeof(MaiFunctions_FindLastLocationNotInNarrowArea) == 0x000028, "Wrong size on MaiFunctions_FindLastLocationNotInNarrowArea");
static_assert(offsetof(MaiFunctions_FindLastLocationNotInNarrowArea, Location) == 0x000000, "Member 'MaiFunctions_FindLastLocationNotInNarrowArea::Location' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindLastLocationNotInNarrowArea, Actor) == 0x000018, "Member 'MaiFunctions_FindLastLocationNotInNarrowArea::Actor' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindLastLocationNotInNarrowArea, ReturnValue) == 0x000020, "Member 'MaiFunctions_FindLastLocationNotInNarrowArea::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.findNearestActionGraph
// 0x0038 (0x0038 - 0x0000)
struct MaiFunctions_FindNearestActionGraph final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GraphTag;                                          // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckPoints;                                       // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMaiActionGraph*                        ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_FindNearestActionGraph) == 0x000008, "Wrong alignment on MaiFunctions_FindNearestActionGraph");
static_assert(sizeof(MaiFunctions_FindNearestActionGraph) == 0x000038, "Wrong size on MaiFunctions_FindNearestActionGraph");
static_assert(offsetof(MaiFunctions_FindNearestActionGraph, Context) == 0x000000, "Member 'MaiFunctions_FindNearestActionGraph::Context' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindNearestActionGraph, Location) == 0x000008, "Member 'MaiFunctions_FindNearestActionGraph::Location' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindNearestActionGraph, GraphTag) == 0x000020, "Member 'MaiFunctions_FindNearestActionGraph::GraphTag' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindNearestActionGraph, CheckPoints) == 0x000028, "Member 'MaiFunctions_FindNearestActionGraph::CheckPoints' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindNearestActionGraph, ReturnValue) == 0x000030, "Member 'MaiFunctions_FindNearestActionGraph::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.findNearestActionPoint
// 0x0030 (0x0030 - 0x0000)
struct MaiFunctions_FindNearestActionPoint final
{
public:
	TArray<class AMaiActionPoint*>                InPoints;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMaiActionPoint*                        ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_FindNearestActionPoint) == 0x000008, "Wrong alignment on MaiFunctions_FindNearestActionPoint");
static_assert(sizeof(MaiFunctions_FindNearestActionPoint) == 0x000030, "Wrong size on MaiFunctions_FindNearestActionPoint");
static_assert(offsetof(MaiFunctions_FindNearestActionPoint, InPoints) == 0x000000, "Member 'MaiFunctions_FindNearestActionPoint::InPoints' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindNearestActionPoint, Location) == 0x000010, "Member 'MaiFunctions_FindNearestActionPoint::Location' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindNearestActionPoint, ReturnValue) == 0x000028, "Member 'MaiFunctions_FindNearestActionPoint::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.findNearestBeingByTag
// 0x0038 (0x0038 - 0x0000)
struct MaiFunctions_FindNearestBeingByTag final
{
public:
	const class UObject*                          Context;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APawn>                      beingClass;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_FindNearestBeingByTag) == 0x000008, "Wrong alignment on MaiFunctions_FindNearestBeingByTag");
static_assert(sizeof(MaiFunctions_FindNearestBeingByTag) == 0x000038, "Wrong size on MaiFunctions_FindNearestBeingByTag");
static_assert(offsetof(MaiFunctions_FindNearestBeingByTag, Context) == 0x000000, "Member 'MaiFunctions_FindNearestBeingByTag::Context' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindNearestBeingByTag, Origin) == 0x000008, "Member 'MaiFunctions_FindNearestBeingByTag::Origin' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindNearestBeingByTag, Tag) == 0x000020, "Member 'MaiFunctions_FindNearestBeingByTag::Tag' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindNearestBeingByTag, beingClass) == 0x000028, "Member 'MaiFunctions_FindNearestBeingByTag::beingClass' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindNearestBeingByTag, ReturnValue) == 0x000030, "Member 'MaiFunctions_FindNearestBeingByTag::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.findNearestFlyingGraph
// 0x0038 (0x0038 - 0x0000)
struct MaiFunctions_FindNearestFlyingGraph final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GraphTag;                                          // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckPoints;                                       // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMaiFlyingGraph*                        ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_FindNearestFlyingGraph) == 0x000008, "Wrong alignment on MaiFunctions_FindNearestFlyingGraph");
static_assert(sizeof(MaiFunctions_FindNearestFlyingGraph) == 0x000038, "Wrong size on MaiFunctions_FindNearestFlyingGraph");
static_assert(offsetof(MaiFunctions_FindNearestFlyingGraph, Context) == 0x000000, "Member 'MaiFunctions_FindNearestFlyingGraph::Context' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindNearestFlyingGraph, Location) == 0x000008, "Member 'MaiFunctions_FindNearestFlyingGraph::Location' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindNearestFlyingGraph, GraphTag) == 0x000020, "Member 'MaiFunctions_FindNearestFlyingGraph::GraphTag' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindNearestFlyingGraph, CheckPoints) == 0x000028, "Member 'MaiFunctions_FindNearestFlyingGraph::CheckPoints' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindNearestFlyingGraph, ReturnValue) == 0x000030, "Member 'MaiFunctions_FindNearestFlyingGraph::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.findRandomActionPoint
// 0x0020 (0x0020 - 0x0000)
struct MaiFunctions_FindRandomActionPoint final
{
public:
	TArray<class AMaiActionPoint*>                InPoints;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          UseWeights;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMaiActionPoint*                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_FindRandomActionPoint) == 0x000008, "Wrong alignment on MaiFunctions_FindRandomActionPoint");
static_assert(sizeof(MaiFunctions_FindRandomActionPoint) == 0x000020, "Wrong size on MaiFunctions_FindRandomActionPoint");
static_assert(offsetof(MaiFunctions_FindRandomActionPoint, InPoints) == 0x000000, "Member 'MaiFunctions_FindRandomActionPoint::InPoints' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindRandomActionPoint, UseWeights) == 0x000010, "Member 'MaiFunctions_FindRandomActionPoint::UseWeights' has a wrong offset!");
static_assert(offsetof(MaiFunctions_FindRandomActionPoint, ReturnValue) == 0x000018, "Member 'MaiFunctions_FindRandomActionPoint::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.get2D5Distance
// 0x0040 (0x0040 - 0x0000)
struct MaiFunctions_Get2D5Distance final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Target;                                            // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightTolerance;                                   // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusTolerance;                                   // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_Get2D5Distance) == 0x000008, "Wrong alignment on MaiFunctions_Get2D5Distance");
static_assert(sizeof(MaiFunctions_Get2D5Distance) == 0x000040, "Wrong size on MaiFunctions_Get2D5Distance");
static_assert(offsetof(MaiFunctions_Get2D5Distance, Origin) == 0x000000, "Member 'MaiFunctions_Get2D5Distance::Origin' has a wrong offset!");
static_assert(offsetof(MaiFunctions_Get2D5Distance, Target) == 0x000018, "Member 'MaiFunctions_Get2D5Distance::Target' has a wrong offset!");
static_assert(offsetof(MaiFunctions_Get2D5Distance, HeightTolerance) == 0x000030, "Member 'MaiFunctions_Get2D5Distance::HeightTolerance' has a wrong offset!");
static_assert(offsetof(MaiFunctions_Get2D5Distance, RadiusTolerance) == 0x000034, "Member 'MaiFunctions_Get2D5Distance::RadiusTolerance' has a wrong offset!");
static_assert(offsetof(MaiFunctions_Get2D5Distance, ReturnValue) == 0x000038, "Member 'MaiFunctions_Get2D5Distance::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.get2D5DistanceBetween
// 0x0018 (0x0018 - 0x0000)
struct MaiFunctions_Get2D5DistanceBetween final
{
public:
	class AActor*                                 Origin;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Overlap;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_Get2D5DistanceBetween) == 0x000008, "Wrong alignment on MaiFunctions_Get2D5DistanceBetween");
static_assert(sizeof(MaiFunctions_Get2D5DistanceBetween) == 0x000018, "Wrong size on MaiFunctions_Get2D5DistanceBetween");
static_assert(offsetof(MaiFunctions_Get2D5DistanceBetween, Origin) == 0x000000, "Member 'MaiFunctions_Get2D5DistanceBetween::Origin' has a wrong offset!");
static_assert(offsetof(MaiFunctions_Get2D5DistanceBetween, Target) == 0x000008, "Member 'MaiFunctions_Get2D5DistanceBetween::Target' has a wrong offset!");
static_assert(offsetof(MaiFunctions_Get2D5DistanceBetween, Overlap) == 0x000010, "Member 'MaiFunctions_Get2D5DistanceBetween::Overlap' has a wrong offset!");
static_assert(offsetof(MaiFunctions_Get2D5DistanceBetween, ReturnValue) == 0x000014, "Member 'MaiFunctions_Get2D5DistanceBetween::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.get2D5DistanceTo
// 0x0028 (0x0028 - 0x0000)
struct MaiFunctions_Get2D5DistanceTo final
{
public:
	class AActor*                                 Origin;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Target;                                            // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Overlap;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_Get2D5DistanceTo) == 0x000008, "Wrong alignment on MaiFunctions_Get2D5DistanceTo");
static_assert(sizeof(MaiFunctions_Get2D5DistanceTo) == 0x000028, "Wrong size on MaiFunctions_Get2D5DistanceTo");
static_assert(offsetof(MaiFunctions_Get2D5DistanceTo, Origin) == 0x000000, "Member 'MaiFunctions_Get2D5DistanceTo::Origin' has a wrong offset!");
static_assert(offsetof(MaiFunctions_Get2D5DistanceTo, Target) == 0x000008, "Member 'MaiFunctions_Get2D5DistanceTo::Target' has a wrong offset!");
static_assert(offsetof(MaiFunctions_Get2D5DistanceTo, Overlap) == 0x000020, "Member 'MaiFunctions_Get2D5DistanceTo::Overlap' has a wrong offset!");
static_assert(offsetof(MaiFunctions_Get2D5DistanceTo, ReturnValue) == 0x000024, "Member 'MaiFunctions_Get2D5DistanceTo::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.getActorActionPoints
// 0x0018 (0x0018 - 0x0000)
struct MaiFunctions_GetActorActionPoints final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AMaiActionPoint*>                OutPoints;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_GetActorActionPoints) == 0x000008, "Wrong alignment on MaiFunctions_GetActorActionPoints");
static_assert(sizeof(MaiFunctions_GetActorActionPoints) == 0x000018, "Wrong size on MaiFunctions_GetActorActionPoints");
static_assert(offsetof(MaiFunctions_GetActorActionPoints, Actor) == 0x000000, "Member 'MaiFunctions_GetActorActionPoints::Actor' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetActorActionPoints, OutPoints) == 0x000008, "Member 'MaiFunctions_GetActorActionPoints::OutPoints' has a wrong offset!");

// Function Mai.MaiFunctions.getActorDistToNearestBeing
// 0x0028 (0x0028 - 0x0000)
struct MaiFunctions_GetActorDistToNearestBeing final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APawn>                      beingClass;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  NearestBeing;                                      // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_GetActorDistToNearestBeing) == 0x000008, "Wrong alignment on MaiFunctions_GetActorDistToNearestBeing");
static_assert(sizeof(MaiFunctions_GetActorDistToNearestBeing) == 0x000028, "Wrong size on MaiFunctions_GetActorDistToNearestBeing");
static_assert(offsetof(MaiFunctions_GetActorDistToNearestBeing, Actor) == 0x000000, "Member 'MaiFunctions_GetActorDistToNearestBeing::Actor' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetActorDistToNearestBeing, Tag) == 0x000008, "Member 'MaiFunctions_GetActorDistToNearestBeing::Tag' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetActorDistToNearestBeing, beingClass) == 0x000010, "Member 'MaiFunctions_GetActorDistToNearestBeing::beingClass' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetActorDistToNearestBeing, NearestBeing) == 0x000018, "Member 'MaiFunctions_GetActorDistToNearestBeing::NearestBeing' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetActorDistToNearestBeing, ReturnValue) == 0x000020, "Member 'MaiFunctions_GetActorDistToNearestBeing::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.getAgentTransform
// 0x0070 (0x0070 - 0x0000)
struct MaiFunctions_GetAgentTransform final
{
public:
	class AActor*                                 Agent;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_GetAgentTransform) == 0x000010, "Wrong alignment on MaiFunctions_GetAgentTransform");
static_assert(sizeof(MaiFunctions_GetAgentTransform) == 0x000070, "Wrong size on MaiFunctions_GetAgentTransform");
static_assert(offsetof(MaiFunctions_GetAgentTransform, Agent) == 0x000000, "Member 'MaiFunctions_GetAgentTransform::Agent' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetAgentTransform, ReturnValue) == 0x000010, "Member 'MaiFunctions_GetAgentTransform::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.getAllActionPoints
// 0x0028 (0x0028 - 0x0000)
struct MaiFunctions_GetAllActionPoints final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PointTag;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AMaiActionPoint>            PointClass;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AMaiActionPoint*>                OutPoints;                                         // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_GetAllActionPoints) == 0x000008, "Wrong alignment on MaiFunctions_GetAllActionPoints");
static_assert(sizeof(MaiFunctions_GetAllActionPoints) == 0x000028, "Wrong size on MaiFunctions_GetAllActionPoints");
static_assert(offsetof(MaiFunctions_GetAllActionPoints, Context) == 0x000000, "Member 'MaiFunctions_GetAllActionPoints::Context' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetAllActionPoints, PointTag) == 0x000008, "Member 'MaiFunctions_GetAllActionPoints::PointTag' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetAllActionPoints, PointClass) == 0x000010, "Member 'MaiFunctions_GetAllActionPoints::PointClass' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetAllActionPoints, OutPoints) == 0x000018, "Member 'MaiFunctions_GetAllActionPoints::OutPoints' has a wrong offset!");

// Function Mai.MaiFunctions.getAllActorsActionPoints
// 0x0028 (0x0028 - 0x0000)
struct MaiFunctions_GetAllActorsActionPoints final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorTag;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AMaiActionPoint*>                OutPoints;                                         // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_GetAllActorsActionPoints) == 0x000008, "Wrong alignment on MaiFunctions_GetAllActorsActionPoints");
static_assert(sizeof(MaiFunctions_GetAllActorsActionPoints) == 0x000028, "Wrong size on MaiFunctions_GetAllActorsActionPoints");
static_assert(offsetof(MaiFunctions_GetAllActorsActionPoints, Context) == 0x000000, "Member 'MaiFunctions_GetAllActorsActionPoints::Context' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetAllActorsActionPoints, ActorTag) == 0x000008, "Member 'MaiFunctions_GetAllActorsActionPoints::ActorTag' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetAllActorsActionPoints, ActorClass) == 0x000010, "Member 'MaiFunctions_GetAllActorsActionPoints::ActorClass' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetAllActorsActionPoints, OutPoints) == 0x000018, "Member 'MaiFunctions_GetAllActorsActionPoints::OutPoints' has a wrong offset!");

// Function Mai.MaiFunctions.getAllGraphsActionPoints
// 0x0028 (0x0028 - 0x0000)
struct MaiFunctions_GetAllGraphsActionPoints final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GraphTag;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AMaiActionGraph>            GraphClass;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AMaiActionPoint*>                OutPoints;                                         // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_GetAllGraphsActionPoints) == 0x000008, "Wrong alignment on MaiFunctions_GetAllGraphsActionPoints");
static_assert(sizeof(MaiFunctions_GetAllGraphsActionPoints) == 0x000028, "Wrong size on MaiFunctions_GetAllGraphsActionPoints");
static_assert(offsetof(MaiFunctions_GetAllGraphsActionPoints, Context) == 0x000000, "Member 'MaiFunctions_GetAllGraphsActionPoints::Context' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetAllGraphsActionPoints, GraphTag) == 0x000008, "Member 'MaiFunctions_GetAllGraphsActionPoints::GraphTag' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetAllGraphsActionPoints, GraphClass) == 0x000010, "Member 'MaiFunctions_GetAllGraphsActionPoints::GraphClass' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetAllGraphsActionPoints, OutPoints) == 0x000018, "Member 'MaiFunctions_GetAllGraphsActionPoints::OutPoints' has a wrong offset!");

// Function Mai.MaiFunctions.getAnimOnNavByAngle
// 0x00B8 (0x00B8 - 0x0000)
struct MaiFunctions_GetAnimOnNavByAngle final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         Hangle;                                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDaiAnimPlayParams                     PlayParams;                                        // 0x0030(0x0078)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          CheckComponents;                                   // 0x00A8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationAsset*                        ReturnValue;                                       // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_GetAnimOnNavByAngle) == 0x000008, "Wrong alignment on MaiFunctions_GetAnimOnNavByAngle");
static_assert(sizeof(MaiFunctions_GetAnimOnNavByAngle) == 0x0000B8, "Wrong size on MaiFunctions_GetAnimOnNavByAngle");
static_assert(offsetof(MaiFunctions_GetAnimOnNavByAngle, Actor) == 0x000000, "Member 'MaiFunctions_GetAnimOnNavByAngle::Actor' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetAnimOnNavByAngle, Tags) == 0x000008, "Member 'MaiFunctions_GetAnimOnNavByAngle::Tags' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetAnimOnNavByAngle, Hangle) == 0x000028, "Member 'MaiFunctions_GetAnimOnNavByAngle::Hangle' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetAnimOnNavByAngle, PlayParams) == 0x000030, "Member 'MaiFunctions_GetAnimOnNavByAngle::PlayParams' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetAnimOnNavByAngle, CheckComponents) == 0x0000A8, "Member 'MaiFunctions_GetAnimOnNavByAngle::CheckComponents' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetAnimOnNavByAngle, ReturnValue) == 0x0000B0, "Member 'MaiFunctions_GetAnimOnNavByAngle::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.getAnimOnNavByTags
// 0x00B0 (0x00B0 - 0x0000)
struct MaiFunctions_GetAnimOnNavByTags final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FDaiAnimPlayParams                     PlayParams;                                        // 0x0028(0x0078)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          CheckComponents;                                   // 0x00A0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationAsset*                        ReturnValue;                                       // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_GetAnimOnNavByTags) == 0x000008, "Wrong alignment on MaiFunctions_GetAnimOnNavByTags");
static_assert(sizeof(MaiFunctions_GetAnimOnNavByTags) == 0x0000B0, "Wrong size on MaiFunctions_GetAnimOnNavByTags");
static_assert(offsetof(MaiFunctions_GetAnimOnNavByTags, Actor) == 0x000000, "Member 'MaiFunctions_GetAnimOnNavByTags::Actor' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetAnimOnNavByTags, Tags) == 0x000008, "Member 'MaiFunctions_GetAnimOnNavByTags::Tags' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetAnimOnNavByTags, PlayParams) == 0x000028, "Member 'MaiFunctions_GetAnimOnNavByTags::PlayParams' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetAnimOnNavByTags, CheckComponents) == 0x0000A0, "Member 'MaiFunctions_GetAnimOnNavByTags::CheckComponents' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetAnimOnNavByTags, ReturnValue) == 0x0000A8, "Member 'MaiFunctions_GetAnimOnNavByTags::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.getAttitudeTowards
// 0x0018 (0x0018 - 0x0000)
struct MaiFunctions_GetAttitudeTowards final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamAttitude                                 ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_GetAttitudeTowards) == 0x000008, "Wrong alignment on MaiFunctions_GetAttitudeTowards");
static_assert(sizeof(MaiFunctions_GetAttitudeTowards) == 0x000018, "Wrong size on MaiFunctions_GetAttitudeTowards");
static_assert(offsetof(MaiFunctions_GetAttitudeTowards, Being) == 0x000000, "Member 'MaiFunctions_GetAttitudeTowards::Being' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetAttitudeTowards, Other) == 0x000008, "Member 'MaiFunctions_GetAttitudeTowards::Other' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetAttitudeTowards, ReturnValue) == 0x000010, "Member 'MaiFunctions_GetAttitudeTowards::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.GetBehaviorTreeActiveNode
// 0x0010 (0x0010 - 0x0000)
struct MaiFunctions_GetBehaviorTreeActiveNode final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBTNode*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_GetBehaviorTreeActiveNode) == 0x000008, "Wrong alignment on MaiFunctions_GetBehaviorTreeActiveNode");
static_assert(sizeof(MaiFunctions_GetBehaviorTreeActiveNode) == 0x000010, "Wrong size on MaiFunctions_GetBehaviorTreeActiveNode");
static_assert(offsetof(MaiFunctions_GetBehaviorTreeActiveNode, Controller) == 0x000000, "Member 'MaiFunctions_GetBehaviorTreeActiveNode::Controller' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetBehaviorTreeActiveNode, ReturnValue) == 0x000008, "Member 'MaiFunctions_GetBehaviorTreeActiveNode::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.getBehaviorTreeInfo
// 0x0018 (0x0018 - 0x0000)
struct MaiFunctions_GetBehaviorTreeInfo final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_GetBehaviorTreeInfo) == 0x000008, "Wrong alignment on MaiFunctions_GetBehaviorTreeInfo");
static_assert(sizeof(MaiFunctions_GetBehaviorTreeInfo) == 0x000018, "Wrong size on MaiFunctions_GetBehaviorTreeInfo");
static_assert(offsetof(MaiFunctions_GetBehaviorTreeInfo, Controller) == 0x000000, "Member 'MaiFunctions_GetBehaviorTreeInfo::Controller' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetBehaviorTreeInfo, ReturnValue) == 0x000008, "Member 'MaiFunctions_GetBehaviorTreeInfo::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.getBlackboardFloat
// 0x0040 (0x0040 - 0x0000)
struct MaiFunctions_GetBlackboardFloat final
{
public:
	class UBlackboardComponent*                   Blackboard;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMaiBlackboardFloat                    Value;                                             // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_GetBlackboardFloat) == 0x000008, "Wrong alignment on MaiFunctions_GetBlackboardFloat");
static_assert(sizeof(MaiFunctions_GetBlackboardFloat) == 0x000040, "Wrong size on MaiFunctions_GetBlackboardFloat");
static_assert(offsetof(MaiFunctions_GetBlackboardFloat, Blackboard) == 0x000000, "Member 'MaiFunctions_GetBlackboardFloat::Blackboard' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetBlackboardFloat, Value) == 0x000008, "Member 'MaiFunctions_GetBlackboardFloat::Value' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetBlackboardFloat, ReturnValue) == 0x000038, "Member 'MaiFunctions_GetBlackboardFloat::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.getBlackboardInfo
// 0x0018 (0x0018 - 0x0000)
struct MaiFunctions_GetBlackboardInfo final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_GetBlackboardInfo) == 0x000008, "Wrong alignment on MaiFunctions_GetBlackboardInfo");
static_assert(sizeof(MaiFunctions_GetBlackboardInfo) == 0x000018, "Wrong size on MaiFunctions_GetBlackboardInfo");
static_assert(offsetof(MaiFunctions_GetBlackboardInfo, Controller) == 0x000000, "Member 'MaiFunctions_GetBlackboardInfo::Controller' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetBlackboardInfo, ReturnValue) == 0x000008, "Member 'MaiFunctions_GetBlackboardInfo::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.getBlackboardInt
// 0x0040 (0x0040 - 0x0000)
struct MaiFunctions_GetBlackboardInt final
{
public:
	class UBlackboardComponent*                   Blackboard;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMaiBlackboardInt                      Value;                                             // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_GetBlackboardInt) == 0x000008, "Wrong alignment on MaiFunctions_GetBlackboardInt");
static_assert(sizeof(MaiFunctions_GetBlackboardInt) == 0x000040, "Wrong size on MaiFunctions_GetBlackboardInt");
static_assert(offsetof(MaiFunctions_GetBlackboardInt, Blackboard) == 0x000000, "Member 'MaiFunctions_GetBlackboardInt::Blackboard' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetBlackboardInt, Value) == 0x000008, "Member 'MaiFunctions_GetBlackboardInt::Value' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetBlackboardInt, ReturnValue) == 0x000038, "Member 'MaiFunctions_GetBlackboardInt::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.getCurrentCustomLinkOb
// 0x0010 (0x0010 - 0x0000)
struct MaiFunctions_GetCurrentCustomLinkOb final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_GetCurrentCustomLinkOb) == 0x000008, "Wrong alignment on MaiFunctions_GetCurrentCustomLinkOb");
static_assert(sizeof(MaiFunctions_GetCurrentCustomLinkOb) == 0x000010, "Wrong size on MaiFunctions_GetCurrentCustomLinkOb");
static_assert(offsetof(MaiFunctions_GetCurrentCustomLinkOb, Being) == 0x000000, "Member 'MaiFunctions_GetCurrentCustomLinkOb::Being' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetCurrentCustomLinkOb, ReturnValue) == 0x000008, "Member 'MaiFunctions_GetCurrentCustomLinkOb::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.getCurrentGoalLocation
// 0x0020 (0x0020 - 0x0000)
struct MaiFunctions_GetCurrentGoalLocation final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_GetCurrentGoalLocation) == 0x000008, "Wrong alignment on MaiFunctions_GetCurrentGoalLocation");
static_assert(sizeof(MaiFunctions_GetCurrentGoalLocation) == 0x000020, "Wrong size on MaiFunctions_GetCurrentGoalLocation");
static_assert(offsetof(MaiFunctions_GetCurrentGoalLocation, Being) == 0x000000, "Member 'MaiFunctions_GetCurrentGoalLocation::Being' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetCurrentGoalLocation, ReturnValue) == 0x000008, "Member 'MaiFunctions_GetCurrentGoalLocation::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.getCurrentPathPointLocation
// 0x0028 (0x0028 - 0x0000)
struct MaiFunctions_GetCurrentPathPointLocation final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Point;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FromStart;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_GetCurrentPathPointLocation) == 0x000008, "Wrong alignment on MaiFunctions_GetCurrentPathPointLocation");
static_assert(sizeof(MaiFunctions_GetCurrentPathPointLocation) == 0x000028, "Wrong size on MaiFunctions_GetCurrentPathPointLocation");
static_assert(offsetof(MaiFunctions_GetCurrentPathPointLocation, Being) == 0x000000, "Member 'MaiFunctions_GetCurrentPathPointLocation::Being' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetCurrentPathPointLocation, Point) == 0x000008, "Member 'MaiFunctions_GetCurrentPathPointLocation::Point' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetCurrentPathPointLocation, FromStart) == 0x00000C, "Member 'MaiFunctions_GetCurrentPathPointLocation::FromStart' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetCurrentPathPointLocation, ReturnValue) == 0x000010, "Member 'MaiFunctions_GetCurrentPathPointLocation::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.getCurrentTargetLocation
// 0x0020 (0x0020 - 0x0000)
struct MaiFunctions_GetCurrentTargetLocation final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_GetCurrentTargetLocation) == 0x000008, "Wrong alignment on MaiFunctions_GetCurrentTargetLocation");
static_assert(sizeof(MaiFunctions_GetCurrentTargetLocation) == 0x000020, "Wrong size on MaiFunctions_GetCurrentTargetLocation");
static_assert(offsetof(MaiFunctions_GetCurrentTargetLocation, Being) == 0x000000, "Member 'MaiFunctions_GetCurrentTargetLocation::Being' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetCurrentTargetLocation, ReturnValue) == 0x000008, "Member 'MaiFunctions_GetCurrentTargetLocation::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.getDifficultyByteFromTable
// 0x00B0 (0x00B0 - 0x0000)
struct MaiFunctions_GetDifficultyByteFromTable final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMaiTableOfBytesDiff                   Table;                                             // 0x0008(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x00A8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x00AC(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_GetDifficultyByteFromTable) == 0x000008, "Wrong alignment on MaiFunctions_GetDifficultyByteFromTable");
static_assert(sizeof(MaiFunctions_GetDifficultyByteFromTable) == 0x0000B0, "Wrong size on MaiFunctions_GetDifficultyByteFromTable");
static_assert(offsetof(MaiFunctions_GetDifficultyByteFromTable, WorldContext) == 0x000000, "Member 'MaiFunctions_GetDifficultyByteFromTable::WorldContext' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetDifficultyByteFromTable, Table) == 0x000008, "Member 'MaiFunctions_GetDifficultyByteFromTable::Table' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetDifficultyByteFromTable, Index_0) == 0x0000A8, "Member 'MaiFunctions_GetDifficultyByteFromTable::Index_0' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetDifficultyByteFromTable, ReturnValue) == 0x0000AC, "Member 'MaiFunctions_GetDifficultyByteFromTable::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.getDifficultyFloat
// 0x0038 (0x0038 - 0x0000)
struct MaiFunctions_GetDifficultyFloat final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMaiFloatDiff                          Value;                                             // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_GetDifficultyFloat) == 0x000008, "Wrong alignment on MaiFunctions_GetDifficultyFloat");
static_assert(sizeof(MaiFunctions_GetDifficultyFloat) == 0x000038, "Wrong size on MaiFunctions_GetDifficultyFloat");
static_assert(offsetof(MaiFunctions_GetDifficultyFloat, WorldContext) == 0x000000, "Member 'MaiFunctions_GetDifficultyFloat::WorldContext' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetDifficultyFloat, Value) == 0x000008, "Member 'MaiFunctions_GetDifficultyFloat::Value' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetDifficultyFloat, ReturnValue) == 0x000030, "Member 'MaiFunctions_GetDifficultyFloat::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.getGraphActionPoints
// 0x0018 (0x0018 - 0x0000)
struct MaiFunctions_GetGraphActionPoints final
{
public:
	class AMaiActionGraph*                        Graph;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AMaiActionPoint*>                OutPoints;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_GetGraphActionPoints) == 0x000008, "Wrong alignment on MaiFunctions_GetGraphActionPoints");
static_assert(sizeof(MaiFunctions_GetGraphActionPoints) == 0x000018, "Wrong size on MaiFunctions_GetGraphActionPoints");
static_assert(offsetof(MaiFunctions_GetGraphActionPoints, Graph) == 0x000000, "Member 'MaiFunctions_GetGraphActionPoints::Graph' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetGraphActionPoints, OutPoints) == 0x000008, "Member 'MaiFunctions_GetGraphActionPoints::OutPoints' has a wrong offset!");

// Function Mai.MaiFunctions.getJumpData
// 0x0018 (0x0018 - 0x0000)
struct MaiFunctions_GetJumpData final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Lenght;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_GetJumpData) == 0x000008, "Wrong alignment on MaiFunctions_GetJumpData");
static_assert(sizeof(MaiFunctions_GetJumpData) == 0x000018, "Wrong size on MaiFunctions_GetJumpData");
static_assert(offsetof(MaiFunctions_GetJumpData, Being) == 0x000000, "Member 'MaiFunctions_GetJumpData::Being' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetJumpData, Lenght) == 0x000008, "Member 'MaiFunctions_GetJumpData::Lenght' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetJumpData, Height) == 0x00000C, "Member 'MaiFunctions_GetJumpData::Height' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetJumpData, ReturnValue) == 0x000010, "Member 'MaiFunctions_GetJumpData::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.getLocalDirection
// 0x0038 (0x0038 - 0x0000)
struct MaiFunctions_GetLocalDirection final
{
public:
	class AActor*                                 Origin;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Dir;                                               // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_GetLocalDirection) == 0x000008, "Wrong alignment on MaiFunctions_GetLocalDirection");
static_assert(sizeof(MaiFunctions_GetLocalDirection) == 0x000038, "Wrong size on MaiFunctions_GetLocalDirection");
static_assert(offsetof(MaiFunctions_GetLocalDirection, Origin) == 0x000000, "Member 'MaiFunctions_GetLocalDirection::Origin' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetLocalDirection, Dir) == 0x000008, "Member 'MaiFunctions_GetLocalDirection::Dir' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetLocalDirection, ReturnValue) == 0x000020, "Member 'MaiFunctions_GetLocalDirection::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.getLocalDirectionTo
// 0x0028 (0x0028 - 0x0000)
struct MaiFunctions_GetLocalDirectionTo final
{
public:
	class AActor*                                 Origin;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_GetLocalDirectionTo) == 0x000008, "Wrong alignment on MaiFunctions_GetLocalDirectionTo");
static_assert(sizeof(MaiFunctions_GetLocalDirectionTo) == 0x000028, "Wrong size on MaiFunctions_GetLocalDirectionTo");
static_assert(offsetof(MaiFunctions_GetLocalDirectionTo, Origin) == 0x000000, "Member 'MaiFunctions_GetLocalDirectionTo::Origin' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetLocalDirectionTo, Other) == 0x000008, "Member 'MaiFunctions_GetLocalDirectionTo::Other' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetLocalDirectionTo, ReturnValue) == 0x000010, "Member 'MaiFunctions_GetLocalDirectionTo::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.getMaiCharacterByClass
// 0x0018 (0x0018 - 0x0000)
struct MaiFunctions_GetMaiCharacterByClass final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AMaiCharacter>              ActorClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMaiCharacter*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_GetMaiCharacterByClass) == 0x000008, "Wrong alignment on MaiFunctions_GetMaiCharacterByClass");
static_assert(sizeof(MaiFunctions_GetMaiCharacterByClass) == 0x000018, "Wrong size on MaiFunctions_GetMaiCharacterByClass");
static_assert(offsetof(MaiFunctions_GetMaiCharacterByClass, Actor) == 0x000000, "Member 'MaiFunctions_GetMaiCharacterByClass::Actor' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetMaiCharacterByClass, ActorClass) == 0x000008, "Member 'MaiFunctions_GetMaiCharacterByClass::ActorClass' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetMaiCharacterByClass, ReturnValue) == 0x000010, "Member 'MaiFunctions_GetMaiCharacterByClass::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.getMaiControllerByClass
// 0x0018 (0x0018 - 0x0000)
struct MaiFunctions_GetMaiControllerByClass final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AMaiController>             ActorClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMaiController*                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_GetMaiControllerByClass) == 0x000008, "Wrong alignment on MaiFunctions_GetMaiControllerByClass");
static_assert(sizeof(MaiFunctions_GetMaiControllerByClass) == 0x000018, "Wrong size on MaiFunctions_GetMaiControllerByClass");
static_assert(offsetof(MaiFunctions_GetMaiControllerByClass, Actor) == 0x000000, "Member 'MaiFunctions_GetMaiControllerByClass::Actor' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetMaiControllerByClass, ActorClass) == 0x000008, "Member 'MaiFunctions_GetMaiControllerByClass::ActorClass' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetMaiControllerByClass, ReturnValue) == 0x000010, "Member 'MaiFunctions_GetMaiControllerByClass::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.getMaiManager
// 0x0010 (0x0010 - 0x0000)
struct MaiFunctions_GetMaiManager final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaiManager*                            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_GetMaiManager) == 0x000008, "Wrong alignment on MaiFunctions_GetMaiManager");
static_assert(sizeof(MaiFunctions_GetMaiManager) == 0x000010, "Wrong size on MaiFunctions_GetMaiManager");
static_assert(offsetof(MaiFunctions_GetMaiManager, WorldContext) == 0x000000, "Member 'MaiFunctions_GetMaiManager::WorldContext' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetMaiManager, ReturnValue) == 0x000008, "Member 'MaiFunctions_GetMaiManager::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.getManagerByClass
// 0x0018 (0x0018 - 0x0000)
struct MaiFunctions_GetManagerByClass final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UActorComponent>            ManagerClass;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_GetManagerByClass) == 0x000008, "Wrong alignment on MaiFunctions_GetManagerByClass");
static_assert(sizeof(MaiFunctions_GetManagerByClass) == 0x000018, "Wrong size on MaiFunctions_GetManagerByClass");
static_assert(offsetof(MaiFunctions_GetManagerByClass, WorldContext) == 0x000000, "Member 'MaiFunctions_GetManagerByClass::WorldContext' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetManagerByClass, ManagerClass) == 0x000008, "Member 'MaiFunctions_GetManagerByClass::ManagerClass' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetManagerByClass, ReturnValue) == 0x000010, "Member 'MaiFunctions_GetManagerByClass::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.getPathNodeSystem
// 0x0010 (0x0010 - 0x0000)
struct MaiFunctions_GetPathNodeSystem final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaiNodeSystem*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_GetPathNodeSystem) == 0x000008, "Wrong alignment on MaiFunctions_GetPathNodeSystem");
static_assert(sizeof(MaiFunctions_GetPathNodeSystem) == 0x000010, "Wrong size on MaiFunctions_GetPathNodeSystem");
static_assert(offsetof(MaiFunctions_GetPathNodeSystem, WorldContext) == 0x000000, "Member 'MaiFunctions_GetPathNodeSystem::WorldContext' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetPathNodeSystem, ReturnValue) == 0x000008, "Member 'MaiFunctions_GetPathNodeSystem::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.getRandomLocationInNavigableRadius
// 0x0058 (0x0058 - 0x0000)
struct MaiFunctions_GetRandomLocationInNavigableRadius final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutLocation;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ANavigationData*                        NavData;                                           // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_GetRandomLocationInNavigableRadius) == 0x000008, "Wrong alignment on MaiFunctions_GetRandomLocationInNavigableRadius");
static_assert(sizeof(MaiFunctions_GetRandomLocationInNavigableRadius) == 0x000058, "Wrong size on MaiFunctions_GetRandomLocationInNavigableRadius");
static_assert(offsetof(MaiFunctions_GetRandomLocationInNavigableRadius, WorldContext) == 0x000000, "Member 'MaiFunctions_GetRandomLocationInNavigableRadius::WorldContext' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetRandomLocationInNavigableRadius, OutLocation) == 0x000008, "Member 'MaiFunctions_GetRandomLocationInNavigableRadius::OutLocation' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetRandomLocationInNavigableRadius, Origin) == 0x000020, "Member 'MaiFunctions_GetRandomLocationInNavigableRadius::Origin' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetRandomLocationInNavigableRadius, Radius) == 0x000038, "Member 'MaiFunctions_GetRandomLocationInNavigableRadius::Radius' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetRandomLocationInNavigableRadius, NavData) == 0x000040, "Member 'MaiFunctions_GetRandomLocationInNavigableRadius::NavData' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetRandomLocationInNavigableRadius, FilterClass) == 0x000048, "Member 'MaiFunctions_GetRandomLocationInNavigableRadius::FilterClass' has a wrong offset!");
static_assert(offsetof(MaiFunctions_GetRandomLocationInNavigableRadius, ReturnValue) == 0x000050, "Member 'MaiFunctions_GetRandomLocationInNavigableRadius::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.hasPathNearTo
// 0x0018 (0x0018 - 0x0000)
struct MaiFunctions_HasPathNearTo final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Epsilon;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_HasPathNearTo) == 0x000008, "Wrong alignment on MaiFunctions_HasPathNearTo");
static_assert(sizeof(MaiFunctions_HasPathNearTo) == 0x000018, "Wrong size on MaiFunctions_HasPathNearTo");
static_assert(offsetof(MaiFunctions_HasPathNearTo, Being) == 0x000000, "Member 'MaiFunctions_HasPathNearTo::Being' has a wrong offset!");
static_assert(offsetof(MaiFunctions_HasPathNearTo, Actor) == 0x000008, "Member 'MaiFunctions_HasPathNearTo::Actor' has a wrong offset!");
static_assert(offsetof(MaiFunctions_HasPathNearTo, Epsilon) == 0x000010, "Member 'MaiFunctions_HasPathNearTo::Epsilon' has a wrong offset!");
static_assert(offsetof(MaiFunctions_HasPathNearTo, ReturnValue) == 0x000014, "Member 'MaiFunctions_HasPathNearTo::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.initializePathFollower
// 0x0008 (0x0008 - 0x0000)
struct MaiFunctions_InitializePathFollower final
{
public:
	class UPathFollowingComponent*                Follower;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_InitializePathFollower) == 0x000008, "Wrong alignment on MaiFunctions_InitializePathFollower");
static_assert(sizeof(MaiFunctions_InitializePathFollower) == 0x000008, "Wrong size on MaiFunctions_InitializePathFollower");
static_assert(offsetof(MaiFunctions_InitializePathFollower, Follower) == 0x000000, "Member 'MaiFunctions_InitializePathFollower::Follower' has a wrong offset!");

// Function Mai.MaiFunctions.isActorInCone
// 0x0048 (0x0048 - 0x0000)
struct MaiFunctions_IsActorInCone final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_IsActorInCone) == 0x000008, "Wrong alignment on MaiFunctions_IsActorInCone");
static_assert(sizeof(MaiFunctions_IsActorInCone) == 0x000048, "Wrong size on MaiFunctions_IsActorInCone");
static_assert(offsetof(MaiFunctions_IsActorInCone, Origin) == 0x000000, "Member 'MaiFunctions_IsActorInCone::Origin' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsActorInCone, Direction) == 0x000018, "Member 'MaiFunctions_IsActorInCone::Direction' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsActorInCone, Angle) == 0x000030, "Member 'MaiFunctions_IsActorInCone::Angle' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsActorInCone, Length) == 0x000034, "Member 'MaiFunctions_IsActorInCone::Length' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsActorInCone, Actor) == 0x000038, "Member 'MaiFunctions_IsActorInCone::Actor' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsActorInCone, ReturnValue) == 0x000040, "Member 'MaiFunctions_IsActorInCone::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.isInChaseArea
// 0x0028 (0x0028 - 0x0000)
struct MaiFunctions_IsInChaseArea final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Extent;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_IsInChaseArea) == 0x000008, "Wrong alignment on MaiFunctions_IsInChaseArea");
static_assert(sizeof(MaiFunctions_IsInChaseArea) == 0x000028, "Wrong size on MaiFunctions_IsInChaseArea");
static_assert(offsetof(MaiFunctions_IsInChaseArea, Actor) == 0x000000, "Member 'MaiFunctions_IsInChaseArea::Actor' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsInChaseArea, Location) == 0x000008, "Member 'MaiFunctions_IsInChaseArea::Location' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsInChaseArea, Extent) == 0x000020, "Member 'MaiFunctions_IsInChaseArea::Extent' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsInChaseArea, ReturnValue) == 0x000024, "Member 'MaiFunctions_IsInChaseArea::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.IsInCover
// 0x0018 (0x0018 - 0x0000)
struct MaiFunctions_IsInCover final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Filter;                                            // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_IsInCover) == 0x000008, "Wrong alignment on MaiFunctions_IsInCover");
static_assert(sizeof(MaiFunctions_IsInCover) == 0x000018, "Wrong size on MaiFunctions_IsInCover");
static_assert(offsetof(MaiFunctions_IsInCover, Actor) == 0x000000, "Member 'MaiFunctions_IsInCover::Actor' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsInCover, Filter) == 0x000008, "Member 'MaiFunctions_IsInCover::Filter' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsInCover, ReturnValue) == 0x000010, "Member 'MaiFunctions_IsInCover::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.IsInFullCover
// 0x0018 (0x0018 - 0x0000)
struct MaiFunctions_IsInFullCover final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Filter;                                            // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_IsInFullCover) == 0x000008, "Wrong alignment on MaiFunctions_IsInFullCover");
static_assert(sizeof(MaiFunctions_IsInFullCover) == 0x000018, "Wrong size on MaiFunctions_IsInFullCover");
static_assert(offsetof(MaiFunctions_IsInFullCover, Actor) == 0x000000, "Member 'MaiFunctions_IsInFullCover::Actor' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsInFullCover, Filter) == 0x000008, "Member 'MaiFunctions_IsInFullCover::Filter' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsInFullCover, ReturnValue) == 0x000010, "Member 'MaiFunctions_IsInFullCover::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.isInNarrowArea
// 0x0010 (0x0010 - 0x0000)
struct MaiFunctions_IsInNarrowArea final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_IsInNarrowArea) == 0x000008, "Wrong alignment on MaiFunctions_IsInNarrowArea");
static_assert(sizeof(MaiFunctions_IsInNarrowArea) == 0x000010, "Wrong size on MaiFunctions_IsInNarrowArea");
static_assert(offsetof(MaiFunctions_IsInNarrowArea, Actor) == 0x000000, "Member 'MaiFunctions_IsInNarrowArea::Actor' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsInNarrowArea, ReturnValue) == 0x000008, "Member 'MaiFunctions_IsInNarrowArea::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.isInNarrowTrigger
// 0x0010 (0x0010 - 0x0000)
struct MaiFunctions_IsInNarrowTrigger final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_IsInNarrowTrigger) == 0x000008, "Wrong alignment on MaiFunctions_IsInNarrowTrigger");
static_assert(sizeof(MaiFunctions_IsInNarrowTrigger) == 0x000010, "Wrong size on MaiFunctions_IsInNarrowTrigger");
static_assert(offsetof(MaiFunctions_IsInNarrowTrigger, Actor) == 0x000000, "Member 'MaiFunctions_IsInNarrowTrigger::Actor' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsInNarrowTrigger, ReturnValue) == 0x000008, "Member 'MaiFunctions_IsInNarrowTrigger::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.isLocationInCone
// 0x0078 (0x0078 - 0x0000)
struct MaiFunctions_IsLocationInCone final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0038(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hheight;                                           // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0058(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_IsLocationInCone) == 0x000008, "Wrong alignment on MaiFunctions_IsLocationInCone");
static_assert(sizeof(MaiFunctions_IsLocationInCone) == 0x000078, "Wrong size on MaiFunctions_IsLocationInCone");
static_assert(offsetof(MaiFunctions_IsLocationInCone, Origin) == 0x000000, "Member 'MaiFunctions_IsLocationInCone::Origin' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsLocationInCone, Direction) == 0x000018, "Member 'MaiFunctions_IsLocationInCone::Direction' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsLocationInCone, Angle) == 0x000030, "Member 'MaiFunctions_IsLocationInCone::Angle' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsLocationInCone, Length) == 0x000034, "Member 'MaiFunctions_IsLocationInCone::Length' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsLocationInCone, Location) == 0x000038, "Member 'MaiFunctions_IsLocationInCone::Location' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsLocationInCone, Radius) == 0x000050, "Member 'MaiFunctions_IsLocationInCone::Radius' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsLocationInCone, Hheight) == 0x000054, "Member 'MaiFunctions_IsLocationInCone::Hheight' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsLocationInCone, Rotation) == 0x000058, "Member 'MaiFunctions_IsLocationInCone::Rotation' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsLocationInCone, ReturnValue) == 0x000070, "Member 'MaiFunctions_IsLocationInCone::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.isMoveLineClear
// 0x0130 (0x0130 - 0x0000)
struct MaiFunctions_IsMoveLineClear final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x00E8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 Owner;                                             // 0x00E8(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x00F0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x00F8(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0110(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0128(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_IsMoveLineClear) == 0x000008, "Wrong alignment on MaiFunctions_IsMoveLineClear");
static_assert(sizeof(MaiFunctions_IsMoveLineClear) == 0x000130, "Wrong size on MaiFunctions_IsMoveLineClear");
static_assert(offsetof(MaiFunctions_IsMoveLineClear, HitResult) == 0x000000, "Member 'MaiFunctions_IsMoveLineClear::HitResult' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsMoveLineClear, Owner) == 0x0000E8, "Member 'MaiFunctions_IsMoveLineClear::Owner' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsMoveLineClear, Other) == 0x0000F0, "Member 'MaiFunctions_IsMoveLineClear::Other' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsMoveLineClear, Start) == 0x0000F8, "Member 'MaiFunctions_IsMoveLineClear::Start' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsMoveLineClear, End) == 0x000110, "Member 'MaiFunctions_IsMoveLineClear::End' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsMoveLineClear, ReturnValue) == 0x000128, "Member 'MaiFunctions_IsMoveLineClear::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.isMoveLineToOtherClear
// 0x0018 (0x0018 - 0x0000)
struct MaiFunctions_IsMoveLineToOtherClear final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_IsMoveLineToOtherClear) == 0x000008, "Wrong alignment on MaiFunctions_IsMoveLineToOtherClear");
static_assert(sizeof(MaiFunctions_IsMoveLineToOtherClear) == 0x000018, "Wrong size on MaiFunctions_IsMoveLineToOtherClear");
static_assert(offsetof(MaiFunctions_IsMoveLineToOtherClear, Owner) == 0x000000, "Member 'MaiFunctions_IsMoveLineToOtherClear::Owner' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsMoveLineToOtherClear, Other) == 0x000008, "Member 'MaiFunctions_IsMoveLineToOtherClear::Other' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsMoveLineToOtherClear, ReturnValue) == 0x000010, "Member 'MaiFunctions_IsMoveLineToOtherClear::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.isMovingToGoalLocation
// 0x0010 (0x0010 - 0x0000)
struct MaiFunctions_IsMovingToGoalLocation final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_IsMovingToGoalLocation) == 0x000008, "Wrong alignment on MaiFunctions_IsMovingToGoalLocation");
static_assert(sizeof(MaiFunctions_IsMovingToGoalLocation) == 0x000010, "Wrong size on MaiFunctions_IsMovingToGoalLocation");
static_assert(offsetof(MaiFunctions_IsMovingToGoalLocation, Being) == 0x000000, "Member 'MaiFunctions_IsMovingToGoalLocation::Being' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsMovingToGoalLocation, ReturnValue) == 0x000008, "Member 'MaiFunctions_IsMovingToGoalLocation::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.isShootLineClear
// 0x0130 (0x0130 - 0x0000)
struct MaiFunctions_IsShootLineClear final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x00E8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 Owner;                                             // 0x00E8(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x00F0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x00F8(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0110(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0128(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_IsShootLineClear) == 0x000008, "Wrong alignment on MaiFunctions_IsShootLineClear");
static_assert(sizeof(MaiFunctions_IsShootLineClear) == 0x000130, "Wrong size on MaiFunctions_IsShootLineClear");
static_assert(offsetof(MaiFunctions_IsShootLineClear, HitResult) == 0x000000, "Member 'MaiFunctions_IsShootLineClear::HitResult' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsShootLineClear, Owner) == 0x0000E8, "Member 'MaiFunctions_IsShootLineClear::Owner' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsShootLineClear, Other) == 0x0000F0, "Member 'MaiFunctions_IsShootLineClear::Other' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsShootLineClear, Start) == 0x0000F8, "Member 'MaiFunctions_IsShootLineClear::Start' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsShootLineClear, End) == 0x000110, "Member 'MaiFunctions_IsShootLineClear::End' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsShootLineClear, ReturnValue) == 0x000128, "Member 'MaiFunctions_IsShootLineClear::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.isShootLineToOtherClear
// 0x0018 (0x0018 - 0x0000)
struct MaiFunctions_IsShootLineToOtherClear final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_IsShootLineToOtherClear) == 0x000008, "Wrong alignment on MaiFunctions_IsShootLineToOtherClear");
static_assert(sizeof(MaiFunctions_IsShootLineToOtherClear) == 0x000018, "Wrong size on MaiFunctions_IsShootLineToOtherClear");
static_assert(offsetof(MaiFunctions_IsShootLineToOtherClear, Owner) == 0x000000, "Member 'MaiFunctions_IsShootLineToOtherClear::Owner' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsShootLineToOtherClear, Other) == 0x000008, "Member 'MaiFunctions_IsShootLineToOtherClear::Other' has a wrong offset!");
static_assert(offsetof(MaiFunctions_IsShootLineToOtherClear, ReturnValue) == 0x000010, "Member 'MaiFunctions_IsShootLineToOtherClear::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.pauseBehaviorTree
// 0x0010 (0x0010 - 0x0000)
struct MaiFunctions_PauseBehaviorTree final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Reason;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_PauseBehaviorTree) == 0x000008, "Wrong alignment on MaiFunctions_PauseBehaviorTree");
static_assert(sizeof(MaiFunctions_PauseBehaviorTree) == 0x000010, "Wrong size on MaiFunctions_PauseBehaviorTree");
static_assert(offsetof(MaiFunctions_PauseBehaviorTree, Actor) == 0x000000, "Member 'MaiFunctions_PauseBehaviorTree::Actor' has a wrong offset!");
static_assert(offsetof(MaiFunctions_PauseBehaviorTree, Reason) == 0x000008, "Member 'MaiFunctions_PauseBehaviorTree::Reason' has a wrong offset!");

// Function Mai.MaiFunctions.pausePathFollowing
// 0x0008 (0x0008 - 0x0000)
struct MaiFunctions_PausePathFollowing final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_PausePathFollowing) == 0x000008, "Wrong alignment on MaiFunctions_PausePathFollowing");
static_assert(sizeof(MaiFunctions_PausePathFollowing) == 0x000008, "Wrong size on MaiFunctions_PausePathFollowing");
static_assert(offsetof(MaiFunctions_PausePathFollowing, Controller) == 0x000000, "Member 'MaiFunctions_PausePathFollowing::Controller' has a wrong offset!");

// Function Mai.MaiFunctions.projectPointToNavigation
// 0x0068 (0x0068 - 0x0000)
struct MaiFunctions_ProjectPointToNavigation final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutLocation;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANavigationData*                        NavData;                                           // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                QueryExtent;                                       // 0x0048(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_ProjectPointToNavigation) == 0x000008, "Wrong alignment on MaiFunctions_ProjectPointToNavigation");
static_assert(sizeof(MaiFunctions_ProjectPointToNavigation) == 0x000068, "Wrong size on MaiFunctions_ProjectPointToNavigation");
static_assert(offsetof(MaiFunctions_ProjectPointToNavigation, WorldContext) == 0x000000, "Member 'MaiFunctions_ProjectPointToNavigation::WorldContext' has a wrong offset!");
static_assert(offsetof(MaiFunctions_ProjectPointToNavigation, OutLocation) == 0x000008, "Member 'MaiFunctions_ProjectPointToNavigation::OutLocation' has a wrong offset!");
static_assert(offsetof(MaiFunctions_ProjectPointToNavigation, Point) == 0x000020, "Member 'MaiFunctions_ProjectPointToNavigation::Point' has a wrong offset!");
static_assert(offsetof(MaiFunctions_ProjectPointToNavigation, NavData) == 0x000038, "Member 'MaiFunctions_ProjectPointToNavigation::NavData' has a wrong offset!");
static_assert(offsetof(MaiFunctions_ProjectPointToNavigation, FilterClass) == 0x000040, "Member 'MaiFunctions_ProjectPointToNavigation::FilterClass' has a wrong offset!");
static_assert(offsetof(MaiFunctions_ProjectPointToNavigation, QueryExtent) == 0x000048, "Member 'MaiFunctions_ProjectPointToNavigation::QueryExtent' has a wrong offset!");
static_assert(offsetof(MaiFunctions_ProjectPointToNavigation, ReturnValue) == 0x000060, "Member 'MaiFunctions_ProjectPointToNavigation::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.requestDirectMove
// 0x0028 (0x0028 - 0x0000)
struct MaiFunctions_RequestDirectMove final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MoveVelocity;                                      // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceMaxSpeed;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_RequestDirectMove) == 0x000008, "Wrong alignment on MaiFunctions_RequestDirectMove");
static_assert(sizeof(MaiFunctions_RequestDirectMove) == 0x000028, "Wrong size on MaiFunctions_RequestDirectMove");
static_assert(offsetof(MaiFunctions_RequestDirectMove, Being) == 0x000000, "Member 'MaiFunctions_RequestDirectMove::Being' has a wrong offset!");
static_assert(offsetof(MaiFunctions_RequestDirectMove, MoveVelocity) == 0x000008, "Member 'MaiFunctions_RequestDirectMove::MoveVelocity' has a wrong offset!");
static_assert(offsetof(MaiFunctions_RequestDirectMove, bForceMaxSpeed) == 0x000020, "Member 'MaiFunctions_RequestDirectMove::bForceMaxSpeed' has a wrong offset!");

// Function Mai.MaiFunctions.requestDirectMoveTo
// 0x0028 (0x0028 - 0x0000)
struct MaiFunctions_RequestDirectMoveTo final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceMaxSpeed;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SmoothCurves;                                      // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_RequestDirectMoveTo) == 0x000008, "Wrong alignment on MaiFunctions_RequestDirectMoveTo");
static_assert(sizeof(MaiFunctions_RequestDirectMoveTo) == 0x000028, "Wrong size on MaiFunctions_RequestDirectMoveTo");
static_assert(offsetof(MaiFunctions_RequestDirectMoveTo, Being) == 0x000000, "Member 'MaiFunctions_RequestDirectMoveTo::Being' has a wrong offset!");
static_assert(offsetof(MaiFunctions_RequestDirectMoveTo, Location) == 0x000008, "Member 'MaiFunctions_RequestDirectMoveTo::Location' has a wrong offset!");
static_assert(offsetof(MaiFunctions_RequestDirectMoveTo, bForceMaxSpeed) == 0x000020, "Member 'MaiFunctions_RequestDirectMoveTo::bForceMaxSpeed' has a wrong offset!");
static_assert(offsetof(MaiFunctions_RequestDirectMoveTo, SmoothCurves) == 0x000021, "Member 'MaiFunctions_RequestDirectMoveTo::SmoothCurves' has a wrong offset!");

// Function Mai.MaiFunctions.resetAggressiveEnemies
// 0x0008 (0x0008 - 0x0000)
struct MaiFunctions_ResetAggressiveEnemies final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_ResetAggressiveEnemies) == 0x000008, "Wrong alignment on MaiFunctions_ResetAggressiveEnemies");
static_assert(sizeof(MaiFunctions_ResetAggressiveEnemies) == 0x000008, "Wrong size on MaiFunctions_ResetAggressiveEnemies");
static_assert(offsetof(MaiFunctions_ResetAggressiveEnemies, Being) == 0x000000, "Member 'MaiFunctions_ResetAggressiveEnemies::Being' has a wrong offset!");

// Function Mai.MaiFunctions.resetBeing
// 0x0008 (0x0008 - 0x0000)
struct MaiFunctions_ResetBeing final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_ResetBeing) == 0x000008, "Wrong alignment on MaiFunctions_ResetBeing");
static_assert(sizeof(MaiFunctions_ResetBeing) == 0x000008, "Wrong size on MaiFunctions_ResetBeing");
static_assert(offsetof(MaiFunctions_ResetBeing, Being) == 0x000000, "Member 'MaiFunctions_ResetBeing::Being' has a wrong offset!");

// Function Mai.MaiFunctions.resetEnemiesInRange
// 0x0010 (0x0010 - 0x0000)
struct MaiFunctions_ResetEnemiesInRange final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRange;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_ResetEnemiesInRange) == 0x000008, "Wrong alignment on MaiFunctions_ResetEnemiesInRange");
static_assert(sizeof(MaiFunctions_ResetEnemiesInRange) == 0x000010, "Wrong size on MaiFunctions_ResetEnemiesInRange");
static_assert(offsetof(MaiFunctions_ResetEnemiesInRange, Being) == 0x000000, "Member 'MaiFunctions_ResetEnemiesInRange::Being' has a wrong offset!");
static_assert(offsetof(MaiFunctions_ResetEnemiesInRange, MaxRange) == 0x000008, "Member 'MaiFunctions_ResetEnemiesInRange::MaxRange' has a wrong offset!");

// Function Mai.MaiFunctions.restartBehaviorTree
// 0x0010 (0x0010 - 0x0000)
struct MaiFunctions_RestartBehaviorTree final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HardReset;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_RestartBehaviorTree) == 0x000008, "Wrong alignment on MaiFunctions_RestartBehaviorTree");
static_assert(sizeof(MaiFunctions_RestartBehaviorTree) == 0x000010, "Wrong size on MaiFunctions_RestartBehaviorTree");
static_assert(offsetof(MaiFunctions_RestartBehaviorTree, Controller) == 0x000000, "Member 'MaiFunctions_RestartBehaviorTree::Controller' has a wrong offset!");
static_assert(offsetof(MaiFunctions_RestartBehaviorTree, HardReset) == 0x000008, "Member 'MaiFunctions_RestartBehaviorTree::HardReset' has a wrong offset!");

// Function Mai.MaiFunctions.resumeBehaviorTree
// 0x0010 (0x0010 - 0x0000)
struct MaiFunctions_ResumeBehaviorTree final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Reason;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_ResumeBehaviorTree) == 0x000008, "Wrong alignment on MaiFunctions_ResumeBehaviorTree");
static_assert(sizeof(MaiFunctions_ResumeBehaviorTree) == 0x000010, "Wrong size on MaiFunctions_ResumeBehaviorTree");
static_assert(offsetof(MaiFunctions_ResumeBehaviorTree, Actor) == 0x000000, "Member 'MaiFunctions_ResumeBehaviorTree::Actor' has a wrong offset!");
static_assert(offsetof(MaiFunctions_ResumeBehaviorTree, Reason) == 0x000008, "Member 'MaiFunctions_ResumeBehaviorTree::Reason' has a wrong offset!");

// Function Mai.MaiFunctions.resumePathFollowing
// 0x0008 (0x0008 - 0x0000)
struct MaiFunctions_ResumePathFollowing final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_ResumePathFollowing) == 0x000008, "Wrong alignment on MaiFunctions_ResumePathFollowing");
static_assert(sizeof(MaiFunctions_ResumePathFollowing) == 0x000008, "Wrong size on MaiFunctions_ResumePathFollowing");
static_assert(offsetof(MaiFunctions_ResumePathFollowing, Controller) == 0x000000, "Member 'MaiFunctions_ResumePathFollowing::Controller' has a wrong offset!");

// Function Mai.MaiFunctions.selectBeingInFront
// 0x0050 (0x0050 - 0x0000)
struct MaiFunctions_SelectBeingInFront final
{
public:
	TArray<class APawn*>                          beings;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     beingClass;                                        // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_SelectBeingInFront) == 0x000008, "Wrong alignment on MaiFunctions_SelectBeingInFront");
static_assert(sizeof(MaiFunctions_SelectBeingInFront) == 0x000050, "Wrong size on MaiFunctions_SelectBeingInFront");
static_assert(offsetof(MaiFunctions_SelectBeingInFront, beings) == 0x000000, "Member 'MaiFunctions_SelectBeingInFront::beings' has a wrong offset!");
static_assert(offsetof(MaiFunctions_SelectBeingInFront, Origin) == 0x000010, "Member 'MaiFunctions_SelectBeingInFront::Origin' has a wrong offset!");
static_assert(offsetof(MaiFunctions_SelectBeingInFront, Direction) == 0x000028, "Member 'MaiFunctions_SelectBeingInFront::Direction' has a wrong offset!");
static_assert(offsetof(MaiFunctions_SelectBeingInFront, beingClass) == 0x000040, "Member 'MaiFunctions_SelectBeingInFront::beingClass' has a wrong offset!");
static_assert(offsetof(MaiFunctions_SelectBeingInFront, ReturnValue) == 0x000048, "Member 'MaiFunctions_SelectBeingInFront::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.setBlackboardValue
// 0x0088 (0x0088 - 0x0000)
struct MaiFunctions_SetBlackboardValue final
{
public:
	class UBlackboardComponent*                   Blackboard;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMaiBlackboardValue                    Value;                                             // 0x0008(0x0078)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_SetBlackboardValue) == 0x000008, "Wrong alignment on MaiFunctions_SetBlackboardValue");
static_assert(sizeof(MaiFunctions_SetBlackboardValue) == 0x000088, "Wrong size on MaiFunctions_SetBlackboardValue");
static_assert(offsetof(MaiFunctions_SetBlackboardValue, Blackboard) == 0x000000, "Member 'MaiFunctions_SetBlackboardValue::Blackboard' has a wrong offset!");
static_assert(offsetof(MaiFunctions_SetBlackboardValue, Value) == 0x000008, "Member 'MaiFunctions_SetBlackboardValue::Value' has a wrong offset!");
static_assert(offsetof(MaiFunctions_SetBlackboardValue, ReturnValue) == 0x000080, "Member 'MaiFunctions_SetBlackboardValue::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.setIgnoreMe
// 0x0018 (0x0018 - 0x0000)
struct MaiFunctions_SetIgnoreMe final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ignore;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Reason;                                            // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_SetIgnoreMe) == 0x000008, "Wrong alignment on MaiFunctions_SetIgnoreMe");
static_assert(sizeof(MaiFunctions_SetIgnoreMe) == 0x000018, "Wrong size on MaiFunctions_SetIgnoreMe");
static_assert(offsetof(MaiFunctions_SetIgnoreMe, Actor) == 0x000000, "Member 'MaiFunctions_SetIgnoreMe::Actor' has a wrong offset!");
static_assert(offsetof(MaiFunctions_SetIgnoreMe, Ignore) == 0x000008, "Member 'MaiFunctions_SetIgnoreMe::Ignore' has a wrong offset!");
static_assert(offsetof(MaiFunctions_SetIgnoreMe, Reason) == 0x00000C, "Member 'MaiFunctions_SetIgnoreMe::Reason' has a wrong offset!");

// Function Mai.MaiFunctions.setIgnoreOther
// 0x0018 (0x0018 - 0x0000)
struct MaiFunctions_SetIgnoreOther final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ignore;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_SetIgnoreOther) == 0x000008, "Wrong alignment on MaiFunctions_SetIgnoreOther");
static_assert(sizeof(MaiFunctions_SetIgnoreOther) == 0x000018, "Wrong size on MaiFunctions_SetIgnoreOther");
static_assert(offsetof(MaiFunctions_SetIgnoreOther, Actor) == 0x000000, "Member 'MaiFunctions_SetIgnoreOther::Actor' has a wrong offset!");
static_assert(offsetof(MaiFunctions_SetIgnoreOther, Other) == 0x000008, "Member 'MaiFunctions_SetIgnoreOther::Other' has a wrong offset!");
static_assert(offsetof(MaiFunctions_SetIgnoreOther, Ignore) == 0x000010, "Member 'MaiFunctions_SetIgnoreOther::Ignore' has a wrong offset!");

// Function Mai.MaiFunctions.shouldBeIgnored
// 0x0010 (0x0010 - 0x0000)
struct MaiFunctions_ShouldBeIgnored final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_ShouldBeIgnored) == 0x000008, "Wrong alignment on MaiFunctions_ShouldBeIgnored");
static_assert(sizeof(MaiFunctions_ShouldBeIgnored) == 0x000010, "Wrong size on MaiFunctions_ShouldBeIgnored");
static_assert(offsetof(MaiFunctions_ShouldBeIgnored, Actor) == 0x000000, "Member 'MaiFunctions_ShouldBeIgnored::Actor' has a wrong offset!");
static_assert(offsetof(MaiFunctions_ShouldBeIgnored, ReturnValue) == 0x000008, "Member 'MaiFunctions_ShouldBeIgnored::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.shouldIgnoreOther
// 0x0018 (0x0018 - 0x0000)
struct MaiFunctions_ShouldIgnoreOther final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_ShouldIgnoreOther) == 0x000008, "Wrong alignment on MaiFunctions_ShouldIgnoreOther");
static_assert(sizeof(MaiFunctions_ShouldIgnoreOther) == 0x000018, "Wrong size on MaiFunctions_ShouldIgnoreOther");
static_assert(offsetof(MaiFunctions_ShouldIgnoreOther, Actor) == 0x000000, "Member 'MaiFunctions_ShouldIgnoreOther::Actor' has a wrong offset!");
static_assert(offsetof(MaiFunctions_ShouldIgnoreOther, Other) == 0x000008, "Member 'MaiFunctions_ShouldIgnoreOther::Other' has a wrong offset!");
static_assert(offsetof(MaiFunctions_ShouldIgnoreOther, ReturnValue) == 0x000010, "Member 'MaiFunctions_ShouldIgnoreOther::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.test_Distance
// 0x0038 (0x0038 - 0x0000)
struct MaiFunctions_Test_Distance final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<float>                                 Results;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_Test_Distance) == 0x000008, "Wrong alignment on MaiFunctions_Test_Distance");
static_assert(sizeof(MaiFunctions_Test_Distance) == 0x000038, "Wrong size on MaiFunctions_Test_Distance");
static_assert(offsetof(MaiFunctions_Test_Distance, Actors) == 0x000000, "Member 'MaiFunctions_Test_Distance::Actors' has a wrong offset!");
static_assert(offsetof(MaiFunctions_Test_Distance, Results) == 0x000010, "Member 'MaiFunctions_Test_Distance::Results' has a wrong offset!");
static_assert(offsetof(MaiFunctions_Test_Distance, Origin) == 0x000020, "Member 'MaiFunctions_Test_Distance::Origin' has a wrong offset!");

// Function Mai.MaiFunctions.test_Dot
// 0x0050 (0x0050 - 0x0000)
struct MaiFunctions_Test_Dot final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<float>                                 Results;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0038(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_Test_Dot) == 0x000008, "Wrong alignment on MaiFunctions_Test_Dot");
static_assert(sizeof(MaiFunctions_Test_Dot) == 0x000050, "Wrong size on MaiFunctions_Test_Dot");
static_assert(offsetof(MaiFunctions_Test_Dot, Actors) == 0x000000, "Member 'MaiFunctions_Test_Dot::Actors' has a wrong offset!");
static_assert(offsetof(MaiFunctions_Test_Dot, Results) == 0x000010, "Member 'MaiFunctions_Test_Dot::Results' has a wrong offset!");
static_assert(offsetof(MaiFunctions_Test_Dot, Origin) == 0x000020, "Member 'MaiFunctions_Test_Dot::Origin' has a wrong offset!");
static_assert(offsetof(MaiFunctions_Test_Dot, Direction) == 0x000038, "Member 'MaiFunctions_Test_Dot::Direction' has a wrong offset!");

// Function Mai.MaiFunctions.tests_Combine2
// 0x0030 (0x0030 - 0x0000)
struct MaiFunctions_Tests_Combine2 final
{
public:
	TArray<float>                                 W1;                                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<float>                                 W2;                                                // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<float>                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_Tests_Combine2) == 0x000008, "Wrong alignment on MaiFunctions_Tests_Combine2");
static_assert(sizeof(MaiFunctions_Tests_Combine2) == 0x000030, "Wrong size on MaiFunctions_Tests_Combine2");
static_assert(offsetof(MaiFunctions_Tests_Combine2, W1) == 0x000000, "Member 'MaiFunctions_Tests_Combine2::W1' has a wrong offset!");
static_assert(offsetof(MaiFunctions_Tests_Combine2, W2) == 0x000010, "Member 'MaiFunctions_Tests_Combine2::W2' has a wrong offset!");
static_assert(offsetof(MaiFunctions_Tests_Combine2, ReturnValue) == 0x000020, "Member 'MaiFunctions_Tests_Combine2::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.tests_HighestWeightIntex
// 0x0018 (0x0018 - 0x0000)
struct MaiFunctions_Tests_HighestWeightIntex final
{
public:
	TArray<float>                                 Weights;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_Tests_HighestWeightIntex) == 0x000008, "Wrong alignment on MaiFunctions_Tests_HighestWeightIntex");
static_assert(sizeof(MaiFunctions_Tests_HighestWeightIntex) == 0x000018, "Wrong size on MaiFunctions_Tests_HighestWeightIntex");
static_assert(offsetof(MaiFunctions_Tests_HighestWeightIntex, Weights) == 0x000000, "Member 'MaiFunctions_Tests_HighestWeightIntex::Weights' has a wrong offset!");
static_assert(offsetof(MaiFunctions_Tests_HighestWeightIntex, ReturnValue) == 0x000010, "Member 'MaiFunctions_Tests_HighestWeightIntex::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.tests_Weights
// 0x0030 (0x0030 - 0x0000)
struct MaiFunctions_Tests_Weights final
{
public:
	TArray<float>                                 Raw;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<float>                                 Weights;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Inverse;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Mul;                                               // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinClamp;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxClamp;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_Tests_Weights) == 0x000008, "Wrong alignment on MaiFunctions_Tests_Weights");
static_assert(sizeof(MaiFunctions_Tests_Weights) == 0x000030, "Wrong size on MaiFunctions_Tests_Weights");
static_assert(offsetof(MaiFunctions_Tests_Weights, Raw) == 0x000000, "Member 'MaiFunctions_Tests_Weights::Raw' has a wrong offset!");
static_assert(offsetof(MaiFunctions_Tests_Weights, Weights) == 0x000010, "Member 'MaiFunctions_Tests_Weights::Weights' has a wrong offset!");
static_assert(offsetof(MaiFunctions_Tests_Weights, Inverse) == 0x000020, "Member 'MaiFunctions_Tests_Weights::Inverse' has a wrong offset!");
static_assert(offsetof(MaiFunctions_Tests_Weights, Mul) == 0x000024, "Member 'MaiFunctions_Tests_Weights::Mul' has a wrong offset!");
static_assert(offsetof(MaiFunctions_Tests_Weights, MinClamp) == 0x000028, "Member 'MaiFunctions_Tests_Weights::MinClamp' has a wrong offset!");
static_assert(offsetof(MaiFunctions_Tests_Weights, MaxClamp) == 0x00002C, "Member 'MaiFunctions_Tests_Weights::MaxClamp' has a wrong offset!");

// Function Mai.MaiFunctions.unregisterPerceptionStimuliSource
// 0x0020 (0x0020 - 0x0000)
struct MaiFunctions_UnregisterPerceptionStimuliSource final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAISense>                   Sense;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiFunctions_UnregisterPerceptionStimuliSource) == 0x000008, "Wrong alignment on MaiFunctions_UnregisterPerceptionStimuliSource");
static_assert(sizeof(MaiFunctions_UnregisterPerceptionStimuliSource) == 0x000020, "Wrong size on MaiFunctions_UnregisterPerceptionStimuliSource");
static_assert(offsetof(MaiFunctions_UnregisterPerceptionStimuliSource, WorldContextObject) == 0x000000, "Member 'MaiFunctions_UnregisterPerceptionStimuliSource::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MaiFunctions_UnregisterPerceptionStimuliSource, Sense) == 0x000008, "Member 'MaiFunctions_UnregisterPerceptionStimuliSource::Sense' has a wrong offset!");
static_assert(offsetof(MaiFunctions_UnregisterPerceptionStimuliSource, Target) == 0x000010, "Member 'MaiFunctions_UnregisterPerceptionStimuliSource::Target' has a wrong offset!");
static_assert(offsetof(MaiFunctions_UnregisterPerceptionStimuliSource, ReturnValue) == 0x000018, "Member 'MaiFunctions_UnregisterPerceptionStimuliSource::ReturnValue' has a wrong offset!");

// Function Mai.MaiFunctions.updateCrowdAgentParams
// 0x0008 (0x0008 - 0x0000)
struct MaiFunctions_UpdateCrowdAgentParams final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiFunctions_UpdateCrowdAgentParams) == 0x000008, "Wrong alignment on MaiFunctions_UpdateCrowdAgentParams");
static_assert(sizeof(MaiFunctions_UpdateCrowdAgentParams) == 0x000008, "Wrong size on MaiFunctions_UpdateCrowdAgentParams");
static_assert(offsetof(MaiFunctions_UpdateCrowdAgentParams, Actor) == 0x000000, "Member 'MaiFunctions_UpdateCrowdAgentParams::Actor' has a wrong offset!");

// Function Mai.MaiHealth.ReceiveCure
// 0x0010 (0x0010 - 0x0000)
struct MaiHealth_ReceiveCure final
{
public:
	float                                         Cure;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Instigator;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiHealth_ReceiveCure) == 0x000008, "Wrong alignment on MaiHealth_ReceiveCure");
static_assert(sizeof(MaiHealth_ReceiveCure) == 0x000010, "Wrong size on MaiHealth_ReceiveCure");
static_assert(offsetof(MaiHealth_ReceiveCure, Cure) == 0x000000, "Member 'MaiHealth_ReceiveCure::Cure' has a wrong offset!");
static_assert(offsetof(MaiHealth_ReceiveCure, Instigator) == 0x000008, "Member 'MaiHealth_ReceiveCure::Instigator' has a wrong offset!");

// Function Mai.MaiHealth.ReceiveDamage
// 0x0010 (0x0010 - 0x0000)
struct MaiHealth_ReceiveDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Instigator;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiHealth_ReceiveDamage) == 0x000008, "Wrong alignment on MaiHealth_ReceiveDamage");
static_assert(sizeof(MaiHealth_ReceiveDamage) == 0x000010, "Wrong size on MaiHealth_ReceiveDamage");
static_assert(offsetof(MaiHealth_ReceiveDamage, Damage) == 0x000000, "Member 'MaiHealth_ReceiveDamage::Damage' has a wrong offset!");
static_assert(offsetof(MaiHealth_ReceiveDamage, Instigator) == 0x000008, "Member 'MaiHealth_ReceiveDamage::Instigator' has a wrong offset!");

// Function Mai.MaiHealth.SetHealth
// 0x0004 (0x0004 - 0x0000)
struct MaiHealth_SetHealth final
{
public:
	int32                                         NewHealth;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiHealth_SetHealth) == 0x000004, "Wrong alignment on MaiHealth_SetHealth");
static_assert(sizeof(MaiHealth_SetHealth) == 0x000004, "Wrong size on MaiHealth_SetHealth");
static_assert(offsetof(MaiHealth_SetHealth, NewHealth) == 0x000000, "Member 'MaiHealth_SetHealth::NewHealth' has a wrong offset!");

// Function Mai.MaiHealth.SetImmortal
// 0x0001 (0x0001 - 0x0000)
struct MaiHealth_SetImmortal final
{
public:
	bool                                          Immortal;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiHealth_SetImmortal) == 0x000001, "Wrong alignment on MaiHealth_SetImmortal");
static_assert(sizeof(MaiHealth_SetImmortal) == 0x000001, "Wrong size on MaiHealth_SetImmortal");
static_assert(offsetof(MaiHealth_SetImmortal, Immortal) == 0x000000, "Member 'MaiHealth_SetImmortal::Immortal' has a wrong offset!");

// Function Mai.MaiHealth.GetHealth
// 0x0004 (0x0004 - 0x0000)
struct MaiHealth_GetHealth final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiHealth_GetHealth) == 0x000004, "Wrong alignment on MaiHealth_GetHealth");
static_assert(sizeof(MaiHealth_GetHealth) == 0x000004, "Wrong size on MaiHealth_GetHealth");
static_assert(offsetof(MaiHealth_GetHealth, ReturnValue) == 0x000000, "Member 'MaiHealth_GetHealth::ReturnValue' has a wrong offset!");

// Function Mai.MaiHealth.GetHealthPercent
// 0x0004 (0x0004 - 0x0000)
struct MaiHealth_GetHealthPercent final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiHealth_GetHealthPercent) == 0x000004, "Wrong alignment on MaiHealth_GetHealthPercent");
static_assert(sizeof(MaiHealth_GetHealthPercent) == 0x000004, "Wrong size on MaiHealth_GetHealthPercent");
static_assert(offsetof(MaiHealth_GetHealthPercent, ReturnValue) == 0x000000, "Member 'MaiHealth_GetHealthPercent::ReturnValue' has a wrong offset!");

// Function Mai.MaiHealth.GetMaxHealth
// 0x0004 (0x0004 - 0x0000)
struct MaiHealth_GetMaxHealth final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiHealth_GetMaxHealth) == 0x000004, "Wrong alignment on MaiHealth_GetMaxHealth");
static_assert(sizeof(MaiHealth_GetMaxHealth) == 0x000004, "Wrong size on MaiHealth_GetMaxHealth");
static_assert(offsetof(MaiHealth_GetMaxHealth, ReturnValue) == 0x000000, "Member 'MaiHealth_GetMaxHealth::ReturnValue' has a wrong offset!");

// Function Mai.MaiHealth.IsDead
// 0x0001 (0x0001 - 0x0000)
struct MaiHealth_IsDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiHealth_IsDead) == 0x000001, "Wrong alignment on MaiHealth_IsDead");
static_assert(sizeof(MaiHealth_IsDead) == 0x000001, "Wrong size on MaiHealth_IsDead");
static_assert(offsetof(MaiHealth_IsDead, ReturnValue) == 0x000000, "Member 'MaiHealth_IsDead::ReturnValue' has a wrong offset!");

// Function Mai.MaiHealth.IsImmortal
// 0x0001 (0x0001 - 0x0000)
struct MaiHealth_IsImmortal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiHealth_IsImmortal) == 0x000001, "Wrong alignment on MaiHealth_IsImmortal");
static_assert(sizeof(MaiHealth_IsImmortal) == 0x000001, "Wrong size on MaiHealth_IsImmortal");
static_assert(offsetof(MaiHealth_IsImmortal, ReturnValue) == 0x000000, "Member 'MaiHealth_IsImmortal::ReturnValue' has a wrong offset!");

// Function Mai.MaiReincarnationComponent.FillParams
// 0x0008 (0x0008 - 0x0000)
struct MaiReincarnationComponent_FillParams final
{
public:
	class UMaiReincarnationComponent*             Other;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiReincarnationComponent_FillParams) == 0x000008, "Wrong alignment on MaiReincarnationComponent_FillParams");
static_assert(sizeof(MaiReincarnationComponent_FillParams) == 0x000008, "Wrong size on MaiReincarnationComponent_FillParams");
static_assert(offsetof(MaiReincarnationComponent_FillParams, Other) == 0x000000, "Member 'MaiReincarnationComponent_FillParams::Other' has a wrong offset!");

// Function Mai.MaiReincarnationComponent.Reincarnate
// 0x0008 (0x0008 - 0x0000)
struct MaiReincarnationComponent_Reincarnate final
{
public:
	float                                         HealthPercent;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiReincarnationComponent_Reincarnate) == 0x000004, "Wrong alignment on MaiReincarnationComponent_Reincarnate");
static_assert(sizeof(MaiReincarnationComponent_Reincarnate) == 0x000008, "Wrong size on MaiReincarnationComponent_Reincarnate");
static_assert(offsetof(MaiReincarnationComponent_Reincarnate, HealthPercent) == 0x000000, "Member 'MaiReincarnationComponent_Reincarnate::HealthPercent' has a wrong offset!");
static_assert(offsetof(MaiReincarnationComponent_Reincarnate, ReturnValue) == 0x000004, "Member 'MaiReincarnationComponent_Reincarnate::ReturnValue' has a wrong offset!");

// Function Mai.MaiReincarnationComponent.SetOverrideData
// 0x0018 (0x0018 - 0x0000)
struct MaiReincarnationComponent_SetOverrideData final
{
public:
	uint8                                         MaxReincarnationNumber;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMaiReincarnationInfo>          Data;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiReincarnationComponent_SetOverrideData) == 0x000008, "Wrong alignment on MaiReincarnationComponent_SetOverrideData");
static_assert(sizeof(MaiReincarnationComponent_SetOverrideData) == 0x000018, "Wrong size on MaiReincarnationComponent_SetOverrideData");
static_assert(offsetof(MaiReincarnationComponent_SetOverrideData, MaxReincarnationNumber) == 0x000000, "Member 'MaiReincarnationComponent_SetOverrideData::MaxReincarnationNumber' has a wrong offset!");
static_assert(offsetof(MaiReincarnationComponent_SetOverrideData, Data) == 0x000008, "Member 'MaiReincarnationComponent_SetOverrideData::Data' has a wrong offset!");

// Function Mai.MaiReincarnationComponent.AllowReincarnation
// 0x0001 (0x0001 - 0x0000)
struct MaiReincarnationComponent_AllowReincarnation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiReincarnationComponent_AllowReincarnation) == 0x000001, "Wrong alignment on MaiReincarnationComponent_AllowReincarnation");
static_assert(sizeof(MaiReincarnationComponent_AllowReincarnation) == 0x000001, "Wrong size on MaiReincarnationComponent_AllowReincarnation");
static_assert(offsetof(MaiReincarnationComponent_AllowReincarnation, ReturnValue) == 0x000000, "Member 'MaiReincarnationComponent_AllowReincarnation::ReturnValue' has a wrong offset!");

// Function Mai.MaiReincarnationComponent.GetSeizuresNumber
// 0x0001 (0x0001 - 0x0000)
struct MaiReincarnationComponent_GetSeizuresNumber final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiReincarnationComponent_GetSeizuresNumber) == 0x000001, "Wrong alignment on MaiReincarnationComponent_GetSeizuresNumber");
static_assert(sizeof(MaiReincarnationComponent_GetSeizuresNumber) == 0x000001, "Wrong size on MaiReincarnationComponent_GetSeizuresNumber");
static_assert(offsetof(MaiReincarnationComponent_GetSeizuresNumber, ReturnValue) == 0x000000, "Member 'MaiReincarnationComponent_GetSeizuresNumber::ReturnValue' has a wrong offset!");

// Function Mai.MaiLightEmitter.IsInLight
// 0x0040 (0x0040 - 0x0000)
struct MaiLightEmitter_IsInLight final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hheight;                                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiLightEmitter_IsInLight) == 0x000008, "Wrong alignment on MaiLightEmitter_IsInLight");
static_assert(sizeof(MaiLightEmitter_IsInLight) == 0x000040, "Wrong size on MaiLightEmitter_IsInLight");
static_assert(offsetof(MaiLightEmitter_IsInLight, Location) == 0x000000, "Member 'MaiLightEmitter_IsInLight::Location' has a wrong offset!");
static_assert(offsetof(MaiLightEmitter_IsInLight, Radius) == 0x000018, "Member 'MaiLightEmitter_IsInLight::Radius' has a wrong offset!");
static_assert(offsetof(MaiLightEmitter_IsInLight, Hheight) == 0x00001C, "Member 'MaiLightEmitter_IsInLight::Hheight' has a wrong offset!");
static_assert(offsetof(MaiLightEmitter_IsInLight, Rotation) == 0x000020, "Member 'MaiLightEmitter_IsInLight::Rotation' has a wrong offset!");
static_assert(offsetof(MaiLightEmitter_IsInLight, ReturnValue) == 0x000038, "Member 'MaiLightEmitter_IsInLight::ReturnValue' has a wrong offset!");

// Function Mai.MaiLightEmitter.SetAngle
// 0x0004 (0x0004 - 0x0000)
struct MaiLightEmitter_SetAngle final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiLightEmitter_SetAngle) == 0x000004, "Wrong alignment on MaiLightEmitter_SetAngle");
static_assert(sizeof(MaiLightEmitter_SetAngle) == 0x000004, "Wrong size on MaiLightEmitter_SetAngle");
static_assert(offsetof(MaiLightEmitter_SetAngle, Angle) == 0x000000, "Member 'MaiLightEmitter_SetAngle::Angle' has a wrong offset!");

// Function Mai.MaiLightEmitter.SetRange
// 0x0004 (0x0004 - 0x0000)
struct MaiLightEmitter_SetRange final
{
public:
	float                                         Range;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiLightEmitter_SetRange) == 0x000004, "Wrong alignment on MaiLightEmitter_SetRange");
static_assert(sizeof(MaiLightEmitter_SetRange) == 0x000004, "Wrong size on MaiLightEmitter_SetRange");
static_assert(offsetof(MaiLightEmitter_SetRange, Range) == 0x000000, "Member 'MaiLightEmitter_SetRange::Range' has a wrong offset!");

// Function Mai.MaiLightsManager.getLightsManager
// 0x0010 (0x0010 - 0x0000)
struct MaiLightsManager_GetLightsManager final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaiLightsManager*                      ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiLightsManager_GetLightsManager) == 0x000008, "Wrong alignment on MaiLightsManager_GetLightsManager");
static_assert(sizeof(MaiLightsManager_GetLightsManager) == 0x000010, "Wrong size on MaiLightsManager_GetLightsManager");
static_assert(offsetof(MaiLightsManager_GetLightsManager, WorldContext) == 0x000000, "Member 'MaiLightsManager_GetLightsManager::WorldContext' has a wrong offset!");
static_assert(offsetof(MaiLightsManager_GetLightsManager, ReturnValue) == 0x000008, "Member 'MaiLightsManager_GetLightsManager::ReturnValue' has a wrong offset!");

// Function Mai.MaiLightsManager.OnLightEmitterChange
// 0x0008 (0x0008 - 0x0000)
struct MaiLightsManager_OnLightEmitterChange final
{
public:
	class UMaiLightEmitter*                       Light;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiLightsManager_OnLightEmitterChange) == 0x000008, "Wrong alignment on MaiLightsManager_OnLightEmitterChange");
static_assert(sizeof(MaiLightsManager_OnLightEmitterChange) == 0x000008, "Wrong size on MaiLightsManager_OnLightEmitterChange");
static_assert(offsetof(MaiLightsManager_OnLightEmitterChange, Light) == 0x000000, "Member 'MaiLightsManager_OnLightEmitterChange::Light' has a wrong offset!");

// Function Mai.MaiLightsManager.OnLightObserverChange
// 0x0008 (0x0008 - 0x0000)
struct MaiLightsManager_OnLightObserverChange final
{
public:
	class UMaiLightObserver*                      Observer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiLightsManager_OnLightObserverChange) == 0x000008, "Wrong alignment on MaiLightsManager_OnLightObserverChange");
static_assert(sizeof(MaiLightsManager_OnLightObserverChange) == 0x000008, "Wrong size on MaiLightsManager_OnLightObserverChange");
static_assert(offsetof(MaiLightsManager_OnLightObserverChange, Observer) == 0x000000, "Member 'MaiLightsManager_OnLightObserverChange::Observer' has a wrong offset!");

// Function Mai.MaiLightsManager.GetIsLit
// 0x0010 (0x0010 - 0x0000)
struct MaiLightsManager_GetIsLit final
{
public:
	class AActor*                                 Observer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiLightsManager_GetIsLit) == 0x000008, "Wrong alignment on MaiLightsManager_GetIsLit");
static_assert(sizeof(MaiLightsManager_GetIsLit) == 0x000010, "Wrong size on MaiLightsManager_GetIsLit");
static_assert(offsetof(MaiLightsManager_GetIsLit, Observer) == 0x000000, "Member 'MaiLightsManager_GetIsLit::Observer' has a wrong offset!");
static_assert(offsetof(MaiLightsManager_GetIsLit, ReturnValue) == 0x000008, "Member 'MaiLightsManager_GetIsLit::ReturnValue' has a wrong offset!");

// Function Mai.MaiLightsManager.GetLitLight
// 0x0010 (0x0010 - 0x0000)
struct MaiLightsManager_GetLitLight final
{
public:
	const class UMaiLightObserver*                Observer;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaiLightEmitter*                       ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiLightsManager_GetLitLight) == 0x000008, "Wrong alignment on MaiLightsManager_GetLitLight");
static_assert(sizeof(MaiLightsManager_GetLitLight) == 0x000010, "Wrong size on MaiLightsManager_GetLitLight");
static_assert(offsetof(MaiLightsManager_GetLitLight, Observer) == 0x000000, "Member 'MaiLightsManager_GetLitLight::Observer' has a wrong offset!");
static_assert(offsetof(MaiLightsManager_GetLitLight, ReturnValue) == 0x000008, "Member 'MaiLightsManager_GetLitLight::ReturnValue' has a wrong offset!");

// Function Mai.MaiLightsManager.TestIsLit
// 0x0030 (0x0030 - 0x0000)
struct MaiLightsManager_TestIsLit final
{
public:
	class AActor*                                 Observer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hheight;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiLightsManager_TestIsLit) == 0x000008, "Wrong alignment on MaiLightsManager_TestIsLit");
static_assert(sizeof(MaiLightsManager_TestIsLit) == 0x000030, "Wrong size on MaiLightsManager_TestIsLit");
static_assert(offsetof(MaiLightsManager_TestIsLit, Observer) == 0x000000, "Member 'MaiLightsManager_TestIsLit::Observer' has a wrong offset!");
static_assert(offsetof(MaiLightsManager_TestIsLit, Radius) == 0x000008, "Member 'MaiLightsManager_TestIsLit::Radius' has a wrong offset!");
static_assert(offsetof(MaiLightsManager_TestIsLit, Hheight) == 0x00000C, "Member 'MaiLightsManager_TestIsLit::Hheight' has a wrong offset!");
static_assert(offsetof(MaiLightsManager_TestIsLit, Offset) == 0x000010, "Member 'MaiLightsManager_TestIsLit::Offset' has a wrong offset!");
static_assert(offsetof(MaiLightsManager_TestIsLit, ReturnValue) == 0x000028, "Member 'MaiLightsManager_TestIsLit::ReturnValue' has a wrong offset!");

// Function Mai.MaiLookAtComponent.ClearLookAt
// 0x0004 (0x0004 - 0x0000)
struct MaiLookAtComponent_ClearLookAt final
{
public:
	int32                                         Priority;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiLookAtComponent_ClearLookAt) == 0x000004, "Wrong alignment on MaiLookAtComponent_ClearLookAt");
static_assert(sizeof(MaiLookAtComponent_ClearLookAt) == 0x000004, "Wrong size on MaiLookAtComponent_ClearLookAt");
static_assert(offsetof(MaiLookAtComponent_ClearLookAt, Priority) == 0x000000, "Member 'MaiLookAtComponent_ClearLookAt::Priority' has a wrong offset!");

// Function Mai.MaiLookAtComponent.DisableLookAt
// 0x0004 (0x0004 - 0x0000)
struct MaiLookAtComponent_DisableLookAt final
{
public:
	int32                                         Priority;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiLookAtComponent_DisableLookAt) == 0x000004, "Wrong alignment on MaiLookAtComponent_DisableLookAt");
static_assert(sizeof(MaiLookAtComponent_DisableLookAt) == 0x000004, "Wrong size on MaiLookAtComponent_DisableLookAt");
static_assert(offsetof(MaiLookAtComponent_DisableLookAt, Priority) == 0x000000, "Member 'MaiLookAtComponent_DisableLookAt::Priority' has a wrong offset!");

// Function Mai.MaiLookAtComponent.EnableLookAt
// 0x0004 (0x0004 - 0x0000)
struct MaiLookAtComponent_EnableLookAt final
{
public:
	int32                                         Priority;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiLookAtComponent_EnableLookAt) == 0x000004, "Wrong alignment on MaiLookAtComponent_EnableLookAt");
static_assert(sizeof(MaiLookAtComponent_EnableLookAt) == 0x000004, "Wrong size on MaiLookAtComponent_EnableLookAt");
static_assert(offsetof(MaiLookAtComponent_EnableLookAt, Priority) == 0x000000, "Member 'MaiLookAtComponent_EnableLookAt::Priority' has a wrong offset!");

// Function Mai.MaiLookAtComponent.LookAtActor
// 0x0010 (0x0010 - 0x0000)
struct MaiLookAtComponent_LookAtActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRange;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiLookAtComponent_LookAtActor) == 0x000008, "Wrong alignment on MaiLookAtComponent_LookAtActor");
static_assert(sizeof(MaiLookAtComponent_LookAtActor) == 0x000010, "Wrong size on MaiLookAtComponent_LookAtActor");
static_assert(offsetof(MaiLookAtComponent_LookAtActor, Actor) == 0x000000, "Member 'MaiLookAtComponent_LookAtActor::Actor' has a wrong offset!");
static_assert(offsetof(MaiLookAtComponent_LookAtActor, MaxRange) == 0x000008, "Member 'MaiLookAtComponent_LookAtActor::MaxRange' has a wrong offset!");
static_assert(offsetof(MaiLookAtComponent_LookAtActor, Priority) == 0x00000C, "Member 'MaiLookAtComponent_LookAtActor::Priority' has a wrong offset!");

// Function Mai.MaiLookAtComponent.LookAtComponent
// 0x0010 (0x0010 - 0x0000)
struct MaiLookAtComponent_LookAtComponent final
{
public:
	class USceneComponent*                        Comp;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRange;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiLookAtComponent_LookAtComponent) == 0x000008, "Wrong alignment on MaiLookAtComponent_LookAtComponent");
static_assert(sizeof(MaiLookAtComponent_LookAtComponent) == 0x000010, "Wrong size on MaiLookAtComponent_LookAtComponent");
static_assert(offsetof(MaiLookAtComponent_LookAtComponent, Comp) == 0x000000, "Member 'MaiLookAtComponent_LookAtComponent::Comp' has a wrong offset!");
static_assert(offsetof(MaiLookAtComponent_LookAtComponent, MaxRange) == 0x000008, "Member 'MaiLookAtComponent_LookAtComponent::MaxRange' has a wrong offset!");
static_assert(offsetof(MaiLookAtComponent_LookAtComponent, Priority) == 0x00000C, "Member 'MaiLookAtComponent_LookAtComponent::Priority' has a wrong offset!");

// Function Mai.MaiLookAtComponent.LookAtLocation
// 0x0020 (0x0020 - 0x0000)
struct MaiLookAtComponent_LookAtLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRange;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiLookAtComponent_LookAtLocation) == 0x000008, "Wrong alignment on MaiLookAtComponent_LookAtLocation");
static_assert(sizeof(MaiLookAtComponent_LookAtLocation) == 0x000020, "Wrong size on MaiLookAtComponent_LookAtLocation");
static_assert(offsetof(MaiLookAtComponent_LookAtLocation, Location) == 0x000000, "Member 'MaiLookAtComponent_LookAtLocation::Location' has a wrong offset!");
static_assert(offsetof(MaiLookAtComponent_LookAtLocation, MaxRange) == 0x000018, "Member 'MaiLookAtComponent_LookAtLocation::MaxRange' has a wrong offset!");
static_assert(offsetof(MaiLookAtComponent_LookAtLocation, Priority) == 0x00001C, "Member 'MaiLookAtComponent_LookAtLocation::Priority' has a wrong offset!");

// Function Mai.MaiLookAtComponent.SetLookAtRotation
// 0x0020 (0x0020 - 0x0000)
struct MaiLookAtComponent_SetLookAtRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MaxRange;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiLookAtComponent_SetLookAtRotation) == 0x000008, "Wrong alignment on MaiLookAtComponent_SetLookAtRotation");
static_assert(sizeof(MaiLookAtComponent_SetLookAtRotation) == 0x000020, "Wrong size on MaiLookAtComponent_SetLookAtRotation");
static_assert(offsetof(MaiLookAtComponent_SetLookAtRotation, Rotation) == 0x000000, "Member 'MaiLookAtComponent_SetLookAtRotation::Rotation' has a wrong offset!");
static_assert(offsetof(MaiLookAtComponent_SetLookAtRotation, MaxRange) == 0x000018, "Member 'MaiLookAtComponent_SetLookAtRotation::MaxRange' has a wrong offset!");
static_assert(offsetof(MaiLookAtComponent_SetLookAtRotation, Priority) == 0x00001C, "Member 'MaiLookAtComponent_SetLookAtRotation::Priority' has a wrong offset!");

// Function Mai.MaiLookAtComponent.GetHeadLocalRotation
// 0x0018 (0x0018 - 0x0000)
struct MaiLookAtComponent_GetHeadLocalRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiLookAtComponent_GetHeadLocalRotation) == 0x000008, "Wrong alignment on MaiLookAtComponent_GetHeadLocalRotation");
static_assert(sizeof(MaiLookAtComponent_GetHeadLocalRotation) == 0x000018, "Wrong size on MaiLookAtComponent_GetHeadLocalRotation");
static_assert(offsetof(MaiLookAtComponent_GetHeadLocalRotation, ReturnValue) == 0x000000, "Member 'MaiLookAtComponent_GetHeadLocalRotation::ReturnValue' has a wrong offset!");

// Function Mai.MaiLookAtComponent.GetLookAtActor
// 0x0010 (0x0010 - 0x0000)
struct MaiLookAtComponent_GetLookAtActor final
{
public:
	uint8                                         Priority;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiLookAtComponent_GetLookAtActor) == 0x000008, "Wrong alignment on MaiLookAtComponent_GetLookAtActor");
static_assert(sizeof(MaiLookAtComponent_GetLookAtActor) == 0x000010, "Wrong size on MaiLookAtComponent_GetLookAtActor");
static_assert(offsetof(MaiLookAtComponent_GetLookAtActor, Priority) == 0x000000, "Member 'MaiLookAtComponent_GetLookAtActor::Priority' has a wrong offset!");
static_assert(offsetof(MaiLookAtComponent_GetLookAtActor, ReturnValue) == 0x000008, "Member 'MaiLookAtComponent_GetLookAtActor::ReturnValue' has a wrong offset!");

// Function Mai.MaiLookAtComponent.GetLookAtLocation
// 0x0020 (0x0020 - 0x0000)
struct MaiLookAtComponent_GetLookAtLocation final
{
public:
	uint8                                         Priority;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiLookAtComponent_GetLookAtLocation) == 0x000008, "Wrong alignment on MaiLookAtComponent_GetLookAtLocation");
static_assert(sizeof(MaiLookAtComponent_GetLookAtLocation) == 0x000020, "Wrong size on MaiLookAtComponent_GetLookAtLocation");
static_assert(offsetof(MaiLookAtComponent_GetLookAtLocation, Priority) == 0x000000, "Member 'MaiLookAtComponent_GetLookAtLocation::Priority' has a wrong offset!");
static_assert(offsetof(MaiLookAtComponent_GetLookAtLocation, ReturnValue) == 0x000008, "Member 'MaiLookAtComponent_GetLookAtLocation::ReturnValue' has a wrong offset!");

// Function Mai.MaiLookAtComponent.GetLookAtRotation
// 0x0020 (0x0020 - 0x0000)
struct MaiLookAtComponent_GetLookAtRotation final
{
public:
	uint8                                         Priority;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiLookAtComponent_GetLookAtRotation) == 0x000008, "Wrong alignment on MaiLookAtComponent_GetLookAtRotation");
static_assert(sizeof(MaiLookAtComponent_GetLookAtRotation) == 0x000020, "Wrong size on MaiLookAtComponent_GetLookAtRotation");
static_assert(offsetof(MaiLookAtComponent_GetLookAtRotation, Priority) == 0x000000, "Member 'MaiLookAtComponent_GetLookAtRotation::Priority' has a wrong offset!");
static_assert(offsetof(MaiLookAtComponent_GetLookAtRotation, ReturnValue) == 0x000008, "Member 'MaiLookAtComponent_GetLookAtRotation::ReturnValue' has a wrong offset!");

// Function Mai.MaiLookAtComponent.IsLookAtEnabled
// 0x0001 (0x0001 - 0x0000)
struct MaiLookAtComponent_IsLookAtEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiLookAtComponent_IsLookAtEnabled) == 0x000001, "Wrong alignment on MaiLookAtComponent_IsLookAtEnabled");
static_assert(sizeof(MaiLookAtComponent_IsLookAtEnabled) == 0x000001, "Wrong size on MaiLookAtComponent_IsLookAtEnabled");
static_assert(offsetof(MaiLookAtComponent_IsLookAtEnabled, ReturnValue) == 0x000000, "Member 'MaiLookAtComponent_IsLookAtEnabled::ReturnValue' has a wrong offset!");

// Function Mai.MaiManager.getDifficultyLevel
// 0x0010 (0x0010 - 0x0000)
struct MaiManager_GetDifficultyLevel final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaiDifficultyLevel                           ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiManager_GetDifficultyLevel) == 0x000008, "Wrong alignment on MaiManager_GetDifficultyLevel");
static_assert(sizeof(MaiManager_GetDifficultyLevel) == 0x000010, "Wrong size on MaiManager_GetDifficultyLevel");
static_assert(offsetof(MaiManager_GetDifficultyLevel, WorldContext) == 0x000000, "Member 'MaiManager_GetDifficultyLevel::WorldContext' has a wrong offset!");
static_assert(offsetof(MaiManager_GetDifficultyLevel, ReturnValue) == 0x000008, "Member 'MaiManager_GetDifficultyLevel::ReturnValue' has a wrong offset!");

// Function Mai.MaiManager.LockNavMeshGeneration
// 0x000C (0x000C - 0x0000)
struct MaiManager_LockNavMeshGeneration final
{
public:
	bool                                          Lock;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Reason;                                            // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiManager_LockNavMeshGeneration) == 0x000004, "Wrong alignment on MaiManager_LockNavMeshGeneration");
static_assert(sizeof(MaiManager_LockNavMeshGeneration) == 0x00000C, "Wrong size on MaiManager_LockNavMeshGeneration");
static_assert(offsetof(MaiManager_LockNavMeshGeneration, Lock) == 0x000000, "Member 'MaiManager_LockNavMeshGeneration::Lock' has a wrong offset!");
static_assert(offsetof(MaiManager_LockNavMeshGeneration, Reason) == 0x000004, "Member 'MaiManager_LockNavMeshGeneration::Reason' has a wrong offset!");

// Function Mai.MaiManager.NegateBool
// 0x0010 (0x0010 - 0x0000)
struct MaiManager_NegateBool final
{
public:
	class FString                                 VariableName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiManager_NegateBool) == 0x000008, "Wrong alignment on MaiManager_NegateBool");
static_assert(sizeof(MaiManager_NegateBool) == 0x000010, "Wrong size on MaiManager_NegateBool");
static_assert(offsetof(MaiManager_NegateBool, VariableName) == 0x000000, "Member 'MaiManager_NegateBool::VariableName' has a wrong offset!");

// Function Mai.MaiManager.SetNavigationForStreamingLevel
// 0x0001 (0x0001 - 0x0000)
struct MaiManager_SetNavigationForStreamingLevel final
{
public:
	bool                                          Set;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiManager_SetNavigationForStreamingLevel) == 0x000001, "Wrong alignment on MaiManager_SetNavigationForStreamingLevel");
static_assert(sizeof(MaiManager_SetNavigationForStreamingLevel) == 0x000001, "Wrong size on MaiManager_SetNavigationForStreamingLevel");
static_assert(offsetof(MaiManager_SetNavigationForStreamingLevel, Set) == 0x000000, "Member 'MaiManager_SetNavigationForStreamingLevel::Set' has a wrong offset!");

// Function Mai.MaiManager.SetPartyAttitude
// 0x0003 (0x0003 - 0x0000)
struct MaiManager_SetPartyAttitude final
{
public:
	uint8                                         PartyID1;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PartyID2;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPartyAttitude                                Attitude;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiManager_SetPartyAttitude) == 0x000001, "Wrong alignment on MaiManager_SetPartyAttitude");
static_assert(sizeof(MaiManager_SetPartyAttitude) == 0x000003, "Wrong size on MaiManager_SetPartyAttitude");
static_assert(offsetof(MaiManager_SetPartyAttitude, PartyID1) == 0x000000, "Member 'MaiManager_SetPartyAttitude::PartyID1' has a wrong offset!");
static_assert(offsetof(MaiManager_SetPartyAttitude, PartyID2) == 0x000001, "Member 'MaiManager_SetPartyAttitude::PartyID2' has a wrong offset!");
static_assert(offsetof(MaiManager_SetPartyAttitude, Attitude) == 0x000002, "Member 'MaiManager_SetPartyAttitude::Attitude' has a wrong offset!");

// Function Mai.MaiManager.GetPartyAttitude
// 0x0003 (0x0003 - 0x0000)
struct MaiManager_GetPartyAttitude final
{
public:
	uint8                                         PartyID1;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PartyID2;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPartyAttitude                                ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiManager_GetPartyAttitude) == 0x000001, "Wrong alignment on MaiManager_GetPartyAttitude");
static_assert(sizeof(MaiManager_GetPartyAttitude) == 0x000003, "Wrong size on MaiManager_GetPartyAttitude");
static_assert(offsetof(MaiManager_GetPartyAttitude, PartyID1) == 0x000000, "Member 'MaiManager_GetPartyAttitude::PartyID1' has a wrong offset!");
static_assert(offsetof(MaiManager_GetPartyAttitude, PartyID2) == 0x000001, "Member 'MaiManager_GetPartyAttitude::PartyID2' has a wrong offset!");
static_assert(offsetof(MaiManager_GetPartyAttitude, ReturnValue) == 0x000002, "Member 'MaiManager_GetPartyAttitude::ReturnValue' has a wrong offset!");

// Function Mai.MaiMessage.makeMessage
// 0x0020 (0x0020 - 0x0000)
struct MaiMessage_MakeMessage final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMaiMessage>                MsgClass;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Sender;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaiMessage*                            ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiMessage_MakeMessage) == 0x000008, "Wrong alignment on MaiMessage_MakeMessage");
static_assert(sizeof(MaiMessage_MakeMessage) == 0x000020, "Wrong size on MaiMessage_MakeMessage");
static_assert(offsetof(MaiMessage_MakeMessage, WorldContextObject) == 0x000000, "Member 'MaiMessage_MakeMessage::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MaiMessage_MakeMessage, MsgClass) == 0x000008, "Member 'MaiMessage_MakeMessage::MsgClass' has a wrong offset!");
static_assert(offsetof(MaiMessage_MakeMessage, Sender) == 0x000010, "Member 'MaiMessage_MakeMessage::Sender' has a wrong offset!");
static_assert(offsetof(MaiMessage_MakeMessage, ReturnValue) == 0x000018, "Member 'MaiMessage_MakeMessage::ReturnValue' has a wrong offset!");

// Function Mai.MaiMessage.Broadcast
// 0x0028 (0x0028 - 0x0000)
struct MaiMessage_Broadcast final
{
public:
	struct FMaiReceiverFilter                     Filter;                                            // 0x0000(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SpreadingSpeed;                                    // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiMessage_Broadcast) == 0x000008, "Wrong alignment on MaiMessage_Broadcast");
static_assert(sizeof(MaiMessage_Broadcast) == 0x000028, "Wrong size on MaiMessage_Broadcast");
static_assert(offsetof(MaiMessage_Broadcast, Filter) == 0x000000, "Member 'MaiMessage_Broadcast::Filter' has a wrong offset!");
static_assert(offsetof(MaiMessage_Broadcast, SpreadingSpeed) == 0x000020, "Member 'MaiMessage_Broadcast::SpreadingSpeed' has a wrong offset!");

// Function Mai.MaiMessage.Deliver
// 0x0008 (0x0008 - 0x0000)
struct MaiMessage_Deliver final
{
public:
	class APawn*                                  Receiver;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiMessage_Deliver) == 0x000008, "Wrong alignment on MaiMessage_Deliver");
static_assert(sizeof(MaiMessage_Deliver) == 0x000008, "Wrong size on MaiMessage_Deliver");
static_assert(offsetof(MaiMessage_Deliver, Receiver) == 0x000000, "Member 'MaiMessage_Deliver::Receiver' has a wrong offset!");

// Function Mai.MaiMessage.ScriptDeliver
// 0x0008 (0x0008 - 0x0000)
struct MaiMessage_ScriptDeliver final
{
public:
	class APawn*                                  Receiver;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiMessage_ScriptDeliver) == 0x000008, "Wrong alignment on MaiMessage_ScriptDeliver");
static_assert(sizeof(MaiMessage_ScriptDeliver) == 0x000008, "Wrong size on MaiMessage_ScriptDeliver");
static_assert(offsetof(MaiMessage_ScriptDeliver, Receiver) == 0x000000, "Member 'MaiMessage_ScriptDeliver::Receiver' has a wrong offset!");

// Function Mai.MaiMessage.Send
// 0x0028 (0x0028 - 0x0000)
struct MaiMessage_Send final
{
public:
	struct FMaiReceiverFilter                     Filter;                                            // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SpreadingSpeed;                                    // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiMessage_Send) == 0x000008, "Wrong alignment on MaiMessage_Send");
static_assert(sizeof(MaiMessage_Send) == 0x000028, "Wrong size on MaiMessage_Send");
static_assert(offsetof(MaiMessage_Send, Filter) == 0x000000, "Member 'MaiMessage_Send::Filter' has a wrong offset!");
static_assert(offsetof(MaiMessage_Send, SpreadingSpeed) == 0x000020, "Member 'MaiMessage_Send::SpreadingSpeed' has a wrong offset!");

// Function Mai.MaiMessage.IsCaptured
// 0x0001 (0x0001 - 0x0000)
struct MaiMessage_IsCaptured final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiMessage_IsCaptured) == 0x000001, "Wrong alignment on MaiMessage_IsCaptured");
static_assert(sizeof(MaiMessage_IsCaptured) == 0x000001, "Wrong size on MaiMessage_IsCaptured");
static_assert(offsetof(MaiMessage_IsCaptured, ReturnValue) == 0x000000, "Member 'MaiMessage_IsCaptured::ReturnValue' has a wrong offset!");

// Function Mai.MaiMessage.IsReceived
// 0x0001 (0x0001 - 0x0000)
struct MaiMessage_IsReceived final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiMessage_IsReceived) == 0x000001, "Wrong alignment on MaiMessage_IsReceived");
static_assert(sizeof(MaiMessage_IsReceived) == 0x000001, "Wrong size on MaiMessage_IsReceived");
static_assert(offsetof(MaiMessage_IsReceived, ReturnValue) == 0x000000, "Member 'MaiMessage_IsReceived::ReturnValue' has a wrong offset!");

// Function Mai.MessageReceiverInterface.ReceiveMessage
// 0x0008 (0x0008 - 0x0000)
struct MessageReceiverInterface_ReceiveMessage final
{
public:
	class UMaiMessage*                            Message;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MessageReceiverInterface_ReceiveMessage) == 0x000008, "Wrong alignment on MessageReceiverInterface_ReceiveMessage");
static_assert(sizeof(MessageReceiverInterface_ReceiveMessage) == 0x000008, "Wrong size on MessageReceiverInterface_ReceiveMessage");
static_assert(offsetof(MessageReceiverInterface_ReceiveMessage, Message) == 0x000000, "Member 'MessageReceiverInterface_ReceiveMessage::Message' has a wrong offset!");

// Function Mai.MsgStartBlowReceiverInterface.ReceiveStartBlowMsg
// 0x0018 (0x0018 - 0x0000)
struct MsgStartBlowReceiverInterface_ReceiveStartBlowMsg final
{
public:
	class UMaiMessage*                            Message;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Attacker;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                DamageType;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MsgStartBlowReceiverInterface_ReceiveStartBlowMsg) == 0x000008, "Wrong alignment on MsgStartBlowReceiverInterface_ReceiveStartBlowMsg");
static_assert(sizeof(MsgStartBlowReceiverInterface_ReceiveStartBlowMsg) == 0x000018, "Wrong size on MsgStartBlowReceiverInterface_ReceiveStartBlowMsg");
static_assert(offsetof(MsgStartBlowReceiverInterface_ReceiveStartBlowMsg, Message) == 0x000000, "Member 'MsgStartBlowReceiverInterface_ReceiveStartBlowMsg::Message' has a wrong offset!");
static_assert(offsetof(MsgStartBlowReceiverInterface_ReceiveStartBlowMsg, Attacker) == 0x000008, "Member 'MsgStartBlowReceiverInterface_ReceiveStartBlowMsg::Attacker' has a wrong offset!");
static_assert(offsetof(MsgStartBlowReceiverInterface_ReceiveStartBlowMsg, DamageType) == 0x000010, "Member 'MsgStartBlowReceiverInterface_ReceiveStartBlowMsg::DamageType' has a wrong offset!");

// Function Mai.MaiNavLink.BreakMoveToLink
// 0x0010 (0x0010 - 0x0000)
struct MaiNavLink_BreakMoveToLink final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartSide;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiNavLink_BreakMoveToLink) == 0x000008, "Wrong alignment on MaiNavLink_BreakMoveToLink");
static_assert(sizeof(MaiNavLink_BreakMoveToLink) == 0x000010, "Wrong size on MaiNavLink_BreakMoveToLink");
static_assert(offsetof(MaiNavLink_BreakMoveToLink, Being) == 0x000000, "Member 'MaiNavLink_BreakMoveToLink::Being' has a wrong offset!");
static_assert(offsetof(MaiNavLink_BreakMoveToLink, StartSide) == 0x000008, "Member 'MaiNavLink_BreakMoveToLink::StartSide' has a wrong offset!");

// Function Mai.MaiNavLink.ClearPathsForWaitingCharacters
// 0x0001 (0x0001 - 0x0000)
struct MaiNavLink_ClearPathsForWaitingCharacters final
{
public:
	bool                                          StartSide;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiNavLink_ClearPathsForWaitingCharacters) == 0x000001, "Wrong alignment on MaiNavLink_ClearPathsForWaitingCharacters");
static_assert(sizeof(MaiNavLink_ClearPathsForWaitingCharacters) == 0x000001, "Wrong size on MaiNavLink_ClearPathsForWaitingCharacters");
static_assert(offsetof(MaiNavLink_ClearPathsForWaitingCharacters, StartSide) == 0x000000, "Member 'MaiNavLink_ClearPathsForWaitingCharacters::StartSide' has a wrong offset!");

// Function Mai.MaiNavLink.FinishUsingBy
// 0x0010 (0x0010 - 0x0000)
struct MaiNavLink_FinishUsingBy final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartSide;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiNavLink_FinishUsingBy) == 0x000008, "Wrong alignment on MaiNavLink_FinishUsingBy");
static_assert(sizeof(MaiNavLink_FinishUsingBy) == 0x000010, "Wrong size on MaiNavLink_FinishUsingBy");
static_assert(offsetof(MaiNavLink_FinishUsingBy, Being) == 0x000000, "Member 'MaiNavLink_FinishUsingBy::Being' has a wrong offset!");
static_assert(offsetof(MaiNavLink_FinishUsingBy, StartSide) == 0x000008, "Member 'MaiNavLink_FinishUsingBy::StartSide' has a wrong offset!");

// Function Mai.MaiNavLink.OnOverlapBegin
// 0x0108 (0x0108 - 0x0000)
struct MaiNavLink_OnOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiNavLink_OnOverlapBegin) == 0x000008, "Wrong alignment on MaiNavLink_OnOverlapBegin");
static_assert(sizeof(MaiNavLink_OnOverlapBegin) == 0x000108, "Wrong size on MaiNavLink_OnOverlapBegin");
static_assert(offsetof(MaiNavLink_OnOverlapBegin, OverlappedComponent) == 0x000000, "Member 'MaiNavLink_OnOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(MaiNavLink_OnOverlapBegin, OtherActor) == 0x000008, "Member 'MaiNavLink_OnOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(MaiNavLink_OnOverlapBegin, OtherComp) == 0x000010, "Member 'MaiNavLink_OnOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(MaiNavLink_OnOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'MaiNavLink_OnOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(MaiNavLink_OnOverlapBegin, bFromSweep) == 0x00001C, "Member 'MaiNavLink_OnOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(MaiNavLink_OnOverlapBegin, SweepResult) == 0x000020, "Member 'MaiNavLink_OnOverlapBegin::SweepResult' has a wrong offset!");

// Function Mai.MaiNavLink.OnOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct MaiNavLink_OnOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiNavLink_OnOverlapEnd) == 0x000008, "Wrong alignment on MaiNavLink_OnOverlapEnd");
static_assert(sizeof(MaiNavLink_OnOverlapEnd) == 0x000020, "Wrong size on MaiNavLink_OnOverlapEnd");
static_assert(offsetof(MaiNavLink_OnOverlapEnd, OverlappedComponent) == 0x000000, "Member 'MaiNavLink_OnOverlapEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(MaiNavLink_OnOverlapEnd, OtherActor) == 0x000008, "Member 'MaiNavLink_OnOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(MaiNavLink_OnOverlapEnd, OtherComp) == 0x000010, "Member 'MaiNavLink_OnOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(MaiNavLink_OnOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'MaiNavLink_OnOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function Mai.MaiNavLink.ReturnOwnership
// 0x0008 (0x0008 - 0x0000)
struct MaiNavLink_ReturnOwnership final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiNavLink_ReturnOwnership) == 0x000008, "Wrong alignment on MaiNavLink_ReturnOwnership");
static_assert(sizeof(MaiNavLink_ReturnOwnership) == 0x000008, "Wrong size on MaiNavLink_ReturnOwnership");
static_assert(offsetof(MaiNavLink_ReturnOwnership, Being) == 0x000000, "Member 'MaiNavLink_ReturnOwnership::Being' has a wrong offset!");

// Function Mai.MaiNavLink.SetNavigationRelevancy
// 0x0001 (0x0001 - 0x0000)
struct MaiNavLink_SetNavigationRelevancy final
{
public:
	bool                                          IsRelevant;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiNavLink_SetNavigationRelevancy) == 0x000001, "Wrong alignment on MaiNavLink_SetNavigationRelevancy");
static_assert(sizeof(MaiNavLink_SetNavigationRelevancy) == 0x000001, "Wrong size on MaiNavLink_SetNavigationRelevancy");
static_assert(offsetof(MaiNavLink_SetNavigationRelevancy, IsRelevant) == 0x000000, "Member 'MaiNavLink_SetNavigationRelevancy::IsRelevant' has a wrong offset!");

// Function Mai.MaiNavLink.StartMoveToLink
// 0x0010 (0x0010 - 0x0000)
struct MaiNavLink_StartMoveToLink final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartSide;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiNavLink_StartMoveToLink) == 0x000008, "Wrong alignment on MaiNavLink_StartMoveToLink");
static_assert(sizeof(MaiNavLink_StartMoveToLink) == 0x000010, "Wrong size on MaiNavLink_StartMoveToLink");
static_assert(offsetof(MaiNavLink_StartMoveToLink, Being) == 0x000000, "Member 'MaiNavLink_StartMoveToLink::Being' has a wrong offset!");
static_assert(offsetof(MaiNavLink_StartMoveToLink, StartSide) == 0x000008, "Member 'MaiNavLink_StartMoveToLink::StartSide' has a wrong offset!");

// Function Mai.MaiNavLink.StartUsingBy
// 0x0010 (0x0010 - 0x0000)
struct MaiNavLink_StartUsingBy final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartSide;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiNavLink_StartUsingBy) == 0x000008, "Wrong alignment on MaiNavLink_StartUsingBy");
static_assert(sizeof(MaiNavLink_StartUsingBy) == 0x000010, "Wrong size on MaiNavLink_StartUsingBy");
static_assert(offsetof(MaiNavLink_StartUsingBy, Being) == 0x000000, "Member 'MaiNavLink_StartUsingBy::Being' has a wrong offset!");
static_assert(offsetof(MaiNavLink_StartUsingBy, StartSide) == 0x000008, "Member 'MaiNavLink_StartUsingBy::StartSide' has a wrong offset!");

// Function Mai.MaiNavLink.TakeOwnership
// 0x0008 (0x0008 - 0x0000)
struct MaiNavLink_TakeOwnership final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiNavLink_TakeOwnership) == 0x000008, "Wrong alignment on MaiNavLink_TakeOwnership");
static_assert(sizeof(MaiNavLink_TakeOwnership) == 0x000008, "Wrong size on MaiNavLink_TakeOwnership");
static_assert(offsetof(MaiNavLink_TakeOwnership, Being) == 0x000000, "Member 'MaiNavLink_TakeOwnership::Being' has a wrong offset!");

// Function Mai.MaiNavLink.GetSmartLinkComp
// 0x0008 (0x0008 - 0x0000)
struct MaiNavLink_GetSmartLinkComp final
{
public:
	class UNavLinkCustomComponent*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiNavLink_GetSmartLinkComp) == 0x000008, "Wrong alignment on MaiNavLink_GetSmartLinkComp");
static_assert(sizeof(MaiNavLink_GetSmartLinkComp) == 0x000008, "Wrong size on MaiNavLink_GetSmartLinkComp");
static_assert(offsetof(MaiNavLink_GetSmartLinkComp, ReturnValue) == 0x000000, "Member 'MaiNavLink_GetSmartLinkComp::ReturnValue' has a wrong offset!");

// Function Mai.MaiNavLink.IsOnBeingPath
// 0x0010 (0x0010 - 0x0000)
struct MaiNavLink_IsOnBeingPath final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckFromNext;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiNavLink_IsOnBeingPath) == 0x000008, "Wrong alignment on MaiNavLink_IsOnBeingPath");
static_assert(sizeof(MaiNavLink_IsOnBeingPath) == 0x000010, "Wrong size on MaiNavLink_IsOnBeingPath");
static_assert(offsetof(MaiNavLink_IsOnBeingPath, Being) == 0x000000, "Member 'MaiNavLink_IsOnBeingPath::Being' has a wrong offset!");
static_assert(offsetof(MaiNavLink_IsOnBeingPath, CheckFromNext) == 0x000008, "Member 'MaiNavLink_IsOnBeingPath::CheckFromNext' has a wrong offset!");
static_assert(offsetof(MaiNavLink_IsOnBeingPath, ReturnValue) == 0x000009, "Member 'MaiNavLink_IsOnBeingPath::ReturnValue' has a wrong offset!");

// Function Mai.MaiNavLinkComponent.SetLinkEnabled
// 0x0001 (0x0001 - 0x0000)
struct MaiNavLinkComponent_SetLinkEnabled final
{
public:
	bool                                          NewEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiNavLinkComponent_SetLinkEnabled) == 0x000001, "Wrong alignment on MaiNavLinkComponent_SetLinkEnabled");
static_assert(sizeof(MaiNavLinkComponent_SetLinkEnabled) == 0x000001, "Wrong size on MaiNavLinkComponent_SetLinkEnabled");
static_assert(offsetof(MaiNavLinkComponent_SetLinkEnabled, NewEnabled) == 0x000000, "Member 'MaiNavLinkComponent_SetLinkEnabled::NewEnabled' has a wrong offset!");

// Function Mai.MaiNavCapsule.SetAreaClass
// 0x0008 (0x0008 - 0x0000)
struct MaiNavCapsule_SetAreaClass final
{
public:
	TSubclassOf<class UNavArea>                   NewAreaClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiNavCapsule_SetAreaClass) == 0x000008, "Wrong alignment on MaiNavCapsule_SetAreaClass");
static_assert(sizeof(MaiNavCapsule_SetAreaClass) == 0x000008, "Wrong size on MaiNavCapsule_SetAreaClass");
static_assert(offsetof(MaiNavCapsule_SetAreaClass, NewAreaClass) == 0x000000, "Member 'MaiNavCapsule_SetAreaClass::NewAreaClass' has a wrong offset!");

// Function Mai.MaiNavCapsule.IsInArea
// 0x0020 (0x0020 - 0x0000)
struct MaiNavCapsule_IsInArea final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Extent;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiNavCapsule_IsInArea) == 0x000008, "Wrong alignment on MaiNavCapsule_IsInArea");
static_assert(sizeof(MaiNavCapsule_IsInArea) == 0x000020, "Wrong size on MaiNavCapsule_IsInArea");
static_assert(offsetof(MaiNavCapsule_IsInArea, Location) == 0x000000, "Member 'MaiNavCapsule_IsInArea::Location' has a wrong offset!");
static_assert(offsetof(MaiNavCapsule_IsInArea, Extent) == 0x000018, "Member 'MaiNavCapsule_IsInArea::Extent' has a wrong offset!");
static_assert(offsetof(MaiNavCapsule_IsInArea, ReturnValue) == 0x00001C, "Member 'MaiNavCapsule_IsInArea::ReturnValue' has a wrong offset!");

// Function Mai.MaiNavSphere.SetAreaClass
// 0x0008 (0x0008 - 0x0000)
struct MaiNavSphere_SetAreaClass final
{
public:
	TSubclassOf<class UNavArea>                   NewAreaClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiNavSphere_SetAreaClass) == 0x000008, "Wrong alignment on MaiNavSphere_SetAreaClass");
static_assert(sizeof(MaiNavSphere_SetAreaClass) == 0x000008, "Wrong size on MaiNavSphere_SetAreaClass");
static_assert(offsetof(MaiNavSphere_SetAreaClass, NewAreaClass) == 0x000000, "Member 'MaiNavSphere_SetAreaClass::NewAreaClass' has a wrong offset!");

// Function Mai.MaiNavSphere.IsInArea
// 0x0020 (0x0020 - 0x0000)
struct MaiNavSphere_IsInArea final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Extent;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiNavSphere_IsInArea) == 0x000008, "Wrong alignment on MaiNavSphere_IsInArea");
static_assert(sizeof(MaiNavSphere_IsInArea) == 0x000020, "Wrong size on MaiNavSphere_IsInArea");
static_assert(offsetof(MaiNavSphere_IsInArea, Location) == 0x000000, "Member 'MaiNavSphere_IsInArea::Location' has a wrong offset!");
static_assert(offsetof(MaiNavSphere_IsInArea, Extent) == 0x000018, "Member 'MaiNavSphere_IsInArea::Extent' has a wrong offset!");
static_assert(offsetof(MaiNavSphere_IsInArea, ReturnValue) == 0x00001C, "Member 'MaiNavSphere_IsInArea::ReturnValue' has a wrong offset!");

// Function Mai.MaiNodeFollowing.MoveTo
// 0x0020 (0x0020 - 0x0000)
struct MaiNodeFollowing_MoveTo final
{
public:
	struct FVector                                GoalLocation;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiNodeFollowing_MoveTo) == 0x000008, "Wrong alignment on MaiNodeFollowing_MoveTo");
static_assert(sizeof(MaiNodeFollowing_MoveTo) == 0x000020, "Wrong size on MaiNodeFollowing_MoveTo");
static_assert(offsetof(MaiNodeFollowing_MoveTo, GoalLocation) == 0x000000, "Member 'MaiNodeFollowing_MoveTo::GoalLocation' has a wrong offset!");
static_assert(offsetof(MaiNodeFollowing_MoveTo, ReturnValue) == 0x000018, "Member 'MaiNodeFollowing_MoveTo::ReturnValue' has a wrong offset!");

// Function Mai.MaiNodeFollowing.PreparePathTo
// 0x0020 (0x0020 - 0x0000)
struct MaiNodeFollowing_PreparePathTo final
{
public:
	struct FVector                                GoalLocation;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiNodeFollowing_PreparePathTo) == 0x000008, "Wrong alignment on MaiNodeFollowing_PreparePathTo");
static_assert(sizeof(MaiNodeFollowing_PreparePathTo) == 0x000020, "Wrong size on MaiNodeFollowing_PreparePathTo");
static_assert(offsetof(MaiNodeFollowing_PreparePathTo, GoalLocation) == 0x000000, "Member 'MaiNodeFollowing_PreparePathTo::GoalLocation' has a wrong offset!");
static_assert(offsetof(MaiNodeFollowing_PreparePathTo, ReturnValue) == 0x000018, "Member 'MaiNodeFollowing_PreparePathTo::ReturnValue' has a wrong offset!");

// Function Mai.MaiNodeFollowing.IsGoalReached
// 0x0020 (0x0020 - 0x0000)
struct MaiNodeFollowing_IsGoalReached final
{
public:
	struct FVector                                GoalLocation;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiNodeFollowing_IsGoalReached) == 0x000008, "Wrong alignment on MaiNodeFollowing_IsGoalReached");
static_assert(sizeof(MaiNodeFollowing_IsGoalReached) == 0x000020, "Wrong size on MaiNodeFollowing_IsGoalReached");
static_assert(offsetof(MaiNodeFollowing_IsGoalReached, GoalLocation) == 0x000000, "Member 'MaiNodeFollowing_IsGoalReached::GoalLocation' has a wrong offset!");
static_assert(offsetof(MaiNodeFollowing_IsGoalReached, ReturnValue) == 0x000018, "Member 'MaiNodeFollowing_IsGoalReached::ReturnValue' has a wrong offset!");

// Function Mai.MaiNodeGraphComponent.FindNearestNode
// 0x0020 (0x0020 - 0x0000)
struct MaiNodeGraphComponent_FindNearestNode final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaiPathNodeComponent*                  ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiNodeGraphComponent_FindNearestNode) == 0x000008, "Wrong alignment on MaiNodeGraphComponent_FindNearestNode");
static_assert(sizeof(MaiNodeGraphComponent_FindNearestNode) == 0x000020, "Wrong size on MaiNodeGraphComponent_FindNearestNode");
static_assert(offsetof(MaiNodeGraphComponent_FindNearestNode, Location) == 0x000000, "Member 'MaiNodeGraphComponent_FindNearestNode::Location' has a wrong offset!");
static_assert(offsetof(MaiNodeGraphComponent_FindNearestNode, ReturnValue) == 0x000018, "Member 'MaiNodeGraphComponent_FindNearestNode::ReturnValue' has a wrong offset!");

// Function Mai.MaiNodeGraphComponent.GetAllNodes
// 0x0010 (0x0010 - 0x0000)
struct MaiNodeGraphComponent_GetAllNodes final
{
public:
	TArray<struct FMaiNodeRef>                    NodesList;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiNodeGraphComponent_GetAllNodes) == 0x000008, "Wrong alignment on MaiNodeGraphComponent_GetAllNodes");
static_assert(sizeof(MaiNodeGraphComponent_GetAllNodes) == 0x000010, "Wrong size on MaiNodeGraphComponent_GetAllNodes");
static_assert(offsetof(MaiNodeGraphComponent_GetAllNodes, NodesList) == 0x000000, "Member 'MaiNodeGraphComponent_GetAllNodes::NodesList' has a wrong offset!");

// Function Mai.MaiNodeGraphComponent.GetNodesInRange
// 0x0030 (0x0030 - 0x0000)
struct MaiNodeGraphComponent_GetNodesInRange final
{
public:
	TArray<struct FMaiNodeRef>                    NodesList;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Pos;                                               // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiNodeGraphComponent_GetNodesInRange) == 0x000008, "Wrong alignment on MaiNodeGraphComponent_GetNodesInRange");
static_assert(sizeof(MaiNodeGraphComponent_GetNodesInRange) == 0x000030, "Wrong size on MaiNodeGraphComponent_GetNodesInRange");
static_assert(offsetof(MaiNodeGraphComponent_GetNodesInRange, NodesList) == 0x000000, "Member 'MaiNodeGraphComponent_GetNodesInRange::NodesList' has a wrong offset!");
static_assert(offsetof(MaiNodeGraphComponent_GetNodesInRange, Pos) == 0x000010, "Member 'MaiNodeGraphComponent_GetNodesInRange::Pos' has a wrong offset!");
static_assert(offsetof(MaiNodeGraphComponent_GetNodesInRange, Radius) == 0x000028, "Member 'MaiNodeGraphComponent_GetNodesInRange::Radius' has a wrong offset!");

// Function Mai.MaiNodeSystem.UpdateInActorBounds
// 0x0008 (0x0008 - 0x0000)
struct MaiNodeSystem_UpdateInActorBounds final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiNodeSystem_UpdateInActorBounds) == 0x000008, "Wrong alignment on MaiNodeSystem_UpdateInActorBounds");
static_assert(sizeof(MaiNodeSystem_UpdateInActorBounds) == 0x000008, "Wrong size on MaiNodeSystem_UpdateInActorBounds");
static_assert(offsetof(MaiNodeSystem_UpdateInActorBounds, Actor) == 0x000000, "Member 'MaiNodeSystem_UpdateInActorBounds::Actor' has a wrong offset!");

// Function Mai.MaiNodeSystem.UpdateInBounds
// 0x0038 (0x0038 - 0x0000)
struct MaiNodeSystem_UpdateInBounds final
{
public:
	struct FBox                                   Box;                                               // 0x0000(0x0038)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiNodeSystem_UpdateInBounds) == 0x000008, "Wrong alignment on MaiNodeSystem_UpdateInBounds");
static_assert(sizeof(MaiNodeSystem_UpdateInBounds) == 0x000038, "Wrong size on MaiNodeSystem_UpdateInBounds");
static_assert(offsetof(MaiNodeSystem_UpdateInBounds, Box) == 0x000000, "Member 'MaiNodeSystem_UpdateInBounds::Box' has a wrong offset!");

// Function Mai.MaiNodeSystem.UpdateInComponentBounds
// 0x0008 (0x0008 - 0x0000)
struct MaiNodeSystem_UpdateInComponentBounds final
{
public:
	class USceneComponent*                        Scene;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiNodeSystem_UpdateInComponentBounds) == 0x000008, "Wrong alignment on MaiNodeSystem_UpdateInComponentBounds");
static_assert(sizeof(MaiNodeSystem_UpdateInComponentBounds) == 0x000008, "Wrong size on MaiNodeSystem_UpdateInComponentBounds");
static_assert(offsetof(MaiNodeSystem_UpdateInComponentBounds, Scene) == 0x000000, "Member 'MaiNodeSystem_UpdateInComponentBounds::Scene' has a wrong offset!");

// Function Mai.MaiNoiseEmitter.MakeLongNoise
// 0x0004 (0x0004 - 0x0000)
struct MaiNoiseEmitter_MakeLongNoise final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiNoiseEmitter_MakeLongNoise) == 0x000004, "Wrong alignment on MaiNoiseEmitter_MakeLongNoise");
static_assert(sizeof(MaiNoiseEmitter_MakeLongNoise) == 0x000004, "Wrong size on MaiNoiseEmitter_MakeLongNoise");
static_assert(offsetof(MaiNoiseEmitter_MakeLongNoise, Duration) == 0x000000, "Member 'MaiNoiseEmitter_MakeLongNoise::Duration' has a wrong offset!");

// Function Mai.MaiSense_Hearing.ReportNoiseEvent
// 0x0048 (0x0048 - 0x0000)
struct MaiSense_Hearing_ReportNoiseEvent final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NoiseLocation;                                     // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Instigator;                                        // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Aggro;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseRange;                                        // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRange;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Loudness;                                          // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 IgnoreActor;                                       // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSense_Hearing_ReportNoiseEvent) == 0x000008, "Wrong alignment on MaiSense_Hearing_ReportNoiseEvent");
static_assert(sizeof(MaiSense_Hearing_ReportNoiseEvent) == 0x000048, "Wrong size on MaiSense_Hearing_ReportNoiseEvent");
static_assert(offsetof(MaiSense_Hearing_ReportNoiseEvent, WorldContext) == 0x000000, "Member 'MaiSense_Hearing_ReportNoiseEvent::WorldContext' has a wrong offset!");
static_assert(offsetof(MaiSense_Hearing_ReportNoiseEvent, NoiseLocation) == 0x000008, "Member 'MaiSense_Hearing_ReportNoiseEvent::NoiseLocation' has a wrong offset!");
static_assert(offsetof(MaiSense_Hearing_ReportNoiseEvent, Instigator) == 0x000020, "Member 'MaiSense_Hearing_ReportNoiseEvent::Instigator' has a wrong offset!");
static_assert(offsetof(MaiSense_Hearing_ReportNoiseEvent, Tag) == 0x000028, "Member 'MaiSense_Hearing_ReportNoiseEvent::Tag' has a wrong offset!");
static_assert(offsetof(MaiSense_Hearing_ReportNoiseEvent, Aggro) == 0x000030, "Member 'MaiSense_Hearing_ReportNoiseEvent::Aggro' has a wrong offset!");
static_assert(offsetof(MaiSense_Hearing_ReportNoiseEvent, NoiseRange) == 0x000034, "Member 'MaiSense_Hearing_ReportNoiseEvent::NoiseRange' has a wrong offset!");
static_assert(offsetof(MaiSense_Hearing_ReportNoiseEvent, MaxRange) == 0x000038, "Member 'MaiSense_Hearing_ReportNoiseEvent::MaxRange' has a wrong offset!");
static_assert(offsetof(MaiSense_Hearing_ReportNoiseEvent, Loudness) == 0x00003C, "Member 'MaiSense_Hearing_ReportNoiseEvent::Loudness' has a wrong offset!");
static_assert(offsetof(MaiSense_Hearing_ReportNoiseEvent, IgnoreActor) == 0x000040, "Member 'MaiSense_Hearing_ReportNoiseEvent::IgnoreActor' has a wrong offset!");

// Function Mai.MaiSense_The6thSense.Report6thSenseConstEvent
// 0x0040 (0x0040 - 0x0000)
struct MaiSense_The6thSense_Report6thSenseConstEvent final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Instigator;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Power;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiSense_The6thSense_Report6thSenseConstEvent) == 0x000008, "Wrong alignment on MaiSense_The6thSense_Report6thSenseConstEvent");
static_assert(sizeof(MaiSense_The6thSense_Report6thSenseConstEvent) == 0x000040, "Wrong size on MaiSense_The6thSense_Report6thSenseConstEvent");
static_assert(offsetof(MaiSense_The6thSense_Report6thSenseConstEvent, WorldContext) == 0x000000, "Member 'MaiSense_The6thSense_Report6thSenseConstEvent::WorldContext' has a wrong offset!");
static_assert(offsetof(MaiSense_The6thSense_Report6thSenseConstEvent, Tag) == 0x000008, "Member 'MaiSense_The6thSense_Report6thSenseConstEvent::Tag' has a wrong offset!");
static_assert(offsetof(MaiSense_The6thSense_Report6thSenseConstEvent, Enable) == 0x000010, "Member 'MaiSense_The6thSense_Report6thSenseConstEvent::Enable' has a wrong offset!");
static_assert(offsetof(MaiSense_The6thSense_Report6thSenseConstEvent, Instigator) == 0x000018, "Member 'MaiSense_The6thSense_Report6thSenseConstEvent::Instigator' has a wrong offset!");
static_assert(offsetof(MaiSense_The6thSense_Report6thSenseConstEvent, Location) == 0x000020, "Member 'MaiSense_The6thSense_Report6thSenseConstEvent::Location' has a wrong offset!");
static_assert(offsetof(MaiSense_The6thSense_Report6thSenseConstEvent, Power) == 0x000038, "Member 'MaiSense_The6thSense_Report6thSenseConstEvent::Power' has a wrong offset!");

// Function Mai.MaiSense_The6thSense.Report6thSenseEvent
// 0x0028 (0x0028 - 0x0000)
struct MaiSense_The6thSense_Report6thSenseEvent final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Instigator;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Power;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiSense_The6thSense_Report6thSenseEvent) == 0x000008, "Wrong alignment on MaiSense_The6thSense_Report6thSenseEvent");
static_assert(sizeof(MaiSense_The6thSense_Report6thSenseEvent) == 0x000028, "Wrong size on MaiSense_The6thSense_Report6thSenseEvent");
static_assert(offsetof(MaiSense_The6thSense_Report6thSenseEvent, WorldContext) == 0x000000, "Member 'MaiSense_The6thSense_Report6thSenseEvent::WorldContext' has a wrong offset!");
static_assert(offsetof(MaiSense_The6thSense_Report6thSenseEvent, Tag) == 0x000008, "Member 'MaiSense_The6thSense_Report6thSenseEvent::Tag' has a wrong offset!");
static_assert(offsetof(MaiSense_The6thSense_Report6thSenseEvent, Enable) == 0x000010, "Member 'MaiSense_The6thSense_Report6thSenseEvent::Enable' has a wrong offset!");
static_assert(offsetof(MaiSense_The6thSense_Report6thSenseEvent, Instigator) == 0x000018, "Member 'MaiSense_The6thSense_Report6thSenseEvent::Instigator' has a wrong offset!");
static_assert(offsetof(MaiSense_The6thSense_Report6thSenseEvent, Power) == 0x000020, "Member 'MaiSense_The6thSense_Report6thSenseEvent::Power' has a wrong offset!");

// Function Mai.MaiSpawner.BlockSpawn
// 0x0001 (0x0001 - 0x0000)
struct MaiSpawner_BlockSpawn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawner_BlockSpawn) == 0x000001, "Wrong alignment on MaiSpawner_BlockSpawn");
static_assert(sizeof(MaiSpawner_BlockSpawn) == 0x000001, "Wrong size on MaiSpawner_BlockSpawn");
static_assert(offsetof(MaiSpawner_BlockSpawn, ReturnValue) == 0x000000, "Member 'MaiSpawner_BlockSpawn::ReturnValue' has a wrong offset!");

// Function Mai.MaiSpawner.ChangeAutoSpawn
// 0x0001 (0x0001 - 0x0000)
struct MaiSpawner_ChangeAutoSpawn final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawner_ChangeAutoSpawn) == 0x000001, "Wrong alignment on MaiSpawner_ChangeAutoSpawn");
static_assert(sizeof(MaiSpawner_ChangeAutoSpawn) == 0x000001, "Wrong size on MaiSpawner_ChangeAutoSpawn");
static_assert(offsetof(MaiSpawner_ChangeAutoSpawn, Active) == 0x000000, "Member 'MaiSpawner_ChangeAutoSpawn::Active' has a wrong offset!");

// Function Mai.MaiSpawner.OnDespawn
// 0x0008 (0x0008 - 0x0000)
struct MaiSpawner_OnDespawn final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawner_OnDespawn) == 0x000008, "Wrong alignment on MaiSpawner_OnDespawn");
static_assert(sizeof(MaiSpawner_OnDespawn) == 0x000008, "Wrong size on MaiSpawner_OnDespawn");
static_assert(offsetof(MaiSpawner_OnDespawn, Actor) == 0x000000, "Member 'MaiSpawner_OnDespawn::Actor' has a wrong offset!");

// Function Mai.MaiSpawner.OnSpawn
// 0x0008 (0x0008 - 0x0000)
struct MaiSpawner_OnSpawn final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawner_OnSpawn) == 0x000008, "Wrong alignment on MaiSpawner_OnSpawn");
static_assert(sizeof(MaiSpawner_OnSpawn) == 0x000008, "Wrong size on MaiSpawner_OnSpawn");
static_assert(offsetof(MaiSpawner_OnSpawn, Actor) == 0x000000, "Member 'MaiSpawner_OnSpawn::Actor' has a wrong offset!");

// Function Mai.MaiSpawner.OnSpawnController
// 0x0008 (0x0008 - 0x0000)
struct MaiSpawner_OnSpawnController final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawner_OnSpawnController) == 0x000008, "Wrong alignment on MaiSpawner_OnSpawnController");
static_assert(sizeof(MaiSpawner_OnSpawnController) == 0x000008, "Wrong size on MaiSpawner_OnSpawnController");
static_assert(offsetof(MaiSpawner_OnSpawnController, Controller) == 0x000000, "Member 'MaiSpawner_OnSpawnController::Controller' has a wrong offset!");

// Function Mai.MaiSpawner.SetActive
// 0x0001 (0x0001 - 0x0000)
struct MaiSpawner_SetActive final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawner_SetActive) == 0x000001, "Wrong alignment on MaiSpawner_SetActive");
static_assert(sizeof(MaiSpawner_SetActive) == 0x000001, "Wrong size on MaiSpawner_SetActive");
static_assert(offsetof(MaiSpawner_SetActive, Active) == 0x000000, "Member 'MaiSpawner_SetActive::Active' has a wrong offset!");

// Function Mai.MaiSpawner.SpawnSingle
// 0x0008 (0x0008 - 0x0000)
struct MaiSpawner_SpawnSingle final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawner_SpawnSingle) == 0x000008, "Wrong alignment on MaiSpawner_SpawnSingle");
static_assert(sizeof(MaiSpawner_SpawnSingle) == 0x000008, "Wrong size on MaiSpawner_SpawnSingle");
static_assert(offsetof(MaiSpawner_SpawnSingle, ReturnValue) == 0x000000, "Member 'MaiSpawner_SpawnSingle::ReturnValue' has a wrong offset!");

// Function Mai.MaiSpawner.IsActive
// 0x0001 (0x0001 - 0x0000)
struct MaiSpawner_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawner_IsActive) == 0x000001, "Wrong alignment on MaiSpawner_IsActive");
static_assert(sizeof(MaiSpawner_IsActive) == 0x000001, "Wrong size on MaiSpawner_IsActive");
static_assert(offsetof(MaiSpawner_IsActive, ReturnValue) == 0x000000, "Member 'MaiSpawner_IsActive::ReturnValue' has a wrong offset!");

// Function Mai.MaiSpawner.isInChaseArea
// 0x0020 (0x0020 - 0x0000)
struct MaiSpawner_IsInChaseArea final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Extent;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiSpawner_IsInChaseArea) == 0x000008, "Wrong alignment on MaiSpawner_IsInChaseArea");
static_assert(sizeof(MaiSpawner_IsInChaseArea) == 0x000020, "Wrong size on MaiSpawner_IsInChaseArea");
static_assert(offsetof(MaiSpawner_IsInChaseArea, Location) == 0x000000, "Member 'MaiSpawner_IsInChaseArea::Location' has a wrong offset!");
static_assert(offsetof(MaiSpawner_IsInChaseArea, Extent) == 0x000018, "Member 'MaiSpawner_IsInChaseArea::Extent' has a wrong offset!");
static_assert(offsetof(MaiSpawner_IsInChaseArea, ReturnValue) == 0x00001C, "Member 'MaiSpawner_IsInChaseArea::ReturnValue' has a wrong offset!");

// Function Mai.MaiSpawner.IsInSpawnArea
// 0x0020 (0x0020 - 0x0000)
struct MaiSpawner_IsInSpawnArea final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Extent;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiSpawner_IsInSpawnArea) == 0x000008, "Wrong alignment on MaiSpawner_IsInSpawnArea");
static_assert(sizeof(MaiSpawner_IsInSpawnArea) == 0x000020, "Wrong size on MaiSpawner_IsInSpawnArea");
static_assert(offsetof(MaiSpawner_IsInSpawnArea, Location) == 0x000000, "Member 'MaiSpawner_IsInSpawnArea::Location' has a wrong offset!");
static_assert(offsetof(MaiSpawner_IsInSpawnArea, Extent) == 0x000018, "Member 'MaiSpawner_IsInSpawnArea::Extent' has a wrong offset!");
static_assert(offsetof(MaiSpawner_IsInSpawnArea, ReturnValue) == 0x00001C, "Member 'MaiSpawner_IsInSpawnArea::ReturnValue' has a wrong offset!");

// Function Mai.MaiSpawner.ShouldAutoSpawn
// 0x0001 (0x0001 - 0x0000)
struct MaiSpawner_ShouldAutoSpawn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawner_ShouldAutoSpawn) == 0x000001, "Wrong alignment on MaiSpawner_ShouldAutoSpawn");
static_assert(sizeof(MaiSpawner_ShouldAutoSpawn) == 0x000001, "Wrong size on MaiSpawner_ShouldAutoSpawn");
static_assert(offsetof(MaiSpawner_ShouldAutoSpawn, ReturnValue) == 0x000000, "Member 'MaiSpawner_ShouldAutoSpawn::ReturnValue' has a wrong offset!");

// Function Mai.MaiSingleSpawner.OnInitBehaviors
// 0x0008 (0x0008 - 0x0000)
struct MaiSingleSpawner_OnInitBehaviors final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSingleSpawner_OnInitBehaviors) == 0x000008, "Wrong alignment on MaiSingleSpawner_OnInitBehaviors");
static_assert(sizeof(MaiSingleSpawner_OnInitBehaviors) == 0x000008, "Wrong size on MaiSingleSpawner_OnInitBehaviors");
static_assert(offsetof(MaiSingleSpawner_OnInitBehaviors, Controller) == 0x000000, "Member 'MaiSingleSpawner_OnInitBehaviors::Controller' has a wrong offset!");

// Function Mai.MaiSingleSpawner.SetActorClass
// 0x0008 (0x0008 - 0x0000)
struct MaiSingleSpawner_SetActorClass final
{
public:
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSingleSpawner_SetActorClass) == 0x000008, "Wrong alignment on MaiSingleSpawner_SetActorClass");
static_assert(sizeof(MaiSingleSpawner_SetActorClass) == 0x000008, "Wrong size on MaiSingleSpawner_SetActorClass");
static_assert(offsetof(MaiSingleSpawner_SetActorClass, ActorClass) == 0x000000, "Member 'MaiSingleSpawner_SetActorClass::ActorClass' has a wrong offset!");

// Function Mai.MaiSingleSpawner.SetAIControllerClass
// 0x0008 (0x0008 - 0x0000)
struct MaiSingleSpawner_SetAIControllerClass final
{
public:
	TSubclassOf<class AAIController>              AiClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSingleSpawner_SetAIControllerClass) == 0x000008, "Wrong alignment on MaiSingleSpawner_SetAIControllerClass");
static_assert(sizeof(MaiSingleSpawner_SetAIControllerClass) == 0x000008, "Wrong size on MaiSingleSpawner_SetAIControllerClass");
static_assert(offsetof(MaiSingleSpawner_SetAIControllerClass, AiClass) == 0x000000, "Member 'MaiSingleSpawner_SetAIControllerClass::AiClass' has a wrong offset!");

// Function Mai.MaiSingleSpawner.SpawnUnique
// 0x0008 (0x0008 - 0x0000)
struct MaiSingleSpawner_SpawnUnique final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSingleSpawner_SpawnUnique) == 0x000008, "Wrong alignment on MaiSingleSpawner_SpawnUnique");
static_assert(sizeof(MaiSingleSpawner_SpawnUnique) == 0x000008, "Wrong size on MaiSingleSpawner_SpawnUnique");
static_assert(offsetof(MaiSingleSpawner_SpawnUnique, ReturnValue) == 0x000000, "Member 'MaiSingleSpawner_SpawnUnique::ReturnValue' has a wrong offset!");

// Function Mai.MaiSingleSpawner.GetSpawnedActor
// 0x0008 (0x0008 - 0x0000)
struct MaiSingleSpawner_GetSpawnedActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSingleSpawner_GetSpawnedActor) == 0x000008, "Wrong alignment on MaiSingleSpawner_GetSpawnedActor");
static_assert(sizeof(MaiSingleSpawner_GetSpawnedActor) == 0x000008, "Wrong size on MaiSingleSpawner_GetSpawnedActor");
static_assert(offsetof(MaiSingleSpawner_GetSpawnedActor, ReturnValue) == 0x000000, "Member 'MaiSingleSpawner_GetSpawnedActor::ReturnValue' has a wrong offset!");

// Function Mai.MaiMultiSpawner.ChangeInfoWeight
// 0x0008 (0x0008 - 0x0000)
struct MaiMultiSpawner_ChangeInfoWeight final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Weight;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiMultiSpawner_ChangeInfoWeight) == 0x000004, "Wrong alignment on MaiMultiSpawner_ChangeInfoWeight");
static_assert(sizeof(MaiMultiSpawner_ChangeInfoWeight) == 0x000008, "Wrong size on MaiMultiSpawner_ChangeInfoWeight");
static_assert(offsetof(MaiMultiSpawner_ChangeInfoWeight, Index_0) == 0x000000, "Member 'MaiMultiSpawner_ChangeInfoWeight::Index_0' has a wrong offset!");
static_assert(offsetof(MaiMultiSpawner_ChangeInfoWeight, Weight) == 0x000004, "Member 'MaiMultiSpawner_ChangeInfoWeight::Weight' has a wrong offset!");

// Function Mai.MaiMultiSpawner.StartWaveSpawn
// 0x000C (0x000C - 0x0000)
struct MaiMultiSpawner_StartWaveSpawn final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDelay;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDelay;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiMultiSpawner_StartWaveSpawn) == 0x000004, "Wrong alignment on MaiMultiSpawner_StartWaveSpawn");
static_assert(sizeof(MaiMultiSpawner_StartWaveSpawn) == 0x00000C, "Wrong size on MaiMultiSpawner_StartWaveSpawn");
static_assert(offsetof(MaiMultiSpawner_StartWaveSpawn, Count) == 0x000000, "Member 'MaiMultiSpawner_StartWaveSpawn::Count' has a wrong offset!");
static_assert(offsetof(MaiMultiSpawner_StartWaveSpawn, MinDelay) == 0x000004, "Member 'MaiMultiSpawner_StartWaveSpawn::MinDelay' has a wrong offset!");
static_assert(offsetof(MaiMultiSpawner_StartWaveSpawn, MaxDelay) == 0x000008, "Member 'MaiMultiSpawner_StartWaveSpawn::MaxDelay' has a wrong offset!");

// Function Mai.MaiMultiSpawner.GetSpawnedActors
// 0x0010 (0x0010 - 0x0000)
struct MaiMultiSpawner_GetSpawnedActors final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiMultiSpawner_GetSpawnedActors) == 0x000008, "Wrong alignment on MaiMultiSpawner_GetSpawnedActors");
static_assert(sizeof(MaiMultiSpawner_GetSpawnedActors) == 0x000010, "Wrong size on MaiMultiSpawner_GetSpawnedActors");
static_assert(offsetof(MaiMultiSpawner_GetSpawnedActors, ReturnValue) == 0x000000, "Member 'MaiMultiSpawner_GetSpawnedActors::ReturnValue' has a wrong offset!");

// Function Mai.MaiSpawnerManager.getSpawnerIDByRef
// 0x0020 (0x0020 - 0x0000)
struct MaiSpawnerManager_GetSpawnerIDByRef final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMaiSpawner*                            Spawner;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMaiSpawnerID                          ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawnerManager_GetSpawnerIDByRef) == 0x000008, "Wrong alignment on MaiSpawnerManager_GetSpawnerIDByRef");
static_assert(sizeof(MaiSpawnerManager_GetSpawnerIDByRef) == 0x000020, "Wrong size on MaiSpawnerManager_GetSpawnerIDByRef");
static_assert(offsetof(MaiSpawnerManager_GetSpawnerIDByRef, WorldContext) == 0x000000, "Member 'MaiSpawnerManager_GetSpawnerIDByRef::WorldContext' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_GetSpawnerIDByRef, Spawner) == 0x000008, "Member 'MaiSpawnerManager_GetSpawnerIDByRef::Spawner' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_GetSpawnerIDByRef, ReturnValue) == 0x000010, "Member 'MaiSpawnerManager_GetSpawnerIDByRef::ReturnValue' has a wrong offset!");

// Function Mai.MaiSpawnerManager.getSpawnerIDBySoftRef
// 0x0048 (0x0048 - 0x0000)
struct MaiSpawnerManager_GetSpawnerIDBySoftRef final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AMaiSpawner>             SoftRef;                                           // 0x0008(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMaiSpawnerID                          ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawnerManager_GetSpawnerIDBySoftRef) == 0x000008, "Wrong alignment on MaiSpawnerManager_GetSpawnerIDBySoftRef");
static_assert(sizeof(MaiSpawnerManager_GetSpawnerIDBySoftRef) == 0x000048, "Wrong size on MaiSpawnerManager_GetSpawnerIDBySoftRef");
static_assert(offsetof(MaiSpawnerManager_GetSpawnerIDBySoftRef, WorldContext) == 0x000000, "Member 'MaiSpawnerManager_GetSpawnerIDBySoftRef::WorldContext' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_GetSpawnerIDBySoftRef, SoftRef) == 0x000008, "Member 'MaiSpawnerManager_GetSpawnerIDBySoftRef::SoftRef' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_GetSpawnerIDBySoftRef, ReturnValue) == 0x000038, "Member 'MaiSpawnerManager_GetSpawnerIDBySoftRef::ReturnValue' has a wrong offset!");

// Function Mai.MaiSpawnerManager.getSpawnerIDByTag
// 0x0020 (0x0020 - 0x0000)
struct MaiSpawnerManager_GetSpawnerIDByTag final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMaiSpawnerID                          ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawnerManager_GetSpawnerIDByTag) == 0x000008, "Wrong alignment on MaiSpawnerManager_GetSpawnerIDByTag");
static_assert(sizeof(MaiSpawnerManager_GetSpawnerIDByTag) == 0x000020, "Wrong size on MaiSpawnerManager_GetSpawnerIDByTag");
static_assert(offsetof(MaiSpawnerManager_GetSpawnerIDByTag, WorldContext) == 0x000000, "Member 'MaiSpawnerManager_GetSpawnerIDByTag::WorldContext' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_GetSpawnerIDByTag, Tag) == 0x000008, "Member 'MaiSpawnerManager_GetSpawnerIDByTag::Tag' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_GetSpawnerIDByTag, ReturnValue) == 0x000010, "Member 'MaiSpawnerManager_GetSpawnerIDByTag::ReturnValue' has a wrong offset!");

// Function Mai.MaiSpawnerManager.getSpawnerIDFromSpawned
// 0x0020 (0x0020 - 0x0000)
struct MaiSpawnerManager_GetSpawnerIDFromSpawned final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Spawned;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMaiSpawnerID                          ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawnerManager_GetSpawnerIDFromSpawned) == 0x000008, "Wrong alignment on MaiSpawnerManager_GetSpawnerIDFromSpawned");
static_assert(sizeof(MaiSpawnerManager_GetSpawnerIDFromSpawned) == 0x000020, "Wrong size on MaiSpawnerManager_GetSpawnerIDFromSpawned");
static_assert(offsetof(MaiSpawnerManager_GetSpawnerIDFromSpawned, WorldContext) == 0x000000, "Member 'MaiSpawnerManager_GetSpawnerIDFromSpawned::WorldContext' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_GetSpawnerIDFromSpawned, Spawned) == 0x000008, "Member 'MaiSpawnerManager_GetSpawnerIDFromSpawned::Spawned' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_GetSpawnerIDFromSpawned, ReturnValue) == 0x000010, "Member 'MaiSpawnerManager_GetSpawnerIDFromSpawned::ReturnValue' has a wrong offset!");

// Function Mai.MaiSpawnerManager.getSpawnerManager
// 0x0010 (0x0010 - 0x0000)
struct MaiSpawnerManager_GetSpawnerManager final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaiSpawnerManager*                     ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawnerManager_GetSpawnerManager) == 0x000008, "Wrong alignment on MaiSpawnerManager_GetSpawnerManager");
static_assert(sizeof(MaiSpawnerManager_GetSpawnerManager) == 0x000010, "Wrong size on MaiSpawnerManager_GetSpawnerManager");
static_assert(offsetof(MaiSpawnerManager_GetSpawnerManager, WorldContext) == 0x000000, "Member 'MaiSpawnerManager_GetSpawnerManager::WorldContext' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_GetSpawnerManager, ReturnValue) == 0x000008, "Member 'MaiSpawnerManager_GetSpawnerManager::ReturnValue' has a wrong offset!");

// Function Mai.MaiSpawnerManager.AISpawnSingle
// 0x0010 (0x0010 - 0x0000)
struct MaiSpawnerManager_AISpawnSingle final
{
public:
	class FName                                   SpawnerTag;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawnerManager_AISpawnSingle) == 0x000008, "Wrong alignment on MaiSpawnerManager_AISpawnSingle");
static_assert(sizeof(MaiSpawnerManager_AISpawnSingle) == 0x000010, "Wrong size on MaiSpawnerManager_AISpawnSingle");
static_assert(offsetof(MaiSpawnerManager_AISpawnSingle, SpawnerTag) == 0x000000, "Member 'MaiSpawnerManager_AISpawnSingle::SpawnerTag' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_AISpawnSingle, ReturnValue) == 0x000008, "Member 'MaiSpawnerManager_AISpawnSingle::ReturnValue' has a wrong offset!");

// Function Mai.MaiSpawnerManager.DesiredDespawnActor
// 0x0008 (0x0008 - 0x0000)
struct MaiSpawnerManager_DesiredDespawnActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawnerManager_DesiredDespawnActor) == 0x000008, "Wrong alignment on MaiSpawnerManager_DesiredDespawnActor");
static_assert(sizeof(MaiSpawnerManager_DesiredDespawnActor) == 0x000008, "Wrong size on MaiSpawnerManager_DesiredDespawnActor");
static_assert(offsetof(MaiSpawnerManager_DesiredDespawnActor, Actor) == 0x000000, "Member 'MaiSpawnerManager_DesiredDespawnActor::Actor' has a wrong offset!");

// Function Mai.MaiSpawnerManager.DespawnActor
// 0x0010 (0x0010 - 0x0000)
struct MaiSpawnerManager_DespawnActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableSpawner;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceDestroy;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForgetIt;                                          // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiSpawnerManager_DespawnActor) == 0x000008, "Wrong alignment on MaiSpawnerManager_DespawnActor");
static_assert(sizeof(MaiSpawnerManager_DespawnActor) == 0x000010, "Wrong size on MaiSpawnerManager_DespawnActor");
static_assert(offsetof(MaiSpawnerManager_DespawnActor, Actor) == 0x000000, "Member 'MaiSpawnerManager_DespawnActor::Actor' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_DespawnActor, DisableSpawner) == 0x000008, "Member 'MaiSpawnerManager_DespawnActor::DisableSpawner' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_DespawnActor, ForceDestroy) == 0x000009, "Member 'MaiSpawnerManager_DespawnActor::ForceDestroy' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_DespawnActor, ForgetIt) == 0x00000A, "Member 'MaiSpawnerManager_DespawnActor::ForgetIt' has a wrong offset!");

// Function Mai.MaiSpawnerManager.DespawnByTag
// 0x0008 (0x0008 - 0x0000)
struct MaiSpawnerManager_DespawnByTag final
{
public:
	class FName                                   SpawnerTag;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawnerManager_DespawnByTag) == 0x000004, "Wrong alignment on MaiSpawnerManager_DespawnByTag");
static_assert(sizeof(MaiSpawnerManager_DespawnByTag) == 0x000008, "Wrong size on MaiSpawnerManager_DespawnByTag");
static_assert(offsetof(MaiSpawnerManager_DespawnByTag, SpawnerTag) == 0x000000, "Member 'MaiSpawnerManager_DespawnByTag::SpawnerTag' has a wrong offset!");

// Function Mai.MaiSpawnerManager.DestroyController
// 0x0010 (0x0010 - 0x0000)
struct MaiSpawnerManager_DestroyController final
{
public:
	class APawn*                                  Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableSpawner;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiSpawnerManager_DestroyController) == 0x000008, "Wrong alignment on MaiSpawnerManager_DestroyController");
static_assert(sizeof(MaiSpawnerManager_DestroyController) == 0x000010, "Wrong size on MaiSpawnerManager_DestroyController");
static_assert(offsetof(MaiSpawnerManager_DestroyController, Actor) == 0x000000, "Member 'MaiSpawnerManager_DestroyController::Actor' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_DestroyController, DisableSpawner) == 0x000008, "Member 'MaiSpawnerManager_DestroyController::DisableSpawner' has a wrong offset!");

// Function Mai.MaiSpawnerManager.SetWaveSpawn
// 0x0014 (0x0014 - 0x0000)
struct MaiSpawnerManager_SetWaveSpawn final
{
public:
	class FName                                   SpawnerTag;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDelay;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDelay;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawnerManager_SetWaveSpawn) == 0x000004, "Wrong alignment on MaiSpawnerManager_SetWaveSpawn");
static_assert(sizeof(MaiSpawnerManager_SetWaveSpawn) == 0x000014, "Wrong size on MaiSpawnerManager_SetWaveSpawn");
static_assert(offsetof(MaiSpawnerManager_SetWaveSpawn, SpawnerTag) == 0x000000, "Member 'MaiSpawnerManager_SetWaveSpawn::SpawnerTag' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_SetWaveSpawn, Count) == 0x000008, "Member 'MaiSpawnerManager_SetWaveSpawn::Count' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_SetWaveSpawn, MinDelay) == 0x00000C, "Member 'MaiSpawnerManager_SetWaveSpawn::MinDelay' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_SetWaveSpawn, MaxDelay) == 0x000010, "Member 'MaiSpawnerManager_SetWaveSpawn::MaxDelay' has a wrong offset!");

// Function Mai.MaiSpawnerManager.SP_AutoSpawnMode
// 0x0010 (0x0010 - 0x0000)
struct MaiSpawnerManager_SP_AutoSpawnMode final
{
public:
	struct FMaiSpawnerID                          SpawnerID;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawnerManager_SP_AutoSpawnMode) == 0x000004, "Wrong alignment on MaiSpawnerManager_SP_AutoSpawnMode");
static_assert(sizeof(MaiSpawnerManager_SP_AutoSpawnMode) == 0x000010, "Wrong size on MaiSpawnerManager_SP_AutoSpawnMode");
static_assert(offsetof(MaiSpawnerManager_SP_AutoSpawnMode, SpawnerID) == 0x000000, "Member 'MaiSpawnerManager_SP_AutoSpawnMode::SpawnerID' has a wrong offset!");

// Function Mai.MaiSpawnerManager.SP_Despawn
// 0x0014 (0x0014 - 0x0000)
struct MaiSpawnerManager_SP_Despawn final
{
public:
	struct FMaiSpawnerID                          SpawnerID;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClearActorEntry;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiSpawnerManager_SP_Despawn) == 0x000004, "Wrong alignment on MaiSpawnerManager_SP_Despawn");
static_assert(sizeof(MaiSpawnerManager_SP_Despawn) == 0x000014, "Wrong size on MaiSpawnerManager_SP_Despawn");
static_assert(offsetof(MaiSpawnerManager_SP_Despawn, SpawnerID) == 0x000000, "Member 'MaiSpawnerManager_SP_Despawn::SpawnerID' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_SP_Despawn, ClearActorEntry) == 0x000010, "Member 'MaiSpawnerManager_SP_Despawn::ClearActorEntry' has a wrong offset!");

// Function Mai.MaiSpawnerManager.SP_DespawnUnique
// 0x0008 (0x0008 - 0x0000)
struct MaiSpawnerManager_SP_DespawnUnique final
{
public:
	struct FGameplayTag                           ActorTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawnerManager_SP_DespawnUnique) == 0x000004, "Wrong alignment on MaiSpawnerManager_SP_DespawnUnique");
static_assert(sizeof(MaiSpawnerManager_SP_DespawnUnique) == 0x000008, "Wrong size on MaiSpawnerManager_SP_DespawnUnique");
static_assert(offsetof(MaiSpawnerManager_SP_DespawnUnique, ActorTag) == 0x000000, "Member 'MaiSpawnerManager_SP_DespawnUnique::ActorTag' has a wrong offset!");

// Function Mai.MaiSpawnerManager.SP_Disable
// 0x0010 (0x0010 - 0x0000)
struct MaiSpawnerManager_SP_Disable final
{
public:
	struct FMaiSpawnerID                          SpawnerID;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawnerManager_SP_Disable) == 0x000004, "Wrong alignment on MaiSpawnerManager_SP_Disable");
static_assert(sizeof(MaiSpawnerManager_SP_Disable) == 0x000010, "Wrong size on MaiSpawnerManager_SP_Disable");
static_assert(offsetof(MaiSpawnerManager_SP_Disable, SpawnerID) == 0x000000, "Member 'MaiSpawnerManager_SP_Disable::SpawnerID' has a wrong offset!");

// Function Mai.MaiSpawnerManager.SP_Enable
// 0x0010 (0x0010 - 0x0000)
struct MaiSpawnerManager_SP_Enable final
{
public:
	struct FMaiSpawnerID                          SpawnerID;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawnerManager_SP_Enable) == 0x000004, "Wrong alignment on MaiSpawnerManager_SP_Enable");
static_assert(sizeof(MaiSpawnerManager_SP_Enable) == 0x000010, "Wrong size on MaiSpawnerManager_SP_Enable");
static_assert(offsetof(MaiSpawnerManager_SP_Enable, SpawnerID) == 0x000000, "Member 'MaiSpawnerManager_SP_Enable::SpawnerID' has a wrong offset!");

// Function Mai.MaiSpawnerManager.SP_ManualSpawnMode
// 0x0010 (0x0010 - 0x0000)
struct MaiSpawnerManager_SP_ManualSpawnMode final
{
public:
	struct FMaiSpawnerID                          SpawnerID;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawnerManager_SP_ManualSpawnMode) == 0x000004, "Wrong alignment on MaiSpawnerManager_SP_ManualSpawnMode");
static_assert(sizeof(MaiSpawnerManager_SP_ManualSpawnMode) == 0x000010, "Wrong size on MaiSpawnerManager_SP_ManualSpawnMode");
static_assert(offsetof(MaiSpawnerManager_SP_ManualSpawnMode, SpawnerID) == 0x000000, "Member 'MaiSpawnerManager_SP_ManualSpawnMode::SpawnerID' has a wrong offset!");

// Function Mai.MaiSpawnerManager.SP_Reincarnate
// 0x0014 (0x0014 - 0x0000)
struct MaiSpawnerManager_SP_Reincarnate final
{
public:
	struct FMaiSpawnerID                          SpawnerID;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HealthPercent;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiSpawnerManager_SP_Reincarnate) == 0x000004, "Wrong alignment on MaiSpawnerManager_SP_Reincarnate");
static_assert(sizeof(MaiSpawnerManager_SP_Reincarnate) == 0x000014, "Wrong size on MaiSpawnerManager_SP_Reincarnate");
static_assert(offsetof(MaiSpawnerManager_SP_Reincarnate, SpawnerID) == 0x000000, "Member 'MaiSpawnerManager_SP_Reincarnate::SpawnerID' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_SP_Reincarnate, HealthPercent) == 0x000010, "Member 'MaiSpawnerManager_SP_Reincarnate::HealthPercent' has a wrong offset!");

// Function Mai.MaiSpawnerManager.SP_Spawn
// 0x0010 (0x0010 - 0x0000)
struct MaiSpawnerManager_SP_Spawn final
{
public:
	struct FMaiSpawnerID                          SpawnerID;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawnerManager_SP_Spawn) == 0x000004, "Wrong alignment on MaiSpawnerManager_SP_Spawn");
static_assert(sizeof(MaiSpawnerManager_SP_Spawn) == 0x000010, "Wrong size on MaiSpawnerManager_SP_Spawn");
static_assert(offsetof(MaiSpawnerManager_SP_Spawn, SpawnerID) == 0x000000, "Member 'MaiSpawnerManager_SP_Spawn::SpawnerID' has a wrong offset!");

// Function Mai.MaiSpawnerManager.SP_SpawnUnique
// 0x0020 (0x0020 - 0x0000)
struct MaiSpawnerManager_SP_SpawnUnique final
{
public:
	struct FGameplayTag                           ActorTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMaiSpawnerID                          SpawnerID;                                         // 0x0008(0x0010)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawnerManager_SP_SpawnUnique) == 0x000008, "Wrong alignment on MaiSpawnerManager_SP_SpawnUnique");
static_assert(sizeof(MaiSpawnerManager_SP_SpawnUnique) == 0x000020, "Wrong size on MaiSpawnerManager_SP_SpawnUnique");
static_assert(offsetof(MaiSpawnerManager_SP_SpawnUnique, ActorTag) == 0x000000, "Member 'MaiSpawnerManager_SP_SpawnUnique::ActorTag' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_SP_SpawnUnique, SpawnerID) == 0x000008, "Member 'MaiSpawnerManager_SP_SpawnUnique::SpawnerID' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_SP_SpawnUnique, ReturnValue) == 0x000018, "Member 'MaiSpawnerManager_SP_SpawnUnique::ReturnValue' has a wrong offset!");

// Function Mai.MaiSpawnerManager.SpawnAllByTag
// 0x0018 (0x0018 - 0x0000)
struct MaiSpawnerManager_SpawnAllByTag final
{
public:
	class FName                                   SpawnerTag;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         Actors;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawnerManager_SpawnAllByTag) == 0x000008, "Wrong alignment on MaiSpawnerManager_SpawnAllByTag");
static_assert(sizeof(MaiSpawnerManager_SpawnAllByTag) == 0x000018, "Wrong size on MaiSpawnerManager_SpawnAllByTag");
static_assert(offsetof(MaiSpawnerManager_SpawnAllByTag, SpawnerTag) == 0x000000, "Member 'MaiSpawnerManager_SpawnAllByTag::SpawnerTag' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_SpawnAllByTag, Actors) == 0x000008, "Member 'MaiSpawnerManager_SpawnAllByTag::Actors' has a wrong offset!");

// Function Mai.MaiSpawnerManager.SpawnByTag
// 0x0008 (0x0008 - 0x0000)
struct MaiSpawnerManager_SpawnByTag final
{
public:
	class FName                                   SpawnerTag;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawnerManager_SpawnByTag) == 0x000004, "Wrong alignment on MaiSpawnerManager_SpawnByTag");
static_assert(sizeof(MaiSpawnerManager_SpawnByTag) == 0x000008, "Wrong size on MaiSpawnerManager_SpawnByTag");
static_assert(offsetof(MaiSpawnerManager_SpawnByTag, SpawnerTag) == 0x000000, "Member 'MaiSpawnerManager_SpawnByTag::SpawnerTag' has a wrong offset!");

// Function Mai.MaiSpawnerManager.SpawnNearestByTag
// 0x0028 (0x0028 - 0x0000)
struct MaiSpawnerManager_SpawnNearestByTag final
{
public:
	class FName                                   SpawnerTag;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawnerManager_SpawnNearestByTag) == 0x000008, "Wrong alignment on MaiSpawnerManager_SpawnNearestByTag");
static_assert(sizeof(MaiSpawnerManager_SpawnNearestByTag) == 0x000028, "Wrong size on MaiSpawnerManager_SpawnNearestByTag");
static_assert(offsetof(MaiSpawnerManager_SpawnNearestByTag, SpawnerTag) == 0x000000, "Member 'MaiSpawnerManager_SpawnNearestByTag::SpawnerTag' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_SpawnNearestByTag, Location) == 0x000008, "Member 'MaiSpawnerManager_SpawnNearestByTag::Location' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_SpawnNearestByTag, ReturnValue) == 0x000020, "Member 'MaiSpawnerManager_SpawnNearestByTag::ReturnValue' has a wrong offset!");

// Function Mai.MaiSpawnerManager.StartWaveSpawn
// 0x0014 (0x0014 - 0x0000)
struct MaiSpawnerManager_StartWaveSpawn final
{
public:
	class FName                                   SpawnerTag;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDelay;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDelay;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawnerManager_StartWaveSpawn) == 0x000004, "Wrong alignment on MaiSpawnerManager_StartWaveSpawn");
static_assert(sizeof(MaiSpawnerManager_StartWaveSpawn) == 0x000014, "Wrong size on MaiSpawnerManager_StartWaveSpawn");
static_assert(offsetof(MaiSpawnerManager_StartWaveSpawn, SpawnerTag) == 0x000000, "Member 'MaiSpawnerManager_StartWaveSpawn::SpawnerTag' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_StartWaveSpawn, Count) == 0x000008, "Member 'MaiSpawnerManager_StartWaveSpawn::Count' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_StartWaveSpawn, MinDelay) == 0x00000C, "Member 'MaiSpawnerManager_StartWaveSpawn::MinDelay' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_StartWaveSpawn, MaxDelay) == 0x000010, "Member 'MaiSpawnerManager_StartWaveSpawn::MaxDelay' has a wrong offset!");

// Function Mai.MaiSpawnerManager.StopWaveSpawn
// 0x0008 (0x0008 - 0x0000)
struct MaiSpawnerManager_StopWaveSpawn final
{
public:
	class FName                                   SpawnerTag;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawnerManager_StopWaveSpawn) == 0x000004, "Wrong alignment on MaiSpawnerManager_StopWaveSpawn");
static_assert(sizeof(MaiSpawnerManager_StopWaveSpawn) == 0x000008, "Wrong size on MaiSpawnerManager_StopWaveSpawn");
static_assert(offsetof(MaiSpawnerManager_StopWaveSpawn, SpawnerTag) == 0x000000, "Member 'MaiSpawnerManager_StopWaveSpawn::SpawnerTag' has a wrong offset!");

// Function Mai.MaiSpawnerManager.FindOrigin
// 0x0010 (0x0010 - 0x0000)
struct MaiSpawnerManager_FindOrigin final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawnerManager_FindOrigin) == 0x000008, "Wrong alignment on MaiSpawnerManager_FindOrigin");
static_assert(sizeof(MaiSpawnerManager_FindOrigin) == 0x000010, "Wrong size on MaiSpawnerManager_FindOrigin");
static_assert(offsetof(MaiSpawnerManager_FindOrigin, Actor) == 0x000000, "Member 'MaiSpawnerManager_FindOrigin::Actor' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_FindOrigin, ReturnValue) == 0x000008, "Member 'MaiSpawnerManager_FindOrigin::ReturnValue' has a wrong offset!");

// Function Mai.MaiSpawnerManager.FindSpawner
// 0x0010 (0x0010 - 0x0000)
struct MaiSpawnerManager_FindSpawner final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMaiSpawner*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawnerManager_FindSpawner) == 0x000008, "Wrong alignment on MaiSpawnerManager_FindSpawner");
static_assert(sizeof(MaiSpawnerManager_FindSpawner) == 0x000010, "Wrong size on MaiSpawnerManager_FindSpawner");
static_assert(offsetof(MaiSpawnerManager_FindSpawner, Actor) == 0x000000, "Member 'MaiSpawnerManager_FindSpawner::Actor' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_FindSpawner, ReturnValue) == 0x000008, "Member 'MaiSpawnerManager_FindSpawner::ReturnValue' has a wrong offset!");

// Function Mai.MaiSpawnerManager.IsLevelLoaded
// 0x0010 (0x0010 - 0x0000)
struct MaiSpawnerManager_IsLevelLoaded final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiSpawnerManager_IsLevelLoaded) == 0x000008, "Wrong alignment on MaiSpawnerManager_IsLevelLoaded");
static_assert(sizeof(MaiSpawnerManager_IsLevelLoaded) == 0x000010, "Wrong size on MaiSpawnerManager_IsLevelLoaded");
static_assert(offsetof(MaiSpawnerManager_IsLevelLoaded, Actor) == 0x000000, "Member 'MaiSpawnerManager_IsLevelLoaded::Actor' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_IsLevelLoaded, ReturnValue) == 0x000008, "Member 'MaiSpawnerManager_IsLevelLoaded::ReturnValue' has a wrong offset!");

// Function Mai.MaiSpawnerManager.SP_GetSpawnedActor
// 0x0018 (0x0018 - 0x0000)
struct MaiSpawnerManager_SP_GetSpawnedActor final
{
public:
	struct FMaiSpawnerID                          SpawnerID;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawnerManager_SP_GetSpawnedActor) == 0x000008, "Wrong alignment on MaiSpawnerManager_SP_GetSpawnedActor");
static_assert(sizeof(MaiSpawnerManager_SP_GetSpawnedActor) == 0x000018, "Wrong size on MaiSpawnerManager_SP_GetSpawnedActor");
static_assert(offsetof(MaiSpawnerManager_SP_GetSpawnedActor, SpawnerID) == 0x000000, "Member 'MaiSpawnerManager_SP_GetSpawnedActor::SpawnerID' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_SP_GetSpawnedActor, ReturnValue) == 0x000010, "Member 'MaiSpawnerManager_SP_GetSpawnedActor::ReturnValue' has a wrong offset!");

// Function Mai.MaiSpawnerManager.SP_GetSpawner
// 0x0018 (0x0018 - 0x0000)
struct MaiSpawnerManager_SP_GetSpawner final
{
public:
	struct FMaiSpawnerID                          SpawnerID;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMaiSpawner*                            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSpawnerManager_SP_GetSpawner) == 0x000008, "Wrong alignment on MaiSpawnerManager_SP_GetSpawner");
static_assert(sizeof(MaiSpawnerManager_SP_GetSpawner) == 0x000018, "Wrong size on MaiSpawnerManager_SP_GetSpawner");
static_assert(offsetof(MaiSpawnerManager_SP_GetSpawner, SpawnerID) == 0x000000, "Member 'MaiSpawnerManager_SP_GetSpawner::SpawnerID' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_SP_GetSpawner, ReturnValue) == 0x000010, "Member 'MaiSpawnerManager_SP_GetSpawner::ReturnValue' has a wrong offset!");

// Function Mai.MaiSpawnerManager.SP_HasSpawnedActor
// 0x0014 (0x0014 - 0x0000)
struct MaiSpawnerManager_SP_HasSpawnedActor final
{
public:
	struct FMaiSpawnerID                          SpawnerID;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiSpawnerManager_SP_HasSpawnedActor) == 0x000004, "Wrong alignment on MaiSpawnerManager_SP_HasSpawnedActor");
static_assert(sizeof(MaiSpawnerManager_SP_HasSpawnedActor) == 0x000014, "Wrong size on MaiSpawnerManager_SP_HasSpawnedActor");
static_assert(offsetof(MaiSpawnerManager_SP_HasSpawnedActor, SpawnerID) == 0x000000, "Member 'MaiSpawnerManager_SP_HasSpawnedActor::SpawnerID' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_SP_HasSpawnedActor, ReturnValue) == 0x000010, "Member 'MaiSpawnerManager_SP_HasSpawnedActor::ReturnValue' has a wrong offset!");

// Function Mai.MaiSpawnerManager.SP_IsActive
// 0x0014 (0x0014 - 0x0000)
struct MaiSpawnerManager_SP_IsActive final
{
public:
	struct FMaiSpawnerID                          SpawnerID;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiSpawnerManager_SP_IsActive) == 0x000004, "Wrong alignment on MaiSpawnerManager_SP_IsActive");
static_assert(sizeof(MaiSpawnerManager_SP_IsActive) == 0x000014, "Wrong size on MaiSpawnerManager_SP_IsActive");
static_assert(offsetof(MaiSpawnerManager_SP_IsActive, SpawnerID) == 0x000000, "Member 'MaiSpawnerManager_SP_IsActive::SpawnerID' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_SP_IsActive, ReturnValue) == 0x000010, "Member 'MaiSpawnerManager_SP_IsActive::ReturnValue' has a wrong offset!");

// Function Mai.MaiSpawnerManager.SP_IsInAutoSpawnMode
// 0x0014 (0x0014 - 0x0000)
struct MaiSpawnerManager_SP_IsInAutoSpawnMode final
{
public:
	struct FMaiSpawnerID                          SpawnerID;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiSpawnerManager_SP_IsInAutoSpawnMode) == 0x000004, "Wrong alignment on MaiSpawnerManager_SP_IsInAutoSpawnMode");
static_assert(sizeof(MaiSpawnerManager_SP_IsInAutoSpawnMode) == 0x000014, "Wrong size on MaiSpawnerManager_SP_IsInAutoSpawnMode");
static_assert(offsetof(MaiSpawnerManager_SP_IsInAutoSpawnMode, SpawnerID) == 0x000000, "Member 'MaiSpawnerManager_SP_IsInAutoSpawnMode::SpawnerID' has a wrong offset!");
static_assert(offsetof(MaiSpawnerManager_SP_IsInAutoSpawnMode, ReturnValue) == 0x000010, "Member 'MaiSpawnerManager_SP_IsInAutoSpawnMode::ReturnValue' has a wrong offset!");

// Function Mai.MaiSplineActor.ProjectOnSpline
// 0x0030 (0x0030 - 0x0000)
struct MaiSplineActor_ProjectOnSpline final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSplineActor_ProjectOnSpline) == 0x000008, "Wrong alignment on MaiSplineActor_ProjectOnSpline");
static_assert(sizeof(MaiSplineActor_ProjectOnSpline) == 0x000030, "Wrong size on MaiSplineActor_ProjectOnSpline");
static_assert(offsetof(MaiSplineActor_ProjectOnSpline, Location) == 0x000000, "Member 'MaiSplineActor_ProjectOnSpline::Location' has a wrong offset!");
static_assert(offsetof(MaiSplineActor_ProjectOnSpline, ReturnValue) == 0x000018, "Member 'MaiSplineActor_ProjectOnSpline::ReturnValue' has a wrong offset!");

// Function Mai.MaiSplineFollower.spawnSplineToAP
// 0x0018 (0x0018 - 0x0000)
struct MaiSplineFollower_SpawnSplineToAP final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMaiActionPoint*                        Point;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMaiSplineActor*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSplineFollower_SpawnSplineToAP) == 0x000008, "Wrong alignment on MaiSplineFollower_SpawnSplineToAP");
static_assert(sizeof(MaiSplineFollower_SpawnSplineToAP) == 0x000018, "Wrong size on MaiSplineFollower_SpawnSplineToAP");
static_assert(offsetof(MaiSplineFollower_SpawnSplineToAP, Pawn) == 0x000000, "Member 'MaiSplineFollower_SpawnSplineToAP::Pawn' has a wrong offset!");
static_assert(offsetof(MaiSplineFollower_SpawnSplineToAP, Point) == 0x000008, "Member 'MaiSplineFollower_SpawnSplineToAP::Point' has a wrong offset!");
static_assert(offsetof(MaiSplineFollower_SpawnSplineToAP, ReturnValue) == 0x000010, "Member 'MaiSplineFollower_SpawnSplineToAP::ReturnValue' has a wrong offset!");

// Function Mai.MaiSplineFollower.MoveOnSpline
// 0x0004 (0x0004 - 0x0000)
struct MaiSplineFollower_MoveOnSpline final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSplineFollower_MoveOnSpline) == 0x000004, "Wrong alignment on MaiSplineFollower_MoveOnSpline");
static_assert(sizeof(MaiSplineFollower_MoveOnSpline) == 0x000004, "Wrong size on MaiSplineFollower_MoveOnSpline");
static_assert(offsetof(MaiSplineFollower_MoveOnSpline, DeltaTime) == 0x000000, "Member 'MaiSplineFollower_MoveOnSpline::DeltaTime' has a wrong offset!");

// Function Mai.MaiSplineFollower.RequestSplineMove
// 0x0008 (0x0008 - 0x0000)
struct MaiSplineFollower_RequestSplineMove final
{
public:
	class AMaiSplineActor*                        Spline;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSplineFollower_RequestSplineMove) == 0x000008, "Wrong alignment on MaiSplineFollower_RequestSplineMove");
static_assert(sizeof(MaiSplineFollower_RequestSplineMove) == 0x000008, "Wrong size on MaiSplineFollower_RequestSplineMove");
static_assert(offsetof(MaiSplineFollower_RequestSplineMove, Spline) == 0x000000, "Member 'MaiSplineFollower_RequestSplineMove::Spline' has a wrong offset!");

// Function Mai.MaiSplineFollower.SetSpline
// 0x0008 (0x0008 - 0x0000)
struct MaiSplineFollower_SetSpline final
{
public:
	class AMaiSplineActor*                        Spline;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSplineFollower_SetSpline) == 0x000008, "Wrong alignment on MaiSplineFollower_SetSpline");
static_assert(sizeof(MaiSplineFollower_SetSpline) == 0x000008, "Wrong size on MaiSplineFollower_SetSpline");
static_assert(offsetof(MaiSplineFollower_SetSpline, Spline) == 0x000000, "Member 'MaiSplineFollower_SetSpline::Spline' has a wrong offset!");

// Function Mai.MaiSplineFollower.IsMoving
// 0x0001 (0x0001 - 0x0000)
struct MaiSplineFollower_IsMoving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiSplineFollower_IsMoving) == 0x000001, "Wrong alignment on MaiSplineFollower_IsMoving");
static_assert(sizeof(MaiSplineFollower_IsMoving) == 0x000001, "Wrong size on MaiSplineFollower_IsMoving");
static_assert(offsetof(MaiSplineFollower_IsMoving, ReturnValue) == 0x000000, "Member 'MaiSplineFollower_IsMoving::ReturnValue' has a wrong offset!");

// Function Mai.MaiState.GetOwnerAI
// 0x0008 (0x0008 - 0x0000)
struct MaiState_GetOwnerAI final
{
public:
	class AAIController*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiState_GetOwnerAI) == 0x000008, "Wrong alignment on MaiState_GetOwnerAI");
static_assert(sizeof(MaiState_GetOwnerAI) == 0x000008, "Wrong size on MaiState_GetOwnerAI");
static_assert(offsetof(MaiState_GetOwnerAI, ReturnValue) == 0x000000, "Member 'MaiState_GetOwnerAI::ReturnValue' has a wrong offset!");

// Function Mai.MaiState.GetOwnerCH
// 0x0008 (0x0008 - 0x0000)
struct MaiState_GetOwnerCH final
{
public:
	class ACharacter*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiState_GetOwnerCH) == 0x000008, "Wrong alignment on MaiState_GetOwnerCH");
static_assert(sizeof(MaiState_GetOwnerCH) == 0x000008, "Wrong size on MaiState_GetOwnerCH");
static_assert(offsetof(MaiState_GetOwnerCH, ReturnValue) == 0x000000, "Member 'MaiState_GetOwnerCH::ReturnValue' has a wrong offset!");

// Function Mai.MaiSnapState.Config
// 0x0028 (0x0028 - 0x0000)
struct MaiSnapState_Config final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 FaceTo;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   EasingFunc;                                        // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiSnapState_Config) == 0x000008, "Wrong alignment on MaiSnapState_Config");
static_assert(sizeof(MaiSnapState_Config) == 0x000028, "Wrong size on MaiSnapState_Config");
static_assert(offsetof(MaiSnapState_Config, Location) == 0x000000, "Member 'MaiSnapState_Config::Location' has a wrong offset!");
static_assert(offsetof(MaiSnapState_Config, FaceTo) == 0x000018, "Member 'MaiSnapState_Config::FaceTo' has a wrong offset!");
static_assert(offsetof(MaiSnapState_Config, Timeout) == 0x000020, "Member 'MaiSnapState_Config::Timeout' has a wrong offset!");
static_assert(offsetof(MaiSnapState_Config, EasingFunc) == 0x000024, "Member 'MaiSnapState_Config::EasingFunc' has a wrong offset!");

// Function Mai.MaiSnapState.Config2
// 0x0038 (0x0038 - 0x0000)
struct MaiSnapState_Config2 final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FaceTo;                                            // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   EasingFunc;                                        // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiSnapState_Config2) == 0x000008, "Wrong alignment on MaiSnapState_Config2");
static_assert(sizeof(MaiSnapState_Config2) == 0x000038, "Wrong size on MaiSnapState_Config2");
static_assert(offsetof(MaiSnapState_Config2, Location) == 0x000000, "Member 'MaiSnapState_Config2::Location' has a wrong offset!");
static_assert(offsetof(MaiSnapState_Config2, FaceTo) == 0x000018, "Member 'MaiSnapState_Config2::FaceTo' has a wrong offset!");
static_assert(offsetof(MaiSnapState_Config2, Timeout) == 0x000030, "Member 'MaiSnapState_Config2::Timeout' has a wrong offset!");
static_assert(offsetof(MaiSnapState_Config2, EasingFunc) == 0x000034, "Member 'MaiSnapState_Config2::EasingFunc' has a wrong offset!");

// Function Mai.MaiBlowReactionState.OnBlowStartMSG
// 0x0018 (0x0018 - 0x0000)
struct MaiBlowReactionState_OnBlowStartMSG final
{
public:
	class UMaiMessage*                            Msg;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Attacker;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                DamageClass;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiBlowReactionState_OnBlowStartMSG) == 0x000008, "Wrong alignment on MaiBlowReactionState_OnBlowStartMSG");
static_assert(sizeof(MaiBlowReactionState_OnBlowStartMSG) == 0x000018, "Wrong size on MaiBlowReactionState_OnBlowStartMSG");
static_assert(offsetof(MaiBlowReactionState_OnBlowStartMSG, Msg) == 0x000000, "Member 'MaiBlowReactionState_OnBlowStartMSG::Msg' has a wrong offset!");
static_assert(offsetof(MaiBlowReactionState_OnBlowStartMSG, Attacker) == 0x000008, "Member 'MaiBlowReactionState_OnBlowStartMSG::Attacker' has a wrong offset!");
static_assert(offsetof(MaiBlowReactionState_OnBlowStartMSG, DamageClass) == 0x000010, "Member 'MaiBlowReactionState_OnBlowStartMSG::DamageClass' has a wrong offset!");

// Function Mai.MaiBlowReactionState.OnEnemyBlow
// 0x0010 (0x0010 - 0x0000)
struct MaiBlowReactionState_OnEnemyBlow final
{
public:
	class APawn*                                  Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                DamageClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiBlowReactionState_OnEnemyBlow) == 0x000008, "Wrong alignment on MaiBlowReactionState_OnEnemyBlow");
static_assert(sizeof(MaiBlowReactionState_OnEnemyBlow) == 0x000010, "Wrong size on MaiBlowReactionState_OnEnemyBlow");
static_assert(offsetof(MaiBlowReactionState_OnEnemyBlow, Enemy) == 0x000000, "Member 'MaiBlowReactionState_OnEnemyBlow::Enemy' has a wrong offset!");
static_assert(offsetof(MaiBlowReactionState_OnEnemyBlow, DamageClass) == 0x000008, "Member 'MaiBlowReactionState_OnEnemyBlow::DamageClass' has a wrong offset!");

// Function Mai.MaiBlowReactionState.OnGotHit
// 0x0010 (0x0010 - 0x0000)
struct MaiBlowReactionState_OnGotHit final
{
public:
	class APawn*                                  Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                DamageClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiBlowReactionState_OnGotHit) == 0x000008, "Wrong alignment on MaiBlowReactionState_OnGotHit");
static_assert(sizeof(MaiBlowReactionState_OnGotHit) == 0x000010, "Wrong size on MaiBlowReactionState_OnGotHit");
static_assert(offsetof(MaiBlowReactionState_OnGotHit, Enemy) == 0x000000, "Member 'MaiBlowReactionState_OnGotHit::Enemy' has a wrong offset!");
static_assert(offsetof(MaiBlowReactionState_OnGotHit, DamageClass) == 0x000008, "Member 'MaiBlowReactionState_OnGotHit::DamageClass' has a wrong offset!");

// Function Mai.MaiBlowReactionState.OverrideChanceArray
// 0x0010 (0x0010 - 0x0000)
struct MaiBlowReactionState_OverrideChanceArray final
{
public:
	TArray<uint8>                                 _Chances;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiBlowReactionState_OverrideChanceArray) == 0x000008, "Wrong alignment on MaiBlowReactionState_OverrideChanceArray");
static_assert(sizeof(MaiBlowReactionState_OverrideChanceArray) == 0x000010, "Wrong size on MaiBlowReactionState_OverrideChanceArray");
static_assert(offsetof(MaiBlowReactionState_OverrideChanceArray, _Chances) == 0x000000, "Member 'MaiBlowReactionState_OverrideChanceArray::_Chances' has a wrong offset!");

// Function Mai.MaiBlowReactionState.GetChance
// 0x0001 (0x0001 - 0x0000)
struct MaiBlowReactionState_GetChance final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiBlowReactionState_GetChance) == 0x000001, "Wrong alignment on MaiBlowReactionState_GetChance");
static_assert(sizeof(MaiBlowReactionState_GetChance) == 0x000001, "Wrong size on MaiBlowReactionState_GetChance");
static_assert(offsetof(MaiBlowReactionState_GetChance, ReturnValue) == 0x000000, "Member 'MaiBlowReactionState_GetChance::ReturnValue' has a wrong offset!");

// Function Mai.MaiWasPushedState.IsBlockedByOther
// 0x0001 (0x0001 - 0x0000)
struct MaiWasPushedState_IsBlockedByOther final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiWasPushedState_IsBlockedByOther) == 0x000001, "Wrong alignment on MaiWasPushedState_IsBlockedByOther");
static_assert(sizeof(MaiWasPushedState_IsBlockedByOther) == 0x000001, "Wrong size on MaiWasPushedState_IsBlockedByOther");
static_assert(offsetof(MaiWasPushedState_IsBlockedByOther, ReturnValue) == 0x000000, "Member 'MaiWasPushedState_IsBlockedByOther::ReturnValue' has a wrong offset!");

// Function Mai.MaiTickLODComponent.SetComponentMaxInterval
// 0x0010 (0x0010 - 0x0000)
struct MaiTickLODComponent_SetComponentMaxInterval final
{
public:
	class UActorComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Interval;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiTickLODComponent_SetComponentMaxInterval) == 0x000008, "Wrong alignment on MaiTickLODComponent_SetComponentMaxInterval");
static_assert(sizeof(MaiTickLODComponent_SetComponentMaxInterval) == 0x000010, "Wrong size on MaiTickLODComponent_SetComponentMaxInterval");
static_assert(offsetof(MaiTickLODComponent_SetComponentMaxInterval, Component) == 0x000000, "Member 'MaiTickLODComponent_SetComponentMaxInterval::Component' has a wrong offset!");
static_assert(offsetof(MaiTickLODComponent_SetComponentMaxInterval, Interval) == 0x000008, "Member 'MaiTickLODComponent_SetComponentMaxInterval::Interval' has a wrong offset!");

// Function Mai.MaiMasterLODComponent.ForceLOD0
// 0x0001 (0x0001 - 0x0000)
struct MaiMasterLODComponent_ForceLOD0 final
{
public:
	bool                                          Force;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiMasterLODComponent_ForceLOD0) == 0x000001, "Wrong alignment on MaiMasterLODComponent_ForceLOD0");
static_assert(sizeof(MaiMasterLODComponent_ForceLOD0) == 0x000001, "Wrong size on MaiMasterLODComponent_ForceLOD0");
static_assert(offsetof(MaiMasterLODComponent_ForceLOD0, Force) == 0x000000, "Member 'MaiMasterLODComponent_ForceLOD0::Force' has a wrong offset!");

// Function Mai.MaiMasterLODComponent.OnControllerChanged
// 0x0018 (0x0018 - 0x0000)
struct MaiMasterLODComponent_OnControllerChanged final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            OldController;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            NewController;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiMasterLODComponent_OnControllerChanged) == 0x000008, "Wrong alignment on MaiMasterLODComponent_OnControllerChanged");
static_assert(sizeof(MaiMasterLODComponent_OnControllerChanged) == 0x000018, "Wrong size on MaiMasterLODComponent_OnControllerChanged");
static_assert(offsetof(MaiMasterLODComponent_OnControllerChanged, Pawn) == 0x000000, "Member 'MaiMasterLODComponent_OnControllerChanged::Pawn' has a wrong offset!");
static_assert(offsetof(MaiMasterLODComponent_OnControllerChanged, OldController) == 0x000008, "Member 'MaiMasterLODComponent_OnControllerChanged::OldController' has a wrong offset!");
static_assert(offsetof(MaiMasterLODComponent_OnControllerChanged, NewController) == 0x000010, "Member 'MaiMasterLODComponent_OnControllerChanged::NewController' has a wrong offset!");

// Function Mai.MaiWallFollowing.MoveTo
// 0x0020 (0x0020 - 0x0000)
struct MaiWallFollowing_MoveTo final
{
public:
	struct FVector                                GoalLocation;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiWallFollowing_MoveTo) == 0x000008, "Wrong alignment on MaiWallFollowing_MoveTo");
static_assert(sizeof(MaiWallFollowing_MoveTo) == 0x000020, "Wrong size on MaiWallFollowing_MoveTo");
static_assert(offsetof(MaiWallFollowing_MoveTo, GoalLocation) == 0x000000, "Member 'MaiWallFollowing_MoveTo::GoalLocation' has a wrong offset!");
static_assert(offsetof(MaiWallFollowing_MoveTo, ReturnValue) == 0x000018, "Member 'MaiWallFollowing_MoveTo::ReturnValue' has a wrong offset!");

// Function Mai.MaiWallFollowing.SnapToFloorMesh
// 0x0004 (0x0004 - 0x0000)
struct MaiWallFollowing_SnapToFloorMesh final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiWallFollowing_SnapToFloorMesh) == 0x000004, "Wrong alignment on MaiWallFollowing_SnapToFloorMesh");
static_assert(sizeof(MaiWallFollowing_SnapToFloorMesh) == 0x000004, "Wrong size on MaiWallFollowing_SnapToFloorMesh");
static_assert(offsetof(MaiWallFollowing_SnapToFloorMesh, DeltaTime) == 0x000000, "Member 'MaiWallFollowing_SnapToFloorMesh::DeltaTime' has a wrong offset!");

// Function Mai.MaiWallSystem.getWallSystem
// 0x0010 (0x0010 - 0x0000)
struct MaiWallSystem_GetWallSystem final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaiWallSystem*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaiWallSystem_GetWallSystem) == 0x000008, "Wrong alignment on MaiWallSystem_GetWallSystem");
static_assert(sizeof(MaiWallSystem_GetWallSystem) == 0x000010, "Wrong size on MaiWallSystem_GetWallSystem");
static_assert(offsetof(MaiWallSystem_GetWallSystem, WorldContext) == 0x000000, "Member 'MaiWallSystem_GetWallSystem::WorldContext' has a wrong offset!");
static_assert(offsetof(MaiWallSystem_GetWallSystem, ReturnValue) == 0x000008, "Member 'MaiWallSystem_GetWallSystem::ReturnValue' has a wrong offset!");

// Function Mai.MaiWallSystem.FindRandomPointOnWallMesh
// 0x0070 (0x0070 - 0x0000)
struct MaiWallSystem_FindRandomPointOnWallMesh final
{
public:
	struct FVector                                Outpoint;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Pos;                                               // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Up;                                                // 0x0038(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Extent;                                            // 0x0050(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiWallSystem_FindRandomPointOnWallMesh) == 0x000008, "Wrong alignment on MaiWallSystem_FindRandomPointOnWallMesh");
static_assert(sizeof(MaiWallSystem_FindRandomPointOnWallMesh) == 0x000070, "Wrong size on MaiWallSystem_FindRandomPointOnWallMesh");
static_assert(offsetof(MaiWallSystem_FindRandomPointOnWallMesh, Outpoint) == 0x000000, "Member 'MaiWallSystem_FindRandomPointOnWallMesh::Outpoint' has a wrong offset!");
static_assert(offsetof(MaiWallSystem_FindRandomPointOnWallMesh, Radius) == 0x000018, "Member 'MaiWallSystem_FindRandomPointOnWallMesh::Radius' has a wrong offset!");
static_assert(offsetof(MaiWallSystem_FindRandomPointOnWallMesh, Pos) == 0x000020, "Member 'MaiWallSystem_FindRandomPointOnWallMesh::Pos' has a wrong offset!");
static_assert(offsetof(MaiWallSystem_FindRandomPointOnWallMesh, Up) == 0x000038, "Member 'MaiWallSystem_FindRandomPointOnWallMesh::Up' has a wrong offset!");
static_assert(offsetof(MaiWallSystem_FindRandomPointOnWallMesh, Extent) == 0x000050, "Member 'MaiWallSystem_FindRandomPointOnWallMesh::Extent' has a wrong offset!");
static_assert(offsetof(MaiWallSystem_FindRandomPointOnWallMesh, ReturnValue) == 0x000068, "Member 'MaiWallSystem_FindRandomPointOnWallMesh::ReturnValue' has a wrong offset!");

// Function Mai.MaiWallSystem.FindReachablePointOnWallMesh
// 0x0058 (0x0058 - 0x0000)
struct MaiWallSystem_FindReachablePointOnWallMesh final
{
public:
	struct FVector                                Outpoint;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Pos;                                               // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Up;                                                // 0x0038(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiWallSystem_FindReachablePointOnWallMesh) == 0x000008, "Wrong alignment on MaiWallSystem_FindReachablePointOnWallMesh");
static_assert(sizeof(MaiWallSystem_FindReachablePointOnWallMesh) == 0x000058, "Wrong size on MaiWallSystem_FindReachablePointOnWallMesh");
static_assert(offsetof(MaiWallSystem_FindReachablePointOnWallMesh, Outpoint) == 0x000000, "Member 'MaiWallSystem_FindReachablePointOnWallMesh::Outpoint' has a wrong offset!");
static_assert(offsetof(MaiWallSystem_FindReachablePointOnWallMesh, Radius) == 0x000018, "Member 'MaiWallSystem_FindReachablePointOnWallMesh::Radius' has a wrong offset!");
static_assert(offsetof(MaiWallSystem_FindReachablePointOnWallMesh, Pos) == 0x000020, "Member 'MaiWallSystem_FindReachablePointOnWallMesh::Pos' has a wrong offset!");
static_assert(offsetof(MaiWallSystem_FindReachablePointOnWallMesh, Up) == 0x000038, "Member 'MaiWallSystem_FindReachablePointOnWallMesh::Up' has a wrong offset!");
static_assert(offsetof(MaiWallSystem_FindReachablePointOnWallMesh, ReturnValue) == 0x000050, "Member 'MaiWallSystem_FindReachablePointOnWallMesh::ReturnValue' has a wrong offset!");

// Function Mai.MaiWallSystem.IsOnWallMesh
// 0x0050 (0x0050 - 0x0000)
struct MaiWallSystem_IsOnWallMesh final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Up;                                                // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Extent;                                            // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiWallSystem_IsOnWallMesh) == 0x000008, "Wrong alignment on MaiWallSystem_IsOnWallMesh");
static_assert(sizeof(MaiWallSystem_IsOnWallMesh) == 0x000050, "Wrong size on MaiWallSystem_IsOnWallMesh");
static_assert(offsetof(MaiWallSystem_IsOnWallMesh, Pos) == 0x000000, "Member 'MaiWallSystem_IsOnWallMesh::Pos' has a wrong offset!");
static_assert(offsetof(MaiWallSystem_IsOnWallMesh, Up) == 0x000018, "Member 'MaiWallSystem_IsOnWallMesh::Up' has a wrong offset!");
static_assert(offsetof(MaiWallSystem_IsOnWallMesh, Extent) == 0x000030, "Member 'MaiWallSystem_IsOnWallMesh::Extent' has a wrong offset!");
static_assert(offsetof(MaiWallSystem_IsOnWallMesh, ReturnValue) == 0x000048, "Member 'MaiWallSystem_IsOnWallMesh::ReturnValue' has a wrong offset!");

// Function Mai.MaiWallSystem.ProjectPointOnWallMesh
// 0x0080 (0x0080 - 0x0000)
struct MaiWallSystem_ProjectPointOnWallMesh final
{
public:
	struct FVector                                Outpoint;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Pos;                                               // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Up;                                                // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Extent;                                            // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0060(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiWallSystem_ProjectPointOnWallMesh) == 0x000008, "Wrong alignment on MaiWallSystem_ProjectPointOnWallMesh");
static_assert(sizeof(MaiWallSystem_ProjectPointOnWallMesh) == 0x000080, "Wrong size on MaiWallSystem_ProjectPointOnWallMesh");
static_assert(offsetof(MaiWallSystem_ProjectPointOnWallMesh, Outpoint) == 0x000000, "Member 'MaiWallSystem_ProjectPointOnWallMesh::Outpoint' has a wrong offset!");
static_assert(offsetof(MaiWallSystem_ProjectPointOnWallMesh, Pos) == 0x000018, "Member 'MaiWallSystem_ProjectPointOnWallMesh::Pos' has a wrong offset!");
static_assert(offsetof(MaiWallSystem_ProjectPointOnWallMesh, Up) == 0x000030, "Member 'MaiWallSystem_ProjectPointOnWallMesh::Up' has a wrong offset!");
static_assert(offsetof(MaiWallSystem_ProjectPointOnWallMesh, Extent) == 0x000048, "Member 'MaiWallSystem_ProjectPointOnWallMesh::Extent' has a wrong offset!");
static_assert(offsetof(MaiWallSystem_ProjectPointOnWallMesh, Offset) == 0x000060, "Member 'MaiWallSystem_ProjectPointOnWallMesh::Offset' has a wrong offset!");
static_assert(offsetof(MaiWallSystem_ProjectPointOnWallMesh, ReturnValue) == 0x000078, "Member 'MaiWallSystem_ProjectPointOnWallMesh::ReturnValue' has a wrong offset!");

// Function Mai.MaiWallSystem.RaycastOnWallMesh
// 0x0080 (0x0080 - 0x0000)
struct MaiWallSystem_RaycastOnWallMesh final
{
public:
	struct FVector                                HitPoint;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Destination;                                       // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartUp;                                           // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DestUp;                                            // 0x0060(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaiWallSystem_RaycastOnWallMesh) == 0x000008, "Wrong alignment on MaiWallSystem_RaycastOnWallMesh");
static_assert(sizeof(MaiWallSystem_RaycastOnWallMesh) == 0x000080, "Wrong size on MaiWallSystem_RaycastOnWallMesh");
static_assert(offsetof(MaiWallSystem_RaycastOnWallMesh, HitPoint) == 0x000000, "Member 'MaiWallSystem_RaycastOnWallMesh::HitPoint' has a wrong offset!");
static_assert(offsetof(MaiWallSystem_RaycastOnWallMesh, Start) == 0x000018, "Member 'MaiWallSystem_RaycastOnWallMesh::Start' has a wrong offset!");
static_assert(offsetof(MaiWallSystem_RaycastOnWallMesh, Destination) == 0x000030, "Member 'MaiWallSystem_RaycastOnWallMesh::Destination' has a wrong offset!");
static_assert(offsetof(MaiWallSystem_RaycastOnWallMesh, StartUp) == 0x000048, "Member 'MaiWallSystem_RaycastOnWallMesh::StartUp' has a wrong offset!");
static_assert(offsetof(MaiWallSystem_RaycastOnWallMesh, DestUp) == 0x000060, "Member 'MaiWallSystem_RaycastOnWallMesh::DestUp' has a wrong offset!");
static_assert(offsetof(MaiWallSystem_RaycastOnWallMesh, ReturnValue) == 0x000078, "Member 'MaiWallSystem_RaycastOnWallMesh::ReturnValue' has a wrong offset!");

}

