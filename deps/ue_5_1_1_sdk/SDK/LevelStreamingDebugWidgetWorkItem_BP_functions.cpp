#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LevelStreamingDebugWidgetWorkItem_BP

#include "Basic.hpp"

#include "LevelStreamingDebugWidgetWorkItem_BP_classes.hpp"
#include "LevelStreamingDebugWidgetWorkItem_BP_parameters.hpp"


namespace SDK
{

// Function LevelStreamingDebugWidgetWorkItem_BP.LevelStreamingDebugWidgetWorkItem_BP_C.Clear
// (Public, BlueprintCallable, BlueprintEvent)

void ULevelStreamingDebugWidgetWorkItem_BP_C::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelStreamingDebugWidgetWorkItem_BP_C", "Clear");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LevelStreamingDebugWidgetWorkItem_BP.LevelStreamingDebugWidgetWorkItem_BP_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void ULevelStreamingDebugWidgetWorkItem_BP_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelStreamingDebugWidgetWorkItem_BP_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LevelStreamingDebugWidgetWorkItem_BP.LevelStreamingDebugWidgetWorkItem_BP_C.ExecuteUbergraph_LevelStreamingDebugWidgetWorkItem_BP
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULevelStreamingDebugWidgetWorkItem_BP_C::ExecuteUbergraph_LevelStreamingDebugWidgetWorkItem_BP(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelStreamingDebugWidgetWorkItem_BP_C", "ExecuteUbergraph_LevelStreamingDebugWidgetWorkItem_BP");

	Params::LevelStreamingDebugWidgetWorkItem_BP_C_ExecuteUbergraph_LevelStreamingDebugWidgetWorkItem_BP Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LevelStreamingDebugWidgetWorkItem_BP.LevelStreamingDebugWidgetWorkItem_BP_C.GetTimeText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm)

class FText ULevelStreamingDebugWidgetWorkItem_BP_C::GetTimeText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelStreamingDebugWidgetWorkItem_BP_C", "GetTimeText");

	Params::LevelStreamingDebugWidgetWorkItem_BP_C_GetTimeText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LevelStreamingDebugWidgetWorkItem_BP.LevelStreamingDebugWidgetWorkItem_BP_C.GetWorkText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm)

class FText ULevelStreamingDebugWidgetWorkItem_BP_C::GetWorkText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelStreamingDebugWidgetWorkItem_BP_C", "GetWorkText");

	Params::LevelStreamingDebugWidgetWorkItem_BP_C_GetWorkText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LevelStreamingDebugWidgetWorkItem_BP.LevelStreamingDebugWidgetWorkItem_BP_C.SetNewWorkItem
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStreamableLevelDebugWorkItem    NewWorkItem                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void ULevelStreamingDebugWidgetWorkItem_BP_C::SetNewWorkItem(const struct FStreamableLevelDebugWorkItem& NewWorkItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelStreamingDebugWidgetWorkItem_BP_C", "SetNewWorkItem");

	Params::LevelStreamingDebugWidgetWorkItem_BP_C_SetNewWorkItem Parms{};

	Parms.NewWorkItem = std::move(NewWorkItem);

	UObject::ProcessEvent(Func, &Parms);
}

}

