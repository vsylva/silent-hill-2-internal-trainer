#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameBase_structs.hpp"


namespace SDK::Params
{

// DelegateFunction GameBase.BGameModeBase.GameModePlayerSettingsChanged__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BGameModeBase_GameModePlayerSettingsChanged__DelegateSignature final
{
public:
	class UPlayerProfile*                         Settings;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BGameModeBase_GameModePlayerSettingsChanged__DelegateSignature) == 0x000008, "Wrong alignment on BGameModeBase_GameModePlayerSettingsChanged__DelegateSignature");
static_assert(sizeof(BGameModeBase_GameModePlayerSettingsChanged__DelegateSignature) == 0x000008, "Wrong size on BGameModeBase_GameModePlayerSettingsChanged__DelegateSignature");
static_assert(offsetof(BGameModeBase_GameModePlayerSettingsChanged__DelegateSignature, Settings) == 0x000000, "Member 'BGameModeBase_GameModePlayerSettingsChanged__DelegateSignature::Settings' has a wrong offset!");

// Function GameBase.BGameInstance.GetPlayerProfile
// 0x0008 (0x0008 - 0x0000)
struct BGameInstance_GetPlayerProfile final
{
public:
	class UPlayerProfile*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BGameInstance_GetPlayerProfile) == 0x000008, "Wrong alignment on BGameInstance_GetPlayerProfile");
static_assert(sizeof(BGameInstance_GetPlayerProfile) == 0x000008, "Wrong size on BGameInstance_GetPlayerProfile");
static_assert(offsetof(BGameInstance_GetPlayerProfile, ReturnValue) == 0x000000, "Member 'BGameInstance_GetPlayerProfile::ReturnValue' has a wrong offset!");

// Function GameBase.BGameInstance.GetRebindableInput
// 0x0008 (0x0008 - 0x0000)
struct BGameInstance_GetRebindableInput final
{
public:
	class URebindableInput*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BGameInstance_GetRebindableInput) == 0x000008, "Wrong alignment on BGameInstance_GetRebindableInput");
static_assert(sizeof(BGameInstance_GetRebindableInput) == 0x000008, "Wrong size on BGameInstance_GetRebindableInput");
static_assert(offsetof(BGameInstance_GetRebindableInput, ReturnValue) == 0x000000, "Member 'BGameInstance_GetRebindableInput::ReturnValue' has a wrong offset!");

// Function GameBase.BGameInstance.ReloadGame
// 0x0030 (0x0030 - 0x0000)
struct BGameInstance_ReloadGame final
{
public:
	bool                                          bSaveOnDisk;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Title;                                             // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GrabScreenShot;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMovieConfig*                           Movie;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnskipableLen;                                     // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BGameInstance_ReloadGame) == 0x000008, "Wrong alignment on BGameInstance_ReloadGame");
static_assert(sizeof(BGameInstance_ReloadGame) == 0x000030, "Wrong size on BGameInstance_ReloadGame");
static_assert(offsetof(BGameInstance_ReloadGame, bSaveOnDisk) == 0x000000, "Member 'BGameInstance_ReloadGame::bSaveOnDisk' has a wrong offset!");
static_assert(offsetof(BGameInstance_ReloadGame, Title) == 0x000008, "Member 'BGameInstance_ReloadGame::Title' has a wrong offset!");
static_assert(offsetof(BGameInstance_ReloadGame, GrabScreenShot) == 0x000018, "Member 'BGameInstance_ReloadGame::GrabScreenShot' has a wrong offset!");
static_assert(offsetof(BGameInstance_ReloadGame, Movie) == 0x000020, "Member 'BGameInstance_ReloadGame::Movie' has a wrong offset!");
static_assert(offsetof(BGameInstance_ReloadGame, UnskipableLen) == 0x000028, "Member 'BGameInstance_ReloadGame::UnskipableLen' has a wrong offset!");
static_assert(offsetof(BGameInstance_ReloadGame, ReturnValue) == 0x00002C, "Member 'BGameInstance_ReloadGame::ReturnValue' has a wrong offset!");

// Function GameBase.BGameInstance.SetLastScreenshotTexture
// 0x0010 (0x0010 - 0x0000)
struct BGameInstance_SetLastScreenshotTexture final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PrepareLoadingScreen;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BGameInstance_SetLastScreenshotTexture) == 0x000008, "Wrong alignment on BGameInstance_SetLastScreenshotTexture");
static_assert(sizeof(BGameInstance_SetLastScreenshotTexture) == 0x000010, "Wrong size on BGameInstance_SetLastScreenshotTexture");
static_assert(offsetof(BGameInstance_SetLastScreenshotTexture, Texture) == 0x000000, "Member 'BGameInstance_SetLastScreenshotTexture::Texture' has a wrong offset!");
static_assert(offsetof(BGameInstance_SetLastScreenshotTexture, PrepareLoadingScreen) == 0x000008, "Member 'BGameInstance_SetLastScreenshotTexture::PrepareLoadingScreen' has a wrong offset!");

// Function GameBase.BGameInstance.GetLastScreenshotTexture
// 0x0008 (0x0008 - 0x0000)
struct BGameInstance_GetLastScreenshotTexture final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BGameInstance_GetLastScreenshotTexture) == 0x000008, "Wrong alignment on BGameInstance_GetLastScreenshotTexture");
static_assert(sizeof(BGameInstance_GetLastScreenshotTexture) == 0x000008, "Wrong size on BGameInstance_GetLastScreenshotTexture");
static_assert(offsetof(BGameInstance_GetLastScreenshotTexture, ReturnValue) == 0x000000, "Member 'BGameInstance_GetLastScreenshotTexture::ReturnValue' has a wrong offset!");

// Function GameBase.BGameInstance.IsGameDeactivated
// 0x0001 (0x0001 - 0x0000)
struct BGameInstance_IsGameDeactivated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BGameInstance_IsGameDeactivated) == 0x000001, "Wrong alignment on BGameInstance_IsGameDeactivated");
static_assert(sizeof(BGameInstance_IsGameDeactivated) == 0x000001, "Wrong size on BGameInstance_IsGameDeactivated");
static_assert(offsetof(BGameInstance_IsGameDeactivated, ReturnValue) == 0x000000, "Member 'BGameInstance_IsGameDeactivated::ReturnValue' has a wrong offset!");

// Function GameBase.BGameInstance.IsGameSuspended
// 0x0001 (0x0001 - 0x0000)
struct BGameInstance_IsGameSuspended final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BGameInstance_IsGameSuspended) == 0x000001, "Wrong alignment on BGameInstance_IsGameSuspended");
static_assert(sizeof(BGameInstance_IsGameSuspended) == 0x000001, "Wrong size on BGameInstance_IsGameSuspended");
static_assert(offsetof(BGameInstance_IsGameSuspended, ReturnValue) == 0x000000, "Member 'BGameInstance_IsGameSuspended::ReturnValue' has a wrong offset!");

// Function GameBase.BGameInstance.IsKeyboardActive
// 0x0001 (0x0001 - 0x0000)
struct BGameInstance_IsKeyboardActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BGameInstance_IsKeyboardActive) == 0x000001, "Wrong alignment on BGameInstance_IsKeyboardActive");
static_assert(sizeof(BGameInstance_IsKeyboardActive) == 0x000001, "Wrong size on BGameInstance_IsKeyboardActive");
static_assert(offsetof(BGameInstance_IsKeyboardActive, ReturnValue) == 0x000000, "Member 'BGameInstance_IsKeyboardActive::ReturnValue' has a wrong offset!");

// Function GameBase.BGameInstance.IsMouseActive
// 0x0001 (0x0001 - 0x0000)
struct BGameInstance_IsMouseActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BGameInstance_IsMouseActive) == 0x000001, "Wrong alignment on BGameInstance_IsMouseActive");
static_assert(sizeof(BGameInstance_IsMouseActive) == 0x000001, "Wrong size on BGameInstance_IsMouseActive");
static_assert(offsetof(BGameInstance_IsMouseActive, ReturnValue) == 0x000000, "Member 'BGameInstance_IsMouseActive::ReturnValue' has a wrong offset!");

// Function GameBase.BGameInstance.IsPadActive
// 0x0001 (0x0001 - 0x0000)
struct BGameInstance_IsPadActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BGameInstance_IsPadActive) == 0x000001, "Wrong alignment on BGameInstance_IsPadActive");
static_assert(sizeof(BGameInstance_IsPadActive) == 0x000001, "Wrong size on BGameInstance_IsPadActive");
static_assert(offsetof(BGameInstance_IsPadActive, ReturnValue) == 0x000000, "Member 'BGameInstance_IsPadActive::ReturnValue' has a wrong offset!");

// Function GameBase.BGameInstance.IsPlayingFromMainMenu
// 0x0001 (0x0001 - 0x0000)
struct BGameInstance_IsPlayingFromMainMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BGameInstance_IsPlayingFromMainMenu) == 0x000001, "Wrong alignment on BGameInstance_IsPlayingFromMainMenu");
static_assert(sizeof(BGameInstance_IsPlayingFromMainMenu) == 0x000001, "Wrong size on BGameInstance_IsPlayingFromMainMenu");
static_assert(offsetof(BGameInstance_IsPlayingFromMainMenu, ReturnValue) == 0x000000, "Member 'BGameInstance_IsPlayingFromMainMenu::ReturnValue' has a wrong offset!");

// Function GameBase.BGameInstance.IsWorldTravelFinished
// 0x0001 (0x0001 - 0x0000)
struct BGameInstance_IsWorldTravelFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BGameInstance_IsWorldTravelFinished) == 0x000001, "Wrong alignment on BGameInstance_IsWorldTravelFinished");
static_assert(sizeof(BGameInstance_IsWorldTravelFinished) == 0x000001, "Wrong size on BGameInstance_IsWorldTravelFinished");
static_assert(offsetof(BGameInstance_IsWorldTravelFinished, ReturnValue) == 0x000000, "Member 'BGameInstance_IsWorldTravelFinished::ReturnValue' has a wrong offset!");

// Function GameBase.BGameInstance.WasMouseMoved
// 0x0001 (0x0001 - 0x0000)
struct BGameInstance_WasMouseMoved final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BGameInstance_WasMouseMoved) == 0x000001, "Wrong alignment on BGameInstance_WasMouseMoved");
static_assert(sizeof(BGameInstance_WasMouseMoved) == 0x000001, "Wrong size on BGameInstance_WasMouseMoved");
static_assert(offsetof(BGameInstance_WasMouseMoved, ReturnValue) == 0x000000, "Member 'BGameInstance_WasMouseMoved::ReturnValue' has a wrong offset!");

// Function GameBase.BGameInstance.WasPadConnected
// 0x0001 (0x0001 - 0x0000)
struct BGameInstance_WasPadConnected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BGameInstance_WasPadConnected) == 0x000001, "Wrong alignment on BGameInstance_WasPadConnected");
static_assert(sizeof(BGameInstance_WasPadConnected) == 0x000001, "Wrong size on BGameInstance_WasPadConnected");
static_assert(offsetof(BGameInstance_WasPadConnected, ReturnValue) == 0x000000, "Member 'BGameInstance_WasPadConnected::ReturnValue' has a wrong offset!");

// Function GameBase.GameBaseStatics.AutoSave
// 0x0020 (0x0020 - 0x0000)
struct GameBaseStatics_AutoSave final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GrabScreenShot;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flush;                                             // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameBaseStatics_AutoSave) == 0x000008, "Wrong alignment on GameBaseStatics_AutoSave");
static_assert(sizeof(GameBaseStatics_AutoSave) == 0x000020, "Wrong size on GameBaseStatics_AutoSave");
static_assert(offsetof(GameBaseStatics_AutoSave, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_AutoSave::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_AutoSave, Title) == 0x000008, "Member 'GameBaseStatics_AutoSave::Title' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_AutoSave, GrabScreenShot) == 0x000018, "Member 'GameBaseStatics_AutoSave::GrabScreenShot' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_AutoSave, Flush) == 0x000019, "Member 'GameBaseStatics_AutoSave::Flush' has a wrong offset!");

// Function GameBase.GameBaseStatics.FlushPartialSave
// 0x0008 (0x0008 - 0x0000)
struct GameBaseStatics_FlushPartialSave final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBaseStatics_FlushPartialSave) == 0x000008, "Wrong alignment on GameBaseStatics_FlushPartialSave");
static_assert(sizeof(GameBaseStatics_FlushPartialSave) == 0x000008, "Wrong size on GameBaseStatics_FlushPartialSave");
static_assert(offsetof(GameBaseStatics_FlushPartialSave, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_FlushPartialSave::WorldContextObject' has a wrong offset!");

// Function GameBase.GameBaseStatics.FlushSave
// 0x0028 (0x0028 - 0x0000)
struct GameBaseStatics_FlushSave final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Title;                                             // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyCurrentTime;                                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PreserveSlotIndex;                                 // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameBaseStatics_FlushSave) == 0x000008, "Wrong alignment on GameBaseStatics_FlushSave");
static_assert(sizeof(GameBaseStatics_FlushSave) == 0x000028, "Wrong size on GameBaseStatics_FlushSave");
static_assert(offsetof(GameBaseStatics_FlushSave, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_FlushSave::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_FlushSave, SlotIndex) == 0x000008, "Member 'GameBaseStatics_FlushSave::SlotIndex' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_FlushSave, Title) == 0x000010, "Member 'GameBaseStatics_FlushSave::Title' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_FlushSave, ApplyCurrentTime) == 0x000020, "Member 'GameBaseStatics_FlushSave::ApplyCurrentTime' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_FlushSave, PreserveSlotIndex) == 0x000021, "Member 'GameBaseStatics_FlushSave::PreserveSlotIndex' has a wrong offset!");

// Function GameBase.GameBaseStatics.GetActualSavedScreenShot
// 0x0010 (0x0010 - 0x0000)
struct GameBaseStatics_GetActualSavedScreenShot final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBaseStatics_GetActualSavedScreenShot) == 0x000008, "Wrong alignment on GameBaseStatics_GetActualSavedScreenShot");
static_assert(sizeof(GameBaseStatics_GetActualSavedScreenShot) == 0x000010, "Wrong size on GameBaseStatics_GetActualSavedScreenShot");
static_assert(offsetof(GameBaseStatics_GetActualSavedScreenShot, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_GetActualSavedScreenShot::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_GetActualSavedScreenShot, ReturnValue) == 0x000008, "Member 'GameBaseStatics_GetActualSavedScreenShot::ReturnValue' has a wrong offset!");

// Function GameBase.GameBaseStatics.GetBaseGameInstance
// 0x0010 (0x0010 - 0x0000)
struct GameBaseStatics_GetBaseGameInstance final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBGameInstance*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBaseStatics_GetBaseGameInstance) == 0x000008, "Wrong alignment on GameBaseStatics_GetBaseGameInstance");
static_assert(sizeof(GameBaseStatics_GetBaseGameInstance) == 0x000010, "Wrong size on GameBaseStatics_GetBaseGameInstance");
static_assert(offsetof(GameBaseStatics_GetBaseGameInstance, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_GetBaseGameInstance::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_GetBaseGameInstance, ReturnValue) == 0x000008, "Member 'GameBaseStatics_GetBaseGameInstance::ReturnValue' has a wrong offset!");

// Function GameBase.GameBaseStatics.GetBaseGameMode
// 0x0010 (0x0010 - 0x0000)
struct GameBaseStatics_GetBaseGameMode final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABGameModeBase*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBaseStatics_GetBaseGameMode) == 0x000008, "Wrong alignment on GameBaseStatics_GetBaseGameMode");
static_assert(sizeof(GameBaseStatics_GetBaseGameMode) == 0x000010, "Wrong size on GameBaseStatics_GetBaseGameMode");
static_assert(offsetof(GameBaseStatics_GetBaseGameMode, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_GetBaseGameMode::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_GetBaseGameMode, ReturnValue) == 0x000008, "Member 'GameBaseStatics_GetBaseGameMode::ReturnValue' has a wrong offset!");

// Function GameBase.GameBaseStatics.GetBuildPackageName
// 0x0010 (0x0010 - 0x0000)
struct GameBaseStatics_GetBuildPackageName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBaseStatics_GetBuildPackageName) == 0x000008, "Wrong alignment on GameBaseStatics_GetBuildPackageName");
static_assert(sizeof(GameBaseStatics_GetBuildPackageName) == 0x000010, "Wrong size on GameBaseStatics_GetBuildPackageName");
static_assert(offsetof(GameBaseStatics_GetBuildPackageName, ReturnValue) == 0x000000, "Member 'GameBaseStatics_GetBuildPackageName::ReturnValue' has a wrong offset!");

// Function GameBase.GameBaseStatics.GetBuildStreamName
// 0x0010 (0x0010 - 0x0000)
struct GameBaseStatics_GetBuildStreamName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBaseStatics_GetBuildStreamName) == 0x000008, "Wrong alignment on GameBaseStatics_GetBuildStreamName");
static_assert(sizeof(GameBaseStatics_GetBuildStreamName) == 0x000010, "Wrong size on GameBaseStatics_GetBuildStreamName");
static_assert(offsetof(GameBaseStatics_GetBuildStreamName, ReturnValue) == 0x000000, "Member 'GameBaseStatics_GetBuildStreamName::ReturnValue' has a wrong offset!");

// Function GameBase.GameBaseStatics.GetInputDevice
// 0x0010 (0x0010 - 0x0000)
struct GameBaseStatics_GetInputDevice final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameBaseInputDevice                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameBaseStatics_GetInputDevice) == 0x000008, "Wrong alignment on GameBaseStatics_GetInputDevice");
static_assert(sizeof(GameBaseStatics_GetInputDevice) == 0x000010, "Wrong size on GameBaseStatics_GetInputDevice");
static_assert(offsetof(GameBaseStatics_GetInputDevice, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_GetInputDevice::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_GetInputDevice, ReturnValue) == 0x000008, "Member 'GameBaseStatics_GetInputDevice::ReturnValue' has a wrong offset!");

// Function GameBase.GameBaseStatics.GetLastSaveTime
// 0x0010 (0x0010 - 0x0000)
struct GameBaseStatics_GetLastSaveTime final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBaseStatics_GetLastSaveTime) == 0x000008, "Wrong alignment on GameBaseStatics_GetLastSaveTime");
static_assert(sizeof(GameBaseStatics_GetLastSaveTime) == 0x000010, "Wrong size on GameBaseStatics_GetLastSaveTime");
static_assert(offsetof(GameBaseStatics_GetLastSaveTime, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_GetLastSaveTime::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_GetLastSaveTime, ReturnValue) == 0x000008, "Member 'GameBaseStatics_GetLastSaveTime::ReturnValue' has a wrong offset!");

// Function GameBase.GameBaseStatics.GetPersistentGameData
// 0x0010 (0x0010 - 0x0000)
struct GameBaseStatics_GetPersistentGameData final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPersistentSaveData*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBaseStatics_GetPersistentGameData) == 0x000008, "Wrong alignment on GameBaseStatics_GetPersistentGameData");
static_assert(sizeof(GameBaseStatics_GetPersistentGameData) == 0x000010, "Wrong size on GameBaseStatics_GetPersistentGameData");
static_assert(offsetof(GameBaseStatics_GetPersistentGameData, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_GetPersistentGameData::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_GetPersistentGameData, ReturnValue) == 0x000008, "Member 'GameBaseStatics_GetPersistentGameData::ReturnValue' has a wrong offset!");

// Function GameBase.GameBaseStatics.GetPlayerName
// 0x0018 (0x0018 - 0x0000)
struct GameBaseStatics_GetPlayerName final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBaseStatics_GetPlayerName) == 0x000008, "Wrong alignment on GameBaseStatics_GetPlayerName");
static_assert(sizeof(GameBaseStatics_GetPlayerName) == 0x000018, "Wrong size on GameBaseStatics_GetPlayerName");
static_assert(offsetof(GameBaseStatics_GetPlayerName, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_GetPlayerName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_GetPlayerName, ReturnValue) == 0x000008, "Member 'GameBaseStatics_GetPlayerName::ReturnValue' has a wrong offset!");

// Function GameBase.GameBaseStatics.GetPlayerProfile
// 0x0010 (0x0010 - 0x0000)
struct GameBaseStatics_GetPlayerProfile final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayerProfile*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBaseStatics_GetPlayerProfile) == 0x000008, "Wrong alignment on GameBaseStatics_GetPlayerProfile");
static_assert(sizeof(GameBaseStatics_GetPlayerProfile) == 0x000010, "Wrong size on GameBaseStatics_GetPlayerProfile");
static_assert(offsetof(GameBaseStatics_GetPlayerProfile, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_GetPlayerProfile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_GetPlayerProfile, ReturnValue) == 0x000008, "Member 'GameBaseStatics_GetPlayerProfile::ReturnValue' has a wrong offset!");

// Function GameBase.GameBaseStatics.GetPlaythroughPersistentGameData
// 0x0010 (0x0010 - 0x0000)
struct GameBaseStatics_GetPlaythroughPersistentGameData final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlaythroughPersistentData*             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBaseStatics_GetPlaythroughPersistentGameData) == 0x000008, "Wrong alignment on GameBaseStatics_GetPlaythroughPersistentGameData");
static_assert(sizeof(GameBaseStatics_GetPlaythroughPersistentGameData) == 0x000010, "Wrong size on GameBaseStatics_GetPlaythroughPersistentGameData");
static_assert(offsetof(GameBaseStatics_GetPlaythroughPersistentGameData, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_GetPlaythroughPersistentGameData::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_GetPlaythroughPersistentGameData, ReturnValue) == 0x000008, "Member 'GameBaseStatics_GetPlaythroughPersistentGameData::ReturnValue' has a wrong offset!");

// Function GameBase.GameBaseStatics.GetProjectVersionString
// 0x0010 (0x0010 - 0x0000)
struct GameBaseStatics_GetProjectVersionString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBaseStatics_GetProjectVersionString) == 0x000008, "Wrong alignment on GameBaseStatics_GetProjectVersionString");
static_assert(sizeof(GameBaseStatics_GetProjectVersionString) == 0x000010, "Wrong size on GameBaseStatics_GetProjectVersionString");
static_assert(offsetof(GameBaseStatics_GetProjectVersionString, ReturnValue) == 0x000000, "Member 'GameBaseStatics_GetProjectVersionString::ReturnValue' has a wrong offset!");

// Function GameBase.GameBaseStatics.GetRevisionVersionNumber
// 0x0004 (0x0004 - 0x0000)
struct GameBaseStatics_GetRevisionVersionNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBaseStatics_GetRevisionVersionNumber) == 0x000004, "Wrong alignment on GameBaseStatics_GetRevisionVersionNumber");
static_assert(sizeof(GameBaseStatics_GetRevisionVersionNumber) == 0x000004, "Wrong size on GameBaseStatics_GetRevisionVersionNumber");
static_assert(offsetof(GameBaseStatics_GetRevisionVersionNumber, ReturnValue) == 0x000000, "Member 'GameBaseStatics_GetRevisionVersionNumber::ReturnValue' has a wrong offset!");

// Function GameBase.GameBaseStatics.GetSavedScreenShot
// 0x0018 (0x0018 - 0x0000)
struct GameBaseStatics_GetSavedScreenShot final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBaseStatics_GetSavedScreenShot) == 0x000008, "Wrong alignment on GameBaseStatics_GetSavedScreenShot");
static_assert(sizeof(GameBaseStatics_GetSavedScreenShot) == 0x000018, "Wrong size on GameBaseStatics_GetSavedScreenShot");
static_assert(offsetof(GameBaseStatics_GetSavedScreenShot, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_GetSavedScreenShot::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_GetSavedScreenShot, SlotIndex) == 0x000008, "Member 'GameBaseStatics_GetSavedScreenShot::SlotIndex' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_GetSavedScreenShot, ReturnValue) == 0x000010, "Member 'GameBaseStatics_GetSavedScreenShot::ReturnValue' has a wrong offset!");

// Function GameBase.GameBaseStatics.GetTimeSinceLastSave
// 0x0010 (0x0010 - 0x0000)
struct GameBaseStatics_GetTimeSinceLastSave final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBaseStatics_GetTimeSinceLastSave) == 0x000008, "Wrong alignment on GameBaseStatics_GetTimeSinceLastSave");
static_assert(sizeof(GameBaseStatics_GetTimeSinceLastSave) == 0x000010, "Wrong size on GameBaseStatics_GetTimeSinceLastSave");
static_assert(offsetof(GameBaseStatics_GetTimeSinceLastSave, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_GetTimeSinceLastSave::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_GetTimeSinceLastSave, ReturnValue) == 0x000008, "Member 'GameBaseStatics_GetTimeSinceLastSave::ReturnValue' has a wrong offset!");

// Function GameBase.GameBaseStatics.HideMouseCursor
// 0x0008 (0x0008 - 0x0000)
struct GameBaseStatics_HideMouseCursor final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBaseStatics_HideMouseCursor) == 0x000008, "Wrong alignment on GameBaseStatics_HideMouseCursor");
static_assert(sizeof(GameBaseStatics_HideMouseCursor) == 0x000008, "Wrong size on GameBaseStatics_HideMouseCursor");
static_assert(offsetof(GameBaseStatics_HideMouseCursor, PlayerController) == 0x000000, "Member 'GameBaseStatics_HideMouseCursor::PlayerController' has a wrong offset!");

// Function GameBase.GameBaseStatics.IsConsoleMenu
// 0x0001 (0x0001 - 0x0000)
struct GameBaseStatics_IsConsoleMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBaseStatics_IsConsoleMenu) == 0x000001, "Wrong alignment on GameBaseStatics_IsConsoleMenu");
static_assert(sizeof(GameBaseStatics_IsConsoleMenu) == 0x000001, "Wrong size on GameBaseStatics_IsConsoleMenu");
static_assert(offsetof(GameBaseStatics_IsConsoleMenu, ReturnValue) == 0x000000, "Member 'GameBaseStatics_IsConsoleMenu::ReturnValue' has a wrong offset!");

// Function GameBase.GameBaseStatics.IsGameCompletelyInstalled
// 0x0010 (0x0010 - 0x0000)
struct GameBaseStatics_IsGameCompletelyInstalled final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameBaseStatics_IsGameCompletelyInstalled) == 0x000008, "Wrong alignment on GameBaseStatics_IsGameCompletelyInstalled");
static_assert(sizeof(GameBaseStatics_IsGameCompletelyInstalled) == 0x000010, "Wrong size on GameBaseStatics_IsGameCompletelyInstalled");
static_assert(offsetof(GameBaseStatics_IsGameCompletelyInstalled, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_IsGameCompletelyInstalled::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_IsGameCompletelyInstalled, ReturnValue) == 0x000008, "Member 'GameBaseStatics_IsGameCompletelyInstalled::ReturnValue' has a wrong offset!");

// Function GameBase.GameBaseStatics.IsGameDeactivated
// 0x0010 (0x0010 - 0x0000)
struct GameBaseStatics_IsGameDeactivated final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameBaseStatics_IsGameDeactivated) == 0x000008, "Wrong alignment on GameBaseStatics_IsGameDeactivated");
static_assert(sizeof(GameBaseStatics_IsGameDeactivated) == 0x000010, "Wrong size on GameBaseStatics_IsGameDeactivated");
static_assert(offsetof(GameBaseStatics_IsGameDeactivated, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_IsGameDeactivated::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_IsGameDeactivated, ReturnValue) == 0x000008, "Member 'GameBaseStatics_IsGameDeactivated::ReturnValue' has a wrong offset!");

// Function GameBase.GameBaseStatics.IsGamePaused
// 0x0010 (0x0010 - 0x0000)
struct GameBaseStatics_IsGamePaused final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameBaseStatics_IsGamePaused) == 0x000008, "Wrong alignment on GameBaseStatics_IsGamePaused");
static_assert(sizeof(GameBaseStatics_IsGamePaused) == 0x000010, "Wrong size on GameBaseStatics_IsGamePaused");
static_assert(offsetof(GameBaseStatics_IsGamePaused, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_IsGamePaused::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_IsGamePaused, ReturnValue) == 0x000008, "Member 'GameBaseStatics_IsGamePaused::ReturnValue' has a wrong offset!");

// Function GameBase.GameBaseStatics.IsGameSuspended
// 0x0010 (0x0010 - 0x0000)
struct GameBaseStatics_IsGameSuspended final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameBaseStatics_IsGameSuspended) == 0x000008, "Wrong alignment on GameBaseStatics_IsGameSuspended");
static_assert(sizeof(GameBaseStatics_IsGameSuspended) == 0x000010, "Wrong size on GameBaseStatics_IsGameSuspended");
static_assert(offsetof(GameBaseStatics_IsGameSuspended, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_IsGameSuspended::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_IsGameSuspended, ReturnValue) == 0x000008, "Member 'GameBaseStatics_IsGameSuspended::ReturnValue' has a wrong offset!");

// Function GameBase.GameBaseStatics.IsKeyboardActive
// 0x0010 (0x0010 - 0x0000)
struct GameBaseStatics_IsKeyboardActive final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameBaseStatics_IsKeyboardActive) == 0x000008, "Wrong alignment on GameBaseStatics_IsKeyboardActive");
static_assert(sizeof(GameBaseStatics_IsKeyboardActive) == 0x000010, "Wrong size on GameBaseStatics_IsKeyboardActive");
static_assert(offsetof(GameBaseStatics_IsKeyboardActive, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_IsKeyboardActive::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_IsKeyboardActive, ReturnValue) == 0x000008, "Member 'GameBaseStatics_IsKeyboardActive::ReturnValue' has a wrong offset!");

// Function GameBase.GameBaseStatics.IsMouseActive
// 0x0010 (0x0010 - 0x0000)
struct GameBaseStatics_IsMouseActive final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameBaseStatics_IsMouseActive) == 0x000008, "Wrong alignment on GameBaseStatics_IsMouseActive");
static_assert(sizeof(GameBaseStatics_IsMouseActive) == 0x000010, "Wrong size on GameBaseStatics_IsMouseActive");
static_assert(offsetof(GameBaseStatics_IsMouseActive, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_IsMouseActive::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_IsMouseActive, ReturnValue) == 0x000008, "Member 'GameBaseStatics_IsMouseActive::ReturnValue' has a wrong offset!");

// Function GameBase.GameBaseStatics.IsMoviePlayerActive
// 0x0001 (0x0001 - 0x0000)
struct GameBaseStatics_IsMoviePlayerActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBaseStatics_IsMoviePlayerActive) == 0x000001, "Wrong alignment on GameBaseStatics_IsMoviePlayerActive");
static_assert(sizeof(GameBaseStatics_IsMoviePlayerActive) == 0x000001, "Wrong size on GameBaseStatics_IsMoviePlayerActive");
static_assert(offsetof(GameBaseStatics_IsMoviePlayerActive, ReturnValue) == 0x000000, "Member 'GameBaseStatics_IsMoviePlayerActive::ReturnValue' has a wrong offset!");

// Function GameBase.GameBaseStatics.IsNEOOrScorpio
// 0x0001 (0x0001 - 0x0000)
struct GameBaseStatics_IsNEOOrScorpio final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBaseStatics_IsNEOOrScorpio) == 0x000001, "Wrong alignment on GameBaseStatics_IsNEOOrScorpio");
static_assert(sizeof(GameBaseStatics_IsNEOOrScorpio) == 0x000001, "Wrong size on GameBaseStatics_IsNEOOrScorpio");
static_assert(offsetof(GameBaseStatics_IsNEOOrScorpio, ReturnValue) == 0x000000, "Member 'GameBaseStatics_IsNEOOrScorpio::ReturnValue' has a wrong offset!");

// Function GameBase.GameBaseStatics.IsPadActive
// 0x0010 (0x0010 - 0x0000)
struct GameBaseStatics_IsPadActive final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameBaseStatics_IsPadActive) == 0x000008, "Wrong alignment on GameBaseStatics_IsPadActive");
static_assert(sizeof(GameBaseStatics_IsPadActive) == 0x000010, "Wrong size on GameBaseStatics_IsPadActive");
static_assert(offsetof(GameBaseStatics_IsPadActive, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_IsPadActive::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_IsPadActive, ReturnValue) == 0x000008, "Member 'GameBaseStatics_IsPadActive::ReturnValue' has a wrong offset!");

// Function GameBase.GameBaseStatics.IsPadConnected
// 0x0010 (0x0010 - 0x0000)
struct GameBaseStatics_IsPadConnected final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameBaseStatics_IsPadConnected) == 0x000008, "Wrong alignment on GameBaseStatics_IsPadConnected");
static_assert(sizeof(GameBaseStatics_IsPadConnected) == 0x000010, "Wrong size on GameBaseStatics_IsPadConnected");
static_assert(offsetof(GameBaseStatics_IsPadConnected, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_IsPadConnected::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_IsPadConnected, ReturnValue) == 0x000008, "Member 'GameBaseStatics_IsPadConnected::ReturnValue' has a wrong offset!");

// Function GameBase.GameBaseStatics.IsSwitchUserSupported
// 0x0010 (0x0010 - 0x0000)
struct GameBaseStatics_IsSwitchUserSupported final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameBaseStatics_IsSwitchUserSupported) == 0x000008, "Wrong alignment on GameBaseStatics_IsSwitchUserSupported");
static_assert(sizeof(GameBaseStatics_IsSwitchUserSupported) == 0x000010, "Wrong size on GameBaseStatics_IsSwitchUserSupported");
static_assert(offsetof(GameBaseStatics_IsSwitchUserSupported, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_IsSwitchUserSupported::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_IsSwitchUserSupported, ReturnValue) == 0x000008, "Member 'GameBaseStatics_IsSwitchUserSupported::ReturnValue' has a wrong offset!");

// Function GameBase.GameBaseStatics.IsSystemHelpSupported
// 0x0001 (0x0001 - 0x0000)
struct GameBaseStatics_IsSystemHelpSupported final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBaseStatics_IsSystemHelpSupported) == 0x000001, "Wrong alignment on GameBaseStatics_IsSystemHelpSupported");
static_assert(sizeof(GameBaseStatics_IsSystemHelpSupported) == 0x000001, "Wrong size on GameBaseStatics_IsSystemHelpSupported");
static_assert(offsetof(GameBaseStatics_IsSystemHelpSupported, ReturnValue) == 0x000000, "Member 'GameBaseStatics_IsSystemHelpSupported::ReturnValue' has a wrong offset!");

// Function GameBase.GameBaseStatics.MakeFullSave
// 0x0028 (0x0028 - 0x0000)
struct GameBaseStatics_MakeFullSave final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Title;                                             // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GrabScreenShot;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowAsyncOperation;                               // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameBaseStatics_MakeFullSave) == 0x000008, "Wrong alignment on GameBaseStatics_MakeFullSave");
static_assert(sizeof(GameBaseStatics_MakeFullSave) == 0x000028, "Wrong size on GameBaseStatics_MakeFullSave");
static_assert(offsetof(GameBaseStatics_MakeFullSave, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_MakeFullSave::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_MakeFullSave, SlotIndex) == 0x000008, "Member 'GameBaseStatics_MakeFullSave::SlotIndex' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_MakeFullSave, Title) == 0x000010, "Member 'GameBaseStatics_MakeFullSave::Title' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_MakeFullSave, GrabScreenShot) == 0x000020, "Member 'GameBaseStatics_MakeFullSave::GrabScreenShot' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_MakeFullSave, AllowAsyncOperation) == 0x000021, "Member 'GameBaseStatics_MakeFullSave::AllowAsyncOperation' has a wrong offset!");

// Function GameBase.GameBaseStatics.MakePersistentGameDateDirty
// 0x0008 (0x0008 - 0x0000)
struct GameBaseStatics_MakePersistentGameDateDirty final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBaseStatics_MakePersistentGameDateDirty) == 0x000008, "Wrong alignment on GameBaseStatics_MakePersistentGameDateDirty");
static_assert(sizeof(GameBaseStatics_MakePersistentGameDateDirty) == 0x000008, "Wrong size on GameBaseStatics_MakePersistentGameDateDirty");
static_assert(offsetof(GameBaseStatics_MakePersistentGameDateDirty, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_MakePersistentGameDateDirty::WorldContextObject' has a wrong offset!");

// Function GameBase.GameBaseStatics.MakeQuickSave
// 0x0020 (0x0020 - 0x0000)
struct GameBaseStatics_MakeQuickSave final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GrabScreenShot;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameBaseStatics_MakeQuickSave) == 0x000008, "Wrong alignment on GameBaseStatics_MakeQuickSave");
static_assert(sizeof(GameBaseStatics_MakeQuickSave) == 0x000020, "Wrong size on GameBaseStatics_MakeQuickSave");
static_assert(offsetof(GameBaseStatics_MakeQuickSave, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_MakeQuickSave::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_MakeQuickSave, Title) == 0x000008, "Member 'GameBaseStatics_MakeQuickSave::Title' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_MakeQuickSave, GrabScreenShot) == 0x000018, "Member 'GameBaseStatics_MakeQuickSave::GrabScreenShot' has a wrong offset!");

// Function GameBase.GameBaseStatics.PlaySound
// 0x0008 (0x0008 - 0x0000)
struct GameBaseStatics_PlaySound final
{
public:
	class UAkAudioEvent*                          Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBaseStatics_PlaySound) == 0x000008, "Wrong alignment on GameBaseStatics_PlaySound");
static_assert(sizeof(GameBaseStatics_PlaySound) == 0x000008, "Wrong size on GameBaseStatics_PlaySound");
static_assert(offsetof(GameBaseStatics_PlaySound, Sound) == 0x000000, "Member 'GameBaseStatics_PlaySound::Sound' has a wrong offset!");

// Function GameBase.GameBaseStatics.PostWiseEvent
// 0x0008 (0x0008 - 0x0000)
struct GameBaseStatics_PostWiseEvent final
{
public:
	class UAkAudioEvent*                          Event;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBaseStatics_PostWiseEvent) == 0x000008, "Wrong alignment on GameBaseStatics_PostWiseEvent");
static_assert(sizeof(GameBaseStatics_PostWiseEvent) == 0x000008, "Wrong size on GameBaseStatics_PostWiseEvent");
static_assert(offsetof(GameBaseStatics_PostWiseEvent, Event) == 0x000000, "Member 'GameBaseStatics_PostWiseEvent::Event' has a wrong offset!");

// Function GameBase.GameBaseStatics.SaveGame
// 0x0020 (0x0020 - 0x0000)
struct GameBaseStatics_SaveGame final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GrabScreenShot;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameBaseStatics_SaveGame) == 0x000008, "Wrong alignment on GameBaseStatics_SaveGame");
static_assert(sizeof(GameBaseStatics_SaveGame) == 0x000020, "Wrong size on GameBaseStatics_SaveGame");
static_assert(offsetof(GameBaseStatics_SaveGame, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_SaveGame::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_SaveGame, Title) == 0x000008, "Member 'GameBaseStatics_SaveGame::Title' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_SaveGame, GrabScreenShot) == 0x000018, "Member 'GameBaseStatics_SaveGame::GrabScreenShot' has a wrong offset!");

// Function GameBase.GameBaseStatics.SavePersistentGameDate
// 0x0008 (0x0008 - 0x0000)
struct GameBaseStatics_SavePersistentGameDate final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBaseStatics_SavePersistentGameDate) == 0x000008, "Wrong alignment on GameBaseStatics_SavePersistentGameDate");
static_assert(sizeof(GameBaseStatics_SavePersistentGameDate) == 0x000008, "Wrong size on GameBaseStatics_SavePersistentGameDate");
static_assert(offsetof(GameBaseStatics_SavePersistentGameDate, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_SavePersistentGameDate::WorldContextObject' has a wrong offset!");

// Function GameBase.GameBaseStatics.SaveSlotDataExist
// 0x0010 (0x0010 - 0x0000)
struct GameBaseStatics_SaveSlotDataExist final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameBaseStatics_SaveSlotDataExist) == 0x000008, "Wrong alignment on GameBaseStatics_SaveSlotDataExist");
static_assert(sizeof(GameBaseStatics_SaveSlotDataExist) == 0x000010, "Wrong size on GameBaseStatics_SaveSlotDataExist");
static_assert(offsetof(GameBaseStatics_SaveSlotDataExist, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_SaveSlotDataExist::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_SaveSlotDataExist, SlotIndex) == 0x000008, "Member 'GameBaseStatics_SaveSlotDataExist::SlotIndex' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_SaveSlotDataExist, ReturnValue) == 0x00000C, "Member 'GameBaseStatics_SaveSlotDataExist::ReturnValue' has a wrong offset!");

// Function GameBase.GameBaseStatics.SaveUserProfile
// 0x0008 (0x0008 - 0x0000)
struct GameBaseStatics_SaveUserProfile final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBaseStatics_SaveUserProfile) == 0x000008, "Wrong alignment on GameBaseStatics_SaveUserProfile");
static_assert(sizeof(GameBaseStatics_SaveUserProfile) == 0x000008, "Wrong size on GameBaseStatics_SaveUserProfile");
static_assert(offsetof(GameBaseStatics_SaveUserProfile, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_SaveUserProfile::WorldContextObject' has a wrong offset!");

// Function GameBase.GameBaseStatics.SetActualGamma
// 0x0008 (0x0008 - 0x0000)
struct GameBaseStatics_SetActualGamma final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBaseStatics_SetActualGamma) == 0x000008, "Wrong alignment on GameBaseStatics_SetActualGamma");
static_assert(sizeof(GameBaseStatics_SetActualGamma) == 0x000008, "Wrong size on GameBaseStatics_SetActualGamma");
static_assert(offsetof(GameBaseStatics_SetActualGamma, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_SetActualGamma::WorldContextObject' has a wrong offset!");

// Function GameBase.GameBaseStatics.SetDefaultGamma
// 0x0008 (0x0008 - 0x0000)
struct GameBaseStatics_SetDefaultGamma final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBaseStatics_SetDefaultGamma) == 0x000008, "Wrong alignment on GameBaseStatics_SetDefaultGamma");
static_assert(sizeof(GameBaseStatics_SetDefaultGamma) == 0x000008, "Wrong size on GameBaseStatics_SetDefaultGamma");
static_assert(offsetof(GameBaseStatics_SetDefaultGamma, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_SetDefaultGamma::WorldContextObject' has a wrong offset!");

// Function GameBase.GameBaseStatics.SetGamePaused
// 0x0010 (0x0010 - 0x0000)
struct GameBaseStatics_SetGamePaused final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPaused;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameBaseStatics_SetGamePaused) == 0x000008, "Wrong alignment on GameBaseStatics_SetGamePaused");
static_assert(sizeof(GameBaseStatics_SetGamePaused) == 0x000010, "Wrong size on GameBaseStatics_SetGamePaused");
static_assert(offsetof(GameBaseStatics_SetGamePaused, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_SetGamePaused::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_SetGamePaused, IsPaused) == 0x000008, "Member 'GameBaseStatics_SetGamePaused::IsPaused' has a wrong offset!");

// Function GameBase.GameBaseStatics.SetInputModeGameAndUI
// 0x0018 (0x0018 - 0x0000)
struct GameBaseStatics_SetInputModeGameAndUI final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowMouseCursor_0;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMouseLockMode                                MouseLockMode;                                     // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HideCursorDuringCapture;                           // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameBaseStatics_SetInputModeGameAndUI) == 0x000008, "Wrong alignment on GameBaseStatics_SetInputModeGameAndUI");
static_assert(sizeof(GameBaseStatics_SetInputModeGameAndUI) == 0x000018, "Wrong size on GameBaseStatics_SetInputModeGameAndUI");
static_assert(offsetof(GameBaseStatics_SetInputModeGameAndUI, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_SetInputModeGameAndUI::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_SetInputModeGameAndUI, PlayerController) == 0x000008, "Member 'GameBaseStatics_SetInputModeGameAndUI::PlayerController' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_SetInputModeGameAndUI, ShowMouseCursor_0) == 0x000010, "Member 'GameBaseStatics_SetInputModeGameAndUI::ShowMouseCursor_0' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_SetInputModeGameAndUI, MouseLockMode) == 0x000011, "Member 'GameBaseStatics_SetInputModeGameAndUI::MouseLockMode' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_SetInputModeGameAndUI, HideCursorDuringCapture) == 0x000012, "Member 'GameBaseStatics_SetInputModeGameAndUI::HideCursorDuringCapture' has a wrong offset!");

// Function GameBase.GameBaseStatics.SetInputModeGameOnly
// 0x0018 (0x0018 - 0x0000)
struct GameBaseStatics_SetInputModeGameOnly final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowMouseCursor_0;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ConsumeCaptureMouseDown;                           // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameBaseStatics_SetInputModeGameOnly) == 0x000008, "Wrong alignment on GameBaseStatics_SetInputModeGameOnly");
static_assert(sizeof(GameBaseStatics_SetInputModeGameOnly) == 0x000018, "Wrong size on GameBaseStatics_SetInputModeGameOnly");
static_assert(offsetof(GameBaseStatics_SetInputModeGameOnly, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_SetInputModeGameOnly::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_SetInputModeGameOnly, PlayerController) == 0x000008, "Member 'GameBaseStatics_SetInputModeGameOnly::PlayerController' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_SetInputModeGameOnly, ShowMouseCursor_0) == 0x000010, "Member 'GameBaseStatics_SetInputModeGameOnly::ShowMouseCursor_0' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_SetInputModeGameOnly, ConsumeCaptureMouseDown) == 0x000011, "Member 'GameBaseStatics_SetInputModeGameOnly::ConsumeCaptureMouseDown' has a wrong offset!");

// Function GameBase.GameBaseStatics.SetInputModeUIOnly
// 0x0018 (0x0018 - 0x0000)
struct GameBaseStatics_SetInputModeUIOnly final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowMouseCursor_0;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMouseLockMode                                MouseLockMode;                                     // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameBaseStatics_SetInputModeUIOnly) == 0x000008, "Wrong alignment on GameBaseStatics_SetInputModeUIOnly");
static_assert(sizeof(GameBaseStatics_SetInputModeUIOnly) == 0x000018, "Wrong size on GameBaseStatics_SetInputModeUIOnly");
static_assert(offsetof(GameBaseStatics_SetInputModeUIOnly, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_SetInputModeUIOnly::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_SetInputModeUIOnly, PlayerController) == 0x000008, "Member 'GameBaseStatics_SetInputModeUIOnly::PlayerController' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_SetInputModeUIOnly, ShowMouseCursor_0) == 0x000010, "Member 'GameBaseStatics_SetInputModeUIOnly::ShowMouseCursor_0' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_SetInputModeUIOnly, MouseLockMode) == 0x000011, "Member 'GameBaseStatics_SetInputModeUIOnly::MouseLockMode' has a wrong offset!");

// Function GameBase.GameBaseStatics.SetMouseCursorVisibility
// 0x0010 (0x0010 - 0x0000)
struct GameBaseStatics_SetMouseCursorVisibility final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Show;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameBaseStatics_SetMouseCursorVisibility) == 0x000008, "Wrong alignment on GameBaseStatics_SetMouseCursorVisibility");
static_assert(sizeof(GameBaseStatics_SetMouseCursorVisibility) == 0x000010, "Wrong size on GameBaseStatics_SetMouseCursorVisibility");
static_assert(offsetof(GameBaseStatics_SetMouseCursorVisibility, PlayerController) == 0x000000, "Member 'GameBaseStatics_SetMouseCursorVisibility::PlayerController' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_SetMouseCursorVisibility, Show) == 0x000008, "Member 'GameBaseStatics_SetMouseCursorVisibility::Show' has a wrong offset!");

// Function GameBase.GameBaseStatics.ShadersUseHighQualityBlock
// 0x0010 (0x0010 - 0x0000)
struct GameBaseStatics_ShadersUseHighQualityBlock final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameBaseStatics_ShadersUseHighQualityBlock) == 0x000008, "Wrong alignment on GameBaseStatics_ShadersUseHighQualityBlock");
static_assert(sizeof(GameBaseStatics_ShadersUseHighQualityBlock) == 0x000010, "Wrong size on GameBaseStatics_ShadersUseHighQualityBlock");
static_assert(offsetof(GameBaseStatics_ShadersUseHighQualityBlock, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_ShadersUseHighQualityBlock::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_ShadersUseHighQualityBlock, ReturnValue) == 0x000008, "Member 'GameBaseStatics_ShadersUseHighQualityBlock::ReturnValue' has a wrong offset!");

// Function GameBase.GameBaseStatics.ShowMouseCursor
// 0x0008 (0x0008 - 0x0000)
struct GameBaseStatics_ShowMouseCursor final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBaseStatics_ShowMouseCursor) == 0x000008, "Wrong alignment on GameBaseStatics_ShowMouseCursor");
static_assert(sizeof(GameBaseStatics_ShowMouseCursor) == 0x000008, "Wrong size on GameBaseStatics_ShowMouseCursor");
static_assert(offsetof(GameBaseStatics_ShowMouseCursor, PlayerController) == 0x000000, "Member 'GameBaseStatics_ShowMouseCursor::PlayerController' has a wrong offset!");

// Function GameBase.GameBaseStatics.StopSound
// 0x0008 (0x0008 - 0x0000)
struct GameBaseStatics_StopSound final
{
public:
	class UAkAudioEvent*                          Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBaseStatics_StopSound) == 0x000008, "Wrong alignment on GameBaseStatics_StopSound");
static_assert(sizeof(GameBaseStatics_StopSound) == 0x000008, "Wrong size on GameBaseStatics_StopSound");
static_assert(offsetof(GameBaseStatics_StopSound, Sound) == 0x000000, "Member 'GameBaseStatics_StopSound::Sound' has a wrong offset!");

// Function GameBase.GameBaseStatics.WaitForAllSaveAsyncOperations
// 0x0008 (0x0008 - 0x0000)
struct GameBaseStatics_WaitForAllSaveAsyncOperations final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBaseStatics_WaitForAllSaveAsyncOperations) == 0x000008, "Wrong alignment on GameBaseStatics_WaitForAllSaveAsyncOperations");
static_assert(sizeof(GameBaseStatics_WaitForAllSaveAsyncOperations) == 0x000008, "Wrong size on GameBaseStatics_WaitForAllSaveAsyncOperations");
static_assert(offsetof(GameBaseStatics_WaitForAllSaveAsyncOperations, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_WaitForAllSaveAsyncOperations::WorldContextObject' has a wrong offset!");

// Function GameBase.GameBaseStatics.WasMouseMoved
// 0x0010 (0x0010 - 0x0000)
struct GameBaseStatics_WasMouseMoved final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameBaseStatics_WasMouseMoved) == 0x000008, "Wrong alignment on GameBaseStatics_WasMouseMoved");
static_assert(sizeof(GameBaseStatics_WasMouseMoved) == 0x000010, "Wrong size on GameBaseStatics_WasMouseMoved");
static_assert(offsetof(GameBaseStatics_WasMouseMoved, WorldContextObject) == 0x000000, "Member 'GameBaseStatics_WasMouseMoved::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameBaseStatics_WasMouseMoved, ReturnValue) == 0x000008, "Member 'GameBaseStatics_WasMouseMoved::ReturnValue' has a wrong offset!");

// Function GameBase.LoadingVideoOverlayWidget.MovieTimeChanged
// 0x0018 (0x0018 - 0x0000)
struct LoadingVideoOverlayWidget_MovieTimeChanged final
{
public:
	float                                         MovieTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MovieName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadingVideoOverlayWidget_MovieTimeChanged) == 0x000008, "Wrong alignment on LoadingVideoOverlayWidget_MovieTimeChanged");
static_assert(sizeof(LoadingVideoOverlayWidget_MovieTimeChanged) == 0x000018, "Wrong size on LoadingVideoOverlayWidget_MovieTimeChanged");
static_assert(offsetof(LoadingVideoOverlayWidget_MovieTimeChanged, MovieTime) == 0x000000, "Member 'LoadingVideoOverlayWidget_MovieTimeChanged::MovieTime' has a wrong offset!");
static_assert(offsetof(LoadingVideoOverlayWidget_MovieTimeChanged, MovieName) == 0x000008, "Member 'LoadingVideoOverlayWidget_MovieTimeChanged::MovieName' has a wrong offset!");

// Function GameBase.LoadingVideoOverlayWidget.OnMovieTimeChanged
// 0x0018 (0x0018 - 0x0000)
struct LoadingVideoOverlayWidget_OnMovieTimeChanged final
{
public:
	float                                         MovieTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MovieName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadingVideoOverlayWidget_OnMovieTimeChanged) == 0x000008, "Wrong alignment on LoadingVideoOverlayWidget_OnMovieTimeChanged");
static_assert(sizeof(LoadingVideoOverlayWidget_OnMovieTimeChanged) == 0x000018, "Wrong size on LoadingVideoOverlayWidget_OnMovieTimeChanged");
static_assert(offsetof(LoadingVideoOverlayWidget_OnMovieTimeChanged, MovieTime) == 0x000000, "Member 'LoadingVideoOverlayWidget_OnMovieTimeChanged::MovieTime' has a wrong offset!");
static_assert(offsetof(LoadingVideoOverlayWidget_OnMovieTimeChanged, MovieName) == 0x000008, "Member 'LoadingVideoOverlayWidget_OnMovieTimeChanged::MovieName' has a wrong offset!");

// Function GameBase.LoadingVideoOverlayWidget.SetSubtitles
// 0x0010 (0x0010 - 0x0000)
struct LoadingVideoOverlayWidget_SetSubtitles final
{
public:
	class FString                                 NewSubtitles;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadingVideoOverlayWidget_SetSubtitles) == 0x000008, "Wrong alignment on LoadingVideoOverlayWidget_SetSubtitles");
static_assert(sizeof(LoadingVideoOverlayWidget_SetSubtitles) == 0x000010, "Wrong size on LoadingVideoOverlayWidget_SetSubtitles");
static_assert(offsetof(LoadingVideoOverlayWidget_SetSubtitles, NewSubtitles) == 0x000000, "Member 'LoadingVideoOverlayWidget_SetSubtitles::NewSubtitles' has a wrong offset!");

// Function GameBase.LoadScreenWidget.OnShow
// 0x0008 (0x0008 - 0x0000)
struct LoadScreenWidget_OnShow final
{
public:
	bool                                          IsFromNewGame;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ZOrder;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadScreenWidget_OnShow) == 0x000004, "Wrong alignment on LoadScreenWidget_OnShow");
static_assert(sizeof(LoadScreenWidget_OnShow) == 0x000008, "Wrong size on LoadScreenWidget_OnShow");
static_assert(offsetof(LoadScreenWidget_OnShow, IsFromNewGame) == 0x000000, "Member 'LoadScreenWidget_OnShow::IsFromNewGame' has a wrong offset!");
static_assert(offsetof(LoadScreenWidget_OnShow, ZOrder) == 0x000004, "Member 'LoadScreenWidget_OnShow::ZOrder' has a wrong offset!");

// Function GameBase.LostPadWidget.IsInfoTypeDisconnected
// 0x0001 (0x0001 - 0x0000)
struct LostPadWidget_IsInfoTypeDisconnected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LostPadWidget_IsInfoTypeDisconnected) == 0x000001, "Wrong alignment on LostPadWidget_IsInfoTypeDisconnected");
static_assert(sizeof(LostPadWidget_IsInfoTypeDisconnected) == 0x000001, "Wrong size on LostPadWidget_IsInfoTypeDisconnected");
static_assert(offsetof(LostPadWidget_IsInfoTypeDisconnected, ReturnValue) == 0x000000, "Member 'LostPadWidget_IsInfoTypeDisconnected::ReturnValue' has a wrong offset!");

// Function GameBase.MainMenuWidget.IsSystemHelpSupported
// 0x0001 (0x0001 - 0x0000)
struct MainMenuWidget_IsSystemHelpSupported final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuWidget_IsSystemHelpSupported) == 0x000001, "Wrong alignment on MainMenuWidget_IsSystemHelpSupported");
static_assert(sizeof(MainMenuWidget_IsSystemHelpSupported) == 0x000001, "Wrong size on MainMenuWidget_IsSystemHelpSupported");
static_assert(offsetof(MainMenuWidget_IsSystemHelpSupported, ReturnValue) == 0x000000, "Member 'MainMenuWidget_IsSystemHelpSupported::ReturnValue' has a wrong offset!");

// Function GameBase.MainMenuWidget.BeginNewGame
// 0x0010 (0x0010 - 0x0000)
struct MainMenuWidget_BeginNewGame final
{
public:
	class UMovieConfig*                           Movie;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NonSkippableLen;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MainMenuWidget_BeginNewGame) == 0x000008, "Wrong alignment on MainMenuWidget_BeginNewGame");
static_assert(sizeof(MainMenuWidget_BeginNewGame) == 0x000010, "Wrong size on MainMenuWidget_BeginNewGame");
static_assert(offsetof(MainMenuWidget_BeginNewGame, Movie) == 0x000000, "Member 'MainMenuWidget_BeginNewGame::Movie' has a wrong offset!");
static_assert(offsetof(MainMenuWidget_BeginNewGame, NonSkippableLen) == 0x000008, "Member 'MainMenuWidget_BeginNewGame::NonSkippableLen' has a wrong offset!");

// Function GameBase.MainMenuWidget.ContinueGame
// 0x0010 (0x0010 - 0x0000)
struct MainMenuWidget_ContinueGame final
{
public:
	class UMovieConfig*                           Movie;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NonSkippableLen;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MainMenuWidget_ContinueGame) == 0x000008, "Wrong alignment on MainMenuWidget_ContinueGame");
static_assert(sizeof(MainMenuWidget_ContinueGame) == 0x000010, "Wrong size on MainMenuWidget_ContinueGame");
static_assert(offsetof(MainMenuWidget_ContinueGame, Movie) == 0x000000, "Member 'MainMenuWidget_ContinueGame::Movie' has a wrong offset!");
static_assert(offsetof(MainMenuWidget_ContinueGame, NonSkippableLen) == 0x000008, "Member 'MainMenuWidget_ContinueGame::NonSkippableLen' has a wrong offset!");

// Function GameBase.MainMenuWidget.LoadSavedGame
// 0x0018 (0x0018 - 0x0000)
struct MainMenuWidget_LoadSavedGame final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMovieConfig*                           Movie;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NonSkippableLen;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MainMenuWidget_LoadSavedGame) == 0x000008, "Wrong alignment on MainMenuWidget_LoadSavedGame");
static_assert(sizeof(MainMenuWidget_LoadSavedGame) == 0x000018, "Wrong size on MainMenuWidget_LoadSavedGame");
static_assert(offsetof(MainMenuWidget_LoadSavedGame, SlotIndex) == 0x000000, "Member 'MainMenuWidget_LoadSavedGame::SlotIndex' has a wrong offset!");
static_assert(offsetof(MainMenuWidget_LoadSavedGame, Movie) == 0x000008, "Member 'MainMenuWidget_LoadSavedGame::Movie' has a wrong offset!");
static_assert(offsetof(MainMenuWidget_LoadSavedGame, NonSkippableLen) == 0x000010, "Member 'MainMenuWidget_LoadSavedGame::NonSkippableLen' has a wrong offset!");

// Function GameBase.MainMenuWidget.OnLoadingFadeOut
// 0x0001 (0x0001 - 0x0000)
struct MainMenuWidget_OnLoadingFadeOut final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuWidget_OnLoadingFadeOut) == 0x000001, "Wrong alignment on MainMenuWidget_OnLoadingFadeOut");
static_assert(sizeof(MainMenuWidget_OnLoadingFadeOut) == 0x000001, "Wrong size on MainMenuWidget_OnLoadingFadeOut");
static_assert(offsetof(MainMenuWidget_OnLoadingFadeOut, ReturnValue) == 0x000000, "Member 'MainMenuWidget_OnLoadingFadeOut::ReturnValue' has a wrong offset!");

// Function GameBase.MainMenuWidget.PopulateSlots
// 0x0003 (0x0003 - 0x0000)
struct MainMenuWidget_PopulateSlots final
{
public:
	bool                                          WithScreenshots;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SortByDate;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SaveMode;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuWidget_PopulateSlots) == 0x000001, "Wrong alignment on MainMenuWidget_PopulateSlots");
static_assert(sizeof(MainMenuWidget_PopulateSlots) == 0x000003, "Wrong size on MainMenuWidget_PopulateSlots");
static_assert(offsetof(MainMenuWidget_PopulateSlots, WithScreenshots) == 0x000000, "Member 'MainMenuWidget_PopulateSlots::WithScreenshots' has a wrong offset!");
static_assert(offsetof(MainMenuWidget_PopulateSlots, SortByDate) == 0x000001, "Member 'MainMenuWidget_PopulateSlots::SortByDate' has a wrong offset!");
static_assert(offsetof(MainMenuWidget_PopulateSlots, SaveMode) == 0x000002, "Member 'MainMenuWidget_PopulateSlots::SaveMode' has a wrong offset!");

// Function GameBase.MainMenuWidget.GetSlotIndex
// 0x0008 (0x0008 - 0x0000)
struct MainMenuWidget_GetSlotIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuWidget_GetSlotIndex) == 0x000004, "Wrong alignment on MainMenuWidget_GetSlotIndex");
static_assert(sizeof(MainMenuWidget_GetSlotIndex) == 0x000008, "Wrong size on MainMenuWidget_GetSlotIndex");
static_assert(offsetof(MainMenuWidget_GetSlotIndex, Index_0) == 0x000000, "Member 'MainMenuWidget_GetSlotIndex::Index_0' has a wrong offset!");
static_assert(offsetof(MainMenuWidget_GetSlotIndex, ReturnValue) == 0x000004, "Member 'MainMenuWidget_GetSlotIndex::ReturnValue' has a wrong offset!");

// Function GameBase.MainMenuWidget.GetSlotsCount
// 0x0004 (0x0004 - 0x0000)
struct MainMenuWidget_GetSlotsCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuWidget_GetSlotsCount) == 0x000004, "Wrong alignment on MainMenuWidget_GetSlotsCount");
static_assert(sizeof(MainMenuWidget_GetSlotsCount) == 0x000004, "Wrong size on MainMenuWidget_GetSlotsCount");
static_assert(offsetof(MainMenuWidget_GetSlotsCount, ReturnValue) == 0x000000, "Member 'MainMenuWidget_GetSlotsCount::ReturnValue' has a wrong offset!");

// Function GameBase.MainMenuWidget.GetTheNewestSlotInfo
// 0x0040 (0x0040 - 0x0000)
struct MainMenuWidget_GetTheNewestSlotInfo final
{
public:
	bool                                          WithScreenShot;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSaveSlotInfo                          ReturnValue;                                       // 0x0008(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuWidget_GetTheNewestSlotInfo) == 0x000008, "Wrong alignment on MainMenuWidget_GetTheNewestSlotInfo");
static_assert(sizeof(MainMenuWidget_GetTheNewestSlotInfo) == 0x000040, "Wrong size on MainMenuWidget_GetTheNewestSlotInfo");
static_assert(offsetof(MainMenuWidget_GetTheNewestSlotInfo, WithScreenShot) == 0x000000, "Member 'MainMenuWidget_GetTheNewestSlotInfo::WithScreenShot' has a wrong offset!");
static_assert(offsetof(MainMenuWidget_GetTheNewestSlotInfo, ReturnValue) == 0x000008, "Member 'MainMenuWidget_GetTheNewestSlotInfo::ReturnValue' has a wrong offset!");

// Function GameBase.MainMenuWidget.HasSlots
// 0x0001 (0x0001 - 0x0000)
struct MainMenuWidget_HasSlots final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuWidget_HasSlots) == 0x000001, "Wrong alignment on MainMenuWidget_HasSlots");
static_assert(sizeof(MainMenuWidget_HasSlots) == 0x000001, "Wrong size on MainMenuWidget_HasSlots");
static_assert(offsetof(MainMenuWidget_HasSlots, ReturnValue) == 0x000000, "Member 'MainMenuWidget_HasSlots::ReturnValue' has a wrong offset!");

// Function GameBase.MainMenuWidget.HasUserSlots
// 0x0001 (0x0001 - 0x0000)
struct MainMenuWidget_HasUserSlots final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuWidget_HasUserSlots) == 0x000001, "Wrong alignment on MainMenuWidget_HasUserSlots");
static_assert(sizeof(MainMenuWidget_HasUserSlots) == 0x000001, "Wrong size on MainMenuWidget_HasUserSlots");
static_assert(offsetof(MainMenuWidget_HasUserSlots, ReturnValue) == 0x000000, "Member 'MainMenuWidget_HasUserSlots::ReturnValue' has a wrong offset!");

// Function GameBase.MainMenuWidget.IsShowUserInfo
// 0x0001 (0x0001 - 0x0000)
struct MainMenuWidget_IsShowUserInfo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuWidget_IsShowUserInfo) == 0x000001, "Wrong alignment on MainMenuWidget_IsShowUserInfo");
static_assert(sizeof(MainMenuWidget_IsShowUserInfo) == 0x000001, "Wrong size on MainMenuWidget_IsShowUserInfo");
static_assert(offsetof(MainMenuWidget_IsShowUserInfo, ReturnValue) == 0x000000, "Member 'MainMenuWidget_IsShowUserInfo::ReturnValue' has a wrong offset!");

// Function GameBase.MainMenuWidget.IsSlotListNotEmpty
// 0x0001 (0x0001 - 0x0000)
struct MainMenuWidget_IsSlotListNotEmpty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuWidget_IsSlotListNotEmpty) == 0x000001, "Wrong alignment on MainMenuWidget_IsSlotListNotEmpty");
static_assert(sizeof(MainMenuWidget_IsSlotListNotEmpty) == 0x000001, "Wrong size on MainMenuWidget_IsSlotListNotEmpty");
static_assert(offsetof(MainMenuWidget_IsSlotListNotEmpty, ReturnValue) == 0x000000, "Member 'MainMenuWidget_IsSlotListNotEmpty::ReturnValue' has a wrong offset!");

// Function GameBase.OnlineUtility.IsEOSActive
// 0x0010 (0x0010 - 0x0000)
struct OnlineUtility_IsEOSActive final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineUtility_IsEOSActive) == 0x000008, "Wrong alignment on OnlineUtility_IsEOSActive");
static_assert(sizeof(OnlineUtility_IsEOSActive) == 0x000010, "Wrong size on OnlineUtility_IsEOSActive");
static_assert(offsetof(OnlineUtility_IsEOSActive, WorldContextObject) == 0x000000, "Member 'OnlineUtility_IsEOSActive::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OnlineUtility_IsEOSActive, ReturnValue) == 0x000008, "Member 'OnlineUtility_IsEOSActive::ReturnValue' has a wrong offset!");

// Function GameBase.OnlineUtility.IsGDKActive
// 0x0010 (0x0010 - 0x0000)
struct OnlineUtility_IsGDKActive final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineUtility_IsGDKActive) == 0x000008, "Wrong alignment on OnlineUtility_IsGDKActive");
static_assert(sizeof(OnlineUtility_IsGDKActive) == 0x000010, "Wrong size on OnlineUtility_IsGDKActive");
static_assert(offsetof(OnlineUtility_IsGDKActive, WorldContextObject) == 0x000000, "Member 'OnlineUtility_IsGDKActive::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OnlineUtility_IsGDKActive, ReturnValue) == 0x000008, "Member 'OnlineUtility_IsGDKActive::ReturnValue' has a wrong offset!");

// Function GameBase.OnlineUtility.IsGogActive
// 0x0010 (0x0010 - 0x0000)
struct OnlineUtility_IsGogActive final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineUtility_IsGogActive) == 0x000008, "Wrong alignment on OnlineUtility_IsGogActive");
static_assert(sizeof(OnlineUtility_IsGogActive) == 0x000010, "Wrong size on OnlineUtility_IsGogActive");
static_assert(offsetof(OnlineUtility_IsGogActive, WorldContextObject) == 0x000000, "Member 'OnlineUtility_IsGogActive::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OnlineUtility_IsGogActive, ReturnValue) == 0x000008, "Member 'OnlineUtility_IsGogActive::ReturnValue' has a wrong offset!");

// Function GameBase.OnlineUtility.IsLiveActive
// 0x0010 (0x0010 - 0x0000)
struct OnlineUtility_IsLiveActive final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineUtility_IsLiveActive) == 0x000008, "Wrong alignment on OnlineUtility_IsLiveActive");
static_assert(sizeof(OnlineUtility_IsLiveActive) == 0x000010, "Wrong size on OnlineUtility_IsLiveActive");
static_assert(offsetof(OnlineUtility_IsLiveActive, WorldContextObject) == 0x000000, "Member 'OnlineUtility_IsLiveActive::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OnlineUtility_IsLiveActive, ReturnValue) == 0x000008, "Member 'OnlineUtility_IsLiveActive::ReturnValue' has a wrong offset!");

// Function GameBase.OnlineUtility.IsSteamActive
// 0x0010 (0x0010 - 0x0000)
struct OnlineUtility_IsSteamActive final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineUtility_IsSteamActive) == 0x000008, "Wrong alignment on OnlineUtility_IsSteamActive");
static_assert(sizeof(OnlineUtility_IsSteamActive) == 0x000010, "Wrong size on OnlineUtility_IsSteamActive");
static_assert(offsetof(OnlineUtility_IsSteamActive, WorldContextObject) == 0x000000, "Member 'OnlineUtility_IsSteamActive::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OnlineUtility_IsSteamActive, ReturnValue) == 0x000008, "Member 'OnlineUtility_IsSteamActive::ReturnValue' has a wrong offset!");

// Function GameBase.PlayerProfile.IsHDREnabledAndAllowed
// 0x0001 (0x0001 - 0x0000)
struct PlayerProfile_IsHDREnabledAndAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProfile_IsHDREnabledAndAllowed) == 0x000001, "Wrong alignment on PlayerProfile_IsHDREnabledAndAllowed");
static_assert(sizeof(PlayerProfile_IsHDREnabledAndAllowed) == 0x000001, "Wrong size on PlayerProfile_IsHDREnabledAndAllowed");
static_assert(offsetof(PlayerProfile_IsHDREnabledAndAllowed, ReturnValue) == 0x000000, "Member 'PlayerProfile_IsHDREnabledAndAllowed::ReturnValue' has a wrong offset!");

// Function GameBase.PlayerProfile.GetVolume
// 0x000C (0x000C - 0x0000)
struct PlayerProfile_GetVolume final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProfile_GetVolume) == 0x000004, "Wrong alignment on PlayerProfile_GetVolume");
static_assert(sizeof(PlayerProfile_GetVolume) == 0x00000C, "Wrong size on PlayerProfile_GetVolume");
static_assert(offsetof(PlayerProfile_GetVolume, Name_0) == 0x000000, "Member 'PlayerProfile_GetVolume::Name_0' has a wrong offset!");
static_assert(offsetof(PlayerProfile_GetVolume, ReturnValue) == 0x000008, "Member 'PlayerProfile_GetVolume::ReturnValue' has a wrong offset!");

// Function GameBase.PlayerProfile.IsMuted
// 0x000C (0x000C - 0x0000)
struct PlayerProfile_IsMuted final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerProfile_IsMuted) == 0x000004, "Wrong alignment on PlayerProfile_IsMuted");
static_assert(sizeof(PlayerProfile_IsMuted) == 0x00000C, "Wrong size on PlayerProfile_IsMuted");
static_assert(offsetof(PlayerProfile_IsMuted, Name_0) == 0x000000, "Member 'PlayerProfile_IsMuted::Name_0' has a wrong offset!");
static_assert(offsetof(PlayerProfile_IsMuted, ReturnValue) == 0x000008, "Member 'PlayerProfile_IsMuted::ReturnValue' has a wrong offset!");

// Function GameBase.SlotSelectionWidget.Continue
// 0x0008 (0x0008 - 0x0000)
struct SlotSelectionWidget_Continue final
{
public:
	int32                                         SelectedSlot;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClearSlot;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SlotSelectionWidget_Continue) == 0x000004, "Wrong alignment on SlotSelectionWidget_Continue");
static_assert(sizeof(SlotSelectionWidget_Continue) == 0x000008, "Wrong size on SlotSelectionWidget_Continue");
static_assert(offsetof(SlotSelectionWidget_Continue, SelectedSlot) == 0x000000, "Member 'SlotSelectionWidget_Continue::SelectedSlot' has a wrong offset!");
static_assert(offsetof(SlotSelectionWidget_Continue, ClearSlot) == 0x000004, "Member 'SlotSelectionWidget_Continue::ClearSlot' has a wrong offset!");

// Function GameBase.SlotSelectionWidget.GetSlotList
// 0x0010 (0x0010 - 0x0000)
struct SlotSelectionWidget_GetSlotList final
{
public:
	TArray<struct FSaveSlotInfo>                  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotSelectionWidget_GetSlotList) == 0x000008, "Wrong alignment on SlotSelectionWidget_GetSlotList");
static_assert(sizeof(SlotSelectionWidget_GetSlotList) == 0x000010, "Wrong size on SlotSelectionWidget_GetSlotList");
static_assert(offsetof(SlotSelectionWidget_GetSlotList, ReturnValue) == 0x000000, "Member 'SlotSelectionWidget_GetSlotList::ReturnValue' has a wrong offset!");

// Function GameBase.SlotSelectionWidget.GetSlotsCount
// 0x0004 (0x0004 - 0x0000)
struct SlotSelectionWidget_GetSlotsCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotSelectionWidget_GetSlotsCount) == 0x000004, "Wrong alignment on SlotSelectionWidget_GetSlotsCount");
static_assert(sizeof(SlotSelectionWidget_GetSlotsCount) == 0x000004, "Wrong size on SlotSelectionWidget_GetSlotsCount");
static_assert(offsetof(SlotSelectionWidget_GetSlotsCount, ReturnValue) == 0x000000, "Member 'SlotSelectionWidget_GetSlotsCount::ReturnValue' has a wrong offset!");

// Function GameBase.SlotSelectionWidget.GetTheNewestSlotIndex
// 0x0004 (0x0004 - 0x0000)
struct SlotSelectionWidget_GetTheNewestSlotIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotSelectionWidget_GetTheNewestSlotIndex) == 0x000004, "Wrong alignment on SlotSelectionWidget_GetTheNewestSlotIndex");
static_assert(sizeof(SlotSelectionWidget_GetTheNewestSlotIndex) == 0x000004, "Wrong size on SlotSelectionWidget_GetTheNewestSlotIndex");
static_assert(offsetof(SlotSelectionWidget_GetTheNewestSlotIndex, ReturnValue) == 0x000000, "Member 'SlotSelectionWidget_GetTheNewestSlotIndex::ReturnValue' has a wrong offset!");

}

