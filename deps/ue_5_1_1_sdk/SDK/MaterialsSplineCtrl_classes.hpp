#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MaterialsSplineCtrl

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "MaterialsSplineCtrl_structs.hpp"


namespace SDK
{

// Class MaterialsSplineCtrl.MaterialParamsPhxShadow
// 0x00D0 (0x0370 - 0x02A0)
class UMaterialParamsPhxShadow final : public USceneComponent
{
public:
	uint8                                         Pad_2A0[0x70];                                     // 0x02A0(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SphereRadius;                                      // 0x0310(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpheresCount;                                      // 0x0314(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereTimeCoverage;                                // 0x0318(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WobbleDistanceA;                                   // 0x031C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WobbleSpeedA;                                      // 0x0320(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WobbleDistanceB;                                   // 0x0324(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WobbleSpeedB;                                      // 0x0328(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DebugDraw;                                         // 0x032C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32D[0x3];                                      // 0x032D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialParameterCollection*           Collection;                                        // 0x0330(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoundingSphereParamName;                           // 0x0338(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ArrayFormatPattern;                                // 0x0340(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EntityPositionParamName;                           // 0x0350(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PreviousEntityPositionParamName;                   // 0x0358(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EntityRotationParamName;                           // 0x0360(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PreviousEntityRotationParamName;                   // 0x0368(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialParamsPhxShadow">();
	}
	static class UMaterialParamsPhxShadow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialParamsPhxShadow>();
	}
};
static_assert(alignof(UMaterialParamsPhxShadow) == 0x000010, "Wrong alignment on UMaterialParamsPhxShadow");
static_assert(sizeof(UMaterialParamsPhxShadow) == 0x000370, "Wrong size on UMaterialParamsPhxShadow");
static_assert(offsetof(UMaterialParamsPhxShadow, SphereRadius) == 0x000310, "Member 'UMaterialParamsPhxShadow::SphereRadius' has a wrong offset!");
static_assert(offsetof(UMaterialParamsPhxShadow, SpheresCount) == 0x000314, "Member 'UMaterialParamsPhxShadow::SpheresCount' has a wrong offset!");
static_assert(offsetof(UMaterialParamsPhxShadow, SphereTimeCoverage) == 0x000318, "Member 'UMaterialParamsPhxShadow::SphereTimeCoverage' has a wrong offset!");
static_assert(offsetof(UMaterialParamsPhxShadow, WobbleDistanceA) == 0x00031C, "Member 'UMaterialParamsPhxShadow::WobbleDistanceA' has a wrong offset!");
static_assert(offsetof(UMaterialParamsPhxShadow, WobbleSpeedA) == 0x000320, "Member 'UMaterialParamsPhxShadow::WobbleSpeedA' has a wrong offset!");
static_assert(offsetof(UMaterialParamsPhxShadow, WobbleDistanceB) == 0x000324, "Member 'UMaterialParamsPhxShadow::WobbleDistanceB' has a wrong offset!");
static_assert(offsetof(UMaterialParamsPhxShadow, WobbleSpeedB) == 0x000328, "Member 'UMaterialParamsPhxShadow::WobbleSpeedB' has a wrong offset!");
static_assert(offsetof(UMaterialParamsPhxShadow, DebugDraw) == 0x00032C, "Member 'UMaterialParamsPhxShadow::DebugDraw' has a wrong offset!");
static_assert(offsetof(UMaterialParamsPhxShadow, Collection) == 0x000330, "Member 'UMaterialParamsPhxShadow::Collection' has a wrong offset!");
static_assert(offsetof(UMaterialParamsPhxShadow, BoundingSphereParamName) == 0x000338, "Member 'UMaterialParamsPhxShadow::BoundingSphereParamName' has a wrong offset!");
static_assert(offsetof(UMaterialParamsPhxShadow, ArrayFormatPattern) == 0x000340, "Member 'UMaterialParamsPhxShadow::ArrayFormatPattern' has a wrong offset!");
static_assert(offsetof(UMaterialParamsPhxShadow, EntityPositionParamName) == 0x000350, "Member 'UMaterialParamsPhxShadow::EntityPositionParamName' has a wrong offset!");
static_assert(offsetof(UMaterialParamsPhxShadow, PreviousEntityPositionParamName) == 0x000358, "Member 'UMaterialParamsPhxShadow::PreviousEntityPositionParamName' has a wrong offset!");
static_assert(offsetof(UMaterialParamsPhxShadow, EntityRotationParamName) == 0x000360, "Member 'UMaterialParamsPhxShadow::EntityRotationParamName' has a wrong offset!");
static_assert(offsetof(UMaterialParamsPhxShadow, PreviousEntityRotationParamName) == 0x000368, "Member 'UMaterialParamsPhxShadow::PreviousEntityRotationParamName' has a wrong offset!");

// Class MaterialsSplineCtrl.MaterialParamsSplineCtrl
// 0x0058 (0x00F8 - 0x00A0)
class UMaterialParamsSplineCtrl final : public UActorComponent
{
public:
	class UMaterialInterface*                     PreviousMaterial;                                  // 0x00A0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A8[0x10];                                      // 0x00A8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Material;                                          // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMaterialCtrlParam>             Parameters;                                        // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x00D8(0x0004)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetBoundsScale;                                 // 0x00DC(0x0004)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DynamicChangesCheck;                               // 0x00E0(0x0001)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMaterialCtrlParamForcedBounds> BoundComponents;                                   // 0x00E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)

public:
	void ResetTime();
	void SetParamCurveByName(class FName Name_0, class UCurveBase* PCurve);
	void SetParamLoopAroundByName(class FName Name_0, bool State);
	void SetParamSpeedScaleByName(class FName Name_0, float Value);
	void SetParamValueScaleByName(class FName Name_0, float Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialParamsSplineCtrl">();
	}
	static class UMaterialParamsSplineCtrl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialParamsSplineCtrl>();
	}
};
static_assert(alignof(UMaterialParamsSplineCtrl) == 0x000008, "Wrong alignment on UMaterialParamsSplineCtrl");
static_assert(sizeof(UMaterialParamsSplineCtrl) == 0x0000F8, "Wrong size on UMaterialParamsSplineCtrl");
static_assert(offsetof(UMaterialParamsSplineCtrl, PreviousMaterial) == 0x0000A0, "Member 'UMaterialParamsSplineCtrl::PreviousMaterial' has a wrong offset!");
static_assert(offsetof(UMaterialParamsSplineCtrl, Material) == 0x0000B8, "Member 'UMaterialParamsSplineCtrl::Material' has a wrong offset!");
static_assert(offsetof(UMaterialParamsSplineCtrl, DynamicMaterial) == 0x0000C0, "Member 'UMaterialParamsSplineCtrl::DynamicMaterial' has a wrong offset!");
static_assert(offsetof(UMaterialParamsSplineCtrl, Parameters) == 0x0000C8, "Member 'UMaterialParamsSplineCtrl::Parameters' has a wrong offset!");
static_assert(offsetof(UMaterialParamsSplineCtrl, TimeScale) == 0x0000D8, "Member 'UMaterialParamsSplineCtrl::TimeScale' has a wrong offset!");
static_assert(offsetof(UMaterialParamsSplineCtrl, TargetBoundsScale) == 0x0000DC, "Member 'UMaterialParamsSplineCtrl::TargetBoundsScale' has a wrong offset!");
static_assert(offsetof(UMaterialParamsSplineCtrl, DynamicChangesCheck) == 0x0000E0, "Member 'UMaterialParamsSplineCtrl::DynamicChangesCheck' has a wrong offset!");
static_assert(offsetof(UMaterialParamsSplineCtrl, BoundComponents) == 0x0000E8, "Member 'UMaterialParamsSplineCtrl::BoundComponents' has a wrong offset!");

// Class MaterialsSplineCtrl.MaterialParamsSplineCtrlEx
// 0x0030 (0x00D0 - 0x00A0)
class UMaterialParamsSplineCtrlEx final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMaterialCtrl>                  Materials;                                         // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMaterialCtrlParam>             Parameters;                                        // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x00C8(0x0004)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DynamicChangesCheck;                               // 0x00CC(0x0001)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ForceBindingsUpdate();
	void ResetTime();
	void SetParamCurveByName(class FName Name_0, class UCurveBase* PCurve);
	void SetParamLoopAroundByName(class FName Name_0, bool State);
	void SetParamSpeedScaleByName(class FName Name_0, float Value);
	void SetParamValueScaleByName(class FName Name_0, float Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialParamsSplineCtrlEx">();
	}
	static class UMaterialParamsSplineCtrlEx* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialParamsSplineCtrlEx>();
	}
};
static_assert(alignof(UMaterialParamsSplineCtrlEx) == 0x000008, "Wrong alignment on UMaterialParamsSplineCtrlEx");
static_assert(sizeof(UMaterialParamsSplineCtrlEx) == 0x0000D0, "Wrong size on UMaterialParamsSplineCtrlEx");
static_assert(offsetof(UMaterialParamsSplineCtrlEx, Materials) == 0x0000A8, "Member 'UMaterialParamsSplineCtrlEx::Materials' has a wrong offset!");
static_assert(offsetof(UMaterialParamsSplineCtrlEx, Parameters) == 0x0000B8, "Member 'UMaterialParamsSplineCtrlEx::Parameters' has a wrong offset!");
static_assert(offsetof(UMaterialParamsSplineCtrlEx, TimeScale) == 0x0000C8, "Member 'UMaterialParamsSplineCtrlEx::TimeScale' has a wrong offset!");
static_assert(offsetof(UMaterialParamsSplineCtrlEx, DynamicChangesCheck) == 0x0000CC, "Member 'UMaterialParamsSplineCtrlEx::DynamicChangesCheck' has a wrong offset!");

}

