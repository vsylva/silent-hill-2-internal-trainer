#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Commons

#include "Basic.hpp"


namespace SDK
{

// ScriptStruct Commons.MinMaxVector2D
// 0x0008 (0x0008 - 0x0000)
struct FMinMaxVector2D final
{
public:
	float                                         Min;                                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMinMaxVector2D) == 0x000004, "Wrong alignment on FMinMaxVector2D");
static_assert(sizeof(FMinMaxVector2D) == 0x000008, "Wrong size on FMinMaxVector2D");
static_assert(offsetof(FMinMaxVector2D, Min) == 0x000000, "Member 'FMinMaxVector2D::Min' has a wrong offset!");
static_assert(offsetof(FMinMaxVector2D, Max) == 0x000004, "Member 'FMinMaxVector2D::Max' has a wrong offset!");

// ScriptStruct Commons.NamedHandle
// 0x0008 (0x0008 - 0x0000)
struct FNamedHandle
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNamedHandle) == 0x000004, "Wrong alignment on FNamedHandle");
static_assert(sizeof(FNamedHandle) == 0x000008, "Wrong size on FNamedHandle");
static_assert(offsetof(FNamedHandle, Name) == 0x000000, "Member 'FNamedHandle::Name' has a wrong offset!");

// ScriptStruct Commons.DirectionCondition
// 0x0014 (0x0014 - 0x0000)
struct FDirectionCondition final
{
public:
	float                                         YawAngle;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawAngleTolerance;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchAngle;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchAngleTolerance;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConeShape;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDirectionCondition) == 0x000004, "Wrong alignment on FDirectionCondition");
static_assert(sizeof(FDirectionCondition) == 0x000014, "Wrong size on FDirectionCondition");
static_assert(offsetof(FDirectionCondition, YawAngle) == 0x000000, "Member 'FDirectionCondition::YawAngle' has a wrong offset!");
static_assert(offsetof(FDirectionCondition, YawAngleTolerance) == 0x000004, "Member 'FDirectionCondition::YawAngleTolerance' has a wrong offset!");
static_assert(offsetof(FDirectionCondition, PitchAngle) == 0x000008, "Member 'FDirectionCondition::PitchAngle' has a wrong offset!");
static_assert(offsetof(FDirectionCondition, PitchAngleTolerance) == 0x00000C, "Member 'FDirectionCondition::PitchAngleTolerance' has a wrong offset!");
static_assert(offsetof(FDirectionCondition, bConeShape) == 0x000010, "Member 'FDirectionCondition::bConeShape' has a wrong offset!");

// ScriptStruct Commons.SharedBoolSwitchBlueprint
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FSharedBoolSwitchBlueprint final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSharedBoolSwitchBlueprint) == 0x000008, "Wrong alignment on FSharedBoolSwitchBlueprint");
static_assert(sizeof(FSharedBoolSwitchBlueprint) == 0x000010, "Wrong size on FSharedBoolSwitchBlueprint");

// ScriptStruct Commons.SimpleBentCurve
// 0x0008 (0x0008 - 0x0000)
struct FSimpleBentCurve final
{
public:
	float                                         BendPower;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSShape;                                           // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDescending;                                       // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSimpleBentCurve) == 0x000004, "Wrong alignment on FSimpleBentCurve");
static_assert(sizeof(FSimpleBentCurve) == 0x000008, "Wrong size on FSimpleBentCurve");
static_assert(offsetof(FSimpleBentCurve, BendPower) == 0x000000, "Member 'FSimpleBentCurve::BendPower' has a wrong offset!");
static_assert(offsetof(FSimpleBentCurve, bSShape) == 0x000004, "Member 'FSimpleBentCurve::bSShape' has a wrong offset!");
static_assert(offsetof(FSimpleBentCurve, bDescending) == 0x000005, "Member 'FSimpleBentCurve::bDescending' has a wrong offset!");

}

