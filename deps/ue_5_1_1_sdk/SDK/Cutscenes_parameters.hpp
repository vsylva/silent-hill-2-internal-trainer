#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Cutscenes

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Cutscenes_structs.hpp"


namespace SDK::Params
{

// Function Cutscenes.CutsceneCachedCharacterInterface.CachedActorDespawned
// 0x0001 (0x0001 - 0x0000)
struct CutsceneCachedCharacterInterface_CachedActorDespawned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CutsceneCachedCharacterInterface_CachedActorDespawned) == 0x000001, "Wrong alignment on CutsceneCachedCharacterInterface_CachedActorDespawned");
static_assert(sizeof(CutsceneCachedCharacterInterface_CachedActorDespawned) == 0x000001, "Wrong size on CutsceneCachedCharacterInterface_CachedActorDespawned");
static_assert(offsetof(CutsceneCachedCharacterInterface_CachedActorDespawned, ReturnValue) == 0x000000, "Member 'CutsceneCachedCharacterInterface_CachedActorDespawned::ReturnValue' has a wrong offset!");

// Function Cutscenes.CutsceneCachedCharacterInterface.CachedActorDisabled
// 0x0001 (0x0001 - 0x0000)
struct CutsceneCachedCharacterInterface_CachedActorDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CutsceneCachedCharacterInterface_CachedActorDisabled) == 0x000001, "Wrong alignment on CutsceneCachedCharacterInterface_CachedActorDisabled");
static_assert(sizeof(CutsceneCachedCharacterInterface_CachedActorDisabled) == 0x000001, "Wrong size on CutsceneCachedCharacterInterface_CachedActorDisabled");
static_assert(offsetof(CutsceneCachedCharacterInterface_CachedActorDisabled, ReturnValue) == 0x000000, "Member 'CutsceneCachedCharacterInterface_CachedActorDisabled::ReturnValue' has a wrong offset!");

// Function Cutscenes.CutsceneCachedCharacterInterface.CachedActorEnabled
// 0x0001 (0x0001 - 0x0000)
struct CutsceneCachedCharacterInterface_CachedActorEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CutsceneCachedCharacterInterface_CachedActorEnabled) == 0x000001, "Wrong alignment on CutsceneCachedCharacterInterface_CachedActorEnabled");
static_assert(sizeof(CutsceneCachedCharacterInterface_CachedActorEnabled) == 0x000001, "Wrong size on CutsceneCachedCharacterInterface_CachedActorEnabled");
static_assert(offsetof(CutsceneCachedCharacterInterface_CachedActorEnabled, ReturnValue) == 0x000000, "Member 'CutsceneCachedCharacterInterface_CachedActorEnabled::ReturnValue' has a wrong offset!");

// Function Cutscenes.CutsceneCachedCharacterInterface.CachedActorSpawned
// 0x0001 (0x0001 - 0x0000)
struct CutsceneCachedCharacterInterface_CachedActorSpawned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CutsceneCachedCharacterInterface_CachedActorSpawned) == 0x000001, "Wrong alignment on CutsceneCachedCharacterInterface_CachedActorSpawned");
static_assert(sizeof(CutsceneCachedCharacterInterface_CachedActorSpawned) == 0x000001, "Wrong size on CutsceneCachedCharacterInterface_CachedActorSpawned");
static_assert(offsetof(CutsceneCachedCharacterInterface_CachedActorSpawned, ReturnValue) == 0x000000, "Member 'CutsceneCachedCharacterInterface_CachedActorSpawned::ReturnValue' has a wrong offset!");

// Function Cutscenes.CutsceneCharacterAnimInstance.CalculateFaceSlotAlpha
// 0x0004 (0x0004 - 0x0000)
struct CutsceneCharacterAnimInstance_CalculateFaceSlotAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CutsceneCharacterAnimInstance_CalculateFaceSlotAlpha) == 0x000004, "Wrong alignment on CutsceneCharacterAnimInstance_CalculateFaceSlotAlpha");
static_assert(sizeof(CutsceneCharacterAnimInstance_CalculateFaceSlotAlpha) == 0x000004, "Wrong size on CutsceneCharacterAnimInstance_CalculateFaceSlotAlpha");
static_assert(offsetof(CutsceneCharacterAnimInstance_CalculateFaceSlotAlpha, ReturnValue) == 0x000000, "Member 'CutsceneCharacterAnimInstance_CalculateFaceSlotAlpha::ReturnValue' has a wrong offset!");

// Function Cutscenes.CutsceneCharacterAnimInstance.IsPlayingAnySlotAnimation
// 0x000C (0x000C - 0x0000)
struct CutsceneCharacterAnimInstance_IsPlayingAnySlotAnimation final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CutsceneCharacterAnimInstance_IsPlayingAnySlotAnimation) == 0x000004, "Wrong alignment on CutsceneCharacterAnimInstance_IsPlayingAnySlotAnimation");
static_assert(sizeof(CutsceneCharacterAnimInstance_IsPlayingAnySlotAnimation) == 0x00000C, "Wrong size on CutsceneCharacterAnimInstance_IsPlayingAnySlotAnimation");
static_assert(offsetof(CutsceneCharacterAnimInstance_IsPlayingAnySlotAnimation, SlotName) == 0x000000, "Member 'CutsceneCharacterAnimInstance_IsPlayingAnySlotAnimation::SlotName' has a wrong offset!");
static_assert(offsetof(CutsceneCharacterAnimInstance_IsPlayingAnySlotAnimation, ReturnValue) == 0x000008, "Member 'CutsceneCharacterAnimInstance_IsPlayingAnySlotAnimation::ReturnValue' has a wrong offset!");

// Function Cutscenes.CutscenePlayer.Activate
// 0x0001 (0x0001 - 0x0000)
struct CutscenePlayer_Activate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CutscenePlayer_Activate) == 0x000001, "Wrong alignment on CutscenePlayer_Activate");
static_assert(sizeof(CutscenePlayer_Activate) == 0x000001, "Wrong size on CutscenePlayer_Activate");
static_assert(offsetof(CutscenePlayer_Activate, ReturnValue) == 0x000000, "Member 'CutscenePlayer_Activate::ReturnValue' has a wrong offset!");

// DelegateFunction Cutscenes.CutscenePlayer.CutsceneFinishedEvent__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct CutscenePlayer_CutsceneFinishedEvent__DelegateSignature final
{
public:
	bool                                          WasSkiped;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CutscenePlayer_CutsceneFinishedEvent__DelegateSignature) == 0x000001, "Wrong alignment on CutscenePlayer_CutsceneFinishedEvent__DelegateSignature");
static_assert(sizeof(CutscenePlayer_CutsceneFinishedEvent__DelegateSignature) == 0x000001, "Wrong size on CutscenePlayer_CutsceneFinishedEvent__DelegateSignature");
static_assert(offsetof(CutscenePlayer_CutsceneFinishedEvent__DelegateSignature, WasSkiped) == 0x000000, "Member 'CutscenePlayer_CutsceneFinishedEvent__DelegateSignature::WasSkiped' has a wrong offset!");

// Function Cutscenes.CutscenePlayer.IsCharacterBindedWithProxy
// 0x0010 (0x0010 - 0x0000)
struct CutscenePlayer_IsCharacterBindedWithProxy final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CutscenePlayer_IsCharacterBindedWithProxy) == 0x000008, "Wrong alignment on CutscenePlayer_IsCharacterBindedWithProxy");
static_assert(sizeof(CutscenePlayer_IsCharacterBindedWithProxy) == 0x000010, "Wrong size on CutscenePlayer_IsCharacterBindedWithProxy");
static_assert(offsetof(CutscenePlayer_IsCharacterBindedWithProxy, Character) == 0x000000, "Member 'CutscenePlayer_IsCharacterBindedWithProxy::Character' has a wrong offset!");
static_assert(offsetof(CutscenePlayer_IsCharacterBindedWithProxy, ReturnValue) == 0x000008, "Member 'CutscenePlayer_IsCharacterBindedWithProxy::ReturnValue' has a wrong offset!");

// DelegateFunction Cutscenes.CutscenePlayer.OnCutsceneCameraCutEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct CutscenePlayer_OnCutsceneCameraCutEvent__DelegateSignature final
{
public:
	class UCameraComponent*                       CameraComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CutscenePlayer_OnCutsceneCameraCutEvent__DelegateSignature) == 0x000008, "Wrong alignment on CutscenePlayer_OnCutsceneCameraCutEvent__DelegateSignature");
static_assert(sizeof(CutscenePlayer_OnCutsceneCameraCutEvent__DelegateSignature) == 0x000008, "Wrong size on CutscenePlayer_OnCutsceneCameraCutEvent__DelegateSignature");
static_assert(offsetof(CutscenePlayer_OnCutsceneCameraCutEvent__DelegateSignature, CameraComponent) == 0x000000, "Member 'CutscenePlayer_OnCutsceneCameraCutEvent__DelegateSignature::CameraComponent' has a wrong offset!");

// Function Cutscenes.CutscenePlayer.OnLevelSequenceCameraCut
// 0x0008 (0x0008 - 0x0000)
struct CutscenePlayer_OnLevelSequenceCameraCut final
{
public:
	class UCameraComponent*                       CameraComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CutscenePlayer_OnLevelSequenceCameraCut) == 0x000008, "Wrong alignment on CutscenePlayer_OnLevelSequenceCameraCut");
static_assert(sizeof(CutscenePlayer_OnLevelSequenceCameraCut) == 0x000008, "Wrong size on CutscenePlayer_OnLevelSequenceCameraCut");
static_assert(offsetof(CutscenePlayer_OnLevelSequenceCameraCut, CameraComponent) == 0x000000, "Member 'CutscenePlayer_OnLevelSequenceCameraCut::CameraComponent' has a wrong offset!");

// Function Cutscenes.CutscenePlayer.UnbindCharacterWithProxy
// 0x0010 (0x0010 - 0x0000)
struct CutscenePlayer_UnbindCharacterWithProxy final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CutscenePlayer_UnbindCharacterWithProxy) == 0x000008, "Wrong alignment on CutscenePlayer_UnbindCharacterWithProxy");
static_assert(sizeof(CutscenePlayer_UnbindCharacterWithProxy) == 0x000010, "Wrong size on CutscenePlayer_UnbindCharacterWithProxy");
static_assert(offsetof(CutscenePlayer_UnbindCharacterWithProxy, Character) == 0x000000, "Member 'CutscenePlayer_UnbindCharacterWithProxy::Character' has a wrong offset!");
static_assert(offsetof(CutscenePlayer_UnbindCharacterWithProxy, ReturnValue) == 0x000008, "Member 'CutscenePlayer_UnbindCharacterWithProxy::ReturnValue' has a wrong offset!");

// Function Cutscenes.CutscenePlayer.IsAlreadyPlayedOnce
// 0x0001 (0x0001 - 0x0000)
struct CutscenePlayer_IsAlreadyPlayedOnce final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CutscenePlayer_IsAlreadyPlayedOnce) == 0x000001, "Wrong alignment on CutscenePlayer_IsAlreadyPlayedOnce");
static_assert(sizeof(CutscenePlayer_IsAlreadyPlayedOnce) == 0x000001, "Wrong size on CutscenePlayer_IsAlreadyPlayedOnce");
static_assert(offsetof(CutscenePlayer_IsAlreadyPlayedOnce, ReturnValue) == 0x000000, "Member 'CutscenePlayer_IsAlreadyPlayedOnce::ReturnValue' has a wrong offset!");

// Function Cutscenes.CutscenePlayer.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct CutscenePlayer_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CutscenePlayer_IsPlaying) == 0x000001, "Wrong alignment on CutscenePlayer_IsPlaying");
static_assert(sizeof(CutscenePlayer_IsPlaying) == 0x000001, "Wrong size on CutscenePlayer_IsPlaying");
static_assert(offsetof(CutscenePlayer_IsPlaying, ReturnValue) == 0x000000, "Member 'CutscenePlayer_IsPlaying::ReturnValue' has a wrong offset!");

// Function Cutscenes.CutsceneProxyToGameplayEventsRelay.IgnoreInputPose
// 0x0001 (0x0001 - 0x0000)
struct CutsceneProxyToGameplayEventsRelay_IgnoreInputPose final
{
public:
	bool                                          Ignore;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CutsceneProxyToGameplayEventsRelay_IgnoreInputPose) == 0x000001, "Wrong alignment on CutsceneProxyToGameplayEventsRelay_IgnoreInputPose");
static_assert(sizeof(CutsceneProxyToGameplayEventsRelay_IgnoreInputPose) == 0x000001, "Wrong size on CutsceneProxyToGameplayEventsRelay_IgnoreInputPose");
static_assert(offsetof(CutsceneProxyToGameplayEventsRelay_IgnoreInputPose, Ignore) == 0x000000, "Member 'CutsceneProxyToGameplayEventsRelay_IgnoreInputPose::Ignore' has a wrong offset!");

// Function Cutscenes.CutsceneProxyToGameplayEventsRelay.SetClothAnimDrive
// 0x0028 (0x0028 - 0x0000)
struct CutsceneProxyToGameplayEventsRelay_SetClothAnimDrive final
{
public:
	class FName                                   ClothName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              AnimDriveStiffness;                                // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              AnimDriveDamping;                                  // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CutsceneProxyToGameplayEventsRelay_SetClothAnimDrive) == 0x000008, "Wrong alignment on CutsceneProxyToGameplayEventsRelay_SetClothAnimDrive");
static_assert(sizeof(CutsceneProxyToGameplayEventsRelay_SetClothAnimDrive) == 0x000028, "Wrong size on CutsceneProxyToGameplayEventsRelay_SetClothAnimDrive");
static_assert(offsetof(CutsceneProxyToGameplayEventsRelay_SetClothAnimDrive, ClothName) == 0x000000, "Member 'CutsceneProxyToGameplayEventsRelay_SetClothAnimDrive::ClothName' has a wrong offset!");
static_assert(offsetof(CutsceneProxyToGameplayEventsRelay_SetClothAnimDrive, AnimDriveStiffness) == 0x000008, "Member 'CutsceneProxyToGameplayEventsRelay_SetClothAnimDrive::AnimDriveStiffness' has a wrong offset!");
static_assert(offsetof(CutsceneProxyToGameplayEventsRelay_SetClothAnimDrive, AnimDriveDamping) == 0x000018, "Member 'CutsceneProxyToGameplayEventsRelay_SetClothAnimDrive::AnimDriveDamping' has a wrong offset!");

// Function Cutscenes.CutsceneSkipWidget.OnDebugTick
// 0x0008 (0x0008 - 0x0000)
struct CutsceneSkipWidget_OnDebugTick final
{
public:
	float                                         ActualTime;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CutsceneSkipWidget_OnDebugTick) == 0x000004, "Wrong alignment on CutsceneSkipWidget_OnDebugTick");
static_assert(sizeof(CutsceneSkipWidget_OnDebugTick) == 0x000008, "Wrong size on CutsceneSkipWidget_OnDebugTick");
static_assert(offsetof(CutsceneSkipWidget_OnDebugTick, ActualTime) == 0x000000, "Member 'CutsceneSkipWidget_OnDebugTick::ActualTime' has a wrong offset!");
static_assert(offsetof(CutsceneSkipWidget_OnDebugTick, TotalTime) == 0x000004, "Member 'CutsceneSkipWidget_OnDebugTick::TotalTime' has a wrong offset!");

// Function Cutscenes.CutsceneSkipWidget.OnSkipTick
// 0x0004 (0x0004 - 0x0000)
struct CutsceneSkipWidget_OnSkipTick final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CutsceneSkipWidget_OnSkipTick) == 0x000004, "Wrong alignment on CutsceneSkipWidget_OnSkipTick");
static_assert(sizeof(CutsceneSkipWidget_OnSkipTick) == 0x000004, "Wrong size on CutsceneSkipWidget_OnSkipTick");
static_assert(offsetof(CutsceneSkipWidget_OnSkipTick, Progress) == 0x000000, "Member 'CutsceneSkipWidget_OnSkipTick::Progress' has a wrong offset!");

// Function Cutscenes.CutsceneSkipWidget.GetCanSkip
// 0x0001 (0x0001 - 0x0000)
struct CutsceneSkipWidget_GetCanSkip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CutsceneSkipWidget_GetCanSkip) == 0x000001, "Wrong alignment on CutsceneSkipWidget_GetCanSkip");
static_assert(sizeof(CutsceneSkipWidget_GetCanSkip) == 0x000001, "Wrong size on CutsceneSkipWidget_GetCanSkip");
static_assert(offsetof(CutsceneSkipWidget_GetCanSkip, ReturnValue) == 0x000000, "Member 'CutsceneSkipWidget_GetCanSkip::ReturnValue' has a wrong offset!");

// Function Cutscenes.CutscenesLog.PrintStringToMessageLog
// 0x0020 (0x0020 - 0x0000)
struct CutscenesLog_PrintStringToMessageLog final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 String;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELogMessageSeverity                           MessageSeverity;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CutscenesLog_PrintStringToMessageLog) == 0x000008, "Wrong alignment on CutscenesLog_PrintStringToMessageLog");
static_assert(sizeof(CutscenesLog_PrintStringToMessageLog) == 0x000020, "Wrong size on CutscenesLog_PrintStringToMessageLog");
static_assert(offsetof(CutscenesLog_PrintStringToMessageLog, WorldContextObject) == 0x000000, "Member 'CutscenesLog_PrintStringToMessageLog::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CutscenesLog_PrintStringToMessageLog, String) == 0x000008, "Member 'CutscenesLog_PrintStringToMessageLog::String' has a wrong offset!");
static_assert(offsetof(CutscenesLog_PrintStringToMessageLog, MessageSeverity) == 0x000018, "Member 'CutscenesLog_PrintStringToMessageLog::MessageSeverity' has a wrong offset!");

}

