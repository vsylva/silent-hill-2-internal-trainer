#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BlooberWwise

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "AkAudio_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Niagara_classes.hpp"


namespace SDK
{

// Class BlooberWwise.BlooberAkPortalComponent
// 0x0000 (0x0390 - 0x0390)
class UBlooberAkPortalComponent : public UAkPortalComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlooberAkPortalComponent">();
	}
	static class UBlooberAkPortalComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlooberAkPortalComponent>();
	}
};
static_assert(alignof(UBlooberAkPortalComponent) == 0x000010, "Wrong alignment on UBlooberAkPortalComponent");
static_assert(sizeof(UBlooberAkPortalComponent) == 0x000390, "Wrong size on UBlooberAkPortalComponent");

// Class BlooberWwise.BlooberAkAcousticPortal
// 0x0000 (0x02F8 - 0x02F8)
class ABlooberAkAcousticPortal : public AAkAcousticPortal
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlooberAkAcousticPortal">();
	}
	static class ABlooberAkAcousticPortal* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABlooberAkAcousticPortal>();
	}
};
static_assert(alignof(ABlooberAkAcousticPortal) == 0x000008, "Wrong alignment on ABlooberAkAcousticPortal");
static_assert(sizeof(ABlooberAkAcousticPortal) == 0x0002F8, "Wrong size on ABlooberAkAcousticPortal");

// Class BlooberWwise.BlooberAkAmbientSound
// 0x0000 (0x02F8 - 0x02F8)
class ABlooberAkAmbientSound : public AAkAmbientSound
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlooberAkAmbientSound">();
	}
	static class ABlooberAkAmbientSound* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABlooberAkAmbientSound>();
	}
};
static_assert(alignof(ABlooberAkAmbientSound) == 0x000008, "Wrong alignment on ABlooberAkAmbientSound");
static_assert(sizeof(ABlooberAkAmbientSound) == 0x0002F8, "Wrong size on ABlooberAkAmbientSound");

// Class BlooberWwise.BlooberAkVisualizationComponent
// 0x01D0 (0x0470 - 0x02A0)
class UBlooberAkVisualizationComponent final : public USceneComponent
{
public:
	uint8                                         Pad_2A0[0x1B8];                                    // 0x02A0(0x01B8)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              DbgScreenPosition;                                 // 0x0458(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_468[0x8];                                      // 0x0468(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlooberAkVisualizationComponent">();
	}
	static class UBlooberAkVisualizationComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlooberAkVisualizationComponent>();
	}
};
static_assert(alignof(UBlooberAkVisualizationComponent) == 0x000010, "Wrong alignment on UBlooberAkVisualizationComponent");
static_assert(sizeof(UBlooberAkVisualizationComponent) == 0x000470, "Wrong size on UBlooberAkVisualizationComponent");
static_assert(offsetof(UBlooberAkVisualizationComponent, DbgScreenPosition) == 0x000458, "Member 'UBlooberAkVisualizationComponent::DbgScreenPosition' has a wrong offset!");

// Class BlooberWwise.BlooberAkComponent
// 0x0010 (0x04B0 - 0x04A0)
#pragma pack(push, 0x1)
class alignas(0x10) UBlooberAkComponent : public UAkComponent
{
public:
	uint8                                         Pad_4A0[0x8];                                      // 0x04A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EnableDynamicTick();
	int32 SimplePostAkEvent(class UAkAudioEvent* InEvent);
	int32 SimplePostAssociatedAkEvent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlooberAkComponent">();
	}
	static class UBlooberAkComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlooberAkComponent>();
	}
};
#pragma pack(pop)
static_assert(alignof(UBlooberAkComponent) == 0x000010, "Wrong alignment on UBlooberAkComponent");
static_assert(sizeof(UBlooberAkComponent) == 0x0004B0, "Wrong size on UBlooberAkComponent");

// Class BlooberWwise.BlooberAkLateReverbComponent
// 0x0000 (0x0330 - 0x0330)
class UBlooberAkLateReverbComponent : public UAkLateReverbComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlooberAkLateReverbComponent">();
	}
	static class UBlooberAkLateReverbComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlooberAkLateReverbComponent>();
	}
};
static_assert(alignof(UBlooberAkLateReverbComponent) == 0x000010, "Wrong alignment on UBlooberAkLateReverbComponent");
static_assert(sizeof(UBlooberAkLateReverbComponent) == 0x000330, "Wrong size on UBlooberAkLateReverbComponent");

// Class BlooberWwise.BlooberAkReverbVolume
// 0x0000 (0x0320 - 0x0320)
class ABlooberAkReverbVolume : public AAkReverbVolume
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlooberAkReverbVolume">();
	}
	static class ABlooberAkReverbVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABlooberAkReverbVolume>();
	}
};
static_assert(alignof(ABlooberAkReverbVolume) == 0x000008, "Wrong alignment on ABlooberAkReverbVolume");
static_assert(sizeof(ABlooberAkReverbVolume) == 0x000320, "Wrong size on ABlooberAkReverbVolume");

// Class BlooberWwise.BlooberAkRoomComponent
// 0x0000 (0x0300 - 0x0300)
class UBlooberAkRoomComponent : public UAkRoomComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlooberAkRoomComponent">();
	}
	static class UBlooberAkRoomComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlooberAkRoomComponent>();
	}
};
static_assert(alignof(UBlooberAkRoomComponent) == 0x000010, "Wrong alignment on UBlooberAkRoomComponent");
static_assert(sizeof(UBlooberAkRoomComponent) == 0x000300, "Wrong size on UBlooberAkRoomComponent");

// Class BlooberWwise.BlooberAkSpatialAudioVolume
// 0x0000 (0x0300 - 0x0300)
class ABlooberAkSpatialAudioVolume : public AAkSpatialAudioVolume
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlooberAkSpatialAudioVolume">();
	}
	static class ABlooberAkSpatialAudioVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABlooberAkSpatialAudioVolume>();
	}
};
static_assert(alignof(ABlooberAkSpatialAudioVolume) == 0x000008, "Wrong alignment on ABlooberAkSpatialAudioVolume");
static_assert(sizeof(ABlooberAkSpatialAudioVolume) == 0x000300, "Wrong size on ABlooberAkSpatialAudioVolume");

// Class BlooberWwise.BlooberAkSpotReflector
// 0x0000 (0x02E8 - 0x02E8)
class ABlooberAkSpotReflector : public AAkSpotReflector
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlooberAkSpotReflector">();
	}
	static class ABlooberAkSpotReflector* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABlooberAkSpotReflector>();
	}
};
static_assert(alignof(ABlooberAkSpotReflector) == 0x000008, "Wrong alignment on ABlooberAkSpotReflector");
static_assert(sizeof(ABlooberAkSpotReflector) == 0x0002E8, "Wrong size on ABlooberAkSpotReflector");

// Class BlooberWwise.BlooberAkVisualizationActor
// 0x0010 (0x02C0 - 0x02B0)
class ABlooberAkVisualizationActor final : public AActor
{
public:
	class UBlooberAkVisualizationComponent*       VisComponent;                                      // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UInstancedStaticMeshComponent*          InstComponent;                                     // 0x02B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlooberAkVisualizationActor">();
	}
	static class ABlooberAkVisualizationActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABlooberAkVisualizationActor>();
	}
};
static_assert(alignof(ABlooberAkVisualizationActor) == 0x000008, "Wrong alignment on ABlooberAkVisualizationActor");
static_assert(sizeof(ABlooberAkVisualizationActor) == 0x0002C0, "Wrong size on ABlooberAkVisualizationActor");
static_assert(offsetof(ABlooberAkVisualizationActor, VisComponent) == 0x0002B0, "Member 'ABlooberAkVisualizationActor::VisComponent' has a wrong offset!");
static_assert(offsetof(ABlooberAkVisualizationActor, InstComponent) == 0x0002B8, "Member 'ABlooberAkVisualizationActor::InstComponent' has a wrong offset!");

// Class BlooberWwise.BlooberNiagaraAkAudioPlayer
// 0x0028 (0x0060 - 0x0038)
class UBlooberNiagaraAkAudioPlayer final : public UNiagaraDataInterface
{
public:
	class UAkAudioEvent*                          SoundToPlay;                                       // 0x0038(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         StrParameterNames;                                 // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bLimitPlaysPerTick;                                // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxPlaysPerTick;                                   // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenComponentIsDestroyed;                     // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowLoopingOneShotSounds;                        // 0x0059(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlooberNiagaraAkAudioPlayer">();
	}
	static class UBlooberNiagaraAkAudioPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlooberNiagaraAkAudioPlayer>();
	}
};
static_assert(alignof(UBlooberNiagaraAkAudioPlayer) == 0x000008, "Wrong alignment on UBlooberNiagaraAkAudioPlayer");
static_assert(sizeof(UBlooberNiagaraAkAudioPlayer) == 0x000060, "Wrong size on UBlooberNiagaraAkAudioPlayer");
static_assert(offsetof(UBlooberNiagaraAkAudioPlayer, SoundToPlay) == 0x000038, "Member 'UBlooberNiagaraAkAudioPlayer::SoundToPlay' has a wrong offset!");
static_assert(offsetof(UBlooberNiagaraAkAudioPlayer, StrParameterNames) == 0x000040, "Member 'UBlooberNiagaraAkAudioPlayer::StrParameterNames' has a wrong offset!");
static_assert(offsetof(UBlooberNiagaraAkAudioPlayer, bLimitPlaysPerTick) == 0x000050, "Member 'UBlooberNiagaraAkAudioPlayer::bLimitPlaysPerTick' has a wrong offset!");
static_assert(offsetof(UBlooberNiagaraAkAudioPlayer, MaxPlaysPerTick) == 0x000054, "Member 'UBlooberNiagaraAkAudioPlayer::MaxPlaysPerTick' has a wrong offset!");
static_assert(offsetof(UBlooberNiagaraAkAudioPlayer, bStopWhenComponentIsDestroyed) == 0x000058, "Member 'UBlooberNiagaraAkAudioPlayer::bStopWhenComponentIsDestroyed' has a wrong offset!");
static_assert(offsetof(UBlooberNiagaraAkAudioPlayer, bAllowLoopingOneShotSounds) == 0x000059, "Member 'UBlooberNiagaraAkAudioPlayer::bAllowLoopingOneShotSounds' has a wrong offset!");

}

