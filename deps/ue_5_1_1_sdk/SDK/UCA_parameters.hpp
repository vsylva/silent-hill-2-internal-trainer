#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UCA

#include "Basic.hpp"

#include "UCA_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function UCA.UCADebugCounterItemWidget.OnInit
// 0x0030 (0x0030 - 0x0000)
struct UCADebugCounterItemWidget_OnInit final
{
public:
	class FText                                   Name_0;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Type;                                              // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCADebugCounterItemWidget_OnInit) == 0x000008, "Wrong alignment on UCADebugCounterItemWidget_OnInit");
static_assert(sizeof(UCADebugCounterItemWidget_OnInit) == 0x000030, "Wrong size on UCADebugCounterItemWidget_OnInit");
static_assert(offsetof(UCADebugCounterItemWidget_OnInit, Name_0) == 0x000000, "Member 'UCADebugCounterItemWidget_OnInit::Name_0' has a wrong offset!");
static_assert(offsetof(UCADebugCounterItemWidget_OnInit, Type) == 0x000018, "Member 'UCADebugCounterItemWidget_OnInit::Type' has a wrong offset!");

// Function UCA.UCADebugCounterItemWidget.OnRefresh
// 0x0018 (0x0018 - 0x0000)
struct UCADebugCounterItemWidget_OnRefresh final
{
public:
	class FText                                   Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCADebugCounterItemWidget_OnRefresh) == 0x000008, "Wrong alignment on UCADebugCounterItemWidget_OnRefresh");
static_assert(sizeof(UCADebugCounterItemWidget_OnRefresh) == 0x000018, "Wrong size on UCADebugCounterItemWidget_OnRefresh");
static_assert(offsetof(UCADebugCounterItemWidget_OnRefresh, Value) == 0x000000, "Member 'UCADebugCounterItemWidget_OnRefresh::Value' has a wrong offset!");

// Function UCA.UCADebugAchvItemWidget.OnInit
// 0x0028 (0x0028 - 0x0000)
struct UCADebugAchvItemWidget_OnInit final
{
public:
	class FText                                   Name_0;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          SinglePlaythrough;                                 // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Threshold;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSimple;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UCADebugAchvItemWidget_OnInit) == 0x000008, "Wrong alignment on UCADebugAchvItemWidget_OnInit");
static_assert(sizeof(UCADebugAchvItemWidget_OnInit) == 0x000028, "Wrong size on UCADebugAchvItemWidget_OnInit");
static_assert(offsetof(UCADebugAchvItemWidget_OnInit, Name_0) == 0x000000, "Member 'UCADebugAchvItemWidget_OnInit::Name_0' has a wrong offset!");
static_assert(offsetof(UCADebugAchvItemWidget_OnInit, SinglePlaythrough) == 0x000018, "Member 'UCADebugAchvItemWidget_OnInit::SinglePlaythrough' has a wrong offset!");
static_assert(offsetof(UCADebugAchvItemWidget_OnInit, Threshold) == 0x00001C, "Member 'UCADebugAchvItemWidget_OnInit::Threshold' has a wrong offset!");
static_assert(offsetof(UCADebugAchvItemWidget_OnInit, IsSimple) == 0x000020, "Member 'UCADebugAchvItemWidget_OnInit::IsSimple' has a wrong offset!");

// Function UCA.UCADebugAchvItemWidget.OnRefresh
// 0x0020 (0x0020 - 0x0000)
struct UCADebugAchvItemWidget_OnRefresh final
{
public:
	class FText                                   Progress;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          IsUnlocked;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UCADebugAchvItemWidget_OnRefresh) == 0x000008, "Wrong alignment on UCADebugAchvItemWidget_OnRefresh");
static_assert(sizeof(UCADebugAchvItemWidget_OnRefresh) == 0x000020, "Wrong size on UCADebugAchvItemWidget_OnRefresh");
static_assert(offsetof(UCADebugAchvItemWidget_OnRefresh, Progress) == 0x000000, "Member 'UCADebugAchvItemWidget_OnRefresh::Progress' has a wrong offset!");
static_assert(offsetof(UCADebugAchvItemWidget_OnRefresh, IsUnlocked) == 0x000018, "Member 'UCADebugAchvItemWidget_OnRefresh::IsUnlocked' has a wrong offset!");

// Function UCA.UCADebugWidget.OnRefresh
// 0x0018 (0x0018 - 0x0000)
struct UCADebugWidget_OnRefresh final
{
public:
	class FText                                   Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCADebugWidget_OnRefresh) == 0x000008, "Wrong alignment on UCADebugWidget_OnRefresh");
static_assert(sizeof(UCADebugWidget_OnRefresh) == 0x000018, "Wrong size on UCADebugWidget_OnRefresh");
static_assert(offsetof(UCADebugWidget_OnRefresh, Value) == 0x000000, "Member 'UCADebugWidget_OnRefresh::Value' has a wrong offset!");

// Function UCA.UCADebugWidget.GetOnlineSystemInfo
// 0x0018 (0x0018 - 0x0000)
struct UCADebugWidget_GetOnlineSystemInfo final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCADebugWidget_GetOnlineSystemInfo) == 0x000008, "Wrong alignment on UCADebugWidget_GetOnlineSystemInfo");
static_assert(sizeof(UCADebugWidget_GetOnlineSystemInfo) == 0x000018, "Wrong size on UCADebugWidget_GetOnlineSystemInfo");
static_assert(offsetof(UCADebugWidget_GetOnlineSystemInfo, ReturnValue) == 0x000000, "Member 'UCADebugWidget_GetOnlineSystemInfo::ReturnValue' has a wrong offset!");

// Function UCA.UCAStatics.AddAchievementCollectionGuid
// 0x0020 (0x0020 - 0x0000)
struct UCAStatics_AddAchievementCollectionGuid final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCollectionHandle                      Collection;                                        // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Guid;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCAStatics_AddAchievementCollectionGuid) == 0x000008, "Wrong alignment on UCAStatics_AddAchievementCollectionGuid");
static_assert(sizeof(UCAStatics_AddAchievementCollectionGuid) == 0x000020, "Wrong size on UCAStatics_AddAchievementCollectionGuid");
static_assert(offsetof(UCAStatics_AddAchievementCollectionGuid, WorldContextObject) == 0x000000, "Member 'UCAStatics_AddAchievementCollectionGuid::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UCAStatics_AddAchievementCollectionGuid, Collection) == 0x000008, "Member 'UCAStatics_AddAchievementCollectionGuid::Collection' has a wrong offset!");
static_assert(offsetof(UCAStatics_AddAchievementCollectionGuid, Guid) == 0x000010, "Member 'UCAStatics_AddAchievementCollectionGuid::Guid' has a wrong offset!");

// Function UCA.UCAStatics.AddAchievementCollectionGuidFromActor
// 0x0018 (0x0018 - 0x0000)
struct UCAStatics_AddAchievementCollectionGuidFromActor final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCollectionHandle                      Collection;                                        // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCAStatics_AddAchievementCollectionGuidFromActor) == 0x000008, "Wrong alignment on UCAStatics_AddAchievementCollectionGuidFromActor");
static_assert(sizeof(UCAStatics_AddAchievementCollectionGuidFromActor) == 0x000018, "Wrong size on UCAStatics_AddAchievementCollectionGuidFromActor");
static_assert(offsetof(UCAStatics_AddAchievementCollectionGuidFromActor, WorldContextObject) == 0x000000, "Member 'UCAStatics_AddAchievementCollectionGuidFromActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UCAStatics_AddAchievementCollectionGuidFromActor, Collection) == 0x000008, "Member 'UCAStatics_AddAchievementCollectionGuidFromActor::Collection' has a wrong offset!");
static_assert(offsetof(UCAStatics_AddAchievementCollectionGuidFromActor, Actor) == 0x000010, "Member 'UCAStatics_AddAchievementCollectionGuidFromActor::Actor' has a wrong offset!");

// Function UCA.UCAStatics.AddAchievementCounter
// 0x0018 (0x0018 - 0x0000)
struct UCAStatics_AddAchievementCounter final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCounterHandle                         Counter;                                           // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Delta;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UCAStatics_AddAchievementCounter) == 0x000008, "Wrong alignment on UCAStatics_AddAchievementCounter");
static_assert(sizeof(UCAStatics_AddAchievementCounter) == 0x000018, "Wrong size on UCAStatics_AddAchievementCounter");
static_assert(offsetof(UCAStatics_AddAchievementCounter, WorldContextObject) == 0x000000, "Member 'UCAStatics_AddAchievementCounter::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UCAStatics_AddAchievementCounter, Counter) == 0x000008, "Member 'UCAStatics_AddAchievementCounter::Counter' has a wrong offset!");
static_assert(offsetof(UCAStatics_AddAchievementCounter, Delta) == 0x000010, "Member 'UCAStatics_AddAchievementCounter::Delta' has a wrong offset!");

// Function UCA.UCAStatics.EndActivity
// 0x0018 (0x0018 - 0x0000)
struct UCAStatics_EndActivity final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActivityHandle                        Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActivityOutcome                              Outcome;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UCAStatics_EndActivity) == 0x000008, "Wrong alignment on UCAStatics_EndActivity");
static_assert(sizeof(UCAStatics_EndActivity) == 0x000018, "Wrong size on UCAStatics_EndActivity");
static_assert(offsetof(UCAStatics_EndActivity, WorldContextObject) == 0x000000, "Member 'UCAStatics_EndActivity::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UCAStatics_EndActivity, Handle) == 0x000008, "Member 'UCAStatics_EndActivity::Handle' has a wrong offset!");
static_assert(offsetof(UCAStatics_EndActivity, Outcome) == 0x000010, "Member 'UCAStatics_EndActivity::Outcome' has a wrong offset!");

// Function UCA.UCAStatics.IncrementAchievementCounter
// 0x0010 (0x0010 - 0x0000)
struct UCAStatics_IncrementAchievementCounter final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCounterHandle                         Counter;                                           // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCAStatics_IncrementAchievementCounter) == 0x000008, "Wrong alignment on UCAStatics_IncrementAchievementCounter");
static_assert(sizeof(UCAStatics_IncrementAchievementCounter) == 0x000010, "Wrong size on UCAStatics_IncrementAchievementCounter");
static_assert(offsetof(UCAStatics_IncrementAchievementCounter, WorldContextObject) == 0x000000, "Member 'UCAStatics_IncrementAchievementCounter::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UCAStatics_IncrementAchievementCounter, Counter) == 0x000008, "Member 'UCAStatics_IncrementAchievementCounter::Counter' has a wrong offset!");

// Function UCA.UCAStatics.ResumeActivity
// 0x0010 (0x0010 - 0x0000)
struct UCAStatics_ResumeActivity final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActivityHandle                        Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCAStatics_ResumeActivity) == 0x000008, "Wrong alignment on UCAStatics_ResumeActivity");
static_assert(sizeof(UCAStatics_ResumeActivity) == 0x000010, "Wrong size on UCAStatics_ResumeActivity");
static_assert(offsetof(UCAStatics_ResumeActivity, WorldContextObject) == 0x000000, "Member 'UCAStatics_ResumeActivity::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UCAStatics_ResumeActivity, Handle) == 0x000008, "Member 'UCAStatics_ResumeActivity::Handle' has a wrong offset!");

// Function UCA.UCAStatics.SetActivityAvailability
// 0x0018 (0x0018 - 0x0000)
struct UCAStatics_SetActivityAvailability final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActivityHandle                        Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UCAStatics_SetActivityAvailability) == 0x000008, "Wrong alignment on UCAStatics_SetActivityAvailability");
static_assert(sizeof(UCAStatics_SetActivityAvailability) == 0x000018, "Wrong size on UCAStatics_SetActivityAvailability");
static_assert(offsetof(UCAStatics_SetActivityAvailability, WorldContextObject) == 0x000000, "Member 'UCAStatics_SetActivityAvailability::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UCAStatics_SetActivityAvailability, Handle) == 0x000008, "Member 'UCAStatics_SetActivityAvailability::Handle' has a wrong offset!");
static_assert(offsetof(UCAStatics_SetActivityAvailability, bEnabled) == 0x000010, "Member 'UCAStatics_SetActivityAvailability::bEnabled' has a wrong offset!");

// Function UCA.UCAStatics.SetActualZone
// 0x0010 (0x0010 - 0x0000)
struct UCAStatics_SetActualZone final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActivityZoneHandle                    Zone;                                              // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCAStatics_SetActualZone) == 0x000008, "Wrong alignment on UCAStatics_SetActualZone");
static_assert(sizeof(UCAStatics_SetActualZone) == 0x000010, "Wrong size on UCAStatics_SetActualZone");
static_assert(offsetof(UCAStatics_SetActualZone, WorldContextObject) == 0x000000, "Member 'UCAStatics_SetActualZone::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UCAStatics_SetActualZone, Zone) == 0x000008, "Member 'UCAStatics_SetActualZone::Zone' has a wrong offset!");

// Function UCA.UCAStatics.StartActivity
// 0x0010 (0x0010 - 0x0000)
struct UCAStatics_StartActivity final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActivityHandle                        Handle;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCAStatics_StartActivity) == 0x000008, "Wrong alignment on UCAStatics_StartActivity");
static_assert(sizeof(UCAStatics_StartActivity) == 0x000010, "Wrong size on UCAStatics_StartActivity");
static_assert(offsetof(UCAStatics_StartActivity, WorldContextObject) == 0x000000, "Member 'UCAStatics_StartActivity::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UCAStatics_StartActivity, Handle) == 0x000008, "Member 'UCAStatics_StartActivity::Handle' has a wrong offset!");

// Function UCA.UCAStatics.TerminateActivity
// 0x0008 (0x0008 - 0x0000)
struct UCAStatics_TerminateActivity final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCAStatics_TerminateActivity) == 0x000008, "Wrong alignment on UCAStatics_TerminateActivity");
static_assert(sizeof(UCAStatics_TerminateActivity) == 0x000008, "Wrong size on UCAStatics_TerminateActivity");
static_assert(offsetof(UCAStatics_TerminateActivity, WorldContextObject) == 0x000000, "Member 'UCAStatics_TerminateActivity::WorldContextObject' has a wrong offset!");

// Function UCA.UCAStatics.UnlockAchievement
// 0x0010 (0x0010 - 0x0000)
struct UCAStatics_UnlockAchievement final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAchievementHandle                     Achievement;                                       // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCAStatics_UnlockAchievement) == 0x000008, "Wrong alignment on UCAStatics_UnlockAchievement");
static_assert(sizeof(UCAStatics_UnlockAchievement) == 0x000010, "Wrong size on UCAStatics_UnlockAchievement");
static_assert(offsetof(UCAStatics_UnlockAchievement, WorldContextObject) == 0x000000, "Member 'UCAStatics_UnlockAchievement::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UCAStatics_UnlockAchievement, Achievement) == 0x000008, "Member 'UCAStatics_UnlockAchievement::Achievement' has a wrong offset!");

}

