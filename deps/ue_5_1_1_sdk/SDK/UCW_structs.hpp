#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UCW

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum UCW.ETabChangeCause
// NumValues: 0x0004
enum class ETabChangeCause : uint8
{
	UserInteraction                          = 0,
	UserClickedOnTab                         = 1,
	SetDirectly                              = 2,
	ETabChangeCause_MAX                      = 3,
};

// Enum UCW.EWidgetState
// NumValues: 0x0005
enum class EWidgetState : uint8
{
	Normal                                   = 0,
	Disabled                                 = 1,
	Hovered                                  = 2,
	Pressed                                  = 3,
	EWidgetState_MAX                         = 4,
};

// Enum UCW.EAskDialogType
// NumValues: 0x0004
enum class EAskDialogType : uint8
{
	Message                                  = 0,
	YesNo                                    = 1,
	YesNoCancel                              = 2,
	EAskDialogType_MAX                       = 3,
};

// Enum UCW.EAspectAwareFrameType
// NumValues: 0x0004
enum class EAspectAwareFrameType : uint8
{
	Full                                     = 0,
	Half                                     = 1,
	Quater                                   = 2,
	EAspectAwareFrameType_MAX                = 3,
};

// Enum UCW.ECreditsItemType
// NumValues: 0x000A
enum class ECreditsItemType : uint8
{
	Header                                   = 0,
	Column1                                  = 1,
	Column2                                  = 2,
	Column3                                  = 3,
	Image                                    = 4,
	Space                                    = 5,
	Custom0                                  = 6,
	Custom1                                  = 7,
	Custom2                                  = 8,
	ECreditsItemType_MAX                     = 9,
};

// Enum UCW.EConsumeAnalogEvent
// NumValues: 0x0004
enum class EConsumeAnalogEvent : uint8
{
	WhenScrollingPossible                    = 0,
	Always                                   = 1,
	Never                                    = 2,
	EConsumeAnalogEvent_MAX                  = 3,
};

// ScriptStruct UCW.BButtonStyle
// 0x03B8 (0x03C0 - 0x0008)
struct FBButtonStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Normal;                                            // 0x0010(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Hovered;                                           // 0x00E0(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Pressed;                                           // 0x01B0(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Disabled;                                          // 0x0280(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            NormalForeground;                                  // 0x0350(0x0014)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FSlateColor                            HoveredForeground;                                 // 0x0364(0x0014)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FSlateColor                            PressedForeground;                                 // 0x0378(0x0014)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FSlateColor                            DisabledForeground;                                // 0x038C(0x0014)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FMargin                                NormalPadding;                                     // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                PressedPadding;                                    // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBButtonStyle) == 0x000010, "Wrong alignment on FBButtonStyle");
static_assert(sizeof(FBButtonStyle) == 0x0003C0, "Wrong size on FBButtonStyle");
static_assert(offsetof(FBButtonStyle, Normal) == 0x000010, "Member 'FBButtonStyle::Normal' has a wrong offset!");
static_assert(offsetof(FBButtonStyle, Hovered) == 0x0000E0, "Member 'FBButtonStyle::Hovered' has a wrong offset!");
static_assert(offsetof(FBButtonStyle, Pressed) == 0x0001B0, "Member 'FBButtonStyle::Pressed' has a wrong offset!");
static_assert(offsetof(FBButtonStyle, Disabled) == 0x000280, "Member 'FBButtonStyle::Disabled' has a wrong offset!");
static_assert(offsetof(FBButtonStyle, NormalForeground) == 0x000350, "Member 'FBButtonStyle::NormalForeground' has a wrong offset!");
static_assert(offsetof(FBButtonStyle, HoveredForeground) == 0x000364, "Member 'FBButtonStyle::HoveredForeground' has a wrong offset!");
static_assert(offsetof(FBButtonStyle, PressedForeground) == 0x000378, "Member 'FBButtonStyle::PressedForeground' has a wrong offset!");
static_assert(offsetof(FBButtonStyle, DisabledForeground) == 0x00038C, "Member 'FBButtonStyle::DisabledForeground' has a wrong offset!");
static_assert(offsetof(FBButtonStyle, NormalPadding) == 0x0003A0, "Member 'FBButtonStyle::NormalPadding' has a wrong offset!");
static_assert(offsetof(FBButtonStyle, PressedPadding) == 0x0003B0, "Member 'FBButtonStyle::PressedPadding' has a wrong offset!");

// ScriptStruct UCW.HoverableTextStyle
// 0x0040 (0x0048 - 0x0008)
struct FHoverableTextStyle : public FSlateWidgetStyle
{
public:
	struct FLinearColor                           NormalColor;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           HoverColor;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PressedColor;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DisabledColor;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHoverableTextStyle) == 0x000008, "Wrong alignment on FHoverableTextStyle");
static_assert(sizeof(FHoverableTextStyle) == 0x000048, "Wrong size on FHoverableTextStyle");
static_assert(offsetof(FHoverableTextStyle, NormalColor) == 0x000008, "Member 'FHoverableTextStyle::NormalColor' has a wrong offset!");
static_assert(offsetof(FHoverableTextStyle, HoverColor) == 0x000018, "Member 'FHoverableTextStyle::HoverColor' has a wrong offset!");
static_assert(offsetof(FHoverableTextStyle, PressedColor) == 0x000028, "Member 'FHoverableTextStyle::PressedColor' has a wrong offset!");
static_assert(offsetof(FHoverableTextStyle, DisabledColor) == 0x000038, "Member 'FHoverableTextStyle::DisabledColor' has a wrong offset!");

// ScriptStruct UCW.B3StateBrushStyle
// 0x0270 (0x0270 - 0x0000)
struct FB3StateBrushStyle final
{
public:
	struct FSlateBrush                            Normal;                                            // 0x0000(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Hovered;                                           // 0x00D0(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Pressed;                                           // 0x01A0(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FB3StateBrushStyle) == 0x000010, "Wrong alignment on FB3StateBrushStyle");
static_assert(sizeof(FB3StateBrushStyle) == 0x000270, "Wrong size on FB3StateBrushStyle");
static_assert(offsetof(FB3StateBrushStyle, Normal) == 0x000000, "Member 'FB3StateBrushStyle::Normal' has a wrong offset!");
static_assert(offsetof(FB3StateBrushStyle, Hovered) == 0x0000D0, "Member 'FB3StateBrushStyle::Hovered' has a wrong offset!");
static_assert(offsetof(FB3StateBrushStyle, Pressed) == 0x0001A0, "Member 'FB3StateBrushStyle::Pressed' has a wrong offset!");

// ScriptStruct UCW.TextButtonStyle
// 0x0000 (0x0340 - 0x0340)
struct FTextButtonStyle final : public FTextBlockStyle
{
};
static_assert(alignof(FTextButtonStyle) == 0x000010, "Wrong alignment on FTextButtonStyle");
static_assert(sizeof(FTextButtonStyle) == 0x000340, "Wrong size on FTextButtonStyle");

// ScriptStruct UCW.HoverablePressableStyle
// 0x0010 (0x0018 - 0x0008)
struct FHoverablePressableStyle : public FSlateWidgetStyle
{
public:
	class UAkAudioEvent*                          HoveredAkEvent;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          PressedAkEvent;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHoverablePressableStyle) == 0x000008, "Wrong alignment on FHoverablePressableStyle");
static_assert(sizeof(FHoverablePressableStyle) == 0x000018, "Wrong size on FHoverablePressableStyle");
static_assert(offsetof(FHoverablePressableStyle, HoveredAkEvent) == 0x000008, "Member 'FHoverablePressableStyle::HoveredAkEvent' has a wrong offset!");
static_assert(offsetof(FHoverablePressableStyle, PressedAkEvent) == 0x000010, "Member 'FHoverablePressableStyle::PressedAkEvent' has a wrong offset!");

// ScriptStruct UCW.FancyLabelStyle
// 0x0348 (0x0390 - 0x0048)
struct FFancyLabelStyle final : public FHoverableTextStyle
{
public:
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Normal;                                            // 0x0050(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Hovered;                                           // 0x0120(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Pressed;                                           // 0x01F0(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Disabled;                                          // 0x02C0(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFancyLabelStyle) == 0x000010, "Wrong alignment on FFancyLabelStyle");
static_assert(sizeof(FFancyLabelStyle) == 0x000390, "Wrong size on FFancyLabelStyle");
static_assert(offsetof(FFancyLabelStyle, Normal) == 0x000050, "Member 'FFancyLabelStyle::Normal' has a wrong offset!");
static_assert(offsetof(FFancyLabelStyle, Hovered) == 0x000120, "Member 'FFancyLabelStyle::Hovered' has a wrong offset!");
static_assert(offsetof(FFancyLabelStyle, Pressed) == 0x0001F0, "Member 'FFancyLabelStyle::Pressed' has a wrong offset!");
static_assert(offsetof(FFancyLabelStyle, Disabled) == 0x0002C0, "Member 'FFancyLabelStyle::Disabled' has a wrong offset!");

// ScriptStruct UCW.B2StateBrushStyle
// 0x01A0 (0x01A0 - 0x0000)
struct FB2StateBrushStyle final
{
public:
	struct FSlateBrush                            Normal;                                            // 0x0000(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Active;                                            // 0x00D0(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FB2StateBrushStyle) == 0x000010, "Wrong alignment on FB2StateBrushStyle");
static_assert(sizeof(FB2StateBrushStyle) == 0x0001A0, "Wrong size on FB2StateBrushStyle");
static_assert(offsetof(FB2StateBrushStyle, Normal) == 0x000000, "Member 'FB2StateBrushStyle::Normal' has a wrong offset!");
static_assert(offsetof(FB2StateBrushStyle, Active) == 0x0000D0, "Member 'FB2StateBrushStyle::Active' has a wrong offset!");

// ScriptStruct UCW.BSpinBoxStyle
// 0x0CE8 (0x0D00 - 0x0018)
struct FBSpinBoxStyle final : public FHoverablePressableStyle
{
public:
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FButtonStyle                           ButtonStyle;                                       // 0x0020(0x03F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FB3StateBrushStyle                     LeftImageStyle;                                    // 0x0410(0x0270)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FB3StateBrushStyle                     RightImageStyle;                                   // 0x0680(0x0270)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FB2StateBrushStyle                     IndicatorStyle;                                    // 0x08F0(0x01A0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FB3StateBrushStyle                     InternalBorderStyle;                               // 0x0A90(0x0270)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBSpinBoxStyle) == 0x000010, "Wrong alignment on FBSpinBoxStyle");
static_assert(sizeof(FBSpinBoxStyle) == 0x000D00, "Wrong size on FBSpinBoxStyle");
static_assert(offsetof(FBSpinBoxStyle, ButtonStyle) == 0x000020, "Member 'FBSpinBoxStyle::ButtonStyle' has a wrong offset!");
static_assert(offsetof(FBSpinBoxStyle, LeftImageStyle) == 0x000410, "Member 'FBSpinBoxStyle::LeftImageStyle' has a wrong offset!");
static_assert(offsetof(FBSpinBoxStyle, RightImageStyle) == 0x000680, "Member 'FBSpinBoxStyle::RightImageStyle' has a wrong offset!");
static_assert(offsetof(FBSpinBoxStyle, IndicatorStyle) == 0x0008F0, "Member 'FBSpinBoxStyle::IndicatorStyle' has a wrong offset!");
static_assert(offsetof(FBSpinBoxStyle, InternalBorderStyle) == 0x000A90, "Member 'FBSpinBoxStyle::InternalBorderStyle' has a wrong offset!");

// ScriptStruct UCW.3StateImageStyle
// 0x0280 (0x0280 - 0x0000)
struct FThreeStateImageStyle final
{
public:
	bool                                          bSingleMaterial;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            NormalBrush;                                       // 0x0010(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HoveredBrush;                                      // 0x00E0(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            PressedBrush;                                      // 0x01B0(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FThreeStateImageStyle) == 0x000010, "Wrong alignment on FThreeStateImageStyle");
static_assert(sizeof(FThreeStateImageStyle) == 0x000280, "Wrong size on FThreeStateImageStyle");
static_assert(offsetof(FThreeStateImageStyle, bSingleMaterial) == 0x000000, "Member 'FThreeStateImageStyle::bSingleMaterial' has a wrong offset!");
static_assert(offsetof(FThreeStateImageStyle, NormalBrush) == 0x000010, "Member 'FThreeStateImageStyle::NormalBrush' has a wrong offset!");
static_assert(offsetof(FThreeStateImageStyle, HoveredBrush) == 0x0000E0, "Member 'FThreeStateImageStyle::HoveredBrush' has a wrong offset!");
static_assert(offsetof(FThreeStateImageStyle, PressedBrush) == 0x0001B0, "Member 'FThreeStateImageStyle::PressedBrush' has a wrong offset!");

// ScriptStruct UCW.BVolumeControlStyle
// 0x0040 (0x0960 - 0x0920)
struct FBVolumeControlStyle final : public FVolumeControlStyle
{
public:
	struct FLinearColor                           NormalColor;                                       // 0x0920(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           HoverColor;                                        // 0x0930(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ActiveColor;                                       // 0x0940(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DisabledColor;                                     // 0x0950(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBVolumeControlStyle) == 0x000010, "Wrong alignment on FBVolumeControlStyle");
static_assert(sizeof(FBVolumeControlStyle) == 0x000960, "Wrong size on FBVolumeControlStyle");
static_assert(offsetof(FBVolumeControlStyle, NormalColor) == 0x000920, "Member 'FBVolumeControlStyle::NormalColor' has a wrong offset!");
static_assert(offsetof(FBVolumeControlStyle, HoverColor) == 0x000930, "Member 'FBVolumeControlStyle::HoverColor' has a wrong offset!");
static_assert(offsetof(FBVolumeControlStyle, ActiveColor) == 0x000940, "Member 'FBVolumeControlStyle::ActiveColor' has a wrong offset!");
static_assert(offsetof(FBVolumeControlStyle, DisabledColor) == 0x000950, "Member 'FBVolumeControlStyle::DisabledColor' has a wrong offset!");

// ScriptStruct UCW.CreditsItem
// 0x0070 (0x0070 - 0x0000)
struct FCreditsItem final
{
public:
	ECreditsItemType                              Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text_2;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text_3;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Custom;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Custom_1;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Custom_2;                                          // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCreditsItem) == 0x000008, "Wrong alignment on FCreditsItem");
static_assert(sizeof(FCreditsItem) == 0x000070, "Wrong size on FCreditsItem");
static_assert(offsetof(FCreditsItem, Type) == 0x000000, "Member 'FCreditsItem::Type' has a wrong offset!");
static_assert(offsetof(FCreditsItem, Text) == 0x000008, "Member 'FCreditsItem::Text' has a wrong offset!");
static_assert(offsetof(FCreditsItem, Text_2) == 0x000018, "Member 'FCreditsItem::Text_2' has a wrong offset!");
static_assert(offsetof(FCreditsItem, Text_3) == 0x000028, "Member 'FCreditsItem::Text_3' has a wrong offset!");
static_assert(offsetof(FCreditsItem, Custom) == 0x000038, "Member 'FCreditsItem::Custom' has a wrong offset!");
static_assert(offsetof(FCreditsItem, Custom_1) == 0x000048, "Member 'FCreditsItem::Custom_1' has a wrong offset!");
static_assert(offsetof(FCreditsItem, Custom_2) == 0x000058, "Member 'FCreditsItem::Custom_2' has a wrong offset!");
static_assert(offsetof(FCreditsItem, Width) == 0x000068, "Member 'FCreditsItem::Width' has a wrong offset!");
static_assert(offsetof(FCreditsItem, Height) == 0x00006C, "Member 'FCreditsItem::Height' has a wrong offset!");

// ScriptStruct UCW.RichStyleImageRow
// 0x0438 (0x0440 - 0x0008)
struct FRichStyleImageRow final : public FTableRowBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Brush;                                             // 0x0010(0x00D0)(Edit, NativeAccessSpecifierPublic)
	struct FTextBlockStyle                        TextStyle;                                         // 0x00E0(0x0340)(Edit, NativeAccessSpecifierPublic)
	struct FMargin                                Padding;                                           // 0x0420(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0430(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepSquereIfTight;                                 // 0x0431(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PreserveAspect;                                    // 0x0432(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreCommontFontSize;                             // 0x0433(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_434[0xC];                                      // 0x0434(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRichStyleImageRow) == 0x000010, "Wrong alignment on FRichStyleImageRow");
static_assert(sizeof(FRichStyleImageRow) == 0x000440, "Wrong size on FRichStyleImageRow");
static_assert(offsetof(FRichStyleImageRow, Brush) == 0x000010, "Member 'FRichStyleImageRow::Brush' has a wrong offset!");
static_assert(offsetof(FRichStyleImageRow, TextStyle) == 0x0000E0, "Member 'FRichStyleImageRow::TextStyle' has a wrong offset!");
static_assert(offsetof(FRichStyleImageRow, Padding) == 0x000420, "Member 'FRichStyleImageRow::Padding' has a wrong offset!");
static_assert(offsetof(FRichStyleImageRow, VerticalAlignment) == 0x000430, "Member 'FRichStyleImageRow::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(FRichStyleImageRow, KeepSquereIfTight) == 0x000431, "Member 'FRichStyleImageRow::KeepSquereIfTight' has a wrong offset!");
static_assert(offsetof(FRichStyleImageRow, PreserveAspect) == 0x000432, "Member 'FRichStyleImageRow::PreserveAspect' has a wrong offset!");
static_assert(offsetof(FRichStyleImageRow, IgnoreCommontFontSize) == 0x000433, "Member 'FRichStyleImageRow::IgnoreCommontFontSize' has a wrong offset!");

}

