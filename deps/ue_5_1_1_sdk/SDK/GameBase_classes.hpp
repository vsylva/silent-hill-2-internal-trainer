#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GlobalProperties_structs.hpp"
#include "GameBase_structs.hpp"
#include "LevelStreaming_structs.hpp"
#include "DeveloperSettings_classes.hpp"
#include "UCW_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "UMG_classes.hpp"
#include "SlateCore_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// Class GameBase.BGameModeBase
// 0x0060 (0x03B0 - 0x0350)
class ABGameModeBase : public AGameModeBase
{
public:
	TSubclassOf<class AActor>                     SpawnPointClass;                                   // 0x0350(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGameModeMenuController*                MenuController;                                    // 0x0358(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBaseGameModeController*                BaseGameModeController;                            // 0x0360(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnPlayerSettingsChanged;                           // 0x0370(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_380[0x30];                                     // 0x0380(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GameModePlayerSettingsChanged__DelegateSignature(class UPlayerProfile* Settings);
	void ShowInGameMenu();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BGameModeBase">();
	}
	static class ABGameModeBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABGameModeBase>();
	}
};
static_assert(alignof(ABGameModeBase) == 0x000008, "Wrong alignment on ABGameModeBase");
static_assert(sizeof(ABGameModeBase) == 0x0003B0, "Wrong size on ABGameModeBase");
static_assert(offsetof(ABGameModeBase, SpawnPointClass) == 0x000350, "Member 'ABGameModeBase::SpawnPointClass' has a wrong offset!");
static_assert(offsetof(ABGameModeBase, MenuController) == 0x000358, "Member 'ABGameModeBase::MenuController' has a wrong offset!");
static_assert(offsetof(ABGameModeBase, BaseGameModeController) == 0x000360, "Member 'ABGameModeBase::BaseGameModeController' has a wrong offset!");
static_assert(offsetof(ABGameModeBase, OnPlayerSettingsChanged) == 0x000370, "Member 'ABGameModeBase::OnPlayerSettingsChanged' has a wrong offset!");

// Class GameBase.ApplicationLifecycleSubsystem
// 0x00E8 (0x0118 - 0x0030)
class UApplicationLifecycleSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0xE8];                                      // 0x0030(0x00E8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ApplicationLifecycleSubsystem">();
	}
	static class UApplicationLifecycleSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UApplicationLifecycleSubsystem>();
	}
};
static_assert(alignof(UApplicationLifecycleSubsystem) == 0x000008, "Wrong alignment on UApplicationLifecycleSubsystem");
static_assert(sizeof(UApplicationLifecycleSubsystem) == 0x000118, "Wrong size on UApplicationLifecycleSubsystem");

// Class GameBase.AudioConfigSettings
// 0x00F0 (0x0128 - 0x0038)
class UAudioConfigSettings final : public UDeveloperSettings
{
public:
	TMap<class FName, TSoftObjectPtr<class UAkRtpc>> VolumeRTPC;                                        // 0x0038(0x0050)(Edit, Config, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<EAudioProfile, TSoftObjectPtr<class UAkStateValue>> StateValues;                                       // 0x0088(0x0050)(Edit, EditFixedSize, Config, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<class FName, TSoftObjectPtr<class UAkSwitchValue>> AudioLangChangeSwitchers;                          // 0x00D8(0x0050)(Edit, Config, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioConfigSettings">();
	}
	static class UAudioConfigSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioConfigSettings>();
	}
};
static_assert(alignof(UAudioConfigSettings) == 0x000008, "Wrong alignment on UAudioConfigSettings");
static_assert(sizeof(UAudioConfigSettings) == 0x000128, "Wrong size on UAudioConfigSettings");
static_assert(offsetof(UAudioConfigSettings, VolumeRTPC) == 0x000038, "Member 'UAudioConfigSettings::VolumeRTPC' has a wrong offset!");
static_assert(offsetof(UAudioConfigSettings, StateValues) == 0x000088, "Member 'UAudioConfigSettings::StateValues' has a wrong offset!");
static_assert(offsetof(UAudioConfigSettings, AudioLangChangeSwitchers) == 0x0000D8, "Member 'UAudioConfigSettings::AudioLangChangeSwitchers' has a wrong offset!");

// Class GameBase.BaseGameConfig
// 0x0078 (0x00A8 - 0x0030)
class UBaseGameConfig final : public UDataAsset
{
public:
	bool                                          IsDLC;                                             // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DLCButtonText;                                     // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UStreamableLevels*                      StreamableLevels;                                  // 0x0050(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelStreamingRequestCollection*       RequestCollection;                                 // 0x0058(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStreamableLevelHandle                 MainPersistentLevel;                               // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FLevelStreamingRequestHandle>   InitialStreamingRequests;                          // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FStreamableLevelHandle>         InitiallyLoadedLevels;                             // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FStreamableLevelHandle>         InitiallyPreloadedLevels;                          // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDataLayerStatus>               InitialDataLayerRequests;                          // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BaseGameConfig">();
	}
	static class UBaseGameConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBaseGameConfig>();
	}
};
static_assert(alignof(UBaseGameConfig) == 0x000008, "Wrong alignment on UBaseGameConfig");
static_assert(sizeof(UBaseGameConfig) == 0x0000A8, "Wrong size on UBaseGameConfig");
static_assert(offsetof(UBaseGameConfig, IsDLC) == 0x000030, "Member 'UBaseGameConfig::IsDLC' has a wrong offset!");
static_assert(offsetof(UBaseGameConfig, DLCButtonText) == 0x000038, "Member 'UBaseGameConfig::DLCButtonText' has a wrong offset!");
static_assert(offsetof(UBaseGameConfig, StreamableLevels) == 0x000050, "Member 'UBaseGameConfig::StreamableLevels' has a wrong offset!");
static_assert(offsetof(UBaseGameConfig, RequestCollection) == 0x000058, "Member 'UBaseGameConfig::RequestCollection' has a wrong offset!");
static_assert(offsetof(UBaseGameConfig, MainPersistentLevel) == 0x000060, "Member 'UBaseGameConfig::MainPersistentLevel' has a wrong offset!");
static_assert(offsetof(UBaseGameConfig, InitialStreamingRequests) == 0x000068, "Member 'UBaseGameConfig::InitialStreamingRequests' has a wrong offset!");
static_assert(offsetof(UBaseGameConfig, InitiallyLoadedLevels) == 0x000078, "Member 'UBaseGameConfig::InitiallyLoadedLevels' has a wrong offset!");
static_assert(offsetof(UBaseGameConfig, InitiallyPreloadedLevels) == 0x000088, "Member 'UBaseGameConfig::InitiallyPreloadedLevels' has a wrong offset!");
static_assert(offsetof(UBaseGameConfig, InitialDataLayerRequests) == 0x000098, "Member 'UBaseGameConfig::InitialDataLayerRequests' has a wrong offset!");

// Class GameBase.BaseGameModeController
// 0x0090 (0x0130 - 0x00A0)
class UBaseGameModeController : public UActorComponent
{
public:
	TSoftClassPtr<class UClass>                   LostPadWidgetClass;                                // 0x00A0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NoClear, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAutoHideLostPadWidget;                            // 0x00D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   PreLoadingWidgetClass;                             // 0x00D8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          AlarmPopupOpenEvent;                               // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          AlarmPopupCloseEvent;                              // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          PauseGameStartEvent;                               // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          PauseGameCloseEvent;                               // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BaseGameModeController">();
	}
	static class UBaseGameModeController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBaseGameModeController>();
	}
};
static_assert(alignof(UBaseGameModeController) == 0x000008, "Wrong alignment on UBaseGameModeController");
static_assert(sizeof(UBaseGameModeController) == 0x000130, "Wrong size on UBaseGameModeController");
static_assert(offsetof(UBaseGameModeController, LostPadWidgetClass) == 0x0000A0, "Member 'UBaseGameModeController::LostPadWidgetClass' has a wrong offset!");
static_assert(offsetof(UBaseGameModeController, bAutoHideLostPadWidget) == 0x0000D0, "Member 'UBaseGameModeController::bAutoHideLostPadWidget' has a wrong offset!");
static_assert(offsetof(UBaseGameModeController, PreLoadingWidgetClass) == 0x0000D8, "Member 'UBaseGameModeController::PreLoadingWidgetClass' has a wrong offset!");
static_assert(offsetof(UBaseGameModeController, AlarmPopupOpenEvent) == 0x000108, "Member 'UBaseGameModeController::AlarmPopupOpenEvent' has a wrong offset!");
static_assert(offsetof(UBaseGameModeController, AlarmPopupCloseEvent) == 0x000110, "Member 'UBaseGameModeController::AlarmPopupCloseEvent' has a wrong offset!");
static_assert(offsetof(UBaseGameModeController, PauseGameStartEvent) == 0x000118, "Member 'UBaseGameModeController::PauseGameStartEvent' has a wrong offset!");
static_assert(offsetof(UBaseGameModeController, PauseGameCloseEvent) == 0x000120, "Member 'UBaseGameModeController::PauseGameCloseEvent' has a wrong offset!");

// Class GameBase.BaseSaveGame
// 0x00F8 (0x0120 - 0x0028)
class UBaseSaveGame : public USaveGame
{
public:
	uint8                                         bIsHeaderLoaded : 1;                               // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsFullyLoaded : 1;                                // 0x0028(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ProfileName;                                       // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              DateTime;                                          // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  PlaythroughId;                                     // 0x0048(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BodyDataCrc;                                       // 0x0058(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Thumbnail;                                         // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	struct FLevelStreamingActorData               GameModeData;                                      // 0x0070(0x0030)(Transient, NativeAccessSpecifierPublic)
	struct FGlobalPropertiesSaveData              GlobalPropsData;                                   // 0x00A0(0x0030)(Transient, NativeAccessSpecifierPublic)
	TMap<class FName, struct FBinaryBlob>         Blobs;                                             // 0x00D0(0x0050)(Transient, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BaseSaveGame">();
	}
	static class UBaseSaveGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBaseSaveGame>();
	}
};
static_assert(alignof(UBaseSaveGame) == 0x000008, "Wrong alignment on UBaseSaveGame");
static_assert(sizeof(UBaseSaveGame) == 0x000120, "Wrong size on UBaseSaveGame");
static_assert(offsetof(UBaseSaveGame, ProfileName) == 0x000030, "Member 'UBaseSaveGame::ProfileName' has a wrong offset!");
static_assert(offsetof(UBaseSaveGame, DateTime) == 0x000040, "Member 'UBaseSaveGame::DateTime' has a wrong offset!");
static_assert(offsetof(UBaseSaveGame, PlaythroughId) == 0x000048, "Member 'UBaseSaveGame::PlaythroughId' has a wrong offset!");
static_assert(offsetof(UBaseSaveGame, BodyDataCrc) == 0x000058, "Member 'UBaseSaveGame::BodyDataCrc' has a wrong offset!");
static_assert(offsetof(UBaseSaveGame, Thumbnail) == 0x000060, "Member 'UBaseSaveGame::Thumbnail' has a wrong offset!");
static_assert(offsetof(UBaseSaveGame, GameModeData) == 0x000070, "Member 'UBaseSaveGame::GameModeData' has a wrong offset!");
static_assert(offsetof(UBaseSaveGame, GlobalPropsData) == 0x0000A0, "Member 'UBaseSaveGame::GlobalPropsData' has a wrong offset!");
static_assert(offsetof(UBaseSaveGame, Blobs) == 0x0000D0, "Member 'UBaseSaveGame::Blobs' has a wrong offset!");

// Class GameBase.StartGameSettingsWidget
// 0x0018 (0x02B8 - 0x02A0)
class UStartGameSettingsWidget : public UBUserWidget
{
public:
	uint8                                         Pad_2A0[0x18];                                     // 0x02A0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StartGameSettingsWidget">();
	}
	static class UStartGameSettingsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStartGameSettingsWidget>();
	}
};
static_assert(alignof(UStartGameSettingsWidget) == 0x000008, "Wrong alignment on UStartGameSettingsWidget");
static_assert(sizeof(UStartGameSettingsWidget) == 0x0002B8, "Wrong size on UStartGameSettingsWidget");

// Class GameBase.BGameInstance
// 0x00F8 (0x02B8 - 0x01C0)
class UBGameInstance : public UGameInstance
{
public:
	uint8                                         Pad_1C0[0x8];                                      // 0x01C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStreamableLevelHandle                 MainMenuLevel;                                     // 0x01C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class UBaseGameConfig*                        MainGameConfig;                                    // 0x01D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreSaveLevelTransforms;                         // 0x01D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9[0x3];                                      // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStreamableLevelHandle                 IntermediateLevel;                                 // 0x01DC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4[0x64];                                     // 0x01E4(0x0064)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialParameterCollection*           GlobalCollection;                                  // 0x0248(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialParameterCollection*           GlobalSettingsCollection;                          // 0x0250(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USaveWidget*                            SaveWidget;                                        // 0x0258(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URebindableInput*                       RebindableInput;                                   // 0x0260(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGlobalPropertiesData*                  GlobalProperties;                                  // 0x0268(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInputModeManager*                      InputModeManager;                                  // 0x0270(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_278[0x38];                                     // 0x0278(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             LastScreenshotTexture;                             // 0x02B0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BackToMainMenu();
	class UPlayerProfile* GetPlayerProfile();
	class URebindableInput* GetRebindableInput();
	bool ReloadGame(bool bSaveOnDisk, const class FString& Title, bool GrabScreenShot, class UMovieConfig* Movie, float UnskipableLen);
	void SetLastScreenshotTexture(class UTexture2D* Texture, bool PrepareLoadingScreen);

	class UTexture2D* GetLastScreenshotTexture() const;
	bool IsGameDeactivated() const;
	bool IsGameSuspended() const;
	bool IsKeyboardActive() const;
	bool IsMouseActive() const;
	bool IsPadActive() const;
	bool IsPlayingFromMainMenu() const;
	bool IsWorldTravelFinished() const;
	bool WasMouseMoved() const;
	bool WasPadConnected() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BGameInstance">();
	}
	static class UBGameInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBGameInstance>();
	}
};
static_assert(alignof(UBGameInstance) == 0x000008, "Wrong alignment on UBGameInstance");
static_assert(sizeof(UBGameInstance) == 0x0002B8, "Wrong size on UBGameInstance");
static_assert(offsetof(UBGameInstance, MainMenuLevel) == 0x0001C8, "Member 'UBGameInstance::MainMenuLevel' has a wrong offset!");
static_assert(offsetof(UBGameInstance, MainGameConfig) == 0x0001D0, "Member 'UBGameInstance::MainGameConfig' has a wrong offset!");
static_assert(offsetof(UBGameInstance, IgnoreSaveLevelTransforms) == 0x0001D8, "Member 'UBGameInstance::IgnoreSaveLevelTransforms' has a wrong offset!");
static_assert(offsetof(UBGameInstance, IntermediateLevel) == 0x0001DC, "Member 'UBGameInstance::IntermediateLevel' has a wrong offset!");
static_assert(offsetof(UBGameInstance, GlobalCollection) == 0x000248, "Member 'UBGameInstance::GlobalCollection' has a wrong offset!");
static_assert(offsetof(UBGameInstance, GlobalSettingsCollection) == 0x000250, "Member 'UBGameInstance::GlobalSettingsCollection' has a wrong offset!");
static_assert(offsetof(UBGameInstance, SaveWidget) == 0x000258, "Member 'UBGameInstance::SaveWidget' has a wrong offset!");
static_assert(offsetof(UBGameInstance, RebindableInput) == 0x000260, "Member 'UBGameInstance::RebindableInput' has a wrong offset!");
static_assert(offsetof(UBGameInstance, GlobalProperties) == 0x000268, "Member 'UBGameInstance::GlobalProperties' has a wrong offset!");
static_assert(offsetof(UBGameInstance, InputModeManager) == 0x000270, "Member 'UBGameInstance::InputModeManager' has a wrong offset!");
static_assert(offsetof(UBGameInstance, LastScreenshotTexture) == 0x0002B0, "Member 'UBGameInstance::LastScreenshotTexture' has a wrong offset!");

// Class GameBase.BIntermediateGameModeBase
// 0x0000 (0x0350 - 0x0350)
class ABIntermediateGameModeBase final : public AGameModeBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BIntermediateGameModeBase">();
	}
	static class ABIntermediateGameModeBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABIntermediateGameModeBase>();
	}
};
static_assert(alignof(ABIntermediateGameModeBase) == 0x000008, "Wrong alignment on ABIntermediateGameModeBase");
static_assert(sizeof(ABIntermediateGameModeBase) == 0x000350, "Wrong size on ABIntermediateGameModeBase");

// Class GameBase.BGameUserSettings
// 0x0090 (0x01D8 - 0x0148)
class UBGameUserSettings final : public UGameUserSettings
{
public:
	struct FGFXSettings                           GFXSettings;                                       // 0x0148(0x0090)(Config, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BGameUserSettings">();
	}
	static class UBGameUserSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBGameUserSettings>();
	}
};
static_assert(alignof(UBGameUserSettings) == 0x000008, "Wrong alignment on UBGameUserSettings");
static_assert(sizeof(UBGameUserSettings) == 0x0001D8, "Wrong size on UBGameUserSettings");
static_assert(offsetof(UBGameUserSettings, GFXSettings) == 0x000148, "Member 'UBGameUserSettings::GFXSettings' has a wrong offset!");

// Class GameBase.GameBaseStateManager
// 0x00B8 (0x00E8 - 0x0030)
class UGameBaseStateManager final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0xB8];                                      // 0x0030(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameBaseStateManager">();
	}
	static class UGameBaseStateManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameBaseStateManager>();
	}
};
static_assert(alignof(UGameBaseStateManager) == 0x000008, "Wrong alignment on UGameBaseStateManager");
static_assert(sizeof(UGameBaseStateManager) == 0x0000E8, "Wrong size on UGameBaseStateManager");

// Class GameBase.GameBaseStatics
// 0x0000 (0x0028 - 0x0028)
class UGameBaseStatics final : public UBlueprintFunctionLibrary
{
public:
	static void AutoSave(class UObject* WorldContextObject, const class FString& Title, bool GrabScreenShot, bool Flush);
	static void FlushPartialSave(class UObject* WorldContextObject);
	static void FlushSave(class UObject* WorldContextObject, int32 SlotIndex, const class FString& Title, bool ApplyCurrentTime, bool PreserveSlotIndex);
	static class UTexture2D* GetActualSavedScreenShot(class UObject* WorldContextObject);
	static class UBGameInstance* GetBaseGameInstance(class UObject* WorldContextObject);
	static class ABGameModeBase* GetBaseGameMode(class UObject* WorldContextObject);
	static class FString GetBuildPackageName();
	static class FString GetBuildStreamName();
	static EGameBaseInputDevice GetInputDevice(class UObject* WorldContextObject);
	static struct FDateTime GetLastSaveTime(class UObject* WorldContextObject);
	static class UPersistentSaveData* GetPersistentGameData(class UObject* WorldContextObject);
	static class FString GetPlayerName(class UObject* WorldContextObject);
	static class UPlayerProfile* GetPlayerProfile(class UObject* WorldContextObject);
	static class UPlaythroughPersistentData* GetPlaythroughPersistentGameData(class UObject* WorldContextObject);
	static class FString GetProjectVersionString();
	static int32 GetRevisionVersionNumber();
	static class UTexture2D* GetSavedScreenShot(class UObject* WorldContextObject, int32 SlotIndex);
	static struct FTimespan GetTimeSinceLastSave(class UObject* WorldContextObject);
	static void HideMouseCursor(class APlayerController* PlayerController);
	static bool IsConsoleMenu();
	static bool IsGameCompletelyInstalled(class UObject* WorldContextObject);
	static bool IsGameDeactivated(class UObject* WorldContextObject);
	static bool IsGamePaused(class UObject* WorldContextObject);
	static bool IsGameSuspended(class UObject* WorldContextObject);
	static bool IsKeyboardActive(class UObject* WorldContextObject);
	static bool IsMouseActive(class UObject* WorldContextObject);
	static bool IsMoviePlayerActive();
	static bool IsNEOOrScorpio();
	static bool IsPadActive(class UObject* WorldContextObject);
	static bool IsPadConnected(class UObject* WorldContextObject);
	static bool IsSwitchUserSupported(class UObject* WorldContextObject);
	static bool IsSystemHelpSupported();
	static void MakeFullSave(class UObject* WorldContextObject, int32 SlotIndex, const class FString& Title, bool GrabScreenShot, bool AllowAsyncOperation);
	static void MakePersistentGameDateDirty(class UObject* WorldContextObject);
	static void MakeQuickSave(class UObject* WorldContextObject, const class FString& Title, bool GrabScreenShot);
	static void PauseDynamicResolution();
	static void PlaySound(class UAkAudioEvent* Sound);
	static void PostWiseEvent(class UAkAudioEvent* Event);
	static void ResumeDynamicResolution();
	static void SaveGame(class UObject* WorldContextObject, const class FString& Title, bool GrabScreenShot);
	static void SavePersistentGameDate(class UObject* WorldContextObject);
	static bool SaveSlotDataExist(class UObject* WorldContextObject, int32 SlotIndex);
	static void SaveUserProfile(class UObject* WorldContextObject);
	static void SetActualGamma(class UObject* WorldContextObject);
	static void SetDefaultGamma(class UObject* WorldContextObject);
	static void SetGamePaused(class UObject* WorldContextObject, const bool IsPaused);
	static void SetInputModeGameAndUI(class UObject* WorldContextObject, class APlayerController* PlayerController, bool ShowMouseCursor_0, EMouseLockMode MouseLockMode, bool HideCursorDuringCapture);
	static void SetInputModeGameOnly(class UObject* WorldContextObject, class APlayerController* PlayerController, bool ShowMouseCursor_0, bool ConsumeCaptureMouseDown);
	static void SetInputModeUIOnly(class UObject* WorldContextObject, class APlayerController* PlayerController, bool ShowMouseCursor_0, EMouseLockMode MouseLockMode);
	static void SetMouseCursorVisibility(class APlayerController* PlayerController, bool Show);
	static bool ShadersUseHighQualityBlock(class UObject* WorldContextObject);
	static void ShowMouseCursor(class APlayerController* PlayerController);
	static void ShowSystemHelp();
	static void StopSound(class UAkAudioEvent* Sound);
	static void WaitForAllSaveAsyncOperations(class UObject* WorldContextObject);
	static bool WasMouseMoved(class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameBaseStatics">();
	}
	static class UGameBaseStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameBaseStatics>();
	}
};
static_assert(alignof(UGameBaseStatics) == 0x000008, "Wrong alignment on UGameBaseStatics");
static_assert(sizeof(UGameBaseStatics) == 0x000028, "Wrong size on UGameBaseStatics");

// Class GameBase.GameModeMenuController
// 0x00A0 (0x0140 - 0x00A0)
class UGameModeMenuController final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x48];                                      // 0x00A0(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FStateWidget>        StateWidgets;                                      // 0x00E8(0x0050)(Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_138[0x8];                                      // 0x0138(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameModeMenuController">();
	}
	static class UGameModeMenuController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameModeMenuController>();
	}
};
static_assert(alignof(UGameModeMenuController) == 0x000008, "Wrong alignment on UGameModeMenuController");
static_assert(sizeof(UGameModeMenuController) == 0x000140, "Wrong size on UGameModeMenuController");
static_assert(offsetof(UGameModeMenuController, StateWidgets) == 0x0000E8, "Member 'UGameModeMenuController::StateWidgets' has a wrong offset!");

// Class GameBase.GameSettings
// 0x0118 (0x0150 - 0x0038)
class UGameSettings final : public UDeveloperSettings
{
public:
	class FString                                 DefaultLanguage;                                   // 0x0038(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FString>                         SupportedLanguages;                                // 0x0048(0x0010)(Edit, ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	class FString                                 DefaulAudiotLanguage;                              // 0x0058(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FString>                         SupportedAudioLanguages;                           // 0x0068(0x0010)(Edit, ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	class FString                                 WorldTravelMovie;                                  // 0x0078(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMovieConfig>            WorldTravelMovieConfig;                            // 0x0088(0x0030)(Edit, Config, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   LoadScreenWidgetClass;                             // 0x00B8(0x0030)(Edit, Config, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   LoadScreenOverlayClass;                            // 0x00E8(0x0030)(Edit, Config, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseWSADAsUINavigation;                            // 0x0118(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShowLostPadDialogOnDesktop;                       // 0x0119(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_11A[0x6];                                      // 0x011A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UDataAsset>              DLCConfig;                                         // 0x0120(0x0030)(Edit, Config, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSettings">();
	}
	static class UGameSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSettings>();
	}
};
static_assert(alignof(UGameSettings) == 0x000008, "Wrong alignment on UGameSettings");
static_assert(sizeof(UGameSettings) == 0x000150, "Wrong size on UGameSettings");
static_assert(offsetof(UGameSettings, DefaultLanguage) == 0x000038, "Member 'UGameSettings::DefaultLanguage' has a wrong offset!");
static_assert(offsetof(UGameSettings, SupportedLanguages) == 0x000048, "Member 'UGameSettings::SupportedLanguages' has a wrong offset!");
static_assert(offsetof(UGameSettings, DefaulAudiotLanguage) == 0x000058, "Member 'UGameSettings::DefaulAudiotLanguage' has a wrong offset!");
static_assert(offsetof(UGameSettings, SupportedAudioLanguages) == 0x000068, "Member 'UGameSettings::SupportedAudioLanguages' has a wrong offset!");
static_assert(offsetof(UGameSettings, WorldTravelMovie) == 0x000078, "Member 'UGameSettings::WorldTravelMovie' has a wrong offset!");
static_assert(offsetof(UGameSettings, WorldTravelMovieConfig) == 0x000088, "Member 'UGameSettings::WorldTravelMovieConfig' has a wrong offset!");
static_assert(offsetof(UGameSettings, LoadScreenWidgetClass) == 0x0000B8, "Member 'UGameSettings::LoadScreenWidgetClass' has a wrong offset!");
static_assert(offsetof(UGameSettings, LoadScreenOverlayClass) == 0x0000E8, "Member 'UGameSettings::LoadScreenOverlayClass' has a wrong offset!");
static_assert(offsetof(UGameSettings, bUseWSADAsUINavigation) == 0x000118, "Member 'UGameSettings::bUseWSADAsUINavigation' has a wrong offset!");
static_assert(offsetof(UGameSettings, bShowLostPadDialogOnDesktop) == 0x000119, "Member 'UGameSettings::bShowLostPadDialogOnDesktop' has a wrong offset!");
static_assert(offsetof(UGameSettings, DLCConfig) == 0x000120, "Member 'UGameSettings::DLCConfig' has a wrong offset!");

// Class GameBase.GameAutoSettings
// 0x0038 (0x0070 - 0x0038)
class UGameAutoSettings final : public UDeveloperSettings
{
public:
	int32                                         Revision;                                          // 0x0038(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Stream;                                            // 0x0040(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PackageName;                                       // 0x0050(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Archive;                                           // 0x0060(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameAutoSettings">();
	}
	static class UGameAutoSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameAutoSettings>();
	}
};
static_assert(alignof(UGameAutoSettings) == 0x000008, "Wrong alignment on UGameAutoSettings");
static_assert(sizeof(UGameAutoSettings) == 0x000070, "Wrong size on UGameAutoSettings");
static_assert(offsetof(UGameAutoSettings, Revision) == 0x000038, "Member 'UGameAutoSettings::Revision' has a wrong offset!");
static_assert(offsetof(UGameAutoSettings, Stream) == 0x000040, "Member 'UGameAutoSettings::Stream' has a wrong offset!");
static_assert(offsetof(UGameAutoSettings, PackageName) == 0x000050, "Member 'UGameAutoSettings::PackageName' has a wrong offset!");
static_assert(offsetof(UGameAutoSettings, Archive) == 0x000060, "Member 'UGameAutoSettings::Archive' has a wrong offset!");

// Class GameBase.GSAOptionsSettings
// 0x0010 (0x0048 - 0x0038)
class UGSAOptionsSettings final : public UDeveloperSettings
{
public:
	TArray<struct FGsaNamedOption>                GsaOptions;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GSAOptionsSettings">();
	}
	static class UGSAOptionsSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGSAOptionsSettings>();
	}
};
static_assert(alignof(UGSAOptionsSettings) == 0x000008, "Wrong alignment on UGSAOptionsSettings");
static_assert(sizeof(UGSAOptionsSettings) == 0x000048, "Wrong size on UGSAOptionsSettings");
static_assert(offsetof(UGSAOptionsSettings, GsaOptions) == 0x000038, "Member 'UGSAOptionsSettings::GsaOptions' has a wrong offset!");

// Class GameBase.InputModeManager
// 0x0008 (0x0030 - 0x0028)
class UInputModeManager final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputModeManager">();
	}
	static class UInputModeManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputModeManager>();
	}
};
static_assert(alignof(UInputModeManager) == 0x000008, "Wrong alignment on UInputModeManager");
static_assert(sizeof(UInputModeManager) == 0x000030, "Wrong size on UInputModeManager");

// Class GameBase.LastScreenshotImage
// 0x0010 (0x02C0 - 0x02B0)
class ULastScreenshotImage final : public UImage
{
public:
	uint8                                         Pad_2B0[0x10];                                     // 0x02B0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Refresh();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LastScreenshotImage">();
	}
	static class ULastScreenshotImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULastScreenshotImage>();
	}
};
static_assert(alignof(ULastScreenshotImage) == 0x000010, "Wrong alignment on ULastScreenshotImage");
static_assert(sizeof(ULastScreenshotImage) == 0x0002C0, "Wrong size on ULastScreenshotImage");

// Class GameBase.LoadingVideoOverlayWidget
// 0x0018 (0x0290 - 0x0278)
class ULoadingVideoOverlayWidget final : public UUserWidget
{
public:
	uint8                                         Pad_278[0x10];                                     // 0x0278(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class ULocalizedOverlays*                     Subtitles;                                         // 0x0288(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void MovieTimeChanged(float MovieTime, const class FString& MovieName);
	void OnMovieTimeChanged(float MovieTime, const class FString& MovieName);
	void ResetSubtitles();
	void ResetWorldLoadState();
	void SetSubtitles(const class FString& NewSubtitles);
	void WorldIsFinallyLoaded();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LoadingVideoOverlayWidget">();
	}
	static class ULoadingVideoOverlayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULoadingVideoOverlayWidget>();
	}
};
static_assert(alignof(ULoadingVideoOverlayWidget) == 0x000008, "Wrong alignment on ULoadingVideoOverlayWidget");
static_assert(sizeof(ULoadingVideoOverlayWidget) == 0x000290, "Wrong size on ULoadingVideoOverlayWidget");
static_assert(offsetof(ULoadingVideoOverlayWidget, Subtitles) == 0x000288, "Member 'ULoadingVideoOverlayWidget::Subtitles' has a wrong offset!");

// Class GameBase.LoadScreenWidget
// 0x0078 (0x02F0 - 0x0278)
class ULoadScreenWidget : public UUserWidget
{
public:
	uint8                                         Pad_278[0x28];                                     // 0x0278(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          WaitForInput;                                      // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateSound                            PressedSound;                                      // 0x02A8(0x0018)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FKey>                           ActivationKeys;                                    // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D0[0x20];                                     // 0x02D0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnFadedOut();
	void OnFadeOut();
	void OnPrepareToShow();
	void OnShow(bool IsFromNewGame, int32 ZOrder);
	void OnShowReadyForPlay();
	void ReadyForPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LoadScreenWidget">();
	}
	static class ULoadScreenWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULoadScreenWidget>();
	}
};
static_assert(alignof(ULoadScreenWidget) == 0x000008, "Wrong alignment on ULoadScreenWidget");
static_assert(sizeof(ULoadScreenWidget) == 0x0002F0, "Wrong size on ULoadScreenWidget");
static_assert(offsetof(ULoadScreenWidget, WaitForInput) == 0x0002A0, "Member 'ULoadScreenWidget::WaitForInput' has a wrong offset!");
static_assert(offsetof(ULoadScreenWidget, PressedSound) == 0x0002A8, "Member 'ULoadScreenWidget::PressedSound' has a wrong offset!");
static_assert(offsetof(ULoadScreenWidget, ActivationKeys) == 0x0002C0, "Member 'ULoadScreenWidget::ActivationKeys' has a wrong offset!");

// Class GameBase.LostPadWidget
// 0x0048 (0x03E0 - 0x0398)
class ULostPadWidget final : public UAskDialogWidget
{
public:
	uint8                                         Pad_398[0x10];                                     // 0x0398(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                SwitchUser_info;                                   // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                Cancel_info;                                       // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B8[0x28];                                     // 0x03B8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsInfoTypeDisconnected() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LostPadWidget">();
	}
	static class ULostPadWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULostPadWidget>();
	}
};
static_assert(alignof(ULostPadWidget) == 0x000008, "Wrong alignment on ULostPadWidget");
static_assert(sizeof(ULostPadWidget) == 0x0003E0, "Wrong size on ULostPadWidget");
static_assert(offsetof(ULostPadWidget, SwitchUser_info) == 0x0003A8, "Member 'ULostPadWidget::SwitchUser_info' has a wrong offset!");
static_assert(offsetof(ULostPadWidget, Cancel_info) == 0x0003B0, "Member 'ULostPadWidget::Cancel_info' has a wrong offset!");

// Class GameBase.MainMenuGameModeController
// 0x00D8 (0x0208 - 0x0130)
class UMainMenuGameModeController final : public UBaseGameModeController
{
public:
	TSoftClassPtr<class UClass>                   MenuWidgetClass;                                   // 0x0130(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NoClear, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   StartGameWidgetClass;                              // 0x0160(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   UserSelectionWidgetClass;                          // 0x0190(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   StartGameSettingsWidgetClass;                      // 0x01C0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NoClear, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          MainMenuOpenEvent;                                 // 0x01F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          MainMenuCloseEvent;                                // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_200[0x8];                                      // 0x0200(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MainMenuGameModeController">();
	}
	static class UMainMenuGameModeController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMainMenuGameModeController>();
	}
};
static_assert(alignof(UMainMenuGameModeController) == 0x000008, "Wrong alignment on UMainMenuGameModeController");
static_assert(sizeof(UMainMenuGameModeController) == 0x000208, "Wrong size on UMainMenuGameModeController");
static_assert(offsetof(UMainMenuGameModeController, MenuWidgetClass) == 0x000130, "Member 'UMainMenuGameModeController::MenuWidgetClass' has a wrong offset!");
static_assert(offsetof(UMainMenuGameModeController, StartGameWidgetClass) == 0x000160, "Member 'UMainMenuGameModeController::StartGameWidgetClass' has a wrong offset!");
static_assert(offsetof(UMainMenuGameModeController, UserSelectionWidgetClass) == 0x000190, "Member 'UMainMenuGameModeController::UserSelectionWidgetClass' has a wrong offset!");
static_assert(offsetof(UMainMenuGameModeController, StartGameSettingsWidgetClass) == 0x0001C0, "Member 'UMainMenuGameModeController::StartGameSettingsWidgetClass' has a wrong offset!");
static_assert(offsetof(UMainMenuGameModeController, MainMenuOpenEvent) == 0x0001F0, "Member 'UMainMenuGameModeController::MainMenuOpenEvent' has a wrong offset!");
static_assert(offsetof(UMainMenuGameModeController, MainMenuCloseEvent) == 0x0001F8, "Member 'UMainMenuGameModeController::MainMenuCloseEvent' has a wrong offset!");

// Class GameBase.MainMenuWidget
// 0x00B8 (0x0358 - 0x02A0)
class UMainMenuWidget : public UBUserWidget
{
public:
	uint8                                         Pad_2A0[0x8];                                      // 0x02A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateSound                            PressedSound;                                      // 0x02A8(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           SwitchUserKeys;                                    // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D0[0x10];                                     // 0x02D0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       LoadingFadeOut_anim;                               // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           CameraFadeOutColor;                                // 0x02E8(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F8[0x60];                                     // 0x02F8(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool IsSystemHelpSupported();
	static void ShowSystemHelp();

	void BeginNewGame(class UMovieConfig* Movie, float NonSkippableLen);
	void ContinueGame(class UMovieConfig* Movie, float NonSkippableLen);
	void FadeOutForLoading();
	void LoadingFadedOut();
	void LoadSavedGame(int32 SlotIndex, class UMovieConfig* Movie, float NonSkippableLen);
	void OnHide();
	bool OnLoadingFadeOut();
	void OnShow();
	void PopulateSlots(bool WithScreenshots, bool SortByDate, bool SaveMode);
	void QuitGame();
	void ReturnToGame();
	void SelectSlot();
	void ToMainMenu();

	int32 GetSlotIndex(int32 Index_0) const;
	int32 GetSlotsCount() const;
	struct FSaveSlotInfo GetTheNewestSlotInfo(bool WithScreenShot) const;
	bool HasSlots() const;
	bool HasUserSlots() const;
	bool IsShowUserInfo() const;
	bool IsSlotListNotEmpty() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MainMenuWidget">();
	}
	static class UMainMenuWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMainMenuWidget>();
	}
};
static_assert(alignof(UMainMenuWidget) == 0x000008, "Wrong alignment on UMainMenuWidget");
static_assert(sizeof(UMainMenuWidget) == 0x000358, "Wrong size on UMainMenuWidget");
static_assert(offsetof(UMainMenuWidget, PressedSound) == 0x0002A8, "Member 'UMainMenuWidget::PressedSound' has a wrong offset!");
static_assert(offsetof(UMainMenuWidget, SwitchUserKeys) == 0x0002C0, "Member 'UMainMenuWidget::SwitchUserKeys' has a wrong offset!");
static_assert(offsetof(UMainMenuWidget, LoadingFadeOut_anim) == 0x0002E0, "Member 'UMainMenuWidget::LoadingFadeOut_anim' has a wrong offset!");
static_assert(offsetof(UMainMenuWidget, CameraFadeOutColor) == 0x0002E8, "Member 'UMainMenuWidget::CameraFadeOutColor' has a wrong offset!");

// Class GameBase.MovieConfig
// 0x0030 (0x0060 - 0x0030)
class UMovieConfig final : public UDataAsset
{
public:
	class FString                                 FilePath;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MovieName;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULocalizedOverlays*                     Subtitles;                                         // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnskipableLen;                                     // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieConfig">();
	}
	static class UMovieConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieConfig>();
	}
};
static_assert(alignof(UMovieConfig) == 0x000008, "Wrong alignment on UMovieConfig");
static_assert(sizeof(UMovieConfig) == 0x000060, "Wrong size on UMovieConfig");
static_assert(offsetof(UMovieConfig, FilePath) == 0x000030, "Member 'UMovieConfig::FilePath' has a wrong offset!");
static_assert(offsetof(UMovieConfig, MovieName) == 0x000040, "Member 'UMovieConfig::MovieName' has a wrong offset!");
static_assert(offsetof(UMovieConfig, Subtitles) == 0x000050, "Member 'UMovieConfig::Subtitles' has a wrong offset!");
static_assert(offsetof(UMovieConfig, UnskipableLen) == 0x000058, "Member 'UMovieConfig::UnskipableLen' has a wrong offset!");

// Class GameBase.OnlineUtility
// 0x0000 (0x0028 - 0x0028)
class UOnlineUtility final : public UBlueprintFunctionLibrary
{
public:
	static bool IsEOSActive(class UObject* WorldContextObject);
	static bool IsGDKActive(class UObject* WorldContextObject);
	static bool IsGogActive(class UObject* WorldContextObject);
	static bool IsLiveActive(class UObject* WorldContextObject);
	static bool IsSteamActive(class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OnlineUtility">();
	}
	static class UOnlineUtility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOnlineUtility>();
	}
};
static_assert(alignof(UOnlineUtility) == 0x000008, "Wrong alignment on UOnlineUtility");
static_assert(sizeof(UOnlineUtility) == 0x000028, "Wrong size on UOnlineUtility");

// Class GameBase.PlayerProfile
// 0x0138 (0x0160 - 0x0028)
class UPlayerProfile : public USaveGame
{
public:
	TMap<class FName, struct FVolumeData>         Volumes;                                           // 0x0028(0x0050)(Protected, NativeAccessSpecifierProtected)
	int64                                         AudioDeviceUID;                                    // 0x0078(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AudioProfileNightMode;                             // 0x0080(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAudioProfileOption                           AudioProfile;                                      // 0x0081(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGFXSettings                           GFXSettings;                                       // 0x0088(0x0090)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0118(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AudioLanguage;                                     // 0x0128(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowSubtitles;                                     // 0x0138(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowNonVerbalCaptions;                             // 0x0139(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SubtitleNames;                                     // 0x013A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextSize                                     SubtitleSize;                                      // 0x013B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESubtitleColor                                SubtitleColor;                                     // 0x013C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextFont                                     SubtitleFont;                                      // 0x013D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESubtitleBackground                           SubtitleBackground;                                // 0x013E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ControlTipsVisibility;                             // 0x013F(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipsVisibilityEffects                    ControlTipsVisibilityEffects;                      // 0x0140(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextFont                                     ControlTipsTextFont;                               // 0x0141(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextSize                                     ControlTipsTextSize;                               // 0x0142(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EForceFeedback                                ForceFeedback;                                     // 0x0143(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AdaptiveTriggers;                                  // 0x0144(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControllerIcons                              ControllerIcons;                                   // 0x0145(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InvertAcceptBackKeys;                              // 0x0146(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_147[0x1];                                      // 0x0147(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeadZone_Gamepad_Left;                             // 0x0148(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeadZone_Gamepad_Right;                            // 0x014C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Accessibility;                                     // 0x0150(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EColorVisionDeficiency                        ColorVisionDeficiency;                             // 0x0151(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_152[0x2];                                      // 0x0152(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ColorVisionDeficiencySeverity;                     // 0x0154(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Version;                                           // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool IsHDREnabledAndAllowed();

	float GetVolume(class FName Name_0) const;
	bool IsMuted(class FName Name_0) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayerProfile">();
	}
	static class UPlayerProfile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerProfile>();
	}
};
static_assert(alignof(UPlayerProfile) == 0x000008, "Wrong alignment on UPlayerProfile");
static_assert(sizeof(UPlayerProfile) == 0x000160, "Wrong size on UPlayerProfile");
static_assert(offsetof(UPlayerProfile, Volumes) == 0x000028, "Member 'UPlayerProfile::Volumes' has a wrong offset!");
static_assert(offsetof(UPlayerProfile, AudioDeviceUID) == 0x000078, "Member 'UPlayerProfile::AudioDeviceUID' has a wrong offset!");
static_assert(offsetof(UPlayerProfile, AudioProfileNightMode) == 0x000080, "Member 'UPlayerProfile::AudioProfileNightMode' has a wrong offset!");
static_assert(offsetof(UPlayerProfile, AudioProfile) == 0x000081, "Member 'UPlayerProfile::AudioProfile' has a wrong offset!");
static_assert(offsetof(UPlayerProfile, GFXSettings) == 0x000088, "Member 'UPlayerProfile::GFXSettings' has a wrong offset!");
static_assert(offsetof(UPlayerProfile, Language) == 0x000118, "Member 'UPlayerProfile::Language' has a wrong offset!");
static_assert(offsetof(UPlayerProfile, AudioLanguage) == 0x000128, "Member 'UPlayerProfile::AudioLanguage' has a wrong offset!");
static_assert(offsetof(UPlayerProfile, ShowSubtitles) == 0x000138, "Member 'UPlayerProfile::ShowSubtitles' has a wrong offset!");
static_assert(offsetof(UPlayerProfile, ShowNonVerbalCaptions) == 0x000139, "Member 'UPlayerProfile::ShowNonVerbalCaptions' has a wrong offset!");
static_assert(offsetof(UPlayerProfile, SubtitleNames) == 0x00013A, "Member 'UPlayerProfile::SubtitleNames' has a wrong offset!");
static_assert(offsetof(UPlayerProfile, SubtitleSize) == 0x00013B, "Member 'UPlayerProfile::SubtitleSize' has a wrong offset!");
static_assert(offsetof(UPlayerProfile, SubtitleColor) == 0x00013C, "Member 'UPlayerProfile::SubtitleColor' has a wrong offset!");
static_assert(offsetof(UPlayerProfile, SubtitleFont) == 0x00013D, "Member 'UPlayerProfile::SubtitleFont' has a wrong offset!");
static_assert(offsetof(UPlayerProfile, SubtitleBackground) == 0x00013E, "Member 'UPlayerProfile::SubtitleBackground' has a wrong offset!");
static_assert(offsetof(UPlayerProfile, ControlTipsVisibility) == 0x00013F, "Member 'UPlayerProfile::ControlTipsVisibility' has a wrong offset!");
static_assert(offsetof(UPlayerProfile, ControlTipsVisibilityEffects) == 0x000140, "Member 'UPlayerProfile::ControlTipsVisibilityEffects' has a wrong offset!");
static_assert(offsetof(UPlayerProfile, ControlTipsTextFont) == 0x000141, "Member 'UPlayerProfile::ControlTipsTextFont' has a wrong offset!");
static_assert(offsetof(UPlayerProfile, ControlTipsTextSize) == 0x000142, "Member 'UPlayerProfile::ControlTipsTextSize' has a wrong offset!");
static_assert(offsetof(UPlayerProfile, ForceFeedback) == 0x000143, "Member 'UPlayerProfile::ForceFeedback' has a wrong offset!");
static_assert(offsetof(UPlayerProfile, AdaptiveTriggers) == 0x000144, "Member 'UPlayerProfile::AdaptiveTriggers' has a wrong offset!");
static_assert(offsetof(UPlayerProfile, ControllerIcons) == 0x000145, "Member 'UPlayerProfile::ControllerIcons' has a wrong offset!");
static_assert(offsetof(UPlayerProfile, InvertAcceptBackKeys) == 0x000146, "Member 'UPlayerProfile::InvertAcceptBackKeys' has a wrong offset!");
static_assert(offsetof(UPlayerProfile, DeadZone_Gamepad_Left) == 0x000148, "Member 'UPlayerProfile::DeadZone_Gamepad_Left' has a wrong offset!");
static_assert(offsetof(UPlayerProfile, DeadZone_Gamepad_Right) == 0x00014C, "Member 'UPlayerProfile::DeadZone_Gamepad_Right' has a wrong offset!");
static_assert(offsetof(UPlayerProfile, Accessibility) == 0x000150, "Member 'UPlayerProfile::Accessibility' has a wrong offset!");
static_assert(offsetof(UPlayerProfile, ColorVisionDeficiency) == 0x000151, "Member 'UPlayerProfile::ColorVisionDeficiency' has a wrong offset!");
static_assert(offsetof(UPlayerProfile, ColorVisionDeficiencySeverity) == 0x000154, "Member 'UPlayerProfile::ColorVisionDeficiencySeverity' has a wrong offset!");
static_assert(offsetof(UPlayerProfile, Version) == 0x000158, "Member 'UPlayerProfile::Version' has a wrong offset!");

// Class GameBase.DefaultValuesProviderInterface
// 0x0000 (0x0028 - 0x0028)
class IDefaultValuesProviderInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DefaultValuesProviderInterface">();
	}
	static class IDefaultValuesProviderInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IDefaultValuesProviderInterface>();
	}
};
static_assert(alignof(IDefaultValuesProviderInterface) == 0x000008, "Wrong alignment on IDefaultValuesProviderInterface");
static_assert(sizeof(IDefaultValuesProviderInterface) == 0x000028, "Wrong size on IDefaultValuesProviderInterface");

// Class GameBase.PlayGameModeController
// 0x00A0 (0x01D0 - 0x0130)
class UPlayGameModeController final : public UBaseGameModeController
{
public:
	TSoftClassPtr<class UClass>                   LoadWidgetClass;                                   // 0x0130(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NoClear, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   MenuWidgetClass;                                   // 0x0160(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NoClear, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   AskReloadWidgetClass;                              // 0x0190(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NoClear, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          InGameMenuOpenEvent;                               // 0x01C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          InGameMenuCloseEvent;                              // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayGameModeController">();
	}
	static class UPlayGameModeController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayGameModeController>();
	}
};
static_assert(alignof(UPlayGameModeController) == 0x000008, "Wrong alignment on UPlayGameModeController");
static_assert(sizeof(UPlayGameModeController) == 0x0001D0, "Wrong size on UPlayGameModeController");
static_assert(offsetof(UPlayGameModeController, LoadWidgetClass) == 0x000130, "Member 'UPlayGameModeController::LoadWidgetClass' has a wrong offset!");
static_assert(offsetof(UPlayGameModeController, MenuWidgetClass) == 0x000160, "Member 'UPlayGameModeController::MenuWidgetClass' has a wrong offset!");
static_assert(offsetof(UPlayGameModeController, AskReloadWidgetClass) == 0x000190, "Member 'UPlayGameModeController::AskReloadWidgetClass' has a wrong offset!");
static_assert(offsetof(UPlayGameModeController, InGameMenuOpenEvent) == 0x0001C0, "Member 'UPlayGameModeController::InGameMenuOpenEvent' has a wrong offset!");
static_assert(offsetof(UPlayGameModeController, InGameMenuCloseEvent) == 0x0001C8, "Member 'UPlayGameModeController::InGameMenuCloseEvent' has a wrong offset!");

// Class GameBase.PlayTimeComponent
// 0x0028 (0x00C8 - 0x00A0)
class UPlayTimeComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x28];                                      // 0x00A0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayTimeComponent">();
	}
	static class UPlayTimeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayTimeComponent>();
	}
};
static_assert(alignof(UPlayTimeComponent) == 0x000008, "Wrong alignment on UPlayTimeComponent");
static_assert(sizeof(UPlayTimeComponent) == 0x0000C8, "Wrong size on UPlayTimeComponent");

// Class GameBase.QualitySettingsDisablerComponent
// 0x0018 (0x00B8 - 0x00A0)
class UQualitySettingsDisablerComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          ReverseCondition;                                  // 0x00A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Tagless;                                           // 0x00A9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnabledOnQualityLow;                               // 0x00AA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnabledOnQualityMedium;                            // 0x00AB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnabledOnQualityHigh;                              // 0x00AC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnabledOnQualityEpic;                              // 0x00AD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnabledOnRaytracing;                               // 0x00AE(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnabledOnDesktop;                                  // 0x00AF(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnabledOnXBox1;                                    // 0x00B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnabledOnXBox1X;                                   // 0x00B1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnabledOnPS4;                                      // 0x00B2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnabledOnPS4Pro;                                   // 0x00B3(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnabledOnPS5;                                      // 0x00B4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnabledOnScarlet;                                  // 0x00B5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnabledOnLockhart;                                 // 0x00B6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B7[0x1];                                       // 0x00B7(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QualitySettingsDisablerComponent">();
	}
	static class UQualitySettingsDisablerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQualitySettingsDisablerComponent>();
	}
};
static_assert(alignof(UQualitySettingsDisablerComponent) == 0x000008, "Wrong alignment on UQualitySettingsDisablerComponent");
static_assert(sizeof(UQualitySettingsDisablerComponent) == 0x0000B8, "Wrong size on UQualitySettingsDisablerComponent");
static_assert(offsetof(UQualitySettingsDisablerComponent, ReverseCondition) == 0x0000A8, "Member 'UQualitySettingsDisablerComponent::ReverseCondition' has a wrong offset!");
static_assert(offsetof(UQualitySettingsDisablerComponent, Tagless) == 0x0000A9, "Member 'UQualitySettingsDisablerComponent::Tagless' has a wrong offset!");
static_assert(offsetof(UQualitySettingsDisablerComponent, EnabledOnQualityLow) == 0x0000AA, "Member 'UQualitySettingsDisablerComponent::EnabledOnQualityLow' has a wrong offset!");
static_assert(offsetof(UQualitySettingsDisablerComponent, EnabledOnQualityMedium) == 0x0000AB, "Member 'UQualitySettingsDisablerComponent::EnabledOnQualityMedium' has a wrong offset!");
static_assert(offsetof(UQualitySettingsDisablerComponent, EnabledOnQualityHigh) == 0x0000AC, "Member 'UQualitySettingsDisablerComponent::EnabledOnQualityHigh' has a wrong offset!");
static_assert(offsetof(UQualitySettingsDisablerComponent, EnabledOnQualityEpic) == 0x0000AD, "Member 'UQualitySettingsDisablerComponent::EnabledOnQualityEpic' has a wrong offset!");
static_assert(offsetof(UQualitySettingsDisablerComponent, EnabledOnRaytracing) == 0x0000AE, "Member 'UQualitySettingsDisablerComponent::EnabledOnRaytracing' has a wrong offset!");
static_assert(offsetof(UQualitySettingsDisablerComponent, EnabledOnDesktop) == 0x0000AF, "Member 'UQualitySettingsDisablerComponent::EnabledOnDesktop' has a wrong offset!");
static_assert(offsetof(UQualitySettingsDisablerComponent, EnabledOnXBox1) == 0x0000B0, "Member 'UQualitySettingsDisablerComponent::EnabledOnXBox1' has a wrong offset!");
static_assert(offsetof(UQualitySettingsDisablerComponent, EnabledOnXBox1X) == 0x0000B1, "Member 'UQualitySettingsDisablerComponent::EnabledOnXBox1X' has a wrong offset!");
static_assert(offsetof(UQualitySettingsDisablerComponent, EnabledOnPS4) == 0x0000B2, "Member 'UQualitySettingsDisablerComponent::EnabledOnPS4' has a wrong offset!");
static_assert(offsetof(UQualitySettingsDisablerComponent, EnabledOnPS4Pro) == 0x0000B3, "Member 'UQualitySettingsDisablerComponent::EnabledOnPS4Pro' has a wrong offset!");
static_assert(offsetof(UQualitySettingsDisablerComponent, EnabledOnPS5) == 0x0000B4, "Member 'UQualitySettingsDisablerComponent::EnabledOnPS5' has a wrong offset!");
static_assert(offsetof(UQualitySettingsDisablerComponent, EnabledOnScarlet) == 0x0000B5, "Member 'UQualitySettingsDisablerComponent::EnabledOnScarlet' has a wrong offset!");
static_assert(offsetof(UQualitySettingsDisablerComponent, EnabledOnLockhart) == 0x0000B6, "Member 'UQualitySettingsDisablerComponent::EnabledOnLockhart' has a wrong offset!");

// Class GameBase.PlaythroughPersistentData
// 0x0018 (0x0040 - 0x0028)
class UPlaythroughPersistentData : public UObject
{
public:
	struct FGuid                                  PlaythroughId;                                     // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDateTime                              DateTime;                                          // 0x0038(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlaythroughPersistentData">();
	}
	static class UPlaythroughPersistentData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlaythroughPersistentData>();
	}
};
static_assert(alignof(UPlaythroughPersistentData) == 0x000008, "Wrong alignment on UPlaythroughPersistentData");
static_assert(sizeof(UPlaythroughPersistentData) == 0x000040, "Wrong size on UPlaythroughPersistentData");
static_assert(offsetof(UPlaythroughPersistentData, PlaythroughId) == 0x000028, "Member 'UPlaythroughPersistentData::PlaythroughId' has a wrong offset!");
static_assert(offsetof(UPlaythroughPersistentData, DateTime) == 0x000038, "Member 'UPlaythroughPersistentData::DateTime' has a wrong offset!");

// Class GameBase.PersistentSaveData
// 0x0020 (0x0048 - 0x0028)
class UPersistentSaveData : public USaveGame
{
public:
	int32                                         PlayCounter;                                       // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastSelectedSlot;                                  // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  LastPlaythroughId;                                 // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PersistentSaveData">();
	}
	static class UPersistentSaveData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPersistentSaveData>();
	}
};
static_assert(alignof(UPersistentSaveData) == 0x000008, "Wrong alignment on UPersistentSaveData");
static_assert(sizeof(UPersistentSaveData) == 0x000048, "Wrong size on UPersistentSaveData");
static_assert(offsetof(UPersistentSaveData, PlayCounter) == 0x000028, "Member 'UPersistentSaveData::PlayCounter' has a wrong offset!");
static_assert(offsetof(UPersistentSaveData, LastSelectedSlot) == 0x00002C, "Member 'UPersistentSaveData::LastSelectedSlot' has a wrong offset!");
static_assert(offsetof(UPersistentSaveData, LastPlaythroughId) == 0x000030, "Member 'UPersistentSaveData::LastPlaythroughId' has a wrong offset!");

// Class GameBase.SaveGameSettings
// 0x0040 (0x0078 - 0x0038)
class USaveGameSettings final : public UDeveloperSettings
{
public:
	int32                                         MaxSaveSlotsNumber;                                // 0x0038(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         AutoSaveSlotsNumber;                               // 0x003C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   SaveWidgetClass;                                   // 0x0040(0x0030)(Edit, Config, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          SaveIconOnlyInFullSave;                            // 0x0070(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SaveIconShowTime;                                  // 0x0074(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SaveGameSettings">();
	}
	static class USaveGameSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USaveGameSettings>();
	}
};
static_assert(alignof(USaveGameSettings) == 0x000008, "Wrong alignment on USaveGameSettings");
static_assert(sizeof(USaveGameSettings) == 0x000078, "Wrong size on USaveGameSettings");
static_assert(offsetof(USaveGameSettings, MaxSaveSlotsNumber) == 0x000038, "Member 'USaveGameSettings::MaxSaveSlotsNumber' has a wrong offset!");
static_assert(offsetof(USaveGameSettings, AutoSaveSlotsNumber) == 0x00003C, "Member 'USaveGameSettings::AutoSaveSlotsNumber' has a wrong offset!");
static_assert(offsetof(USaveGameSettings, SaveWidgetClass) == 0x000040, "Member 'USaveGameSettings::SaveWidgetClass' has a wrong offset!");
static_assert(offsetof(USaveGameSettings, SaveIconOnlyInFullSave) == 0x000070, "Member 'USaveGameSettings::SaveIconOnlyInFullSave' has a wrong offset!");
static_assert(offsetof(USaveGameSettings, SaveIconShowTime) == 0x000074, "Member 'USaveGameSettings::SaveIconShowTime' has a wrong offset!");

// Class GameBase.SaveManager
// 0x0160 (0x0190 - 0x0030)
class alignas(0x10) USaveManager final : public UGameInstanceSubsystem
{
public:
	class USaveProvider*                          _Provider;                                         // 0x0030(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_38[0xE0];                                      // 0x0038(0x00E0)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ScreenShot;                                        // 0x0118(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_120[0x70];                                     // 0x0120(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SaveManager">();
	}
	static class USaveManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<USaveManager>();
	}
};
static_assert(alignof(USaveManager) == 0x000010, "Wrong alignment on USaveManager");
static_assert(sizeof(USaveManager) == 0x000190, "Wrong size on USaveManager");
static_assert(offsetof(USaveManager, _Provider) == 0x000030, "Member 'USaveManager::_Provider' has a wrong offset!");
static_assert(offsetof(USaveManager, ScreenShot) == 0x000118, "Member 'USaveManager::ScreenShot' has a wrong offset!");

// Class GameBase.SaveProvider
// 0x0100 (0x0128 - 0x0028)
class USaveProvider final : public UObject
{
public:
	uint8                                         Pad_28[0x78];                                      // 0x0028(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	class UBGameInstance*                         GameInstance;                                      // 0x00A0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USaveGame*                              CurrentGameData;                                   // 0x00A8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B0[0x78];                                      // 0x00B0(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SaveProvider">();
	}
	static class USaveProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<USaveProvider>();
	}
};
static_assert(alignof(USaveProvider) == 0x000008, "Wrong alignment on USaveProvider");
static_assert(sizeof(USaveProvider) == 0x000128, "Wrong size on USaveProvider");
static_assert(offsetof(USaveProvider, GameInstance) == 0x0000A0, "Member 'USaveProvider::GameInstance' has a wrong offset!");
static_assert(offsetof(USaveProvider, CurrentGameData) == 0x0000A8, "Member 'USaveProvider::CurrentGameData' has a wrong offset!");

// Class GameBase.SaveWidget
// 0x0000 (0x0278 - 0x0278)
class USaveWidget final : public UUserWidget
{
public:
	void ShowEnd();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SaveWidget">();
	}
	static class USaveWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USaveWidget>();
	}
};
static_assert(alignof(USaveWidget) == 0x000008, "Wrong alignment on USaveWidget");
static_assert(sizeof(USaveWidget) == 0x000278, "Wrong size on USaveWidget");

// Class GameBase.SlotSelectionWidget
// 0x0030 (0x02A8 - 0x0278)
class USlotSelectionWidget final : public UUserWidget
{
public:
	bool                                          CreateScreenshootsTexture;                         // 0x0278(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_279[0x2F];                                     // 0x0279(0x002F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Continue(int32 SelectedSlot, bool ClearSlot);
	void GenerateSlotList();

	const TArray<struct FSaveSlotInfo> GetSlotList() const;
	int32 GetSlotsCount() const;
	int32 GetTheNewestSlotIndex() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SlotSelectionWidget">();
	}
	static class USlotSelectionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USlotSelectionWidget>();
	}
};
static_assert(alignof(USlotSelectionWidget) == 0x000008, "Wrong alignment on USlotSelectionWidget");
static_assert(sizeof(USlotSelectionWidget) == 0x0002A8, "Wrong size on USlotSelectionWidget");
static_assert(offsetof(USlotSelectionWidget, CreateScreenshootsTexture) == 0x000278, "Member 'USlotSelectionWidget::CreateScreenshootsTexture' has a wrong offset!");

// Class GameBase.SpecialEvents
// 0x0010 (0x0040 - 0x0030)
class USpecialEvents final : public UDataAsset
{
public:
	TArray<struct FSpecialEvent>                  Events;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpecialEvents">();
	}
	static class USpecialEvents* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpecialEvents>();
	}
};
static_assert(alignof(USpecialEvents) == 0x000008, "Wrong alignment on USpecialEvents");
static_assert(sizeof(USpecialEvents) == 0x000040, "Wrong size on USpecialEvents");
static_assert(offsetof(USpecialEvents, Events) == 0x000030, "Member 'USpecialEvents::Events' has a wrong offset!");

// Class GameBase.StartGameWidget
// 0x0050 (0x02C8 - 0x0278)
class UStartGameWidget : public UUserWidget
{
public:
	uint8                                         Pad_278[0x8];                                      // 0x0278(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetSwitcher*                        SlideShow_switcher;                                // 0x0280(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       FadeOut_anim;                                      // 0x0288(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxTimer;                                          // 0x0290(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinInputTimer;                                     // 0x0294(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_298[0x28];                                     // 0x0298(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UProgressBar*                           ProgressBar_wdg;                                   // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Continue();
	void OnFadedOutAnim();
	void OnNext();
	void OnStart();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StartGameWidget">();
	}
	static class UStartGameWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStartGameWidget>();
	}
};
static_assert(alignof(UStartGameWidget) == 0x000008, "Wrong alignment on UStartGameWidget");
static_assert(sizeof(UStartGameWidget) == 0x0002C8, "Wrong size on UStartGameWidget");
static_assert(offsetof(UStartGameWidget, SlideShow_switcher) == 0x000280, "Member 'UStartGameWidget::SlideShow_switcher' has a wrong offset!");
static_assert(offsetof(UStartGameWidget, FadeOut_anim) == 0x000288, "Member 'UStartGameWidget::FadeOut_anim' has a wrong offset!");
static_assert(offsetof(UStartGameWidget, MaxTimer) == 0x000290, "Member 'UStartGameWidget::MaxTimer' has a wrong offset!");
static_assert(offsetof(UStartGameWidget, MinInputTimer) == 0x000294, "Member 'UStartGameWidget::MinInputTimer' has a wrong offset!");
static_assert(offsetof(UStartGameWidget, ProgressBar_wdg) == 0x0002C0, "Member 'UStartGameWidget::ProgressBar_wdg' has a wrong offset!");

// Class GameBase.StartGamePanel
// 0x0010 (0x0188 - 0x0178)
class UStartGamePanel : public UCanvasPanel
{
public:
	EStartGamePanelPlatform                       TargetPlatform;                                    // 0x0178(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBeOmittedInFastForward;                        // 0x0179(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17A[0x2];                                      // 0x017A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxTimer;                                          // 0x017C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinInputTimer;                                     // 0x0180(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StartGamePanel">();
	}
	static class UStartGamePanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStartGamePanel>();
	}
};
static_assert(alignof(UStartGamePanel) == 0x000008, "Wrong alignment on UStartGamePanel");
static_assert(sizeof(UStartGamePanel) == 0x000188, "Wrong size on UStartGamePanel");
static_assert(offsetof(UStartGamePanel, TargetPlatform) == 0x000178, "Member 'UStartGamePanel::TargetPlatform' has a wrong offset!");
static_assert(offsetof(UStartGamePanel, bCanBeOmittedInFastForward) == 0x000179, "Member 'UStartGamePanel::bCanBeOmittedInFastForward' has a wrong offset!");
static_assert(offsetof(UStartGamePanel, MaxTimer) == 0x00017C, "Member 'UStartGamePanel::MaxTimer' has a wrong offset!");
static_assert(offsetof(UStartGamePanel, MinInputTimer) == 0x000180, "Member 'UStartGamePanel::MinInputTimer' has a wrong offset!");

// Class GameBase.ShaderCompilationStartGamePanel
// 0x0010 (0x0198 - 0x0188)
class UShaderCompilationStartGamePanel final : public UStartGamePanel
{
public:
	class UProgressBar*                           ProgressBar_wdg;                                   // 0x0188(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_190[0x8];                                      // 0x0190(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ShaderCompilationStartGamePanel">();
	}
	static class UShaderCompilationStartGamePanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UShaderCompilationStartGamePanel>();
	}
};
static_assert(alignof(UShaderCompilationStartGamePanel) == 0x000008, "Wrong alignment on UShaderCompilationStartGamePanel");
static_assert(sizeof(UShaderCompilationStartGamePanel) == 0x000198, "Wrong size on UShaderCompilationStartGamePanel");
static_assert(offsetof(UShaderCompilationStartGamePanel, ProgressBar_wdg) == 0x000188, "Member 'UShaderCompilationStartGamePanel::ProgressBar_wdg' has a wrong offset!");

// Class GameBase.StateWidgetInterface
// 0x0000 (0x0028 - 0x0028)
class IStateWidgetInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StateWidgetInterface">();
	}
	static class IStateWidgetInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IStateWidgetInterface>();
	}
};
static_assert(alignof(IStateWidgetInterface) == 0x000008, "Wrong alignment on IStateWidgetInterface");
static_assert(sizeof(IStateWidgetInterface) == 0x000028, "Wrong size on IStateWidgetInterface");

// Class GameBase.EventReceiverInterface
// 0x0000 (0x0028 - 0x0028)
class IEventReceiverInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventReceiverInterface">();
	}
	static class IEventReceiverInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IEventReceiverInterface>();
	}
};
static_assert(alignof(IEventReceiverInterface) == 0x000008, "Wrong alignment on IEventReceiverInterface");
static_assert(sizeof(IEventReceiverInterface) == 0x000028, "Wrong size on IEventReceiverInterface");

// Class GameBase.StreamingDataProvider
// 0x0000 (0x0028 - 0x0028)
class IStreamingDataProvider final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StreamingDataProvider">();
	}
	static class IStreamingDataProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<IStreamingDataProvider>();
	}
};
static_assert(alignof(IStreamingDataProvider) == 0x000008, "Wrong alignment on IStreamingDataProvider");
static_assert(sizeof(IStreamingDataProvider) == 0x000028, "Wrong size on IStreamingDataProvider");

// Class GameBase.UserManager
// 0x00E0 (0x0110 - 0x0030)
class UUserManager final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x90];                                      // 0x0030(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	class ULocalPlayer*                           OwningUser;                                        // 0x00C0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C8[0x48];                                      // 0x00C8(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UserManager">();
	}
	static class UUserManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUserManager>();
	}
};
static_assert(alignof(UUserManager) == 0x000008, "Wrong alignment on UUserManager");
static_assert(sizeof(UUserManager) == 0x000110, "Wrong size on UUserManager");
static_assert(offsetof(UUserManager, OwningUser) == 0x0000C0, "Member 'UUserManager::OwningUser' has a wrong offset!");

// Class GameBase.BGameViewportClient
// 0x0000 (0x03A0 - 0x03A0)
class UBGameViewportClient final : public UGameViewportClient
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BGameViewportClient">();
	}
	static class UBGameViewportClient* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBGameViewportClient>();
	}
};
static_assert(alignof(UBGameViewportClient) == 0x000008, "Wrong alignment on UBGameViewportClient");
static_assert(sizeof(UBGameViewportClient) == 0x0003A0, "Wrong size on UBGameViewportClient");

// Class GameBase.UserSelectionWidget
// 0x0110 (0x0388 - 0x0278)
class UUserSelectionWidget : public UUserWidget
{
public:
	uint8                                         Pad_278[0xC8];                                     // 0x0278(0x00C8)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          ClickedSound;                                      // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          WrongClickedSound;                                 // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_350[0x38];                                     // 0x0350(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FadedOut();
	void OnFadeOut();
	void OnInputDeviceChanged();
	void OnShowAskNoUser();
	void OnShowPressA();
	void OnShowProcessing();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UserSelectionWidget">();
	}
	static class UUserSelectionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUserSelectionWidget>();
	}
};
static_assert(alignof(UUserSelectionWidget) == 0x000008, "Wrong alignment on UUserSelectionWidget");
static_assert(sizeof(UUserSelectionWidget) == 0x000388, "Wrong size on UUserSelectionWidget");
static_assert(offsetof(UUserSelectionWidget, ClickedSound) == 0x000340, "Member 'UUserSelectionWidget::ClickedSound' has a wrong offset!");
static_assert(offsetof(UUserSelectionWidget, WrongClickedSound) == 0x000348, "Member 'UUserSelectionWidget::WrongClickedSound' has a wrong offset!");

// Class GameBase.WorldTravelManager
// 0x0180 (0x01B0 - 0x0030)
class alignas(0x10) UWorldTravelManager final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLevelStreamingRequestHandle>   TravelStreamingRequests;                           // 0x0038(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UMovieConfig*                           LoadingMovie;                                      // 0x0048(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ULoadScreenWidget*                      LoadScreenWidget;                                  // 0x0058(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULoadingVideoOverlayWidget*             LoadScreenOverlay;                                 // 0x0060(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_68[0x148];                                     // 0x0068(0x0148)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WorldTravelManager">();
	}
	static class UWorldTravelManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldTravelManager>();
	}
};
static_assert(alignof(UWorldTravelManager) == 0x000010, "Wrong alignment on UWorldTravelManager");
static_assert(sizeof(UWorldTravelManager) == 0x0001B0, "Wrong size on UWorldTravelManager");
static_assert(offsetof(UWorldTravelManager, TravelStreamingRequests) == 0x000038, "Member 'UWorldTravelManager::TravelStreamingRequests' has a wrong offset!");
static_assert(offsetof(UWorldTravelManager, LoadingMovie) == 0x000048, "Member 'UWorldTravelManager::LoadingMovie' has a wrong offset!");
static_assert(offsetof(UWorldTravelManager, LoadScreenWidget) == 0x000058, "Member 'UWorldTravelManager::LoadScreenWidget' has a wrong offset!");
static_assert(offsetof(UWorldTravelManager, LoadScreenOverlay) == 0x000060, "Member 'UWorldTravelManager::LoadScreenOverlay' has a wrong offset!");

}

