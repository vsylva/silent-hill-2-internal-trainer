#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InputRebinding

#include "Basic.hpp"

#include "Commons_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// Enum InputRebinding.EInputRebindingDevice
// NumValues: 0x0005
enum class EInputRebindingDevice : uint8
{
	None                                     = 0,
	Any                                      = 1,
	MouseAndKeyboard                         = 2,
	Pad                                      = 3,
	EInputRebindingDevice_MAX                = 4,
};

// Enum InputRebinding.EActionType
// NumValues: 0x0005
enum class EActionType : uint8
{
	Action                                   = 0,
	Axis                                     = 1,
	Axis_Plus                                = 2,
	Axis_Minus                               = 3,
	EActionType_MAX                          = 4,
};

// Enum InputRebinding.EInputHandleType
// NumValues: 0x0006
enum class EInputHandleType : uint8
{
	Action                                   = 0,
	Axis                                     = 1,
	Axis_Plus                                = 2,
	Axis_Minus                               = 3,
	Axis_2D                                  = 4,
	EInputHandleType_MAX                     = 5,
};

// ScriptStruct InputRebinding.ActionDisplayInfo
// 0x0040 (0x0040 - 0x0000)
struct FActionDisplayInfo final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0020(0x0018)(Edit, NativeAccessSpecifierPublic)
	bool                                          bIsRebindable;                                     // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHoldable;                                       // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAdaptiveTriggers;                              // 0x003A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActionDisplayInfo) == 0x000008, "Wrong alignment on FActionDisplayInfo");
static_assert(sizeof(FActionDisplayInfo) == 0x000040, "Wrong size on FActionDisplayInfo");
static_assert(offsetof(FActionDisplayInfo, Name) == 0x000000, "Member 'FActionDisplayInfo::Name' has a wrong offset!");
static_assert(offsetof(FActionDisplayInfo, DisplayName) == 0x000008, "Member 'FActionDisplayInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FActionDisplayInfo, Description) == 0x000020, "Member 'FActionDisplayInfo::Description' has a wrong offset!");
static_assert(offsetof(FActionDisplayInfo, bIsRebindable) == 0x000038, "Member 'FActionDisplayInfo::bIsRebindable' has a wrong offset!");
static_assert(offsetof(FActionDisplayInfo, bIsHoldable) == 0x000039, "Member 'FActionDisplayInfo::bIsHoldable' has a wrong offset!");
static_assert(offsetof(FActionDisplayInfo, bUseAdaptiveTriggers) == 0x00003A, "Member 'FActionDisplayInfo::bUseAdaptiveTriggers' has a wrong offset!");

// ScriptStruct InputRebinding.UE4InputActionHandle
// 0x0008 (0x0008 - 0x0000)
struct FUE4InputActionHandle final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUE4InputActionHandle) == 0x000004, "Wrong alignment on FUE4InputActionHandle");
static_assert(sizeof(FUE4InputActionHandle) == 0x000008, "Wrong size on FUE4InputActionHandle");
static_assert(offsetof(FUE4InputActionHandle, ActionName) == 0x000000, "Member 'FUE4InputActionHandle::ActionName' has a wrong offset!");

// ScriptStruct InputRebinding.ActionBind
// 0x0020 (0x0020 - 0x0000)
struct FActionBind final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           Keys;                                              // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Toggleable;                                        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActionBind) == 0x000008, "Wrong alignment on FActionBind");
static_assert(sizeof(FActionBind) == 0x000020, "Wrong size on FActionBind");
static_assert(offsetof(FActionBind, Name) == 0x000000, "Member 'FActionBind::Name' has a wrong offset!");
static_assert(offsetof(FActionBind, Keys) == 0x000008, "Member 'FActionBind::Keys' has a wrong offset!");
static_assert(offsetof(FActionBind, Toggleable) == 0x000018, "Member 'FActionBind::Toggleable' has a wrong offset!");

// ScriptStruct InputRebinding.FloatKey
// 0x0020 (0x0020 - 0x0000)
struct FFloatKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFloatKey) == 0x000008, "Wrong alignment on FFloatKey");
static_assert(sizeof(FFloatKey) == 0x000020, "Wrong size on FFloatKey");
static_assert(offsetof(FFloatKey, Key) == 0x000000, "Member 'FFloatKey::Key' has a wrong offset!");
static_assert(offsetof(FFloatKey, Scale) == 0x000018, "Member 'FFloatKey::Scale' has a wrong offset!");

// ScriptStruct InputRebinding.AxisBind
// 0x0040 (0x0040 - 0x0000)
struct FAxisBind final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFloatKey>                      FloatKeys;                                         // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           PlusKeys;                                          // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           MinusKeys;                                         // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Toggleable;                                        // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAxisBind) == 0x000008, "Wrong alignment on FAxisBind");
static_assert(sizeof(FAxisBind) == 0x000040, "Wrong size on FAxisBind");
static_assert(offsetof(FAxisBind, Name) == 0x000000, "Member 'FAxisBind::Name' has a wrong offset!");
static_assert(offsetof(FAxisBind, FloatKeys) == 0x000008, "Member 'FAxisBind::FloatKeys' has a wrong offset!");
static_assert(offsetof(FAxisBind, PlusKeys) == 0x000018, "Member 'FAxisBind::PlusKeys' has a wrong offset!");
static_assert(offsetof(FAxisBind, MinusKeys) == 0x000028, "Member 'FAxisBind::MinusKeys' has a wrong offset!");
static_assert(offsetof(FAxisBind, Toggleable) == 0x000038, "Member 'FAxisBind::Toggleable' has a wrong offset!");

// ScriptStruct InputRebinding.BindingList
// 0x0028 (0x0028 - 0x0000)
struct FBindingList final
{
public:
	TArray<struct FActionBind>                    ActionBindings;                                    // 0x0000(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FAxisBind>                      AxisBindings;                                      // 0x0010(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bIgnoreExoticBinds;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBindingList) == 0x000008, "Wrong alignment on FBindingList");
static_assert(sizeof(FBindingList) == 0x000028, "Wrong size on FBindingList");
static_assert(offsetof(FBindingList, ActionBindings) == 0x000000, "Member 'FBindingList::ActionBindings' has a wrong offset!");
static_assert(offsetof(FBindingList, AxisBindings) == 0x000010, "Member 'FBindingList::AxisBindings' has a wrong offset!");
static_assert(offsetof(FBindingList, bIgnoreExoticBinds) == 0x000020, "Member 'FBindingList::bIgnoreExoticBinds' has a wrong offset!");

// ScriptStruct InputRebinding.UE4InputHandle
// 0x0004 (0x000C - 0x0008)
struct FUE4InputHandle final : public FNamedHandle
{
public:
	EInputHandleType                              Type;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUE4InputHandle) == 0x000004, "Wrong alignment on FUE4InputHandle");
static_assert(sizeof(FUE4InputHandle) == 0x00000C, "Wrong size on FUE4InputHandle");
static_assert(offsetof(FUE4InputHandle, Type) == 0x000008, "Member 'FUE4InputHandle::Type' has a wrong offset!");

// ScriptStruct InputRebinding.AxisDisplayInfo
// 0x0078 (0x0078 - 0x0000)
struct FAxisDisplayInfo final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForPadBindOnlyAsAxis;                              // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0028(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   PlusDisplayName;                                   // 0x0040(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   MinusDisplayName;                                  // 0x0058(0x0018)(Edit, NativeAccessSpecifierPublic)
	bool                                          bIsRebindable;                                     // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHoldable;                                       // 0x0071(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAdaptiveTriggers;                              // 0x0072(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_73[0x5];                                       // 0x0073(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAxisDisplayInfo) == 0x000008, "Wrong alignment on FAxisDisplayInfo");
static_assert(sizeof(FAxisDisplayInfo) == 0x000078, "Wrong size on FAxisDisplayInfo");
static_assert(offsetof(FAxisDisplayInfo, Name) == 0x000000, "Member 'FAxisDisplayInfo::Name' has a wrong offset!");
static_assert(offsetof(FAxisDisplayInfo, ForPadBindOnlyAsAxis) == 0x000008, "Member 'FAxisDisplayInfo::ForPadBindOnlyAsAxis' has a wrong offset!");
static_assert(offsetof(FAxisDisplayInfo, DisplayName) == 0x000010, "Member 'FAxisDisplayInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FAxisDisplayInfo, Description) == 0x000028, "Member 'FAxisDisplayInfo::Description' has a wrong offset!");
static_assert(offsetof(FAxisDisplayInfo, PlusDisplayName) == 0x000040, "Member 'FAxisDisplayInfo::PlusDisplayName' has a wrong offset!");
static_assert(offsetof(FAxisDisplayInfo, MinusDisplayName) == 0x000058, "Member 'FAxisDisplayInfo::MinusDisplayName' has a wrong offset!");
static_assert(offsetof(FAxisDisplayInfo, bIsRebindable) == 0x000070, "Member 'FAxisDisplayInfo::bIsRebindable' has a wrong offset!");
static_assert(offsetof(FAxisDisplayInfo, bIsHoldable) == 0x000071, "Member 'FAxisDisplayInfo::bIsHoldable' has a wrong offset!");
static_assert(offsetof(FAxisDisplayInfo, bUseAdaptiveTriggers) == 0x000072, "Member 'FAxisDisplayInfo::bUseAdaptiveTriggers' has a wrong offset!");

// ScriptStruct InputRebinding.AnalogAxisInfo
// 0x0048 (0x0048 - 0x0000)
struct FAnalogAxisInfo final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FUE4InputHandle                        XAxisHandle;                                       // 0x0030(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUE4InputHandle                        YAxisHandle;                                       // 0x003C(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnalogAxisInfo) == 0x000008, "Wrong alignment on FAnalogAxisInfo");
static_assert(sizeof(FAnalogAxisInfo) == 0x000048, "Wrong size on FAnalogAxisInfo");
static_assert(offsetof(FAnalogAxisInfo, DisplayName) == 0x000000, "Member 'FAnalogAxisInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FAnalogAxisInfo, Description) == 0x000018, "Member 'FAnalogAxisInfo::Description' has a wrong offset!");
static_assert(offsetof(FAnalogAxisInfo, XAxisHandle) == 0x000030, "Member 'FAnalogAxisInfo::XAxisHandle' has a wrong offset!");
static_assert(offsetof(FAnalogAxisInfo, YAxisHandle) == 0x00003C, "Member 'FAnalogAxisInfo::YAxisHandle' has a wrong offset!");

// ScriptStruct InputRebinding.ToggleableInfo
// 0x0010 (0x0010 - 0x0000)
struct FToggleableInfo final
{
public:
	struct FUE4InputHandle                        Handle;                                            // 0x0000(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ToggleByDefault;                                   // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FToggleableInfo) == 0x000004, "Wrong alignment on FToggleableInfo");
static_assert(sizeof(FToggleableInfo) == 0x000010, "Wrong size on FToggleableInfo");
static_assert(offsetof(FToggleableInfo, Handle) == 0x000000, "Member 'FToggleableInfo::Handle' has a wrong offset!");
static_assert(offsetof(FToggleableInfo, ToggleByDefault) == 0x00000C, "Member 'FToggleableInfo::ToggleByDefault' has a wrong offset!");

// ScriptStruct InputRebinding.InputState
// 0x0010 (0x0010 - 0x0000)
struct FInputState final
{
public:
	TArray<struct FUE4InputHandle>                Actions;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInputState) == 0x000008, "Wrong alignment on FInputState");
static_assert(sizeof(FInputState) == 0x000010, "Wrong size on FInputState");
static_assert(offsetof(FInputState, Actions) == 0x000000, "Member 'FInputState::Actions' has a wrong offset!");

// ScriptStruct InputRebinding.UE4InputAxisHandle
// 0x0008 (0x0008 - 0x0000)
struct FUE4InputAxisHandle final
{
public:
	class FName                                   AxisName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUE4InputAxisHandle) == 0x000004, "Wrong alignment on FUE4InputAxisHandle");
static_assert(sizeof(FUE4InputAxisHandle) == 0x000008, "Wrong size on FUE4InputAxisHandle");
static_assert(offsetof(FUE4InputAxisHandle, AxisName) == 0x000000, "Member 'FUE4InputAxisHandle::AxisName' has a wrong offset!");

// ScriptStruct InputRebinding.UE4KeyName
// 0x0030 (0x0030 - 0x0000)
struct FUE4KeyName final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUE4KeyName) == 0x000008, "Wrong alignment on FUE4KeyName");
static_assert(sizeof(FUE4KeyName) == 0x000030, "Wrong size on FUE4KeyName");
static_assert(offsetof(FUE4KeyName, Key) == 0x000000, "Member 'FUE4KeyName::Key' has a wrong offset!");
static_assert(offsetof(FUE4KeyName, DisplayName) == 0x000018, "Member 'FUE4KeyName::DisplayName' has a wrong offset!");

}

