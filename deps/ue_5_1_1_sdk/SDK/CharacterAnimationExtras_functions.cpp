#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CharacterAnimationExtras

#include "Basic.hpp"

#include "CharacterAnimationExtras_classes.hpp"
#include "CharacterAnimationExtras_parameters.hpp"


namespace SDK
{

// Function CharacterAnimationExtras.CharacterAnimationExtrasStatics.ApplyScaleToMorphTarget
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAnimInstance*                    AnimInstance                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FName, float>                CurveAndScale                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ALPHA                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimInstance*                    AnimInstanceContext                                    (Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAnimationExtrasStatics::ApplyScaleToMorphTarget(class UAnimInstance* AnimInstance, const TMap<class FName, float>& CurveAndScale, float ALPHA, class UAnimInstance*& AnimInstanceContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterAnimationExtrasStatics", "ApplyScaleToMorphTarget");

	Params::CharacterAnimationExtrasStatics_ApplyScaleToMorphTarget Parms{};

	Parms.AnimInstance = AnimInstance;
	Parms.CurveAndScale = std::move(CurveAndScale);
	Parms.ALPHA = ALPHA;
	Parms.AnimInstanceContext = AnimInstanceContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	AnimInstanceContext = Parms.AnimInstanceContext;
}


// Function CharacterAnimationExtras.CharacterAnimationExtrasStatics.EnsureLogError
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimInstance*                    AnimInstance                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Valid                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           MessageText                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterAnimationExtrasStatics::EnsureLogError(class UAnimInstance* AnimInstance, bool Valid, const class FString& MessageText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterAnimationExtrasStatics", "EnsureLogError");

	Params::CharacterAnimationExtrasStatics_EnsureLogError Parms{};

	Parms.AnimInstance = AnimInstance;
	Parms.Valid = Valid;
	Parms.MessageText = std::move(MessageText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CharacterAnimationExtras.CharacterAnimationExtrasStatics.GetAlphaBoolBlend
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInputAlphaBoolBlend             AlphaBoolBlend                                         (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCharacterAnimationExtrasStatics::GetAlphaBoolBlend(class UObject* WorldContextObject, struct FInputAlphaBoolBlend& AlphaBoolBlend, bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterAnimationExtrasStatics", "GetAlphaBoolBlend");

	Params::CharacterAnimationExtrasStatics_GetAlphaBoolBlend Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.AlphaBoolBlend = std::move(AlphaBoolBlend);
	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	AlphaBoolBlend = std::move(Parms.AlphaBoolBlend);

	return Parms.ReturnValue;
}


// Function CharacterAnimationExtras.CharacterAnimationExtrasStatics.GetAlphaFloatBlend
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInputScaleBiasClamp             AlphaFloatBlend                                        (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   FloatValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCharacterAnimationExtrasStatics::GetAlphaFloatBlend(class UObject* WorldContextObject, struct FInputScaleBiasClamp& AlphaFloatBlend, float FloatValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterAnimationExtrasStatics", "GetAlphaFloatBlend");

	Params::CharacterAnimationExtrasStatics_GetAlphaFloatBlend Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.AlphaFloatBlend = std::move(AlphaFloatBlend);
	Parms.FloatValue = FloatValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	AlphaFloatBlend = std::move(Parms.AlphaFloatBlend);

	return Parms.ReturnValue;
}


// Function CharacterAnimationExtras.CharacterAnimationExtrasStatics.GetStateWeight
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FAnimUpdateContext               UpdateContext                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAnimationStateResultReference   Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCharacterAnimationExtrasStatics::GetStateWeight(const struct FAnimUpdateContext& UpdateContext, const struct FAnimationStateResultReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterAnimationExtrasStatics", "GetStateWeight");

	Params::CharacterAnimationExtrasStatics_GetStateWeight Parms{};

	Parms.UpdateContext = std::move(UpdateContext);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

