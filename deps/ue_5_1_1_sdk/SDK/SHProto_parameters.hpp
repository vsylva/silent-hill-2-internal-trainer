#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SHProto

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "Engine_structs.hpp"
#include "Mai_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SHProto_structs.hpp"
#include "UCSW_structs.hpp"
#include "InputCore_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Dialog_structs.hpp"
#include "AIModule_structs.hpp"
#include "MovieScene_structs.hpp"
#include "Commons_structs.hpp"
#include "Being_structs.hpp"
#include "LevelStreaming_structs.hpp"
#include "Player_structs.hpp"
#include "GameBase_structs.hpp"
#include "SimpleSpawnPoints_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function SHProto.SHCineCameraActor.GetSHCineCameraComponent
// 0x0008 (0x0008 - 0x0000)
struct SHCineCameraActor_GetSHCineCameraComponent final
{
public:
	class USHCineCameraComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCineCameraActor_GetSHCineCameraComponent) == 0x000008, "Wrong alignment on SHCineCameraActor_GetSHCineCameraComponent");
static_assert(sizeof(SHCineCameraActor_GetSHCineCameraComponent) == 0x000008, "Wrong size on SHCineCameraActor_GetSHCineCameraComponent");
static_assert(offsetof(SHCineCameraActor_GetSHCineCameraComponent, ReturnValue) == 0x000000, "Member 'SHCineCameraActor_GetSHCineCameraComponent::ReturnValue' has a wrong offset!");

// Function SHProto.SHGameplayFocusSlotButton.OnSetHighlight
// 0x0001 (0x0001 - 0x0000)
struct SHGameplayFocusSlotButton_OnSetHighlight final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayFocusSlotButton_OnSetHighlight) == 0x000001, "Wrong alignment on SHGameplayFocusSlotButton_OnSetHighlight");
static_assert(sizeof(SHGameplayFocusSlotButton_OnSetHighlight) == 0x000001, "Wrong size on SHGameplayFocusSlotButton_OnSetHighlight");
static_assert(offsetof(SHGameplayFocusSlotButton_OnSetHighlight, Enable) == 0x000000, "Member 'SHGameplayFocusSlotButton_OnSetHighlight::Enable' has a wrong offset!");

// Function SHProto.SHNPCLocomotionAnimInstance.GetAnimComponent
// 0x0008 (0x0008 - 0x0000)
struct SHNPCLocomotionAnimInstance_GetAnimComponent final
{
public:
	class USHAnimComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHNPCLocomotionAnimInstance_GetAnimComponent) == 0x000008, "Wrong alignment on SHNPCLocomotionAnimInstance_GetAnimComponent");
static_assert(sizeof(SHNPCLocomotionAnimInstance_GetAnimComponent) == 0x000008, "Wrong size on SHNPCLocomotionAnimInstance_GetAnimComponent");
static_assert(offsetof(SHNPCLocomotionAnimInstance_GetAnimComponent, ReturnValue) == 0x000000, "Member 'SHNPCLocomotionAnimInstance_GetAnimComponent::ReturnValue' has a wrong offset!");

// Function SHProto.SHNPCLocomotionAnimInstance.K2_OnReplacedOtherLocomotionAnimInstance
// 0x0008 (0x0008 - 0x0000)
struct SHNPCLocomotionAnimInstance_K2_OnReplacedOtherLocomotionAnimInstance final
{
public:
	class USHNPCLocomotionAnimInstance*           PreviousLocomotionInstance;                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHNPCLocomotionAnimInstance_K2_OnReplacedOtherLocomotionAnimInstance) == 0x000008, "Wrong alignment on SHNPCLocomotionAnimInstance_K2_OnReplacedOtherLocomotionAnimInstance");
static_assert(sizeof(SHNPCLocomotionAnimInstance_K2_OnReplacedOtherLocomotionAnimInstance) == 0x000008, "Wrong size on SHNPCLocomotionAnimInstance_K2_OnReplacedOtherLocomotionAnimInstance");
static_assert(offsetof(SHNPCLocomotionAnimInstance_K2_OnReplacedOtherLocomotionAnimInstance, PreviousLocomotionInstance) == 0x000000, "Member 'SHNPCLocomotionAnimInstance_K2_OnReplacedOtherLocomotionAnimInstance::PreviousLocomotionInstance' has a wrong offset!");

// Function SHProto.SHNPCLocomotionAnimInstance.GetDesiredStrafeAngle
// 0x0004 (0x0004 - 0x0000)
struct SHNPCLocomotionAnimInstance_GetDesiredStrafeAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHNPCLocomotionAnimInstance_GetDesiredStrafeAngle) == 0x000004, "Wrong alignment on SHNPCLocomotionAnimInstance_GetDesiredStrafeAngle");
static_assert(sizeof(SHNPCLocomotionAnimInstance_GetDesiredStrafeAngle) == 0x000004, "Wrong size on SHNPCLocomotionAnimInstance_GetDesiredStrafeAngle");
static_assert(offsetof(SHNPCLocomotionAnimInstance_GetDesiredStrafeAngle, ReturnValue) == 0x000000, "Member 'SHNPCLocomotionAnimInstance_GetDesiredStrafeAngle::ReturnValue' has a wrong offset!");

// Function SHProto.SHNPCLocomotionAnimInstance.GetSpeedWarping
// 0x0020 (0x0020 - 0x0000)
struct SHNPCLocomotionAnimInstance_GetSpeedWarping final
{
public:
	bool                                          OutWarpingEnabled;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutStrideScale;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutStrideDirection;                                // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHNPCLocomotionAnimInstance_GetSpeedWarping) == 0x000008, "Wrong alignment on SHNPCLocomotionAnimInstance_GetSpeedWarping");
static_assert(sizeof(SHNPCLocomotionAnimInstance_GetSpeedWarping) == 0x000020, "Wrong size on SHNPCLocomotionAnimInstance_GetSpeedWarping");
static_assert(offsetof(SHNPCLocomotionAnimInstance_GetSpeedWarping, OutWarpingEnabled) == 0x000000, "Member 'SHNPCLocomotionAnimInstance_GetSpeedWarping::OutWarpingEnabled' has a wrong offset!");
static_assert(offsetof(SHNPCLocomotionAnimInstance_GetSpeedWarping, OutStrideScale) == 0x000004, "Member 'SHNPCLocomotionAnimInstance_GetSpeedWarping::OutStrideScale' has a wrong offset!");
static_assert(offsetof(SHNPCLocomotionAnimInstance_GetSpeedWarping, OutStrideDirection) == 0x000008, "Member 'SHNPCLocomotionAnimInstance_GetSpeedWarping::OutStrideDirection' has a wrong offset!");

// Function SHProto.SHNPCLocomotionAnimInstance.GetStrafeAngle
// 0x0004 (0x0004 - 0x0000)
struct SHNPCLocomotionAnimInstance_GetStrafeAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHNPCLocomotionAnimInstance_GetStrafeAngle) == 0x000004, "Wrong alignment on SHNPCLocomotionAnimInstance_GetStrafeAngle");
static_assert(sizeof(SHNPCLocomotionAnimInstance_GetStrafeAngle) == 0x000004, "Wrong size on SHNPCLocomotionAnimInstance_GetStrafeAngle");
static_assert(offsetof(SHNPCLocomotionAnimInstance_GetStrafeAngle, ReturnValue) == 0x000000, "Member 'SHNPCLocomotionAnimInstance_GetStrafeAngle::ReturnValue' has a wrong offset!");

// Function SHProto.SHNPCLocomotionAnimInstance.GetStrideWarpingSmooth
// 0x0004 (0x0004 - 0x0000)
struct SHNPCLocomotionAnimInstance_GetStrideWarpingSmooth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHNPCLocomotionAnimInstance_GetStrideWarpingSmooth) == 0x000004, "Wrong alignment on SHNPCLocomotionAnimInstance_GetStrideWarpingSmooth");
static_assert(sizeof(SHNPCLocomotionAnimInstance_GetStrideWarpingSmooth) == 0x000004, "Wrong size on SHNPCLocomotionAnimInstance_GetStrideWarpingSmooth");
static_assert(offsetof(SHNPCLocomotionAnimInstance_GetStrideWarpingSmooth, ReturnValue) == 0x000000, "Member 'SHNPCLocomotionAnimInstance_GetStrideWarpingSmooth::ReturnValue' has a wrong offset!");

// Function SHProto.SHNPCLocomotionAnimInstance.GetTurnInPlaceAngle
// 0x0004 (0x0004 - 0x0000)
struct SHNPCLocomotionAnimInstance_GetTurnInPlaceAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHNPCLocomotionAnimInstance_GetTurnInPlaceAngle) == 0x000004, "Wrong alignment on SHNPCLocomotionAnimInstance_GetTurnInPlaceAngle");
static_assert(sizeof(SHNPCLocomotionAnimInstance_GetTurnInPlaceAngle) == 0x000004, "Wrong size on SHNPCLocomotionAnimInstance_GetTurnInPlaceAngle");
static_assert(offsetof(SHNPCLocomotionAnimInstance_GetTurnInPlaceAngle, ReturnValue) == 0x000000, "Member 'SHNPCLocomotionAnimInstance_GetTurnInPlaceAngle::ReturnValue' has a wrong offset!");

// Function SHProto.SHMonsterLocomotionAnimInstance.GetIsOtherWorldEnemy
// 0x0001 (0x0001 - 0x0000)
struct SHMonsterLocomotionAnimInstance_GetIsOtherWorldEnemy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMonsterLocomotionAnimInstance_GetIsOtherWorldEnemy) == 0x000001, "Wrong alignment on SHMonsterLocomotionAnimInstance_GetIsOtherWorldEnemy");
static_assert(sizeof(SHMonsterLocomotionAnimInstance_GetIsOtherWorldEnemy) == 0x000001, "Wrong size on SHMonsterLocomotionAnimInstance_GetIsOtherWorldEnemy");
static_assert(offsetof(SHMonsterLocomotionAnimInstance_GetIsOtherWorldEnemy, ReturnValue) == 0x000000, "Member 'SHMonsterLocomotionAnimInstance_GetIsOtherWorldEnemy::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterStatics.CanCharacterBeFinished
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterStatics_CanCharacterBeFinished final
{
public:
	const class ACharacter*                       CheckedCharacter;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCharacterStatics_CanCharacterBeFinished) == 0x000008, "Wrong alignment on SHCharacterStatics_CanCharacterBeFinished");
static_assert(sizeof(SHCharacterStatics_CanCharacterBeFinished) == 0x000010, "Wrong size on SHCharacterStatics_CanCharacterBeFinished");
static_assert(offsetof(SHCharacterStatics_CanCharacterBeFinished, CheckedCharacter) == 0x000000, "Member 'SHCharacterStatics_CanCharacterBeFinished::CheckedCharacter' has a wrong offset!");
static_assert(offsetof(SHCharacterStatics_CanCharacterBeFinished, ReturnValue) == 0x000008, "Member 'SHCharacterStatics_CanCharacterBeFinished::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterStatics.GetCharacterPlay
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterStatics_GetCharacterPlay final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHCharacterPlay*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterStatics_GetCharacterPlay) == 0x000008, "Wrong alignment on SHCharacterStatics_GetCharacterPlay");
static_assert(sizeof(SHCharacterStatics_GetCharacterPlay) == 0x000010, "Wrong size on SHCharacterStatics_GetCharacterPlay");
static_assert(offsetof(SHCharacterStatics_GetCharacterPlay, WorldContextObject) == 0x000000, "Member 'SHCharacterStatics_GetCharacterPlay::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHCharacterStatics_GetCharacterPlay, ReturnValue) == 0x000008, "Member 'SHCharacterStatics_GetCharacterPlay::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterStatics.GetEddiePawn
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterStatics_GetEddiePawn final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterStatics_GetEddiePawn) == 0x000008, "Wrong alignment on SHCharacterStatics_GetEddiePawn");
static_assert(sizeof(SHCharacterStatics_GetEddiePawn) == 0x000010, "Wrong size on SHCharacterStatics_GetEddiePawn");
static_assert(offsetof(SHCharacterStatics_GetEddiePawn, WorldContextObject) == 0x000000, "Member 'SHCharacterStatics_GetEddiePawn::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHCharacterStatics_GetEddiePawn, ReturnValue) == 0x000008, "Member 'SHCharacterStatics_GetEddiePawn::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterStatics.GetMariaPawn
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterStatics_GetMariaPawn final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterStatics_GetMariaPawn) == 0x000008, "Wrong alignment on SHCharacterStatics_GetMariaPawn");
static_assert(sizeof(SHCharacterStatics_GetMariaPawn) == 0x000010, "Wrong size on SHCharacterStatics_GetMariaPawn");
static_assert(offsetof(SHCharacterStatics_GetMariaPawn, WorldContextObject) == 0x000000, "Member 'SHCharacterStatics_GetMariaPawn::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHCharacterStatics_GetMariaPawn, ReturnValue) == 0x000008, "Member 'SHCharacterStatics_GetMariaPawn::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterStatics.GetTrueCharacterLocation
// 0x0020 (0x0020 - 0x0000)
struct SHCharacterStatics_GetTrueCharacterLocation final
{
public:
	const class AActor*                           InCharacterActor;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterStatics_GetTrueCharacterLocation) == 0x000008, "Wrong alignment on SHCharacterStatics_GetTrueCharacterLocation");
static_assert(sizeof(SHCharacterStatics_GetTrueCharacterLocation) == 0x000020, "Wrong size on SHCharacterStatics_GetTrueCharacterLocation");
static_assert(offsetof(SHCharacterStatics_GetTrueCharacterLocation, InCharacterActor) == 0x000000, "Member 'SHCharacterStatics_GetTrueCharacterLocation::InCharacterActor' has a wrong offset!");
static_assert(offsetof(SHCharacterStatics_GetTrueCharacterLocation, ReturnValue) == 0x000008, "Member 'SHCharacterStatics_GetTrueCharacterLocation::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterStatics.IsCharacterDead
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterStatics_IsCharacterDead final
{
public:
	const class ACharacter*                       CheckedCharacter;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCharacterStatics_IsCharacterDead) == 0x000008, "Wrong alignment on SHCharacterStatics_IsCharacterDead");
static_assert(sizeof(SHCharacterStatics_IsCharacterDead) == 0x000010, "Wrong size on SHCharacterStatics_IsCharacterDead");
static_assert(offsetof(SHCharacterStatics_IsCharacterDead, CheckedCharacter) == 0x000000, "Member 'SHCharacterStatics_IsCharacterDead::CheckedCharacter' has a wrong offset!");
static_assert(offsetof(SHCharacterStatics_IsCharacterDead, ReturnValue) == 0x000008, "Member 'SHCharacterStatics_IsCharacterDead::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterStatics.IsCharacterInCutscene
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterStatics_IsCharacterInCutscene final
{
public:
	const class ACharacter*                       Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCharacterStatics_IsCharacterInCutscene) == 0x000008, "Wrong alignment on SHCharacterStatics_IsCharacterInCutscene");
static_assert(sizeof(SHCharacterStatics_IsCharacterInCutscene) == 0x000010, "Wrong size on SHCharacterStatics_IsCharacterInCutscene");
static_assert(offsetof(SHCharacterStatics_IsCharacterInCutscene, Character) == 0x000000, "Member 'SHCharacterStatics_IsCharacterInCutscene::Character' has a wrong offset!");
static_assert(offsetof(SHCharacterStatics_IsCharacterInCutscene, ReturnValue) == 0x000008, "Member 'SHCharacterStatics_IsCharacterInCutscene::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterStatics.IsCharacterInSyncAction
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterStatics_IsCharacterInSyncAction final
{
public:
	const class ACharacter*                       CheckedCharacter;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCharacterStatics_IsCharacterInSyncAction) == 0x000008, "Wrong alignment on SHCharacterStatics_IsCharacterInSyncAction");
static_assert(sizeof(SHCharacterStatics_IsCharacterInSyncAction) == 0x000010, "Wrong size on SHCharacterStatics_IsCharacterInSyncAction");
static_assert(offsetof(SHCharacterStatics_IsCharacterInSyncAction, CheckedCharacter) == 0x000000, "Member 'SHCharacterStatics_IsCharacterInSyncAction::CheckedCharacter' has a wrong offset!");
static_assert(offsetof(SHCharacterStatics_IsCharacterInSyncAction, ReturnValue) == 0x000008, "Member 'SHCharacterStatics_IsCharacterInSyncAction::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterStatics.IsCharacterKnockedDown
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterStatics_IsCharacterKnockedDown final
{
public:
	const class ACharacter*                       CheckedCharacter;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCharacterStatics_IsCharacterKnockedDown) == 0x000008, "Wrong alignment on SHCharacterStatics_IsCharacterKnockedDown");
static_assert(sizeof(SHCharacterStatics_IsCharacterKnockedDown) == 0x000010, "Wrong size on SHCharacterStatics_IsCharacterKnockedDown");
static_assert(offsetof(SHCharacterStatics_IsCharacterKnockedDown, CheckedCharacter) == 0x000000, "Member 'SHCharacterStatics_IsCharacterKnockedDown::CheckedCharacter' has a wrong offset!");
static_assert(offsetof(SHCharacterStatics_IsCharacterKnockedDown, ReturnValue) == 0x000008, "Member 'SHCharacterStatics_IsCharacterKnockedDown::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterStatics.IsCharacterOnGround
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterStatics_IsCharacterOnGround final
{
public:
	const class ACharacter*                       CheckedCharacter;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCharacterStatics_IsCharacterOnGround) == 0x000008, "Wrong alignment on SHCharacterStatics_IsCharacterOnGround");
static_assert(sizeof(SHCharacterStatics_IsCharacterOnGround) == 0x000010, "Wrong size on SHCharacterStatics_IsCharacterOnGround");
static_assert(offsetof(SHCharacterStatics_IsCharacterOnGround, CheckedCharacter) == 0x000000, "Member 'SHCharacterStatics_IsCharacterOnGround::CheckedCharacter' has a wrong offset!");
static_assert(offsetof(SHCharacterStatics_IsCharacterOnGround, ReturnValue) == 0x000008, "Member 'SHCharacterStatics_IsCharacterOnGround::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterStatics.SetActorTeam
// 0x0018 (0x0018 - 0x0000)
struct SHCharacterStatics_SetActorTeam final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  PawnActor;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGenericTeamId                         TeamID;                                            // 0x0010(0x0001)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCharacterStatics_SetActorTeam) == 0x000008, "Wrong alignment on SHCharacterStatics_SetActorTeam");
static_assert(sizeof(SHCharacterStatics_SetActorTeam) == 0x000018, "Wrong size on SHCharacterStatics_SetActorTeam");
static_assert(offsetof(SHCharacterStatics_SetActorTeam, WorldContextObject) == 0x000000, "Member 'SHCharacterStatics_SetActorTeam::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHCharacterStatics_SetActorTeam, PawnActor) == 0x000008, "Member 'SHCharacterStatics_SetActorTeam::PawnActor' has a wrong offset!");
static_assert(offsetof(SHCharacterStatics_SetActorTeam, TeamID) == 0x000010, "Member 'SHCharacterStatics_SetActorTeam::TeamID' has a wrong offset!");
static_assert(offsetof(SHCharacterStatics_SetActorTeam, ReturnValue) == 0x000011, "Member 'SHCharacterStatics_SetActorTeam::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterStatics.SwitchCharacterPlay
// 0x0018 (0x0018 - 0x0000)
struct SHCharacterStatics_SwitchCharacterPlay final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHSuccessFailureEnum                         Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASHCharacterPlay*                       Character;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterStatics_SwitchCharacterPlay) == 0x000008, "Wrong alignment on SHCharacterStatics_SwitchCharacterPlay");
static_assert(sizeof(SHCharacterStatics_SwitchCharacterPlay) == 0x000018, "Wrong size on SHCharacterStatics_SwitchCharacterPlay");
static_assert(offsetof(SHCharacterStatics_SwitchCharacterPlay, WorldContextObject) == 0x000000, "Member 'SHCharacterStatics_SwitchCharacterPlay::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHCharacterStatics_SwitchCharacterPlay, Result) == 0x000008, "Member 'SHCharacterStatics_SwitchCharacterPlay::Result' has a wrong offset!");
static_assert(offsetof(SHCharacterStatics_SwitchCharacterPlay, Character) == 0x000010, "Member 'SHCharacterStatics_SwitchCharacterPlay::Character' has a wrong offset!");

// Function SHProto.SHLyingFigureMovementHistoryComponent.AddMovementWaypoint
// 0x0070 (0x0070 - 0x0000)
struct SHLyingFigureMovementHistoryComponent_AddMovementWaypoint final
{
public:
	struct FTransform                             InWorldTransform;                                  // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0xF];                                       // 0x0061(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHLyingFigureMovementHistoryComponent_AddMovementWaypoint) == 0x000010, "Wrong alignment on SHLyingFigureMovementHistoryComponent_AddMovementWaypoint");
static_assert(sizeof(SHLyingFigureMovementHistoryComponent_AddMovementWaypoint) == 0x000070, "Wrong size on SHLyingFigureMovementHistoryComponent_AddMovementWaypoint");
static_assert(offsetof(SHLyingFigureMovementHistoryComponent_AddMovementWaypoint, InWorldTransform) == 0x000000, "Member 'SHLyingFigureMovementHistoryComponent_AddMovementWaypoint::InWorldTransform' has a wrong offset!");
static_assert(offsetof(SHLyingFigureMovementHistoryComponent_AddMovementWaypoint, ReturnValue) == 0x000060, "Member 'SHLyingFigureMovementHistoryComponent_AddMovementWaypoint::ReturnValue' has a wrong offset!");

// Function SHProto.SHLyingFigureMovementHistoryComponent.DebugDrawMovementPath
// 0x0004 (0x0004 - 0x0000)
struct SHLyingFigureMovementHistoryComponent_DebugDrawMovementPath final
{
public:
	float                                         InDuration;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLyingFigureMovementHistoryComponent_DebugDrawMovementPath) == 0x000004, "Wrong alignment on SHLyingFigureMovementHistoryComponent_DebugDrawMovementPath");
static_assert(sizeof(SHLyingFigureMovementHistoryComponent_DebugDrawMovementPath) == 0x000004, "Wrong size on SHLyingFigureMovementHistoryComponent_DebugDrawMovementPath");
static_assert(offsetof(SHLyingFigureMovementHistoryComponent_DebugDrawMovementPath, InDuration) == 0x000000, "Member 'SHLyingFigureMovementHistoryComponent_DebugDrawMovementPath::InDuration' has a wrong offset!");

// Function SHProto.SHLyingFigureMovementHistoryComponent.FindWaypointAtDistance
// 0x0080 (0x0080 - 0x0000)
struct SHLyingFigureMovementHistoryComponent_FindWaypointAtDistance final
{
public:
	struct FTransform                             OutTransform;                                      // 0x0000(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutDistance;                                       // 0x0060(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutTimeBehind;                                     // 0x0064(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDistanceBehind;                                  // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMinimumDistanceFromCurrentPosition;              // 0x006C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0xF];                                       // 0x0071(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHLyingFigureMovementHistoryComponent_FindWaypointAtDistance) == 0x000010, "Wrong alignment on SHLyingFigureMovementHistoryComponent_FindWaypointAtDistance");
static_assert(sizeof(SHLyingFigureMovementHistoryComponent_FindWaypointAtDistance) == 0x000080, "Wrong size on SHLyingFigureMovementHistoryComponent_FindWaypointAtDistance");
static_assert(offsetof(SHLyingFigureMovementHistoryComponent_FindWaypointAtDistance, OutTransform) == 0x000000, "Member 'SHLyingFigureMovementHistoryComponent_FindWaypointAtDistance::OutTransform' has a wrong offset!");
static_assert(offsetof(SHLyingFigureMovementHistoryComponent_FindWaypointAtDistance, OutDistance) == 0x000060, "Member 'SHLyingFigureMovementHistoryComponent_FindWaypointAtDistance::OutDistance' has a wrong offset!");
static_assert(offsetof(SHLyingFigureMovementHistoryComponent_FindWaypointAtDistance, OutTimeBehind) == 0x000064, "Member 'SHLyingFigureMovementHistoryComponent_FindWaypointAtDistance::OutTimeBehind' has a wrong offset!");
static_assert(offsetof(SHLyingFigureMovementHistoryComponent_FindWaypointAtDistance, InDistanceBehind) == 0x000068, "Member 'SHLyingFigureMovementHistoryComponent_FindWaypointAtDistance::InDistanceBehind' has a wrong offset!");
static_assert(offsetof(SHLyingFigureMovementHistoryComponent_FindWaypointAtDistance, InMinimumDistanceFromCurrentPosition) == 0x00006C, "Member 'SHLyingFigureMovementHistoryComponent_FindWaypointAtDistance::InMinimumDistanceFromCurrentPosition' has a wrong offset!");
static_assert(offsetof(SHLyingFigureMovementHistoryComponent_FindWaypointAtDistance, ReturnValue) == 0x000070, "Member 'SHLyingFigureMovementHistoryComponent_FindWaypointAtDistance::ReturnValue' has a wrong offset!");

// Function SHProto.SHLyingFigureMovementHistoryComponent.FindWaypointAtTime
// 0x0080 (0x0080 - 0x0000)
struct SHLyingFigureMovementHistoryComponent_FindWaypointAtTime final
{
public:
	struct FTransform                             OutTransform;                                      // 0x0000(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutDistance;                                       // 0x0060(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutTimeBehind;                                     // 0x0064(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDeltaTimeBehind;                                 // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMinimumDistanceFromCurrentPosition;              // 0x006C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0xF];                                       // 0x0071(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHLyingFigureMovementHistoryComponent_FindWaypointAtTime) == 0x000010, "Wrong alignment on SHLyingFigureMovementHistoryComponent_FindWaypointAtTime");
static_assert(sizeof(SHLyingFigureMovementHistoryComponent_FindWaypointAtTime) == 0x000080, "Wrong size on SHLyingFigureMovementHistoryComponent_FindWaypointAtTime");
static_assert(offsetof(SHLyingFigureMovementHistoryComponent_FindWaypointAtTime, OutTransform) == 0x000000, "Member 'SHLyingFigureMovementHistoryComponent_FindWaypointAtTime::OutTransform' has a wrong offset!");
static_assert(offsetof(SHLyingFigureMovementHistoryComponent_FindWaypointAtTime, OutDistance) == 0x000060, "Member 'SHLyingFigureMovementHistoryComponent_FindWaypointAtTime::OutDistance' has a wrong offset!");
static_assert(offsetof(SHLyingFigureMovementHistoryComponent_FindWaypointAtTime, OutTimeBehind) == 0x000064, "Member 'SHLyingFigureMovementHistoryComponent_FindWaypointAtTime::OutTimeBehind' has a wrong offset!");
static_assert(offsetof(SHLyingFigureMovementHistoryComponent_FindWaypointAtTime, InDeltaTimeBehind) == 0x000068, "Member 'SHLyingFigureMovementHistoryComponent_FindWaypointAtTime::InDeltaTimeBehind' has a wrong offset!");
static_assert(offsetof(SHLyingFigureMovementHistoryComponent_FindWaypointAtTime, InMinimumDistanceFromCurrentPosition) == 0x00006C, "Member 'SHLyingFigureMovementHistoryComponent_FindWaypointAtTime::InMinimumDistanceFromCurrentPosition' has a wrong offset!");
static_assert(offsetof(SHLyingFigureMovementHistoryComponent_FindWaypointAtTime, ReturnValue) == 0x000070, "Member 'SHLyingFigureMovementHistoryComponent_FindWaypointAtTime::ReturnValue' has a wrong offset!");

// Function SHProto.SHNPCAnimInstance.OnLocomotionAnimInstanceChanged_BPEvent
// 0x0004 (0x0004 - 0x0000)
struct SHNPCAnimInstance_OnLocomotionAnimInstanceChanged_BPEvent final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHNPCAnimInstance_OnLocomotionAnimInstanceChanged_BPEvent) == 0x000004, "Wrong alignment on SHNPCAnimInstance_OnLocomotionAnimInstanceChanged_BPEvent");
static_assert(sizeof(SHNPCAnimInstance_OnLocomotionAnimInstanceChanged_BPEvent) == 0x000004, "Wrong size on SHNPCAnimInstance_OnLocomotionAnimInstanceChanged_BPEvent");
static_assert(offsetof(SHNPCAnimInstance_OnLocomotionAnimInstanceChanged_BPEvent, SlotIndex) == 0x000000, "Member 'SHNPCAnimInstance_OnLocomotionAnimInstanceChanged_BPEvent::SlotIndex' has a wrong offset!");

// Function SHProto.SHNPCAnimInstance.OnLocomotionAnimInstanceInitialised_BPEvent
// 0x0004 (0x0004 - 0x0000)
struct SHNPCAnimInstance_OnLocomotionAnimInstanceInitialised_BPEvent final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHNPCAnimInstance_OnLocomotionAnimInstanceInitialised_BPEvent) == 0x000004, "Wrong alignment on SHNPCAnimInstance_OnLocomotionAnimInstanceInitialised_BPEvent");
static_assert(sizeof(SHNPCAnimInstance_OnLocomotionAnimInstanceInitialised_BPEvent) == 0x000004, "Wrong size on SHNPCAnimInstance_OnLocomotionAnimInstanceInitialised_BPEvent");
static_assert(offsetof(SHNPCAnimInstance_OnLocomotionAnimInstanceInitialised_BPEvent, SlotIndex) == 0x000000, "Member 'SHNPCAnimInstance_OnLocomotionAnimInstanceInitialised_BPEvent::SlotIndex' has a wrong offset!");

// Function SHProto.SHNPCAnimInstance.SetNewLocomotionAnimInstance
// 0x0020 (0x0020 - 0x0000)
struct SHNPCAnimInstance_SetNewLocomotionAnimInstance final
{
public:
	TSubclassOf<class USHNPCLocomotionAnimInstance> NewLocomotionInstance;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceReplacement;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TransitionDuration;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionDelay;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimInstance*                          ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHNPCAnimInstance_SetNewLocomotionAnimInstance) == 0x000008, "Wrong alignment on SHNPCAnimInstance_SetNewLocomotionAnimInstance");
static_assert(sizeof(SHNPCAnimInstance_SetNewLocomotionAnimInstance) == 0x000020, "Wrong size on SHNPCAnimInstance_SetNewLocomotionAnimInstance");
static_assert(offsetof(SHNPCAnimInstance_SetNewLocomotionAnimInstance, NewLocomotionInstance) == 0x000000, "Member 'SHNPCAnimInstance_SetNewLocomotionAnimInstance::NewLocomotionInstance' has a wrong offset!");
static_assert(offsetof(SHNPCAnimInstance_SetNewLocomotionAnimInstance, ForceReplacement) == 0x000008, "Member 'SHNPCAnimInstance_SetNewLocomotionAnimInstance::ForceReplacement' has a wrong offset!");
static_assert(offsetof(SHNPCAnimInstance_SetNewLocomotionAnimInstance, TransitionDuration) == 0x00000C, "Member 'SHNPCAnimInstance_SetNewLocomotionAnimInstance::TransitionDuration' has a wrong offset!");
static_assert(offsetof(SHNPCAnimInstance_SetNewLocomotionAnimInstance, TransitionDelay) == 0x000010, "Member 'SHNPCAnimInstance_SetNewLocomotionAnimInstance::TransitionDelay' has a wrong offset!");
static_assert(offsetof(SHNPCAnimInstance_SetNewLocomotionAnimInstance, SlotIndex) == 0x000014, "Member 'SHNPCAnimInstance_SetNewLocomotionAnimInstance::SlotIndex' has a wrong offset!");
static_assert(offsetof(SHNPCAnimInstance_SetNewLocomotionAnimInstance, ReturnValue) == 0x000018, "Member 'SHNPCAnimInstance_SetNewLocomotionAnimInstance::ReturnValue' has a wrong offset!");

// Function SHProto.SHNPCAnimInstance.GetAnimComponent
// 0x0008 (0x0008 - 0x0000)
struct SHNPCAnimInstance_GetAnimComponent final
{
public:
	class USHAnimComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHNPCAnimInstance_GetAnimComponent) == 0x000008, "Wrong alignment on SHNPCAnimInstance_GetAnimComponent");
static_assert(sizeof(SHNPCAnimInstance_GetAnimComponent) == 0x000008, "Wrong size on SHNPCAnimInstance_GetAnimComponent");
static_assert(offsetof(SHNPCAnimInstance_GetAnimComponent, ReturnValue) == 0x000000, "Member 'SHNPCAnimInstance_GetAnimComponent::ReturnValue' has a wrong offset!");

// Function SHProto.SHNPCAnimInstance.GetChangeLocomotionSnapshotName
// 0x000C (0x000C - 0x0000)
struct SHNPCAnimInstance_GetChangeLocomotionSnapshotName final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHNPCAnimInstance_GetChangeLocomotionSnapshotName) == 0x000004, "Wrong alignment on SHNPCAnimInstance_GetChangeLocomotionSnapshotName");
static_assert(sizeof(SHNPCAnimInstance_GetChangeLocomotionSnapshotName) == 0x00000C, "Wrong size on SHNPCAnimInstance_GetChangeLocomotionSnapshotName");
static_assert(offsetof(SHNPCAnimInstance_GetChangeLocomotionSnapshotName, SlotIndex) == 0x000000, "Member 'SHNPCAnimInstance_GetChangeLocomotionSnapshotName::SlotIndex' has a wrong offset!");
static_assert(offsetof(SHNPCAnimInstance_GetChangeLocomotionSnapshotName, ReturnValue) == 0x000004, "Member 'SHNPCAnimInstance_GetChangeLocomotionSnapshotName::ReturnValue' has a wrong offset!");

// Function SHProto.SHNPCAnimInstance.GetLocomotionAnimInstance
// 0x0010 (0x0010 - 0x0000)
struct SHNPCAnimInstance_GetLocomotionAnimInstance final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USHNPCLocomotionAnimInstance*           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHNPCAnimInstance_GetLocomotionAnimInstance) == 0x000008, "Wrong alignment on SHNPCAnimInstance_GetLocomotionAnimInstance");
static_assert(sizeof(SHNPCAnimInstance_GetLocomotionAnimInstance) == 0x000010, "Wrong size on SHNPCAnimInstance_GetLocomotionAnimInstance");
static_assert(offsetof(SHNPCAnimInstance_GetLocomotionAnimInstance, SlotIndex) == 0x000000, "Member 'SHNPCAnimInstance_GetLocomotionAnimInstance::SlotIndex' has a wrong offset!");
static_assert(offsetof(SHNPCAnimInstance_GetLocomotionAnimInstance, ReturnValue) == 0x000008, "Member 'SHNPCAnimInstance_GetLocomotionAnimInstance::ReturnValue' has a wrong offset!");

// Function SHProto.SHNPCAnimInstance.GetLocomotionChangeAlpha
// 0x0008 (0x0008 - 0x0000)
struct SHNPCAnimInstance_GetLocomotionChangeAlpha final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHNPCAnimInstance_GetLocomotionChangeAlpha) == 0x000004, "Wrong alignment on SHNPCAnimInstance_GetLocomotionChangeAlpha");
static_assert(sizeof(SHNPCAnimInstance_GetLocomotionChangeAlpha) == 0x000008, "Wrong size on SHNPCAnimInstance_GetLocomotionChangeAlpha");
static_assert(offsetof(SHNPCAnimInstance_GetLocomotionChangeAlpha, SlotIndex) == 0x000000, "Member 'SHNPCAnimInstance_GetLocomotionChangeAlpha::SlotIndex' has a wrong offset!");
static_assert(offsetof(SHNPCAnimInstance_GetLocomotionChangeAlpha, ReturnValue) == 0x000004, "Member 'SHNPCAnimInstance_GetLocomotionChangeAlpha::ReturnValue' has a wrong offset!");

// Function SHProto.SHNPCAnimInstance.GetLocomotionTag
// 0x000C (0x000C - 0x0000)
struct SHNPCAnimInstance_GetLocomotionTag final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHNPCAnimInstance_GetLocomotionTag) == 0x000004, "Wrong alignment on SHNPCAnimInstance_GetLocomotionTag");
static_assert(sizeof(SHNPCAnimInstance_GetLocomotionTag) == 0x00000C, "Wrong size on SHNPCAnimInstance_GetLocomotionTag");
static_assert(offsetof(SHNPCAnimInstance_GetLocomotionTag, SlotIndex) == 0x000000, "Member 'SHNPCAnimInstance_GetLocomotionTag::SlotIndex' has a wrong offset!");
static_assert(offsetof(SHNPCAnimInstance_GetLocomotionTag, ReturnValue) == 0x000004, "Member 'SHNPCAnimInstance_GetLocomotionTag::ReturnValue' has a wrong offset!");

// Function SHProto.SHMonsterAnimInstance.DecrementReviveSeizure
// 0x0008 (0x0008 - 0x0000)
struct SHMonsterAnimInstance_DecrementReviveSeizure final
{
public:
	float                                         InReduceSeizuresCount;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHMonsterAnimInstance_DecrementReviveSeizure) == 0x000004, "Wrong alignment on SHMonsterAnimInstance_DecrementReviveSeizure");
static_assert(sizeof(SHMonsterAnimInstance_DecrementReviveSeizure) == 0x000008, "Wrong size on SHMonsterAnimInstance_DecrementReviveSeizure");
static_assert(offsetof(SHMonsterAnimInstance_DecrementReviveSeizure, InReduceSeizuresCount) == 0x000000, "Member 'SHMonsterAnimInstance_DecrementReviveSeizure::InReduceSeizuresCount' has a wrong offset!");
static_assert(offsetof(SHMonsterAnimInstance_DecrementReviveSeizure, ReturnValue) == 0x000004, "Member 'SHMonsterAnimInstance_DecrementReviveSeizure::ReturnValue' has a wrong offset!");

// Function SHProto.SHMonsterAnimInstance.SetEnemyIsOtherWorld
// 0x0001 (0x0001 - 0x0000)
struct SHMonsterAnimInstance_SetEnemyIsOtherWorld final
{
public:
	bool                                          InEnemyIsOW;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMonsterAnimInstance_SetEnemyIsOtherWorld) == 0x000001, "Wrong alignment on SHMonsterAnimInstance_SetEnemyIsOtherWorld");
static_assert(sizeof(SHMonsterAnimInstance_SetEnemyIsOtherWorld) == 0x000001, "Wrong size on SHMonsterAnimInstance_SetEnemyIsOtherWorld");
static_assert(offsetof(SHMonsterAnimInstance_SetEnemyIsOtherWorld, InEnemyIsOW) == 0x000000, "Member 'SHMonsterAnimInstance_SetEnemyIsOtherWorld::InEnemyIsOW' has a wrong offset!");

// Function SHProto.SHMonsterAnimInstance.SetEnemyReviveSeizuresToBePlayed
// 0x0004 (0x0004 - 0x0000)
struct SHMonsterAnimInstance_SetEnemyReviveSeizuresToBePlayed final
{
public:
	float                                         InSeizuresCount;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMonsterAnimInstance_SetEnemyReviveSeizuresToBePlayed) == 0x000004, "Wrong alignment on SHMonsterAnimInstance_SetEnemyReviveSeizuresToBePlayed");
static_assert(sizeof(SHMonsterAnimInstance_SetEnemyReviveSeizuresToBePlayed) == 0x000004, "Wrong size on SHMonsterAnimInstance_SetEnemyReviveSeizuresToBePlayed");
static_assert(offsetof(SHMonsterAnimInstance_SetEnemyReviveSeizuresToBePlayed, InSeizuresCount) == 0x000000, "Member 'SHMonsterAnimInstance_SetEnemyReviveSeizuresToBePlayed::InSeizuresCount' has a wrong offset!");

// Function SHProto.SHMonsterAnimInstance.GetRemainingReviveSeizuresCount
// 0x0004 (0x0004 - 0x0000)
struct SHMonsterAnimInstance_GetRemainingReviveSeizuresCount final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMonsterAnimInstance_GetRemainingReviveSeizuresCount) == 0x000004, "Wrong alignment on SHMonsterAnimInstance_GetRemainingReviveSeizuresCount");
static_assert(sizeof(SHMonsterAnimInstance_GetRemainingReviveSeizuresCount) == 0x000004, "Wrong size on SHMonsterAnimInstance_GetRemainingReviveSeizuresCount");
static_assert(offsetof(SHMonsterAnimInstance_GetRemainingReviveSeizuresCount, ReturnValue) == 0x000000, "Member 'SHMonsterAnimInstance_GetRemainingReviveSeizuresCount::ReturnValue' has a wrong offset!");

// Function SHProto.SHMonsterAnimInstance.IsLying
// 0x0003 (0x0003 - 0x0000)
struct SHMonsterAnimInstance_IsLying final
{
public:
	bool                                          IncludeTransformingInto;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeTransformingOutOf;                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMonsterAnimInstance_IsLying) == 0x000001, "Wrong alignment on SHMonsterAnimInstance_IsLying");
static_assert(sizeof(SHMonsterAnimInstance_IsLying) == 0x000003, "Wrong size on SHMonsterAnimInstance_IsLying");
static_assert(offsetof(SHMonsterAnimInstance_IsLying, IncludeTransformingInto) == 0x000000, "Member 'SHMonsterAnimInstance_IsLying::IncludeTransformingInto' has a wrong offset!");
static_assert(offsetof(SHMonsterAnimInstance_IsLying, IncludeTransformingOutOf) == 0x000001, "Member 'SHMonsterAnimInstance_IsLying::IncludeTransformingOutOf' has a wrong offset!");
static_assert(offsetof(SHMonsterAnimInstance_IsLying, ReturnValue) == 0x000002, "Member 'SHMonsterAnimInstance_IsLying::ReturnValue' has a wrong offset!");

// Function SHProto.SHMonsterAnimInstance.IsOtherWorldEnemy
// 0x0001 (0x0001 - 0x0000)
struct SHMonsterAnimInstance_IsOtherWorldEnemy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMonsterAnimInstance_IsOtherWorldEnemy) == 0x000001, "Wrong alignment on SHMonsterAnimInstance_IsOtherWorldEnemy");
static_assert(sizeof(SHMonsterAnimInstance_IsOtherWorldEnemy) == 0x000001, "Wrong size on SHMonsterAnimInstance_IsOtherWorldEnemy");
static_assert(offsetof(SHMonsterAnimInstance_IsOtherWorldEnemy, ReturnValue) == 0x000000, "Member 'SHMonsterAnimInstance_IsOtherWorldEnemy::ReturnValue' has a wrong offset!");

// Function SHProto.SHMonsterAnimInstance.IsStanding
// 0x0003 (0x0003 - 0x0000)
struct SHMonsterAnimInstance_IsStanding final
{
public:
	bool                                          IncludeTransformingInto;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeTransformingOutOf;                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMonsterAnimInstance_IsStanding) == 0x000001, "Wrong alignment on SHMonsterAnimInstance_IsStanding");
static_assert(sizeof(SHMonsterAnimInstance_IsStanding) == 0x000003, "Wrong size on SHMonsterAnimInstance_IsStanding");
static_assert(offsetof(SHMonsterAnimInstance_IsStanding, IncludeTransformingInto) == 0x000000, "Member 'SHMonsterAnimInstance_IsStanding::IncludeTransformingInto' has a wrong offset!");
static_assert(offsetof(SHMonsterAnimInstance_IsStanding, IncludeTransformingOutOf) == 0x000001, "Member 'SHMonsterAnimInstance_IsStanding::IncludeTransformingOutOf' has a wrong offset!");
static_assert(offsetof(SHMonsterAnimInstance_IsStanding, ReturnValue) == 0x000002, "Member 'SHMonsterAnimInstance_IsStanding::ReturnValue' has a wrong offset!");

// Function SHProto.SHMonsterAnimInstance.IsTransformingToLying
// 0x0001 (0x0001 - 0x0000)
struct SHMonsterAnimInstance_IsTransformingToLying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMonsterAnimInstance_IsTransformingToLying) == 0x000001, "Wrong alignment on SHMonsterAnimInstance_IsTransformingToLying");
static_assert(sizeof(SHMonsterAnimInstance_IsTransformingToLying) == 0x000001, "Wrong size on SHMonsterAnimInstance_IsTransformingToLying");
static_assert(offsetof(SHMonsterAnimInstance_IsTransformingToLying, ReturnValue) == 0x000000, "Member 'SHMonsterAnimInstance_IsTransformingToLying::ReturnValue' has a wrong offset!");

// Function SHProto.SHMonsterAnimInstance.IsTransformingToStanding
// 0x0001 (0x0001 - 0x0000)
struct SHMonsterAnimInstance_IsTransformingToStanding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMonsterAnimInstance_IsTransformingToStanding) == 0x000001, "Wrong alignment on SHMonsterAnimInstance_IsTransformingToStanding");
static_assert(sizeof(SHMonsterAnimInstance_IsTransformingToStanding) == 0x000001, "Wrong size on SHMonsterAnimInstance_IsTransformingToStanding");
static_assert(offsetof(SHMonsterAnimInstance_IsTransformingToStanding, ReturnValue) == 0x000000, "Member 'SHMonsterAnimInstance_IsTransformingToStanding::ReturnValue' has a wrong offset!");

// Function SHProto.SHCreeperAnimInstance.GetCreeperAnimInstanceStateData
// 0x0008 (0x0008 - 0x0000)
struct SHCreeperAnimInstance_GetCreeperAnimInstanceStateData final
{
public:
	class USHCreeperAnimInstanceStateData*        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCreeperAnimInstance_GetCreeperAnimInstanceStateData) == 0x000008, "Wrong alignment on SHCreeperAnimInstance_GetCreeperAnimInstanceStateData");
static_assert(sizeof(SHCreeperAnimInstance_GetCreeperAnimInstanceStateData) == 0x000008, "Wrong size on SHCreeperAnimInstance_GetCreeperAnimInstanceStateData");
static_assert(offsetof(SHCreeperAnimInstance_GetCreeperAnimInstanceStateData, ReturnValue) == 0x000000, "Member 'SHCreeperAnimInstance_GetCreeperAnimInstanceStateData::ReturnValue' has a wrong offset!");

// Function SHProto.SHCreeperAnimInstance.GetCreeperLocomotionAnimInstance
// 0x0010 (0x0010 - 0x0000)
struct SHCreeperAnimInstance_GetCreeperLocomotionAnimInstance final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USHCreeperLocomotionAnimInstance*       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCreeperAnimInstance_GetCreeperLocomotionAnimInstance) == 0x000008, "Wrong alignment on SHCreeperAnimInstance_GetCreeperLocomotionAnimInstance");
static_assert(sizeof(SHCreeperAnimInstance_GetCreeperLocomotionAnimInstance) == 0x000010, "Wrong size on SHCreeperAnimInstance_GetCreeperLocomotionAnimInstance");
static_assert(offsetof(SHCreeperAnimInstance_GetCreeperLocomotionAnimInstance, SlotIndex) == 0x000000, "Member 'SHCreeperAnimInstance_GetCreeperLocomotionAnimInstance::SlotIndex' has a wrong offset!");
static_assert(offsetof(SHCreeperAnimInstance_GetCreeperLocomotionAnimInstance, ReturnValue) == 0x000008, "Member 'SHCreeperAnimInstance_GetCreeperLocomotionAnimInstance::ReturnValue' has a wrong offset!");

// Function SHProto.SHFreezingVolume.IsPointWithin
// 0x0020 (0x0020 - 0x0000)
struct SHFreezingVolume_IsPointWithin final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFreezingVolume_IsPointWithin) == 0x000008, "Wrong alignment on SHFreezingVolume_IsPointWithin");
static_assert(sizeof(SHFreezingVolume_IsPointWithin) == 0x000020, "Wrong size on SHFreezingVolume_IsPointWithin");
static_assert(offsetof(SHFreezingVolume_IsPointWithin, Point) == 0x000000, "Member 'SHFreezingVolume_IsPointWithin::Point' has a wrong offset!");
static_assert(offsetof(SHFreezingVolume_IsPointWithin, ReturnValue) == 0x000018, "Member 'SHFreezingVolume_IsPointWithin::ReturnValue' has a wrong offset!");

// Function SHProto.SHDPSCounter.ProcessOwnerTakeAnyDamage
// 0x0028 (0x0028 - 0x0000)
struct SHDPSCounter_ProcessOwnerTakeAnyDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DamageType;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedBy;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDPSCounter_ProcessOwnerTakeAnyDamage) == 0x000008, "Wrong alignment on SHDPSCounter_ProcessOwnerTakeAnyDamage");
static_assert(sizeof(SHDPSCounter_ProcessOwnerTakeAnyDamage) == 0x000028, "Wrong size on SHDPSCounter_ProcessOwnerTakeAnyDamage");
static_assert(offsetof(SHDPSCounter_ProcessOwnerTakeAnyDamage, DamagedActor) == 0x000000, "Member 'SHDPSCounter_ProcessOwnerTakeAnyDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(SHDPSCounter_ProcessOwnerTakeAnyDamage, Damage) == 0x000008, "Member 'SHDPSCounter_ProcessOwnerTakeAnyDamage::Damage' has a wrong offset!");
static_assert(offsetof(SHDPSCounter_ProcessOwnerTakeAnyDamage, DamageType) == 0x000010, "Member 'SHDPSCounter_ProcessOwnerTakeAnyDamage::DamageType' has a wrong offset!");
static_assert(offsetof(SHDPSCounter_ProcessOwnerTakeAnyDamage, InstigatedBy) == 0x000018, "Member 'SHDPSCounter_ProcessOwnerTakeAnyDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(SHDPSCounter_ProcessOwnerTakeAnyDamage, DamageCauser) == 0x000020, "Member 'SHDPSCounter_ProcessOwnerTakeAnyDamage::DamageCauser' has a wrong offset!");

// Function SHProto.SHDPSCounter.GetRecentDPS
// 0x0008 (0x0008 - 0x0000)
struct SHDPSCounter_GetRecentDPS final
{
public:
	float                                         HistoryPeriodSeconds;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDPSCounter_GetRecentDPS) == 0x000004, "Wrong alignment on SHDPSCounter_GetRecentDPS");
static_assert(sizeof(SHDPSCounter_GetRecentDPS) == 0x000008, "Wrong size on SHDPSCounter_GetRecentDPS");
static_assert(offsetof(SHDPSCounter_GetRecentDPS, HistoryPeriodSeconds) == 0x000000, "Member 'SHDPSCounter_GetRecentDPS::HistoryPeriodSeconds' has a wrong offset!");
static_assert(offsetof(SHDPSCounter_GetRecentDPS, ReturnValue) == 0x000004, "Member 'SHDPSCounter_GetRecentDPS::ReturnValue' has a wrong offset!");

// Function SHProto.SHDPSCounter.GetRecentTotalDamage
// 0x0008 (0x0008 - 0x0000)
struct SHDPSCounter_GetRecentTotalDamage final
{
public:
	float                                         HistoryPeriodSeconds;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDPSCounter_GetRecentTotalDamage) == 0x000004, "Wrong alignment on SHDPSCounter_GetRecentTotalDamage");
static_assert(sizeof(SHDPSCounter_GetRecentTotalDamage) == 0x000008, "Wrong size on SHDPSCounter_GetRecentTotalDamage");
static_assert(offsetof(SHDPSCounter_GetRecentTotalDamage, HistoryPeriodSeconds) == 0x000000, "Member 'SHDPSCounter_GetRecentTotalDamage::HistoryPeriodSeconds' has a wrong offset!");
static_assert(offsetof(SHDPSCounter_GetRecentTotalDamage, ReturnValue) == 0x000004, "Member 'SHDPSCounter_GetRecentTotalDamage::ReturnValue' has a wrong offset!");

// Function SHProto.SHCombatSubcomponentBase.GetOwnerCharacter
// 0x0008 (0x0008 - 0x0000)
struct SHCombatSubcomponentBase_GetOwnerCharacter final
{
public:
	class ACharacter*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCombatSubcomponentBase_GetOwnerCharacter) == 0x000008, "Wrong alignment on SHCombatSubcomponentBase_GetOwnerCharacter");
static_assert(sizeof(SHCombatSubcomponentBase_GetOwnerCharacter) == 0x000008, "Wrong size on SHCombatSubcomponentBase_GetOwnerCharacter");
static_assert(offsetof(SHCombatSubcomponentBase_GetOwnerCharacter, ReturnValue) == 0x000000, "Member 'SHCombatSubcomponentBase_GetOwnerCharacter::ReturnValue' has a wrong offset!");

// Function SHProto.SHCombatSubcomponentBase.GetOwningActor
// 0x0008 (0x0008 - 0x0000)
struct SHCombatSubcomponentBase_GetOwningActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCombatSubcomponentBase_GetOwningActor) == 0x000008, "Wrong alignment on SHCombatSubcomponentBase_GetOwningActor");
static_assert(sizeof(SHCombatSubcomponentBase_GetOwningActor) == 0x000008, "Wrong size on SHCombatSubcomponentBase_GetOwningActor");
static_assert(offsetof(SHCombatSubcomponentBase_GetOwningActor, ReturnValue) == 0x000000, "Member 'SHCombatSubcomponentBase_GetOwningActor::ReturnValue' has a wrong offset!");

// Function SHProto.SHCombatSubcomponentBase.GetOwningComponent
// 0x0008 (0x0008 - 0x0000)
struct SHCombatSubcomponentBase_GetOwningComponent final
{
public:
	class USHCharacterPlayCombatComponent*        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCombatSubcomponentBase_GetOwningComponent) == 0x000008, "Wrong alignment on SHCombatSubcomponentBase_GetOwningComponent");
static_assert(sizeof(SHCombatSubcomponentBase_GetOwningComponent) == 0x000008, "Wrong size on SHCombatSubcomponentBase_GetOwningComponent");
static_assert(offsetof(SHCombatSubcomponentBase_GetOwningComponent, ReturnValue) == 0x000000, "Member 'SHCombatSubcomponentBase_GetOwningComponent::ReturnValue' has a wrong offset!");

// Function SHProto.SHWeaponManageCmbSubcomp.OnChangeWeaponEquipBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct SHWeaponManageCmbSubcomp_OnChangeWeaponEquipBlendingOut final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHAnimEndType                                AnimEndType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHWeaponManageCmbSubcomp_OnChangeWeaponEquipBlendingOut) == 0x000008, "Wrong alignment on SHWeaponManageCmbSubcomp_OnChangeWeaponEquipBlendingOut");
static_assert(sizeof(SHWeaponManageCmbSubcomp_OnChangeWeaponEquipBlendingOut) == 0x000010, "Wrong size on SHWeaponManageCmbSubcomp_OnChangeWeaponEquipBlendingOut");
static_assert(offsetof(SHWeaponManageCmbSubcomp_OnChangeWeaponEquipBlendingOut, Montage) == 0x000000, "Member 'SHWeaponManageCmbSubcomp_OnChangeWeaponEquipBlendingOut::Montage' has a wrong offset!");
static_assert(offsetof(SHWeaponManageCmbSubcomp_OnChangeWeaponEquipBlendingOut, AnimEndType) == 0x000008, "Member 'SHWeaponManageCmbSubcomp_OnChangeWeaponEquipBlendingOut::AnimEndType' has a wrong offset!");

// Function SHProto.SHWeaponManageCmbSubcomp.OnChangeWeaponEquipEnd
// 0x0010 (0x0010 - 0x0000)
struct SHWeaponManageCmbSubcomp_OnChangeWeaponEquipEnd final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHAnimEndType                                AnimEndType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHWeaponManageCmbSubcomp_OnChangeWeaponEquipEnd) == 0x000008, "Wrong alignment on SHWeaponManageCmbSubcomp_OnChangeWeaponEquipEnd");
static_assert(sizeof(SHWeaponManageCmbSubcomp_OnChangeWeaponEquipEnd) == 0x000010, "Wrong size on SHWeaponManageCmbSubcomp_OnChangeWeaponEquipEnd");
static_assert(offsetof(SHWeaponManageCmbSubcomp_OnChangeWeaponEquipEnd, Montage) == 0x000000, "Member 'SHWeaponManageCmbSubcomp_OnChangeWeaponEquipEnd::Montage' has a wrong offset!");
static_assert(offsetof(SHWeaponManageCmbSubcomp_OnChangeWeaponEquipEnd, AnimEndType) == 0x000008, "Member 'SHWeaponManageCmbSubcomp_OnChangeWeaponEquipEnd::AnimEndType' has a wrong offset!");

// Function SHProto.SHWeaponManageCmbSubcomp.OnChangeWeaponUnequipBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct SHWeaponManageCmbSubcomp_OnChangeWeaponUnequipBlendingOut final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHAnimEndType                                AnimEndType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHWeaponManageCmbSubcomp_OnChangeWeaponUnequipBlendingOut) == 0x000008, "Wrong alignment on SHWeaponManageCmbSubcomp_OnChangeWeaponUnequipBlendingOut");
static_assert(sizeof(SHWeaponManageCmbSubcomp_OnChangeWeaponUnequipBlendingOut) == 0x000010, "Wrong size on SHWeaponManageCmbSubcomp_OnChangeWeaponUnequipBlendingOut");
static_assert(offsetof(SHWeaponManageCmbSubcomp_OnChangeWeaponUnequipBlendingOut, Montage) == 0x000000, "Member 'SHWeaponManageCmbSubcomp_OnChangeWeaponUnequipBlendingOut::Montage' has a wrong offset!");
static_assert(offsetof(SHWeaponManageCmbSubcomp_OnChangeWeaponUnequipBlendingOut, AnimEndType) == 0x000008, "Member 'SHWeaponManageCmbSubcomp_OnChangeWeaponUnequipBlendingOut::AnimEndType' has a wrong offset!");

// Function SHProto.SHWeaponManageCmbSubcomp.OnChangeWeaponUnequipEnd
// 0x0010 (0x0010 - 0x0000)
struct SHWeaponManageCmbSubcomp_OnChangeWeaponUnequipEnd final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHAnimEndType                                AnimEndType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHWeaponManageCmbSubcomp_OnChangeWeaponUnequipEnd) == 0x000008, "Wrong alignment on SHWeaponManageCmbSubcomp_OnChangeWeaponUnequipEnd");
static_assert(sizeof(SHWeaponManageCmbSubcomp_OnChangeWeaponUnequipEnd) == 0x000010, "Wrong size on SHWeaponManageCmbSubcomp_OnChangeWeaponUnequipEnd");
static_assert(offsetof(SHWeaponManageCmbSubcomp_OnChangeWeaponUnequipEnd, Montage) == 0x000000, "Member 'SHWeaponManageCmbSubcomp_OnChangeWeaponUnequipEnd::Montage' has a wrong offset!");
static_assert(offsetof(SHWeaponManageCmbSubcomp_OnChangeWeaponUnequipEnd, AnimEndType) == 0x000008, "Member 'SHWeaponManageCmbSubcomp_OnChangeWeaponUnequipEnd::AnimEndType' has a wrong offset!");

// Function SHProto.SHWeaponManageCmbSubcomp.OnEquipWeaponEnd
// 0x0010 (0x0010 - 0x0000)
struct SHWeaponManageCmbSubcomp_OnEquipWeaponEnd final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHAnimEndType                                AnimEndType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHWeaponManageCmbSubcomp_OnEquipWeaponEnd) == 0x000008, "Wrong alignment on SHWeaponManageCmbSubcomp_OnEquipWeaponEnd");
static_assert(sizeof(SHWeaponManageCmbSubcomp_OnEquipWeaponEnd) == 0x000010, "Wrong size on SHWeaponManageCmbSubcomp_OnEquipWeaponEnd");
static_assert(offsetof(SHWeaponManageCmbSubcomp_OnEquipWeaponEnd, Montage) == 0x000000, "Member 'SHWeaponManageCmbSubcomp_OnEquipWeaponEnd::Montage' has a wrong offset!");
static_assert(offsetof(SHWeaponManageCmbSubcomp_OnEquipWeaponEnd, AnimEndType) == 0x000008, "Member 'SHWeaponManageCmbSubcomp_OnEquipWeaponEnd::AnimEndType' has a wrong offset!");

// Function SHProto.SHWeaponManageCmbSubcomp.OnUnequipWeaponEnd
// 0x0010 (0x0010 - 0x0000)
struct SHWeaponManageCmbSubcomp_OnUnequipWeaponEnd final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHAnimEndType                                AnimEndType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHWeaponManageCmbSubcomp_OnUnequipWeaponEnd) == 0x000008, "Wrong alignment on SHWeaponManageCmbSubcomp_OnUnequipWeaponEnd");
static_assert(sizeof(SHWeaponManageCmbSubcomp_OnUnequipWeaponEnd) == 0x000010, "Wrong size on SHWeaponManageCmbSubcomp_OnUnequipWeaponEnd");
static_assert(offsetof(SHWeaponManageCmbSubcomp_OnUnequipWeaponEnd, Montage) == 0x000000, "Member 'SHWeaponManageCmbSubcomp_OnUnequipWeaponEnd::Montage' has a wrong offset!");
static_assert(offsetof(SHWeaponManageCmbSubcomp_OnUnequipWeaponEnd, AnimEndType) == 0x000008, "Member 'SHWeaponManageCmbSubcomp_OnUnequipWeaponEnd::AnimEndType' has a wrong offset!");

// Function SHProto.SHWeaponManageCmbSubcomp.ProcessCombatPoseChangedEvent
// 0x0008 (0x0008 - 0x0000)
struct SHWeaponManageCmbSubcomp_ProcessCombatPoseChangedEvent final
{
public:
	class USHCharacterPlayCombatComponent*        ComponentPtr;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHWeaponManageCmbSubcomp_ProcessCombatPoseChangedEvent) == 0x000008, "Wrong alignment on SHWeaponManageCmbSubcomp_ProcessCombatPoseChangedEvent");
static_assert(sizeof(SHWeaponManageCmbSubcomp_ProcessCombatPoseChangedEvent) == 0x000008, "Wrong size on SHWeaponManageCmbSubcomp_ProcessCombatPoseChangedEvent");
static_assert(offsetof(SHWeaponManageCmbSubcomp_ProcessCombatPoseChangedEvent, ComponentPtr) == 0x000000, "Member 'SHWeaponManageCmbSubcomp_ProcessCombatPoseChangedEvent::ComponentPtr' has a wrong offset!");

// Function SHProto.SHWeaponManageCmbSubcomp.ProcessItemRemovedEvent
// 0x0010 (0x0010 - 0x0000)
struct SHWeaponManageCmbSubcomp_ProcessItemRemovedEvent final
{
public:
	class USHCharacterPlayItemsComponent*         ComponentPtr;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemContext;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHWeaponManageCmbSubcomp_ProcessItemRemovedEvent) == 0x000008, "Wrong alignment on SHWeaponManageCmbSubcomp_ProcessItemRemovedEvent");
static_assert(sizeof(SHWeaponManageCmbSubcomp_ProcessItemRemovedEvent) == 0x000010, "Wrong size on SHWeaponManageCmbSubcomp_ProcessItemRemovedEvent");
static_assert(offsetof(SHWeaponManageCmbSubcomp_ProcessItemRemovedEvent, ComponentPtr) == 0x000000, "Member 'SHWeaponManageCmbSubcomp_ProcessItemRemovedEvent::ComponentPtr' has a wrong offset!");
static_assert(offsetof(SHWeaponManageCmbSubcomp_ProcessItemRemovedEvent, ItemContext) == 0x000008, "Member 'SHWeaponManageCmbSubcomp_ProcessItemRemovedEvent::ItemContext' has a wrong offset!");

// Function SHProto.SHWeaponManageCmbSubcomp.ProcessPreloadItemAssetsEvent
// 0x0010 (0x0010 - 0x0000)
struct SHWeaponManageCmbSubcomp_ProcessPreloadItemAssetsEvent final
{
public:
	class USHCharacterPlayItemsComponent*         ComponentPtr;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemContext;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHWeaponManageCmbSubcomp_ProcessPreloadItemAssetsEvent) == 0x000008, "Wrong alignment on SHWeaponManageCmbSubcomp_ProcessPreloadItemAssetsEvent");
static_assert(sizeof(SHWeaponManageCmbSubcomp_ProcessPreloadItemAssetsEvent) == 0x000010, "Wrong size on SHWeaponManageCmbSubcomp_ProcessPreloadItemAssetsEvent");
static_assert(offsetof(SHWeaponManageCmbSubcomp_ProcessPreloadItemAssetsEvent, ComponentPtr) == 0x000000, "Member 'SHWeaponManageCmbSubcomp_ProcessPreloadItemAssetsEvent::ComponentPtr' has a wrong offset!");
static_assert(offsetof(SHWeaponManageCmbSubcomp_ProcessPreloadItemAssetsEvent, ItemContext) == 0x000008, "Member 'SHWeaponManageCmbSubcomp_ProcessPreloadItemAssetsEvent::ItemContext' has a wrong offset!");

// Function SHProto.SHWeaponManageCmbSubcomp.ProcessReleasePreloadedItemAssetsEvent
// 0x0010 (0x0010 - 0x0000)
struct SHWeaponManageCmbSubcomp_ProcessReleasePreloadedItemAssetsEvent final
{
public:
	class USHCharacterPlayItemsComponent*         ComponentPtr;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemContext;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHWeaponManageCmbSubcomp_ProcessReleasePreloadedItemAssetsEvent) == 0x000008, "Wrong alignment on SHWeaponManageCmbSubcomp_ProcessReleasePreloadedItemAssetsEvent");
static_assert(sizeof(SHWeaponManageCmbSubcomp_ProcessReleasePreloadedItemAssetsEvent) == 0x000010, "Wrong size on SHWeaponManageCmbSubcomp_ProcessReleasePreloadedItemAssetsEvent");
static_assert(offsetof(SHWeaponManageCmbSubcomp_ProcessReleasePreloadedItemAssetsEvent, ComponentPtr) == 0x000000, "Member 'SHWeaponManageCmbSubcomp_ProcessReleasePreloadedItemAssetsEvent::ComponentPtr' has a wrong offset!");
static_assert(offsetof(SHWeaponManageCmbSubcomp_ProcessReleasePreloadedItemAssetsEvent, ItemContext) == 0x000008, "Member 'SHWeaponManageCmbSubcomp_ProcessReleasePreloadedItemAssetsEvent::ItemContext' has a wrong offset!");

// Function SHProto.SHWeaponManageCmbSubcomp.RequestEquipWeapon
// 0x000C (0x000C - 0x0000)
struct SHWeaponManageCmbSubcomp_RequestEquipWeapon final
{
public:
	class FName                                   WeaponDataRowName;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Instant;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHWeaponManageCmbSubcomp_RequestEquipWeapon) == 0x000004, "Wrong alignment on SHWeaponManageCmbSubcomp_RequestEquipWeapon");
static_assert(sizeof(SHWeaponManageCmbSubcomp_RequestEquipWeapon) == 0x00000C, "Wrong size on SHWeaponManageCmbSubcomp_RequestEquipWeapon");
static_assert(offsetof(SHWeaponManageCmbSubcomp_RequestEquipWeapon, WeaponDataRowName) == 0x000000, "Member 'SHWeaponManageCmbSubcomp_RequestEquipWeapon::WeaponDataRowName' has a wrong offset!");
static_assert(offsetof(SHWeaponManageCmbSubcomp_RequestEquipWeapon, Instant) == 0x000008, "Member 'SHWeaponManageCmbSubcomp_RequestEquipWeapon::Instant' has a wrong offset!");
static_assert(offsetof(SHWeaponManageCmbSubcomp_RequestEquipWeapon, ReturnValue) == 0x000009, "Member 'SHWeaponManageCmbSubcomp_RequestEquipWeapon::ReturnValue' has a wrong offset!");

// Function SHProto.SHWeaponManageCmbSubcomp.RequestUnequipWeapon
// 0x0002 (0x0002 - 0x0000)
struct SHWeaponManageCmbSubcomp_RequestUnequipWeapon final
{
public:
	bool                                          Instant;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHWeaponManageCmbSubcomp_RequestUnequipWeapon) == 0x000001, "Wrong alignment on SHWeaponManageCmbSubcomp_RequestUnequipWeapon");
static_assert(sizeof(SHWeaponManageCmbSubcomp_RequestUnequipWeapon) == 0x000002, "Wrong size on SHWeaponManageCmbSubcomp_RequestUnequipWeapon");
static_assert(offsetof(SHWeaponManageCmbSubcomp_RequestUnequipWeapon, Instant) == 0x000000, "Member 'SHWeaponManageCmbSubcomp_RequestUnequipWeapon::Instant' has a wrong offset!");
static_assert(offsetof(SHWeaponManageCmbSubcomp_RequestUnequipWeapon, ReturnValue) == 0x000001, "Member 'SHWeaponManageCmbSubcomp_RequestUnequipWeapon::ReturnValue' has a wrong offset!");

// DelegateFunction SHProto.SHWeaponManageCmbSubcomp.SHHWeaponManageEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHWeaponManageCmbSubcomp_SHHWeaponManageEvent__DelegateSignature final
{
public:
	class USHWeaponManageCmbSubcomp*              WeaponManagerSubcomp;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHWeaponManageCmbSubcomp_SHHWeaponManageEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHWeaponManageCmbSubcomp_SHHWeaponManageEvent__DelegateSignature");
static_assert(sizeof(SHWeaponManageCmbSubcomp_SHHWeaponManageEvent__DelegateSignature) == 0x000008, "Wrong size on SHWeaponManageCmbSubcomp_SHHWeaponManageEvent__DelegateSignature");
static_assert(offsetof(SHWeaponManageCmbSubcomp_SHHWeaponManageEvent__DelegateSignature, WeaponManagerSubcomp) == 0x000000, "Member 'SHWeaponManageCmbSubcomp_SHHWeaponManageEvent__DelegateSignature::WeaponManagerSubcomp' has a wrong offset!");

// Function SHProto.SHWeaponManageCmbSubcomp.GetEquippedWeapon
// 0x0008 (0x0008 - 0x0000)
struct SHWeaponManageCmbSubcomp_GetEquippedWeapon final
{
public:
	class ASHItemWeapon*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHWeaponManageCmbSubcomp_GetEquippedWeapon) == 0x000008, "Wrong alignment on SHWeaponManageCmbSubcomp_GetEquippedWeapon");
static_assert(sizeof(SHWeaponManageCmbSubcomp_GetEquippedWeapon) == 0x000008, "Wrong size on SHWeaponManageCmbSubcomp_GetEquippedWeapon");
static_assert(offsetof(SHWeaponManageCmbSubcomp_GetEquippedWeapon, ReturnValue) == 0x000000, "Member 'SHWeaponManageCmbSubcomp_GetEquippedWeapon::ReturnValue' has a wrong offset!");

// Function SHProto.SHWeaponManageCmbSubcomp.GetEquippedWeaponName
// 0x0008 (0x0008 - 0x0000)
struct SHWeaponManageCmbSubcomp_GetEquippedWeaponName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHWeaponManageCmbSubcomp_GetEquippedWeaponName) == 0x000004, "Wrong alignment on SHWeaponManageCmbSubcomp_GetEquippedWeaponName");
static_assert(sizeof(SHWeaponManageCmbSubcomp_GetEquippedWeaponName) == 0x000008, "Wrong size on SHWeaponManageCmbSubcomp_GetEquippedWeaponName");
static_assert(offsetof(SHWeaponManageCmbSubcomp_GetEquippedWeaponName, ReturnValue) == 0x000000, "Member 'SHWeaponManageCmbSubcomp_GetEquippedWeaponName::ReturnValue' has a wrong offset!");

// Function SHProto.SHWeaponManageCmbSubcomp.GetLastUsedMeleeWeapon
// 0x0008 (0x0008 - 0x0000)
struct SHWeaponManageCmbSubcomp_GetLastUsedMeleeWeapon final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHWeaponManageCmbSubcomp_GetLastUsedMeleeWeapon) == 0x000004, "Wrong alignment on SHWeaponManageCmbSubcomp_GetLastUsedMeleeWeapon");
static_assert(sizeof(SHWeaponManageCmbSubcomp_GetLastUsedMeleeWeapon) == 0x000008, "Wrong size on SHWeaponManageCmbSubcomp_GetLastUsedMeleeWeapon");
static_assert(offsetof(SHWeaponManageCmbSubcomp_GetLastUsedMeleeWeapon, ReturnValue) == 0x000000, "Member 'SHWeaponManageCmbSubcomp_GetLastUsedMeleeWeapon::ReturnValue' has a wrong offset!");

// Function SHProto.SHWeaponManageCmbSubcomp.GetLastUsedRangedWeapon
// 0x0008 (0x0008 - 0x0000)
struct SHWeaponManageCmbSubcomp_GetLastUsedRangedWeapon final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHWeaponManageCmbSubcomp_GetLastUsedRangedWeapon) == 0x000004, "Wrong alignment on SHWeaponManageCmbSubcomp_GetLastUsedRangedWeapon");
static_assert(sizeof(SHWeaponManageCmbSubcomp_GetLastUsedRangedWeapon) == 0x000008, "Wrong size on SHWeaponManageCmbSubcomp_GetLastUsedRangedWeapon");
static_assert(offsetof(SHWeaponManageCmbSubcomp_GetLastUsedRangedWeapon, ReturnValue) == 0x000000, "Member 'SHWeaponManageCmbSubcomp_GetLastUsedRangedWeapon::ReturnValue' has a wrong offset!");

// Function SHProto.SHWeaponManageCmbSubcomp.GetLastUsedWeapon
// 0x0008 (0x0008 - 0x0000)
struct SHWeaponManageCmbSubcomp_GetLastUsedWeapon final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHWeaponManageCmbSubcomp_GetLastUsedWeapon) == 0x000004, "Wrong alignment on SHWeaponManageCmbSubcomp_GetLastUsedWeapon");
static_assert(sizeof(SHWeaponManageCmbSubcomp_GetLastUsedWeapon) == 0x000008, "Wrong size on SHWeaponManageCmbSubcomp_GetLastUsedWeapon");
static_assert(offsetof(SHWeaponManageCmbSubcomp_GetLastUsedWeapon, ReturnValue) == 0x000000, "Member 'SHWeaponManageCmbSubcomp_GetLastUsedWeapon::ReturnValue' has a wrong offset!");

// Function SHProto.SHWeaponManageCmbSubcomp.GetMeleeWeaponToEquip
// 0x000C (0x000C - 0x0000)
struct SHWeaponManageCmbSubcomp_GetMeleeWeaponToEquip final
{
public:
	bool                                          Next;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHWeaponManageCmbSubcomp_GetMeleeWeaponToEquip) == 0x000004, "Wrong alignment on SHWeaponManageCmbSubcomp_GetMeleeWeaponToEquip");
static_assert(sizeof(SHWeaponManageCmbSubcomp_GetMeleeWeaponToEquip) == 0x00000C, "Wrong size on SHWeaponManageCmbSubcomp_GetMeleeWeaponToEquip");
static_assert(offsetof(SHWeaponManageCmbSubcomp_GetMeleeWeaponToEquip, Next) == 0x000000, "Member 'SHWeaponManageCmbSubcomp_GetMeleeWeaponToEquip::Next' has a wrong offset!");
static_assert(offsetof(SHWeaponManageCmbSubcomp_GetMeleeWeaponToEquip, ReturnValue) == 0x000004, "Member 'SHWeaponManageCmbSubcomp_GetMeleeWeaponToEquip::ReturnValue' has a wrong offset!");

// Function SHProto.SHWeaponManageCmbSubcomp.GetNoWeaponDataTableRowName
// 0x0008 (0x0008 - 0x0000)
struct SHWeaponManageCmbSubcomp_GetNoWeaponDataTableRowName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHWeaponManageCmbSubcomp_GetNoWeaponDataTableRowName) == 0x000004, "Wrong alignment on SHWeaponManageCmbSubcomp_GetNoWeaponDataTableRowName");
static_assert(sizeof(SHWeaponManageCmbSubcomp_GetNoWeaponDataTableRowName) == 0x000008, "Wrong size on SHWeaponManageCmbSubcomp_GetNoWeaponDataTableRowName");
static_assert(offsetof(SHWeaponManageCmbSubcomp_GetNoWeaponDataTableRowName, ReturnValue) == 0x000000, "Member 'SHWeaponManageCmbSubcomp_GetNoWeaponDataTableRowName::ReturnValue' has a wrong offset!");

// Function SHProto.SHWeaponManageCmbSubcomp.GetRangedWeaponToEquip
// 0x000C (0x000C - 0x0000)
struct SHWeaponManageCmbSubcomp_GetRangedWeaponToEquip final
{
public:
	bool                                          Next;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHWeaponManageCmbSubcomp_GetRangedWeaponToEquip) == 0x000004, "Wrong alignment on SHWeaponManageCmbSubcomp_GetRangedWeaponToEquip");
static_assert(sizeof(SHWeaponManageCmbSubcomp_GetRangedWeaponToEquip) == 0x00000C, "Wrong size on SHWeaponManageCmbSubcomp_GetRangedWeaponToEquip");
static_assert(offsetof(SHWeaponManageCmbSubcomp_GetRangedWeaponToEquip, Next) == 0x000000, "Member 'SHWeaponManageCmbSubcomp_GetRangedWeaponToEquip::Next' has a wrong offset!");
static_assert(offsetof(SHWeaponManageCmbSubcomp_GetRangedWeaponToEquip, ReturnValue) == 0x000004, "Member 'SHWeaponManageCmbSubcomp_GetRangedWeaponToEquip::ReturnValue' has a wrong offset!");

// Function SHProto.SHWeaponManageCmbSubcomp.HasEquippedWeapon
// 0x0001 (0x0001 - 0x0000)
struct SHWeaponManageCmbSubcomp_HasEquippedWeapon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHWeaponManageCmbSubcomp_HasEquippedWeapon) == 0x000001, "Wrong alignment on SHWeaponManageCmbSubcomp_HasEquippedWeapon");
static_assert(sizeof(SHWeaponManageCmbSubcomp_HasEquippedWeapon) == 0x000001, "Wrong size on SHWeaponManageCmbSubcomp_HasEquippedWeapon");
static_assert(offsetof(SHWeaponManageCmbSubcomp_HasEquippedWeapon, ReturnValue) == 0x000000, "Member 'SHWeaponManageCmbSubcomp_HasEquippedWeapon::ReturnValue' has a wrong offset!");

// Function SHProto.AnimNotify_SHAkEvent.ProcessNotify
// 0x0058 (0x0058 - 0x0000)
struct AnimNotify_SHAkEvent_ProcessNotify final
{
public:
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Animation;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnimNotifyEventReference              EventReference;                                    // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 AttachName;                                        // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFollow;                                           // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreatedComponentDestroyOnFinish;                  // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CreatedComponentOcclusionRefreshInverval;          // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimNotify_SHAkEvent_ProcessNotify) == 0x000008, "Wrong alignment on AnimNotify_SHAkEvent_ProcessNotify");
static_assert(sizeof(AnimNotify_SHAkEvent_ProcessNotify) == 0x000058, "Wrong size on AnimNotify_SHAkEvent_ProcessNotify");
static_assert(offsetof(AnimNotify_SHAkEvent_ProcessNotify, MeshComp) == 0x000000, "Member 'AnimNotify_SHAkEvent_ProcessNotify::MeshComp' has a wrong offset!");
static_assert(offsetof(AnimNotify_SHAkEvent_ProcessNotify, Animation) == 0x000008, "Member 'AnimNotify_SHAkEvent_ProcessNotify::Animation' has a wrong offset!");
static_assert(offsetof(AnimNotify_SHAkEvent_ProcessNotify, EventReference) == 0x000010, "Member 'AnimNotify_SHAkEvent_ProcessNotify::EventReference' has a wrong offset!");
static_assert(offsetof(AnimNotify_SHAkEvent_ProcessNotify, AttachName) == 0x000038, "Member 'AnimNotify_SHAkEvent_ProcessNotify::AttachName' has a wrong offset!");
static_assert(offsetof(AnimNotify_SHAkEvent_ProcessNotify, AudioEvent) == 0x000048, "Member 'AnimNotify_SHAkEvent_ProcessNotify::AudioEvent' has a wrong offset!");
static_assert(offsetof(AnimNotify_SHAkEvent_ProcessNotify, bFollow) == 0x000050, "Member 'AnimNotify_SHAkEvent_ProcessNotify::bFollow' has a wrong offset!");
static_assert(offsetof(AnimNotify_SHAkEvent_ProcessNotify, bCreatedComponentDestroyOnFinish) == 0x000051, "Member 'AnimNotify_SHAkEvent_ProcessNotify::bCreatedComponentDestroyOnFinish' has a wrong offset!");
static_assert(offsetof(AnimNotify_SHAkEvent_ProcessNotify, CreatedComponentOcclusionRefreshInverval) == 0x000054, "Member 'AnimNotify_SHAkEvent_ProcessNotify::CreatedComponentOcclusionRefreshInverval' has a wrong offset!");

// Function SHProto.SHCombatPushedInterface.CanBePushed
// 0x0001 (0x0001 - 0x0000)
struct SHCombatPushedInterface_CanBePushed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCombatPushedInterface_CanBePushed) == 0x000001, "Wrong alignment on SHCombatPushedInterface_CanBePushed");
static_assert(sizeof(SHCombatPushedInterface_CanBePushed) == 0x000001, "Wrong size on SHCombatPushedInterface_CanBePushed");
static_assert(offsetof(SHCombatPushedInterface_CanBePushed, ReturnValue) == 0x000000, "Member 'SHCombatPushedInterface_CanBePushed::ReturnValue' has a wrong offset!");

// Function SHProto.SHCombatPushedInterface.PushedBy
// 0x0010 (0x0010 - 0x0000)
struct SHCombatPushedInterface_PushedBy final
{
public:
	class AActor*                                 Pusher;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCombatPushedInterface_PushedBy) == 0x000008, "Wrong alignment on SHCombatPushedInterface_PushedBy");
static_assert(sizeof(SHCombatPushedInterface_PushedBy) == 0x000010, "Wrong size on SHCombatPushedInterface_PushedBy");
static_assert(offsetof(SHCombatPushedInterface_PushedBy, Pusher) == 0x000000, "Member 'SHCombatPushedInterface_PushedBy::Pusher' has a wrong offset!");
static_assert(offsetof(SHCombatPushedInterface_PushedBy, ReturnValue) == 0x000008, "Member 'SHCombatPushedInterface_PushedBy::ReturnValue' has a wrong offset!");

// Function SHProto.AskNewGameSettingsWidget.BP_OnShowVisualization
// 0x0060 (0x0060 - 0x0000)
struct AskNewGameSettingsWidget_BP_OnShowVisualization final
{
public:
	struct FSettingOptionVisualizationData        Visualization;                                     // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AskNewGameSettingsWidget_BP_OnShowVisualization) == 0x000008, "Wrong alignment on AskNewGameSettingsWidget_BP_OnShowVisualization");
static_assert(sizeof(AskNewGameSettingsWidget_BP_OnShowVisualization) == 0x000060, "Wrong size on AskNewGameSettingsWidget_BP_OnShowVisualization");
static_assert(offsetof(AskNewGameSettingsWidget_BP_OnShowVisualization, Visualization) == 0x000000, "Member 'AskNewGameSettingsWidget_BP_OnShowVisualization::Visualization' has a wrong offset!");

// Function SHProto.SHCombatSnapInterface.CanSnapOnActor
// 0x0001 (0x0001 - 0x0000)
struct SHCombatSnapInterface_CanSnapOnActor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCombatSnapInterface_CanSnapOnActor) == 0x000001, "Wrong alignment on SHCombatSnapInterface_CanSnapOnActor");
static_assert(sizeof(SHCombatSnapInterface_CanSnapOnActor) == 0x000001, "Wrong size on SHCombatSnapInterface_CanSnapOnActor");
static_assert(offsetof(SHCombatSnapInterface_CanSnapOnActor, ReturnValue) == 0x000000, "Member 'SHCombatSnapInterface_CanSnapOnActor::ReturnValue' has a wrong offset!");

// Function SHProto.SHCombatSnapInterface.GetSnapLocation
// 0x0018 (0x0018 - 0x0000)
struct SHCombatSnapInterface_GetSnapLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCombatSnapInterface_GetSnapLocation) == 0x000008, "Wrong alignment on SHCombatSnapInterface_GetSnapLocation");
static_assert(sizeof(SHCombatSnapInterface_GetSnapLocation) == 0x000018, "Wrong size on SHCombatSnapInterface_GetSnapLocation");
static_assert(offsetof(SHCombatSnapInterface_GetSnapLocation, ReturnValue) == 0x000000, "Member 'SHCombatSnapInterface_GetSnapLocation::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXComponent.FindSubcomponentByClass
// 0x0010 (0x0010 - 0x0000)
struct SHFXComponent_FindSubcomponentByClass final
{
public:
	TSubclassOf<class USHFXSubcomponent>          SubcomponentClass;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USHFXSubcomponent*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXComponent_FindSubcomponentByClass) == 0x000008, "Wrong alignment on SHFXComponent_FindSubcomponentByClass");
static_assert(sizeof(SHFXComponent_FindSubcomponentByClass) == 0x000010, "Wrong size on SHFXComponent_FindSubcomponentByClass");
static_assert(offsetof(SHFXComponent_FindSubcomponentByClass, SubcomponentClass) == 0x000000, "Member 'SHFXComponent_FindSubcomponentByClass::SubcomponentClass' has a wrong offset!");
static_assert(offsetof(SHFXComponent_FindSubcomponentByClass, ReturnValue) == 0x000008, "Member 'SHFXComponent_FindSubcomponentByClass::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXComponent.IsInitialized
// 0x0001 (0x0001 - 0x0000)
struct SHFXComponent_IsInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXComponent_IsInitialized) == 0x000001, "Wrong alignment on SHFXComponent_IsInitialized");
static_assert(sizeof(SHFXComponent_IsInitialized) == 0x000001, "Wrong size on SHFXComponent_IsInitialized");
static_assert(offsetof(SHFXComponent_IsInitialized, ReturnValue) == 0x000000, "Member 'SHFXComponent_IsInitialized::ReturnValue' has a wrong offset!");

// Function SHProto.SHEndingFactorsStatics.AddValueBlissEnding
// 0x0010 (0x0010 - 0x0000)
struct SHEndingFactorsStatics_AddValueBlissEnding final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHEndingFactorsStatics_AddValueBlissEnding) == 0x000008, "Wrong alignment on SHEndingFactorsStatics_AddValueBlissEnding");
static_assert(sizeof(SHEndingFactorsStatics_AddValueBlissEnding) == 0x000010, "Wrong size on SHEndingFactorsStatics_AddValueBlissEnding");
static_assert(offsetof(SHEndingFactorsStatics_AddValueBlissEnding, WorldContextObject) == 0x000000, "Member 'SHEndingFactorsStatics_AddValueBlissEnding::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHEndingFactorsStatics_AddValueBlissEnding, ReturnValue) == 0x000008, "Member 'SHEndingFactorsStatics_AddValueBlissEnding::ReturnValue' has a wrong offset!");

// Function SHProto.SHEndingFactorsStatics.AddValueUFOEndingFactor
// 0x0010 (0x0010 - 0x0000)
struct SHEndingFactorsStatics_AddValueUFOEndingFactor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHEndingFactorsStatics_AddValueUFOEndingFactor) == 0x000008, "Wrong alignment on SHEndingFactorsStatics_AddValueUFOEndingFactor");
static_assert(sizeof(SHEndingFactorsStatics_AddValueUFOEndingFactor) == 0x000010, "Wrong size on SHEndingFactorsStatics_AddValueUFOEndingFactor");
static_assert(offsetof(SHEndingFactorsStatics_AddValueUFOEndingFactor, WorldContextObject) == 0x000000, "Member 'SHEndingFactorsStatics_AddValueUFOEndingFactor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHEndingFactorsStatics_AddValueUFOEndingFactor, ReturnValue) == 0x000008, "Member 'SHEndingFactorsStatics_AddValueUFOEndingFactor::ReturnValue' has a wrong offset!");

// Function SHProto.SHEndingFactorsStatics.AddValueWestCityFWMariaRedirectionsCommentsEndingFactor
// 0x0008 (0x0008 - 0x0000)
struct SHEndingFactorsStatics_AddValueWestCityFWMariaRedirectionsCommentsEndingFactor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEndingFactorsStatics_AddValueWestCityFWMariaRedirectionsCommentsEndingFactor) == 0x000008, "Wrong alignment on SHEndingFactorsStatics_AddValueWestCityFWMariaRedirectionsCommentsEndingFactor");
static_assert(sizeof(SHEndingFactorsStatics_AddValueWestCityFWMariaRedirectionsCommentsEndingFactor) == 0x000008, "Wrong size on SHEndingFactorsStatics_AddValueWestCityFWMariaRedirectionsCommentsEndingFactor");
static_assert(offsetof(SHEndingFactorsStatics_AddValueWestCityFWMariaRedirectionsCommentsEndingFactor, WorldContextObject) == 0x000000, "Member 'SHEndingFactorsStatics_AddValueWestCityFWMariaRedirectionsCommentsEndingFactor::WorldContextObject' has a wrong offset!");

// Function SHProto.SHEndingFactorsStatics.AllowAddValueBlissEnding
// 0x0010 (0x0010 - 0x0000)
struct SHEndingFactorsStatics_AllowAddValueBlissEnding final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHEndingFactorsStatics_AllowAddValueBlissEnding) == 0x000008, "Wrong alignment on SHEndingFactorsStatics_AllowAddValueBlissEnding");
static_assert(sizeof(SHEndingFactorsStatics_AllowAddValueBlissEnding) == 0x000010, "Wrong size on SHEndingFactorsStatics_AllowAddValueBlissEnding");
static_assert(offsetof(SHEndingFactorsStatics_AllowAddValueBlissEnding, WorldContextObject) == 0x000000, "Member 'SHEndingFactorsStatics_AllowAddValueBlissEnding::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHEndingFactorsStatics_AllowAddValueBlissEnding, ReturnValue) == 0x000008, "Member 'SHEndingFactorsStatics_AllowAddValueBlissEnding::ReturnValue' has a wrong offset!");

// Function SHProto.SHEndingFactorsStatics.CanPlayBlissEnding
// 0x0010 (0x0010 - 0x0000)
struct SHEndingFactorsStatics_CanPlayBlissEnding final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHEndingFactorsStatics_CanPlayBlissEnding) == 0x000008, "Wrong alignment on SHEndingFactorsStatics_CanPlayBlissEnding");
static_assert(sizeof(SHEndingFactorsStatics_CanPlayBlissEnding) == 0x000010, "Wrong size on SHEndingFactorsStatics_CanPlayBlissEnding");
static_assert(offsetof(SHEndingFactorsStatics_CanPlayBlissEnding, WorldContextObject) == 0x000000, "Member 'SHEndingFactorsStatics_CanPlayBlissEnding::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHEndingFactorsStatics_CanPlayBlissEnding, ReturnValue) == 0x000008, "Member 'SHEndingFactorsStatics_CanPlayBlissEnding::ReturnValue' has a wrong offset!");

// Function SHProto.SHEndingFactorsStatics.CanPlayUFOEnding
// 0x0010 (0x0010 - 0x0000)
struct SHEndingFactorsStatics_CanPlayUFOEnding final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHEndingFactorsStatics_CanPlayUFOEnding) == 0x000008, "Wrong alignment on SHEndingFactorsStatics_CanPlayUFOEnding");
static_assert(sizeof(SHEndingFactorsStatics_CanPlayUFOEnding) == 0x000010, "Wrong size on SHEndingFactorsStatics_CanPlayUFOEnding");
static_assert(offsetof(SHEndingFactorsStatics_CanPlayUFOEnding, WorldContextObject) == 0x000000, "Member 'SHEndingFactorsStatics_CanPlayUFOEnding::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHEndingFactorsStatics_CanPlayUFOEnding, ReturnValue) == 0x000008, "Member 'SHEndingFactorsStatics_CanPlayUFOEnding::ReturnValue' has a wrong offset!");

// Function SHProto.SHEndingFactorsStatics.GetCurrentEndingType
// 0x0010 (0x0010 - 0x0000)
struct SHEndingFactorsStatics_GetCurrentEndingType final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHEndingType                                 ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHEndingFactorsStatics_GetCurrentEndingType) == 0x000008, "Wrong alignment on SHEndingFactorsStatics_GetCurrentEndingType");
static_assert(sizeof(SHEndingFactorsStatics_GetCurrentEndingType) == 0x000010, "Wrong size on SHEndingFactorsStatics_GetCurrentEndingType");
static_assert(offsetof(SHEndingFactorsStatics_GetCurrentEndingType, WorldContextObject) == 0x000000, "Member 'SHEndingFactorsStatics_GetCurrentEndingType::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHEndingFactorsStatics_GetCurrentEndingType, ReturnValue) == 0x000008, "Member 'SHEndingFactorsStatics_GetCurrentEndingType::ReturnValue' has a wrong offset!");

// Function SHProto.SHEndingFactorsStatics.SetHospitalFWLyingMariaInteractionsEndingFactor
// 0x0010 (0x0010 - 0x0000)
struct SHEndingFactorsStatics_SetHospitalFWLyingMariaInteractionsEndingFactor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InValue;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHEndingFactorsStatics_SetHospitalFWLyingMariaInteractionsEndingFactor) == 0x000008, "Wrong alignment on SHEndingFactorsStatics_SetHospitalFWLyingMariaInteractionsEndingFactor");
static_assert(sizeof(SHEndingFactorsStatics_SetHospitalFWLyingMariaInteractionsEndingFactor) == 0x000010, "Wrong size on SHEndingFactorsStatics_SetHospitalFWLyingMariaInteractionsEndingFactor");
static_assert(offsetof(SHEndingFactorsStatics_SetHospitalFWLyingMariaInteractionsEndingFactor, WorldContextObject) == 0x000000, "Member 'SHEndingFactorsStatics_SetHospitalFWLyingMariaInteractionsEndingFactor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHEndingFactorsStatics_SetHospitalFWLyingMariaInteractionsEndingFactor, InValue) == 0x000008, "Member 'SHEndingFactorsStatics_SetHospitalFWLyingMariaInteractionsEndingFactor::InValue' has a wrong offset!");

// Function SHProto.SHEndingFactorsStatics.SetHotelFWKilledAllDefenselessEnemiesEndingFactor
// 0x0010 (0x0010 - 0x0000)
struct SHEndingFactorsStatics_SetHotelFWKilledAllDefenselessEnemiesEndingFactor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InValue;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHEndingFactorsStatics_SetHotelFWKilledAllDefenselessEnemiesEndingFactor) == 0x000008, "Wrong alignment on SHEndingFactorsStatics_SetHotelFWKilledAllDefenselessEnemiesEndingFactor");
static_assert(sizeof(SHEndingFactorsStatics_SetHotelFWKilledAllDefenselessEnemiesEndingFactor) == 0x000010, "Wrong size on SHEndingFactorsStatics_SetHotelFWKilledAllDefenselessEnemiesEndingFactor");
static_assert(offsetof(SHEndingFactorsStatics_SetHotelFWKilledAllDefenselessEnemiesEndingFactor, WorldContextObject) == 0x000000, "Member 'SHEndingFactorsStatics_SetHotelFWKilledAllDefenselessEnemiesEndingFactor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHEndingFactorsStatics_SetHotelFWKilledAllDefenselessEnemiesEndingFactor, InValue) == 0x000008, "Member 'SHEndingFactorsStatics_SetHotelFWKilledAllDefenselessEnemiesEndingFactor::InValue' has a wrong offset!");

// Function SHProto.SHEndingFactorsStatics.SetHotelFWListenedSickbedConversationEndingFactor
// 0x0010 (0x0010 - 0x0000)
struct SHEndingFactorsStatics_SetHotelFWListenedSickbedConversationEndingFactor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InValue;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHEndingFactorsStatics_SetHotelFWListenedSickbedConversationEndingFactor) == 0x000008, "Wrong alignment on SHEndingFactorsStatics_SetHotelFWListenedSickbedConversationEndingFactor");
static_assert(sizeof(SHEndingFactorsStatics_SetHotelFWListenedSickbedConversationEndingFactor) == 0x000010, "Wrong size on SHEndingFactorsStatics_SetHotelFWListenedSickbedConversationEndingFactor");
static_assert(offsetof(SHEndingFactorsStatics_SetHotelFWListenedSickbedConversationEndingFactor, WorldContextObject) == 0x000000, "Member 'SHEndingFactorsStatics_SetHotelFWListenedSickbedConversationEndingFactor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHEndingFactorsStatics_SetHotelFWListenedSickbedConversationEndingFactor, InValue) == 0x000008, "Member 'SHEndingFactorsStatics_SetHotelFWListenedSickbedConversationEndingFactor::InValue' has a wrong offset!");

// Function SHProto.SHEndingFactorsStatics.SetHotelFWPyramidHeadBossAftermathEndingFactorValue
// 0x0010 (0x0010 - 0x0000)
struct SHEndingFactorsStatics_SetHotelFWPyramidHeadBossAftermathEndingFactorValue final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHHotelFWPyramidHeadBossAftermathEndingFactorValue InValue;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHEndingFactorsStatics_SetHotelFWPyramidHeadBossAftermathEndingFactorValue) == 0x000008, "Wrong alignment on SHEndingFactorsStatics_SetHotelFWPyramidHeadBossAftermathEndingFactorValue");
static_assert(sizeof(SHEndingFactorsStatics_SetHotelFWPyramidHeadBossAftermathEndingFactorValue) == 0x000010, "Wrong size on SHEndingFactorsStatics_SetHotelFWPyramidHeadBossAftermathEndingFactorValue");
static_assert(offsetof(SHEndingFactorsStatics_SetHotelFWPyramidHeadBossAftermathEndingFactorValue, WorldContextObject) == 0x000000, "Member 'SHEndingFactorsStatics_SetHotelFWPyramidHeadBossAftermathEndingFactorValue::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHEndingFactorsStatics_SetHotelFWPyramidHeadBossAftermathEndingFactorValue, InValue) == 0x000008, "Member 'SHEndingFactorsStatics_SetHotelFWPyramidHeadBossAftermathEndingFactorValue::InValue' has a wrong offset!");

// Function SHProto.SHEndingFactorsStatics.SetHotelOWMirrorPuzzleEndingFactor
// 0x0010 (0x0010 - 0x0000)
struct SHEndingFactorsStatics_SetHotelOWMirrorPuzzleEndingFactor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHHotelOWMirrorPuzzleEndingFactorValue       InValue;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHEndingFactorsStatics_SetHotelOWMirrorPuzzleEndingFactor) == 0x000008, "Wrong alignment on SHEndingFactorsStatics_SetHotelOWMirrorPuzzleEndingFactor");
static_assert(sizeof(SHEndingFactorsStatics_SetHotelOWMirrorPuzzleEndingFactor) == 0x000010, "Wrong size on SHEndingFactorsStatics_SetHotelOWMirrorPuzzleEndingFactor");
static_assert(offsetof(SHEndingFactorsStatics_SetHotelOWMirrorPuzzleEndingFactor, WorldContextObject) == 0x000000, "Member 'SHEndingFactorsStatics_SetHotelOWMirrorPuzzleEndingFactor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHEndingFactorsStatics_SetHotelOWMirrorPuzzleEndingFactor, InValue) == 0x000008, "Member 'SHEndingFactorsStatics_SetHotelOWMirrorPuzzleEndingFactor::InValue' has a wrong offset!");

// Function SHProto.SHEndingFactorsStatics.SetLabyrinthMariaRoomsEndingFactor
// 0x0010 (0x0010 - 0x0000)
struct SHEndingFactorsStatics_SetLabyrinthMariaRoomsEndingFactor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InValue;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHEndingFactorsStatics_SetLabyrinthMariaRoomsEndingFactor) == 0x000008, "Wrong alignment on SHEndingFactorsStatics_SetLabyrinthMariaRoomsEndingFactor");
static_assert(sizeof(SHEndingFactorsStatics_SetLabyrinthMariaRoomsEndingFactor) == 0x000010, "Wrong size on SHEndingFactorsStatics_SetLabyrinthMariaRoomsEndingFactor");
static_assert(offsetof(SHEndingFactorsStatics_SetLabyrinthMariaRoomsEndingFactor, WorldContextObject) == 0x000000, "Member 'SHEndingFactorsStatics_SetLabyrinthMariaRoomsEndingFactor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHEndingFactorsStatics_SetLabyrinthMariaRoomsEndingFactor, InValue) == 0x000008, "Member 'SHEndingFactorsStatics_SetLabyrinthMariaRoomsEndingFactor::InValue' has a wrong offset!");

// Function SHProto.SHEndingFactorsStatics.SetNeelysBarMessageEndingFactor
// 0x0010 (0x0010 - 0x0000)
struct SHEndingFactorsStatics_SetNeelysBarMessageEndingFactor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InValue;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHEndingFactorsStatics_SetNeelysBarMessageEndingFactor) == 0x000008, "Wrong alignment on SHEndingFactorsStatics_SetNeelysBarMessageEndingFactor");
static_assert(sizeof(SHEndingFactorsStatics_SetNeelysBarMessageEndingFactor) == 0x000010, "Wrong size on SHEndingFactorsStatics_SetNeelysBarMessageEndingFactor");
static_assert(offsetof(SHEndingFactorsStatics_SetNeelysBarMessageEndingFactor, WorldContextObject) == 0x000000, "Member 'SHEndingFactorsStatics_SetNeelysBarMessageEndingFactor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHEndingFactorsStatics_SetNeelysBarMessageEndingFactor, InValue) == 0x000008, "Member 'SHEndingFactorsStatics_SetNeelysBarMessageEndingFactor::InValue' has a wrong offset!");

// Function SHProto.SHEndingFactorsStatics.SetPrisonGallowPuzzleEndingFactor
// 0x0010 (0x0010 - 0x0000)
struct SHEndingFactorsStatics_SetPrisonGallowPuzzleEndingFactor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHPrisonGallowPuzzleEndingFactorValue        InValue;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHEndingFactorsStatics_SetPrisonGallowPuzzleEndingFactor) == 0x000008, "Wrong alignment on SHEndingFactorsStatics_SetPrisonGallowPuzzleEndingFactor");
static_assert(sizeof(SHEndingFactorsStatics_SetPrisonGallowPuzzleEndingFactor) == 0x000010, "Wrong size on SHEndingFactorsStatics_SetPrisonGallowPuzzleEndingFactor");
static_assert(offsetof(SHEndingFactorsStatics_SetPrisonGallowPuzzleEndingFactor, WorldContextObject) == 0x000000, "Member 'SHEndingFactorsStatics_SetPrisonGallowPuzzleEndingFactor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHEndingFactorsStatics_SetPrisonGallowPuzzleEndingFactor, InValue) == 0x000008, "Member 'SHEndingFactorsStatics_SetPrisonGallowPuzzleEndingFactor::InValue' has a wrong offset!");

// Function SHProto.SHEndingFactorsStatics.SetPyramidHeadBossFightOutcomeEndingFactor
// 0x0010 (0x0010 - 0x0000)
struct SHEndingFactorsStatics_SetPyramidHeadBossFightOutcomeEndingFactor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHPyramidHeadBossFightOutcomeEndingFactorValue InValue;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHEndingFactorsStatics_SetPyramidHeadBossFightOutcomeEndingFactor) == 0x000008, "Wrong alignment on SHEndingFactorsStatics_SetPyramidHeadBossFightOutcomeEndingFactor");
static_assert(sizeof(SHEndingFactorsStatics_SetPyramidHeadBossFightOutcomeEndingFactor) == 0x000010, "Wrong size on SHEndingFactorsStatics_SetPyramidHeadBossFightOutcomeEndingFactor");
static_assert(offsetof(SHEndingFactorsStatics_SetPyramidHeadBossFightOutcomeEndingFactor, WorldContextObject) == 0x000000, "Member 'SHEndingFactorsStatics_SetPyramidHeadBossFightOutcomeEndingFactor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHEndingFactorsStatics_SetPyramidHeadBossFightOutcomeEndingFactor, InValue) == 0x000008, "Member 'SHEndingFactorsStatics_SetPyramidHeadBossFightOutcomeEndingFactor::InValue' has a wrong offset!");

// Function SHProto.SHEndingFactorsStatics.SetWestCityFWInteractedAllAtHeavensNightEndingFactor
// 0x0010 (0x0010 - 0x0000)
struct SHEndingFactorsStatics_SetWestCityFWInteractedAllAtHeavensNightEndingFactor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InValue;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHEndingFactorsStatics_SetWestCityFWInteractedAllAtHeavensNightEndingFactor) == 0x000008, "Wrong alignment on SHEndingFactorsStatics_SetWestCityFWInteractedAllAtHeavensNightEndingFactor");
static_assert(sizeof(SHEndingFactorsStatics_SetWestCityFWInteractedAllAtHeavensNightEndingFactor) == 0x000010, "Wrong size on SHEndingFactorsStatics_SetWestCityFWInteractedAllAtHeavensNightEndingFactor");
static_assert(offsetof(SHEndingFactorsStatics_SetWestCityFWInteractedAllAtHeavensNightEndingFactor, WorldContextObject) == 0x000000, "Member 'SHEndingFactorsStatics_SetWestCityFWInteractedAllAtHeavensNightEndingFactor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHEndingFactorsStatics_SetWestCityFWInteractedAllAtHeavensNightEndingFactor, InValue) == 0x000008, "Member 'SHEndingFactorsStatics_SetWestCityFWInteractedAllAtHeavensNightEndingFactor::InValue' has a wrong offset!");

// Function SHProto.SHEndingFactorsStatics.SetWestCityFWMariaInteractionsEndingFactor
// 0x0010 (0x0010 - 0x0000)
struct SHEndingFactorsStatics_SetWestCityFWMariaInteractionsEndingFactor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InValue;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHEndingFactorsStatics_SetWestCityFWMariaInteractionsEndingFactor) == 0x000008, "Wrong alignment on SHEndingFactorsStatics_SetWestCityFWMariaInteractionsEndingFactor");
static_assert(sizeof(SHEndingFactorsStatics_SetWestCityFWMariaInteractionsEndingFactor) == 0x000010, "Wrong size on SHEndingFactorsStatics_SetWestCityFWMariaInteractionsEndingFactor");
static_assert(offsetof(SHEndingFactorsStatics_SetWestCityFWMariaInteractionsEndingFactor, WorldContextObject) == 0x000000, "Member 'SHEndingFactorsStatics_SetWestCityFWMariaInteractionsEndingFactor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHEndingFactorsStatics_SetWestCityFWMariaInteractionsEndingFactor, InValue) == 0x000008, "Member 'SHEndingFactorsStatics_SetWestCityFWMariaInteractionsEndingFactor::InValue' has a wrong offset!");

// Function SHProto.SHEndingFactorsStatics.SetWoodsideCoinPuzzleEndingFactor
// 0x0010 (0x0010 - 0x0000)
struct SHEndingFactorsStatics_SetWoodsideCoinPuzzleEndingFactor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHWoodsideCoinPuzzleEndingFactorValue        InValue;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHEndingFactorsStatics_SetWoodsideCoinPuzzleEndingFactor) == 0x000008, "Wrong alignment on SHEndingFactorsStatics_SetWoodsideCoinPuzzleEndingFactor");
static_assert(sizeof(SHEndingFactorsStatics_SetWoodsideCoinPuzzleEndingFactor) == 0x000010, "Wrong size on SHEndingFactorsStatics_SetWoodsideCoinPuzzleEndingFactor");
static_assert(offsetof(SHEndingFactorsStatics_SetWoodsideCoinPuzzleEndingFactor, WorldContextObject) == 0x000000, "Member 'SHEndingFactorsStatics_SetWoodsideCoinPuzzleEndingFactor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHEndingFactorsStatics_SetWoodsideCoinPuzzleEndingFactor, InValue) == 0x000008, "Member 'SHEndingFactorsStatics_SetWoodsideCoinPuzzleEndingFactor::InValue' has a wrong offset!");

// Function SHProto.SHSwarmBase.GetValidRegions
// 0x0020 (0x0020 - 0x0000)
struct SHSwarmBase_GetValidRegions final
{
public:
	TSubclassOf<class USHSwarmRegionBase>         RegionClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USHSwarmRegionBase*>             OutComponents;                                     // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          RemoveDisabledRegions;                             // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHSwarmBase_GetValidRegions) == 0x000008, "Wrong alignment on SHSwarmBase_GetValidRegions");
static_assert(sizeof(SHSwarmBase_GetValidRegions) == 0x000020, "Wrong size on SHSwarmBase_GetValidRegions");
static_assert(offsetof(SHSwarmBase_GetValidRegions, RegionClass) == 0x000000, "Member 'SHSwarmBase_GetValidRegions::RegionClass' has a wrong offset!");
static_assert(offsetof(SHSwarmBase_GetValidRegions, OutComponents) == 0x000008, "Member 'SHSwarmBase_GetValidRegions::OutComponents' has a wrong offset!");
static_assert(offsetof(SHSwarmBase_GetValidRegions, RemoveDisabledRegions) == 0x000018, "Member 'SHSwarmBase_GetValidRegions::RemoveDisabledRegions' has a wrong offset!");

// Function SHProto.SHSwarmBase.OnWeaponFireEffectImpl
// 0x0010 (0x0010 - 0x0000)
struct SHSwarmBase_OnWeaponFireEffectImpl final
{
public:
	class USHRangedCmbSubcomp*                    RangedCombatSubcomponent;                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHItemWeapon*                          ItemWeaponContext;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSwarmBase_OnWeaponFireEffectImpl) == 0x000008, "Wrong alignment on SHSwarmBase_OnWeaponFireEffectImpl");
static_assert(sizeof(SHSwarmBase_OnWeaponFireEffectImpl) == 0x000010, "Wrong size on SHSwarmBase_OnWeaponFireEffectImpl");
static_assert(offsetof(SHSwarmBase_OnWeaponFireEffectImpl, RangedCombatSubcomponent) == 0x000000, "Member 'SHSwarmBase_OnWeaponFireEffectImpl::RangedCombatSubcomponent' has a wrong offset!");
static_assert(offsetof(SHSwarmBase_OnWeaponFireEffectImpl, ItemWeaponContext) == 0x000008, "Member 'SHSwarmBase_OnWeaponFireEffectImpl::ItemWeaponContext' has a wrong offset!");

// Function SHProto.SHSwarmBase.RefreshRegions
// 0x0010 (0x0010 - 0x0000)
struct SHSwarmBase_RefreshRegions final
{
public:
	class FName                                   RegionNiagaraName;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USHSwarmRegionBase>         RegionClass;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSwarmBase_RefreshRegions) == 0x000008, "Wrong alignment on SHSwarmBase_RefreshRegions");
static_assert(sizeof(SHSwarmBase_RefreshRegions) == 0x000010, "Wrong size on SHSwarmBase_RefreshRegions");
static_assert(offsetof(SHSwarmBase_RefreshRegions, RegionNiagaraName) == 0x000000, "Member 'SHSwarmBase_RefreshRegions::RegionNiagaraName' has a wrong offset!");
static_assert(offsetof(SHSwarmBase_RefreshRegions, RegionClass) == 0x000008, "Member 'SHSwarmBase_RefreshRegions::RegionClass' has a wrong offset!");

// Function SHProto.SHSwarmBase.RefreshRegionsSimply
// 0x0010 (0x0010 - 0x0000)
struct SHSwarmBase_RefreshRegionsSimply final
{
public:
	class FName                                   RegionNiagaraName;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USHSwarmRegionBase>         RegionClass;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSwarmBase_RefreshRegionsSimply) == 0x000008, "Wrong alignment on SHSwarmBase_RefreshRegionsSimply");
static_assert(sizeof(SHSwarmBase_RefreshRegionsSimply) == 0x000010, "Wrong size on SHSwarmBase_RefreshRegionsSimply");
static_assert(offsetof(SHSwarmBase_RefreshRegionsSimply, RegionNiagaraName) == 0x000000, "Member 'SHSwarmBase_RefreshRegionsSimply::RegionNiagaraName' has a wrong offset!");
static_assert(offsetof(SHSwarmBase_RefreshRegionsSimply, RegionClass) == 0x000008, "Member 'SHSwarmBase_RefreshRegionsSimply::RegionClass' has a wrong offset!");

// Function SHProto.SHSwarmBase.SetSwarmDisabled
// 0x0001 (0x0001 - 0x0000)
struct SHSwarmBase_SetSwarmDisabled final
{
public:
	bool                                          IsDisable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSwarmBase_SetSwarmDisabled) == 0x000001, "Wrong alignment on SHSwarmBase_SetSwarmDisabled");
static_assert(sizeof(SHSwarmBase_SetSwarmDisabled) == 0x000001, "Wrong size on SHSwarmBase_SetSwarmDisabled");
static_assert(offsetof(SHSwarmBase_SetSwarmDisabled, IsDisable) == 0x000000, "Member 'SHSwarmBase_SetSwarmDisabled::IsDisable' has a wrong offset!");

// Function SHProto.SHSwarmBase.ShowAllDebugRegions
// 0x0001 (0x0001 - 0x0000)
struct SHSwarmBase_ShowAllDebugRegions final
{
public:
	bool                                          IsShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSwarmBase_ShowAllDebugRegions) == 0x000001, "Wrong alignment on SHSwarmBase_ShowAllDebugRegions");
static_assert(sizeof(SHSwarmBase_ShowAllDebugRegions) == 0x000001, "Wrong size on SHSwarmBase_ShowAllDebugRegions");
static_assert(offsetof(SHSwarmBase_ShowAllDebugRegions, IsShow) == 0x000000, "Member 'SHSwarmBase_ShowAllDebugRegions::IsShow' has a wrong offset!");

// Function SHProto.SHSwarmBase.UpdateStateAngleCone
// 0x0008 (0x0008 - 0x0000)
struct SHSwarmBase_UpdateStateAngleCone final
{
public:
	ESwarmCreeperState                            State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Angle;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSwarmBase_UpdateStateAngleCone) == 0x000004, "Wrong alignment on SHSwarmBase_UpdateStateAngleCone");
static_assert(sizeof(SHSwarmBase_UpdateStateAngleCone) == 0x000008, "Wrong size on SHSwarmBase_UpdateStateAngleCone");
static_assert(offsetof(SHSwarmBase_UpdateStateAngleCone, State) == 0x000000, "Member 'SHSwarmBase_UpdateStateAngleCone::State' has a wrong offset!");
static_assert(offsetof(SHSwarmBase_UpdateStateAngleCone, Angle) == 0x000004, "Member 'SHSwarmBase_UpdateStateAngleCone::Angle' has a wrong offset!");

// Function SHProto.SHSwarmBase.UpdateStateSpeed
// 0x0018 (0x0018 - 0x0000)
struct SHSwarmBase_UpdateStateSpeed final
{
public:
	ESwarmCreeperState                            State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Speed;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSwarmBase_UpdateStateSpeed) == 0x000008, "Wrong alignment on SHSwarmBase_UpdateStateSpeed");
static_assert(sizeof(SHSwarmBase_UpdateStateSpeed) == 0x000018, "Wrong size on SHSwarmBase_UpdateStateSpeed");
static_assert(offsetof(SHSwarmBase_UpdateStateSpeed, State) == 0x000000, "Member 'SHSwarmBase_UpdateStateSpeed::State' has a wrong offset!");
static_assert(offsetof(SHSwarmBase_UpdateStateSpeed, Speed) == 0x000008, "Member 'SHSwarmBase_UpdateStateSpeed::Speed' has a wrong offset!");

// Function SHProto.SHSwarmBase.UpdateStateTime
// 0x0018 (0x0018 - 0x0000)
struct SHSwarmBase_UpdateStateTime final
{
public:
	ESwarmCreeperState                            State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Time;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSwarmBase_UpdateStateTime) == 0x000008, "Wrong alignment on SHSwarmBase_UpdateStateTime");
static_assert(sizeof(SHSwarmBase_UpdateStateTime) == 0x000018, "Wrong size on SHSwarmBase_UpdateStateTime");
static_assert(offsetof(SHSwarmBase_UpdateStateTime, State) == 0x000000, "Member 'SHSwarmBase_UpdateStateTime::State' has a wrong offset!");
static_assert(offsetof(SHSwarmBase_UpdateStateTime, Time) == 0x000008, "Member 'SHSwarmBase_UpdateStateTime::Time' has a wrong offset!");

// Function SHProto.SHCityOWNeelysBarMessageEndingFactor.SHDebug_Character_Endings_CityOWNeelysBarMessageEndingFactor_SetDebugValue
// 0x0001 (0x0001 - 0x0000)
struct SHCityOWNeelysBarMessageEndingFactor_SHDebug_Character_Endings_CityOWNeelysBarMessageEndingFactor_SetDebugValue final
{
public:
	bool                                          InValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCityOWNeelysBarMessageEndingFactor_SHDebug_Character_Endings_CityOWNeelysBarMessageEndingFactor_SetDebugValue) == 0x000001, "Wrong alignment on SHCityOWNeelysBarMessageEndingFactor_SHDebug_Character_Endings_CityOWNeelysBarMessageEndingFactor_SetDebugValue");
static_assert(sizeof(SHCityOWNeelysBarMessageEndingFactor_SHDebug_Character_Endings_CityOWNeelysBarMessageEndingFactor_SetDebugValue) == 0x000001, "Wrong size on SHCityOWNeelysBarMessageEndingFactor_SHDebug_Character_Endings_CityOWNeelysBarMessageEndingFactor_SetDebugValue");
static_assert(offsetof(SHCityOWNeelysBarMessageEndingFactor_SHDebug_Character_Endings_CityOWNeelysBarMessageEndingFactor_SetDebugValue, InValue) == 0x000000, "Member 'SHCityOWNeelysBarMessageEndingFactor_SHDebug_Character_Endings_CityOWNeelysBarMessageEndingFactor_SetDebugValue::InValue' has a wrong offset!");

// Function SHProto.SHAimedAtComponent.EndBeingAimedAt
// 0x0008 (0x0008 - 0x0000)
struct SHAimedAtComponent_EndBeingAimedAt final
{
public:
	class AActor*                                 InAimingActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAimedAtComponent_EndBeingAimedAt) == 0x000008, "Wrong alignment on SHAimedAtComponent_EndBeingAimedAt");
static_assert(sizeof(SHAimedAtComponent_EndBeingAimedAt) == 0x000008, "Wrong size on SHAimedAtComponent_EndBeingAimedAt");
static_assert(offsetof(SHAimedAtComponent_EndBeingAimedAt, InAimingActor) == 0x000000, "Member 'SHAimedAtComponent_EndBeingAimedAt::InAimingActor' has a wrong offset!");

// Function SHProto.SHAimedAtComponent.StartBeingAimedAt
// 0x0010 (0x0010 - 0x0000)
struct SHAimedAtComponent_StartBeingAimedAt final
{
public:
	class AActor*                                 InAimingActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InAimedWithActor;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAimedAtComponent_StartBeingAimedAt) == 0x000008, "Wrong alignment on SHAimedAtComponent_StartBeingAimedAt");
static_assert(sizeof(SHAimedAtComponent_StartBeingAimedAt) == 0x000010, "Wrong size on SHAimedAtComponent_StartBeingAimedAt");
static_assert(offsetof(SHAimedAtComponent_StartBeingAimedAt, InAimingActor) == 0x000000, "Member 'SHAimedAtComponent_StartBeingAimedAt::InAimingActor' has a wrong offset!");
static_assert(offsetof(SHAimedAtComponent_StartBeingAimedAt, InAimedWithActor) == 0x000008, "Member 'SHAimedAtComponent_StartBeingAimedAt::InAimedWithActor' has a wrong offset!");

// Function SHProto.SHAimedAtComponent.GetAimedWithActor
// 0x0008 (0x0008 - 0x0000)
struct SHAimedAtComponent_GetAimedWithActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAimedAtComponent_GetAimedWithActor) == 0x000008, "Wrong alignment on SHAimedAtComponent_GetAimedWithActor");
static_assert(sizeof(SHAimedAtComponent_GetAimedWithActor) == 0x000008, "Wrong size on SHAimedAtComponent_GetAimedWithActor");
static_assert(offsetof(SHAimedAtComponent_GetAimedWithActor, ReturnValue) == 0x000000, "Member 'SHAimedAtComponent_GetAimedWithActor::ReturnValue' has a wrong offset!");

// Function SHProto.SHAimedAtComponent.GetAimingActor
// 0x0008 (0x0008 - 0x0000)
struct SHAimedAtComponent_GetAimingActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAimedAtComponent_GetAimingActor) == 0x000008, "Wrong alignment on SHAimedAtComponent_GetAimingActor");
static_assert(sizeof(SHAimedAtComponent_GetAimingActor) == 0x000008, "Wrong size on SHAimedAtComponent_GetAimingActor");
static_assert(offsetof(SHAimedAtComponent_GetAimingActor, ReturnValue) == 0x000000, "Member 'SHAimedAtComponent_GetAimingActor::ReturnValue' has a wrong offset!");

// Function SHProto.SHAimedAtComponent.GetBeingAimedAtDuration
// 0x0004 (0x0004 - 0x0000)
struct SHAimedAtComponent_GetBeingAimedAtDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAimedAtComponent_GetBeingAimedAtDuration) == 0x000004, "Wrong alignment on SHAimedAtComponent_GetBeingAimedAtDuration");
static_assert(sizeof(SHAimedAtComponent_GetBeingAimedAtDuration) == 0x000004, "Wrong size on SHAimedAtComponent_GetBeingAimedAtDuration");
static_assert(offsetof(SHAimedAtComponent_GetBeingAimedAtDuration, ReturnValue) == 0x000000, "Member 'SHAimedAtComponent_GetBeingAimedAtDuration::ReturnValue' has a wrong offset!");

// Function SHProto.SHAimedAtComponent.IsAlloweedToBeShoot
// 0x0001 (0x0001 - 0x0000)
struct SHAimedAtComponent_IsAlloweedToBeShoot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAimedAtComponent_IsAlloweedToBeShoot) == 0x000001, "Wrong alignment on SHAimedAtComponent_IsAlloweedToBeShoot");
static_assert(sizeof(SHAimedAtComponent_IsAlloweedToBeShoot) == 0x000001, "Wrong size on SHAimedAtComponent_IsAlloweedToBeShoot");
static_assert(offsetof(SHAimedAtComponent_IsAlloweedToBeShoot, ReturnValue) == 0x000000, "Member 'SHAimedAtComponent_IsAlloweedToBeShoot::ReturnValue' has a wrong offset!");

// Function SHProto.SHAimedAtComponent.IsBeingAimedAt
// 0x0001 (0x0001 - 0x0000)
struct SHAimedAtComponent_IsBeingAimedAt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAimedAtComponent_IsBeingAimedAt) == 0x000001, "Wrong alignment on SHAimedAtComponent_IsBeingAimedAt");
static_assert(sizeof(SHAimedAtComponent_IsBeingAimedAt) == 0x000001, "Wrong size on SHAimedAtComponent_IsBeingAimedAt");
static_assert(offsetof(SHAimedAtComponent_IsBeingAimedAt, ReturnValue) == 0x000000, "Member 'SHAimedAtComponent_IsBeingAimedAt::ReturnValue' has a wrong offset!");

// Function SHProto.SHControlTipsPanel.Show
// 0x0018 (0x0018 - 0x0000)
struct SHControlTipsPanel_Show final
{
public:
	TArray<class FName>                           WantedTooltips;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          WithBackground;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseVisibilitySettings;                             // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHControlTipsPanel_Show) == 0x000008, "Wrong alignment on SHControlTipsPanel_Show");
static_assert(sizeof(SHControlTipsPanel_Show) == 0x000018, "Wrong size on SHControlTipsPanel_Show");
static_assert(offsetof(SHControlTipsPanel_Show, WantedTooltips) == 0x000000, "Member 'SHControlTipsPanel_Show::WantedTooltips' has a wrong offset!");
static_assert(offsetof(SHControlTipsPanel_Show, WithBackground) == 0x000010, "Member 'SHControlTipsPanel_Show::WithBackground' has a wrong offset!");
static_assert(offsetof(SHControlTipsPanel_Show, UseVisibilitySettings) == 0x000011, "Member 'SHControlTipsPanel_Show::UseVisibilitySettings' has a wrong offset!");

// Function SHProto.SHControlTipsPanel.ShowBackground
// 0x0001 (0x0001 - 0x0000)
struct SHControlTipsPanel_ShowBackground final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHControlTipsPanel_ShowBackground) == 0x000001, "Wrong alignment on SHControlTipsPanel_ShowBackground");
static_assert(sizeof(SHControlTipsPanel_ShowBackground) == 0x000001, "Wrong size on SHControlTipsPanel_ShowBackground");
static_assert(offsetof(SHControlTipsPanel_ShowBackground, Show) == 0x000000, "Member 'SHControlTipsPanel_ShowBackground::Show' has a wrong offset!");

// Function SHProto.SHLookAtTargetScoreFunction.GetActorFromTarget
// 0x0058 (0x0058 - 0x0000)
struct SHLookAtTargetScoreFunction_GetActorFromTarget final
{
public:
	struct FSHLookAtTarget                        LookAtTarget;                                      // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLookAtTargetScoreFunction_GetActorFromTarget) == 0x000008, "Wrong alignment on SHLookAtTargetScoreFunction_GetActorFromTarget");
static_assert(sizeof(SHLookAtTargetScoreFunction_GetActorFromTarget) == 0x000058, "Wrong size on SHLookAtTargetScoreFunction_GetActorFromTarget");
static_assert(offsetof(SHLookAtTargetScoreFunction_GetActorFromTarget, LookAtTarget) == 0x000000, "Member 'SHLookAtTargetScoreFunction_GetActorFromTarget::LookAtTarget' has a wrong offset!");
static_assert(offsetof(SHLookAtTargetScoreFunction_GetActorFromTarget, ReturnValue) == 0x000050, "Member 'SHLookAtTargetScoreFunction_GetActorFromTarget::ReturnValue' has a wrong offset!");

// Function SHProto.SHLookAtTargetScoreFunction.GetCharacter
// 0x0008 (0x0008 - 0x0000)
struct SHLookAtTargetScoreFunction_GetCharacter final
{
public:
	class ACharacter*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLookAtTargetScoreFunction_GetCharacter) == 0x000008, "Wrong alignment on SHLookAtTargetScoreFunction_GetCharacter");
static_assert(sizeof(SHLookAtTargetScoreFunction_GetCharacter) == 0x000008, "Wrong size on SHLookAtTargetScoreFunction_GetCharacter");
static_assert(offsetof(SHLookAtTargetScoreFunction_GetCharacter, ReturnValue) == 0x000000, "Member 'SHLookAtTargetScoreFunction_GetCharacter::ReturnValue' has a wrong offset!");

// Function SHProto.SHLookAtTargetScoreFunction.GetDefaultLookAtTargetScore
// 0x0058 (0x0058 - 0x0000)
struct SHLookAtTargetScoreFunction_GetDefaultLookAtTargetScore final
{
public:
	struct FSHLookAtTarget                        LookAtTarget;                                      // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHLookAtTargetScoreFunction_GetDefaultLookAtTargetScore) == 0x000008, "Wrong alignment on SHLookAtTargetScoreFunction_GetDefaultLookAtTargetScore");
static_assert(sizeof(SHLookAtTargetScoreFunction_GetDefaultLookAtTargetScore) == 0x000058, "Wrong size on SHLookAtTargetScoreFunction_GetDefaultLookAtTargetScore");
static_assert(offsetof(SHLookAtTargetScoreFunction_GetDefaultLookAtTargetScore, LookAtTarget) == 0x000000, "Member 'SHLookAtTargetScoreFunction_GetDefaultLookAtTargetScore::LookAtTarget' has a wrong offset!");
static_assert(offsetof(SHLookAtTargetScoreFunction_GetDefaultLookAtTargetScore, ReturnValue) == 0x000050, "Member 'SHLookAtTargetScoreFunction_GetDefaultLookAtTargetScore::ReturnValue' has a wrong offset!");

// Function SHProto.SHLookAtTargetScoreFunction.GetLookAtTargetScore
// 0x0058 (0x0058 - 0x0000)
struct SHLookAtTargetScoreFunction_GetLookAtTargetScore final
{
public:
	struct FSHLookAtTarget                        LookAtTarget;                                      // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHLookAtTargetScoreFunction_GetLookAtTargetScore) == 0x000008, "Wrong alignment on SHLookAtTargetScoreFunction_GetLookAtTargetScore");
static_assert(sizeof(SHLookAtTargetScoreFunction_GetLookAtTargetScore) == 0x000058, "Wrong size on SHLookAtTargetScoreFunction_GetLookAtTargetScore");
static_assert(offsetof(SHLookAtTargetScoreFunction_GetLookAtTargetScore, LookAtTarget) == 0x000000, "Member 'SHLookAtTargetScoreFunction_GetLookAtTargetScore::LookAtTarget' has a wrong offset!");
static_assert(offsetof(SHLookAtTargetScoreFunction_GetLookAtTargetScore, ReturnValue) == 0x000050, "Member 'SHLookAtTargetScoreFunction_GetLookAtTargetScore::ReturnValue' has a wrong offset!");

// Function SHProto.SHLookAtTargetScoreFunction.GetTargetActorAngleDeltas
// 0x0060 (0x0060 - 0x0000)
struct SHLookAtTargetScoreFunction_GetTargetActorAngleDeltas final
{
public:
	struct FSHLookAtTarget                        LookAtTarget;                                      // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLookAtTargetScoreFunction_GetTargetActorAngleDeltas) == 0x000008, "Wrong alignment on SHLookAtTargetScoreFunction_GetTargetActorAngleDeltas");
static_assert(sizeof(SHLookAtTargetScoreFunction_GetTargetActorAngleDeltas) == 0x000060, "Wrong size on SHLookAtTargetScoreFunction_GetTargetActorAngleDeltas");
static_assert(offsetof(SHLookAtTargetScoreFunction_GetTargetActorAngleDeltas, LookAtTarget) == 0x000000, "Member 'SHLookAtTargetScoreFunction_GetTargetActorAngleDeltas::LookAtTarget' has a wrong offset!");
static_assert(offsetof(SHLookAtTargetScoreFunction_GetTargetActorAngleDeltas, ReturnValue) == 0x000050, "Member 'SHLookAtTargetScoreFunction_GetTargetActorAngleDeltas::ReturnValue' has a wrong offset!");

// Function SHProto.SHLookAtTargetScoreFunction.GetTargetActortDistance
// 0x0058 (0x0058 - 0x0000)
struct SHLookAtTargetScoreFunction_GetTargetActortDistance final
{
public:
	struct FSHLookAtTarget                        LookAtTarget;                                      // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHLookAtTargetScoreFunction_GetTargetActortDistance) == 0x000008, "Wrong alignment on SHLookAtTargetScoreFunction_GetTargetActortDistance");
static_assert(sizeof(SHLookAtTargetScoreFunction_GetTargetActortDistance) == 0x000058, "Wrong size on SHLookAtTargetScoreFunction_GetTargetActortDistance");
static_assert(offsetof(SHLookAtTargetScoreFunction_GetTargetActortDistance, LookAtTarget) == 0x000000, "Member 'SHLookAtTargetScoreFunction_GetTargetActortDistance::LookAtTarget' has a wrong offset!");
static_assert(offsetof(SHLookAtTargetScoreFunction_GetTargetActortDistance, ReturnValue) == 0x000050, "Member 'SHLookAtTargetScoreFunction_GetTargetActortDistance::ReturnValue' has a wrong offset!");

// Function SHProto.SHLookAtTargetScoreFunction.GetTargetComponentAngleDeltas
// 0x0060 (0x0060 - 0x0000)
struct SHLookAtTargetScoreFunction_GetTargetComponentAngleDeltas final
{
public:
	struct FSHLookAtTarget                        LookAtTarget;                                      // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLookAtTargetScoreFunction_GetTargetComponentAngleDeltas) == 0x000008, "Wrong alignment on SHLookAtTargetScoreFunction_GetTargetComponentAngleDeltas");
static_assert(sizeof(SHLookAtTargetScoreFunction_GetTargetComponentAngleDeltas) == 0x000060, "Wrong size on SHLookAtTargetScoreFunction_GetTargetComponentAngleDeltas");
static_assert(offsetof(SHLookAtTargetScoreFunction_GetTargetComponentAngleDeltas, LookAtTarget) == 0x000000, "Member 'SHLookAtTargetScoreFunction_GetTargetComponentAngleDeltas::LookAtTarget' has a wrong offset!");
static_assert(offsetof(SHLookAtTargetScoreFunction_GetTargetComponentAngleDeltas, ReturnValue) == 0x000050, "Member 'SHLookAtTargetScoreFunction_GetTargetComponentAngleDeltas::ReturnValue' has a wrong offset!");

// Function SHProto.SHLookAtTargetScoreFunction.GetTargetComponentDistance
// 0x0058 (0x0058 - 0x0000)
struct SHLookAtTargetScoreFunction_GetTargetComponentDistance final
{
public:
	struct FSHLookAtTarget                        LookAtTarget;                                      // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHLookAtTargetScoreFunction_GetTargetComponentDistance) == 0x000008, "Wrong alignment on SHLookAtTargetScoreFunction_GetTargetComponentDistance");
static_assert(sizeof(SHLookAtTargetScoreFunction_GetTargetComponentDistance) == 0x000058, "Wrong size on SHLookAtTargetScoreFunction_GetTargetComponentDistance");
static_assert(offsetof(SHLookAtTargetScoreFunction_GetTargetComponentDistance, LookAtTarget) == 0x000000, "Member 'SHLookAtTargetScoreFunction_GetTargetComponentDistance::LookAtTarget' has a wrong offset!");
static_assert(offsetof(SHLookAtTargetScoreFunction_GetTargetComponentDistance, ReturnValue) == 0x000050, "Member 'SHLookAtTargetScoreFunction_GetTargetComponentDistance::ReturnValue' has a wrong offset!");

// Function SHProto.SHLookAtTargetScoreFunction.IsLookAtTargetValid
// 0x0058 (0x0058 - 0x0000)
struct SHLookAtTargetScoreFunction_IsLookAtTargetValid final
{
public:
	struct FSHLookAtTarget                        LookAtTarget;                                      // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHLookAtTargetScoreFunction_IsLookAtTargetValid) == 0x000008, "Wrong alignment on SHLookAtTargetScoreFunction_IsLookAtTargetValid");
static_assert(sizeof(SHLookAtTargetScoreFunction_IsLookAtTargetValid) == 0x000058, "Wrong size on SHLookAtTargetScoreFunction_IsLookAtTargetValid");
static_assert(offsetof(SHLookAtTargetScoreFunction_IsLookAtTargetValid, LookAtTarget) == 0x000000, "Member 'SHLookAtTargetScoreFunction_IsLookAtTargetValid::LookAtTarget' has a wrong offset!");
static_assert(offsetof(SHLookAtTargetScoreFunction_IsLookAtTargetValid, ReturnValue) == 0x000050, "Member 'SHLookAtTargetScoreFunction_IsLookAtTargetValid::ReturnValue' has a wrong offset!");

// Function SHProto.SHCombatStatisticsValueProcessor.ProcessRangedFireSuccess
// 0x0010 (0x0010 - 0x0000)
struct SHCombatStatisticsValueProcessor_ProcessRangedFireSuccess final
{
public:
	class USHRangedCmbSubcomp*                    RangedCombatSubcomponent;                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHItemWeapon*                          ItemWeaponContext;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCombatStatisticsValueProcessor_ProcessRangedFireSuccess) == 0x000008, "Wrong alignment on SHCombatStatisticsValueProcessor_ProcessRangedFireSuccess");
static_assert(sizeof(SHCombatStatisticsValueProcessor_ProcessRangedFireSuccess) == 0x000010, "Wrong size on SHCombatStatisticsValueProcessor_ProcessRangedFireSuccess");
static_assert(offsetof(SHCombatStatisticsValueProcessor_ProcessRangedFireSuccess, RangedCombatSubcomponent) == 0x000000, "Member 'SHCombatStatisticsValueProcessor_ProcessRangedFireSuccess::RangedCombatSubcomponent' has a wrong offset!");
static_assert(offsetof(SHCombatStatisticsValueProcessor_ProcessRangedFireSuccess, ItemWeaponContext) == 0x000008, "Member 'SHCombatStatisticsValueProcessor_ProcessRangedFireSuccess::ItemWeaponContext' has a wrong offset!");

// Function SHProto.SHLabyrinthMariaRoomsEndingFactor.SHDebug_Character_Endings_LabyrinthMariaRoomsEndingFactor_SetDebugValue
// 0x0001 (0x0001 - 0x0000)
struct SHLabyrinthMariaRoomsEndingFactor_SHDebug_Character_Endings_LabyrinthMariaRoomsEndingFactor_SetDebugValue final
{
public:
	bool                                          InValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLabyrinthMariaRoomsEndingFactor_SHDebug_Character_Endings_LabyrinthMariaRoomsEndingFactor_SetDebugValue) == 0x000001, "Wrong alignment on SHLabyrinthMariaRoomsEndingFactor_SHDebug_Character_Endings_LabyrinthMariaRoomsEndingFactor_SetDebugValue");
static_assert(sizeof(SHLabyrinthMariaRoomsEndingFactor_SHDebug_Character_Endings_LabyrinthMariaRoomsEndingFactor_SetDebugValue) == 0x000001, "Wrong size on SHLabyrinthMariaRoomsEndingFactor_SHDebug_Character_Endings_LabyrinthMariaRoomsEndingFactor_SetDebugValue");
static_assert(offsetof(SHLabyrinthMariaRoomsEndingFactor_SHDebug_Character_Endings_LabyrinthMariaRoomsEndingFactor_SetDebugValue, InValue) == 0x000000, "Member 'SHLabyrinthMariaRoomsEndingFactor_SHDebug_Character_Endings_LabyrinthMariaRoomsEndingFactor_SetDebugValue::InValue' has a wrong offset!");

// Function SHProto.SHCreeperLocomotionAnimInstance.GetDesiredVelocitySizeAndYaw
// 0x000C (0x000C - 0x0000)
struct SHCreeperLocomotionAnimInstance_GetDesiredVelocitySizeAndYaw final
{
public:
	float                                         OutVectorSize;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVectorYaw;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Smoothing;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCreeperLocomotionAnimInstance_GetDesiredVelocitySizeAndYaw) == 0x000004, "Wrong alignment on SHCreeperLocomotionAnimInstance_GetDesiredVelocitySizeAndYaw");
static_assert(sizeof(SHCreeperLocomotionAnimInstance_GetDesiredVelocitySizeAndYaw) == 0x00000C, "Wrong size on SHCreeperLocomotionAnimInstance_GetDesiredVelocitySizeAndYaw");
static_assert(offsetof(SHCreeperLocomotionAnimInstance_GetDesiredVelocitySizeAndYaw, OutVectorSize) == 0x000000, "Member 'SHCreeperLocomotionAnimInstance_GetDesiredVelocitySizeAndYaw::OutVectorSize' has a wrong offset!");
static_assert(offsetof(SHCreeperLocomotionAnimInstance_GetDesiredVelocitySizeAndYaw, OutVectorYaw) == 0x000004, "Member 'SHCreeperLocomotionAnimInstance_GetDesiredVelocitySizeAndYaw::OutVectorYaw' has a wrong offset!");
static_assert(offsetof(SHCreeperLocomotionAnimInstance_GetDesiredVelocitySizeAndYaw, Smoothing) == 0x000008, "Member 'SHCreeperLocomotionAnimInstance_GetDesiredVelocitySizeAndYaw::Smoothing' has a wrong offset!");

// Function SHProto.SHCreeperLocomotionAnimInstance.GetCreeperAnimInstanceStateData
// 0x0008 (0x0008 - 0x0000)
struct SHCreeperLocomotionAnimInstance_GetCreeperAnimInstanceStateData final
{
public:
	class USHCreeperAnimInstanceStateData*        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCreeperLocomotionAnimInstance_GetCreeperAnimInstanceStateData) == 0x000008, "Wrong alignment on SHCreeperLocomotionAnimInstance_GetCreeperAnimInstanceStateData");
static_assert(sizeof(SHCreeperLocomotionAnimInstance_GetCreeperAnimInstanceStateData) == 0x000008, "Wrong size on SHCreeperLocomotionAnimInstance_GetCreeperAnimInstanceStateData");
static_assert(offsetof(SHCreeperLocomotionAnimInstance_GetCreeperAnimInstanceStateData, ReturnValue) == 0x000000, "Member 'SHCreeperLocomotionAnimInstance_GetCreeperAnimInstanceStateData::ReturnValue' has a wrong offset!");

// Function SHProto.SHWestCityFWMariaRedirectionsCommentsEndingFactor.SHDebug_Character_Endings_WestCityFWMariaRedirectionsCommentsEndingFactor_SetDebugValue
// 0x0004 (0x0004 - 0x0000)
struct SHWestCityFWMariaRedirectionsCommentsEndingFactor_SHDebug_Character_Endings_WestCityFWMariaRedirectionsCommentsEndingFactor_SetDebugValue final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHWestCityFWMariaRedirectionsCommentsEndingFactor_SHDebug_Character_Endings_WestCityFWMariaRedirectionsCommentsEndingFactor_SetDebugValue) == 0x000004, "Wrong alignment on SHWestCityFWMariaRedirectionsCommentsEndingFactor_SHDebug_Character_Endings_WestCityFWMariaRedirectionsCommentsEndingFactor_SetDebugValue");
static_assert(sizeof(SHWestCityFWMariaRedirectionsCommentsEndingFactor_SHDebug_Character_Endings_WestCityFWMariaRedirectionsCommentsEndingFactor_SetDebugValue) == 0x000004, "Wrong size on SHWestCityFWMariaRedirectionsCommentsEndingFactor_SHDebug_Character_Endings_WestCityFWMariaRedirectionsCommentsEndingFactor_SetDebugValue");
static_assert(offsetof(SHWestCityFWMariaRedirectionsCommentsEndingFactor_SHDebug_Character_Endings_WestCityFWMariaRedirectionsCommentsEndingFactor_SetDebugValue, InValue) == 0x000000, "Member 'SHWestCityFWMariaRedirectionsCommentsEndingFactor_SHDebug_Character_Endings_WestCityFWMariaRedirectionsCommentsEndingFactor_SetDebugValue::InValue' has a wrong offset!");

// Function SHProto.SHReceiveDamageCmbSubcomp.OnReceiveDamageEnd
// 0x0010 (0x0010 - 0x0000)
struct SHReceiveDamageCmbSubcomp_OnReceiveDamageEnd final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHAnimEndType                                AnimEndType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHReceiveDamageCmbSubcomp_OnReceiveDamageEnd) == 0x000008, "Wrong alignment on SHReceiveDamageCmbSubcomp_OnReceiveDamageEnd");
static_assert(sizeof(SHReceiveDamageCmbSubcomp_OnReceiveDamageEnd) == 0x000010, "Wrong size on SHReceiveDamageCmbSubcomp_OnReceiveDamageEnd");
static_assert(offsetof(SHReceiveDamageCmbSubcomp_OnReceiveDamageEnd, Montage) == 0x000000, "Member 'SHReceiveDamageCmbSubcomp_OnReceiveDamageEnd::Montage' has a wrong offset!");
static_assert(offsetof(SHReceiveDamageCmbSubcomp_OnReceiveDamageEnd, AnimEndType) == 0x000008, "Member 'SHReceiveDamageCmbSubcomp_OnReceiveDamageEnd::AnimEndType' has a wrong offset!");

// Function SHProto.SHReceiveDamageCmbSubcomp.ReceiveDamage
// 0x0038 (0x0038 - 0x0000)
struct SHReceiveDamageCmbSubcomp_ReceiveDamage final
{
public:
	float                                         DamageValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitDirection;                                      // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                DamageType;                                        // 0x0028(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHReceiveDamageCmbSubcomp_ReceiveDamage) == 0x000008, "Wrong alignment on SHReceiveDamageCmbSubcomp_ReceiveDamage");
static_assert(sizeof(SHReceiveDamageCmbSubcomp_ReceiveDamage) == 0x000038, "Wrong size on SHReceiveDamageCmbSubcomp_ReceiveDamage");
static_assert(offsetof(SHReceiveDamageCmbSubcomp_ReceiveDamage, DamageValue) == 0x000000, "Member 'SHReceiveDamageCmbSubcomp_ReceiveDamage::DamageValue' has a wrong offset!");
static_assert(offsetof(SHReceiveDamageCmbSubcomp_ReceiveDamage, Object) == 0x000008, "Member 'SHReceiveDamageCmbSubcomp_ReceiveDamage::Object' has a wrong offset!");
static_assert(offsetof(SHReceiveDamageCmbSubcomp_ReceiveDamage, HitDirection) == 0x000010, "Member 'SHReceiveDamageCmbSubcomp_ReceiveDamage::HitDirection' has a wrong offset!");
static_assert(offsetof(SHReceiveDamageCmbSubcomp_ReceiveDamage, DamageType) == 0x000028, "Member 'SHReceiveDamageCmbSubcomp_ReceiveDamage::DamageType' has a wrong offset!");
static_assert(offsetof(SHReceiveDamageCmbSubcomp_ReceiveDamage, ReturnValue) == 0x000030, "Member 'SHReceiveDamageCmbSubcomp_ReceiveDamage::ReturnValue' has a wrong offset!");

// Function SHProto.SHReceiveDamageCmbSubcomp.SetReceiveContinuousDamageBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHReceiveDamageCmbSubcomp_SetReceiveContinuousDamageBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHReceiveDamageCmbSubcomp_SetReceiveContinuousDamageBlocked) == 0x000008, "Wrong alignment on SHReceiveDamageCmbSubcomp_SetReceiveContinuousDamageBlocked");
static_assert(sizeof(SHReceiveDamageCmbSubcomp_SetReceiveContinuousDamageBlocked) == 0x000010, "Wrong size on SHReceiveDamageCmbSubcomp_SetReceiveContinuousDamageBlocked");
static_assert(offsetof(SHReceiveDamageCmbSubcomp_SetReceiveContinuousDamageBlocked, Blocked) == 0x000000, "Member 'SHReceiveDamageCmbSubcomp_SetReceiveContinuousDamageBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHReceiveDamageCmbSubcomp_SetReceiveContinuousDamageBlocked, Object) == 0x000008, "Member 'SHReceiveDamageCmbSubcomp_SetReceiveContinuousDamageBlocked::Object' has a wrong offset!");

// Function SHProto.SHReceiveDamageCmbSubcomp.SetReceiveSoftDamageBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHReceiveDamageCmbSubcomp_SetReceiveSoftDamageBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHReceiveDamageCmbSubcomp_SetReceiveSoftDamageBlocked) == 0x000008, "Wrong alignment on SHReceiveDamageCmbSubcomp_SetReceiveSoftDamageBlocked");
static_assert(sizeof(SHReceiveDamageCmbSubcomp_SetReceiveSoftDamageBlocked) == 0x000010, "Wrong size on SHReceiveDamageCmbSubcomp_SetReceiveSoftDamageBlocked");
static_assert(offsetof(SHReceiveDamageCmbSubcomp_SetReceiveSoftDamageBlocked, Blocked) == 0x000000, "Member 'SHReceiveDamageCmbSubcomp_SetReceiveSoftDamageBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHReceiveDamageCmbSubcomp_SetReceiveSoftDamageBlocked, Object) == 0x000008, "Member 'SHReceiveDamageCmbSubcomp_SetReceiveSoftDamageBlocked::Object' has a wrong offset!");

// Function SHProto.SHReceiveDamageCmbSubcomp.SetReceiveStunDamageBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHReceiveDamageCmbSubcomp_SetReceiveStunDamageBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHReceiveDamageCmbSubcomp_SetReceiveStunDamageBlocked) == 0x000008, "Wrong alignment on SHReceiveDamageCmbSubcomp_SetReceiveStunDamageBlocked");
static_assert(sizeof(SHReceiveDamageCmbSubcomp_SetReceiveStunDamageBlocked) == 0x000010, "Wrong size on SHReceiveDamageCmbSubcomp_SetReceiveStunDamageBlocked");
static_assert(offsetof(SHReceiveDamageCmbSubcomp_SetReceiveStunDamageBlocked, Blocked) == 0x000000, "Member 'SHReceiveDamageCmbSubcomp_SetReceiveStunDamageBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHReceiveDamageCmbSubcomp_SetReceiveStunDamageBlocked, Object) == 0x000008, "Member 'SHReceiveDamageCmbSubcomp_SetReceiveStunDamageBlocked::Object' has a wrong offset!");

// Function SHProto.SHReceiveDamageCmbSubcomp.SynchroReceiveDamage
// 0x00C0 (0x00C0 - 0x0000)
struct SHReceiveDamageCmbSubcomp_SynchroReceiveDamage final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayAnimationData                     AnimData;                                          // 0x0008(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHReceiveDamageCmbSubcomp_SynchroReceiveDamage) == 0x000008, "Wrong alignment on SHReceiveDamageCmbSubcomp_SynchroReceiveDamage");
static_assert(sizeof(SHReceiveDamageCmbSubcomp_SynchroReceiveDamage) == 0x0000C0, "Wrong size on SHReceiveDamageCmbSubcomp_SynchroReceiveDamage");
static_assert(offsetof(SHReceiveDamageCmbSubcomp_SynchroReceiveDamage, Object) == 0x000000, "Member 'SHReceiveDamageCmbSubcomp_SynchroReceiveDamage::Object' has a wrong offset!");
static_assert(offsetof(SHReceiveDamageCmbSubcomp_SynchroReceiveDamage, AnimData) == 0x000008, "Member 'SHReceiveDamageCmbSubcomp_SynchroReceiveDamage::AnimData' has a wrong offset!");
static_assert(offsetof(SHReceiveDamageCmbSubcomp_SynchroReceiveDamage, ReturnValue) == 0x0000B8, "Member 'SHReceiveDamageCmbSubcomp_SynchroReceiveDamage::ReturnValue' has a wrong offset!");

// Function SHProto.SHReceiveDamageCmbSubcomp.IsReceiveContinuousDamageBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHReceiveDamageCmbSubcomp_IsReceiveContinuousDamageBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHReceiveDamageCmbSubcomp_IsReceiveContinuousDamageBlocked) == 0x000001, "Wrong alignment on SHReceiveDamageCmbSubcomp_IsReceiveContinuousDamageBlocked");
static_assert(sizeof(SHReceiveDamageCmbSubcomp_IsReceiveContinuousDamageBlocked) == 0x000001, "Wrong size on SHReceiveDamageCmbSubcomp_IsReceiveContinuousDamageBlocked");
static_assert(offsetof(SHReceiveDamageCmbSubcomp_IsReceiveContinuousDamageBlocked, ReturnValue) == 0x000000, "Member 'SHReceiveDamageCmbSubcomp_IsReceiveContinuousDamageBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHReceiveDamageCmbSubcomp.IsReceiveSoftDamageBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHReceiveDamageCmbSubcomp_IsReceiveSoftDamageBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHReceiveDamageCmbSubcomp_IsReceiveSoftDamageBlocked) == 0x000001, "Wrong alignment on SHReceiveDamageCmbSubcomp_IsReceiveSoftDamageBlocked");
static_assert(sizeof(SHReceiveDamageCmbSubcomp_IsReceiveSoftDamageBlocked) == 0x000001, "Wrong size on SHReceiveDamageCmbSubcomp_IsReceiveSoftDamageBlocked");
static_assert(offsetof(SHReceiveDamageCmbSubcomp_IsReceiveSoftDamageBlocked, ReturnValue) == 0x000000, "Member 'SHReceiveDamageCmbSubcomp_IsReceiveSoftDamageBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHReceiveDamageCmbSubcomp.IsReceiveStunDamageBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHReceiveDamageCmbSubcomp_IsReceiveStunDamageBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHReceiveDamageCmbSubcomp_IsReceiveStunDamageBlocked) == 0x000001, "Wrong alignment on SHReceiveDamageCmbSubcomp_IsReceiveStunDamageBlocked");
static_assert(sizeof(SHReceiveDamageCmbSubcomp_IsReceiveStunDamageBlocked) == 0x000001, "Wrong size on SHReceiveDamageCmbSubcomp_IsReceiveStunDamageBlocked");
static_assert(offsetof(SHReceiveDamageCmbSubcomp_IsReceiveStunDamageBlocked, ReturnValue) == 0x000000, "Member 'SHReceiveDamageCmbSubcomp_IsReceiveStunDamageBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionAnimInstance.OnIdleCustomStateUpdate
// 0x0020 (0x0020 - 0x0000)
struct SHLocomotionAnimInstance_OnIdleCustomStateUpdate final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionAnimInstance_OnIdleCustomStateUpdate) == 0x000008, "Wrong alignment on SHLocomotionAnimInstance_OnIdleCustomStateUpdate");
static_assert(sizeof(SHLocomotionAnimInstance_OnIdleCustomStateUpdate) == 0x000020, "Wrong size on SHLocomotionAnimInstance_OnIdleCustomStateUpdate");
static_assert(offsetof(SHLocomotionAnimInstance_OnIdleCustomStateUpdate, Context) == 0x000000, "Member 'SHLocomotionAnimInstance_OnIdleCustomStateUpdate::Context' has a wrong offset!");
static_assert(offsetof(SHLocomotionAnimInstance_OnIdleCustomStateUpdate, Node) == 0x000010, "Member 'SHLocomotionAnimInstance_OnIdleCustomStateUpdate::Node' has a wrong offset!");

// Function SHProto.SHLocomotionAnimInstance.OnIdleLoopStateUpdate
// 0x0020 (0x0020 - 0x0000)
struct SHLocomotionAnimInstance_OnIdleLoopStateUpdate final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionAnimInstance_OnIdleLoopStateUpdate) == 0x000008, "Wrong alignment on SHLocomotionAnimInstance_OnIdleLoopStateUpdate");
static_assert(sizeof(SHLocomotionAnimInstance_OnIdleLoopStateUpdate) == 0x000020, "Wrong size on SHLocomotionAnimInstance_OnIdleLoopStateUpdate");
static_assert(offsetof(SHLocomotionAnimInstance_OnIdleLoopStateUpdate, Context) == 0x000000, "Member 'SHLocomotionAnimInstance_OnIdleLoopStateUpdate::Context' has a wrong offset!");
static_assert(offsetof(SHLocomotionAnimInstance_OnIdleLoopStateUpdate, Node) == 0x000010, "Member 'SHLocomotionAnimInstance_OnIdleLoopStateUpdate::Node' has a wrong offset!");

// Function SHProto.SHLocomotionAnimInstance.OnMoveStateUpdate
// 0x0020 (0x0020 - 0x0000)
struct SHLocomotionAnimInstance_OnMoveStateUpdate final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionAnimInstance_OnMoveStateUpdate) == 0x000008, "Wrong alignment on SHLocomotionAnimInstance_OnMoveStateUpdate");
static_assert(sizeof(SHLocomotionAnimInstance_OnMoveStateUpdate) == 0x000020, "Wrong size on SHLocomotionAnimInstance_OnMoveStateUpdate");
static_assert(offsetof(SHLocomotionAnimInstance_OnMoveStateUpdate, Context) == 0x000000, "Member 'SHLocomotionAnimInstance_OnMoveStateUpdate::Context' has a wrong offset!");
static_assert(offsetof(SHLocomotionAnimInstance_OnMoveStateUpdate, Node) == 0x000010, "Member 'SHLocomotionAnimInstance_OnMoveStateUpdate::Node' has a wrong offset!");

// Function SHProto.SHLocomotionAnimInstance.SetForcedCloseToWallState
// 0x0010 (0x0010 - 0x0000)
struct SHLocomotionAnimInstance_SetForcedCloseToWallState final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                RequestOwner;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionAnimInstance_SetForcedCloseToWallState) == 0x000008, "Wrong alignment on SHLocomotionAnimInstance_SetForcedCloseToWallState");
static_assert(sizeof(SHLocomotionAnimInstance_SetForcedCloseToWallState) == 0x000010, "Wrong size on SHLocomotionAnimInstance_SetForcedCloseToWallState");
static_assert(offsetof(SHLocomotionAnimInstance_SetForcedCloseToWallState, Enabled) == 0x000000, "Member 'SHLocomotionAnimInstance_SetForcedCloseToWallState::Enabled' has a wrong offset!");
static_assert(offsetof(SHLocomotionAnimInstance_SetForcedCloseToWallState, RequestOwner) == 0x000008, "Member 'SHLocomotionAnimInstance_SetForcedCloseToWallState::RequestOwner' has a wrong offset!");

// Function SHProto.SHLocomotionAnimInstance.GetControlRotationYawDelta
// 0x0004 (0x0004 - 0x0000)
struct SHLocomotionAnimInstance_GetControlRotationYawDelta final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionAnimInstance_GetControlRotationYawDelta) == 0x000004, "Wrong alignment on SHLocomotionAnimInstance_GetControlRotationYawDelta");
static_assert(sizeof(SHLocomotionAnimInstance_GetControlRotationYawDelta) == 0x000004, "Wrong size on SHLocomotionAnimInstance_GetControlRotationYawDelta");
static_assert(offsetof(SHLocomotionAnimInstance_GetControlRotationYawDelta, ReturnValue) == 0x000000, "Member 'SHLocomotionAnimInstance_GetControlRotationYawDelta::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionAnimInstance.GetCurrentMovementProfile
// 0x0001 (0x0001 - 0x0000)
struct SHLocomotionAnimInstance_GetCurrentMovementProfile final
{
public:
	ESHMovementProfile                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionAnimInstance_GetCurrentMovementProfile) == 0x000001, "Wrong alignment on SHLocomotionAnimInstance_GetCurrentMovementProfile");
static_assert(sizeof(SHLocomotionAnimInstance_GetCurrentMovementProfile) == 0x000001, "Wrong size on SHLocomotionAnimInstance_GetCurrentMovementProfile");
static_assert(offsetof(SHLocomotionAnimInstance_GetCurrentMovementProfile, ReturnValue) == 0x000000, "Member 'SHLocomotionAnimInstance_GetCurrentMovementProfile::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionAnimInstance.GetEquippedWeapon
// 0x0008 (0x0008 - 0x0000)
struct SHLocomotionAnimInstance_GetEquippedWeapon final
{
public:
	class ASHItemWeapon*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionAnimInstance_GetEquippedWeapon) == 0x000008, "Wrong alignment on SHLocomotionAnimInstance_GetEquippedWeapon");
static_assert(sizeof(SHLocomotionAnimInstance_GetEquippedWeapon) == 0x000008, "Wrong size on SHLocomotionAnimInstance_GetEquippedWeapon");
static_assert(offsetof(SHLocomotionAnimInstance_GetEquippedWeapon, ReturnValue) == 0x000000, "Member 'SHLocomotionAnimInstance_GetEquippedWeapon::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionAnimInstance.GetForcedCloseToWallState
// 0x0001 (0x0001 - 0x0000)
struct SHLocomotionAnimInstance_GetForcedCloseToWallState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionAnimInstance_GetForcedCloseToWallState) == 0x000001, "Wrong alignment on SHLocomotionAnimInstance_GetForcedCloseToWallState");
static_assert(sizeof(SHLocomotionAnimInstance_GetForcedCloseToWallState) == 0x000001, "Wrong size on SHLocomotionAnimInstance_GetForcedCloseToWallState");
static_assert(offsetof(SHLocomotionAnimInstance_GetForcedCloseToWallState, ReturnValue) == 0x000000, "Member 'SHLocomotionAnimInstance_GetForcedCloseToWallState::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionAnimInstance.GetHealthState
// 0x0001 (0x0001 - 0x0000)
struct SHLocomotionAnimInstance_GetHealthState final
{
public:
	ESHHealthStateEnum                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionAnimInstance_GetHealthState) == 0x000001, "Wrong alignment on SHLocomotionAnimInstance_GetHealthState");
static_assert(sizeof(SHLocomotionAnimInstance_GetHealthState) == 0x000001, "Wrong size on SHLocomotionAnimInstance_GetHealthState");
static_assert(offsetof(SHLocomotionAnimInstance_GetHealthState, ReturnValue) == 0x000000, "Member 'SHLocomotionAnimInstance_GetHealthState::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionAnimInstance.GetInteriorExteriorState
// 0x0001 (0x0001 - 0x0000)
struct SHLocomotionAnimInstance_GetInteriorExteriorState final
{
public:
	ESHInteriorExteriorStateEnum                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionAnimInstance_GetInteriorExteriorState) == 0x000001, "Wrong alignment on SHLocomotionAnimInstance_GetInteriorExteriorState");
static_assert(sizeof(SHLocomotionAnimInstance_GetInteriorExteriorState) == 0x000001, "Wrong size on SHLocomotionAnimInstance_GetInteriorExteriorState");
static_assert(offsetof(SHLocomotionAnimInstance_GetInteriorExteriorState, ReturnValue) == 0x000000, "Member 'SHLocomotionAnimInstance_GetInteriorExteriorState::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionAnimInstance.GetMoveDirection
// 0x0004 (0x0004 - 0x0000)
struct SHLocomotionAnimInstance_GetMoveDirection final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionAnimInstance_GetMoveDirection) == 0x000004, "Wrong alignment on SHLocomotionAnimInstance_GetMoveDirection");
static_assert(sizeof(SHLocomotionAnimInstance_GetMoveDirection) == 0x000004, "Wrong size on SHLocomotionAnimInstance_GetMoveDirection");
static_assert(offsetof(SHLocomotionAnimInstance_GetMoveDirection, ReturnValue) == 0x000000, "Member 'SHLocomotionAnimInstance_GetMoveDirection::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionAnimInstance.GetQuantizedMoveDirection
// 0x0004 (0x0004 - 0x0000)
struct SHLocomotionAnimInstance_GetQuantizedMoveDirection final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionAnimInstance_GetQuantizedMoveDirection) == 0x000004, "Wrong alignment on SHLocomotionAnimInstance_GetQuantizedMoveDirection");
static_assert(sizeof(SHLocomotionAnimInstance_GetQuantizedMoveDirection) == 0x000004, "Wrong size on SHLocomotionAnimInstance_GetQuantizedMoveDirection");
static_assert(offsetof(SHLocomotionAnimInstance_GetQuantizedMoveDirection, ReturnValue) == 0x000000, "Member 'SHLocomotionAnimInstance_GetQuantizedMoveDirection::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionAnimInstance.HasMovementInput
// 0x0001 (0x0001 - 0x0000)
struct SHLocomotionAnimInstance_HasMovementInput final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionAnimInstance_HasMovementInput) == 0x000001, "Wrong alignment on SHLocomotionAnimInstance_HasMovementInput");
static_assert(sizeof(SHLocomotionAnimInstance_HasMovementInput) == 0x000001, "Wrong size on SHLocomotionAnimInstance_HasMovementInput");
static_assert(offsetof(SHLocomotionAnimInstance_HasMovementInput, ReturnValue) == 0x000000, "Member 'SHLocomotionAnimInstance_HasMovementInput::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionAnimInstance.HasValidLookAtTarget
// 0x0001 (0x0001 - 0x0000)
struct SHLocomotionAnimInstance_HasValidLookAtTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionAnimInstance_HasValidLookAtTarget) == 0x000001, "Wrong alignment on SHLocomotionAnimInstance_HasValidLookAtTarget");
static_assert(sizeof(SHLocomotionAnimInstance_HasValidLookAtTarget) == 0x000001, "Wrong size on SHLocomotionAnimInstance_HasValidLookAtTarget");
static_assert(offsetof(SHLocomotionAnimInstance_HasValidLookAtTarget, ReturnValue) == 0x000000, "Member 'SHLocomotionAnimInstance_HasValidLookAtTarget::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionAnimInstance.IsCloseToEnemy
// 0x0001 (0x0001 - 0x0000)
struct SHLocomotionAnimInstance_IsCloseToEnemy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionAnimInstance_IsCloseToEnemy) == 0x000001, "Wrong alignment on SHLocomotionAnimInstance_IsCloseToEnemy");
static_assert(sizeof(SHLocomotionAnimInstance_IsCloseToEnemy) == 0x000001, "Wrong size on SHLocomotionAnimInstance_IsCloseToEnemy");
static_assert(offsetof(SHLocomotionAnimInstance_IsCloseToEnemy, ReturnValue) == 0x000000, "Member 'SHLocomotionAnimInstance_IsCloseToEnemy::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionAnimInstance.IsCloseToWall
// 0x0001 (0x0001 - 0x0000)
struct SHLocomotionAnimInstance_IsCloseToWall final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionAnimInstance_IsCloseToWall) == 0x000001, "Wrong alignment on SHLocomotionAnimInstance_IsCloseToWall");
static_assert(sizeof(SHLocomotionAnimInstance_IsCloseToWall) == 0x000001, "Wrong size on SHLocomotionAnimInstance_IsCloseToWall");
static_assert(offsetof(SHLocomotionAnimInstance_IsCloseToWall, ReturnValue) == 0x000000, "Member 'SHLocomotionAnimInstance_IsCloseToWall::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionAnimInstance.IsInDangerMode
// 0x0001 (0x0001 - 0x0000)
struct SHLocomotionAnimInstance_IsInDangerMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionAnimInstance_IsInDangerMode) == 0x000001, "Wrong alignment on SHLocomotionAnimInstance_IsInDangerMode");
static_assert(sizeof(SHLocomotionAnimInstance_IsInDangerMode) == 0x000001, "Wrong size on SHLocomotionAnimInstance_IsInDangerMode");
static_assert(offsetof(SHLocomotionAnimInstance_IsInDangerMode, ReturnValue) == 0x000000, "Member 'SHLocomotionAnimInstance_IsInDangerMode::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionAnimInstance.IsInWater
// 0x0001 (0x0001 - 0x0000)
struct SHLocomotionAnimInstance_IsInWater final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionAnimInstance_IsInWater) == 0x000001, "Wrong alignment on SHLocomotionAnimInstance_IsInWater");
static_assert(sizeof(SHLocomotionAnimInstance_IsInWater) == 0x000001, "Wrong size on SHLocomotionAnimInstance_IsInWater");
static_assert(offsetof(SHLocomotionAnimInstance_IsInWater, ReturnValue) == 0x000000, "Member 'SHLocomotionAnimInstance_IsInWater::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionAnimInstance.IsMoving
// 0x0001 (0x0001 - 0x0000)
struct SHLocomotionAnimInstance_IsMoving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionAnimInstance_IsMoving) == 0x000001, "Wrong alignment on SHLocomotionAnimInstance_IsMoving");
static_assert(sizeof(SHLocomotionAnimInstance_IsMoving) == 0x000001, "Wrong size on SHLocomotionAnimInstance_IsMoving");
static_assert(offsetof(SHLocomotionAnimInstance_IsMoving, ReturnValue) == 0x000000, "Member 'SHLocomotionAnimInstance_IsMoving::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionAnimInstance.IsObstacleDetected
// 0x0001 (0x0001 - 0x0000)
struct SHLocomotionAnimInstance_IsObstacleDetected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionAnimInstance_IsObstacleDetected) == 0x000001, "Wrong alignment on SHLocomotionAnimInstance_IsObstacleDetected");
static_assert(sizeof(SHLocomotionAnimInstance_IsObstacleDetected) == 0x000001, "Wrong size on SHLocomotionAnimInstance_IsObstacleDetected");
static_assert(offsetof(SHLocomotionAnimInstance_IsObstacleDetected, ReturnValue) == 0x000000, "Member 'SHLocomotionAnimInstance_IsObstacleDetected::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionAnimInstance.IsSprinting
// 0x0002 (0x0002 - 0x0000)
struct SHLocomotionAnimInstance_IsSprinting final
{
public:
	bool                                          OverrideIfInWater;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionAnimInstance_IsSprinting) == 0x000001, "Wrong alignment on SHLocomotionAnimInstance_IsSprinting");
static_assert(sizeof(SHLocomotionAnimInstance_IsSprinting) == 0x000002, "Wrong size on SHLocomotionAnimInstance_IsSprinting");
static_assert(offsetof(SHLocomotionAnimInstance_IsSprinting, OverrideIfInWater) == 0x000000, "Member 'SHLocomotionAnimInstance_IsSprinting::OverrideIfInWater' has a wrong offset!");
static_assert(offsetof(SHLocomotionAnimInstance_IsSprinting, ReturnValue) == 0x000001, "Member 'SHLocomotionAnimInstance_IsSprinting::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionAnimInstance.IsSprinting_WaterOverride
// 0x0001 (0x0001 - 0x0000)
struct SHLocomotionAnimInstance_IsSprinting_WaterOverride final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionAnimInstance_IsSprinting_WaterOverride) == 0x000001, "Wrong alignment on SHLocomotionAnimInstance_IsSprinting_WaterOverride");
static_assert(sizeof(SHLocomotionAnimInstance_IsSprinting_WaterOverride) == 0x000001, "Wrong size on SHLocomotionAnimInstance_IsSprinting_WaterOverride");
static_assert(offsetof(SHLocomotionAnimInstance_IsSprinting_WaterOverride, ReturnValue) == 0x000000, "Member 'SHLocomotionAnimInstance_IsSprinting_WaterOverride::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionAnimInstance.NotShouldMove
// 0x0001 (0x0001 - 0x0000)
struct SHLocomotionAnimInstance_NotShouldMove final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionAnimInstance_NotShouldMove) == 0x000001, "Wrong alignment on SHLocomotionAnimInstance_NotShouldMove");
static_assert(sizeof(SHLocomotionAnimInstance_NotShouldMove) == 0x000001, "Wrong size on SHLocomotionAnimInstance_NotShouldMove");
static_assert(offsetof(SHLocomotionAnimInstance_NotShouldMove, ReturnValue) == 0x000000, "Member 'SHLocomotionAnimInstance_NotShouldMove::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionAnimInstance.Rule_IdleCustomToIdleDefault
// 0x0001 (0x0001 - 0x0000)
struct SHLocomotionAnimInstance_Rule_IdleCustomToIdleDefault final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionAnimInstance_Rule_IdleCustomToIdleDefault) == 0x000001, "Wrong alignment on SHLocomotionAnimInstance_Rule_IdleCustomToIdleDefault");
static_assert(sizeof(SHLocomotionAnimInstance_Rule_IdleCustomToIdleDefault) == 0x000001, "Wrong size on SHLocomotionAnimInstance_Rule_IdleCustomToIdleDefault");
static_assert(offsetof(SHLocomotionAnimInstance_Rule_IdleCustomToIdleDefault, ReturnValue) == 0x000000, "Member 'SHLocomotionAnimInstance_Rule_IdleCustomToIdleDefault::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionAnimInstance.Rule_IdleDefaultToIdleCustom
// 0x0001 (0x0001 - 0x0000)
struct SHLocomotionAnimInstance_Rule_IdleDefaultToIdleCustom final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionAnimInstance_Rule_IdleDefaultToIdleCustom) == 0x000001, "Wrong alignment on SHLocomotionAnimInstance_Rule_IdleDefaultToIdleCustom");
static_assert(sizeof(SHLocomotionAnimInstance_Rule_IdleDefaultToIdleCustom) == 0x000001, "Wrong size on SHLocomotionAnimInstance_Rule_IdleDefaultToIdleCustom");
static_assert(offsetof(SHLocomotionAnimInstance_Rule_IdleDefaultToIdleCustom, ReturnValue) == 0x000000, "Member 'SHLocomotionAnimInstance_Rule_IdleDefaultToIdleCustom::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionAnimInstance.Rule_RunToWalk
// 0x0001 (0x0001 - 0x0000)
struct SHLocomotionAnimInstance_Rule_RunToWalk final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionAnimInstance_Rule_RunToWalk) == 0x000001, "Wrong alignment on SHLocomotionAnimInstance_Rule_RunToWalk");
static_assert(sizeof(SHLocomotionAnimInstance_Rule_RunToWalk) == 0x000001, "Wrong size on SHLocomotionAnimInstance_Rule_RunToWalk");
static_assert(offsetof(SHLocomotionAnimInstance_Rule_RunToWalk, ReturnValue) == 0x000000, "Member 'SHLocomotionAnimInstance_Rule_RunToWalk::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionAnimInstance.Rule_WalkToRun
// 0x0001 (0x0001 - 0x0000)
struct SHLocomotionAnimInstance_Rule_WalkToRun final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionAnimInstance_Rule_WalkToRun) == 0x000001, "Wrong alignment on SHLocomotionAnimInstance_Rule_WalkToRun");
static_assert(sizeof(SHLocomotionAnimInstance_Rule_WalkToRun) == 0x000001, "Wrong size on SHLocomotionAnimInstance_Rule_WalkToRun");
static_assert(offsetof(SHLocomotionAnimInstance_Rule_WalkToRun, ReturnValue) == 0x000000, "Member 'SHLocomotionAnimInstance_Rule_WalkToRun::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionAnimInstance.ShouldMove
// 0x0001 (0x0001 - 0x0000)
struct SHLocomotionAnimInstance_ShouldMove final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionAnimInstance_ShouldMove) == 0x000001, "Wrong alignment on SHLocomotionAnimInstance_ShouldMove");
static_assert(sizeof(SHLocomotionAnimInstance_ShouldMove) == 0x000001, "Wrong size on SHLocomotionAnimInstance_ShouldMove");
static_assert(offsetof(SHLocomotionAnimInstance_ShouldMove, ReturnValue) == 0x000000, "Member 'SHLocomotionAnimInstance_ShouldMove::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionAnimInstance.ShouldProcessRotateInPlace
// 0x0001 (0x0001 - 0x0000)
struct SHLocomotionAnimInstance_ShouldProcessRotateInPlace final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionAnimInstance_ShouldProcessRotateInPlace) == 0x000001, "Wrong alignment on SHLocomotionAnimInstance_ShouldProcessRotateInPlace");
static_assert(sizeof(SHLocomotionAnimInstance_ShouldProcessRotateInPlace) == 0x000001, "Wrong size on SHLocomotionAnimInstance_ShouldProcessRotateInPlace");
static_assert(offsetof(SHLocomotionAnimInstance_ShouldProcessRotateInPlace, ReturnValue) == 0x000000, "Member 'SHLocomotionAnimInstance_ShouldProcessRotateInPlace::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionAnimInstance.TryGetCurrentStateWeight
// 0x0028 (0x0028 - 0x0000)
struct SHLocomotionAnimInstance_TryGetCurrentStateWeight final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHLocomotionAnimInstance_TryGetCurrentStateWeight) == 0x000008, "Wrong alignment on SHLocomotionAnimInstance_TryGetCurrentStateWeight");
static_assert(sizeof(SHLocomotionAnimInstance_TryGetCurrentStateWeight) == 0x000028, "Wrong size on SHLocomotionAnimInstance_TryGetCurrentStateWeight");
static_assert(offsetof(SHLocomotionAnimInstance_TryGetCurrentStateWeight, Context) == 0x000000, "Member 'SHLocomotionAnimInstance_TryGetCurrentStateWeight::Context' has a wrong offset!");
static_assert(offsetof(SHLocomotionAnimInstance_TryGetCurrentStateWeight, Node) == 0x000010, "Member 'SHLocomotionAnimInstance_TryGetCurrentStateWeight::Node' has a wrong offset!");
static_assert(offsetof(SHLocomotionAnimInstance_TryGetCurrentStateWeight, ReturnValue) == 0x000020, "Member 'SHLocomotionAnimInstance_TryGetCurrentStateWeight::ReturnValue' has a wrong offset!");

// Function SHProto.SHCustomSaveStatics.CountUniqueSeenEndings
// 0x0010 (0x0010 - 0x0000)
struct SHCustomSaveStatics_CountUniqueSeenEndings final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCustomSaveStatics_CountUniqueSeenEndings) == 0x000008, "Wrong alignment on SHCustomSaveStatics_CountUniqueSeenEndings");
static_assert(sizeof(SHCustomSaveStatics_CountUniqueSeenEndings) == 0x000010, "Wrong size on SHCustomSaveStatics_CountUniqueSeenEndings");
static_assert(offsetof(SHCustomSaveStatics_CountUniqueSeenEndings, WorldContextObject) == 0x000000, "Member 'SHCustomSaveStatics_CountUniqueSeenEndings::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHCustomSaveStatics_CountUniqueSeenEndings, ReturnValue) == 0x000008, "Member 'SHCustomSaveStatics_CountUniqueSeenEndings::ReturnValue' has a wrong offset!");

// Function SHProto.SHCustomSaveStatics.FetchActorSavedPropertyBoolValue
// 0x0028 (0x0028 - 0x0000)
struct SHCustomSaveStatics_FetchActorSavedPropertyBoolValue final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  InActorGuid;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InPropertyName;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutFetchSuccess;                                   // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutFoundValue;                                     // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCustomSaveStatics_FetchActorSavedPropertyBoolValue) == 0x000008, "Wrong alignment on SHCustomSaveStatics_FetchActorSavedPropertyBoolValue");
static_assert(sizeof(SHCustomSaveStatics_FetchActorSavedPropertyBoolValue) == 0x000028, "Wrong size on SHCustomSaveStatics_FetchActorSavedPropertyBoolValue");
static_assert(offsetof(SHCustomSaveStatics_FetchActorSavedPropertyBoolValue, WorldContextObject) == 0x000000, "Member 'SHCustomSaveStatics_FetchActorSavedPropertyBoolValue::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHCustomSaveStatics_FetchActorSavedPropertyBoolValue, InActorGuid) == 0x000008, "Member 'SHCustomSaveStatics_FetchActorSavedPropertyBoolValue::InActorGuid' has a wrong offset!");
static_assert(offsetof(SHCustomSaveStatics_FetchActorSavedPropertyBoolValue, InPropertyName) == 0x000018, "Member 'SHCustomSaveStatics_FetchActorSavedPropertyBoolValue::InPropertyName' has a wrong offset!");
static_assert(offsetof(SHCustomSaveStatics_FetchActorSavedPropertyBoolValue, OutFetchSuccess) == 0x000020, "Member 'SHCustomSaveStatics_FetchActorSavedPropertyBoolValue::OutFetchSuccess' has a wrong offset!");
static_assert(offsetof(SHCustomSaveStatics_FetchActorSavedPropertyBoolValue, OutFoundValue) == 0x000021, "Member 'SHCustomSaveStatics_FetchActorSavedPropertyBoolValue::OutFoundValue' has a wrong offset!");

// Function SHProto.SHCustomSaveStatics.GetDeathCount
// 0x0010 (0x0010 - 0x0000)
struct SHCustomSaveStatics_GetDeathCount final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCustomSaveStatics_GetDeathCount) == 0x000008, "Wrong alignment on SHCustomSaveStatics_GetDeathCount");
static_assert(sizeof(SHCustomSaveStatics_GetDeathCount) == 0x000010, "Wrong size on SHCustomSaveStatics_GetDeathCount");
static_assert(offsetof(SHCustomSaveStatics_GetDeathCount, WorldContextObject) == 0x000000, "Member 'SHCustomSaveStatics_GetDeathCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHCustomSaveStatics_GetDeathCount, ReturnValue) == 0x000008, "Member 'SHCustomSaveStatics_GetDeathCount::ReturnValue' has a wrong offset!");

// Function SHProto.SHCustomSaveStatics.HasEverFinishedGame
// 0x0010 (0x0010 - 0x0000)
struct SHCustomSaveStatics_HasEverFinishedGame final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCustomSaveStatics_HasEverFinishedGame) == 0x000008, "Wrong alignment on SHCustomSaveStatics_HasEverFinishedGame");
static_assert(sizeof(SHCustomSaveStatics_HasEverFinishedGame) == 0x000010, "Wrong size on SHCustomSaveStatics_HasEverFinishedGame");
static_assert(offsetof(SHCustomSaveStatics_HasEverFinishedGame, WorldContextObject) == 0x000000, "Member 'SHCustomSaveStatics_HasEverFinishedGame::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHCustomSaveStatics_HasEverFinishedGame, ReturnValue) == 0x000008, "Member 'SHCustomSaveStatics_HasEverFinishedGame::ReturnValue' has a wrong offset!");

// Function SHProto.SHCustomSaveStatics.HasEverSeenLeaveEnding
// 0x0010 (0x0010 - 0x0000)
struct SHCustomSaveStatics_HasEverSeenLeaveEnding final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCustomSaveStatics_HasEverSeenLeaveEnding) == 0x000008, "Wrong alignment on SHCustomSaveStatics_HasEverSeenLeaveEnding");
static_assert(sizeof(SHCustomSaveStatics_HasEverSeenLeaveEnding) == 0x000010, "Wrong size on SHCustomSaveStatics_HasEverSeenLeaveEnding");
static_assert(offsetof(SHCustomSaveStatics_HasEverSeenLeaveEnding, WorldContextObject) == 0x000000, "Member 'SHCustomSaveStatics_HasEverSeenLeaveEnding::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHCustomSaveStatics_HasEverSeenLeaveEnding, ReturnValue) == 0x000008, "Member 'SHCustomSaveStatics_HasEverSeenLeaveEnding::ReturnValue' has a wrong offset!");

// Function SHProto.SHCustomSaveStatics.HasSeenBlissEnding
// 0x0010 (0x0010 - 0x0000)
struct SHCustomSaveStatics_HasSeenBlissEnding final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCustomSaveStatics_HasSeenBlissEnding) == 0x000008, "Wrong alignment on SHCustomSaveStatics_HasSeenBlissEnding");
static_assert(sizeof(SHCustomSaveStatics_HasSeenBlissEnding) == 0x000010, "Wrong size on SHCustomSaveStatics_HasSeenBlissEnding");
static_assert(offsetof(SHCustomSaveStatics_HasSeenBlissEnding, WorldContextObject) == 0x000000, "Member 'SHCustomSaveStatics_HasSeenBlissEnding::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHCustomSaveStatics_HasSeenBlissEnding, ReturnValue) == 0x000008, "Member 'SHCustomSaveStatics_HasSeenBlissEnding::ReturnValue' has a wrong offset!");

// Function SHProto.SHCustomSaveStatics.HasSeenInWaterEnding
// 0x0010 (0x0010 - 0x0000)
struct SHCustomSaveStatics_HasSeenInWaterEnding final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCustomSaveStatics_HasSeenInWaterEnding) == 0x000008, "Wrong alignment on SHCustomSaveStatics_HasSeenInWaterEnding");
static_assert(sizeof(SHCustomSaveStatics_HasSeenInWaterEnding) == 0x000010, "Wrong size on SHCustomSaveStatics_HasSeenInWaterEnding");
static_assert(offsetof(SHCustomSaveStatics_HasSeenInWaterEnding, WorldContextObject) == 0x000000, "Member 'SHCustomSaveStatics_HasSeenInWaterEnding::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHCustomSaveStatics_HasSeenInWaterEnding, ReturnValue) == 0x000008, "Member 'SHCustomSaveStatics_HasSeenInWaterEnding::ReturnValue' has a wrong offset!");

// Function SHProto.SHCustomSaveStatics.HasSeenMariaEnding
// 0x0010 (0x0010 - 0x0000)
struct SHCustomSaveStatics_HasSeenMariaEnding final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCustomSaveStatics_HasSeenMariaEnding) == 0x000008, "Wrong alignment on SHCustomSaveStatics_HasSeenMariaEnding");
static_assert(sizeof(SHCustomSaveStatics_HasSeenMariaEnding) == 0x000010, "Wrong size on SHCustomSaveStatics_HasSeenMariaEnding");
static_assert(offsetof(SHCustomSaveStatics_HasSeenMariaEnding, WorldContextObject) == 0x000000, "Member 'SHCustomSaveStatics_HasSeenMariaEnding::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHCustomSaveStatics_HasSeenMariaEnding, ReturnValue) == 0x000008, "Member 'SHCustomSaveStatics_HasSeenMariaEnding::ReturnValue' has a wrong offset!");

// Function SHProto.SHCustomSaveStatics.HasSeenRebirthEnding
// 0x0010 (0x0010 - 0x0000)
struct SHCustomSaveStatics_HasSeenRebirthEnding final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCustomSaveStatics_HasSeenRebirthEnding) == 0x000008, "Wrong alignment on SHCustomSaveStatics_HasSeenRebirthEnding");
static_assert(sizeof(SHCustomSaveStatics_HasSeenRebirthEnding) == 0x000010, "Wrong size on SHCustomSaveStatics_HasSeenRebirthEnding");
static_assert(offsetof(SHCustomSaveStatics_HasSeenRebirthEnding, WorldContextObject) == 0x000000, "Member 'SHCustomSaveStatics_HasSeenRebirthEnding::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHCustomSaveStatics_HasSeenRebirthEnding, ReturnValue) == 0x000008, "Member 'SHCustomSaveStatics_HasSeenRebirthEnding::ReturnValue' has a wrong offset!");

// Function SHProto.SHCustomSaveStatics.HasSeenStillnessEnding
// 0x0010 (0x0010 - 0x0000)
struct SHCustomSaveStatics_HasSeenStillnessEnding final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCustomSaveStatics_HasSeenStillnessEnding) == 0x000008, "Wrong alignment on SHCustomSaveStatics_HasSeenStillnessEnding");
static_assert(sizeof(SHCustomSaveStatics_HasSeenStillnessEnding) == 0x000010, "Wrong size on SHCustomSaveStatics_HasSeenStillnessEnding");
static_assert(offsetof(SHCustomSaveStatics_HasSeenStillnessEnding, WorldContextObject) == 0x000000, "Member 'SHCustomSaveStatics_HasSeenStillnessEnding::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHCustomSaveStatics_HasSeenStillnessEnding, ReturnValue) == 0x000008, "Member 'SHCustomSaveStatics_HasSeenStillnessEnding::ReturnValue' has a wrong offset!");

// Function SHProto.SHCustomSaveStatics.IsNewGamePlus
// 0x0010 (0x0010 - 0x0000)
struct SHCustomSaveStatics_IsNewGamePlus final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCustomSaveStatics_IsNewGamePlus) == 0x000008, "Wrong alignment on SHCustomSaveStatics_IsNewGamePlus");
static_assert(sizeof(SHCustomSaveStatics_IsNewGamePlus) == 0x000010, "Wrong size on SHCustomSaveStatics_IsNewGamePlus");
static_assert(offsetof(SHCustomSaveStatics_IsNewGamePlus, WorldContextObject) == 0x000000, "Member 'SHCustomSaveStatics_IsNewGamePlus::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHCustomSaveStatics_IsNewGamePlus, ReturnValue) == 0x000008, "Member 'SHCustomSaveStatics_IsNewGamePlus::ReturnValue' has a wrong offset!");

// Function SHProto.SHCustomSaveStatics.RegisterSeenEnding
// 0x0010 (0x0010 - 0x0000)
struct SHCustomSaveStatics_RegisterSeenEnding final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHEndingType                                 InEndingType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCustomSaveStatics_RegisterSeenEnding) == 0x000008, "Wrong alignment on SHCustomSaveStatics_RegisterSeenEnding");
static_assert(sizeof(SHCustomSaveStatics_RegisterSeenEnding) == 0x000010, "Wrong size on SHCustomSaveStatics_RegisterSeenEnding");
static_assert(offsetof(SHCustomSaveStatics_RegisterSeenEnding, WorldContextObject) == 0x000000, "Member 'SHCustomSaveStatics_RegisterSeenEnding::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHCustomSaveStatics_RegisterSeenEnding, InEndingType) == 0x000008, "Member 'SHCustomSaveStatics_RegisterSeenEnding::InEndingType' has a wrong offset!");

// Function SHProto.SHAnimComponent.CreateAnimActionExe
// 0x0018 (0x0018 - 0x0000)
struct SHAnimComponent_CreateAnimActionExe final
{
public:
	TSubclassOf<class USHAnimActionExecutiveBase> AnimActionExeClass;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                InContextObject;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHAnimComponent_CreateAnimActionExe) == 0x000008, "Wrong alignment on SHAnimComponent_CreateAnimActionExe");
static_assert(sizeof(SHAnimComponent_CreateAnimActionExe) == 0x000018, "Wrong size on SHAnimComponent_CreateAnimActionExe");
static_assert(offsetof(SHAnimComponent_CreateAnimActionExe, AnimActionExeClass) == 0x000000, "Member 'SHAnimComponent_CreateAnimActionExe::AnimActionExeClass' has a wrong offset!");
static_assert(offsetof(SHAnimComponent_CreateAnimActionExe, InContextObject) == 0x000008, "Member 'SHAnimComponent_CreateAnimActionExe::InContextObject' has a wrong offset!");
static_assert(offsetof(SHAnimComponent_CreateAnimActionExe, ReturnValue) == 0x000010, "Member 'SHAnimComponent_CreateAnimActionExe::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimComponent.LinkGameplayAnimInst
// 0x0010 (0x0010 - 0x0000)
struct SHAnimComponent_LinkGameplayAnimInst final
{
public:
	TSubclassOf<class UAnimInstance>              InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimInstance*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimComponent_LinkGameplayAnimInst) == 0x000008, "Wrong alignment on SHAnimComponent_LinkGameplayAnimInst");
static_assert(sizeof(SHAnimComponent_LinkGameplayAnimInst) == 0x000010, "Wrong size on SHAnimComponent_LinkGameplayAnimInst");
static_assert(offsetof(SHAnimComponent_LinkGameplayAnimInst, InClass) == 0x000000, "Member 'SHAnimComponent_LinkGameplayAnimInst::InClass' has a wrong offset!");
static_assert(offsetof(SHAnimComponent_LinkGameplayAnimInst, ReturnValue) == 0x000008, "Member 'SHAnimComponent_LinkGameplayAnimInst::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimComponent.SetAnimActionBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHAnimComponent_SetAnimActionBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimComponent_SetAnimActionBlocked) == 0x000008, "Wrong alignment on SHAnimComponent_SetAnimActionBlocked");
static_assert(sizeof(SHAnimComponent_SetAnimActionBlocked) == 0x000010, "Wrong size on SHAnimComponent_SetAnimActionBlocked");
static_assert(offsetof(SHAnimComponent_SetAnimActionBlocked, Blocked) == 0x000000, "Member 'SHAnimComponent_SetAnimActionBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHAnimComponent_SetAnimActionBlocked, Object) == 0x000008, "Member 'SHAnimComponent_SetAnimActionBlocked::Object' has a wrong offset!");

// Function SHProto.SHAnimComponent.FindSubcomponentByClass
// 0x0010 (0x0010 - 0x0000)
struct SHAnimComponent_FindSubcomponentByClass final
{
public:
	TSubclassOf<class USHAnimSubcomponentBase>    SubcomponentClass;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USHAnimSubcomponentBase*                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimComponent_FindSubcomponentByClass) == 0x000008, "Wrong alignment on SHAnimComponent_FindSubcomponentByClass");
static_assert(sizeof(SHAnimComponent_FindSubcomponentByClass) == 0x000010, "Wrong size on SHAnimComponent_FindSubcomponentByClass");
static_assert(offsetof(SHAnimComponent_FindSubcomponentByClass, SubcomponentClass) == 0x000000, "Member 'SHAnimComponent_FindSubcomponentByClass::SubcomponentClass' has a wrong offset!");
static_assert(offsetof(SHAnimComponent_FindSubcomponentByClass, ReturnValue) == 0x000008, "Member 'SHAnimComponent_FindSubcomponentByClass::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimComponent.GetAnimActionExe
// 0x0008 (0x0008 - 0x0000)
struct SHAnimComponent_GetAnimActionExe final
{
public:
	class USHAnimActionExecutiveBase*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimComponent_GetAnimActionExe) == 0x000008, "Wrong alignment on SHAnimComponent_GetAnimActionExe");
static_assert(sizeof(SHAnimComponent_GetAnimActionExe) == 0x000008, "Wrong size on SHAnimComponent_GetAnimActionExe");
static_assert(offsetof(SHAnimComponent_GetAnimActionExe, ReturnValue) == 0x000000, "Member 'SHAnimComponent_GetAnimActionExe::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimComponent.GetBoneFromName
// 0x000C (0x000C - 0x0000)
struct SHAnimComponent_GetBoneFromName final
{
public:
	class FName                                   BoneType;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBones                                        ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHAnimComponent_GetBoneFromName) == 0x000004, "Wrong alignment on SHAnimComponent_GetBoneFromName");
static_assert(sizeof(SHAnimComponent_GetBoneFromName) == 0x00000C, "Wrong size on SHAnimComponent_GetBoneFromName");
static_assert(offsetof(SHAnimComponent_GetBoneFromName, BoneType) == 0x000000, "Member 'SHAnimComponent_GetBoneFromName::BoneType' has a wrong offset!");
static_assert(offsetof(SHAnimComponent_GetBoneFromName, ReturnValue) == 0x000008, "Member 'SHAnimComponent_GetBoneFromName::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimComponent.GetBoneLocation
// 0x0020 (0x0020 - 0x0000)
struct SHAnimComponent_GetBoneLocation final
{
public:
	EBones                                        BoneType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneSpaces                                   TransformSpace;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimComponent_GetBoneLocation) == 0x000008, "Wrong alignment on SHAnimComponent_GetBoneLocation");
static_assert(sizeof(SHAnimComponent_GetBoneLocation) == 0x000020, "Wrong size on SHAnimComponent_GetBoneLocation");
static_assert(offsetof(SHAnimComponent_GetBoneLocation, BoneType) == 0x000000, "Member 'SHAnimComponent_GetBoneLocation::BoneType' has a wrong offset!");
static_assert(offsetof(SHAnimComponent_GetBoneLocation, TransformSpace) == 0x000001, "Member 'SHAnimComponent_GetBoneLocation::TransformSpace' has a wrong offset!");
static_assert(offsetof(SHAnimComponent_GetBoneLocation, ReturnValue) == 0x000008, "Member 'SHAnimComponent_GetBoneLocation::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimComponent.GetBoneName
// 0x000C (0x000C - 0x0000)
struct SHAnimComponent_GetBoneName final
{
public:
	EBones                                        BoneType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimComponent_GetBoneName) == 0x000004, "Wrong alignment on SHAnimComponent_GetBoneName");
static_assert(sizeof(SHAnimComponent_GetBoneName) == 0x00000C, "Wrong size on SHAnimComponent_GetBoneName");
static_assert(offsetof(SHAnimComponent_GetBoneName, BoneType) == 0x000000, "Member 'SHAnimComponent_GetBoneName::BoneType' has a wrong offset!");
static_assert(offsetof(SHAnimComponent_GetBoneName, ReturnValue) == 0x000004, "Member 'SHAnimComponent_GetBoneName::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimComponent.GetBoneRootLocation
// 0x0018 (0x0018 - 0x0000)
struct SHAnimComponent_GetBoneRootLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimComponent_GetBoneRootLocation) == 0x000008, "Wrong alignment on SHAnimComponent_GetBoneRootLocation");
static_assert(sizeof(SHAnimComponent_GetBoneRootLocation) == 0x000018, "Wrong size on SHAnimComponent_GetBoneRootLocation");
static_assert(offsetof(SHAnimComponent_GetBoneRootLocation, ReturnValue) == 0x000000, "Member 'SHAnimComponent_GetBoneRootLocation::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimComponent.GetBoneRotation
// 0x0020 (0x0020 - 0x0000)
struct SHAnimComponent_GetBoneRotation final
{
public:
	EBones                                        BoneType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERelativeTransformSpace                       TransformSpace;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimComponent_GetBoneRotation) == 0x000008, "Wrong alignment on SHAnimComponent_GetBoneRotation");
static_assert(sizeof(SHAnimComponent_GetBoneRotation) == 0x000020, "Wrong size on SHAnimComponent_GetBoneRotation");
static_assert(offsetof(SHAnimComponent_GetBoneRotation, BoneType) == 0x000000, "Member 'SHAnimComponent_GetBoneRotation::BoneType' has a wrong offset!");
static_assert(offsetof(SHAnimComponent_GetBoneRotation, TransformSpace) == 0x000001, "Member 'SHAnimComponent_GetBoneRotation::TransformSpace' has a wrong offset!");
static_assert(offsetof(SHAnimComponent_GetBoneRotation, ReturnValue) == 0x000008, "Member 'SHAnimComponent_GetBoneRotation::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimComponent.GetBoneTransform
// 0x0070 (0x0070 - 0x0000)
struct SHAnimComponent_GetBoneTransform final
{
public:
	EBones                                        BoneType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERelativeTransformSpace                       Space;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0xE];                                        // 0x0002(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimComponent_GetBoneTransform) == 0x000010, "Wrong alignment on SHAnimComponent_GetBoneTransform");
static_assert(sizeof(SHAnimComponent_GetBoneTransform) == 0x000070, "Wrong size on SHAnimComponent_GetBoneTransform");
static_assert(offsetof(SHAnimComponent_GetBoneTransform, BoneType) == 0x000000, "Member 'SHAnimComponent_GetBoneTransform::BoneType' has a wrong offset!");
static_assert(offsetof(SHAnimComponent_GetBoneTransform, Space) == 0x000001, "Member 'SHAnimComponent_GetBoneTransform::Space' has a wrong offset!");
static_assert(offsetof(SHAnimComponent_GetBoneTransform, ReturnValue) == 0x000010, "Member 'SHAnimComponent_GetBoneTransform::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimComponent.GetCharacterBodyForward
// 0x0018 (0x0018 - 0x0000)
struct SHAnimComponent_GetCharacterBodyForward final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimComponent_GetCharacterBodyForward) == 0x000008, "Wrong alignment on SHAnimComponent_GetCharacterBodyForward");
static_assert(sizeof(SHAnimComponent_GetCharacterBodyForward) == 0x000018, "Wrong size on SHAnimComponent_GetCharacterBodyForward");
static_assert(offsetof(SHAnimComponent_GetCharacterBodyForward, ReturnValue) == 0x000000, "Member 'SHAnimComponent_GetCharacterBodyForward::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimComponent.GetCharacterBodyRotation
// 0x0018 (0x0018 - 0x0000)
struct SHAnimComponent_GetCharacterBodyRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimComponent_GetCharacterBodyRotation) == 0x000008, "Wrong alignment on SHAnimComponent_GetCharacterBodyRotation");
static_assert(sizeof(SHAnimComponent_GetCharacterBodyRotation) == 0x000018, "Wrong size on SHAnimComponent_GetCharacterBodyRotation");
static_assert(offsetof(SHAnimComponent_GetCharacterBodyRotation, ReturnValue) == 0x000000, "Member 'SHAnimComponent_GetCharacterBodyRotation::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimComponent.GetHipsForward
// 0x0018 (0x0018 - 0x0000)
struct SHAnimComponent_GetHipsForward final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimComponent_GetHipsForward) == 0x000008, "Wrong alignment on SHAnimComponent_GetHipsForward");
static_assert(sizeof(SHAnimComponent_GetHipsForward) == 0x000018, "Wrong size on SHAnimComponent_GetHipsForward");
static_assert(offsetof(SHAnimComponent_GetHipsForward, ReturnValue) == 0x000000, "Member 'SHAnimComponent_GetHipsForward::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimComponent.GetSkeletonSocketName
// 0x000C (0x000C - 0x0000)
struct SHAnimComponent_GetSkeletonSocketName final
{
public:
	ESkeletonSockets                              SocketType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimComponent_GetSkeletonSocketName) == 0x000004, "Wrong alignment on SHAnimComponent_GetSkeletonSocketName");
static_assert(sizeof(SHAnimComponent_GetSkeletonSocketName) == 0x00000C, "Wrong size on SHAnimComponent_GetSkeletonSocketName");
static_assert(offsetof(SHAnimComponent_GetSkeletonSocketName, SocketType) == 0x000000, "Member 'SHAnimComponent_GetSkeletonSocketName::SocketType' has a wrong offset!");
static_assert(offsetof(SHAnimComponent_GetSkeletonSocketName, ReturnValue) == 0x000004, "Member 'SHAnimComponent_GetSkeletonSocketName::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimComponent.IsAnimActionBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHAnimComponent_IsAnimActionBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimComponent_IsAnimActionBlocked) == 0x000001, "Wrong alignment on SHAnimComponent_IsAnimActionBlocked");
static_assert(sizeof(SHAnimComponent_IsAnimActionBlocked) == 0x000001, "Wrong size on SHAnimComponent_IsAnimActionBlocked");
static_assert(offsetof(SHAnimComponent_IsAnimActionBlocked, ReturnValue) == 0x000000, "Member 'SHAnimComponent_IsAnimActionBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimComponent.IsGameplayLinkedAnimInstSupported
// 0x0001 (0x0001 - 0x0000)
struct SHAnimComponent_IsGameplayLinkedAnimInstSupported final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimComponent_IsGameplayLinkedAnimInstSupported) == 0x000001, "Wrong alignment on SHAnimComponent_IsGameplayLinkedAnimInstSupported");
static_assert(sizeof(SHAnimComponent_IsGameplayLinkedAnimInstSupported) == 0x000001, "Wrong size on SHAnimComponent_IsGameplayLinkedAnimInstSupported");
static_assert(offsetof(SHAnimComponent_IsGameplayLinkedAnimInstSupported, ReturnValue) == 0x000000, "Member 'SHAnimComponent_IsGameplayLinkedAnimInstSupported::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimComponent.IsInitialized
// 0x0001 (0x0001 - 0x0000)
struct SHAnimComponent_IsInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimComponent_IsInitialized) == 0x000001, "Wrong alignment on SHAnimComponent_IsInitialized");
static_assert(sizeof(SHAnimComponent_IsInitialized) == 0x000001, "Wrong size on SHAnimComponent_IsInitialized");
static_assert(offsetof(SHAnimComponent_IsInitialized, ReturnValue) == 0x000000, "Member 'SHAnimComponent_IsInitialized::ReturnValue' has a wrong offset!");

// Function SHProto.SHDoor.ProcessDoorAlphaChanged
// 0x0008 (0x0008 - 0x0000)
struct SHDoor_ProcessDoorAlphaChanged final
{
public:
	class USHDoorMovementBaseComponent*           MovementComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoor_ProcessDoorAlphaChanged) == 0x000008, "Wrong alignment on SHDoor_ProcessDoorAlphaChanged");
static_assert(sizeof(SHDoor_ProcessDoorAlphaChanged) == 0x000008, "Wrong size on SHDoor_ProcessDoorAlphaChanged");
static_assert(offsetof(SHDoor_ProcessDoorAlphaChanged, MovementComponent) == 0x000000, "Member 'SHDoor_ProcessDoorAlphaChanged::MovementComponent' has a wrong offset!");

// Function SHProto.SHDoor.ProcessInteractionManagerInitialized
// 0x0008 (0x0008 - 0x0000)
struct SHDoor_ProcessInteractionManagerInitialized final
{
public:
	class USHInteractionManagerComponent*         Manager;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoor_ProcessInteractionManagerInitialized) == 0x000008, "Wrong alignment on SHDoor_ProcessInteractionManagerInitialized");
static_assert(sizeof(SHDoor_ProcessInteractionManagerInitialized) == 0x000008, "Wrong size on SHDoor_ProcessInteractionManagerInitialized");
static_assert(offsetof(SHDoor_ProcessInteractionManagerInitialized, Manager) == 0x000000, "Member 'SHDoor_ProcessInteractionManagerInitialized::Manager' has a wrong offset!");

// Function SHProto.SHTraversalLadder.OnTraversalFinished
// 0x0001 (0x0001 - 0x0000)
struct SHTraversalLadder_OnTraversalFinished final
{
public:
	ESHDetectionSide                              Side;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalLadder_OnTraversalFinished) == 0x000001, "Wrong alignment on SHTraversalLadder_OnTraversalFinished");
static_assert(sizeof(SHTraversalLadder_OnTraversalFinished) == 0x000001, "Wrong size on SHTraversalLadder_OnTraversalFinished");
static_assert(offsetof(SHTraversalLadder_OnTraversalFinished, Side) == 0x000000, "Member 'SHTraversalLadder_OnTraversalFinished::Side' has a wrong offset!");

// Function SHProto.SHTraversalLadder.OnTraversalStarted
// 0x0001 (0x0001 - 0x0000)
struct SHTraversalLadder_OnTraversalStarted final
{
public:
	ESHDetectionSide                              Side;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalLadder_OnTraversalStarted) == 0x000001, "Wrong alignment on SHTraversalLadder_OnTraversalStarted");
static_assert(sizeof(SHTraversalLadder_OnTraversalStarted) == 0x000001, "Wrong size on SHTraversalLadder_OnTraversalStarted");
static_assert(offsetof(SHTraversalLadder_OnTraversalStarted, Side) == 0x000000, "Member 'SHTraversalLadder_OnTraversalStarted::Side' has a wrong offset!");

// Function SHProto.SHTraversalLadder.ProcessInteract
// 0x0010 (0x0010 - 0x0000)
struct SHTraversalLadder_ProcessInteract final
{
public:
	class USHInteractionGenericComponent*         Generic;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHCharacterPlay*                       Character;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalLadder_ProcessInteract) == 0x000008, "Wrong alignment on SHTraversalLadder_ProcessInteract");
static_assert(sizeof(SHTraversalLadder_ProcessInteract) == 0x000010, "Wrong size on SHTraversalLadder_ProcessInteract");
static_assert(offsetof(SHTraversalLadder_ProcessInteract, Generic) == 0x000000, "Member 'SHTraversalLadder_ProcessInteract::Generic' has a wrong offset!");
static_assert(offsetof(SHTraversalLadder_ProcessInteract, Character) == 0x000008, "Member 'SHTraversalLadder_ProcessInteract::Character' has a wrong offset!");

// Function SHProto.SHTraversalLadder.ProcessInteractionManagerAboveInitialized
// 0x0008 (0x0008 - 0x0000)
struct SHTraversalLadder_ProcessInteractionManagerAboveInitialized final
{
public:
	class USHInteractionManagerComponent*         Manager;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalLadder_ProcessInteractionManagerAboveInitialized) == 0x000008, "Wrong alignment on SHTraversalLadder_ProcessInteractionManagerAboveInitialized");
static_assert(sizeof(SHTraversalLadder_ProcessInteractionManagerAboveInitialized) == 0x000008, "Wrong size on SHTraversalLadder_ProcessInteractionManagerAboveInitialized");
static_assert(offsetof(SHTraversalLadder_ProcessInteractionManagerAboveInitialized, Manager) == 0x000000, "Member 'SHTraversalLadder_ProcessInteractionManagerAboveInitialized::Manager' has a wrong offset!");

// Function SHProto.SHTraversalLadder.ProcessInteractionManagerBelowInitialized
// 0x0008 (0x0008 - 0x0000)
struct SHTraversalLadder_ProcessInteractionManagerBelowInitialized final
{
public:
	class USHInteractionManagerComponent*         Manager;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalLadder_ProcessInteractionManagerBelowInitialized) == 0x000008, "Wrong alignment on SHTraversalLadder_ProcessInteractionManagerBelowInitialized");
static_assert(sizeof(SHTraversalLadder_ProcessInteractionManagerBelowInitialized) == 0x000008, "Wrong size on SHTraversalLadder_ProcessInteractionManagerBelowInitialized");
static_assert(offsetof(SHTraversalLadder_ProcessInteractionManagerBelowInitialized, Manager) == 0x000000, "Member 'SHTraversalLadder_ProcessInteractionManagerBelowInitialized::Manager' has a wrong offset!");

// Function SHProto.SHTraversalLadder.ProcessLookAtRotationAbsoluteEnd
// 0x0001 (0x0001 - 0x0000)
struct SHTraversalLadder_ProcessLookAtRotationAbsoluteEnd final
{
public:
	bool                                          WasCompleted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalLadder_ProcessLookAtRotationAbsoluteEnd) == 0x000001, "Wrong alignment on SHTraversalLadder_ProcessLookAtRotationAbsoluteEnd");
static_assert(sizeof(SHTraversalLadder_ProcessLookAtRotationAbsoluteEnd) == 0x000001, "Wrong size on SHTraversalLadder_ProcessLookAtRotationAbsoluteEnd");
static_assert(offsetof(SHTraversalLadder_ProcessLookAtRotationAbsoluteEnd, WasCompleted) == 0x000000, "Member 'SHTraversalLadder_ProcessLookAtRotationAbsoluteEnd::WasCompleted' has a wrong offset!");

// Function SHProto.SHTraversalLadder.ProcessMovementSnapEnd
// 0x0001 (0x0001 - 0x0000)
struct SHTraversalLadder_ProcessMovementSnapEnd final
{
public:
	bool                                          WasCompleted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalLadder_ProcessMovementSnapEnd) == 0x000001, "Wrong alignment on SHTraversalLadder_ProcessMovementSnapEnd");
static_assert(sizeof(SHTraversalLadder_ProcessMovementSnapEnd) == 0x000001, "Wrong size on SHTraversalLadder_ProcessMovementSnapEnd");
static_assert(offsetof(SHTraversalLadder_ProcessMovementSnapEnd, WasCompleted) == 0x000000, "Member 'SHTraversalLadder_ProcessMovementSnapEnd::WasCompleted' has a wrong offset!");

// Function SHProto.SHTraversalLadder.ProcessSlideSnapEnd
// 0x0001 (0x0001 - 0x0000)
struct SHTraversalLadder_ProcessSlideSnapEnd final
{
public:
	bool                                          WasCompleted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalLadder_ProcessSlideSnapEnd) == 0x000001, "Wrong alignment on SHTraversalLadder_ProcessSlideSnapEnd");
static_assert(sizeof(SHTraversalLadder_ProcessSlideSnapEnd) == 0x000001, "Wrong size on SHTraversalLadder_ProcessSlideSnapEnd");
static_assert(offsetof(SHTraversalLadder_ProcessSlideSnapEnd, WasCompleted) == 0x000000, "Member 'SHTraversalLadder_ProcessSlideSnapEnd::WasCompleted' has a wrong offset!");

// DelegateFunction SHProto.SHTraversalLadder.SHLadderEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHTraversalLadder_SHLadderEvent__DelegateSignature final
{
public:
	class ASHTraversalLadder*                     LadderActorPtr;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalLadder_SHLadderEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHTraversalLadder_SHLadderEvent__DelegateSignature");
static_assert(sizeof(SHTraversalLadder_SHLadderEvent__DelegateSignature) == 0x000008, "Wrong size on SHTraversalLadder_SHLadderEvent__DelegateSignature");
static_assert(offsetof(SHTraversalLadder_SHLadderEvent__DelegateSignature, LadderActorPtr) == 0x000000, "Member 'SHTraversalLadder_SHLadderEvent__DelegateSignature::LadderActorPtr' has a wrong offset!");

// DelegateFunction SHProto.SHTraversalLadder.SHLadderTraversalEvent__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct SHTraversalLadder_SHLadderTraversalEvent__DelegateSignature final
{
public:
	class ASHTraversalLadder*                     LadderActorPtr;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHDetectionSide                              Side;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHTraversalLadder_SHLadderTraversalEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHTraversalLadder_SHLadderTraversalEvent__DelegateSignature");
static_assert(sizeof(SHTraversalLadder_SHLadderTraversalEvent__DelegateSignature) == 0x000010, "Wrong size on SHTraversalLadder_SHLadderTraversalEvent__DelegateSignature");
static_assert(offsetof(SHTraversalLadder_SHLadderTraversalEvent__DelegateSignature, LadderActorPtr) == 0x000000, "Member 'SHTraversalLadder_SHLadderTraversalEvent__DelegateSignature::LadderActorPtr' has a wrong offset!");
static_assert(offsetof(SHTraversalLadder_SHLadderTraversalEvent__DelegateSignature, Side) == 0x000008, "Member 'SHTraversalLadder_SHLadderTraversalEvent__DelegateSignature::Side' has a wrong offset!");

// Function SHProto.SHTraversalLadder.ComputeStepWorldTransformClosestTo
// 0x0080 (0x0080 - 0x0000)
struct SHTraversalLadder_ComputeStepWorldTransformClosestTo final
{
public:
	struct FVector                                InWorldLoc;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0020(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalLadder_ComputeStepWorldTransformClosestTo) == 0x000010, "Wrong alignment on SHTraversalLadder_ComputeStepWorldTransformClosestTo");
static_assert(sizeof(SHTraversalLadder_ComputeStepWorldTransformClosestTo) == 0x000080, "Wrong size on SHTraversalLadder_ComputeStepWorldTransformClosestTo");
static_assert(offsetof(SHTraversalLadder_ComputeStepWorldTransformClosestTo, InWorldLoc) == 0x000000, "Member 'SHTraversalLadder_ComputeStepWorldTransformClosestTo::InWorldLoc' has a wrong offset!");
static_assert(offsetof(SHTraversalLadder_ComputeStepWorldTransformClosestTo, ReturnValue) == 0x000020, "Member 'SHTraversalLadder_ComputeStepWorldTransformClosestTo::ReturnValue' has a wrong offset!");

// Function SHProto.SHLyingFigureLocomotionAnimInstance.GetLyingFigureAnimInstanceStateData
// 0x0008 (0x0008 - 0x0000)
struct SHLyingFigureLocomotionAnimInstance_GetLyingFigureAnimInstanceStateData final
{
public:
	class USHLyingFigureAnimInstanceStateData*    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLyingFigureLocomotionAnimInstance_GetLyingFigureAnimInstanceStateData) == 0x000008, "Wrong alignment on SHLyingFigureLocomotionAnimInstance_GetLyingFigureAnimInstanceStateData");
static_assert(sizeof(SHLyingFigureLocomotionAnimInstance_GetLyingFigureAnimInstanceStateData) == 0x000008, "Wrong size on SHLyingFigureLocomotionAnimInstance_GetLyingFigureAnimInstanceStateData");
static_assert(offsetof(SHLyingFigureLocomotionAnimInstance_GetLyingFigureAnimInstanceStateData, ReturnValue) == 0x000000, "Member 'SHLyingFigureLocomotionAnimInstance_GetLyingFigureAnimInstanceStateData::ReturnValue' has a wrong offset!");

// Function SHProto.SHLyingFigureCrawlingLocomotionAnimInstance.GetSmoothedDesiredRotationYaw
// 0x0004 (0x0004 - 0x0000)
struct SHLyingFigureCrawlingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw final
{
public:
	float                                         OutYaw;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLyingFigureCrawlingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw) == 0x000004, "Wrong alignment on SHLyingFigureCrawlingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw");
static_assert(sizeof(SHLyingFigureCrawlingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw) == 0x000004, "Wrong size on SHLyingFigureCrawlingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw");
static_assert(offsetof(SHLyingFigureCrawlingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw, OutYaw) == 0x000000, "Member 'SHLyingFigureCrawlingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw::OutYaw' has a wrong offset!");

// Function SHProto.SHLyingFigureCrawlingLocomotionAnimInstance.GetSmoothedDesiredVelocity
// 0x0018 (0x0018 - 0x0000)
struct SHLyingFigureCrawlingLocomotionAnimInstance_GetSmoothedDesiredVelocity final
{
public:
	struct FVector                                OutVelocity;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLyingFigureCrawlingLocomotionAnimInstance_GetSmoothedDesiredVelocity) == 0x000008, "Wrong alignment on SHLyingFigureCrawlingLocomotionAnimInstance_GetSmoothedDesiredVelocity");
static_assert(sizeof(SHLyingFigureCrawlingLocomotionAnimInstance_GetSmoothedDesiredVelocity) == 0x000018, "Wrong size on SHLyingFigureCrawlingLocomotionAnimInstance_GetSmoothedDesiredVelocity");
static_assert(offsetof(SHLyingFigureCrawlingLocomotionAnimInstance_GetSmoothedDesiredVelocity, OutVelocity) == 0x000000, "Member 'SHLyingFigureCrawlingLocomotionAnimInstance_GetSmoothedDesiredVelocity::OutVelocity' has a wrong offset!");

// Function SHProto.SHLyingFigureCrawlingLocomotionAnimInstance.GetSmoothedDesiredVelocitySizeAndYaw
// 0x0008 (0x0008 - 0x0000)
struct SHLyingFigureCrawlingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw final
{
public:
	float                                         OutVelocitySize;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVelocityYaw;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLyingFigureCrawlingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw) == 0x000004, "Wrong alignment on SHLyingFigureCrawlingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw");
static_assert(sizeof(SHLyingFigureCrawlingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw) == 0x000008, "Wrong size on SHLyingFigureCrawlingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw");
static_assert(offsetof(SHLyingFigureCrawlingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw, OutVelocitySize) == 0x000000, "Member 'SHLyingFigureCrawlingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw::OutVelocitySize' has a wrong offset!");
static_assert(offsetof(SHLyingFigureCrawlingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw, OutVelocityYaw) == 0x000004, "Member 'SHLyingFigureCrawlingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw::OutVelocityYaw' has a wrong offset!");

// Function SHProto.SHLyingFigureCrawlingLocomotionAnimInstance.GetTargetDesiredRotationYaw
// 0x0004 (0x0004 - 0x0000)
struct SHLyingFigureCrawlingLocomotionAnimInstance_GetTargetDesiredRotationYaw final
{
public:
	float                                         OutYaw;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLyingFigureCrawlingLocomotionAnimInstance_GetTargetDesiredRotationYaw) == 0x000004, "Wrong alignment on SHLyingFigureCrawlingLocomotionAnimInstance_GetTargetDesiredRotationYaw");
static_assert(sizeof(SHLyingFigureCrawlingLocomotionAnimInstance_GetTargetDesiredRotationYaw) == 0x000004, "Wrong size on SHLyingFigureCrawlingLocomotionAnimInstance_GetTargetDesiredRotationYaw");
static_assert(offsetof(SHLyingFigureCrawlingLocomotionAnimInstance_GetTargetDesiredRotationYaw, OutYaw) == 0x000000, "Member 'SHLyingFigureCrawlingLocomotionAnimInstance_GetTargetDesiredRotationYaw::OutYaw' has a wrong offset!");

// Function SHProto.SHLyingFigureCrawlingLocomotionAnimInstance.GetTargetDesiredVelocity
// 0x0018 (0x0018 - 0x0000)
struct SHLyingFigureCrawlingLocomotionAnimInstance_GetTargetDesiredVelocity final
{
public:
	struct FVector                                OutVelocity;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLyingFigureCrawlingLocomotionAnimInstance_GetTargetDesiredVelocity) == 0x000008, "Wrong alignment on SHLyingFigureCrawlingLocomotionAnimInstance_GetTargetDesiredVelocity");
static_assert(sizeof(SHLyingFigureCrawlingLocomotionAnimInstance_GetTargetDesiredVelocity) == 0x000018, "Wrong size on SHLyingFigureCrawlingLocomotionAnimInstance_GetTargetDesiredVelocity");
static_assert(offsetof(SHLyingFigureCrawlingLocomotionAnimInstance_GetTargetDesiredVelocity, OutVelocity) == 0x000000, "Member 'SHLyingFigureCrawlingLocomotionAnimInstance_GetTargetDesiredVelocity::OutVelocity' has a wrong offset!");

// Function SHProto.SHLyingFigureCrawlingLocomotionAnimInstance.GetTargetDesiredVelocitySizeAndYaw
// 0x0008 (0x0008 - 0x0000)
struct SHLyingFigureCrawlingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw final
{
public:
	float                                         OutVelocitySize;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVelocityYaw;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLyingFigureCrawlingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw) == 0x000004, "Wrong alignment on SHLyingFigureCrawlingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw");
static_assert(sizeof(SHLyingFigureCrawlingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw) == 0x000008, "Wrong size on SHLyingFigureCrawlingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw");
static_assert(offsetof(SHLyingFigureCrawlingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw, OutVelocitySize) == 0x000000, "Member 'SHLyingFigureCrawlingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw::OutVelocitySize' has a wrong offset!");
static_assert(offsetof(SHLyingFigureCrawlingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw, OutVelocityYaw) == 0x000004, "Member 'SHLyingFigureCrawlingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw::OutVelocityYaw' has a wrong offset!");

// Function SHProto.SHLyingFigureCrawlingLocomotionAnimInstance.GetTransformationToStandingAnimation
// 0x0068 (0x0068 - 0x0000)
struct SHLyingFigureCrawlingLocomotionAnimInstance_GetTransformationToStandingAnimation final
{
public:
	struct FRotator                               InLocalRotation;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      OutAnimation;                                      // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutPlayRate;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutBlendInDuration;                                // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutBlendOutDuration;                               // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               OutAnimationRotation;                              // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               OutRemainderRotation;                              // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          OutUsesDelayedRootRotation;                        // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHLyingFigureCrawlingLocomotionAnimInstance_GetTransformationToStandingAnimation) == 0x000008, "Wrong alignment on SHLyingFigureCrawlingLocomotionAnimInstance_GetTransformationToStandingAnimation");
static_assert(sizeof(SHLyingFigureCrawlingLocomotionAnimInstance_GetTransformationToStandingAnimation) == 0x000068, "Wrong size on SHLyingFigureCrawlingLocomotionAnimInstance_GetTransformationToStandingAnimation");
static_assert(offsetof(SHLyingFigureCrawlingLocomotionAnimInstance_GetTransformationToStandingAnimation, InLocalRotation) == 0x000000, "Member 'SHLyingFigureCrawlingLocomotionAnimInstance_GetTransformationToStandingAnimation::InLocalRotation' has a wrong offset!");
static_assert(offsetof(SHLyingFigureCrawlingLocomotionAnimInstance_GetTransformationToStandingAnimation, OutAnimation) == 0x000018, "Member 'SHLyingFigureCrawlingLocomotionAnimInstance_GetTransformationToStandingAnimation::OutAnimation' has a wrong offset!");
static_assert(offsetof(SHLyingFigureCrawlingLocomotionAnimInstance_GetTransformationToStandingAnimation, OutPlayRate) == 0x000020, "Member 'SHLyingFigureCrawlingLocomotionAnimInstance_GetTransformationToStandingAnimation::OutPlayRate' has a wrong offset!");
static_assert(offsetof(SHLyingFigureCrawlingLocomotionAnimInstance_GetTransformationToStandingAnimation, OutBlendInDuration) == 0x000024, "Member 'SHLyingFigureCrawlingLocomotionAnimInstance_GetTransformationToStandingAnimation::OutBlendInDuration' has a wrong offset!");
static_assert(offsetof(SHLyingFigureCrawlingLocomotionAnimInstance_GetTransformationToStandingAnimation, OutBlendOutDuration) == 0x000028, "Member 'SHLyingFigureCrawlingLocomotionAnimInstance_GetTransformationToStandingAnimation::OutBlendOutDuration' has a wrong offset!");
static_assert(offsetof(SHLyingFigureCrawlingLocomotionAnimInstance_GetTransformationToStandingAnimation, OutAnimationRotation) == 0x000030, "Member 'SHLyingFigureCrawlingLocomotionAnimInstance_GetTransformationToStandingAnimation::OutAnimationRotation' has a wrong offset!");
static_assert(offsetof(SHLyingFigureCrawlingLocomotionAnimInstance_GetTransformationToStandingAnimation, OutRemainderRotation) == 0x000048, "Member 'SHLyingFigureCrawlingLocomotionAnimInstance_GetTransformationToStandingAnimation::OutRemainderRotation' has a wrong offset!");
static_assert(offsetof(SHLyingFigureCrawlingLocomotionAnimInstance_GetTransformationToStandingAnimation, OutUsesDelayedRootRotation) == 0x000060, "Member 'SHLyingFigureCrawlingLocomotionAnimInstance_GetTransformationToStandingAnimation::OutUsesDelayedRootRotation' has a wrong offset!");

// Function SHProto.SHDefenceCmbSubcomp.HandleSyncedActionBegin
// 0x0008 (0x0008 - 0x0000)
struct SHDefenceCmbSubcomp_HandleSyncedActionBegin final
{
public:
	class ACharacter*                             CharacterSynchedWith;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDefenceCmbSubcomp_HandleSyncedActionBegin) == 0x000008, "Wrong alignment on SHDefenceCmbSubcomp_HandleSyncedActionBegin");
static_assert(sizeof(SHDefenceCmbSubcomp_HandleSyncedActionBegin) == 0x000008, "Wrong size on SHDefenceCmbSubcomp_HandleSyncedActionBegin");
static_assert(offsetof(SHDefenceCmbSubcomp_HandleSyncedActionBegin, CharacterSynchedWith) == 0x000000, "Member 'SHDefenceCmbSubcomp_HandleSyncedActionBegin::CharacterSynchedWith' has a wrong offset!");

// Function SHProto.SHDefenceCmbSubcomp.HandleSyncedActionEnd
// 0x0008 (0x0008 - 0x0000)
struct SHDefenceCmbSubcomp_HandleSyncedActionEnd final
{
public:
	class ACharacter*                             CharacterSynchedWith;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDefenceCmbSubcomp_HandleSyncedActionEnd) == 0x000008, "Wrong alignment on SHDefenceCmbSubcomp_HandleSyncedActionEnd");
static_assert(sizeof(SHDefenceCmbSubcomp_HandleSyncedActionEnd) == 0x000008, "Wrong size on SHDefenceCmbSubcomp_HandleSyncedActionEnd");
static_assert(offsetof(SHDefenceCmbSubcomp_HandleSyncedActionEnd, CharacterSynchedWith) == 0x000000, "Member 'SHDefenceCmbSubcomp_HandleSyncedActionEnd::CharacterSynchedWith' has a wrong offset!");

// Function SHProto.SHDefenceCmbSubcomp.OnDodgeBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct SHDefenceCmbSubcomp_OnDodgeBlendingOut final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHAnimEndType                                AnimEndType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHDefenceCmbSubcomp_OnDodgeBlendingOut) == 0x000008, "Wrong alignment on SHDefenceCmbSubcomp_OnDodgeBlendingOut");
static_assert(sizeof(SHDefenceCmbSubcomp_OnDodgeBlendingOut) == 0x000010, "Wrong size on SHDefenceCmbSubcomp_OnDodgeBlendingOut");
static_assert(offsetof(SHDefenceCmbSubcomp_OnDodgeBlendingOut, Montage) == 0x000000, "Member 'SHDefenceCmbSubcomp_OnDodgeBlendingOut::Montage' has a wrong offset!");
static_assert(offsetof(SHDefenceCmbSubcomp_OnDodgeBlendingOut, AnimEndType) == 0x000008, "Member 'SHDefenceCmbSubcomp_OnDodgeBlendingOut::AnimEndType' has a wrong offset!");

// Function SHProto.SHDefenceCmbSubcomp.OnDodgeEnd
// 0x0010 (0x0010 - 0x0000)
struct SHDefenceCmbSubcomp_OnDodgeEnd final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHAnimEndType                                AnimEndType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHDefenceCmbSubcomp_OnDodgeEnd) == 0x000008, "Wrong alignment on SHDefenceCmbSubcomp_OnDodgeEnd");
static_assert(sizeof(SHDefenceCmbSubcomp_OnDodgeEnd) == 0x000010, "Wrong size on SHDefenceCmbSubcomp_OnDodgeEnd");
static_assert(offsetof(SHDefenceCmbSubcomp_OnDodgeEnd, Montage) == 0x000000, "Member 'SHDefenceCmbSubcomp_OnDodgeEnd::Montage' has a wrong offset!");
static_assert(offsetof(SHDefenceCmbSubcomp_OnDodgeEnd, AnimEndType) == 0x000008, "Member 'SHDefenceCmbSubcomp_OnDodgeEnd::AnimEndType' has a wrong offset!");

// Function SHProto.SHDefenceCmbSubcomp.OnQuickTurnEnd
// 0x0001 (0x0001 - 0x0000)
struct SHDefenceCmbSubcomp_OnQuickTurnEnd final
{
public:
	bool                                          bWasCompleted;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDefenceCmbSubcomp_OnQuickTurnEnd) == 0x000001, "Wrong alignment on SHDefenceCmbSubcomp_OnQuickTurnEnd");
static_assert(sizeof(SHDefenceCmbSubcomp_OnQuickTurnEnd) == 0x000001, "Wrong size on SHDefenceCmbSubcomp_OnQuickTurnEnd");
static_assert(offsetof(SHDefenceCmbSubcomp_OnQuickTurnEnd, bWasCompleted) == 0x000000, "Member 'SHDefenceCmbSubcomp_OnQuickTurnEnd::bWasCompleted' has a wrong offset!");

// Function SHProto.SHDefenceCmbSubcomp.RequestDefaultFallToFloor
// 0x0001 (0x0001 - 0x0000)
struct SHDefenceCmbSubcomp_RequestDefaultFallToFloor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDefenceCmbSubcomp_RequestDefaultFallToFloor) == 0x000001, "Wrong alignment on SHDefenceCmbSubcomp_RequestDefaultFallToFloor");
static_assert(sizeof(SHDefenceCmbSubcomp_RequestDefaultFallToFloor) == 0x000001, "Wrong size on SHDefenceCmbSubcomp_RequestDefaultFallToFloor");
static_assert(offsetof(SHDefenceCmbSubcomp_RequestDefaultFallToFloor, ReturnValue) == 0x000000, "Member 'SHDefenceCmbSubcomp_RequestDefaultFallToFloor::ReturnValue' has a wrong offset!");

// Function SHProto.SHDefenceCmbSubcomp.RequestFallToFloor
// 0x0138 (0x0138 - 0x0000)
struct SHDefenceCmbSubcomp_RequestFallToFloor final
{
public:
	struct FPlayAnimationData                     FallAnim;                                          // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSHCameraAnimationData                 CameraAnim;                                        // 0x00B0(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0130(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHDefenceCmbSubcomp_RequestFallToFloor) == 0x000008, "Wrong alignment on SHDefenceCmbSubcomp_RequestFallToFloor");
static_assert(sizeof(SHDefenceCmbSubcomp_RequestFallToFloor) == 0x000138, "Wrong size on SHDefenceCmbSubcomp_RequestFallToFloor");
static_assert(offsetof(SHDefenceCmbSubcomp_RequestFallToFloor, FallAnim) == 0x000000, "Member 'SHDefenceCmbSubcomp_RequestFallToFloor::FallAnim' has a wrong offset!");
static_assert(offsetof(SHDefenceCmbSubcomp_RequestFallToFloor, CameraAnim) == 0x0000B0, "Member 'SHDefenceCmbSubcomp_RequestFallToFloor::CameraAnim' has a wrong offset!");
static_assert(offsetof(SHDefenceCmbSubcomp_RequestFallToFloor, ReturnValue) == 0x000130, "Member 'SHDefenceCmbSubcomp_RequestFallToFloor::ReturnValue' has a wrong offset!");

// Function SHProto.SHDefenceCmbSubcomp.RequestPerformDodge
// 0x0018 (0x0018 - 0x0000)
struct SHDefenceCmbSubcomp_RequestPerformDodge final
{
public:
	struct FVector                                InMovementVector;                                  // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDefenceCmbSubcomp_RequestPerformDodge) == 0x000008, "Wrong alignment on SHDefenceCmbSubcomp_RequestPerformDodge");
static_assert(sizeof(SHDefenceCmbSubcomp_RequestPerformDodge) == 0x000018, "Wrong size on SHDefenceCmbSubcomp_RequestPerformDodge");
static_assert(offsetof(SHDefenceCmbSubcomp_RequestPerformDodge, InMovementVector) == 0x000000, "Member 'SHDefenceCmbSubcomp_RequestPerformDodge::InMovementVector' has a wrong offset!");

// Function SHProto.SHDefenceCmbSubcomp.SetDodgeBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHDefenceCmbSubcomp_SetDodgeBlocked final
{
public:
	bool                                          InBlocked;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Object;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDefenceCmbSubcomp_SetDodgeBlocked) == 0x000008, "Wrong alignment on SHDefenceCmbSubcomp_SetDodgeBlocked");
static_assert(sizeof(SHDefenceCmbSubcomp_SetDodgeBlocked) == 0x000010, "Wrong size on SHDefenceCmbSubcomp_SetDodgeBlocked");
static_assert(offsetof(SHDefenceCmbSubcomp_SetDodgeBlocked, InBlocked) == 0x000000, "Member 'SHDefenceCmbSubcomp_SetDodgeBlocked::InBlocked' has a wrong offset!");
static_assert(offsetof(SHDefenceCmbSubcomp_SetDodgeBlocked, Object) == 0x000008, "Member 'SHDefenceCmbSubcomp_SetDodgeBlocked::Object' has a wrong offset!");

// DelegateFunction SHProto.SHDefenceCmbSubcomp.SHDefenceEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHDefenceCmbSubcomp_SHDefenceEvent__DelegateSignature final
{
public:
	class USHDefenceCmbSubcomp*                   DefenceCmbSubcomp;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDefenceCmbSubcomp_SHDefenceEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHDefenceCmbSubcomp_SHDefenceEvent__DelegateSignature");
static_assert(sizeof(SHDefenceCmbSubcomp_SHDefenceEvent__DelegateSignature) == 0x000008, "Wrong size on SHDefenceCmbSubcomp_SHDefenceEvent__DelegateSignature");
static_assert(offsetof(SHDefenceCmbSubcomp_SHDefenceEvent__DelegateSignature, DefenceCmbSubcomp) == 0x000000, "Member 'SHDefenceCmbSubcomp_SHDefenceEvent__DelegateSignature::DefenceCmbSubcomp' has a wrong offset!");

// Function SHProto.SHDefenceCmbSubcomp.IsInQuickTurn
// 0x0001 (0x0001 - 0x0000)
struct SHDefenceCmbSubcomp_IsInQuickTurn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDefenceCmbSubcomp_IsInQuickTurn) == 0x000001, "Wrong alignment on SHDefenceCmbSubcomp_IsInQuickTurn");
static_assert(sizeof(SHDefenceCmbSubcomp_IsInQuickTurn) == 0x000001, "Wrong size on SHDefenceCmbSubcomp_IsInQuickTurn");
static_assert(offsetof(SHDefenceCmbSubcomp_IsInQuickTurn, ReturnValue) == 0x000000, "Member 'SHDefenceCmbSubcomp_IsInQuickTurn::ReturnValue' has a wrong offset!");

// Function SHProto.SHDefenceCmbSubcomp.IsInSuperArmour
// 0x0001 (0x0001 - 0x0000)
struct SHDefenceCmbSubcomp_IsInSuperArmour final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDefenceCmbSubcomp_IsInSuperArmour) == 0x000001, "Wrong alignment on SHDefenceCmbSubcomp_IsInSuperArmour");
static_assert(sizeof(SHDefenceCmbSubcomp_IsInSuperArmour) == 0x000001, "Wrong size on SHDefenceCmbSubcomp_IsInSuperArmour");
static_assert(offsetof(SHDefenceCmbSubcomp_IsInSuperArmour, ReturnValue) == 0x000000, "Member 'SHDefenceCmbSubcomp_IsInSuperArmour::ReturnValue' has a wrong offset!");

// Function SHProto.SHDefenceCmbSubcomp.IsOnFloor
// 0x0001 (0x0001 - 0x0000)
struct SHDefenceCmbSubcomp_IsOnFloor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDefenceCmbSubcomp_IsOnFloor) == 0x000001, "Wrong alignment on SHDefenceCmbSubcomp_IsOnFloor");
static_assert(sizeof(SHDefenceCmbSubcomp_IsOnFloor) == 0x000001, "Wrong size on SHDefenceCmbSubcomp_IsOnFloor");
static_assert(offsetof(SHDefenceCmbSubcomp_IsOnFloor, ReturnValue) == 0x000000, "Member 'SHDefenceCmbSubcomp_IsOnFloor::ReturnValue' has a wrong offset!");

// Function SHProto.SHDefenceCmbSubcomp.IsRightAfterDodge
// 0x0001 (0x0001 - 0x0000)
struct SHDefenceCmbSubcomp_IsRightAfterDodge final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDefenceCmbSubcomp_IsRightAfterDodge) == 0x000001, "Wrong alignment on SHDefenceCmbSubcomp_IsRightAfterDodge");
static_assert(sizeof(SHDefenceCmbSubcomp_IsRightAfterDodge) == 0x000001, "Wrong size on SHDefenceCmbSubcomp_IsRightAfterDodge");
static_assert(offsetof(SHDefenceCmbSubcomp_IsRightAfterDodge, ReturnValue) == 0x000000, "Member 'SHDefenceCmbSubcomp_IsRightAfterDodge::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionRangeAnimInstance.GetAimPoseWeightCurveName
// 0x0008 (0x0008 - 0x0000)
struct SHLocomotionRangeAnimInstance_GetAimPoseWeightCurveName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionRangeAnimInstance_GetAimPoseWeightCurveName) == 0x000004, "Wrong alignment on SHLocomotionRangeAnimInstance_GetAimPoseWeightCurveName");
static_assert(sizeof(SHLocomotionRangeAnimInstance_GetAimPoseWeightCurveName) == 0x000008, "Wrong size on SHLocomotionRangeAnimInstance_GetAimPoseWeightCurveName");
static_assert(offsetof(SHLocomotionRangeAnimInstance_GetAimPoseWeightCurveName, ReturnValue) == 0x000000, "Member 'SHLocomotionRangeAnimInstance_GetAimPoseWeightCurveName::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionRangeAnimInstance.IsAimPoseBlendingIn
// 0x0002 (0x0002 - 0x0000)
struct SHLocomotionRangeAnimInstance_IsAimPoseBlendingIn final
{
public:
	bool                                          MustBePureAimPose;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionRangeAnimInstance_IsAimPoseBlendingIn) == 0x000001, "Wrong alignment on SHLocomotionRangeAnimInstance_IsAimPoseBlendingIn");
static_assert(sizeof(SHLocomotionRangeAnimInstance_IsAimPoseBlendingIn) == 0x000002, "Wrong size on SHLocomotionRangeAnimInstance_IsAimPoseBlendingIn");
static_assert(offsetof(SHLocomotionRangeAnimInstance_IsAimPoseBlendingIn, MustBePureAimPose) == 0x000000, "Member 'SHLocomotionRangeAnimInstance_IsAimPoseBlendingIn::MustBePureAimPose' has a wrong offset!");
static_assert(offsetof(SHLocomotionRangeAnimInstance_IsAimPoseBlendingIn, ReturnValue) == 0x000001, "Member 'SHLocomotionRangeAnimInstance_IsAimPoseBlendingIn::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionRangeAnimInstance.IsAimPoseBlendingInOurOut
// 0x0002 (0x0002 - 0x0000)
struct SHLocomotionRangeAnimInstance_IsAimPoseBlendingInOurOut final
{
public:
	bool                                          MustBePureAimPose;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionRangeAnimInstance_IsAimPoseBlendingInOurOut) == 0x000001, "Wrong alignment on SHLocomotionRangeAnimInstance_IsAimPoseBlendingInOurOut");
static_assert(sizeof(SHLocomotionRangeAnimInstance_IsAimPoseBlendingInOurOut) == 0x000002, "Wrong size on SHLocomotionRangeAnimInstance_IsAimPoseBlendingInOurOut");
static_assert(offsetof(SHLocomotionRangeAnimInstance_IsAimPoseBlendingInOurOut, MustBePureAimPose) == 0x000000, "Member 'SHLocomotionRangeAnimInstance_IsAimPoseBlendingInOurOut::MustBePureAimPose' has a wrong offset!");
static_assert(offsetof(SHLocomotionRangeAnimInstance_IsAimPoseBlendingInOurOut, ReturnValue) == 0x000001, "Member 'SHLocomotionRangeAnimInstance_IsAimPoseBlendingInOurOut::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionRangeAnimInstance.IsAimPoseBlendingOut
// 0x0002 (0x0002 - 0x0000)
struct SHLocomotionRangeAnimInstance_IsAimPoseBlendingOut final
{
public:
	bool                                          MustBePureAimPose;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionRangeAnimInstance_IsAimPoseBlendingOut) == 0x000001, "Wrong alignment on SHLocomotionRangeAnimInstance_IsAimPoseBlendingOut");
static_assert(sizeof(SHLocomotionRangeAnimInstance_IsAimPoseBlendingOut) == 0x000002, "Wrong size on SHLocomotionRangeAnimInstance_IsAimPoseBlendingOut");
static_assert(offsetof(SHLocomotionRangeAnimInstance_IsAimPoseBlendingOut, MustBePureAimPose) == 0x000000, "Member 'SHLocomotionRangeAnimInstance_IsAimPoseBlendingOut::MustBePureAimPose' has a wrong offset!");
static_assert(offsetof(SHLocomotionRangeAnimInstance_IsAimPoseBlendingOut, ReturnValue) == 0x000001, "Member 'SHLocomotionRangeAnimInstance_IsAimPoseBlendingOut::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionRangeAnimInstance.IsAnyPreAimOffsetSlotAnimationPlaying
// 0x0001 (0x0001 - 0x0000)
struct SHLocomotionRangeAnimInstance_IsAnyPreAimOffsetSlotAnimationPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionRangeAnimInstance_IsAnyPreAimOffsetSlotAnimationPlaying) == 0x000001, "Wrong alignment on SHLocomotionRangeAnimInstance_IsAnyPreAimOffsetSlotAnimationPlaying");
static_assert(sizeof(SHLocomotionRangeAnimInstance_IsAnyPreAimOffsetSlotAnimationPlaying) == 0x000001, "Wrong size on SHLocomotionRangeAnimInstance_IsAnyPreAimOffsetSlotAnimationPlaying");
static_assert(offsetof(SHLocomotionRangeAnimInstance_IsAnyPreAimOffsetSlotAnimationPlaying, ReturnValue) == 0x000000, "Member 'SHLocomotionRangeAnimInstance_IsAnyPreAimOffsetSlotAnimationPlaying::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionRangeAnimInstance.IsPureAimPoseBlendingInOurOut
// 0x0001 (0x0001 - 0x0000)
struct SHLocomotionRangeAnimInstance_IsPureAimPoseBlendingInOurOut final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionRangeAnimInstance_IsPureAimPoseBlendingInOurOut) == 0x000001, "Wrong alignment on SHLocomotionRangeAnimInstance_IsPureAimPoseBlendingInOurOut");
static_assert(sizeof(SHLocomotionRangeAnimInstance_IsPureAimPoseBlendingInOurOut) == 0x000001, "Wrong size on SHLocomotionRangeAnimInstance_IsPureAimPoseBlendingInOurOut");
static_assert(offsetof(SHLocomotionRangeAnimInstance_IsPureAimPoseBlendingInOurOut, ReturnValue) == 0x000000, "Member 'SHLocomotionRangeAnimInstance_IsPureAimPoseBlendingInOurOut::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocomotionRangeAnimInstance.MapAimPoseWeightToIgnoreWeaponIKCurve
// 0x0004 (0x0004 - 0x0000)
struct SHLocomotionRangeAnimInstance_MapAimPoseWeightToIgnoreWeaponIKCurve final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocomotionRangeAnimInstance_MapAimPoseWeightToIgnoreWeaponIKCurve) == 0x000004, "Wrong alignment on SHLocomotionRangeAnimInstance_MapAimPoseWeightToIgnoreWeaponIKCurve");
static_assert(sizeof(SHLocomotionRangeAnimInstance_MapAimPoseWeightToIgnoreWeaponIKCurve) == 0x000004, "Wrong size on SHLocomotionRangeAnimInstance_MapAimPoseWeightToIgnoreWeaponIKCurve");
static_assert(offsetof(SHLocomotionRangeAnimInstance_MapAimPoseWeightToIgnoreWeaponIKCurve, ReturnValue) == 0x000000, "Member 'SHLocomotionRangeAnimInstance_MapAimPoseWeightToIgnoreWeaponIKCurve::ReturnValue' has a wrong offset!");

// Function SHProto.SHSwarmRegionBase.GetScaledShapeSize
// 0x0018 (0x0018 - 0x0000)
struct SHSwarmRegionBase_GetScaledShapeSize final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSwarmRegionBase_GetScaledShapeSize) == 0x000008, "Wrong alignment on SHSwarmRegionBase_GetScaledShapeSize");
static_assert(sizeof(SHSwarmRegionBase_GetScaledShapeSize) == 0x000018, "Wrong size on SHSwarmRegionBase_GetScaledShapeSize");
static_assert(offsetof(SHSwarmRegionBase_GetScaledShapeSize, ReturnValue) == 0x000000, "Member 'SHSwarmRegionBase_GetScaledShapeSize::ReturnValue' has a wrong offset!");

// Function SHProto.DebugLightsRootActor.GetAllChildsWithTag
// 0x0020 (0x0020 - 0x0000)
struct DebugLightsRootActor_GetAllChildsWithTag final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FromAllRoots;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugLightsRootActor_GetAllChildsWithTag) == 0x000008, "Wrong alignment on DebugLightsRootActor_GetAllChildsWithTag");
static_assert(sizeof(DebugLightsRootActor_GetAllChildsWithTag) == 0x000020, "Wrong size on DebugLightsRootActor_GetAllChildsWithTag");
static_assert(offsetof(DebugLightsRootActor_GetAllChildsWithTag, Tag) == 0x000000, "Member 'DebugLightsRootActor_GetAllChildsWithTag::Tag' has a wrong offset!");
static_assert(offsetof(DebugLightsRootActor_GetAllChildsWithTag, FromAllRoots) == 0x000008, "Member 'DebugLightsRootActor_GetAllChildsWithTag::FromAllRoots' has a wrong offset!");
static_assert(offsetof(DebugLightsRootActor_GetAllChildsWithTag, ReturnValue) == 0x000010, "Member 'DebugLightsRootActor_GetAllChildsWithTag::ReturnValue' has a wrong offset!");

// Function SHProto.DebugLightsRootActor.GetAllLightsRoots
// 0x0010 (0x0010 - 0x0000)
struct DebugLightsRootActor_GetAllLightsRoots final
{
public:
	TArray<class ADebugLightsRootActor*>          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugLightsRootActor_GetAllLightsRoots) == 0x000008, "Wrong alignment on DebugLightsRootActor_GetAllLightsRoots");
static_assert(sizeof(DebugLightsRootActor_GetAllLightsRoots) == 0x000010, "Wrong size on DebugLightsRootActor_GetAllLightsRoots");
static_assert(offsetof(DebugLightsRootActor_GetAllLightsRoots, ReturnValue) == 0x000000, "Member 'DebugLightsRootActor_GetAllLightsRoots::ReturnValue' has a wrong offset!");

// Function SHProto.SHMandarinAnimInstance.GetMandarinAnimInstanceStateData
// 0x0008 (0x0008 - 0x0000)
struct SHMandarinAnimInstance_GetMandarinAnimInstanceStateData final
{
public:
	class USHMandarinAnimInstanceStateData*       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMandarinAnimInstance_GetMandarinAnimInstanceStateData) == 0x000008, "Wrong alignment on SHMandarinAnimInstance_GetMandarinAnimInstanceStateData");
static_assert(sizeof(SHMandarinAnimInstance_GetMandarinAnimInstanceStateData) == 0x000008, "Wrong size on SHMandarinAnimInstance_GetMandarinAnimInstanceStateData");
static_assert(offsetof(SHMandarinAnimInstance_GetMandarinAnimInstanceStateData, ReturnValue) == 0x000000, "Member 'SHMandarinAnimInstance_GetMandarinAnimInstanceStateData::ReturnValue' has a wrong offset!");

// Function SHProto.SHMandarinAnimInstance.GetMandarinLocomotionAnimInstance
// 0x0010 (0x0010 - 0x0000)
struct SHMandarinAnimInstance_GetMandarinLocomotionAnimInstance final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USHMandarinLocomotionAnimInstance*      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMandarinAnimInstance_GetMandarinLocomotionAnimInstance) == 0x000008, "Wrong alignment on SHMandarinAnimInstance_GetMandarinLocomotionAnimInstance");
static_assert(sizeof(SHMandarinAnimInstance_GetMandarinLocomotionAnimInstance) == 0x000010, "Wrong size on SHMandarinAnimInstance_GetMandarinLocomotionAnimInstance");
static_assert(offsetof(SHMandarinAnimInstance_GetMandarinLocomotionAnimInstance, SlotIndex) == 0x000000, "Member 'SHMandarinAnimInstance_GetMandarinLocomotionAnimInstance::SlotIndex' has a wrong offset!");
static_assert(offsetof(SHMandarinAnimInstance_GetMandarinLocomotionAnimInstance, ReturnValue) == 0x000008, "Member 'SHMandarinAnimInstance_GetMandarinLocomotionAnimInstance::ReturnValue' has a wrong offset!");

// Function SHProto.SHDynamicInteractionManagerComponent.SpawnInteractionExecutive
// 0x0010 (0x0010 - 0x0000)
struct SHDynamicInteractionManagerComponent_SpawnInteractionExecutive final
{
public:
	TSubclassOf<class ASHDynamicInteractionExecutive> InteractionExeClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHDynamicInteractionExecutive*         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDynamicInteractionManagerComponent_SpawnInteractionExecutive) == 0x000008, "Wrong alignment on SHDynamicInteractionManagerComponent_SpawnInteractionExecutive");
static_assert(sizeof(SHDynamicInteractionManagerComponent_SpawnInteractionExecutive) == 0x000010, "Wrong size on SHDynamicInteractionManagerComponent_SpawnInteractionExecutive");
static_assert(offsetof(SHDynamicInteractionManagerComponent_SpawnInteractionExecutive, InteractionExeClass) == 0x000000, "Member 'SHDynamicInteractionManagerComponent_SpawnInteractionExecutive::InteractionExeClass' has a wrong offset!");
static_assert(offsetof(SHDynamicInteractionManagerComponent_SpawnInteractionExecutive, ReturnValue) == 0x000008, "Member 'SHDynamicInteractionManagerComponent_SpawnInteractionExecutive::ReturnValue' has a wrong offset!");

// Function SHProto.SHDynamicInteractionManagerComponent.GetSpawnedInteractionExecutive
// 0x0008 (0x0008 - 0x0000)
struct SHDynamicInteractionManagerComponent_GetSpawnedInteractionExecutive final
{
public:
	class ASHDynamicInteractionExecutive*         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDynamicInteractionManagerComponent_GetSpawnedInteractionExecutive) == 0x000008, "Wrong alignment on SHDynamicInteractionManagerComponent_GetSpawnedInteractionExecutive");
static_assert(sizeof(SHDynamicInteractionManagerComponent_GetSpawnedInteractionExecutive) == 0x000008, "Wrong size on SHDynamicInteractionManagerComponent_GetSpawnedInteractionExecutive");
static_assert(offsetof(SHDynamicInteractionManagerComponent_GetSpawnedInteractionExecutive, ReturnValue) == 0x000000, "Member 'SHDynamicInteractionManagerComponent_GetSpawnedInteractionExecutive::ReturnValue' has a wrong offset!");

// Function SHProto.SHPlaythroughKilledEnemiesEndingFactor.SHDebug_Character_Endings_PlaythroughKilledEnemiesEndingFactor_SetDebugValue
// 0x0004 (0x0004 - 0x0000)
struct SHPlaythroughKilledEnemiesEndingFactor_SHDebug_Character_Endings_PlaythroughKilledEnemiesEndingFactor_SetDebugValue final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPlaythroughKilledEnemiesEndingFactor_SHDebug_Character_Endings_PlaythroughKilledEnemiesEndingFactor_SetDebugValue) == 0x000004, "Wrong alignment on SHPlaythroughKilledEnemiesEndingFactor_SHDebug_Character_Endings_PlaythroughKilledEnemiesEndingFactor_SetDebugValue");
static_assert(sizeof(SHPlaythroughKilledEnemiesEndingFactor_SHDebug_Character_Endings_PlaythroughKilledEnemiesEndingFactor_SetDebugValue) == 0x000004, "Wrong size on SHPlaythroughKilledEnemiesEndingFactor_SHDebug_Character_Endings_PlaythroughKilledEnemiesEndingFactor_SetDebugValue");
static_assert(offsetof(SHPlaythroughKilledEnemiesEndingFactor_SHDebug_Character_Endings_PlaythroughKilledEnemiesEndingFactor_SetDebugValue, InValue) == 0x000000, "Member 'SHPlaythroughKilledEnemiesEndingFactor_SHDebug_Character_Endings_PlaythroughKilledEnemiesEndingFactor_SetDebugValue::InValue' has a wrong offset!");

// Function SHProto.SHEddieAnimInstance.K2_OnEddieMovementStateChanged
// 0x0001 (0x0001 - 0x0000)
struct SHEddieAnimInstance_K2_OnEddieMovementStateChanged final
{
public:
	ESHEddieAnimInstanceMovementState             InMovementState;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEddieAnimInstance_K2_OnEddieMovementStateChanged) == 0x000001, "Wrong alignment on SHEddieAnimInstance_K2_OnEddieMovementStateChanged");
static_assert(sizeof(SHEddieAnimInstance_K2_OnEddieMovementStateChanged) == 0x000001, "Wrong size on SHEddieAnimInstance_K2_OnEddieMovementStateChanged");
static_assert(offsetof(SHEddieAnimInstance_K2_OnEddieMovementStateChanged, InMovementState) == 0x000000, "Member 'SHEddieAnimInstance_K2_OnEddieMovementStateChanged::InMovementState' has a wrong offset!");

// Function SHProto.SHEddieAnimInstance.SetFaceExpression
// 0x0008 (0x0008 - 0x0000)
struct SHEddieAnimInstance_SetFaceExpression final
{
public:
	ESHEddieFaceExpression                        Expression;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEddieAnimInstance_SetFaceExpression) == 0x000004, "Wrong alignment on SHEddieAnimInstance_SetFaceExpression");
static_assert(sizeof(SHEddieAnimInstance_SetFaceExpression) == 0x000008, "Wrong size on SHEddieAnimInstance_SetFaceExpression");
static_assert(offsetof(SHEddieAnimInstance_SetFaceExpression, Expression) == 0x000000, "Member 'SHEddieAnimInstance_SetFaceExpression::Expression' has a wrong offset!");
static_assert(offsetof(SHEddieAnimInstance_SetFaceExpression, Duration) == 0x000004, "Member 'SHEddieAnimInstance_SetFaceExpression::Duration' has a wrong offset!");

// Function SHProto.SHEddieAnimInstance.GetActiveEddieLocomotionAnimInstance
// 0x0008 (0x0008 - 0x0000)
struct SHEddieAnimInstance_GetActiveEddieLocomotionAnimInstance final
{
public:
	class USHEddieLocomotionAnimInstance*         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEddieAnimInstance_GetActiveEddieLocomotionAnimInstance) == 0x000008, "Wrong alignment on SHEddieAnimInstance_GetActiveEddieLocomotionAnimInstance");
static_assert(sizeof(SHEddieAnimInstance_GetActiveEddieLocomotionAnimInstance) == 0x000008, "Wrong size on SHEddieAnimInstance_GetActiveEddieLocomotionAnimInstance");
static_assert(offsetof(SHEddieAnimInstance_GetActiveEddieLocomotionAnimInstance, ReturnValue) == 0x000000, "Member 'SHEddieAnimInstance_GetActiveEddieLocomotionAnimInstance::ReturnValue' has a wrong offset!");

// Function SHProto.SHEddieAnimInstance.GetEddieAnimInstanceStateData
// 0x0008 (0x0008 - 0x0000)
struct SHEddieAnimInstance_GetEddieAnimInstanceStateData final
{
public:
	class USHEddieAnimInstanceStateData*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEddieAnimInstance_GetEddieAnimInstanceStateData) == 0x000008, "Wrong alignment on SHEddieAnimInstance_GetEddieAnimInstanceStateData");
static_assert(sizeof(SHEddieAnimInstance_GetEddieAnimInstanceStateData) == 0x000008, "Wrong size on SHEddieAnimInstance_GetEddieAnimInstanceStateData");
static_assert(offsetof(SHEddieAnimInstance_GetEddieAnimInstanceStateData, ReturnValue) == 0x000000, "Member 'SHEddieAnimInstance_GetEddieAnimInstanceStateData::ReturnValue' has a wrong offset!");

// Function SHProto.SHEddieAnimInstance.GetEddieLimpingLocomotionAnimInstance
// 0x0008 (0x0008 - 0x0000)
struct SHEddieAnimInstance_GetEddieLimpingLocomotionAnimInstance final
{
public:
	class USHEddieLimpingLocomotionAnimInstance*  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEddieAnimInstance_GetEddieLimpingLocomotionAnimInstance) == 0x000008, "Wrong alignment on SHEddieAnimInstance_GetEddieLimpingLocomotionAnimInstance");
static_assert(sizeof(SHEddieAnimInstance_GetEddieLimpingLocomotionAnimInstance) == 0x000008, "Wrong size on SHEddieAnimInstance_GetEddieLimpingLocomotionAnimInstance");
static_assert(offsetof(SHEddieAnimInstance_GetEddieLimpingLocomotionAnimInstance, ReturnValue) == 0x000000, "Member 'SHEddieAnimInstance_GetEddieLimpingLocomotionAnimInstance::ReturnValue' has a wrong offset!");

// Function SHProto.SHEddieAnimInstance.GetEddieWalkingLocomotionAnimInstance
// 0x0008 (0x0008 - 0x0000)
struct SHEddieAnimInstance_GetEddieWalkingLocomotionAnimInstance final
{
public:
	class USHEddieWalkingLocomotionAnimInstance*  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEddieAnimInstance_GetEddieWalkingLocomotionAnimInstance) == 0x000008, "Wrong alignment on SHEddieAnimInstance_GetEddieWalkingLocomotionAnimInstance");
static_assert(sizeof(SHEddieAnimInstance_GetEddieWalkingLocomotionAnimInstance) == 0x000008, "Wrong size on SHEddieAnimInstance_GetEddieWalkingLocomotionAnimInstance");
static_assert(offsetof(SHEddieAnimInstance_GetEddieWalkingLocomotionAnimInstance, ReturnValue) == 0x000000, "Member 'SHEddieAnimInstance_GetEddieWalkingLocomotionAnimInstance::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemBase.BlueprintImplementableExecutiveInit
// 0x0008 (0x0008 - 0x0000)
struct SHItemBase_BlueprintImplementableExecutiveInit final
{
public:
	class ASHItemExecutiveBase*                   Executive;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemBase_BlueprintImplementableExecutiveInit) == 0x000008, "Wrong alignment on SHItemBase_BlueprintImplementableExecutiveInit");
static_assert(sizeof(SHItemBase_BlueprintImplementableExecutiveInit) == 0x000008, "Wrong size on SHItemBase_BlueprintImplementableExecutiveInit");
static_assert(offsetof(SHItemBase_BlueprintImplementableExecutiveInit, Executive) == 0x000000, "Member 'SHItemBase_BlueprintImplementableExecutiveInit::Executive' has a wrong offset!");

// Function SHProto.SHItemBase.BlueprintImplementableInvestigationFlip
// 0x0010 (0x0010 - 0x0000)
struct SHItemBase_BlueprintImplementableInvestigationFlip final
{
public:
	class ASHItemInvestigationExecutive*          InvestigationExecutive;                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SideB;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHItemBase_BlueprintImplementableInvestigationFlip) == 0x000008, "Wrong alignment on SHItemBase_BlueprintImplementableInvestigationFlip");
static_assert(sizeof(SHItemBase_BlueprintImplementableInvestigationFlip) == 0x000010, "Wrong size on SHItemBase_BlueprintImplementableInvestigationFlip");
static_assert(offsetof(SHItemBase_BlueprintImplementableInvestigationFlip, InvestigationExecutive) == 0x000000, "Member 'SHItemBase_BlueprintImplementableInvestigationFlip::InvestigationExecutive' has a wrong offset!");
static_assert(offsetof(SHItemBase_BlueprintImplementableInvestigationFlip, SideB) == 0x000008, "Member 'SHItemBase_BlueprintImplementableInvestigationFlip::SideB' has a wrong offset!");

// Function SHProto.SHItemBase.BlueprintImplementableInvestigationInputChanged
// 0x0010 (0x0010 - 0x0000)
struct SHItemBase_BlueprintImplementableInvestigationInputChanged final
{
public:
	class ASHItemInvestigationExecutive*          InvestigationExecutive;                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimationTime;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHItemBase_BlueprintImplementableInvestigationInputChanged) == 0x000008, "Wrong alignment on SHItemBase_BlueprintImplementableInvestigationInputChanged");
static_assert(sizeof(SHItemBase_BlueprintImplementableInvestigationInputChanged) == 0x000010, "Wrong size on SHItemBase_BlueprintImplementableInvestigationInputChanged");
static_assert(offsetof(SHItemBase_BlueprintImplementableInvestigationInputChanged, InvestigationExecutive) == 0x000000, "Member 'SHItemBase_BlueprintImplementableInvestigationInputChanged::InvestigationExecutive' has a wrong offset!");
static_assert(offsetof(SHItemBase_BlueprintImplementableInvestigationInputChanged, AnimationTime) == 0x000008, "Member 'SHItemBase_BlueprintImplementableInvestigationInputChanged::AnimationTime' has a wrong offset!");

// Function SHProto.SHItemBase.BlueprintImplementableInvestigationSwitchedItem
// 0x0008 (0x0008 - 0x0000)
struct SHItemBase_BlueprintImplementableInvestigationSwitchedItem final
{
public:
	class ASHItemInvestigationExecutive*          InvestigationExecutive;                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemBase_BlueprintImplementableInvestigationSwitchedItem) == 0x000008, "Wrong alignment on SHItemBase_BlueprintImplementableInvestigationSwitchedItem");
static_assert(sizeof(SHItemBase_BlueprintImplementableInvestigationSwitchedItem) == 0x000008, "Wrong size on SHItemBase_BlueprintImplementableInvestigationSwitchedItem");
static_assert(offsetof(SHItemBase_BlueprintImplementableInvestigationSwitchedItem, InvestigationExecutive) == 0x000000, "Member 'SHItemBase_BlueprintImplementableInvestigationSwitchedItem::InvestigationExecutive' has a wrong offset!");

// Function SHProto.SHItemBase.BlueprintImplementableMainInvestigationStarted
// 0x0008 (0x0008 - 0x0000)
struct SHItemBase_BlueprintImplementableMainInvestigationStarted final
{
public:
	class ASHItemInvestigationExecutive*          InvestigationExecutive;                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemBase_BlueprintImplementableMainInvestigationStarted) == 0x000008, "Wrong alignment on SHItemBase_BlueprintImplementableMainInvestigationStarted");
static_assert(sizeof(SHItemBase_BlueprintImplementableMainInvestigationStarted) == 0x000008, "Wrong size on SHItemBase_BlueprintImplementableMainInvestigationStarted");
static_assert(offsetof(SHItemBase_BlueprintImplementableMainInvestigationStarted, InvestigationExecutive) == 0x000000, "Member 'SHItemBase_BlueprintImplementableMainInvestigationStarted::InvestigationExecutive' has a wrong offset!");

// Function SHProto.SHItemBase.BlueprintImplementablePostInvestigationStarted
// 0x0008 (0x0008 - 0x0000)
struct SHItemBase_BlueprintImplementablePostInvestigationStarted final
{
public:
	class ASHItemInvestigationExecutive*          InvestigationExecutive;                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemBase_BlueprintImplementablePostInvestigationStarted) == 0x000008, "Wrong alignment on SHItemBase_BlueprintImplementablePostInvestigationStarted");
static_assert(sizeof(SHItemBase_BlueprintImplementablePostInvestigationStarted) == 0x000008, "Wrong size on SHItemBase_BlueprintImplementablePostInvestigationStarted");
static_assert(offsetof(SHItemBase_BlueprintImplementablePostInvestigationStarted, InvestigationExecutive) == 0x000000, "Member 'SHItemBase_BlueprintImplementablePostInvestigationStarted::InvestigationExecutive' has a wrong offset!");

// Function SHProto.SHItemBase.BlueprintImplementablePreInvestigationStarted
// 0x0008 (0x0008 - 0x0000)
struct SHItemBase_BlueprintImplementablePreInvestigationStarted final
{
public:
	class ASHItemInvestigationExecutive*          InvestigationExecutive;                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemBase_BlueprintImplementablePreInvestigationStarted) == 0x000008, "Wrong alignment on SHItemBase_BlueprintImplementablePreInvestigationStarted");
static_assert(sizeof(SHItemBase_BlueprintImplementablePreInvestigationStarted) == 0x000008, "Wrong size on SHItemBase_BlueprintImplementablePreInvestigationStarted");
static_assert(offsetof(SHItemBase_BlueprintImplementablePreInvestigationStarted, InvestigationExecutive) == 0x000000, "Member 'SHItemBase_BlueprintImplementablePreInvestigationStarted::InvestigationExecutive' has a wrong offset!");

// Function SHProto.SHItemBase.Equip
// 0x0040 (0x0040 - 0x0000)
struct SHItemBase_Equip final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeLocation;                                  // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeRotation;                                  // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHItemBase_Equip) == 0x000008, "Wrong alignment on SHItemBase_Equip");
static_assert(sizeof(SHItemBase_Equip) == 0x000040, "Wrong size on SHItemBase_Equip");
static_assert(offsetof(SHItemBase_Equip, SocketName) == 0x000000, "Member 'SHItemBase_Equip::SocketName' has a wrong offset!");
static_assert(offsetof(SHItemBase_Equip, RelativeLocation) == 0x000008, "Member 'SHItemBase_Equip::RelativeLocation' has a wrong offset!");
static_assert(offsetof(SHItemBase_Equip, RelativeRotation) == 0x000020, "Member 'SHItemBase_Equip::RelativeRotation' has a wrong offset!");
static_assert(offsetof(SHItemBase_Equip, ReturnValue) == 0x000038, "Member 'SHItemBase_Equip::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemBase.SetItemDisabled
// 0x0010 (0x0010 - 0x0000)
struct SHItemBase_SetItemDisabled final
{
public:
	bool                                          bInDisabled;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          InObject;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemBase_SetItemDisabled) == 0x000008, "Wrong alignment on SHItemBase_SetItemDisabled");
static_assert(sizeof(SHItemBase_SetItemDisabled) == 0x000010, "Wrong size on SHItemBase_SetItemDisabled");
static_assert(offsetof(SHItemBase_SetItemDisabled, bInDisabled) == 0x000000, "Member 'SHItemBase_SetItemDisabled::bInDisabled' has a wrong offset!");
static_assert(offsetof(SHItemBase_SetItemDisabled, InObject) == 0x000008, "Member 'SHItemBase_SetItemDisabled::InObject' has a wrong offset!");

// DelegateFunction SHProto.SHItemBase.SHItemBaseEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHItemBase_SHItemBaseEvent__DelegateSignature final
{
public:
	class ASHItemBase*                            ItemPtr;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemBase_SHItemBaseEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHItemBase_SHItemBaseEvent__DelegateSignature");
static_assert(sizeof(SHItemBase_SHItemBaseEvent__DelegateSignature) == 0x000008, "Wrong size on SHItemBase_SHItemBaseEvent__DelegateSignature");
static_assert(offsetof(SHItemBase_SHItemBaseEvent__DelegateSignature, ItemPtr) == 0x000000, "Member 'SHItemBase_SHItemBaseEvent__DelegateSignature::ItemPtr' has a wrong offset!");

// DelegateFunction SHProto.SHItemBase.SHItemBaseWithExecutiveEvent__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct SHItemBase_SHItemBaseWithExecutiveEvent__DelegateSignature final
{
public:
	class ASHItemBase*                            ItemPtr;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHItemExecutiveBase*                   ExecutivePtr;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemBase_SHItemBaseWithExecutiveEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHItemBase_SHItemBaseWithExecutiveEvent__DelegateSignature");
static_assert(sizeof(SHItemBase_SHItemBaseWithExecutiveEvent__DelegateSignature) == 0x000010, "Wrong size on SHItemBase_SHItemBaseWithExecutiveEvent__DelegateSignature");
static_assert(offsetof(SHItemBase_SHItemBaseWithExecutiveEvent__DelegateSignature, ItemPtr) == 0x000000, "Member 'SHItemBase_SHItemBaseWithExecutiveEvent__DelegateSignature::ItemPtr' has a wrong offset!");
static_assert(offsetof(SHItemBase_SHItemBaseWithExecutiveEvent__DelegateSignature, ExecutivePtr) == 0x000008, "Member 'SHItemBase_SHItemBaseWithExecutiveEvent__DelegateSignature::ExecutivePtr' has a wrong offset!");

// Function SHProto.SHItemBase.Unequip
// 0x0001 (0x0001 - 0x0000)
struct SHItemBase_Unequip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemBase_Unequip) == 0x000001, "Wrong alignment on SHItemBase_Unequip");
static_assert(sizeof(SHItemBase_Unequip) == 0x000001, "Wrong size on SHItemBase_Unequip");
static_assert(offsetof(SHItemBase_Unequip, ReturnValue) == 0x000000, "Member 'SHItemBase_Unequip::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemBase.GetInteractingCharacter
// 0x0008 (0x0008 - 0x0000)
struct SHItemBase_GetInteractingCharacter final
{
public:
	const class ACharacter*                       ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemBase_GetInteractingCharacter) == 0x000008, "Wrong alignment on SHItemBase_GetInteractingCharacter");
static_assert(sizeof(SHItemBase_GetInteractingCharacter) == 0x000008, "Wrong size on SHItemBase_GetInteractingCharacter");
static_assert(offsetof(SHItemBase_GetInteractingCharacter, ReturnValue) == 0x000000, "Member 'SHItemBase_GetInteractingCharacter::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemBase.IsItemDisabled
// 0x0001 (0x0001 - 0x0000)
struct SHItemBase_IsItemDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemBase_IsItemDisabled) == 0x000001, "Wrong alignment on SHItemBase_IsItemDisabled");
static_assert(sizeof(SHItemBase_IsItemDisabled) == 0x000001, "Wrong size on SHItemBase_IsItemDisabled");
static_assert(offsetof(SHItemBase_IsItemDisabled, ReturnValue) == 0x000000, "Member 'SHItemBase_IsItemDisabled::ReturnValue' has a wrong offset!");

// DelegateFunction SHProto.SHItem.SHItemEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHItem_SHItemEvent__DelegateSignature final
{
public:
	class ASHItem*                                ItemPtr;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItem_SHItemEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHItem_SHItemEvent__DelegateSignature");
static_assert(sizeof(SHItem_SHItemEvent__DelegateSignature) == 0x000008, "Wrong size on SHItem_SHItemEvent__DelegateSignature");
static_assert(offsetof(SHItem_SHItemEvent__DelegateSignature, ItemPtr) == 0x000000, "Member 'SHItem_SHItemEvent__DelegateSignature::ItemPtr' has a wrong offset!");

// Function SHProto.SHItem.WasCollected
// 0x0001 (0x0001 - 0x0000)
struct SHItem_WasCollected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItem_WasCollected) == 0x000001, "Wrong alignment on SHItem_WasCollected");
static_assert(sizeof(SHItem_WasCollected) == 0x000001, "Wrong size on SHItem_WasCollected");
static_assert(offsetof(SHItem_WasCollected, ReturnValue) == 0x000000, "Member 'SHItem_WasCollected::ReturnValue' has a wrong offset!");

// Function SHProto.SHDynamicWidgetAnimStatics.SHReplacePossessable
// 0x0078 (0x0078 - 0x0000)
struct SHDynamicWidgetAnimStatics_SHReplacePossessable final
{
public:
	class UMovieScene*                            InMovieScene;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  OldGuid;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieScenePossessable                 InNewPossessable;                                  // 0x0018(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHDynamicWidgetAnimStatics_SHReplacePossessable) == 0x000008, "Wrong alignment on SHDynamicWidgetAnimStatics_SHReplacePossessable");
static_assert(sizeof(SHDynamicWidgetAnimStatics_SHReplacePossessable) == 0x000078, "Wrong size on SHDynamicWidgetAnimStatics_SHReplacePossessable");
static_assert(offsetof(SHDynamicWidgetAnimStatics_SHReplacePossessable, InMovieScene) == 0x000000, "Member 'SHDynamicWidgetAnimStatics_SHReplacePossessable::InMovieScene' has a wrong offset!");
static_assert(offsetof(SHDynamicWidgetAnimStatics_SHReplacePossessable, OldGuid) == 0x000008, "Member 'SHDynamicWidgetAnimStatics_SHReplacePossessable::OldGuid' has a wrong offset!");
static_assert(offsetof(SHDynamicWidgetAnimStatics_SHReplacePossessable, InNewPossessable) == 0x000018, "Member 'SHDynamicWidgetAnimStatics_SHReplacePossessable::InNewPossessable' has a wrong offset!");
static_assert(offsetof(SHDynamicWidgetAnimStatics_SHReplacePossessable, ReturnValue) == 0x000070, "Member 'SHDynamicWidgetAnimStatics_SHReplacePossessable::ReturnValue' has a wrong offset!");

// Function SHProto.SHProjectile.IsMaxRangeReached
// 0x0001 (0x0001 - 0x0000)
struct SHProjectile_IsMaxRangeReached final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHProjectile_IsMaxRangeReached) == 0x000001, "Wrong alignment on SHProjectile_IsMaxRangeReached");
static_assert(sizeof(SHProjectile_IsMaxRangeReached) == 0x000001, "Wrong size on SHProjectile_IsMaxRangeReached");
static_assert(offsetof(SHProjectile_IsMaxRangeReached, ReturnValue) == 0x000000, "Member 'SHProjectile_IsMaxRangeReached::ReturnValue' has a wrong offset!");

// Function SHProto.SHProjectile.WantDrawDebug
// 0x0001 (0x0001 - 0x0000)
struct SHProjectile_WantDrawDebug final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHProjectile_WantDrawDebug) == 0x000001, "Wrong alignment on SHProjectile_WantDrawDebug");
static_assert(sizeof(SHProjectile_WantDrawDebug) == 0x000001, "Wrong size on SHProjectile_WantDrawDebug");
static_assert(offsetof(SHProjectile_WantDrawDebug, ReturnValue) == 0x000000, "Member 'SHProjectile_WantDrawDebug::ReturnValue' has a wrong offset!");

// Function SHProto.SHEddieLocomotionAnimInstance.GetEddieAnimInstanceStateData
// 0x0008 (0x0008 - 0x0000)
struct SHEddieLocomotionAnimInstance_GetEddieAnimInstanceStateData final
{
public:
	class USHEddieAnimInstanceStateData*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEddieLocomotionAnimInstance_GetEddieAnimInstanceStateData) == 0x000008, "Wrong alignment on SHEddieLocomotionAnimInstance_GetEddieAnimInstanceStateData");
static_assert(sizeof(SHEddieLocomotionAnimInstance_GetEddieAnimInstanceStateData) == 0x000008, "Wrong size on SHEddieLocomotionAnimInstance_GetEddieAnimInstanceStateData");
static_assert(offsetof(SHEddieLocomotionAnimInstance_GetEddieAnimInstanceStateData, ReturnValue) == 0x000000, "Member 'SHEddieLocomotionAnimInstance_GetEddieAnimInstanceStateData::ReturnValue' has a wrong offset!");

// Function SHProto.SHEddieWalkingLocomotionAnimInstance.GetSmoothedDesiredRotationYaw
// 0x0004 (0x0004 - 0x0000)
struct SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw final
{
public:
	float                                         OutYaw;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw) == 0x000004, "Wrong alignment on SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw");
static_assert(sizeof(SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw) == 0x000004, "Wrong size on SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw");
static_assert(offsetof(SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw, OutYaw) == 0x000000, "Member 'SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw::OutYaw' has a wrong offset!");

// Function SHProto.SHEddieWalkingLocomotionAnimInstance.GetSmoothedDesiredVelocity
// 0x0018 (0x0018 - 0x0000)
struct SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredVelocity final
{
public:
	struct FVector                                OutVelocity;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredVelocity) == 0x000008, "Wrong alignment on SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredVelocity");
static_assert(sizeof(SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredVelocity) == 0x000018, "Wrong size on SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredVelocity");
static_assert(offsetof(SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredVelocity, OutVelocity) == 0x000000, "Member 'SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredVelocity::OutVelocity' has a wrong offset!");

// Function SHProto.SHEddieWalkingLocomotionAnimInstance.GetSmoothedDesiredVelocitySizeAndYaw
// 0x0008 (0x0008 - 0x0000)
struct SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw final
{
public:
	float                                         OutVelocitySize;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVelocityYaw;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw) == 0x000004, "Wrong alignment on SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw");
static_assert(sizeof(SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw) == 0x000008, "Wrong size on SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw");
static_assert(offsetof(SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw, OutVelocitySize) == 0x000000, "Member 'SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw::OutVelocitySize' has a wrong offset!");
static_assert(offsetof(SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw, OutVelocityYaw) == 0x000004, "Member 'SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw::OutVelocityYaw' has a wrong offset!");

// Function SHProto.SHEddieWalkingLocomotionAnimInstance.GetSmoothedDesiredVelocitySizeAndYawLimitedToDirection
// 0x0010 (0x0010 - 0x0000)
struct SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYawLimitedToDirection final
{
public:
	float                                         OutVelocitySize;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVelocityYaw;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDirectionYaw;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InToleranceAngle;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYawLimitedToDirection) == 0x000004, "Wrong alignment on SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYawLimitedToDirection");
static_assert(sizeof(SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYawLimitedToDirection) == 0x000010, "Wrong size on SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYawLimitedToDirection");
static_assert(offsetof(SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYawLimitedToDirection, OutVelocitySize) == 0x000000, "Member 'SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYawLimitedToDirection::OutVelocitySize' has a wrong offset!");
static_assert(offsetof(SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYawLimitedToDirection, OutVelocityYaw) == 0x000004, "Member 'SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYawLimitedToDirection::OutVelocityYaw' has a wrong offset!");
static_assert(offsetof(SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYawLimitedToDirection, InDirectionYaw) == 0x000008, "Member 'SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYawLimitedToDirection::InDirectionYaw' has a wrong offset!");
static_assert(offsetof(SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYawLimitedToDirection, InToleranceAngle) == 0x00000C, "Member 'SHEddieWalkingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYawLimitedToDirection::InToleranceAngle' has a wrong offset!");

// Function SHProto.SHEddieWalkingLocomotionAnimInstance.GetSmoothedLookAt
// 0x0020 (0x0020 - 0x0000)
struct SHEddieWalkingLocomotionAnimInstance_GetSmoothedLookAt final
{
public:
	struct FRotator                               OutRotation;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         OutAlpha;                                          // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHEddieWalkingLocomotionAnimInstance_GetSmoothedLookAt) == 0x000008, "Wrong alignment on SHEddieWalkingLocomotionAnimInstance_GetSmoothedLookAt");
static_assert(sizeof(SHEddieWalkingLocomotionAnimInstance_GetSmoothedLookAt) == 0x000020, "Wrong size on SHEddieWalkingLocomotionAnimInstance_GetSmoothedLookAt");
static_assert(offsetof(SHEddieWalkingLocomotionAnimInstance_GetSmoothedLookAt, OutRotation) == 0x000000, "Member 'SHEddieWalkingLocomotionAnimInstance_GetSmoothedLookAt::OutRotation' has a wrong offset!");
static_assert(offsetof(SHEddieWalkingLocomotionAnimInstance_GetSmoothedLookAt, OutAlpha) == 0x000018, "Member 'SHEddieWalkingLocomotionAnimInstance_GetSmoothedLookAt::OutAlpha' has a wrong offset!");

// Function SHProto.SHEddieWalkingLocomotionAnimInstance.GetTargetDesiredRotationYaw
// 0x0004 (0x0004 - 0x0000)
struct SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredRotationYaw final
{
public:
	float                                         OutYaw;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredRotationYaw) == 0x000004, "Wrong alignment on SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredRotationYaw");
static_assert(sizeof(SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredRotationYaw) == 0x000004, "Wrong size on SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredRotationYaw");
static_assert(offsetof(SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredRotationYaw, OutYaw) == 0x000000, "Member 'SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredRotationYaw::OutYaw' has a wrong offset!");

// Function SHProto.SHEddieWalkingLocomotionAnimInstance.GetTargetDesiredVelocity
// 0x0018 (0x0018 - 0x0000)
struct SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredVelocity final
{
public:
	struct FVector                                OutVelocity;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredVelocity) == 0x000008, "Wrong alignment on SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredVelocity");
static_assert(sizeof(SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredVelocity) == 0x000018, "Wrong size on SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredVelocity");
static_assert(offsetof(SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredVelocity, OutVelocity) == 0x000000, "Member 'SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredVelocity::OutVelocity' has a wrong offset!");

// Function SHProto.SHEddieWalkingLocomotionAnimInstance.GetTargetDesiredVelocitySizeAndYaw
// 0x0008 (0x0008 - 0x0000)
struct SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw final
{
public:
	float                                         OutVelocitySize;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVelocityYaw;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw) == 0x000004, "Wrong alignment on SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw");
static_assert(sizeof(SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw) == 0x000008, "Wrong size on SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw");
static_assert(offsetof(SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw, OutVelocitySize) == 0x000000, "Member 'SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw::OutVelocitySize' has a wrong offset!");
static_assert(offsetof(SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw, OutVelocityYaw) == 0x000004, "Member 'SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw::OutVelocityYaw' has a wrong offset!");

// Function SHProto.SHEddieWalkingLocomotionAnimInstance.GetTargetDesiredVelocitySizeAndYawLimitedToDirection
// 0x0010 (0x0010 - 0x0000)
struct SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYawLimitedToDirection final
{
public:
	float                                         OutVelocitySize;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVelocityYaw;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDirectionYaw;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InToleranceAngle;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYawLimitedToDirection) == 0x000004, "Wrong alignment on SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYawLimitedToDirection");
static_assert(sizeof(SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYawLimitedToDirection) == 0x000010, "Wrong size on SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYawLimitedToDirection");
static_assert(offsetof(SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYawLimitedToDirection, OutVelocitySize) == 0x000000, "Member 'SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYawLimitedToDirection::OutVelocitySize' has a wrong offset!");
static_assert(offsetof(SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYawLimitedToDirection, OutVelocityYaw) == 0x000004, "Member 'SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYawLimitedToDirection::OutVelocityYaw' has a wrong offset!");
static_assert(offsetof(SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYawLimitedToDirection, InDirectionYaw) == 0x000008, "Member 'SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYawLimitedToDirection::InDirectionYaw' has a wrong offset!");
static_assert(offsetof(SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYawLimitedToDirection, InToleranceAngle) == 0x00000C, "Member 'SHEddieWalkingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYawLimitedToDirection::InToleranceAngle' has a wrong offset!");

// Function SHProto.SHEddieWalkingLocomotionAnimInstance.GetTargetLookAtAlpha
// 0x0004 (0x0004 - 0x0000)
struct SHEddieWalkingLocomotionAnimInstance_GetTargetLookAtAlpha final
{
public:
	float                                         OutAlpha;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEddieWalkingLocomotionAnimInstance_GetTargetLookAtAlpha) == 0x000004, "Wrong alignment on SHEddieWalkingLocomotionAnimInstance_GetTargetLookAtAlpha");
static_assert(sizeof(SHEddieWalkingLocomotionAnimInstance_GetTargetLookAtAlpha) == 0x000004, "Wrong size on SHEddieWalkingLocomotionAnimInstance_GetTargetLookAtAlpha");
static_assert(offsetof(SHEddieWalkingLocomotionAnimInstance_GetTargetLookAtAlpha, OutAlpha) == 0x000000, "Member 'SHEddieWalkingLocomotionAnimInstance_GetTargetLookAtAlpha::OutAlpha' has a wrong offset!");

// Function SHProto.KeyRichTexts.GetKeyDisplayRichText
// 0x0030 (0x0030 - 0x0000)
struct KeyRichTexts_GetKeyDisplayRichText final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeyRichTexts_GetKeyDisplayRichText) == 0x000008, "Wrong alignment on KeyRichTexts_GetKeyDisplayRichText");
static_assert(sizeof(KeyRichTexts_GetKeyDisplayRichText) == 0x000030, "Wrong size on KeyRichTexts_GetKeyDisplayRichText");
static_assert(offsetof(KeyRichTexts_GetKeyDisplayRichText, Key) == 0x000000, "Member 'KeyRichTexts_GetKeyDisplayRichText::Key' has a wrong offset!");
static_assert(offsetof(KeyRichTexts_GetKeyDisplayRichText, ReturnValue) == 0x000018, "Member 'KeyRichTexts_GetKeyDisplayRichText::ReturnValue' has a wrong offset!");

// Function SHProto.SHOtherStatics.BoxComponentEncompassesPoint
// 0x0028 (0x0028 - 0x0000)
struct SHOtherStatics_BoxComponentEncompassesPoint final
{
public:
	class UBoxComponent*                          InBoxComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InCheckedPoint;                                    // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHOtherStatics_BoxComponentEncompassesPoint) == 0x000008, "Wrong alignment on SHOtherStatics_BoxComponentEncompassesPoint");
static_assert(sizeof(SHOtherStatics_BoxComponentEncompassesPoint) == 0x000028, "Wrong size on SHOtherStatics_BoxComponentEncompassesPoint");
static_assert(offsetof(SHOtherStatics_BoxComponentEncompassesPoint, InBoxComponent) == 0x000000, "Member 'SHOtherStatics_BoxComponentEncompassesPoint::InBoxComponent' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_BoxComponentEncompassesPoint, InCheckedPoint) == 0x000008, "Member 'SHOtherStatics_BoxComponentEncompassesPoint::InCheckedPoint' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_BoxComponentEncompassesPoint, ReturnValue) == 0x000020, "Member 'SHOtherStatics_BoxComponentEncompassesPoint::ReturnValue' has a wrong offset!");

// Function SHProto.SHOtherStatics.CanDrawLevelDebug
// 0x0010 (0x0010 - 0x0000)
struct SHOtherStatics_CanDrawLevelDebug final
{
public:
	const class AActor*                           InActorContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHOtherStatics_CanDrawLevelDebug) == 0x000008, "Wrong alignment on SHOtherStatics_CanDrawLevelDebug");
static_assert(sizeof(SHOtherStatics_CanDrawLevelDebug) == 0x000010, "Wrong size on SHOtherStatics_CanDrawLevelDebug");
static_assert(offsetof(SHOtherStatics_CanDrawLevelDebug, InActorContext) == 0x000000, "Member 'SHOtherStatics_CanDrawLevelDebug::InActorContext' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_CanDrawLevelDebug, ReturnValue) == 0x000008, "Member 'SHOtherStatics_CanDrawLevelDebug::ReturnValue' has a wrong offset!");

// Function SHProto.SHOtherStatics.ClearWorldState
// 0x0008 (0x0008 - 0x0000)
struct SHOtherStatics_ClearWorldState final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHOtherStatics_ClearWorldState) == 0x000008, "Wrong alignment on SHOtherStatics_ClearWorldState");
static_assert(sizeof(SHOtherStatics_ClearWorldState) == 0x000008, "Wrong size on SHOtherStatics_ClearWorldState");
static_assert(offsetof(SHOtherStatics_ClearWorldState, WorldContextObject) == 0x000000, "Member 'SHOtherStatics_ClearWorldState::WorldContextObject' has a wrong offset!");

// Function SHProto.SHOtherStatics.DisableAffectNavigation
// 0x0008 (0x0008 - 0x0000)
struct SHOtherStatics_DisableAffectNavigation final
{
public:
	class UActorComponent*                        InActorComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHOtherStatics_DisableAffectNavigation) == 0x000008, "Wrong alignment on SHOtherStatics_DisableAffectNavigation");
static_assert(sizeof(SHOtherStatics_DisableAffectNavigation) == 0x000008, "Wrong size on SHOtherStatics_DisableAffectNavigation");
static_assert(offsetof(SHOtherStatics_DisableAffectNavigation, InActorComponent) == 0x000000, "Member 'SHOtherStatics_DisableAffectNavigation::InActorComponent' has a wrong offset!");

// Function SHProto.SHOtherStatics.DrawDebugArc
// 0x0080 (0x0080 - 0x0000)
struct SHOtherStatics_DrawDebugArc final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Center;                                            // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAngle;                                          // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngle;                                          // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSegments;                                       // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0030(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                YAxis;                                             // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ZAxis;                                             // 0x0060(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawAxis;                                         // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHOtherStatics_DrawDebugArc) == 0x000008, "Wrong alignment on SHOtherStatics_DrawDebugArc");
static_assert(sizeof(SHOtherStatics_DrawDebugArc) == 0x000080, "Wrong size on SHOtherStatics_DrawDebugArc");
static_assert(offsetof(SHOtherStatics_DrawDebugArc, WorldContextObject) == 0x000000, "Member 'SHOtherStatics_DrawDebugArc::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugArc, Center) == 0x000008, "Member 'SHOtherStatics_DrawDebugArc::Center' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugArc, MinAngle) == 0x000020, "Member 'SHOtherStatics_DrawDebugArc::MinAngle' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugArc, MaxAngle) == 0x000024, "Member 'SHOtherStatics_DrawDebugArc::MaxAngle' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugArc, Radius) == 0x000028, "Member 'SHOtherStatics_DrawDebugArc::Radius' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugArc, NumSegments) == 0x00002C, "Member 'SHOtherStatics_DrawDebugArc::NumSegments' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugArc, Color) == 0x000030, "Member 'SHOtherStatics_DrawDebugArc::Color' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugArc, Duration) == 0x000040, "Member 'SHOtherStatics_DrawDebugArc::Duration' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugArc, Thickness) == 0x000044, "Member 'SHOtherStatics_DrawDebugArc::Thickness' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugArc, YAxis) == 0x000048, "Member 'SHOtherStatics_DrawDebugArc::YAxis' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugArc, ZAxis) == 0x000060, "Member 'SHOtherStatics_DrawDebugArc::ZAxis' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugArc, bDrawAxis) == 0x000078, "Member 'SHOtherStatics_DrawDebugArc::bDrawAxis' has a wrong offset!");

// Function SHProto.SHOtherStatics.DrawDebugBoxEx
// 0x0078 (0x0078 - 0x0000)
struct SHOtherStatics_DrawDebugBoxEx final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Center;                                            // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Box;                                               // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0038(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0050(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TopPlaneDepthPriority;                             // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BottomPlaneDepthPriority;                          // 0x006C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SidesPlanesDepthPriority;                          // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHOtherStatics_DrawDebugBoxEx) == 0x000008, "Wrong alignment on SHOtherStatics_DrawDebugBoxEx");
static_assert(sizeof(SHOtherStatics_DrawDebugBoxEx) == 0x000078, "Wrong size on SHOtherStatics_DrawDebugBoxEx");
static_assert(offsetof(SHOtherStatics_DrawDebugBoxEx, WorldContextObject) == 0x000000, "Member 'SHOtherStatics_DrawDebugBoxEx::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugBoxEx, Center) == 0x000008, "Member 'SHOtherStatics_DrawDebugBoxEx::Center' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugBoxEx, Box) == 0x000020, "Member 'SHOtherStatics_DrawDebugBoxEx::Box' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugBoxEx, Rotation) == 0x000038, "Member 'SHOtherStatics_DrawDebugBoxEx::Rotation' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugBoxEx, Color) == 0x000050, "Member 'SHOtherStatics_DrawDebugBoxEx::Color' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugBoxEx, Duration) == 0x000060, "Member 'SHOtherStatics_DrawDebugBoxEx::Duration' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugBoxEx, Thickness) == 0x000064, "Member 'SHOtherStatics_DrawDebugBoxEx::Thickness' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugBoxEx, TopPlaneDepthPriority) == 0x000068, "Member 'SHOtherStatics_DrawDebugBoxEx::TopPlaneDepthPriority' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugBoxEx, BottomPlaneDepthPriority) == 0x00006C, "Member 'SHOtherStatics_DrawDebugBoxEx::BottomPlaneDepthPriority' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugBoxEx, SidesPlanesDepthPriority) == 0x000070, "Member 'SHOtherStatics_DrawDebugBoxEx::SidesPlanesDepthPriority' has a wrong offset!");

// Function SHProto.SHOtherStatics.DrawDebugRadiusAtSimpleSplineComponent
// 0x0030 (0x0030 - 0x0000)
struct SHOtherStatics_DrawDebugRadiusAtSimpleSplineComponent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       SplineComponent;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightOffset;                                      // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHOtherStatics_DrawDebugRadiusAtSimpleSplineComponent) == 0x000008, "Wrong alignment on SHOtherStatics_DrawDebugRadiusAtSimpleSplineComponent");
static_assert(sizeof(SHOtherStatics_DrawDebugRadiusAtSimpleSplineComponent) == 0x000030, "Wrong size on SHOtherStatics_DrawDebugRadiusAtSimpleSplineComponent");
static_assert(offsetof(SHOtherStatics_DrawDebugRadiusAtSimpleSplineComponent, WorldContextObject) == 0x000000, "Member 'SHOtherStatics_DrawDebugRadiusAtSimpleSplineComponent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugRadiusAtSimpleSplineComponent, SplineComponent) == 0x000008, "Member 'SHOtherStatics_DrawDebugRadiusAtSimpleSplineComponent::SplineComponent' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugRadiusAtSimpleSplineComponent, Radius) == 0x000010, "Member 'SHOtherStatics_DrawDebugRadiusAtSimpleSplineComponent::Radius' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugRadiusAtSimpleSplineComponent, HeightOffset) == 0x000014, "Member 'SHOtherStatics_DrawDebugRadiusAtSimpleSplineComponent::HeightOffset' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugRadiusAtSimpleSplineComponent, Color) == 0x000018, "Member 'SHOtherStatics_DrawDebugRadiusAtSimpleSplineComponent::Color' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugRadiusAtSimpleSplineComponent, Duration) == 0x000028, "Member 'SHOtherStatics_DrawDebugRadiusAtSimpleSplineComponent::Duration' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugRadiusAtSimpleSplineComponent, Thickness) == 0x00002C, "Member 'SHOtherStatics_DrawDebugRadiusAtSimpleSplineComponent::Thickness' has a wrong offset!");

// Function SHProto.SHOtherStatics.DrawDebugSegmentRadius2D
// 0x0058 (0x0058 - 0x0000)
struct SHOtherStatics_DrawDebugSegmentRadius2D final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SegmentStart;                                      // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SegmentEnd;                                        // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x003C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x004C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0050(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHOtherStatics_DrawDebugSegmentRadius2D) == 0x000008, "Wrong alignment on SHOtherStatics_DrawDebugSegmentRadius2D");
static_assert(sizeof(SHOtherStatics_DrawDebugSegmentRadius2D) == 0x000058, "Wrong size on SHOtherStatics_DrawDebugSegmentRadius2D");
static_assert(offsetof(SHOtherStatics_DrawDebugSegmentRadius2D, WorldContextObject) == 0x000000, "Member 'SHOtherStatics_DrawDebugSegmentRadius2D::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugSegmentRadius2D, SegmentStart) == 0x000008, "Member 'SHOtherStatics_DrawDebugSegmentRadius2D::SegmentStart' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugSegmentRadius2D, SegmentEnd) == 0x000020, "Member 'SHOtherStatics_DrawDebugSegmentRadius2D::SegmentEnd' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugSegmentRadius2D, Radius) == 0x000038, "Member 'SHOtherStatics_DrawDebugSegmentRadius2D::Radius' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugSegmentRadius2D, Color) == 0x00003C, "Member 'SHOtherStatics_DrawDebugSegmentRadius2D::Color' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugSegmentRadius2D, DrawTime) == 0x00004C, "Member 'SHOtherStatics_DrawDebugSegmentRadius2D::DrawTime' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugSegmentRadius2D, Thickness) == 0x000050, "Member 'SHOtherStatics_DrawDebugSegmentRadius2D::Thickness' has a wrong offset!");

// Function SHProto.SHOtherStatics.DrawDebugSimpleCylinder
// 0x0058 (0x0058 - 0x0000)
struct SHOtherStatics_DrawDebugSimpleCylinder final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartPosition;                                     // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndPosition;                                       // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x003C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x004C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0050(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHOtherStatics_DrawDebugSimpleCylinder) == 0x000008, "Wrong alignment on SHOtherStatics_DrawDebugSimpleCylinder");
static_assert(sizeof(SHOtherStatics_DrawDebugSimpleCylinder) == 0x000058, "Wrong size on SHOtherStatics_DrawDebugSimpleCylinder");
static_assert(offsetof(SHOtherStatics_DrawDebugSimpleCylinder, WorldContextObject) == 0x000000, "Member 'SHOtherStatics_DrawDebugSimpleCylinder::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugSimpleCylinder, StartPosition) == 0x000008, "Member 'SHOtherStatics_DrawDebugSimpleCylinder::StartPosition' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugSimpleCylinder, EndPosition) == 0x000020, "Member 'SHOtherStatics_DrawDebugSimpleCylinder::EndPosition' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugSimpleCylinder, Radius) == 0x000038, "Member 'SHOtherStatics_DrawDebugSimpleCylinder::Radius' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugSimpleCylinder, Color) == 0x00003C, "Member 'SHOtherStatics_DrawDebugSimpleCylinder::Color' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugSimpleCylinder, DrawTime) == 0x00004C, "Member 'SHOtherStatics_DrawDebugSimpleCylinder::DrawTime' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugSimpleCylinder, Thickness) == 0x000050, "Member 'SHOtherStatics_DrawDebugSimpleCylinder::Thickness' has a wrong offset!");

// Function SHProto.SHOtherStatics.DrawDebugStaticMeshComponent
// 0x0028 (0x0028 - 0x0000)
struct SHOtherStatics_DrawDebugStaticMeshComponent final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHOtherStatics_DrawDebugStaticMeshComponent) == 0x000008, "Wrong alignment on SHOtherStatics_DrawDebugStaticMeshComponent");
static_assert(sizeof(SHOtherStatics_DrawDebugStaticMeshComponent) == 0x000028, "Wrong size on SHOtherStatics_DrawDebugStaticMeshComponent");
static_assert(offsetof(SHOtherStatics_DrawDebugStaticMeshComponent, WorldContextObject) == 0x000000, "Member 'SHOtherStatics_DrawDebugStaticMeshComponent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugStaticMeshComponent, StaticMeshComponent) == 0x000008, "Member 'SHOtherStatics_DrawDebugStaticMeshComponent::StaticMeshComponent' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugStaticMeshComponent, Color) == 0x000010, "Member 'SHOtherStatics_DrawDebugStaticMeshComponent::Color' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugStaticMeshComponent, Duration) == 0x000020, "Member 'SHOtherStatics_DrawDebugStaticMeshComponent::Duration' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugStaticMeshComponent, Thickness) == 0x000024, "Member 'SHOtherStatics_DrawDebugStaticMeshComponent::Thickness' has a wrong offset!");

// Function SHProto.SHOtherStatics.DrawDebugVolume
// 0x0030 (0x0030 - 0x0000)
struct SHOtherStatics_DrawDebugVolume final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVolume*                                InVolume;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTriangulate;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0014(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHOtherStatics_DrawDebugVolume) == 0x000008, "Wrong alignment on SHOtherStatics_DrawDebugVolume");
static_assert(sizeof(SHOtherStatics_DrawDebugVolume) == 0x000030, "Wrong size on SHOtherStatics_DrawDebugVolume");
static_assert(offsetof(SHOtherStatics_DrawDebugVolume, WorldContextObject) == 0x000000, "Member 'SHOtherStatics_DrawDebugVolume::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugVolume, InVolume) == 0x000008, "Member 'SHOtherStatics_DrawDebugVolume::InVolume' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugVolume, bUseTriangulate) == 0x000010, "Member 'SHOtherStatics_DrawDebugVolume::bUseTriangulate' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugVolume, Color) == 0x000014, "Member 'SHOtherStatics_DrawDebugVolume::Color' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugVolume, Duration) == 0x000024, "Member 'SHOtherStatics_DrawDebugVolume::Duration' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_DrawDebugVolume, Thickness) == 0x000028, "Member 'SHOtherStatics_DrawDebugVolume::Thickness' has a wrong offset!");

// Function SHProto.SHOtherStatics.FindFurthestActor
// 0x0038 (0x0038 - 0x0000)
struct SHOtherStatics_FindFurthestActor final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ActorsToCheck;                                     // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHOtherStatics_FindFurthestActor) == 0x000008, "Wrong alignment on SHOtherStatics_FindFurthestActor");
static_assert(sizeof(SHOtherStatics_FindFurthestActor) == 0x000038, "Wrong size on SHOtherStatics_FindFurthestActor");
static_assert(offsetof(SHOtherStatics_FindFurthestActor, Origin) == 0x000000, "Member 'SHOtherStatics_FindFurthestActor::Origin' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_FindFurthestActor, ActorsToCheck) == 0x000018, "Member 'SHOtherStatics_FindFurthestActor::ActorsToCheck' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_FindFurthestActor, Distance) == 0x000028, "Member 'SHOtherStatics_FindFurthestActor::Distance' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_FindFurthestActor, ReturnValue) == 0x000030, "Member 'SHOtherStatics_FindFurthestActor::ReturnValue' has a wrong offset!");

// Function SHProto.SHOtherStatics.FInterpToConstantAngle
// 0x0014 (0x0014 - 0x0000)
struct SHOtherStatics_FInterpToConstantAngle final
{
public:
	float                                         Current;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Target;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHOtherStatics_FInterpToConstantAngle) == 0x000004, "Wrong alignment on SHOtherStatics_FInterpToConstantAngle");
static_assert(sizeof(SHOtherStatics_FInterpToConstantAngle) == 0x000014, "Wrong size on SHOtherStatics_FInterpToConstantAngle");
static_assert(offsetof(SHOtherStatics_FInterpToConstantAngle, Current) == 0x000000, "Member 'SHOtherStatics_FInterpToConstantAngle::Current' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_FInterpToConstantAngle, Target) == 0x000004, "Member 'SHOtherStatics_FInterpToConstantAngle::Target' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_FInterpToConstantAngle, DeltaTime) == 0x000008, "Member 'SHOtherStatics_FInterpToConstantAngle::DeltaTime' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_FInterpToConstantAngle, Speed) == 0x00000C, "Member 'SHOtherStatics_FInterpToConstantAngle::Speed' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_FInterpToConstantAngle, ReturnValue) == 0x000010, "Member 'SHOtherStatics_FInterpToConstantAngle::ReturnValue' has a wrong offset!");

// Function SHProto.SHOtherStatics.GenerateGridLocationsArray
// 0x00A0 (0x00A0 - 0x0000)
struct SHOtherStatics_GenerateGridLocationsArray final
{
public:
	struct FVector                                GridStartPoint;                                    // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              GridSize;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              GridDistribution;                                  // 0x0020(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             GridWorldTransform;                                // 0x0030(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ReturnValue;                                       // 0x0090(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHOtherStatics_GenerateGridLocationsArray) == 0x000010, "Wrong alignment on SHOtherStatics_GenerateGridLocationsArray");
static_assert(sizeof(SHOtherStatics_GenerateGridLocationsArray) == 0x0000A0, "Wrong size on SHOtherStatics_GenerateGridLocationsArray");
static_assert(offsetof(SHOtherStatics_GenerateGridLocationsArray, GridStartPoint) == 0x000000, "Member 'SHOtherStatics_GenerateGridLocationsArray::GridStartPoint' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_GenerateGridLocationsArray, GridSize) == 0x000018, "Member 'SHOtherStatics_GenerateGridLocationsArray::GridSize' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_GenerateGridLocationsArray, GridDistribution) == 0x000020, "Member 'SHOtherStatics_GenerateGridLocationsArray::GridDistribution' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_GenerateGridLocationsArray, GridWorldTransform) == 0x000030, "Member 'SHOtherStatics_GenerateGridLocationsArray::GridWorldTransform' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_GenerateGridLocationsArray, ReturnValue) == 0x000090, "Member 'SHOtherStatics_GenerateGridLocationsArray::ReturnValue' has a wrong offset!");

// Function SHProto.SHOtherStatics.GetAnimToPlay
// 0x0010 (0x0010 - 0x0000)
struct SHOtherStatics_GetAnimToPlay final
{
public:
	class USkeletalMeshComponent*                 InComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHOtherStatics_GetAnimToPlay) == 0x000008, "Wrong alignment on SHOtherStatics_GetAnimToPlay");
static_assert(sizeof(SHOtherStatics_GetAnimToPlay) == 0x000010, "Wrong size on SHOtherStatics_GetAnimToPlay");
static_assert(offsetof(SHOtherStatics_GetAnimToPlay, InComponent) == 0x000000, "Member 'SHOtherStatics_GetAnimToPlay::InComponent' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_GetAnimToPlay, ReturnValue) == 0x000008, "Member 'SHOtherStatics_GetAnimToPlay::ReturnValue' has a wrong offset!");

// Function SHProto.SHOtherStatics.GetEquipmentDataTable
// 0x0008 (0x0008 - 0x0000)
struct SHOtherStatics_GetEquipmentDataTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHOtherStatics_GetEquipmentDataTable) == 0x000008, "Wrong alignment on SHOtherStatics_GetEquipmentDataTable");
static_assert(sizeof(SHOtherStatics_GetEquipmentDataTable) == 0x000008, "Wrong size on SHOtherStatics_GetEquipmentDataTable");
static_assert(offsetof(SHOtherStatics_GetEquipmentDataTable, ReturnValue) == 0x000000, "Member 'SHOtherStatics_GetEquipmentDataTable::ReturnValue' has a wrong offset!");

// Function SHProto.SHOtherStatics.GetFirstViewportTransform
// 0x0060 (0x0060 - 0x0000)
struct SHOtherStatics_GetFirstViewportTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHOtherStatics_GetFirstViewportTransform) == 0x000010, "Wrong alignment on SHOtherStatics_GetFirstViewportTransform");
static_assert(sizeof(SHOtherStatics_GetFirstViewportTransform) == 0x000060, "Wrong size on SHOtherStatics_GetFirstViewportTransform");
static_assert(offsetof(SHOtherStatics_GetFirstViewportTransform, ReturnValue) == 0x000000, "Member 'SHOtherStatics_GetFirstViewportTransform::ReturnValue' has a wrong offset!");

// Function SHProto.SHOtherStatics.GetGenericDeathPlayerFullAreaWork
// 0x0040 (0x0040 - 0x0000)
struct SHOtherStatics_GetGenericDeathPlayerFullAreaWork final
{
public:
	TSubclassOf<class ASHCharacterPlayGenericDeathPlayer> InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutExtend;                                         // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutRelLoc;                                         // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHOtherStatics_GetGenericDeathPlayerFullAreaWork) == 0x000008, "Wrong alignment on SHOtherStatics_GetGenericDeathPlayerFullAreaWork");
static_assert(sizeof(SHOtherStatics_GetGenericDeathPlayerFullAreaWork) == 0x000040, "Wrong size on SHOtherStatics_GetGenericDeathPlayerFullAreaWork");
static_assert(offsetof(SHOtherStatics_GetGenericDeathPlayerFullAreaWork, InClass) == 0x000000, "Member 'SHOtherStatics_GetGenericDeathPlayerFullAreaWork::InClass' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_GetGenericDeathPlayerFullAreaWork, OutExtend) == 0x000008, "Member 'SHOtherStatics_GetGenericDeathPlayerFullAreaWork::OutExtend' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_GetGenericDeathPlayerFullAreaWork, OutRelLoc) == 0x000020, "Member 'SHOtherStatics_GetGenericDeathPlayerFullAreaWork::OutRelLoc' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_GetGenericDeathPlayerFullAreaWork, ReturnValue) == 0x000038, "Member 'SHOtherStatics_GetGenericDeathPlayerFullAreaWork::ReturnValue' has a wrong offset!");

// Function SHProto.SHOtherStatics.GetGFrameNumber
// 0x0004 (0x0004 - 0x0000)
struct SHOtherStatics_GetGFrameNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHOtherStatics_GetGFrameNumber) == 0x000004, "Wrong alignment on SHOtherStatics_GetGFrameNumber");
static_assert(sizeof(SHOtherStatics_GetGFrameNumber) == 0x000004, "Wrong size on SHOtherStatics_GetGFrameNumber");
static_assert(offsetof(SHOtherStatics_GetGFrameNumber, ReturnValue) == 0x000000, "Member 'SHOtherStatics_GetGFrameNumber::ReturnValue' has a wrong offset!");

// Function SHProto.SHOtherStatics.GetItemsDataTable
// 0x0008 (0x0008 - 0x0000)
struct SHOtherStatics_GetItemsDataTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHOtherStatics_GetItemsDataTable) == 0x000008, "Wrong alignment on SHOtherStatics_GetItemsDataTable");
static_assert(sizeof(SHOtherStatics_GetItemsDataTable) == 0x000008, "Wrong size on SHOtherStatics_GetItemsDataTable");
static_assert(offsetof(SHOtherStatics_GetItemsDataTable, ReturnValue) == 0x000000, "Member 'SHOtherStatics_GetItemsDataTable::ReturnValue' has a wrong offset!");

// Function SHProto.SHOtherStatics.GetMapsDataTable
// 0x0008 (0x0008 - 0x0000)
struct SHOtherStatics_GetMapsDataTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHOtherStatics_GetMapsDataTable) == 0x000008, "Wrong alignment on SHOtherStatics_GetMapsDataTable");
static_assert(sizeof(SHOtherStatics_GetMapsDataTable) == 0x000008, "Wrong size on SHOtherStatics_GetMapsDataTable");
static_assert(offsetof(SHOtherStatics_GetMapsDataTable, ReturnValue) == 0x000000, "Member 'SHOtherStatics_GetMapsDataTable::ReturnValue' has a wrong offset!");

// Function SHProto.SHOtherStatics.GetPreSkinPosition
// 0x0040 (0x0040 - 0x0000)
struct SHOtherStatics_GetPreSkinPosition final
{
public:
	class USkinnedMeshComponent*                  Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPosition;                                     // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHOtherStatics_GetPreSkinPosition) == 0x000008, "Wrong alignment on SHOtherStatics_GetPreSkinPosition");
static_assert(sizeof(SHOtherStatics_GetPreSkinPosition) == 0x000040, "Wrong size on SHOtherStatics_GetPreSkinPosition");
static_assert(offsetof(SHOtherStatics_GetPreSkinPosition, Component) == 0x000000, "Member 'SHOtherStatics_GetPreSkinPosition::Component' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_GetPreSkinPosition, BoneName) == 0x000008, "Member 'SHOtherStatics_GetPreSkinPosition::BoneName' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_GetPreSkinPosition, WorldPosition) == 0x000010, "Member 'SHOtherStatics_GetPreSkinPosition::WorldPosition' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_GetPreSkinPosition, ReturnValue) == 0x000028, "Member 'SHOtherStatics_GetPreSkinPosition::ReturnValue' has a wrong offset!");

// Function SHProto.SHOtherStatics.GetRootMotionTranslation
// 0x0020 (0x0020 - 0x0000)
struct SHOtherStatics_GetRootMotionTranslation final
{
public:
	class UAnimationAsset*                        AnimationAsset;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHOtherStatics_GetRootMotionTranslation) == 0x000008, "Wrong alignment on SHOtherStatics_GetRootMotionTranslation");
static_assert(sizeof(SHOtherStatics_GetRootMotionTranslation) == 0x000020, "Wrong size on SHOtherStatics_GetRootMotionTranslation");
static_assert(offsetof(SHOtherStatics_GetRootMotionTranslation, AnimationAsset) == 0x000000, "Member 'SHOtherStatics_GetRootMotionTranslation::AnimationAsset' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_GetRootMotionTranslation, ReturnValue) == 0x000008, "Member 'SHOtherStatics_GetRootMotionTranslation::ReturnValue' has a wrong offset!");

// Function SHProto.SHOtherStatics.GetRotatorInterpTo
// 0x0050 (0x0050 - 0x0000)
struct SHOtherStatics_GetRotatorInterpTo final
{
public:
	struct FRotator                               Current;                                           // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Target;                                            // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHOtherStatics_GetRotatorInterpTo) == 0x000008, "Wrong alignment on SHOtherStatics_GetRotatorInterpTo");
static_assert(sizeof(SHOtherStatics_GetRotatorInterpTo) == 0x000050, "Wrong size on SHOtherStatics_GetRotatorInterpTo");
static_assert(offsetof(SHOtherStatics_GetRotatorInterpTo, Current) == 0x000000, "Member 'SHOtherStatics_GetRotatorInterpTo::Current' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_GetRotatorInterpTo, Target) == 0x000018, "Member 'SHOtherStatics_GetRotatorInterpTo::Target' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_GetRotatorInterpTo, DeltaTime) == 0x000030, "Member 'SHOtherStatics_GetRotatorInterpTo::DeltaTime' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_GetRotatorInterpTo, InterpSpeed) == 0x000034, "Member 'SHOtherStatics_GetRotatorInterpTo::InterpSpeed' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_GetRotatorInterpTo, ReturnValue) == 0x000038, "Member 'SHOtherStatics_GetRotatorInterpTo::ReturnValue' has a wrong offset!");

// Function SHProto.SHOtherStatics.GetRotatorsComponentDelta
// 0x000C (0x000C - 0x0000)
struct SHOtherStatics_GetRotatorsComponentDelta final
{
public:
	float                                         InRot1;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRot2;                                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHOtherStatics_GetRotatorsComponentDelta) == 0x000004, "Wrong alignment on SHOtherStatics_GetRotatorsComponentDelta");
static_assert(sizeof(SHOtherStatics_GetRotatorsComponentDelta) == 0x00000C, "Wrong size on SHOtherStatics_GetRotatorsComponentDelta");
static_assert(offsetof(SHOtherStatics_GetRotatorsComponentDelta, InRot1) == 0x000000, "Member 'SHOtherStatics_GetRotatorsComponentDelta::InRot1' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_GetRotatorsComponentDelta, InRot2) == 0x000004, "Member 'SHOtherStatics_GetRotatorsComponentDelta::InRot2' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_GetRotatorsComponentDelta, ReturnValue) == 0x000008, "Member 'SHOtherStatics_GetRotatorsComponentDelta::ReturnValue' has a wrong offset!");

// Function SHProto.SHOtherStatics.GetRotatorsDelta
// 0x0048 (0x0048 - 0x0000)
struct SHOtherStatics_GetRotatorsDelta final
{
public:
	struct FRotator                               InRot1;                                            // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               InRot2;                                            // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHOtherStatics_GetRotatorsDelta) == 0x000008, "Wrong alignment on SHOtherStatics_GetRotatorsDelta");
static_assert(sizeof(SHOtherStatics_GetRotatorsDelta) == 0x000048, "Wrong size on SHOtherStatics_GetRotatorsDelta");
static_assert(offsetof(SHOtherStatics_GetRotatorsDelta, InRot1) == 0x000000, "Member 'SHOtherStatics_GetRotatorsDelta::InRot1' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_GetRotatorsDelta, InRot2) == 0x000018, "Member 'SHOtherStatics_GetRotatorsDelta::InRot2' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_GetRotatorsDelta, ReturnValue) == 0x000030, "Member 'SHOtherStatics_GetRotatorsDelta::ReturnValue' has a wrong offset!");

// Function SHProto.SHOtherStatics.GetShowFlagValue
// 0x0018 (0x0018 - 0x0000)
struct SHOtherStatics_GetShowFlagValue final
{
public:
	class FString                                 InName;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHOtherStatics_GetShowFlagValue) == 0x000008, "Wrong alignment on SHOtherStatics_GetShowFlagValue");
static_assert(sizeof(SHOtherStatics_GetShowFlagValue) == 0x000018, "Wrong size on SHOtherStatics_GetShowFlagValue");
static_assert(offsetof(SHOtherStatics_GetShowFlagValue, InName) == 0x000000, "Member 'SHOtherStatics_GetShowFlagValue::InName' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_GetShowFlagValue, ReturnValue) == 0x000010, "Member 'SHOtherStatics_GetShowFlagValue::ReturnValue' has a wrong offset!");

// Function SHProto.SHOtherStatics.GetUseablesDataTable
// 0x0008 (0x0008 - 0x0000)
struct SHOtherStatics_GetUseablesDataTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHOtherStatics_GetUseablesDataTable) == 0x000008, "Wrong alignment on SHOtherStatics_GetUseablesDataTable");
static_assert(sizeof(SHOtherStatics_GetUseablesDataTable) == 0x000008, "Wrong size on SHOtherStatics_GetUseablesDataTable");
static_assert(offsetof(SHOtherStatics_GetUseablesDataTable, ReturnValue) == 0x000000, "Member 'SHOtherStatics_GetUseablesDataTable::ReturnValue' has a wrong offset!");

// Function SHProto.SHOtherStatics.GetWeaponsDataTable
// 0x0008 (0x0008 - 0x0000)
struct SHOtherStatics_GetWeaponsDataTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHOtherStatics_GetWeaponsDataTable) == 0x000008, "Wrong alignment on SHOtherStatics_GetWeaponsDataTable");
static_assert(sizeof(SHOtherStatics_GetWeaponsDataTable) == 0x000008, "Wrong size on SHOtherStatics_GetWeaponsDataTable");
static_assert(offsetof(SHOtherStatics_GetWeaponsDataTable, ReturnValue) == 0x000000, "Member 'SHOtherStatics_GetWeaponsDataTable::ReturnValue' has a wrong offset!");

// Function SHProto.SHOtherStatics.HasValidWorld
// 0x0010 (0x0010 - 0x0000)
struct SHOtherStatics_HasValidWorld final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHOtherStatics_HasValidWorld) == 0x000008, "Wrong alignment on SHOtherStatics_HasValidWorld");
static_assert(sizeof(SHOtherStatics_HasValidWorld) == 0x000010, "Wrong size on SHOtherStatics_HasValidWorld");
static_assert(offsetof(SHOtherStatics_HasValidWorld, WorldContextObject) == 0x000000, "Member 'SHOtherStatics_HasValidWorld::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_HasValidWorld, ReturnValue) == 0x000008, "Member 'SHOtherStatics_HasValidWorld::ReturnValue' has a wrong offset!");

// Function SHProto.SHOtherStatics.IsGoalReachable
// 0x0038 (0x0038 - 0x0000)
struct SHOtherStatics_IsGoalReachable final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GoalLocation;                                      // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSearchDistance;                                  // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceTolerance;                                 // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHOtherStatics_IsGoalReachable) == 0x000008, "Wrong alignment on SHOtherStatics_IsGoalReachable");
static_assert(sizeof(SHOtherStatics_IsGoalReachable) == 0x000038, "Wrong size on SHOtherStatics_IsGoalReachable");
static_assert(offsetof(SHOtherStatics_IsGoalReachable, Controller) == 0x000000, "Member 'SHOtherStatics_IsGoalReachable::Controller' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_IsGoalReachable, GoalLocation) == 0x000008, "Member 'SHOtherStatics_IsGoalReachable::GoalLocation' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_IsGoalReachable, FilterClass) == 0x000020, "Member 'SHOtherStatics_IsGoalReachable::FilterClass' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_IsGoalReachable, InSearchDistance) == 0x000028, "Member 'SHOtherStatics_IsGoalReachable::InSearchDistance' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_IsGoalReachable, DistanceTolerance) == 0x00002C, "Member 'SHOtherStatics_IsGoalReachable::DistanceTolerance' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_IsGoalReachable, ReturnValue) == 0x000030, "Member 'SHOtherStatics_IsGoalReachable::ReturnValue' has a wrong offset!");

// Function SHProto.SHOtherStatics.IsSonyDemo
// 0x0001 (0x0001 - 0x0000)
struct SHOtherStatics_IsSonyDemo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHOtherStatics_IsSonyDemo) == 0x000001, "Wrong alignment on SHOtherStatics_IsSonyDemo");
static_assert(sizeof(SHOtherStatics_IsSonyDemo) == 0x000001, "Wrong size on SHOtherStatics_IsSonyDemo");
static_assert(offsetof(SHOtherStatics_IsSonyDemo, ReturnValue) == 0x000000, "Member 'SHOtherStatics_IsSonyDemo::ReturnValue' has a wrong offset!");

// Function SHProto.SHOtherStatics.IsWorldLocInGenericDeathPlayerFullAreaWork
// 0x0028 (0x0028 - 0x0000)
struct SHOtherStatics_IsWorldLocInGenericDeathPlayerFullAreaWork final
{
public:
	TSubclassOf<class ASHCharacterPlayGenericDeathPlayer> InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InWorldLoc;                                        // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHOtherStatics_IsWorldLocInGenericDeathPlayerFullAreaWork) == 0x000008, "Wrong alignment on SHOtherStatics_IsWorldLocInGenericDeathPlayerFullAreaWork");
static_assert(sizeof(SHOtherStatics_IsWorldLocInGenericDeathPlayerFullAreaWork) == 0x000028, "Wrong size on SHOtherStatics_IsWorldLocInGenericDeathPlayerFullAreaWork");
static_assert(offsetof(SHOtherStatics_IsWorldLocInGenericDeathPlayerFullAreaWork, InClass) == 0x000000, "Member 'SHOtherStatics_IsWorldLocInGenericDeathPlayerFullAreaWork::InClass' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_IsWorldLocInGenericDeathPlayerFullAreaWork, InWorldLoc) == 0x000008, "Member 'SHOtherStatics_IsWorldLocInGenericDeathPlayerFullAreaWork::InWorldLoc' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_IsWorldLocInGenericDeathPlayerFullAreaWork, ReturnValue) == 0x000020, "Member 'SHOtherStatics_IsWorldLocInGenericDeathPlayerFullAreaWork::ReturnValue' has a wrong offset!");

// Function SHProto.SHOtherStatics.LogErrorPIE
// 0x0010 (0x0010 - 0x0000)
struct SHOtherStatics_LogErrorPIE final
{
public:
	class FString                                 InLogString;                                       // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHOtherStatics_LogErrorPIE) == 0x000008, "Wrong alignment on SHOtherStatics_LogErrorPIE");
static_assert(sizeof(SHOtherStatics_LogErrorPIE) == 0x000010, "Wrong size on SHOtherStatics_LogErrorPIE");
static_assert(offsetof(SHOtherStatics_LogErrorPIE, InLogString) == 0x000000, "Member 'SHOtherStatics_LogErrorPIE::InLogString' has a wrong offset!");

// Function SHProto.SHOtherStatics.LogWarnPIE
// 0x0010 (0x0010 - 0x0000)
struct SHOtherStatics_LogWarnPIE final
{
public:
	class FString                                 InLogString;                                       // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHOtherStatics_LogWarnPIE) == 0x000008, "Wrong alignment on SHOtherStatics_LogWarnPIE");
static_assert(sizeof(SHOtherStatics_LogWarnPIE) == 0x000010, "Wrong size on SHOtherStatics_LogWarnPIE");
static_assert(offsetof(SHOtherStatics_LogWarnPIE, InLogString) == 0x000000, "Member 'SHOtherStatics_LogWarnPIE::InLogString' has a wrong offset!");

// Function SHProto.SHOtherStatics.RemoveLinkedAnimInstances
// 0x0008 (0x0008 - 0x0000)
struct SHOtherStatics_RemoveLinkedAnimInstances final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHOtherStatics_RemoveLinkedAnimInstances) == 0x000008, "Wrong alignment on SHOtherStatics_RemoveLinkedAnimInstances");
static_assert(sizeof(SHOtherStatics_RemoveLinkedAnimInstances) == 0x000008, "Wrong size on SHOtherStatics_RemoveLinkedAnimInstances");
static_assert(offsetof(SHOtherStatics_RemoveLinkedAnimInstances, AnimInstance) == 0x000000, "Member 'SHOtherStatics_RemoveLinkedAnimInstances::AnimInstance' has a wrong offset!");

// Function SHProto.SHOtherStatics.SetDefaultCollisionProfile
// 0x0008 (0x0008 - 0x0000)
struct SHOtherStatics_SetDefaultCollisionProfile final
{
public:
	class UPrimitiveComponent*                    InComp;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHOtherStatics_SetDefaultCollisionProfile) == 0x000008, "Wrong alignment on SHOtherStatics_SetDefaultCollisionProfile");
static_assert(sizeof(SHOtherStatics_SetDefaultCollisionProfile) == 0x000008, "Wrong size on SHOtherStatics_SetDefaultCollisionProfile");
static_assert(offsetof(SHOtherStatics_SetDefaultCollisionProfile, InComp) == 0x000000, "Member 'SHOtherStatics_SetDefaultCollisionProfile::InComp' has a wrong offset!");

// Function SHProto.SHOtherStatics.SortIntsArray
// 0x0018 (0x0018 - 0x0000)
struct SHOtherStatics_SortIntsArray final
{
public:
	TArray<int32>                                 Array;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bAscending;                                        // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHOtherStatics_SortIntsArray) == 0x000008, "Wrong alignment on SHOtherStatics_SortIntsArray");
static_assert(sizeof(SHOtherStatics_SortIntsArray) == 0x000018, "Wrong size on SHOtherStatics_SortIntsArray");
static_assert(offsetof(SHOtherStatics_SortIntsArray, Array) == 0x000000, "Member 'SHOtherStatics_SortIntsArray::Array' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_SortIntsArray, bAscending) == 0x000010, "Member 'SHOtherStatics_SortIntsArray::bAscending' has a wrong offset!");

// Function SHProto.SHOtherStatics.SplitNameIntMapSortedByInt
// 0x0078 (0x0078 - 0x0000)
struct SHOtherStatics_SplitNameIntMapSortedByInt final
{
public:
	TMap<class FString, int32>                    StringIntMap;                                      // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
	TArray<class FString>                         StringArray;                                       // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 IntArray;                                          // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bAscending;                                        // 0x0070(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHOtherStatics_SplitNameIntMapSortedByInt) == 0x000008, "Wrong alignment on SHOtherStatics_SplitNameIntMapSortedByInt");
static_assert(sizeof(SHOtherStatics_SplitNameIntMapSortedByInt) == 0x000078, "Wrong size on SHOtherStatics_SplitNameIntMapSortedByInt");
static_assert(offsetof(SHOtherStatics_SplitNameIntMapSortedByInt, StringIntMap) == 0x000000, "Member 'SHOtherStatics_SplitNameIntMapSortedByInt::StringIntMap' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_SplitNameIntMapSortedByInt, StringArray) == 0x000050, "Member 'SHOtherStatics_SplitNameIntMapSortedByInt::StringArray' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_SplitNameIntMapSortedByInt, IntArray) == 0x000060, "Member 'SHOtherStatics_SplitNameIntMapSortedByInt::IntArray' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_SplitNameIntMapSortedByInt, bAscending) == 0x000070, "Member 'SHOtherStatics_SplitNameIntMapSortedByInt::bAscending' has a wrong offset!");

// Function SHProto.SHOtherStatics.Trace_ContextObject_CPUProfiler
// 0x0008 (0x0008 - 0x0000)
struct SHOtherStatics_Trace_ContextObject_CPUProfiler final
{
public:
	class UObject*                                ContextObject;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHOtherStatics_Trace_ContextObject_CPUProfiler) == 0x000008, "Wrong alignment on SHOtherStatics_Trace_ContextObject_CPUProfiler");
static_assert(sizeof(SHOtherStatics_Trace_ContextObject_CPUProfiler) == 0x000008, "Wrong size on SHOtherStatics_Trace_ContextObject_CPUProfiler");
static_assert(offsetof(SHOtherStatics_Trace_ContextObject_CPUProfiler, ContextObject) == 0x000000, "Member 'SHOtherStatics_Trace_ContextObject_CPUProfiler::ContextObject' has a wrong offset!");

// Function SHProto.SHOtherStatics.VectorsToSimpleDirectionType
// 0x0038 (0x0038 - 0x0000)
struct SHOtherStatics_VectorsToSimpleDirectionType final
{
public:
	struct FVector                                InVectorA;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InVectorB;                                         // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHSimpleDirectionType                        ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHOtherStatics_VectorsToSimpleDirectionType) == 0x000008, "Wrong alignment on SHOtherStatics_VectorsToSimpleDirectionType");
static_assert(sizeof(SHOtherStatics_VectorsToSimpleDirectionType) == 0x000038, "Wrong size on SHOtherStatics_VectorsToSimpleDirectionType");
static_assert(offsetof(SHOtherStatics_VectorsToSimpleDirectionType, InVectorA) == 0x000000, "Member 'SHOtherStatics_VectorsToSimpleDirectionType::InVectorA' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_VectorsToSimpleDirectionType, InVectorB) == 0x000018, "Member 'SHOtherStatics_VectorsToSimpleDirectionType::InVectorB' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_VectorsToSimpleDirectionType, ReturnValue) == 0x000030, "Member 'SHOtherStatics_VectorsToSimpleDirectionType::ReturnValue' has a wrong offset!");

// Function SHProto.SHOtherStatics.VolumeEncompassesPoint
// 0x0028 (0x0028 - 0x0000)
struct SHOtherStatics_VolumeEncompassesPoint final
{
public:
	class AVolume*                                InVolume;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InCheckedPoint;                                    // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHOtherStatics_VolumeEncompassesPoint) == 0x000008, "Wrong alignment on SHOtherStatics_VolumeEncompassesPoint");
static_assert(sizeof(SHOtherStatics_VolumeEncompassesPoint) == 0x000028, "Wrong size on SHOtherStatics_VolumeEncompassesPoint");
static_assert(offsetof(SHOtherStatics_VolumeEncompassesPoint, InVolume) == 0x000000, "Member 'SHOtherStatics_VolumeEncompassesPoint::InVolume' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_VolumeEncompassesPoint, InCheckedPoint) == 0x000008, "Member 'SHOtherStatics_VolumeEncompassesPoint::InCheckedPoint' has a wrong offset!");
static_assert(offsetof(SHOtherStatics_VolumeEncompassesPoint, ReturnValue) == 0x000020, "Member 'SHOtherStatics_VolumeEncompassesPoint::ReturnValue' has a wrong offset!");

// Function SHProto.SHDynamicItemsManager.ProcessItemCollected
// 0x0008 (0x0008 - 0x0000)
struct SHDynamicItemsManager_ProcessItemCollected final
{
public:
	class ASHItem*                                ItemPtr;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDynamicItemsManager_ProcessItemCollected) == 0x000008, "Wrong alignment on SHDynamicItemsManager_ProcessItemCollected");
static_assert(sizeof(SHDynamicItemsManager_ProcessItemCollected) == 0x000008, "Wrong size on SHDynamicItemsManager_ProcessItemCollected");
static_assert(offsetof(SHDynamicItemsManager_ProcessItemCollected, ItemPtr) == 0x000000, "Member 'SHDynamicItemsManager_ProcessItemCollected::ItemPtr' has a wrong offset!");

// Function SHProto.LocalFogVolumeActor.SetDebugPosition
// 0x0060 (0x0060 - 0x0000)
struct LocalFogVolumeActor_SetDebugPosition final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalFogVolumeActor_SetDebugPosition) == 0x000010, "Wrong alignment on LocalFogVolumeActor_SetDebugPosition");
static_assert(sizeof(LocalFogVolumeActor_SetDebugPosition) == 0x000060, "Wrong size on LocalFogVolumeActor_SetDebugPosition");
static_assert(offsetof(LocalFogVolumeActor_SetDebugPosition, Transform) == 0x000000, "Member 'LocalFogVolumeActor_SetDebugPosition::Transform' has a wrong offset!");

// Function SHProto.MandarinLookAtComponent.GetLookAtTargetLocation
// 0x0018 (0x0018 - 0x0000)
struct MandarinLookAtComponent_GetLookAtTargetLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MandarinLookAtComponent_GetLookAtTargetLocation) == 0x000008, "Wrong alignment on MandarinLookAtComponent_GetLookAtTargetLocation");
static_assert(sizeof(MandarinLookAtComponent_GetLookAtTargetLocation) == 0x000018, "Wrong size on MandarinLookAtComponent_GetLookAtTargetLocation");
static_assert(offsetof(MandarinLookAtComponent_GetLookAtTargetLocation, ReturnValue) == 0x000000, "Member 'MandarinLookAtComponent_GetLookAtTargetLocation::ReturnValue' has a wrong offset!");

// Function SHProto.MandarinLookAtComponent.SetAttackLookAtLimits
// 0x0001 (0x0001 - 0x0000)
struct MandarinLookAtComponent_SetAttackLookAtLimits final
{
public:
	bool                                          AttackLimit;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MandarinLookAtComponent_SetAttackLookAtLimits) == 0x000001, "Wrong alignment on MandarinLookAtComponent_SetAttackLookAtLimits");
static_assert(sizeof(MandarinLookAtComponent_SetAttackLookAtLimits) == 0x000001, "Wrong size on MandarinLookAtComponent_SetAttackLookAtLimits");
static_assert(offsetof(MandarinLookAtComponent_SetAttackLookAtLimits, AttackLimit) == 0x000000, "Member 'MandarinLookAtComponent_SetAttackLookAtLimits::AttackLimit' has a wrong offset!");

// Function SHProto.MandarinLookAtComponent.SetFreezeLookAt
// 0x0001 (0x0001 - 0x0000)
struct MandarinLookAtComponent_SetFreezeLookAt final
{
public:
	bool                                          Freeze;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MandarinLookAtComponent_SetFreezeLookAt) == 0x000001, "Wrong alignment on MandarinLookAtComponent_SetFreezeLookAt");
static_assert(sizeof(MandarinLookAtComponent_SetFreezeLookAt) == 0x000001, "Wrong size on MandarinLookAtComponent_SetFreezeLookAt");
static_assert(offsetof(MandarinLookAtComponent_SetFreezeLookAt, Freeze) == 0x000000, "Member 'MandarinLookAtComponent_SetFreezeLookAt::Freeze' has a wrong offset!");

// Function SHProto.SHCharacterLookAtLogicComponent.LookAtActor
// 0x0040 (0x0040 - 0x0000)
struct SHCharacterLookAtLogicComponent_LookAtActor final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   LookAtTypeID;                                      // 0x0008(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendSpeed;                                        // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCharacterLookAtLogicComponent_LookAtActor) == 0x000008, "Wrong alignment on SHCharacterLookAtLogicComponent_LookAtActor");
static_assert(sizeof(SHCharacterLookAtLogicComponent_LookAtActor) == 0x000040, "Wrong size on SHCharacterLookAtLogicComponent_LookAtActor");
static_assert(offsetof(SHCharacterLookAtLogicComponent_LookAtActor, TargetActor) == 0x000000, "Member 'SHCharacterLookAtLogicComponent_LookAtActor::TargetActor' has a wrong offset!");
static_assert(offsetof(SHCharacterLookAtLogicComponent_LookAtActor, LookAtTypeID) == 0x000008, "Member 'SHCharacterLookAtLogicComponent_LookAtActor::LookAtTypeID' has a wrong offset!");
static_assert(offsetof(SHCharacterLookAtLogicComponent_LookAtActor, BlendSpeed) == 0x000038, "Member 'SHCharacterLookAtLogicComponent_LookAtActor::BlendSpeed' has a wrong offset!");

// Function SHProto.SHCharacterLookAtLogicComponent.LookAtComponent
// 0x0040 (0x0040 - 0x0000)
struct SHCharacterLookAtLogicComponent_LookAtComponent final
{
public:
	class USceneComponent*                        TargetComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   LookAtTypeID;                                      // 0x0008(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendSpeed;                                        // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCharacterLookAtLogicComponent_LookAtComponent) == 0x000008, "Wrong alignment on SHCharacterLookAtLogicComponent_LookAtComponent");
static_assert(sizeof(SHCharacterLookAtLogicComponent_LookAtComponent) == 0x000040, "Wrong size on SHCharacterLookAtLogicComponent_LookAtComponent");
static_assert(offsetof(SHCharacterLookAtLogicComponent_LookAtComponent, TargetComponent) == 0x000000, "Member 'SHCharacterLookAtLogicComponent_LookAtComponent::TargetComponent' has a wrong offset!");
static_assert(offsetof(SHCharacterLookAtLogicComponent_LookAtComponent, LookAtTypeID) == 0x000008, "Member 'SHCharacterLookAtLogicComponent_LookAtComponent::LookAtTypeID' has a wrong offset!");
static_assert(offsetof(SHCharacterLookAtLogicComponent_LookAtComponent, BlendSpeed) == 0x000038, "Member 'SHCharacterLookAtLogicComponent_LookAtComponent::BlendSpeed' has a wrong offset!");

// Function SHProto.SHCharacterLookAtLogicComponent.ResetLookAtLogic
// 0x0004 (0x0004 - 0x0000)
struct SHCharacterLookAtLogicComponent_ResetLookAtLogic final
{
public:
	float                                         BlendOutSpeed;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterLookAtLogicComponent_ResetLookAtLogic) == 0x000004, "Wrong alignment on SHCharacterLookAtLogicComponent_ResetLookAtLogic");
static_assert(sizeof(SHCharacterLookAtLogicComponent_ResetLookAtLogic) == 0x000004, "Wrong size on SHCharacterLookAtLogicComponent_ResetLookAtLogic");
static_assert(offsetof(SHCharacterLookAtLogicComponent_ResetLookAtLogic, BlendOutSpeed) == 0x000000, "Member 'SHCharacterLookAtLogicComponent_ResetLookAtLogic::BlendOutSpeed' has a wrong offset!");

// Function SHProto.SHCharacterLookAtLogicComponent.StopLookAtActor
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterLookAtLogicComponent_StopLookAtActor final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutSpeed;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCharacterLookAtLogicComponent_StopLookAtActor) == 0x000008, "Wrong alignment on SHCharacterLookAtLogicComponent_StopLookAtActor");
static_assert(sizeof(SHCharacterLookAtLogicComponent_StopLookAtActor) == 0x000010, "Wrong size on SHCharacterLookAtLogicComponent_StopLookAtActor");
static_assert(offsetof(SHCharacterLookAtLogicComponent_StopLookAtActor, TargetActor) == 0x000000, "Member 'SHCharacterLookAtLogicComponent_StopLookAtActor::TargetActor' has a wrong offset!");
static_assert(offsetof(SHCharacterLookAtLogicComponent_StopLookAtActor, BlendOutSpeed) == 0x000008, "Member 'SHCharacterLookAtLogicComponent_StopLookAtActor::BlendOutSpeed' has a wrong offset!");

// Function SHProto.SHCharacterLookAtLogicComponent.StopLookAtComponent
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterLookAtLogicComponent_StopLookAtComponent final
{
public:
	class USceneComponent*                        TargetComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutSpeed;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCharacterLookAtLogicComponent_StopLookAtComponent) == 0x000008, "Wrong alignment on SHCharacterLookAtLogicComponent_StopLookAtComponent");
static_assert(sizeof(SHCharacterLookAtLogicComponent_StopLookAtComponent) == 0x000010, "Wrong size on SHCharacterLookAtLogicComponent_StopLookAtComponent");
static_assert(offsetof(SHCharacterLookAtLogicComponent_StopLookAtComponent, TargetComponent) == 0x000000, "Member 'SHCharacterLookAtLogicComponent_StopLookAtComponent::TargetComponent' has a wrong offset!");
static_assert(offsetof(SHCharacterLookAtLogicComponent_StopLookAtComponent, BlendOutSpeed) == 0x000008, "Member 'SHCharacterLookAtLogicComponent_StopLookAtComponent::BlendOutSpeed' has a wrong offset!");

// Function SHProto.SHCharacterLookAtLogicComponent.GetCurrentLookAtTarget
// 0x0008 (0x0008 - 0x0000)
struct SHCharacterLookAtLogicComponent_GetCurrentLookAtTarget final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterLookAtLogicComponent_GetCurrentLookAtTarget) == 0x000008, "Wrong alignment on SHCharacterLookAtLogicComponent_GetCurrentLookAtTarget");
static_assert(sizeof(SHCharacterLookAtLogicComponent_GetCurrentLookAtTarget) == 0x000008, "Wrong size on SHCharacterLookAtLogicComponent_GetCurrentLookAtTarget");
static_assert(offsetof(SHCharacterLookAtLogicComponent_GetCurrentLookAtTarget, ReturnValue) == 0x000000, "Member 'SHCharacterLookAtLogicComponent_GetCurrentLookAtTarget::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterLookAtLogicComponent.GetLookAtTargetProvider
// 0x0038 (0x0038 - 0x0000)
struct SHCharacterLookAtLogicComponent_GetLookAtTargetProvider final
{
public:
	TSoftClassPtr<class UClass>                   LookAtTypeID;                                      // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USHLookAtTargetProvider*                ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterLookAtLogicComponent_GetLookAtTargetProvider) == 0x000008, "Wrong alignment on SHCharacterLookAtLogicComponent_GetLookAtTargetProvider");
static_assert(sizeof(SHCharacterLookAtLogicComponent_GetLookAtTargetProvider) == 0x000038, "Wrong size on SHCharacterLookAtLogicComponent_GetLookAtTargetProvider");
static_assert(offsetof(SHCharacterLookAtLogicComponent_GetLookAtTargetProvider, LookAtTypeID) == 0x000000, "Member 'SHCharacterLookAtLogicComponent_GetLookAtTargetProvider::LookAtTypeID' has a wrong offset!");
static_assert(offsetof(SHCharacterLookAtLogicComponent_GetLookAtTargetProvider, ReturnValue) == 0x000030, "Member 'SHCharacterLookAtLogicComponent_GetLookAtTargetProvider::ReturnValue' has a wrong offset!");

// Function SHProto.NiagaraDynamicComponent.GetDynamicMaterialInstance
// 0x0008 (0x0008 - 0x0000)
struct NiagaraDynamicComponent_GetDynamicMaterialInstance final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NiagaraDynamicComponent_GetDynamicMaterialInstance) == 0x000008, "Wrong alignment on NiagaraDynamicComponent_GetDynamicMaterialInstance");
static_assert(sizeof(NiagaraDynamicComponent_GetDynamicMaterialInstance) == 0x000008, "Wrong size on NiagaraDynamicComponent_GetDynamicMaterialInstance");
static_assert(offsetof(NiagaraDynamicComponent_GetDynamicMaterialInstance, ReturnValue) == 0x000000, "Member 'NiagaraDynamicComponent_GetDynamicMaterialInstance::ReturnValue' has a wrong offset!");

// Function SHProto.PlaneSideDetectionComponent.CalculateSide
// 0x0028 (0x0028 - 0x0000)
struct PlaneSideDetectionComponent_CalculateSide final
{
public:
	ESHDetectionPlaneType                         Plane;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHDetectionSide                              ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlaneSideDetectionComponent_CalculateSide) == 0x000008, "Wrong alignment on PlaneSideDetectionComponent_CalculateSide");
static_assert(sizeof(PlaneSideDetectionComponent_CalculateSide) == 0x000028, "Wrong size on PlaneSideDetectionComponent_CalculateSide");
static_assert(offsetof(PlaneSideDetectionComponent_CalculateSide, Plane) == 0x000000, "Member 'PlaneSideDetectionComponent_CalculateSide::Plane' has a wrong offset!");
static_assert(offsetof(PlaneSideDetectionComponent_CalculateSide, Location) == 0x000008, "Member 'PlaneSideDetectionComponent_CalculateSide::Location' has a wrong offset!");
static_assert(offsetof(PlaneSideDetectionComponent_CalculateSide, ReturnValue) == 0x000020, "Member 'PlaneSideDetectionComponent_CalculateSide::ReturnValue' has a wrong offset!");

// Function SHProto.PlayGameMode.IsReadyToPlay
// 0x0001 (0x0001 - 0x0000)
struct PlayGameMode_IsReadyToPlay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayGameMode_IsReadyToPlay) == 0x000001, "Wrong alignment on PlayGameMode_IsReadyToPlay");
static_assert(sizeof(PlayGameMode_IsReadyToPlay) == 0x000001, "Wrong size on PlayGameMode_IsReadyToPlay");
static_assert(offsetof(PlayGameMode_IsReadyToPlay, ReturnValue) == 0x000000, "Member 'PlayGameMode_IsReadyToPlay::ReturnValue' has a wrong offset!");

// Function SHProto.SHExtraSettingsPanelWidget.OnShowBackInfo
// 0x0008 (0x0008 - 0x0000)
struct SHExtraSettingsPanelWidget_OnShowBackInfo final
{
public:
	class FName                                   Mode;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHExtraSettingsPanelWidget_OnShowBackInfo) == 0x000004, "Wrong alignment on SHExtraSettingsPanelWidget_OnShowBackInfo");
static_assert(sizeof(SHExtraSettingsPanelWidget_OnShowBackInfo) == 0x000008, "Wrong size on SHExtraSettingsPanelWidget_OnShowBackInfo");
static_assert(offsetof(SHExtraSettingsPanelWidget_OnShowBackInfo, Mode) == 0x000000, "Member 'SHExtraSettingsPanelWidget_OnShowBackInfo::Mode' has a wrong offset!");

// Function SHProto.SHEnemyHitReactionSelectionStatics.MakeAllowedHitReactionsAll
// 0x0060 (0x0060 - 0x0000)
struct SHEnemyHitReactionSelectionStatics_MakeAllowedHitReactionsAll final
{
public:
	struct FSHEnemyHitReactionSelectionAllowedStates ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyHitReactionSelectionStatics_MakeAllowedHitReactionsAll) == 0x000008, "Wrong alignment on SHEnemyHitReactionSelectionStatics_MakeAllowedHitReactionsAll");
static_assert(sizeof(SHEnemyHitReactionSelectionStatics_MakeAllowedHitReactionsAll) == 0x000060, "Wrong size on SHEnemyHitReactionSelectionStatics_MakeAllowedHitReactionsAll");
static_assert(offsetof(SHEnemyHitReactionSelectionStatics_MakeAllowedHitReactionsAll, ReturnValue) == 0x000000, "Member 'SHEnemyHitReactionSelectionStatics_MakeAllowedHitReactionsAll::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyHitReactionSelectionStatics.MakeAllowedHitReactionsNone
// 0x0060 (0x0060 - 0x0000)
struct SHEnemyHitReactionSelectionStatics_MakeAllowedHitReactionsNone final
{
public:
	struct FSHEnemyHitReactionSelectionAllowedStates ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyHitReactionSelectionStatics_MakeAllowedHitReactionsNone) == 0x000008, "Wrong alignment on SHEnemyHitReactionSelectionStatics_MakeAllowedHitReactionsNone");
static_assert(sizeof(SHEnemyHitReactionSelectionStatics_MakeAllowedHitReactionsNone) == 0x000060, "Wrong size on SHEnemyHitReactionSelectionStatics_MakeAllowedHitReactionsNone");
static_assert(offsetof(SHEnemyHitReactionSelectionStatics_MakeAllowedHitReactionsNone, ReturnValue) == 0x000000, "Member 'SHEnemyHitReactionSelectionStatics_MakeAllowedHitReactionsNone::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyHitReactionSelectionStatics.MakeAllowedHitReactionsSimple
// 0x0068 (0x0068 - 0x0000)
struct SHEnemyHitReactionSelectionStatics_MakeAllowedHitReactionsSimple final
{
public:
	bool                                          AllowKnockdown;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowFalter;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowStagger;                                      // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowNormal;                                       // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSHEnemyHitReactionSelectionAllowedStates ReturnValue;                                       // 0x0008(0x0060)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyHitReactionSelectionStatics_MakeAllowedHitReactionsSimple) == 0x000008, "Wrong alignment on SHEnemyHitReactionSelectionStatics_MakeAllowedHitReactionsSimple");
static_assert(sizeof(SHEnemyHitReactionSelectionStatics_MakeAllowedHitReactionsSimple) == 0x000068, "Wrong size on SHEnemyHitReactionSelectionStatics_MakeAllowedHitReactionsSimple");
static_assert(offsetof(SHEnemyHitReactionSelectionStatics_MakeAllowedHitReactionsSimple, AllowKnockdown) == 0x000000, "Member 'SHEnemyHitReactionSelectionStatics_MakeAllowedHitReactionsSimple::AllowKnockdown' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionStatics_MakeAllowedHitReactionsSimple, AllowFalter) == 0x000001, "Member 'SHEnemyHitReactionSelectionStatics_MakeAllowedHitReactionsSimple::AllowFalter' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionStatics_MakeAllowedHitReactionsSimple, AllowStagger) == 0x000002, "Member 'SHEnemyHitReactionSelectionStatics_MakeAllowedHitReactionsSimple::AllowStagger' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionStatics_MakeAllowedHitReactionsSimple, AllowNormal) == 0x000003, "Member 'SHEnemyHitReactionSelectionStatics_MakeAllowedHitReactionsSimple::AllowNormal' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionStatics_MakeAllowedHitReactionsSimple, ReturnValue) == 0x000008, "Member 'SHEnemyHitReactionSelectionStatics_MakeAllowedHitReactionsSimple::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyHitReactionSelectionStatics.MergeAllowedHitReactions
// 0x0120 (0x0120 - 0x0000)
struct SHEnemyHitReactionSelectionStatics_MergeAllowedHitReactions final
{
public:
	struct FSHEnemyHitReactionSelectionAllowedStates MergeInto;                                         // 0x0000(0x0060)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSHEnemyHitReactionSelectionAllowedStates MergeFrom;                                         // 0x0060(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSHEnemyHitReactionSelectionAllowedStates ReturnValue;                                       // 0x00C0(0x0060)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyHitReactionSelectionStatics_MergeAllowedHitReactions) == 0x000008, "Wrong alignment on SHEnemyHitReactionSelectionStatics_MergeAllowedHitReactions");
static_assert(sizeof(SHEnemyHitReactionSelectionStatics_MergeAllowedHitReactions) == 0x000120, "Wrong size on SHEnemyHitReactionSelectionStatics_MergeAllowedHitReactions");
static_assert(offsetof(SHEnemyHitReactionSelectionStatics_MergeAllowedHitReactions, MergeInto) == 0x000000, "Member 'SHEnemyHitReactionSelectionStatics_MergeAllowedHitReactions::MergeInto' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionStatics_MergeAllowedHitReactions, MergeFrom) == 0x000060, "Member 'SHEnemyHitReactionSelectionStatics_MergeAllowedHitReactions::MergeFrom' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionStatics_MergeAllowedHitReactions, ReturnValue) == 0x0000C0, "Member 'SHEnemyHitReactionSelectionStatics_MergeAllowedHitReactions::ReturnValue' has a wrong offset!");

// Function SHProto.SHTraversalBaseComponent.ProcessProximityBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct SHTraversalBaseComponent_ProcessProximityBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FromSweep;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalBaseComponent_ProcessProximityBeginOverlap) == 0x000008, "Wrong alignment on SHTraversalBaseComponent_ProcessProximityBeginOverlap");
static_assert(sizeof(SHTraversalBaseComponent_ProcessProximityBeginOverlap) == 0x000108, "Wrong size on SHTraversalBaseComponent_ProcessProximityBeginOverlap");
static_assert(offsetof(SHTraversalBaseComponent_ProcessProximityBeginOverlap, OverlappedComponent) == 0x000000, "Member 'SHTraversalBaseComponent_ProcessProximityBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SHTraversalBaseComponent_ProcessProximityBeginOverlap, OtherActor) == 0x000008, "Member 'SHTraversalBaseComponent_ProcessProximityBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SHTraversalBaseComponent_ProcessProximityBeginOverlap, OtherComponent) == 0x000010, "Member 'SHTraversalBaseComponent_ProcessProximityBeginOverlap::OtherComponent' has a wrong offset!");
static_assert(offsetof(SHTraversalBaseComponent_ProcessProximityBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'SHTraversalBaseComponent_ProcessProximityBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SHTraversalBaseComponent_ProcessProximityBeginOverlap, FromSweep) == 0x00001C, "Member 'SHTraversalBaseComponent_ProcessProximityBeginOverlap::FromSweep' has a wrong offset!");
static_assert(offsetof(SHTraversalBaseComponent_ProcessProximityBeginOverlap, SweepResult) == 0x000020, "Member 'SHTraversalBaseComponent_ProcessProximityBeginOverlap::SweepResult' has a wrong offset!");

// Function SHProto.SHTraversalBaseComponent.ProcessProximityEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct SHTraversalBaseComponent_ProcessProximityEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHTraversalBaseComponent_ProcessProximityEndOverlap) == 0x000008, "Wrong alignment on SHTraversalBaseComponent_ProcessProximityEndOverlap");
static_assert(sizeof(SHTraversalBaseComponent_ProcessProximityEndOverlap) == 0x000020, "Wrong size on SHTraversalBaseComponent_ProcessProximityEndOverlap");
static_assert(offsetof(SHTraversalBaseComponent_ProcessProximityEndOverlap, OverlappedComponent) == 0x000000, "Member 'SHTraversalBaseComponent_ProcessProximityEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SHTraversalBaseComponent_ProcessProximityEndOverlap, OtherActor) == 0x000008, "Member 'SHTraversalBaseComponent_ProcessProximityEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SHTraversalBaseComponent_ProcessProximityEndOverlap, OtherComponent) == 0x000010, "Member 'SHTraversalBaseComponent_ProcessProximityEndOverlap::OtherComponent' has a wrong offset!");
static_assert(offsetof(SHTraversalBaseComponent_ProcessProximityEndOverlap, OtherBodyIndex) == 0x000018, "Member 'SHTraversalBaseComponent_ProcessProximityEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function SHProto.SHTraversalBaseComponent.SetEnabled
// 0x0010 (0x0010 - 0x0000)
struct SHTraversalBaseComponent_SetEnabled final
{
public:
	bool                                          InEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Object;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalBaseComponent_SetEnabled) == 0x000008, "Wrong alignment on SHTraversalBaseComponent_SetEnabled");
static_assert(sizeof(SHTraversalBaseComponent_SetEnabled) == 0x000010, "Wrong size on SHTraversalBaseComponent_SetEnabled");
static_assert(offsetof(SHTraversalBaseComponent_SetEnabled, InEnable) == 0x000000, "Member 'SHTraversalBaseComponent_SetEnabled::InEnable' has a wrong offset!");
static_assert(offsetof(SHTraversalBaseComponent_SetEnabled, Object) == 0x000008, "Member 'SHTraversalBaseComponent_SetEnabled::Object' has a wrong offset!");

// Function SHProto.SHTraversalBaseComponent.SetUnavailable
// 0x0010 (0x0010 - 0x0000)
struct SHTraversalBaseComponent_SetUnavailable final
{
public:
	bool                                          InUnavailable;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Object;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalBaseComponent_SetUnavailable) == 0x000008, "Wrong alignment on SHTraversalBaseComponent_SetUnavailable");
static_assert(sizeof(SHTraversalBaseComponent_SetUnavailable) == 0x000010, "Wrong size on SHTraversalBaseComponent_SetUnavailable");
static_assert(offsetof(SHTraversalBaseComponent_SetUnavailable, InUnavailable) == 0x000000, "Member 'SHTraversalBaseComponent_SetUnavailable::InUnavailable' has a wrong offset!");
static_assert(offsetof(SHTraversalBaseComponent_SetUnavailable, Object) == 0x000008, "Member 'SHTraversalBaseComponent_SetUnavailable::Object' has a wrong offset!");

// DelegateFunction SHProto.SHTraversalBaseComponent.SHTraversalBaseEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHTraversalBaseComponent_SHTraversalBaseEvent__DelegateSignature final
{
public:
	class USHTraversalBaseComponent*              ComponentPtr;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalBaseComponent_SHTraversalBaseEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHTraversalBaseComponent_SHTraversalBaseEvent__DelegateSignature");
static_assert(sizeof(SHTraversalBaseComponent_SHTraversalBaseEvent__DelegateSignature) == 0x000008, "Wrong size on SHTraversalBaseComponent_SHTraversalBaseEvent__DelegateSignature");
static_assert(offsetof(SHTraversalBaseComponent_SHTraversalBaseEvent__DelegateSignature, ComponentPtr) == 0x000000, "Member 'SHTraversalBaseComponent_SHTraversalBaseEvent__DelegateSignature::ComponentPtr' has a wrong offset!");

// Function SHProto.SHTraversalBaseComponent.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct SHTraversalBaseComponent_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalBaseComponent_IsEnabled) == 0x000001, "Wrong alignment on SHTraversalBaseComponent_IsEnabled");
static_assert(sizeof(SHTraversalBaseComponent_IsEnabled) == 0x000001, "Wrong size on SHTraversalBaseComponent_IsEnabled");
static_assert(offsetof(SHTraversalBaseComponent_IsEnabled, ReturnValue) == 0x000000, "Member 'SHTraversalBaseComponent_IsEnabled::ReturnValue' has a wrong offset!");

// Function SHProto.SHTraversalBaseComponent.IsUnavailable
// 0x0001 (0x0001 - 0x0000)
struct SHTraversalBaseComponent_IsUnavailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalBaseComponent_IsUnavailable) == 0x000001, "Wrong alignment on SHTraversalBaseComponent_IsUnavailable");
static_assert(sizeof(SHTraversalBaseComponent_IsUnavailable) == 0x000001, "Wrong size on SHTraversalBaseComponent_IsUnavailable");
static_assert(offsetof(SHTraversalBaseComponent_IsUnavailable, ReturnValue) == 0x000000, "Member 'SHTraversalBaseComponent_IsUnavailable::ReturnValue' has a wrong offset!");

// Function SHProto.SHTraversalClimbComponent.Initialize
// 0x0018 (0x0018 - 0x0000)
struct SHTraversalClimbComponent_Initialize final
{
public:
	class USphereComponent*                       InProximitySphere;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USplineComponent*>               InEdgeSplines;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalClimbComponent_Initialize) == 0x000008, "Wrong alignment on SHTraversalClimbComponent_Initialize");
static_assert(sizeof(SHTraversalClimbComponent_Initialize) == 0x000018, "Wrong size on SHTraversalClimbComponent_Initialize");
static_assert(offsetof(SHTraversalClimbComponent_Initialize, InProximitySphere) == 0x000000, "Member 'SHTraversalClimbComponent_Initialize::InProximitySphere' has a wrong offset!");
static_assert(offsetof(SHTraversalClimbComponent_Initialize, InEdgeSplines) == 0x000008, "Member 'SHTraversalClimbComponent_Initialize::InEdgeSplines' has a wrong offset!");

// Function SHProto.SHTraversalClimbComponent.ProcessMovementSnapEnd
// 0x0001 (0x0001 - 0x0000)
struct SHTraversalClimbComponent_ProcessMovementSnapEnd final
{
public:
	bool                                          WasCompleted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalClimbComponent_ProcessMovementSnapEnd) == 0x000001, "Wrong alignment on SHTraversalClimbComponent_ProcessMovementSnapEnd");
static_assert(sizeof(SHTraversalClimbComponent_ProcessMovementSnapEnd) == 0x000001, "Wrong size on SHTraversalClimbComponent_ProcessMovementSnapEnd");
static_assert(offsetof(SHTraversalClimbComponent_ProcessMovementSnapEnd, WasCompleted) == 0x000000, "Member 'SHTraversalClimbComponent_ProcessMovementSnapEnd::WasCompleted' has a wrong offset!");

// Function SHProto.SHTraversalClimbComponent.ProcessSlideSnapEnd
// 0x0001 (0x0001 - 0x0000)
struct SHTraversalClimbComponent_ProcessSlideSnapEnd final
{
public:
	bool                                          WasCompleted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalClimbComponent_ProcessSlideSnapEnd) == 0x000001, "Wrong alignment on SHTraversalClimbComponent_ProcessSlideSnapEnd");
static_assert(sizeof(SHTraversalClimbComponent_ProcessSlideSnapEnd) == 0x000001, "Wrong size on SHTraversalClimbComponent_ProcessSlideSnapEnd");
static_assert(offsetof(SHTraversalClimbComponent_ProcessSlideSnapEnd, WasCompleted) == 0x000000, "Member 'SHTraversalClimbComponent_ProcessSlideSnapEnd::WasCompleted' has a wrong offset!");

// Function SHProto.SHTraversalClimbComponent.RegisterSplines
// 0x0010 (0x0010 - 0x0000)
struct SHTraversalClimbComponent_RegisterSplines final
{
public:
	TArray<class USplineComponent*>               InEdgeSplines;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalClimbComponent_RegisterSplines) == 0x000008, "Wrong alignment on SHTraversalClimbComponent_RegisterSplines");
static_assert(sizeof(SHTraversalClimbComponent_RegisterSplines) == 0x000010, "Wrong size on SHTraversalClimbComponent_RegisterSplines");
static_assert(offsetof(SHTraversalClimbComponent_RegisterSplines, InEdgeSplines) == 0x000000, "Member 'SHTraversalClimbComponent_RegisterSplines::InEdgeSplines' has a wrong offset!");

// DelegateFunction SHProto.SHTraversalClimbComponent.SHClimbComponentEvent__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct SHTraversalClimbComponent_SHClimbComponentEvent__DelegateSignature final
{
public:
	ESHDetectionSide                              DetectionSide;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalClimbComponent_SHClimbComponentEvent__DelegateSignature) == 0x000001, "Wrong alignment on SHTraversalClimbComponent_SHClimbComponentEvent__DelegateSignature");
static_assert(sizeof(SHTraversalClimbComponent_SHClimbComponentEvent__DelegateSignature) == 0x000001, "Wrong size on SHTraversalClimbComponent_SHClimbComponentEvent__DelegateSignature");
static_assert(offsetof(SHTraversalClimbComponent_SHClimbComponentEvent__DelegateSignature, DetectionSide) == 0x000000, "Member 'SHTraversalClimbComponent_SHClimbComponentEvent__DelegateSignature::DetectionSide' has a wrong offset!");

// DelegateFunction SHProto.SHTraversalClimbComponent.SHClimbEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHTraversalClimbComponent_SHClimbEvent__DelegateSignature final
{
public:
	class USHTraversalClimbComponent*             ComponentPtr;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalClimbComponent_SHClimbEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHTraversalClimbComponent_SHClimbEvent__DelegateSignature");
static_assert(sizeof(SHTraversalClimbComponent_SHClimbEvent__DelegateSignature) == 0x000008, "Wrong size on SHTraversalClimbComponent_SHClimbEvent__DelegateSignature");
static_assert(offsetof(SHTraversalClimbComponent_SHClimbEvent__DelegateSignature, ComponentPtr) == 0x000000, "Member 'SHTraversalClimbComponent_SHClimbEvent__DelegateSignature::ComponentPtr' has a wrong offset!");

// DelegateFunction SHProto.SHTraversalClimbComponent.SHClimbWithSideEvent__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct SHTraversalClimbComponent_SHClimbWithSideEvent__DelegateSignature final
{
public:
	class USHTraversalClimbComponent*             ComponentPtr;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHDetectionSide                              DetectionSide;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHTraversalClimbComponent_SHClimbWithSideEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHTraversalClimbComponent_SHClimbWithSideEvent__DelegateSignature");
static_assert(sizeof(SHTraversalClimbComponent_SHClimbWithSideEvent__DelegateSignature) == 0x000010, "Wrong size on SHTraversalClimbComponent_SHClimbWithSideEvent__DelegateSignature");
static_assert(offsetof(SHTraversalClimbComponent_SHClimbWithSideEvent__DelegateSignature, ComponentPtr) == 0x000000, "Member 'SHTraversalClimbComponent_SHClimbWithSideEvent__DelegateSignature::ComponentPtr' has a wrong offset!");
static_assert(offsetof(SHTraversalClimbComponent_SHClimbWithSideEvent__DelegateSignature, DetectionSide) == 0x000008, "Member 'SHTraversalClimbComponent_SHClimbWithSideEvent__DelegateSignature::DetectionSide' has a wrong offset!");

// Function SHProto.SHTraversalClimbComponent.UnregisterSplines
// 0x0010 (0x0010 - 0x0000)
struct SHTraversalClimbComponent_UnregisterSplines final
{
public:
	TArray<class USplineComponent*>               InEdgeSplines;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalClimbComponent_UnregisterSplines) == 0x000008, "Wrong alignment on SHTraversalClimbComponent_UnregisterSplines");
static_assert(sizeof(SHTraversalClimbComponent_UnregisterSplines) == 0x000010, "Wrong size on SHTraversalClimbComponent_UnregisterSplines");
static_assert(offsetof(SHTraversalClimbComponent_UnregisterSplines, InEdgeSplines) == 0x000000, "Member 'SHTraversalClimbComponent_UnregisterSplines::InEdgeSplines' has a wrong offset!");

// Function SHProto.SHEnvironmentSwitchVolume.SetEnabled
// 0x0010 (0x0010 - 0x0000)
struct SHEnvironmentSwitchVolume_SetEnabled final
{
public:
	const class UObject*                          Enabler;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InEnabled;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHEnvironmentSwitchVolume_SetEnabled) == 0x000008, "Wrong alignment on SHEnvironmentSwitchVolume_SetEnabled");
static_assert(sizeof(SHEnvironmentSwitchVolume_SetEnabled) == 0x000010, "Wrong size on SHEnvironmentSwitchVolume_SetEnabled");
static_assert(offsetof(SHEnvironmentSwitchVolume_SetEnabled, Enabler) == 0x000000, "Member 'SHEnvironmentSwitchVolume_SetEnabled::Enabler' has a wrong offset!");
static_assert(offsetof(SHEnvironmentSwitchVolume_SetEnabled, InEnabled) == 0x000008, "Member 'SHEnvironmentSwitchVolume_SetEnabled::InEnabled' has a wrong offset!");

// Function SHProto.SHFakeDoor.HandleReceiveDamageEvent
// 0x0008 (0x0008 - 0x0000)
struct SHFakeDoor_HandleReceiveDamageEvent final
{
public:
	class USHCharacterPlayCombatComponent*        CombatComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFakeDoor_HandleReceiveDamageEvent) == 0x000008, "Wrong alignment on SHFakeDoor_HandleReceiveDamageEvent");
static_assert(sizeof(SHFakeDoor_HandleReceiveDamageEvent) == 0x000008, "Wrong size on SHFakeDoor_HandleReceiveDamageEvent");
static_assert(offsetof(SHFakeDoor_HandleReceiveDamageEvent, CombatComp) == 0x000000, "Member 'SHFakeDoor_HandleReceiveDamageEvent::CombatComp' has a wrong offset!");

// Function SHProto.SHFakeDoor.OnAutoLockedDoorCheckAnimEnd
// 0x0010 (0x0010 - 0x0000)
struct SHFakeDoor_OnAutoLockedDoorCheckAnimEnd final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHAnimEndType                                AnimEndType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFakeDoor_OnAutoLockedDoorCheckAnimEnd) == 0x000008, "Wrong alignment on SHFakeDoor_OnAutoLockedDoorCheckAnimEnd");
static_assert(sizeof(SHFakeDoor_OnAutoLockedDoorCheckAnimEnd) == 0x000010, "Wrong size on SHFakeDoor_OnAutoLockedDoorCheckAnimEnd");
static_assert(offsetof(SHFakeDoor_OnAutoLockedDoorCheckAnimEnd, Montage) == 0x000000, "Member 'SHFakeDoor_OnAutoLockedDoorCheckAnimEnd::Montage' has a wrong offset!");
static_assert(offsetof(SHFakeDoor_OnAutoLockedDoorCheckAnimEnd, AnimEndType) == 0x000008, "Member 'SHFakeDoor_OnAutoLockedDoorCheckAnimEnd::AnimEndType' has a wrong offset!");

// Function SHProto.SHFakeDoor.ProcessFakeHitDetectorBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct SHFakeDoor_ProcessFakeHitDetectorBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFakeDoor_ProcessFakeHitDetectorBeginOverlap) == 0x000008, "Wrong alignment on SHFakeDoor_ProcessFakeHitDetectorBeginOverlap");
static_assert(sizeof(SHFakeDoor_ProcessFakeHitDetectorBeginOverlap) == 0x000108, "Wrong size on SHFakeDoor_ProcessFakeHitDetectorBeginOverlap");
static_assert(offsetof(SHFakeDoor_ProcessFakeHitDetectorBeginOverlap, OverlappedComponent) == 0x000000, "Member 'SHFakeDoor_ProcessFakeHitDetectorBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SHFakeDoor_ProcessFakeHitDetectorBeginOverlap, OtherActor) == 0x000008, "Member 'SHFakeDoor_ProcessFakeHitDetectorBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SHFakeDoor_ProcessFakeHitDetectorBeginOverlap, OtherComp) == 0x000010, "Member 'SHFakeDoor_ProcessFakeHitDetectorBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(SHFakeDoor_ProcessFakeHitDetectorBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'SHFakeDoor_ProcessFakeHitDetectorBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SHFakeDoor_ProcessFakeHitDetectorBeginOverlap, bFromSweep) == 0x00001C, "Member 'SHFakeDoor_ProcessFakeHitDetectorBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(SHFakeDoor_ProcessFakeHitDetectorBeginOverlap, SweepResult) == 0x000020, "Member 'SHFakeDoor_ProcessFakeHitDetectorBeginOverlap::SweepResult' has a wrong offset!");

// Function SHProto.SHFakeDoor.SetEnabled
// 0x0010 (0x0010 - 0x0000)
struct SHFakeDoor_SetEnabled final
{
public:
	const class UObject*                          Enabler;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InEnabled;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFakeDoor_SetEnabled) == 0x000008, "Wrong alignment on SHFakeDoor_SetEnabled");
static_assert(sizeof(SHFakeDoor_SetEnabled) == 0x000010, "Wrong size on SHFakeDoor_SetEnabled");
static_assert(offsetof(SHFakeDoor_SetEnabled, Enabler) == 0x000000, "Member 'SHFakeDoor_SetEnabled::Enabler' has a wrong offset!");
static_assert(offsetof(SHFakeDoor_SetEnabled, InEnabled) == 0x000008, "Member 'SHFakeDoor_SetEnabled::InEnabled' has a wrong offset!");

// DelegateFunction SHProto.SHFakeDoor.SHFakeDoorEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHFakeDoor_SHFakeDoorEvent__DelegateSignature final
{
public:
	class ASHFakeDoor*                            FakeDoorPtr;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFakeDoor_SHFakeDoorEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHFakeDoor_SHFakeDoorEvent__DelegateSignature");
static_assert(sizeof(SHFakeDoor_SHFakeDoorEvent__DelegateSignature) == 0x000008, "Wrong size on SHFakeDoor_SHFakeDoorEvent__DelegateSignature");
static_assert(offsetof(SHFakeDoor_SHFakeDoorEvent__DelegateSignature, FakeDoorPtr) == 0x000000, "Member 'SHFakeDoor_SHFakeDoorEvent__DelegateSignature::FakeDoorPtr' has a wrong offset!");

// DelegateFunction SHProto.SHFakeDoor.SHFakeDoorEventBP__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHFakeDoor_SHFakeDoorEventBP__DelegateSignature final
{
public:
	class ASHFakeDoor*                            FakeDoorPtr;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFakeDoor_SHFakeDoorEventBP__DelegateSignature) == 0x000008, "Wrong alignment on SHFakeDoor_SHFakeDoorEventBP__DelegateSignature");
static_assert(sizeof(SHFakeDoor_SHFakeDoorEventBP__DelegateSignature) == 0x000008, "Wrong size on SHFakeDoor_SHFakeDoorEventBP__DelegateSignature");
static_assert(offsetof(SHFakeDoor_SHFakeDoorEventBP__DelegateSignature, FakeDoorPtr) == 0x000000, "Member 'SHFakeDoor_SHFakeDoorEventBP__DelegateSignature::FakeDoorPtr' has a wrong offset!");

// Function SHProto.SHFlashlightControlVolume.SetDisabled
// 0x0010 (0x0010 - 0x0000)
struct SHFlashlightControlVolume_SetDisabled final
{
public:
	bool                                          bInDisabled;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFlashlightControlVolume_SetDisabled) == 0x000008, "Wrong alignment on SHFlashlightControlVolume_SetDisabled");
static_assert(sizeof(SHFlashlightControlVolume_SetDisabled) == 0x000010, "Wrong size on SHFlashlightControlVolume_SetDisabled");
static_assert(offsetof(SHFlashlightControlVolume_SetDisabled, bInDisabled) == 0x000000, "Member 'SHFlashlightControlVolume_SetDisabled::bInDisabled' has a wrong offset!");
static_assert(offsetof(SHFlashlightControlVolume_SetDisabled, Object) == 0x000008, "Member 'SHFlashlightControlVolume_SetDisabled::Object' has a wrong offset!");

// Function SHProto.SHFlashlightControlVolume.IsDisabled
// 0x0001 (0x0001 - 0x0000)
struct SHFlashlightControlVolume_IsDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFlashlightControlVolume_IsDisabled) == 0x000001, "Wrong alignment on SHFlashlightControlVolume_IsDisabled");
static_assert(sizeof(SHFlashlightControlVolume_IsDisabled) == 0x000001, "Wrong size on SHFlashlightControlVolume_IsDisabled");
static_assert(offsetof(SHFlashlightControlVolume_IsDisabled, ReturnValue) == 0x000000, "Member 'SHFlashlightControlVolume_IsDisabled::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyAnimComponent.OnControllerChanged
// 0x0018 (0x0018 - 0x0000)
struct SHEnemyAnimComponent_OnControllerChanged final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            OldController;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            NewController;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyAnimComponent_OnControllerChanged) == 0x000008, "Wrong alignment on SHEnemyAnimComponent_OnControllerChanged");
static_assert(sizeof(SHEnemyAnimComponent_OnControllerChanged) == 0x000018, "Wrong size on SHEnemyAnimComponent_OnControllerChanged");
static_assert(offsetof(SHEnemyAnimComponent_OnControllerChanged, Pawn) == 0x000000, "Member 'SHEnemyAnimComponent_OnControllerChanged::Pawn' has a wrong offset!");
static_assert(offsetof(SHEnemyAnimComponent_OnControllerChanged, OldController) == 0x000008, "Member 'SHEnemyAnimComponent_OnControllerChanged::OldController' has a wrong offset!");
static_assert(offsetof(SHEnemyAnimComponent_OnControllerChanged, NewController) == 0x000010, "Member 'SHEnemyAnimComponent_OnControllerChanged::NewController' has a wrong offset!");

// Function SHProto.SHEnemyAnimComponent.ProcessEnemyBehaviorStanceChangedEvent
// 0x0001 (0x0001 - 0x0000)
struct SHEnemyAnimComponent_ProcessEnemyBehaviorStanceChangedEvent final
{
public:
	EMaiAggroStance                               NewAggroStance;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyAnimComponent_ProcessEnemyBehaviorStanceChangedEvent) == 0x000001, "Wrong alignment on SHEnemyAnimComponent_ProcessEnemyBehaviorStanceChangedEvent");
static_assert(sizeof(SHEnemyAnimComponent_ProcessEnemyBehaviorStanceChangedEvent) == 0x000001, "Wrong size on SHEnemyAnimComponent_ProcessEnemyBehaviorStanceChangedEvent");
static_assert(offsetof(SHEnemyAnimComponent_ProcessEnemyBehaviorStanceChangedEvent, NewAggroStance) == 0x000000, "Member 'SHEnemyAnimComponent_ProcessEnemyBehaviorStanceChangedEvent::NewAggroStance' has a wrong offset!");

// Function SHProto.SHEnemyAnimComponent.ProcessHitReactionBonePhysicsRequestEvent
// 0x0068 (0x0068 - 0x0000)
struct SHEnemyAnimComponent_ProcessHitReactionBonePhysicsRequestEvent final
{
public:
	class USHHitReactionSubcomponent*             InHitReactionComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSHHitReactionResultBonePhysics        InBonePhysics;                                     // 0x0008(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHEnemyAnimComponent_ProcessHitReactionBonePhysicsRequestEvent) == 0x000008, "Wrong alignment on SHEnemyAnimComponent_ProcessHitReactionBonePhysicsRequestEvent");
static_assert(sizeof(SHEnemyAnimComponent_ProcessHitReactionBonePhysicsRequestEvent) == 0x000068, "Wrong size on SHEnemyAnimComponent_ProcessHitReactionBonePhysicsRequestEvent");
static_assert(offsetof(SHEnemyAnimComponent_ProcessHitReactionBonePhysicsRequestEvent, InHitReactionComponent) == 0x000000, "Member 'SHEnemyAnimComponent_ProcessHitReactionBonePhysicsRequestEvent::InHitReactionComponent' has a wrong offset!");
static_assert(offsetof(SHEnemyAnimComponent_ProcessHitReactionBonePhysicsRequestEvent, InBonePhysics) == 0x000008, "Member 'SHEnemyAnimComponent_ProcessHitReactionBonePhysicsRequestEvent::InBonePhysics' has a wrong offset!");
static_assert(offsetof(SHEnemyAnimComponent_ProcessHitReactionBonePhysicsRequestEvent, ReturnValue) == 0x000060, "Member 'SHEnemyAnimComponent_ProcessHitReactionBonePhysicsRequestEvent::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyAnimComponent.ProcessHitReactionStateEndedEvent
// 0x0010 (0x0010 - 0x0000)
struct SHEnemyAnimComponent_ProcessHitReactionStateEndedEvent final
{
public:
	class USHHitReactionSubcomponent*             InHitReactionComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USHHitReactionState*                    InHitReactionState;                                // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyAnimComponent_ProcessHitReactionStateEndedEvent) == 0x000008, "Wrong alignment on SHEnemyAnimComponent_ProcessHitReactionStateEndedEvent");
static_assert(sizeof(SHEnemyAnimComponent_ProcessHitReactionStateEndedEvent) == 0x000010, "Wrong size on SHEnemyAnimComponent_ProcessHitReactionStateEndedEvent");
static_assert(offsetof(SHEnemyAnimComponent_ProcessHitReactionStateEndedEvent, InHitReactionComponent) == 0x000000, "Member 'SHEnemyAnimComponent_ProcessHitReactionStateEndedEvent::InHitReactionComponent' has a wrong offset!");
static_assert(offsetof(SHEnemyAnimComponent_ProcessHitReactionStateEndedEvent, InHitReactionState) == 0x000008, "Member 'SHEnemyAnimComponent_ProcessHitReactionStateEndedEvent::InHitReactionState' has a wrong offset!");

// Function SHProto.SHEnemyAnimComponent.ProcessHitReactionStateStartedEvent
// 0x0010 (0x0010 - 0x0000)
struct SHEnemyAnimComponent_ProcessHitReactionStateStartedEvent final
{
public:
	class USHHitReactionSubcomponent*             InHitReactionComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USHHitReactionState*                    InHitReactionState;                                // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyAnimComponent_ProcessHitReactionStateStartedEvent) == 0x000008, "Wrong alignment on SHEnemyAnimComponent_ProcessHitReactionStateStartedEvent");
static_assert(sizeof(SHEnemyAnimComponent_ProcessHitReactionStateStartedEvent) == 0x000010, "Wrong size on SHEnemyAnimComponent_ProcessHitReactionStateStartedEvent");
static_assert(offsetof(SHEnemyAnimComponent_ProcessHitReactionStateStartedEvent, InHitReactionComponent) == 0x000000, "Member 'SHEnemyAnimComponent_ProcessHitReactionStateStartedEvent::InHitReactionComponent' has a wrong offset!");
static_assert(offsetof(SHEnemyAnimComponent_ProcessHitReactionStateStartedEvent, InHitReactionState) == 0x000008, "Member 'SHEnemyAnimComponent_ProcessHitReactionStateStartedEvent::InHitReactionState' has a wrong offset!");

// Function SHProto.SHEnemyAnimComponent.SetLyingState
// 0x0002 (0x0002 - 0x0000)
struct SHEnemyAnimComponent_SetLyingState final
{
public:
	bool                                          InIsLying;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsTransforming;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyAnimComponent_SetLyingState) == 0x000001, "Wrong alignment on SHEnemyAnimComponent_SetLyingState");
static_assert(sizeof(SHEnemyAnimComponent_SetLyingState) == 0x000002, "Wrong size on SHEnemyAnimComponent_SetLyingState");
static_assert(offsetof(SHEnemyAnimComponent_SetLyingState, InIsLying) == 0x000000, "Member 'SHEnemyAnimComponent_SetLyingState::InIsLying' has a wrong offset!");
static_assert(offsetof(SHEnemyAnimComponent_SetLyingState, InIsTransforming) == 0x000001, "Member 'SHEnemyAnimComponent_SetLyingState::InIsTransforming' has a wrong offset!");

// Function SHProto.SHEnemyAnimComponent.GetActiveHitReactionVariants
// 0x0018 (0x0018 - 0x0000)
struct SHEnemyAnimComponent_GetActiveHitReactionVariants final
{
public:
	ESHHitReactionResponseType                    InHitReactionType;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           OutHitReactionVariants;                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyAnimComponent_GetActiveHitReactionVariants) == 0x000008, "Wrong alignment on SHEnemyAnimComponent_GetActiveHitReactionVariants");
static_assert(sizeof(SHEnemyAnimComponent_GetActiveHitReactionVariants) == 0x000018, "Wrong size on SHEnemyAnimComponent_GetActiveHitReactionVariants");
static_assert(offsetof(SHEnemyAnimComponent_GetActiveHitReactionVariants, InHitReactionType) == 0x000000, "Member 'SHEnemyAnimComponent_GetActiveHitReactionVariants::InHitReactionType' has a wrong offset!");
static_assert(offsetof(SHEnemyAnimComponent_GetActiveHitReactionVariants, OutHitReactionVariants) == 0x000008, "Member 'SHEnemyAnimComponent_GetActiveHitReactionVariants::OutHitReactionVariants' has a wrong offset!");

// Function SHProto.SHEnemyAnimComponent.IsInDeathState
// 0x0002 (0x0002 - 0x0000)
struct SHEnemyAnimComponent_IsInDeathState final
{
public:
	bool                                          InIncludeFinishing;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyAnimComponent_IsInDeathState) == 0x000001, "Wrong alignment on SHEnemyAnimComponent_IsInDeathState");
static_assert(sizeof(SHEnemyAnimComponent_IsInDeathState) == 0x000002, "Wrong size on SHEnemyAnimComponent_IsInDeathState");
static_assert(offsetof(SHEnemyAnimComponent_IsInDeathState, InIncludeFinishing) == 0x000000, "Member 'SHEnemyAnimComponent_IsInDeathState::InIncludeFinishing' has a wrong offset!");
static_assert(offsetof(SHEnemyAnimComponent_IsInDeathState, ReturnValue) == 0x000001, "Member 'SHEnemyAnimComponent_IsInDeathState::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyAnimComponent.IsInFalterState
// 0x0002 (0x0002 - 0x0000)
struct SHEnemyAnimComponent_IsInFalterState final
{
public:
	bool                                          InIncludeFinishing;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyAnimComponent_IsInFalterState) == 0x000001, "Wrong alignment on SHEnemyAnimComponent_IsInFalterState");
static_assert(sizeof(SHEnemyAnimComponent_IsInFalterState) == 0x000002, "Wrong size on SHEnemyAnimComponent_IsInFalterState");
static_assert(offsetof(SHEnemyAnimComponent_IsInFalterState, InIncludeFinishing) == 0x000000, "Member 'SHEnemyAnimComponent_IsInFalterState::InIncludeFinishing' has a wrong offset!");
static_assert(offsetof(SHEnemyAnimComponent_IsInFalterState, ReturnValue) == 0x000001, "Member 'SHEnemyAnimComponent_IsInFalterState::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyAnimComponent.IsInKnockdownState
// 0x0002 (0x0002 - 0x0000)
struct SHEnemyAnimComponent_IsInKnockdownState final
{
public:
	bool                                          InIncludeFinishing;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyAnimComponent_IsInKnockdownState) == 0x000001, "Wrong alignment on SHEnemyAnimComponent_IsInKnockdownState");
static_assert(sizeof(SHEnemyAnimComponent_IsInKnockdownState) == 0x000002, "Wrong size on SHEnemyAnimComponent_IsInKnockdownState");
static_assert(offsetof(SHEnemyAnimComponent_IsInKnockdownState, InIncludeFinishing) == 0x000000, "Member 'SHEnemyAnimComponent_IsInKnockdownState::InIncludeFinishing' has a wrong offset!");
static_assert(offsetof(SHEnemyAnimComponent_IsInKnockdownState, ReturnValue) == 0x000001, "Member 'SHEnemyAnimComponent_IsInKnockdownState::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyAnimComponent.IsInNormalHitState
// 0x0002 (0x0002 - 0x0000)
struct SHEnemyAnimComponent_IsInNormalHitState final
{
public:
	bool                                          InIncludeFinishing;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyAnimComponent_IsInNormalHitState) == 0x000001, "Wrong alignment on SHEnemyAnimComponent_IsInNormalHitState");
static_assert(sizeof(SHEnemyAnimComponent_IsInNormalHitState) == 0x000002, "Wrong size on SHEnemyAnimComponent_IsInNormalHitState");
static_assert(offsetof(SHEnemyAnimComponent_IsInNormalHitState, InIncludeFinishing) == 0x000000, "Member 'SHEnemyAnimComponent_IsInNormalHitState::InIncludeFinishing' has a wrong offset!");
static_assert(offsetof(SHEnemyAnimComponent_IsInNormalHitState, ReturnValue) == 0x000001, "Member 'SHEnemyAnimComponent_IsInNormalHitState::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyAnimComponent.IsInStaggerState
// 0x0002 (0x0002 - 0x0000)
struct SHEnemyAnimComponent_IsInStaggerState final
{
public:
	bool                                          InIncludeFinishing;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyAnimComponent_IsInStaggerState) == 0x000001, "Wrong alignment on SHEnemyAnimComponent_IsInStaggerState");
static_assert(sizeof(SHEnemyAnimComponent_IsInStaggerState) == 0x000002, "Wrong size on SHEnemyAnimComponent_IsInStaggerState");
static_assert(offsetof(SHEnemyAnimComponent_IsInStaggerState, InIncludeFinishing) == 0x000000, "Member 'SHEnemyAnimComponent_IsInStaggerState::InIncludeFinishing' has a wrong offset!");
static_assert(offsetof(SHEnemyAnimComponent_IsInStaggerState, ReturnValue) == 0x000001, "Member 'SHEnemyAnimComponent_IsInStaggerState::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyAnimComponent.IsInTwitchState
// 0x0002 (0x0002 - 0x0000)
struct SHEnemyAnimComponent_IsInTwitchState final
{
public:
	bool                                          InIncludeFinishing;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyAnimComponent_IsInTwitchState) == 0x000001, "Wrong alignment on SHEnemyAnimComponent_IsInTwitchState");
static_assert(sizeof(SHEnemyAnimComponent_IsInTwitchState) == 0x000002, "Wrong size on SHEnemyAnimComponent_IsInTwitchState");
static_assert(offsetof(SHEnemyAnimComponent_IsInTwitchState, InIncludeFinishing) == 0x000000, "Member 'SHEnemyAnimComponent_IsInTwitchState::InIncludeFinishing' has a wrong offset!");
static_assert(offsetof(SHEnemyAnimComponent_IsInTwitchState, ReturnValue) == 0x000001, "Member 'SHEnemyAnimComponent_IsInTwitchState::ReturnValue' has a wrong offset!");

// Function SHProto.SHAbstractDaddyAnimComponent.SetBrakingPoint
// 0x0020 (0x0020 - 0x0000)
struct SHAbstractDaddyAnimComponent_SetBrakingPoint final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AreaFlags;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHAbstractDaddyAnimComponent_SetBrakingPoint) == 0x000008, "Wrong alignment on SHAbstractDaddyAnimComponent_SetBrakingPoint");
static_assert(sizeof(SHAbstractDaddyAnimComponent_SetBrakingPoint) == 0x000020, "Wrong size on SHAbstractDaddyAnimComponent_SetBrakingPoint");
static_assert(offsetof(SHAbstractDaddyAnimComponent_SetBrakingPoint, Location) == 0x000000, "Member 'SHAbstractDaddyAnimComponent_SetBrakingPoint::Location' has a wrong offset!");
static_assert(offsetof(SHAbstractDaddyAnimComponent_SetBrakingPoint, AreaFlags) == 0x000018, "Member 'SHAbstractDaddyAnimComponent_SetBrakingPoint::AreaFlags' has a wrong offset!");

// Function SHProto.SHPendulumComponent.AddAngularVelocity
// 0x0004 (0x0004 - 0x0000)
struct SHPendulumComponent_AddAngularVelocity final
{
public:
	float                                         InVelocity;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPendulumComponent_AddAngularVelocity) == 0x000004, "Wrong alignment on SHPendulumComponent_AddAngularVelocity");
static_assert(sizeof(SHPendulumComponent_AddAngularVelocity) == 0x000004, "Wrong size on SHPendulumComponent_AddAngularVelocity");
static_assert(offsetof(SHPendulumComponent_AddAngularVelocity, InVelocity) == 0x000000, "Member 'SHPendulumComponent_AddAngularVelocity::InVelocity' has a wrong offset!");

// Function SHProto.SHPendulumComponent.SetFreeze
// 0x0001 (0x0001 - 0x0000)
struct SHPendulumComponent_SetFreeze final
{
public:
	bool                                          bInFreeze;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPendulumComponent_SetFreeze) == 0x000001, "Wrong alignment on SHPendulumComponent_SetFreeze");
static_assert(sizeof(SHPendulumComponent_SetFreeze) == 0x000001, "Wrong size on SHPendulumComponent_SetFreeze");
static_assert(offsetof(SHPendulumComponent_SetFreeze, bInFreeze) == 0x000000, "Member 'SHPendulumComponent_SetFreeze::bInFreeze' has a wrong offset!");

// Function SHProto.SHDoorLockBaseComponent.OnInteract
// 0x0010 (0x0010 - 0x0000)
struct SHDoorLockBaseComponent_OnInteract final
{
public:
	class USHInteractionGenericComponent*         Generic;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHCharacterPlay*                       Character;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorLockBaseComponent_OnInteract) == 0x000008, "Wrong alignment on SHDoorLockBaseComponent_OnInteract");
static_assert(sizeof(SHDoorLockBaseComponent_OnInteract) == 0x000010, "Wrong size on SHDoorLockBaseComponent_OnInteract");
static_assert(offsetof(SHDoorLockBaseComponent_OnInteract, Generic) == 0x000000, "Member 'SHDoorLockBaseComponent_OnInteract::Generic' has a wrong offset!");
static_assert(offsetof(SHDoorLockBaseComponent_OnInteract, Character) == 0x000008, "Member 'SHDoorLockBaseComponent_OnInteract::Character' has a wrong offset!");

// Function SHProto.SHDoorLockBaseComponent.SetLocked
// 0x0002 (0x0002 - 0x0000)
struct SHDoorLockBaseComponent_SetLocked final
{
public:
	bool                                          NewLocked;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkipDetectableManagement;                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorLockBaseComponent_SetLocked) == 0x000001, "Wrong alignment on SHDoorLockBaseComponent_SetLocked");
static_assert(sizeof(SHDoorLockBaseComponent_SetLocked) == 0x000002, "Wrong size on SHDoorLockBaseComponent_SetLocked");
static_assert(offsetof(SHDoorLockBaseComponent_SetLocked, NewLocked) == 0x000000, "Member 'SHDoorLockBaseComponent_SetLocked::NewLocked' has a wrong offset!");
static_assert(offsetof(SHDoorLockBaseComponent_SetLocked, SkipDetectableManagement) == 0x000001, "Member 'SHDoorLockBaseComponent_SetLocked::SkipDetectableManagement' has a wrong offset!");

// DelegateFunction SHProto.SHDoorLockBaseComponent.SHDoorLockEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHDoorLockBaseComponent_SHDoorLockEvent__DelegateSignature final
{
public:
	class USHDoorLockBaseComponent*               Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorLockBaseComponent_SHDoorLockEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHDoorLockBaseComponent_SHDoorLockEvent__DelegateSignature");
static_assert(sizeof(SHDoorLockBaseComponent_SHDoorLockEvent__DelegateSignature) == 0x000008, "Wrong size on SHDoorLockBaseComponent_SHDoorLockEvent__DelegateSignature");
static_assert(offsetof(SHDoorLockBaseComponent_SHDoorLockEvent__DelegateSignature, Component) == 0x000000, "Member 'SHDoorLockBaseComponent_SHDoorLockEvent__DelegateSignature::Component' has a wrong offset!");

// DelegateFunction SHProto.SHDoorLockBaseComponent.SHDoorLockEventBP__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHDoorLockBaseComponent_SHDoorLockEventBP__DelegateSignature final
{
public:
	class USHDoorLockBaseComponent*               Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorLockBaseComponent_SHDoorLockEventBP__DelegateSignature) == 0x000008, "Wrong alignment on SHDoorLockBaseComponent_SHDoorLockEventBP__DelegateSignature");
static_assert(sizeof(SHDoorLockBaseComponent_SHDoorLockEventBP__DelegateSignature) == 0x000008, "Wrong size on SHDoorLockBaseComponent_SHDoorLockEventBP__DelegateSignature");
static_assert(offsetof(SHDoorLockBaseComponent_SHDoorLockEventBP__DelegateSignature, Component) == 0x000000, "Member 'SHDoorLockBaseComponent_SHDoorLockEventBP__DelegateSignature::Component' has a wrong offset!");

// Function SHProto.SHDoorLockBaseComponent.IsLocked
// 0x0001 (0x0001 - 0x0000)
struct SHDoorLockBaseComponent_IsLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorLockBaseComponent_IsLocked) == 0x000001, "Wrong alignment on SHDoorLockBaseComponent_IsLocked");
static_assert(sizeof(SHDoorLockBaseComponent_IsLocked) == 0x000001, "Wrong size on SHDoorLockBaseComponent_IsLocked");
static_assert(offsetof(SHDoorLockBaseComponent_IsLocked, ReturnValue) == 0x000000, "Member 'SHDoorLockBaseComponent_IsLocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHDoorLockBaseComponent.IsLockedOnBegin
// 0x0001 (0x0001 - 0x0000)
struct SHDoorLockBaseComponent_IsLockedOnBegin final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorLockBaseComponent_IsLockedOnBegin) == 0x000001, "Wrong alignment on SHDoorLockBaseComponent_IsLockedOnBegin");
static_assert(sizeof(SHDoorLockBaseComponent_IsLockedOnBegin) == 0x000001, "Wrong size on SHDoorLockBaseComponent_IsLockedOnBegin");
static_assert(offsetof(SHDoorLockBaseComponent_IsLockedOnBegin, ReturnValue) == 0x000000, "Member 'SHDoorLockBaseComponent_IsLockedOnBegin::ReturnValue' has a wrong offset!");

// Function SHProto.SHDoorAnimationsBaseComponent.HandleReceiveDamageEvent
// 0x0008 (0x0008 - 0x0000)
struct SHDoorAnimationsBaseComponent_HandleReceiveDamageEvent final
{
public:
	class USHCharacterPlayCombatComponent*        CombatComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorAnimationsBaseComponent_HandleReceiveDamageEvent) == 0x000008, "Wrong alignment on SHDoorAnimationsBaseComponent_HandleReceiveDamageEvent");
static_assert(sizeof(SHDoorAnimationsBaseComponent_HandleReceiveDamageEvent) == 0x000008, "Wrong size on SHDoorAnimationsBaseComponent_HandleReceiveDamageEvent");
static_assert(offsetof(SHDoorAnimationsBaseComponent_HandleReceiveDamageEvent, CombatComp) == 0x000000, "Member 'SHDoorAnimationsBaseComponent_HandleReceiveDamageEvent::CombatComp' has a wrong offset!");

// DelegateFunction SHProto.SHDoorAnimationsBaseComponent.SHDoorAnimationsBaseEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHDoorAnimationsBaseComponent_SHDoorAnimationsBaseEvent__DelegateSignature final
{
public:
	class USHDoorAnimationsBaseComponent*         Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorAnimationsBaseComponent_SHDoorAnimationsBaseEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHDoorAnimationsBaseComponent_SHDoorAnimationsBaseEvent__DelegateSignature");
static_assert(sizeof(SHDoorAnimationsBaseComponent_SHDoorAnimationsBaseEvent__DelegateSignature) == 0x000008, "Wrong size on SHDoorAnimationsBaseComponent_SHDoorAnimationsBaseEvent__DelegateSignature");
static_assert(offsetof(SHDoorAnimationsBaseComponent_SHDoorAnimationsBaseEvent__DelegateSignature, Component) == 0x000000, "Member 'SHDoorAnimationsBaseComponent_SHDoorAnimationsBaseEvent__DelegateSignature::Component' has a wrong offset!");

// DelegateFunction SHProto.SHDoorAnimationsBaseComponent.SHDoorAnimationsBaseEventBP__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHDoorAnimationsBaseComponent_SHDoorAnimationsBaseEventBP__DelegateSignature final
{
public:
	class USHDoorAnimationsBaseComponent*         Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorAnimationsBaseComponent_SHDoorAnimationsBaseEventBP__DelegateSignature) == 0x000008, "Wrong alignment on SHDoorAnimationsBaseComponent_SHDoorAnimationsBaseEventBP__DelegateSignature");
static_assert(sizeof(SHDoorAnimationsBaseComponent_SHDoorAnimationsBaseEventBP__DelegateSignature) == 0x000008, "Wrong size on SHDoorAnimationsBaseComponent_SHDoorAnimationsBaseEventBP__DelegateSignature");
static_assert(offsetof(SHDoorAnimationsBaseComponent_SHDoorAnimationsBaseEventBP__DelegateSignature, Component) == 0x000000, "Member 'SHDoorAnimationsBaseComponent_SHDoorAnimationsBaseEventBP__DelegateSignature::Component' has a wrong offset!");

// Function SHProto.SHAbstractDaddyAnimInstance.SetBrakingPoint
// 0x0018 (0x0018 - 0x0000)
struct SHAbstractDaddyAnimInstance_SetBrakingPoint final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAbstractDaddyAnimInstance_SetBrakingPoint) == 0x000008, "Wrong alignment on SHAbstractDaddyAnimInstance_SetBrakingPoint");
static_assert(sizeof(SHAbstractDaddyAnimInstance_SetBrakingPoint) == 0x000018, "Wrong size on SHAbstractDaddyAnimInstance_SetBrakingPoint");
static_assert(offsetof(SHAbstractDaddyAnimInstance_SetBrakingPoint, Location) == 0x000000, "Member 'SHAbstractDaddyAnimInstance_SetBrakingPoint::Location' has a wrong offset!");

// Function SHProto.SHAbstractDaddyAnimInstance.SetOutstretchedArmsActive
// 0x0001 (0x0001 - 0x0000)
struct SHAbstractDaddyAnimInstance_SetOutstretchedArmsActive final
{
public:
	bool                                          InOutstretchedArmsActive;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAbstractDaddyAnimInstance_SetOutstretchedArmsActive) == 0x000001, "Wrong alignment on SHAbstractDaddyAnimInstance_SetOutstretchedArmsActive");
static_assert(sizeof(SHAbstractDaddyAnimInstance_SetOutstretchedArmsActive) == 0x000001, "Wrong size on SHAbstractDaddyAnimInstance_SetOutstretchedArmsActive");
static_assert(offsetof(SHAbstractDaddyAnimInstance_SetOutstretchedArmsActive, InOutstretchedArmsActive) == 0x000000, "Member 'SHAbstractDaddyAnimInstance_SetOutstretchedArmsActive::InOutstretchedArmsActive' has a wrong offset!");

// Function SHProto.SHAbstractDaddyAnimInstance.GetAbstractDaddyAnimInstanceStateData
// 0x0008 (0x0008 - 0x0000)
struct SHAbstractDaddyAnimInstance_GetAbstractDaddyAnimInstanceStateData final
{
public:
	class USHAbstractDaddyAnimInstanceStateData*  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAbstractDaddyAnimInstance_GetAbstractDaddyAnimInstanceStateData) == 0x000008, "Wrong alignment on SHAbstractDaddyAnimInstance_GetAbstractDaddyAnimInstanceStateData");
static_assert(sizeof(SHAbstractDaddyAnimInstance_GetAbstractDaddyAnimInstanceStateData) == 0x000008, "Wrong size on SHAbstractDaddyAnimInstance_GetAbstractDaddyAnimInstanceStateData");
static_assert(offsetof(SHAbstractDaddyAnimInstance_GetAbstractDaddyAnimInstanceStateData, ReturnValue) == 0x000000, "Member 'SHAbstractDaddyAnimInstance_GetAbstractDaddyAnimInstanceStateData::ReturnValue' has a wrong offset!");

// Function SHProto.SHAbstractDaddyAnimInstance.GetAbstractDaddyLocomotionAnimInstance
// 0x0010 (0x0010 - 0x0000)
struct SHAbstractDaddyAnimInstance_GetAbstractDaddyLocomotionAnimInstance final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USHAbstractDaddyLocomotionAnimInstance* ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAbstractDaddyAnimInstance_GetAbstractDaddyLocomotionAnimInstance) == 0x000008, "Wrong alignment on SHAbstractDaddyAnimInstance_GetAbstractDaddyLocomotionAnimInstance");
static_assert(sizeof(SHAbstractDaddyAnimInstance_GetAbstractDaddyLocomotionAnimInstance) == 0x000010, "Wrong size on SHAbstractDaddyAnimInstance_GetAbstractDaddyLocomotionAnimInstance");
static_assert(offsetof(SHAbstractDaddyAnimInstance_GetAbstractDaddyLocomotionAnimInstance, SlotIndex) == 0x000000, "Member 'SHAbstractDaddyAnimInstance_GetAbstractDaddyLocomotionAnimInstance::SlotIndex' has a wrong offset!");
static_assert(offsetof(SHAbstractDaddyAnimInstance_GetAbstractDaddyLocomotionAnimInstance, ReturnValue) == 0x000008, "Member 'SHAbstractDaddyAnimInstance_GetAbstractDaddyLocomotionAnimInstance::ReturnValue' has a wrong offset!");

// Function SHProto.SHAbstractDaddyAnimInstance.GetBrakingPoint
// 0x0018 (0x0018 - 0x0000)
struct SHAbstractDaddyAnimInstance_GetBrakingPoint final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAbstractDaddyAnimInstance_GetBrakingPoint) == 0x000008, "Wrong alignment on SHAbstractDaddyAnimInstance_GetBrakingPoint");
static_assert(sizeof(SHAbstractDaddyAnimInstance_GetBrakingPoint) == 0x000018, "Wrong size on SHAbstractDaddyAnimInstance_GetBrakingPoint");
static_assert(offsetof(SHAbstractDaddyAnimInstance_GetBrakingPoint, ReturnValue) == 0x000000, "Member 'SHAbstractDaddyAnimInstance_GetBrakingPoint::ReturnValue' has a wrong offset!");

// Function SHProto.SHNPCAnimInstanceStateData.GetDesiredLocalRotationYaw
// 0x0004 (0x0004 - 0x0000)
struct SHNPCAnimInstanceStateData_GetDesiredLocalRotationYaw final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHNPCAnimInstanceStateData_GetDesiredLocalRotationYaw) == 0x000004, "Wrong alignment on SHNPCAnimInstanceStateData_GetDesiredLocalRotationYaw");
static_assert(sizeof(SHNPCAnimInstanceStateData_GetDesiredLocalRotationYaw) == 0x000004, "Wrong size on SHNPCAnimInstanceStateData_GetDesiredLocalRotationYaw");
static_assert(offsetof(SHNPCAnimInstanceStateData_GetDesiredLocalRotationYaw, ReturnValue) == 0x000000, "Member 'SHNPCAnimInstanceStateData_GetDesiredLocalRotationYaw::ReturnValue' has a wrong offset!");

// Function SHProto.SHNPCAnimInstanceStateData.GetDesiredLocalVelocity
// 0x0018 (0x0018 - 0x0000)
struct SHNPCAnimInstanceStateData_GetDesiredLocalVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHNPCAnimInstanceStateData_GetDesiredLocalVelocity) == 0x000008, "Wrong alignment on SHNPCAnimInstanceStateData_GetDesiredLocalVelocity");
static_assert(sizeof(SHNPCAnimInstanceStateData_GetDesiredLocalVelocity) == 0x000018, "Wrong size on SHNPCAnimInstanceStateData_GetDesiredLocalVelocity");
static_assert(offsetof(SHNPCAnimInstanceStateData_GetDesiredLocalVelocity, ReturnValue) == 0x000000, "Member 'SHNPCAnimInstanceStateData_GetDesiredLocalVelocity::ReturnValue' has a wrong offset!");

// Function SHProto.SHNPCAnimInstanceStateData.GetDesiredStrafeAngle
// 0x0004 (0x0004 - 0x0000)
struct SHNPCAnimInstanceStateData_GetDesiredStrafeAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHNPCAnimInstanceStateData_GetDesiredStrafeAngle) == 0x000004, "Wrong alignment on SHNPCAnimInstanceStateData_GetDesiredStrafeAngle");
static_assert(sizeof(SHNPCAnimInstanceStateData_GetDesiredStrafeAngle) == 0x000004, "Wrong size on SHNPCAnimInstanceStateData_GetDesiredStrafeAngle");
static_assert(offsetof(SHNPCAnimInstanceStateData_GetDesiredStrafeAngle, ReturnValue) == 0x000000, "Member 'SHNPCAnimInstanceStateData_GetDesiredStrafeAngle::ReturnValue' has a wrong offset!");

// Function SHProto.SHNPCAnimInstanceStateData.GetLookAtRotation
// 0x0020 (0x0020 - 0x0000)
struct SHNPCAnimInstanceStateData_GetLookAtRotation final
{
public:
	struct FRotator                               OutWorldRotation;                                  // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         OutRotationAlpha;                                  // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHNPCAnimInstanceStateData_GetLookAtRotation) == 0x000008, "Wrong alignment on SHNPCAnimInstanceStateData_GetLookAtRotation");
static_assert(sizeof(SHNPCAnimInstanceStateData_GetLookAtRotation) == 0x000020, "Wrong size on SHNPCAnimInstanceStateData_GetLookAtRotation");
static_assert(offsetof(SHNPCAnimInstanceStateData_GetLookAtRotation, OutWorldRotation) == 0x000000, "Member 'SHNPCAnimInstanceStateData_GetLookAtRotation::OutWorldRotation' has a wrong offset!");
static_assert(offsetof(SHNPCAnimInstanceStateData_GetLookAtRotation, OutRotationAlpha) == 0x000018, "Member 'SHNPCAnimInstanceStateData_GetLookAtRotation::OutRotationAlpha' has a wrong offset!");

// Function SHProto.SHNPCAnimInstanceStateData.GetStrafeAngle
// 0x0004 (0x0004 - 0x0000)
struct SHNPCAnimInstanceStateData_GetStrafeAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHNPCAnimInstanceStateData_GetStrafeAngle) == 0x000004, "Wrong alignment on SHNPCAnimInstanceStateData_GetStrafeAngle");
static_assert(sizeof(SHNPCAnimInstanceStateData_GetStrafeAngle) == 0x000004, "Wrong size on SHNPCAnimInstanceStateData_GetStrafeAngle");
static_assert(offsetof(SHNPCAnimInstanceStateData_GetStrafeAngle, ReturnValue) == 0x000000, "Member 'SHNPCAnimInstanceStateData_GetStrafeAngle::ReturnValue' has a wrong offset!");

// Function SHProto.SHNPCAnimInstanceStateData.GetTurnInPlaceAngle
// 0x0004 (0x0004 - 0x0000)
struct SHNPCAnimInstanceStateData_GetTurnInPlaceAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHNPCAnimInstanceStateData_GetTurnInPlaceAngle) == 0x000004, "Wrong alignment on SHNPCAnimInstanceStateData_GetTurnInPlaceAngle");
static_assert(sizeof(SHNPCAnimInstanceStateData_GetTurnInPlaceAngle) == 0x000004, "Wrong size on SHNPCAnimInstanceStateData_GetTurnInPlaceAngle");
static_assert(offsetof(SHNPCAnimInstanceStateData_GetTurnInPlaceAngle, ReturnValue) == 0x000000, "Member 'SHNPCAnimInstanceStateData_GetTurnInPlaceAngle::ReturnValue' has a wrong offset!");

// Function SHProto.SHAbstractDaddyAnimInstanceStateData.GetAreOutstretchedArmsActive
// 0x0001 (0x0001 - 0x0000)
struct SHAbstractDaddyAnimInstanceStateData_GetAreOutstretchedArmsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAbstractDaddyAnimInstanceStateData_GetAreOutstretchedArmsActive) == 0x000001, "Wrong alignment on SHAbstractDaddyAnimInstanceStateData_GetAreOutstretchedArmsActive");
static_assert(sizeof(SHAbstractDaddyAnimInstanceStateData_GetAreOutstretchedArmsActive) == 0x000001, "Wrong size on SHAbstractDaddyAnimInstanceStateData_GetAreOutstretchedArmsActive");
static_assert(offsetof(SHAbstractDaddyAnimInstanceStateData_GetAreOutstretchedArmsActive, ReturnValue) == 0x000000, "Member 'SHAbstractDaddyAnimInstanceStateData_GetAreOutstretchedArmsActive::ReturnValue' has a wrong offset!");

// Function SHProto.SHAbstractDaddyAnimInstanceStateData.GetBrakingSegmentLocation
// 0x0018 (0x0018 - 0x0000)
struct SHAbstractDaddyAnimInstanceStateData_GetBrakingSegmentLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAbstractDaddyAnimInstanceStateData_GetBrakingSegmentLocation) == 0x000008, "Wrong alignment on SHAbstractDaddyAnimInstanceStateData_GetBrakingSegmentLocation");
static_assert(sizeof(SHAbstractDaddyAnimInstanceStateData_GetBrakingSegmentLocation) == 0x000018, "Wrong size on SHAbstractDaddyAnimInstanceStateData_GetBrakingSegmentLocation");
static_assert(offsetof(SHAbstractDaddyAnimInstanceStateData_GetBrakingSegmentLocation, ReturnValue) == 0x000000, "Member 'SHAbstractDaddyAnimInstanceStateData_GetBrakingSegmentLocation::ReturnValue' has a wrong offset!");

// Function SHProto.SHDoorControlInterface.OnPushedByDoorEvent
// 0x0020 (0x0020 - 0x0000)
struct SHDoorControlInterface_OnPushedByDoorEvent final
{
public:
	class USHDoorMovementComponent*               DoorMovementComp;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PushNormal;                                        // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorControlInterface_OnPushedByDoorEvent) == 0x000008, "Wrong alignment on SHDoorControlInterface_OnPushedByDoorEvent");
static_assert(sizeof(SHDoorControlInterface_OnPushedByDoorEvent) == 0x000020, "Wrong size on SHDoorControlInterface_OnPushedByDoorEvent");
static_assert(offsetof(SHDoorControlInterface_OnPushedByDoorEvent, DoorMovementComp) == 0x000000, "Member 'SHDoorControlInterface_OnPushedByDoorEvent::DoorMovementComp' has a wrong offset!");
static_assert(offsetof(SHDoorControlInterface_OnPushedByDoorEvent, PushNormal) == 0x000008, "Member 'SHDoorControlInterface_OnPushedByDoorEvent::PushNormal' has a wrong offset!");

// Function SHProto.SHDoorControlInterface.CanBePushedByDoor
// 0x0001 (0x0001 - 0x0000)
struct SHDoorControlInterface_CanBePushedByDoor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorControlInterface_CanBePushedByDoor) == 0x000001, "Wrong alignment on SHDoorControlInterface_CanBePushedByDoor");
static_assert(sizeof(SHDoorControlInterface_CanBePushedByDoor) == 0x000001, "Wrong size on SHDoorControlInterface_CanBePushedByDoor");
static_assert(offsetof(SHDoorControlInterface_CanBePushedByDoor, ReturnValue) == 0x000000, "Member 'SHDoorControlInterface_CanBePushedByDoor::ReturnValue' has a wrong offset!");

// Function SHProto.SHDoorControlInterface.CanPushDoor
// 0x0001 (0x0001 - 0x0000)
struct SHDoorControlInterface_CanPushDoor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorControlInterface_CanPushDoor) == 0x000001, "Wrong alignment on SHDoorControlInterface_CanPushDoor");
static_assert(sizeof(SHDoorControlInterface_CanPushDoor) == 0x000001, "Wrong size on SHDoorControlInterface_CanPushDoor");
static_assert(offsetof(SHDoorControlInterface_CanPushDoor, ReturnValue) == 0x000000, "Member 'SHDoorControlInterface_CanPushDoor::ReturnValue' has a wrong offset!");

// Function SHProto.SHDoorControlInterface.GetPushingVelocity
// 0x0018 (0x0018 - 0x0000)
struct SHDoorControlInterface_GetPushingVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorControlInterface_GetPushingVelocity) == 0x000008, "Wrong alignment on SHDoorControlInterface_GetPushingVelocity");
static_assert(sizeof(SHDoorControlInterface_GetPushingVelocity) == 0x000018, "Wrong size on SHDoorControlInterface_GetPushingVelocity");
static_assert(offsetof(SHDoorControlInterface_GetPushingVelocity, ReturnValue) == 0x000000, "Member 'SHDoorControlInterface_GetPushingVelocity::ReturnValue' has a wrong offset!");

// Function SHProto.SHAbstractDaddyLocomotionAnimInstance.SetChargeMovementIsActive
// 0x0001 (0x0001 - 0x0000)
struct SHAbstractDaddyLocomotionAnimInstance_SetChargeMovementIsActive final
{
public:
	bool                                          NewActive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAbstractDaddyLocomotionAnimInstance_SetChargeMovementIsActive) == 0x000001, "Wrong alignment on SHAbstractDaddyLocomotionAnimInstance_SetChargeMovementIsActive");
static_assert(sizeof(SHAbstractDaddyLocomotionAnimInstance_SetChargeMovementIsActive) == 0x000001, "Wrong size on SHAbstractDaddyLocomotionAnimInstance_SetChargeMovementIsActive");
static_assert(offsetof(SHAbstractDaddyLocomotionAnimInstance_SetChargeMovementIsActive, NewActive) == 0x000000, "Member 'SHAbstractDaddyLocomotionAnimInstance_SetChargeMovementIsActive::NewActive' has a wrong offset!");

// Function SHProto.SHAbstractDaddyLocomotionAnimInstance.GetAbstractDaddyAnimInstanceStateData
// 0x0008 (0x0008 - 0x0000)
struct SHAbstractDaddyLocomotionAnimInstance_GetAbstractDaddyAnimInstanceStateData final
{
public:
	class USHAbstractDaddyAnimInstanceStateData*  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAbstractDaddyLocomotionAnimInstance_GetAbstractDaddyAnimInstanceStateData) == 0x000008, "Wrong alignment on SHAbstractDaddyLocomotionAnimInstance_GetAbstractDaddyAnimInstanceStateData");
static_assert(sizeof(SHAbstractDaddyLocomotionAnimInstance_GetAbstractDaddyAnimInstanceStateData) == 0x000008, "Wrong size on SHAbstractDaddyLocomotionAnimInstance_GetAbstractDaddyAnimInstanceStateData");
static_assert(offsetof(SHAbstractDaddyLocomotionAnimInstance_GetAbstractDaddyAnimInstanceStateData, ReturnValue) == 0x000000, "Member 'SHAbstractDaddyLocomotionAnimInstance_GetAbstractDaddyAnimInstanceStateData::ReturnValue' has a wrong offset!");

// Function SHProto.SHAbstractDaddyStandingLocomotionAnimInstance.GetSmoothedDesiredRotationYaw
// 0x0004 (0x0004 - 0x0000)
struct SHAbstractDaddyStandingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw final
{
public:
	float                                         OutYaw;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAbstractDaddyStandingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw) == 0x000004, "Wrong alignment on SHAbstractDaddyStandingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw");
static_assert(sizeof(SHAbstractDaddyStandingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw) == 0x000004, "Wrong size on SHAbstractDaddyStandingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw");
static_assert(offsetof(SHAbstractDaddyStandingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw, OutYaw) == 0x000000, "Member 'SHAbstractDaddyStandingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw::OutYaw' has a wrong offset!");

// Function SHProto.SHAbstractDaddyStandingLocomotionAnimInstance.GetSmoothedDesiredVelocity
// 0x0018 (0x0018 - 0x0000)
struct SHAbstractDaddyStandingLocomotionAnimInstance_GetSmoothedDesiredVelocity final
{
public:
	struct FVector                                OutVelocity;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAbstractDaddyStandingLocomotionAnimInstance_GetSmoothedDesiredVelocity) == 0x000008, "Wrong alignment on SHAbstractDaddyStandingLocomotionAnimInstance_GetSmoothedDesiredVelocity");
static_assert(sizeof(SHAbstractDaddyStandingLocomotionAnimInstance_GetSmoothedDesiredVelocity) == 0x000018, "Wrong size on SHAbstractDaddyStandingLocomotionAnimInstance_GetSmoothedDesiredVelocity");
static_assert(offsetof(SHAbstractDaddyStandingLocomotionAnimInstance_GetSmoothedDesiredVelocity, OutVelocity) == 0x000000, "Member 'SHAbstractDaddyStandingLocomotionAnimInstance_GetSmoothedDesiredVelocity::OutVelocity' has a wrong offset!");

// Function SHProto.SHAbstractDaddyStandingLocomotionAnimInstance.GetSmoothedDesiredVelocitySizeAndYaw
// 0x0008 (0x0008 - 0x0000)
struct SHAbstractDaddyStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw final
{
public:
	float                                         OutVelocitySize;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVelocityYaw;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAbstractDaddyStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw) == 0x000004, "Wrong alignment on SHAbstractDaddyStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw");
static_assert(sizeof(SHAbstractDaddyStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw) == 0x000008, "Wrong size on SHAbstractDaddyStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw");
static_assert(offsetof(SHAbstractDaddyStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw, OutVelocitySize) == 0x000000, "Member 'SHAbstractDaddyStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw::OutVelocitySize' has a wrong offset!");
static_assert(offsetof(SHAbstractDaddyStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw, OutVelocityYaw) == 0x000004, "Member 'SHAbstractDaddyStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw::OutVelocityYaw' has a wrong offset!");

// Function SHProto.SHAbstractDaddyStandingLocomotionAnimInstance.GetSmoothedLookAt
// 0x0020 (0x0020 - 0x0000)
struct SHAbstractDaddyStandingLocomotionAnimInstance_GetSmoothedLookAt final
{
public:
	struct FRotator                               OutRotation;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         OutAlpha;                                          // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHAbstractDaddyStandingLocomotionAnimInstance_GetSmoothedLookAt) == 0x000008, "Wrong alignment on SHAbstractDaddyStandingLocomotionAnimInstance_GetSmoothedLookAt");
static_assert(sizeof(SHAbstractDaddyStandingLocomotionAnimInstance_GetSmoothedLookAt) == 0x000020, "Wrong size on SHAbstractDaddyStandingLocomotionAnimInstance_GetSmoothedLookAt");
static_assert(offsetof(SHAbstractDaddyStandingLocomotionAnimInstance_GetSmoothedLookAt, OutRotation) == 0x000000, "Member 'SHAbstractDaddyStandingLocomotionAnimInstance_GetSmoothedLookAt::OutRotation' has a wrong offset!");
static_assert(offsetof(SHAbstractDaddyStandingLocomotionAnimInstance_GetSmoothedLookAt, OutAlpha) == 0x000018, "Member 'SHAbstractDaddyStandingLocomotionAnimInstance_GetSmoothedLookAt::OutAlpha' has a wrong offset!");

// Function SHProto.SHAbstractDaddyStandingLocomotionAnimInstance.GetTargetDesiredRotationYaw
// 0x0004 (0x0004 - 0x0000)
struct SHAbstractDaddyStandingLocomotionAnimInstance_GetTargetDesiredRotationYaw final
{
public:
	float                                         OutYaw;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAbstractDaddyStandingLocomotionAnimInstance_GetTargetDesiredRotationYaw) == 0x000004, "Wrong alignment on SHAbstractDaddyStandingLocomotionAnimInstance_GetTargetDesiredRotationYaw");
static_assert(sizeof(SHAbstractDaddyStandingLocomotionAnimInstance_GetTargetDesiredRotationYaw) == 0x000004, "Wrong size on SHAbstractDaddyStandingLocomotionAnimInstance_GetTargetDesiredRotationYaw");
static_assert(offsetof(SHAbstractDaddyStandingLocomotionAnimInstance_GetTargetDesiredRotationYaw, OutYaw) == 0x000000, "Member 'SHAbstractDaddyStandingLocomotionAnimInstance_GetTargetDesiredRotationYaw::OutYaw' has a wrong offset!");

// Function SHProto.SHAbstractDaddyStandingLocomotionAnimInstance.GetTargetDesiredVelocity
// 0x0018 (0x0018 - 0x0000)
struct SHAbstractDaddyStandingLocomotionAnimInstance_GetTargetDesiredVelocity final
{
public:
	struct FVector                                OutVelocity;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAbstractDaddyStandingLocomotionAnimInstance_GetTargetDesiredVelocity) == 0x000008, "Wrong alignment on SHAbstractDaddyStandingLocomotionAnimInstance_GetTargetDesiredVelocity");
static_assert(sizeof(SHAbstractDaddyStandingLocomotionAnimInstance_GetTargetDesiredVelocity) == 0x000018, "Wrong size on SHAbstractDaddyStandingLocomotionAnimInstance_GetTargetDesiredVelocity");
static_assert(offsetof(SHAbstractDaddyStandingLocomotionAnimInstance_GetTargetDesiredVelocity, OutVelocity) == 0x000000, "Member 'SHAbstractDaddyStandingLocomotionAnimInstance_GetTargetDesiredVelocity::OutVelocity' has a wrong offset!");

// Function SHProto.SHAbstractDaddyStandingLocomotionAnimInstance.GetTargetDesiredVelocitySizeAndYaw
// 0x0008 (0x0008 - 0x0000)
struct SHAbstractDaddyStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw final
{
public:
	float                                         OutVelocitySize;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVelocityYaw;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAbstractDaddyStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw) == 0x000004, "Wrong alignment on SHAbstractDaddyStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw");
static_assert(sizeof(SHAbstractDaddyStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw) == 0x000008, "Wrong size on SHAbstractDaddyStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw");
static_assert(offsetof(SHAbstractDaddyStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw, OutVelocitySize) == 0x000000, "Member 'SHAbstractDaddyStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw::OutVelocitySize' has a wrong offset!");
static_assert(offsetof(SHAbstractDaddyStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw, OutVelocityYaw) == 0x000004, "Member 'SHAbstractDaddyStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw::OutVelocityYaw' has a wrong offset!");

// Function SHProto.SHAbstractDaddyStandingLocomotionAnimInstance.GetTargetLookAtAlpha
// 0x0004 (0x0004 - 0x0000)
struct SHAbstractDaddyStandingLocomotionAnimInstance_GetTargetLookAtAlpha final
{
public:
	float                                         OutAlpha;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAbstractDaddyStandingLocomotionAnimInstance_GetTargetLookAtAlpha) == 0x000004, "Wrong alignment on SHAbstractDaddyStandingLocomotionAnimInstance_GetTargetLookAtAlpha");
static_assert(sizeof(SHAbstractDaddyStandingLocomotionAnimInstance_GetTargetLookAtAlpha) == 0x000004, "Wrong size on SHAbstractDaddyStandingLocomotionAnimInstance_GetTargetLookAtAlpha");
static_assert(offsetof(SHAbstractDaddyStandingLocomotionAnimInstance_GetTargetLookAtAlpha, OutAlpha) == 0x000000, "Member 'SHAbstractDaddyStandingLocomotionAnimInstance_GetTargetLookAtAlpha::OutAlpha' has a wrong offset!");

// Function SHProto.SHMusicSwitchVolume.SetEnabled
// 0x0010 (0x0010 - 0x0000)
struct SHMusicSwitchVolume_SetEnabled final
{
public:
	const class UObject*                          Enabler;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InEnabled;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHMusicSwitchVolume_SetEnabled) == 0x000008, "Wrong alignment on SHMusicSwitchVolume_SetEnabled");
static_assert(sizeof(SHMusicSwitchVolume_SetEnabled) == 0x000010, "Wrong size on SHMusicSwitchVolume_SetEnabled");
static_assert(offsetof(SHMusicSwitchVolume_SetEnabled, Enabler) == 0x000000, "Member 'SHMusicSwitchVolume_SetEnabled::Enabler' has a wrong offset!");
static_assert(offsetof(SHMusicSwitchVolume_SetEnabled, InEnabled) == 0x000008, "Member 'SHMusicSwitchVolume_SetEnabled::InEnabled' has a wrong offset!");

// DelegateFunction SHProto.SHActorLevelObserverComponent.ActorLevelObserverEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHActorLevelObserverComponent_ActorLevelObserverEvent__DelegateSignature final
{
public:
	class AActor*                                 ObservedActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHActorLevelObserverComponent_ActorLevelObserverEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHActorLevelObserverComponent_ActorLevelObserverEvent__DelegateSignature");
static_assert(sizeof(SHActorLevelObserverComponent_ActorLevelObserverEvent__DelegateSignature) == 0x000008, "Wrong size on SHActorLevelObserverComponent_ActorLevelObserverEvent__DelegateSignature");
static_assert(offsetof(SHActorLevelObserverComponent_ActorLevelObserverEvent__DelegateSignature, ObservedActor) == 0x000000, "Member 'SHActorLevelObserverComponent_ActorLevelObserverEvent__DelegateSignature::ObservedActor' has a wrong offset!");

// Function SHProto.SHActorLevelObserverComponent.RequestObserveActor
// 0x0030 (0x0030 - 0x0000)
struct SHActorLevelObserverComponent_RequestObserveActor final
{
public:
	TSoftObjectPtr<class AActor>                  InActorToObserve;                                  // 0x0000(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHActorLevelObserverComponent_RequestObserveActor) == 0x000008, "Wrong alignment on SHActorLevelObserverComponent_RequestObserveActor");
static_assert(sizeof(SHActorLevelObserverComponent_RequestObserveActor) == 0x000030, "Wrong size on SHActorLevelObserverComponent_RequestObserveActor");
static_assert(offsetof(SHActorLevelObserverComponent_RequestObserveActor, InActorToObserve) == 0x000000, "Member 'SHActorLevelObserverComponent_RequestObserveActor::InActorToObserve' has a wrong offset!");

// Function SHProto.SHActorLevelObserverComponent.RequestStopObserveActor
// 0x0030 (0x0030 - 0x0000)
struct SHActorLevelObserverComponent_RequestStopObserveActor final
{
public:
	TSoftObjectPtr<class AActor>                  ActorToStopObserve;                                // 0x0000(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHActorLevelObserverComponent_RequestStopObserveActor) == 0x000008, "Wrong alignment on SHActorLevelObserverComponent_RequestStopObserveActor");
static_assert(sizeof(SHActorLevelObserverComponent_RequestStopObserveActor) == 0x000030, "Wrong size on SHActorLevelObserverComponent_RequestStopObserveActor");
static_assert(offsetof(SHActorLevelObserverComponent_RequestStopObserveActor, ActorToStopObserve) == 0x000000, "Member 'SHActorLevelObserverComponent_RequestStopObserveActor::ActorToStopObserve' has a wrong offset!");

// Function SHProto.SHAnimWholeBodyTranslationSubcomp.CheckOnGroundAdditionalRotation
// 0x0048 (0x0048 - 0x0000)
struct SHAnimWholeBodyTranslationSubcomp_CheckOnGroundAdditionalRotation final
{
public:
	struct FWholeBodyTranslation                  ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimWholeBodyTranslationSubcomp_CheckOnGroundAdditionalRotation) == 0x000008, "Wrong alignment on SHAnimWholeBodyTranslationSubcomp_CheckOnGroundAdditionalRotation");
static_assert(sizeof(SHAnimWholeBodyTranslationSubcomp_CheckOnGroundAdditionalRotation) == 0x000048, "Wrong size on SHAnimWholeBodyTranslationSubcomp_CheckOnGroundAdditionalRotation");
static_assert(offsetof(SHAnimWholeBodyTranslationSubcomp_CheckOnGroundAdditionalRotation, ReturnValue) == 0x000000, "Member 'SHAnimWholeBodyTranslationSubcomp_CheckOnGroundAdditionalRotation::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimWholeBodyTranslationSubcomp.SetAdditionalRotation
// 0x0018 (0x0018 - 0x0000)
struct SHAnimWholeBodyTranslationSubcomp_SetAdditionalRotation final
{
public:
	struct FRotator                               NewRotation;                                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimWholeBodyTranslationSubcomp_SetAdditionalRotation) == 0x000008, "Wrong alignment on SHAnimWholeBodyTranslationSubcomp_SetAdditionalRotation");
static_assert(sizeof(SHAnimWholeBodyTranslationSubcomp_SetAdditionalRotation) == 0x000018, "Wrong size on SHAnimWholeBodyTranslationSubcomp_SetAdditionalRotation");
static_assert(offsetof(SHAnimWholeBodyTranslationSubcomp_SetAdditionalRotation, NewRotation) == 0x000000, "Member 'SHAnimWholeBodyTranslationSubcomp_SetAdditionalRotation::NewRotation' has a wrong offset!");

// Function SHProto.SHAnimWholeBodyTranslationSubcomp.SetAdditionalTranslation
// 0x0048 (0x0048 - 0x0000)
struct SHAnimWholeBodyTranslationSubcomp_SetAdditionalTranslation final
{
public:
	struct FWholeBodyTranslation                  InAdditionalRotationTarget;                        // 0x0000(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimWholeBodyTranslationSubcomp_SetAdditionalTranslation) == 0x000008, "Wrong alignment on SHAnimWholeBodyTranslationSubcomp_SetAdditionalTranslation");
static_assert(sizeof(SHAnimWholeBodyTranslationSubcomp_SetAdditionalTranslation) == 0x000048, "Wrong size on SHAnimWholeBodyTranslationSubcomp_SetAdditionalTranslation");
static_assert(offsetof(SHAnimWholeBodyTranslationSubcomp_SetAdditionalTranslation, InAdditionalRotationTarget) == 0x000000, "Member 'SHAnimWholeBodyTranslationSubcomp_SetAdditionalTranslation::InAdditionalRotationTarget' has a wrong offset!");

// Function SHProto.SHActorsManagementControllableInterface.ApplyShouldBeActive
// 0x0010 (0x0010 - 0x0000)
struct SHActorsManagementControllableInterface_ApplyShouldBeActive final
{
public:
	class ASHActorsManagementBaseControllerActor* InControllerActor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InShouldBeActive;                                  // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHActorsManagementControllableInterface_ApplyShouldBeActive) == 0x000008, "Wrong alignment on SHActorsManagementControllableInterface_ApplyShouldBeActive");
static_assert(sizeof(SHActorsManagementControllableInterface_ApplyShouldBeActive) == 0x000010, "Wrong size on SHActorsManagementControllableInterface_ApplyShouldBeActive");
static_assert(offsetof(SHActorsManagementControllableInterface_ApplyShouldBeActive, InControllerActor) == 0x000000, "Member 'SHActorsManagementControllableInterface_ApplyShouldBeActive::InControllerActor' has a wrong offset!");
static_assert(offsetof(SHActorsManagementControllableInterface_ApplyShouldBeActive, InShouldBeActive) == 0x000008, "Member 'SHActorsManagementControllableInterface_ApplyShouldBeActive::InShouldBeActive' has a wrong offset!");
static_assert(offsetof(SHActorsManagementControllableInterface_ApplyShouldBeActive, ReturnValue) == 0x000009, "Member 'SHActorsManagementControllableInterface_ApplyShouldBeActive::ReturnValue' has a wrong offset!");

// Function SHProto.SHCaterpillarCapsuleComponent.ReExpandCapsuleAtDesiredLocationAndRotation
// 0x0001 (0x0001 - 0x0000)
struct SHCaterpillarCapsuleComponent_ReExpandCapsuleAtDesiredLocationAndRotation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCaterpillarCapsuleComponent_ReExpandCapsuleAtDesiredLocationAndRotation) == 0x000001, "Wrong alignment on SHCaterpillarCapsuleComponent_ReExpandCapsuleAtDesiredLocationAndRotation");
static_assert(sizeof(SHCaterpillarCapsuleComponent_ReExpandCapsuleAtDesiredLocationAndRotation) == 0x000001, "Wrong size on SHCaterpillarCapsuleComponent_ReExpandCapsuleAtDesiredLocationAndRotation");
static_assert(offsetof(SHCaterpillarCapsuleComponent_ReExpandCapsuleAtDesiredLocationAndRotation, ReturnValue) == 0x000000, "Member 'SHCaterpillarCapsuleComponent_ReExpandCapsuleAtDesiredLocationAndRotation::ReturnValue' has a wrong offset!");

// Function SHProto.SHCaterpillarCapsuleComponent.SetBaseHalfHeightWithoutHemisphere
// 0x0004 (0x0004 - 0x0000)
struct SHCaterpillarCapsuleComponent_SetBaseHalfHeightWithoutHemisphere final
{
public:
	float                                         InHalfHeightWithoutHemisphere;                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCaterpillarCapsuleComponent_SetBaseHalfHeightWithoutHemisphere) == 0x000004, "Wrong alignment on SHCaterpillarCapsuleComponent_SetBaseHalfHeightWithoutHemisphere");
static_assert(sizeof(SHCaterpillarCapsuleComponent_SetBaseHalfHeightWithoutHemisphere) == 0x000004, "Wrong size on SHCaterpillarCapsuleComponent_SetBaseHalfHeightWithoutHemisphere");
static_assert(offsetof(SHCaterpillarCapsuleComponent_SetBaseHalfHeightWithoutHemisphere, InHalfHeightWithoutHemisphere) == 0x000000, "Member 'SHCaterpillarCapsuleComponent_SetBaseHalfHeightWithoutHemisphere::InHalfHeightWithoutHemisphere' has a wrong offset!");

// Function SHProto.SHCaterpillarCapsuleComponent.SetCapsuleActivated
// 0x0001 (0x0001 - 0x0000)
struct SHCaterpillarCapsuleComponent_SetCapsuleActivated final
{
public:
	bool                                          InActivated;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCaterpillarCapsuleComponent_SetCapsuleActivated) == 0x000001, "Wrong alignment on SHCaterpillarCapsuleComponent_SetCapsuleActivated");
static_assert(sizeof(SHCaterpillarCapsuleComponent_SetCapsuleActivated) == 0x000001, "Wrong size on SHCaterpillarCapsuleComponent_SetCapsuleActivated");
static_assert(offsetof(SHCaterpillarCapsuleComponent_SetCapsuleActivated, InActivated) == 0x000000, "Member 'SHCaterpillarCapsuleComponent_SetCapsuleActivated::InActivated' has a wrong offset!");

// Function SHProto.SHCaterpillarCapsuleComponent.SetCapsuleAnchorHeightScalar
// 0x0004 (0x0004 - 0x0000)
struct SHCaterpillarCapsuleComponent_SetCapsuleAnchorHeightScalar final
{
public:
	float                                         InAnchorScalar;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCaterpillarCapsuleComponent_SetCapsuleAnchorHeightScalar) == 0x000004, "Wrong alignment on SHCaterpillarCapsuleComponent_SetCapsuleAnchorHeightScalar");
static_assert(sizeof(SHCaterpillarCapsuleComponent_SetCapsuleAnchorHeightScalar) == 0x000004, "Wrong size on SHCaterpillarCapsuleComponent_SetCapsuleAnchorHeightScalar");
static_assert(offsetof(SHCaterpillarCapsuleComponent_SetCapsuleAnchorHeightScalar, InAnchorScalar) == 0x000000, "Member 'SHCaterpillarCapsuleComponent_SetCapsuleAnchorHeightScalar::InAnchorScalar' has a wrong offset!");

// Function SHProto.SHCaterpillarCapsuleComponent.SetCapsuleAvoidCollisions
// 0x0001 (0x0001 - 0x0000)
struct SHCaterpillarCapsuleComponent_SetCapsuleAvoidCollisions final
{
public:
	bool                                          InAvoidCollisions;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCaterpillarCapsuleComponent_SetCapsuleAvoidCollisions) == 0x000001, "Wrong alignment on SHCaterpillarCapsuleComponent_SetCapsuleAvoidCollisions");
static_assert(sizeof(SHCaterpillarCapsuleComponent_SetCapsuleAvoidCollisions) == 0x000001, "Wrong size on SHCaterpillarCapsuleComponent_SetCapsuleAvoidCollisions");
static_assert(offsetof(SHCaterpillarCapsuleComponent_SetCapsuleAvoidCollisions, InAvoidCollisions) == 0x000000, "Member 'SHCaterpillarCapsuleComponent_SetCapsuleAvoidCollisions::InAvoidCollisions' has a wrong offset!");

// Function SHProto.SHCaterpillarCapsuleComponent.SetCapsuleDesiredExtensionScalar
// 0x0004 (0x0004 - 0x0000)
struct SHCaterpillarCapsuleComponent_SetCapsuleDesiredExtensionScalar final
{
public:
	float                                         InScalar;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCaterpillarCapsuleComponent_SetCapsuleDesiredExtensionScalar) == 0x000004, "Wrong alignment on SHCaterpillarCapsuleComponent_SetCapsuleDesiredExtensionScalar");
static_assert(sizeof(SHCaterpillarCapsuleComponent_SetCapsuleDesiredExtensionScalar) == 0x000004, "Wrong size on SHCaterpillarCapsuleComponent_SetCapsuleDesiredExtensionScalar");
static_assert(offsetof(SHCaterpillarCapsuleComponent_SetCapsuleDesiredExtensionScalar, InScalar) == 0x000000, "Member 'SHCaterpillarCapsuleComponent_SetCapsuleDesiredExtensionScalar::InScalar' has a wrong offset!");

// Function SHProto.SHCaterpillarCapsuleComponent.SetCapsuleIdleRotationEnabled
// 0x0001 (0x0001 - 0x0000)
struct SHCaterpillarCapsuleComponent_SetCapsuleIdleRotationEnabled final
{
public:
	bool                                          InEnableIdleRotation;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCaterpillarCapsuleComponent_SetCapsuleIdleRotationEnabled) == 0x000001, "Wrong alignment on SHCaterpillarCapsuleComponent_SetCapsuleIdleRotationEnabled");
static_assert(sizeof(SHCaterpillarCapsuleComponent_SetCapsuleIdleRotationEnabled) == 0x000001, "Wrong size on SHCaterpillarCapsuleComponent_SetCapsuleIdleRotationEnabled");
static_assert(offsetof(SHCaterpillarCapsuleComponent_SetCapsuleIdleRotationEnabled, InEnableIdleRotation) == 0x000000, "Member 'SHCaterpillarCapsuleComponent_SetCapsuleIdleRotationEnabled::InEnableIdleRotation' has a wrong offset!");

// Function SHProto.SHCaterpillarCapsuleComponent.SetCapsuleInterpolatingRotation
// 0x0001 (0x0001 - 0x0000)
struct SHCaterpillarCapsuleComponent_SetCapsuleInterpolatingRotation final
{
public:
	bool                                          InInterpolate;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCaterpillarCapsuleComponent_SetCapsuleInterpolatingRotation) == 0x000001, "Wrong alignment on SHCaterpillarCapsuleComponent_SetCapsuleInterpolatingRotation");
static_assert(sizeof(SHCaterpillarCapsuleComponent_SetCapsuleInterpolatingRotation) == 0x000001, "Wrong size on SHCaterpillarCapsuleComponent_SetCapsuleInterpolatingRotation");
static_assert(offsetof(SHCaterpillarCapsuleComponent_SetCapsuleInterpolatingRotation, InInterpolate) == 0x000000, "Member 'SHCaterpillarCapsuleComponent_SetCapsuleInterpolatingRotation::InInterpolate' has a wrong offset!");

// Function SHProto.SHCaterpillarCapsuleComponent.SetCapsuleLocationAndRotation
// 0x0040 (0x0040 - 0x0000)
struct SHCaterpillarCapsuleComponent_SetCapsuleLocationAndRotation final
{
public:
	struct FVector                                InAnchorLocation;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InCapsuleRotation;                                 // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          InSweepCollisions;                                 // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InPullbackRotationMultiplier;                      // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCaterpillarCapsuleComponent_SetCapsuleLocationAndRotation) == 0x000008, "Wrong alignment on SHCaterpillarCapsuleComponent_SetCapsuleLocationAndRotation");
static_assert(sizeof(SHCaterpillarCapsuleComponent_SetCapsuleLocationAndRotation) == 0x000040, "Wrong size on SHCaterpillarCapsuleComponent_SetCapsuleLocationAndRotation");
static_assert(offsetof(SHCaterpillarCapsuleComponent_SetCapsuleLocationAndRotation, InAnchorLocation) == 0x000000, "Member 'SHCaterpillarCapsuleComponent_SetCapsuleLocationAndRotation::InAnchorLocation' has a wrong offset!");
static_assert(offsetof(SHCaterpillarCapsuleComponent_SetCapsuleLocationAndRotation, InCapsuleRotation) == 0x000018, "Member 'SHCaterpillarCapsuleComponent_SetCapsuleLocationAndRotation::InCapsuleRotation' has a wrong offset!");
static_assert(offsetof(SHCaterpillarCapsuleComponent_SetCapsuleLocationAndRotation, InSweepCollisions) == 0x000030, "Member 'SHCaterpillarCapsuleComponent_SetCapsuleLocationAndRotation::InSweepCollisions' has a wrong offset!");
static_assert(offsetof(SHCaterpillarCapsuleComponent_SetCapsuleLocationAndRotation, InPullbackRotationMultiplier) == 0x000034, "Member 'SHCaterpillarCapsuleComponent_SetCapsuleLocationAndRotation::InPullbackRotationMultiplier' has a wrong offset!");
static_assert(offsetof(SHCaterpillarCapsuleComponent_SetCapsuleLocationAndRotation, ReturnValue) == 0x000038, "Member 'SHCaterpillarCapsuleComponent_SetCapsuleLocationAndRotation::ReturnValue' has a wrong offset!");

// Function SHProto.SHCaterpillarCapsuleComponent.SetCapsuleLocationAndRotationToDesired
// 0x0002 (0x0002 - 0x0000)
struct SHCaterpillarCapsuleComponent_SetCapsuleLocationAndRotationToDesired final
{
public:
	bool                                          InSweepCollisions;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCaterpillarCapsuleComponent_SetCapsuleLocationAndRotationToDesired) == 0x000001, "Wrong alignment on SHCaterpillarCapsuleComponent_SetCapsuleLocationAndRotationToDesired");
static_assert(sizeof(SHCaterpillarCapsuleComponent_SetCapsuleLocationAndRotationToDesired) == 0x000002, "Wrong size on SHCaterpillarCapsuleComponent_SetCapsuleLocationAndRotationToDesired");
static_assert(offsetof(SHCaterpillarCapsuleComponent_SetCapsuleLocationAndRotationToDesired, InSweepCollisions) == 0x000000, "Member 'SHCaterpillarCapsuleComponent_SetCapsuleLocationAndRotationToDesired::InSweepCollisions' has a wrong offset!");
static_assert(offsetof(SHCaterpillarCapsuleComponent_SetCapsuleLocationAndRotationToDesired, ReturnValue) == 0x000001, "Member 'SHCaterpillarCapsuleComponent_SetCapsuleLocationAndRotationToDesired::ReturnValue' has a wrong offset!");

// Function SHProto.SHCaterpillarCapsuleComponent.SetCapsuleParentAttachmentOffset
// 0x0018 (0x0018 - 0x0000)
struct SHCaterpillarCapsuleComponent_SetCapsuleParentAttachmentOffset final
{
public:
	struct FVector                                InAttachmentOffset;                                // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCaterpillarCapsuleComponent_SetCapsuleParentAttachmentOffset) == 0x000008, "Wrong alignment on SHCaterpillarCapsuleComponent_SetCapsuleParentAttachmentOffset");
static_assert(sizeof(SHCaterpillarCapsuleComponent_SetCapsuleParentAttachmentOffset) == 0x000018, "Wrong size on SHCaterpillarCapsuleComponent_SetCapsuleParentAttachmentOffset");
static_assert(offsetof(SHCaterpillarCapsuleComponent_SetCapsuleParentAttachmentOffset, InAttachmentOffset) == 0x000000, "Member 'SHCaterpillarCapsuleComponent_SetCapsuleParentAttachmentOffset::InAttachmentOffset' has a wrong offset!");

// Function SHProto.SHCaterpillarCapsuleComponent.SetCapsuleParentAttachmentScalars
// 0x0018 (0x0018 - 0x0000)
struct SHCaterpillarCapsuleComponent_SetCapsuleParentAttachmentScalars final
{
public:
	struct FVector                                InAttachmentScalars;                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCaterpillarCapsuleComponent_SetCapsuleParentAttachmentScalars) == 0x000008, "Wrong alignment on SHCaterpillarCapsuleComponent_SetCapsuleParentAttachmentScalars");
static_assert(sizeof(SHCaterpillarCapsuleComponent_SetCapsuleParentAttachmentScalars) == 0x000018, "Wrong size on SHCaterpillarCapsuleComponent_SetCapsuleParentAttachmentScalars");
static_assert(offsetof(SHCaterpillarCapsuleComponent_SetCapsuleParentAttachmentScalars, InAttachmentScalars) == 0x000000, "Member 'SHCaterpillarCapsuleComponent_SetCapsuleParentAttachmentScalars::InAttachmentScalars' has a wrong offset!");

// Function SHProto.SHCaterpillarCapsuleComponent.SetCapsuleSurfaceAlignmentEnabled
// 0x0001 (0x0001 - 0x0000)
struct SHCaterpillarCapsuleComponent_SetCapsuleSurfaceAlignmentEnabled final
{
public:
	bool                                          InEnableAlignment;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCaterpillarCapsuleComponent_SetCapsuleSurfaceAlignmentEnabled) == 0x000001, "Wrong alignment on SHCaterpillarCapsuleComponent_SetCapsuleSurfaceAlignmentEnabled");
static_assert(sizeof(SHCaterpillarCapsuleComponent_SetCapsuleSurfaceAlignmentEnabled) == 0x000001, "Wrong size on SHCaterpillarCapsuleComponent_SetCapsuleSurfaceAlignmentEnabled");
static_assert(offsetof(SHCaterpillarCapsuleComponent_SetCapsuleSurfaceAlignmentEnabled, InEnableAlignment) == 0x000000, "Member 'SHCaterpillarCapsuleComponent_SetCapsuleSurfaceAlignmentEnabled::InEnableAlignment' has a wrong offset!");

// Function SHProto.SHCaterpillarCapsuleComponent.TraceCapsuleLocationAndRotationChange
// 0x0160 (0x0160 - 0x0000)
struct SHCaterpillarCapsuleComponent_TraceCapsuleLocationAndRotationChange final
{
public:
	struct FVector                                InTargetAnchorLocation;                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InTargetCapsuleRotation;                           // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InPullbackRotationMultiplier;                      // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OutCapsuleLocation;                                // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  OutCapsuleRotation;                                // 0x0050(0x0020)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             OutHitResult;                                      // 0x0070(0x00E8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0158(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCaterpillarCapsuleComponent_TraceCapsuleLocationAndRotationChange) == 0x000010, "Wrong alignment on SHCaterpillarCapsuleComponent_TraceCapsuleLocationAndRotationChange");
static_assert(sizeof(SHCaterpillarCapsuleComponent_TraceCapsuleLocationAndRotationChange) == 0x000160, "Wrong size on SHCaterpillarCapsuleComponent_TraceCapsuleLocationAndRotationChange");
static_assert(offsetof(SHCaterpillarCapsuleComponent_TraceCapsuleLocationAndRotationChange, InTargetAnchorLocation) == 0x000000, "Member 'SHCaterpillarCapsuleComponent_TraceCapsuleLocationAndRotationChange::InTargetAnchorLocation' has a wrong offset!");
static_assert(offsetof(SHCaterpillarCapsuleComponent_TraceCapsuleLocationAndRotationChange, InTargetCapsuleRotation) == 0x000018, "Member 'SHCaterpillarCapsuleComponent_TraceCapsuleLocationAndRotationChange::InTargetCapsuleRotation' has a wrong offset!");
static_assert(offsetof(SHCaterpillarCapsuleComponent_TraceCapsuleLocationAndRotationChange, InPullbackRotationMultiplier) == 0x000030, "Member 'SHCaterpillarCapsuleComponent_TraceCapsuleLocationAndRotationChange::InPullbackRotationMultiplier' has a wrong offset!");
static_assert(offsetof(SHCaterpillarCapsuleComponent_TraceCapsuleLocationAndRotationChange, OutCapsuleLocation) == 0x000038, "Member 'SHCaterpillarCapsuleComponent_TraceCapsuleLocationAndRotationChange::OutCapsuleLocation' has a wrong offset!");
static_assert(offsetof(SHCaterpillarCapsuleComponent_TraceCapsuleLocationAndRotationChange, OutCapsuleRotation) == 0x000050, "Member 'SHCaterpillarCapsuleComponent_TraceCapsuleLocationAndRotationChange::OutCapsuleRotation' has a wrong offset!");
static_assert(offsetof(SHCaterpillarCapsuleComponent_TraceCapsuleLocationAndRotationChange, OutHitResult) == 0x000070, "Member 'SHCaterpillarCapsuleComponent_TraceCapsuleLocationAndRotationChange::OutHitResult' has a wrong offset!");
static_assert(offsetof(SHCaterpillarCapsuleComponent_TraceCapsuleLocationAndRotationChange, ReturnValue) == 0x000158, "Member 'SHCaterpillarCapsuleComponent_TraceCapsuleLocationAndRotationChange::ReturnValue' has a wrong offset!");

// Function SHProto.SHCaterpillarCapsuleComponent.GetCapsuleCurrentExtensionScalar
// 0x0004 (0x0004 - 0x0000)
struct SHCaterpillarCapsuleComponent_GetCapsuleCurrentExtensionScalar final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCaterpillarCapsuleComponent_GetCapsuleCurrentExtensionScalar) == 0x000004, "Wrong alignment on SHCaterpillarCapsuleComponent_GetCapsuleCurrentExtensionScalar");
static_assert(sizeof(SHCaterpillarCapsuleComponent_GetCapsuleCurrentExtensionScalar) == 0x000004, "Wrong size on SHCaterpillarCapsuleComponent_GetCapsuleCurrentExtensionScalar");
static_assert(offsetof(SHCaterpillarCapsuleComponent_GetCapsuleCurrentExtensionScalar, ReturnValue) == 0x000000, "Member 'SHCaterpillarCapsuleComponent_GetCapsuleCurrentExtensionScalar::ReturnValue' has a wrong offset!");

// Function SHProto.SHCaterpillarCapsuleComponent.GetCapsuleDesiredHalfHeightWithoutHemisphere
// 0x0004 (0x0004 - 0x0000)
struct SHCaterpillarCapsuleComponent_GetCapsuleDesiredHalfHeightWithoutHemisphere final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCaterpillarCapsuleComponent_GetCapsuleDesiredHalfHeightWithoutHemisphere) == 0x000004, "Wrong alignment on SHCaterpillarCapsuleComponent_GetCapsuleDesiredHalfHeightWithoutHemisphere");
static_assert(sizeof(SHCaterpillarCapsuleComponent_GetCapsuleDesiredHalfHeightWithoutHemisphere) == 0x000004, "Wrong size on SHCaterpillarCapsuleComponent_GetCapsuleDesiredHalfHeightWithoutHemisphere");
static_assert(offsetof(SHCaterpillarCapsuleComponent_GetCapsuleDesiredHalfHeightWithoutHemisphere, ReturnValue) == 0x000000, "Member 'SHCaterpillarCapsuleComponent_GetCapsuleDesiredHalfHeightWithoutHemisphere::ReturnValue' has a wrong offset!");

// Function SHProto.SHCaterpillarCapsuleComponent.GetCapsuleExtensionSafetyMargin
// 0x0004 (0x0004 - 0x0000)
struct SHCaterpillarCapsuleComponent_GetCapsuleExtensionSafetyMargin final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCaterpillarCapsuleComponent_GetCapsuleExtensionSafetyMargin) == 0x000004, "Wrong alignment on SHCaterpillarCapsuleComponent_GetCapsuleExtensionSafetyMargin");
static_assert(sizeof(SHCaterpillarCapsuleComponent_GetCapsuleExtensionSafetyMargin) == 0x000004, "Wrong size on SHCaterpillarCapsuleComponent_GetCapsuleExtensionSafetyMargin");
static_assert(offsetof(SHCaterpillarCapsuleComponent_GetCapsuleExtensionSafetyMargin, ReturnValue) == 0x000000, "Member 'SHCaterpillarCapsuleComponent_GetCapsuleExtensionSafetyMargin::ReturnValue' has a wrong offset!");

// Function SHProto.SHCaterpillarCapsuleComponent.GetCapsuleExtensionScalarsFromAnchor
// 0x000C (0x000C - 0x0000)
struct SHCaterpillarCapsuleComponent_GetCapsuleExtensionScalarsFromAnchor final
{
public:
	float                                         OutTopScalar;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutBottomScalar;                                   // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InClamped;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCaterpillarCapsuleComponent_GetCapsuleExtensionScalarsFromAnchor) == 0x000004, "Wrong alignment on SHCaterpillarCapsuleComponent_GetCapsuleExtensionScalarsFromAnchor");
static_assert(sizeof(SHCaterpillarCapsuleComponent_GetCapsuleExtensionScalarsFromAnchor) == 0x00000C, "Wrong size on SHCaterpillarCapsuleComponent_GetCapsuleExtensionScalarsFromAnchor");
static_assert(offsetof(SHCaterpillarCapsuleComponent_GetCapsuleExtensionScalarsFromAnchor, OutTopScalar) == 0x000000, "Member 'SHCaterpillarCapsuleComponent_GetCapsuleExtensionScalarsFromAnchor::OutTopScalar' has a wrong offset!");
static_assert(offsetof(SHCaterpillarCapsuleComponent_GetCapsuleExtensionScalarsFromAnchor, OutBottomScalar) == 0x000004, "Member 'SHCaterpillarCapsuleComponent_GetCapsuleExtensionScalarsFromAnchor::OutBottomScalar' has a wrong offset!");
static_assert(offsetof(SHCaterpillarCapsuleComponent_GetCapsuleExtensionScalarsFromAnchor, InClamped) == 0x000008, "Member 'SHCaterpillarCapsuleComponent_GetCapsuleExtensionScalarsFromAnchor::InClamped' has a wrong offset!");

// Function SHProto.SHCaterpillarCapsuleComponent.GetCapsuleIdleRotationEnabled
// 0x0001 (0x0001 - 0x0000)
struct SHCaterpillarCapsuleComponent_GetCapsuleIdleRotationEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCaterpillarCapsuleComponent_GetCapsuleIdleRotationEnabled) == 0x000001, "Wrong alignment on SHCaterpillarCapsuleComponent_GetCapsuleIdleRotationEnabled");
static_assert(sizeof(SHCaterpillarCapsuleComponent_GetCapsuleIdleRotationEnabled) == 0x000001, "Wrong size on SHCaterpillarCapsuleComponent_GetCapsuleIdleRotationEnabled");
static_assert(offsetof(SHCaterpillarCapsuleComponent_GetCapsuleIdleRotationEnabled, ReturnValue) == 0x000000, "Member 'SHCaterpillarCapsuleComponent_GetCapsuleIdleRotationEnabled::ReturnValue' has a wrong offset!");

// Function SHProto.SHCaterpillarCapsuleComponent.GetCapsuleIsActivated
// 0x0001 (0x0001 - 0x0000)
struct SHCaterpillarCapsuleComponent_GetCapsuleIsActivated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCaterpillarCapsuleComponent_GetCapsuleIsActivated) == 0x000001, "Wrong alignment on SHCaterpillarCapsuleComponent_GetCapsuleIsActivated");
static_assert(sizeof(SHCaterpillarCapsuleComponent_GetCapsuleIsActivated) == 0x000001, "Wrong size on SHCaterpillarCapsuleComponent_GetCapsuleIsActivated");
static_assert(offsetof(SHCaterpillarCapsuleComponent_GetCapsuleIsActivated, ReturnValue) == 0x000000, "Member 'SHCaterpillarCapsuleComponent_GetCapsuleIsActivated::ReturnValue' has a wrong offset!");

// Function SHProto.SHCaterpillarCapsuleComponent.GetCapsuleIsAvoidingCollisions
// 0x0001 (0x0001 - 0x0000)
struct SHCaterpillarCapsuleComponent_GetCapsuleIsAvoidingCollisions final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCaterpillarCapsuleComponent_GetCapsuleIsAvoidingCollisions) == 0x000001, "Wrong alignment on SHCaterpillarCapsuleComponent_GetCapsuleIsAvoidingCollisions");
static_assert(sizeof(SHCaterpillarCapsuleComponent_GetCapsuleIsAvoidingCollisions) == 0x000001, "Wrong size on SHCaterpillarCapsuleComponent_GetCapsuleIsAvoidingCollisions");
static_assert(offsetof(SHCaterpillarCapsuleComponent_GetCapsuleIsAvoidingCollisions, ReturnValue) == 0x000000, "Member 'SHCaterpillarCapsuleComponent_GetCapsuleIsAvoidingCollisions::ReturnValue' has a wrong offset!");

// Function SHProto.SHCaterpillarCapsuleComponent.GetCapsuleIsInterpolatingRotation
// 0x0001 (0x0001 - 0x0000)
struct SHCaterpillarCapsuleComponent_GetCapsuleIsInterpolatingRotation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCaterpillarCapsuleComponent_GetCapsuleIsInterpolatingRotation) == 0x000001, "Wrong alignment on SHCaterpillarCapsuleComponent_GetCapsuleIsInterpolatingRotation");
static_assert(sizeof(SHCaterpillarCapsuleComponent_GetCapsuleIsInterpolatingRotation) == 0x000001, "Wrong size on SHCaterpillarCapsuleComponent_GetCapsuleIsInterpolatingRotation");
static_assert(offsetof(SHCaterpillarCapsuleComponent_GetCapsuleIsInterpolatingRotation, ReturnValue) == 0x000000, "Member 'SHCaterpillarCapsuleComponent_GetCapsuleIsInterpolatingRotation::ReturnValue' has a wrong offset!");

// Function SHProto.SHCaterpillarCapsuleComponent.GetCapsuleLyingRotation
// 0x0020 (0x0020 - 0x0000)
struct SHCaterpillarCapsuleComponent_GetCapsuleLyingRotation final
{
public:
	struct FQuat                                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCaterpillarCapsuleComponent_GetCapsuleLyingRotation) == 0x000010, "Wrong alignment on SHCaterpillarCapsuleComponent_GetCapsuleLyingRotation");
static_assert(sizeof(SHCaterpillarCapsuleComponent_GetCapsuleLyingRotation) == 0x000020, "Wrong size on SHCaterpillarCapsuleComponent_GetCapsuleLyingRotation");
static_assert(offsetof(SHCaterpillarCapsuleComponent_GetCapsuleLyingRotation, ReturnValue) == 0x000000, "Member 'SHCaterpillarCapsuleComponent_GetCapsuleLyingRotation::ReturnValue' has a wrong offset!");

// Function SHProto.SHCaterpillarCapsuleComponent.GetCapsuleParentAttachmentDesiredRotationInActorSpace
// 0x0020 (0x0020 - 0x0000)
struct SHCaterpillarCapsuleComponent_GetCapsuleParentAttachmentDesiredRotationInActorSpace final
{
public:
	struct FQuat                                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCaterpillarCapsuleComponent_GetCapsuleParentAttachmentDesiredRotationInActorSpace) == 0x000010, "Wrong alignment on SHCaterpillarCapsuleComponent_GetCapsuleParentAttachmentDesiredRotationInActorSpace");
static_assert(sizeof(SHCaterpillarCapsuleComponent_GetCapsuleParentAttachmentDesiredRotationInActorSpace) == 0x000020, "Wrong size on SHCaterpillarCapsuleComponent_GetCapsuleParentAttachmentDesiredRotationInActorSpace");
static_assert(offsetof(SHCaterpillarCapsuleComponent_GetCapsuleParentAttachmentDesiredRotationInActorSpace, ReturnValue) == 0x000000, "Member 'SHCaterpillarCapsuleComponent_GetCapsuleParentAttachmentDesiredRotationInActorSpace::ReturnValue' has a wrong offset!");

// Function SHProto.SHCaterpillarCapsuleComponent.GetCapsuleRadiusSafetyMargin
// 0x0004 (0x0004 - 0x0000)
struct SHCaterpillarCapsuleComponent_GetCapsuleRadiusSafetyMargin final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCaterpillarCapsuleComponent_GetCapsuleRadiusSafetyMargin) == 0x000004, "Wrong alignment on SHCaterpillarCapsuleComponent_GetCapsuleRadiusSafetyMargin");
static_assert(sizeof(SHCaterpillarCapsuleComponent_GetCapsuleRadiusSafetyMargin) == 0x000004, "Wrong size on SHCaterpillarCapsuleComponent_GetCapsuleRadiusSafetyMargin");
static_assert(offsetof(SHCaterpillarCapsuleComponent_GetCapsuleRadiusSafetyMargin, ReturnValue) == 0x000000, "Member 'SHCaterpillarCapsuleComponent_GetCapsuleRadiusSafetyMargin::ReturnValue' has a wrong offset!");

// Function SHProto.SHCaterpillarCapsuleComponent.GetCapsuleSurfaceAlignmentEnabled
// 0x0001 (0x0001 - 0x0000)
struct SHCaterpillarCapsuleComponent_GetCapsuleSurfaceAlignmentEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCaterpillarCapsuleComponent_GetCapsuleSurfaceAlignmentEnabled) == 0x000001, "Wrong alignment on SHCaterpillarCapsuleComponent_GetCapsuleSurfaceAlignmentEnabled");
static_assert(sizeof(SHCaterpillarCapsuleComponent_GetCapsuleSurfaceAlignmentEnabled) == 0x000001, "Wrong size on SHCaterpillarCapsuleComponent_GetCapsuleSurfaceAlignmentEnabled");
static_assert(offsetof(SHCaterpillarCapsuleComponent_GetCapsuleSurfaceAlignmentEnabled, ReturnValue) == 0x000000, "Member 'SHCaterpillarCapsuleComponent_GetCapsuleSurfaceAlignmentEnabled::ReturnValue' has a wrong offset!");

// Function SHProto.SHCaterpillarCapsuleComponent.GetCapsuleTargetAnchorScalar
// 0x0004 (0x0004 - 0x0000)
struct SHCaterpillarCapsuleComponent_GetCapsuleTargetAnchorScalar final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCaterpillarCapsuleComponent_GetCapsuleTargetAnchorScalar) == 0x000004, "Wrong alignment on SHCaterpillarCapsuleComponent_GetCapsuleTargetAnchorScalar");
static_assert(sizeof(SHCaterpillarCapsuleComponent_GetCapsuleTargetAnchorScalar) == 0x000004, "Wrong size on SHCaterpillarCapsuleComponent_GetCapsuleTargetAnchorScalar");
static_assert(offsetof(SHCaterpillarCapsuleComponent_GetCapsuleTargetAnchorScalar, ReturnValue) == 0x000000, "Member 'SHCaterpillarCapsuleComponent_GetCapsuleTargetAnchorScalar::ReturnValue' has a wrong offset!");

// Function SHProto.SHCaterpillarCapsuleComponent.GetCapsuleTargetAnchorWorldLocation
// 0x0018 (0x0018 - 0x0000)
struct SHCaterpillarCapsuleComponent_GetCapsuleTargetAnchorWorldLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCaterpillarCapsuleComponent_GetCapsuleTargetAnchorWorldLocation) == 0x000008, "Wrong alignment on SHCaterpillarCapsuleComponent_GetCapsuleTargetAnchorWorldLocation");
static_assert(sizeof(SHCaterpillarCapsuleComponent_GetCapsuleTargetAnchorWorldLocation) == 0x000018, "Wrong size on SHCaterpillarCapsuleComponent_GetCapsuleTargetAnchorWorldLocation");
static_assert(offsetof(SHCaterpillarCapsuleComponent_GetCapsuleTargetAnchorWorldLocation, ReturnValue) == 0x000000, "Member 'SHCaterpillarCapsuleComponent_GetCapsuleTargetAnchorWorldLocation::ReturnValue' has a wrong offset!");

// Function SHProto.SHCaterpillarCapsuleComponent.GetCapsuleTargetAnchorWorldRotation
// 0x0020 (0x0020 - 0x0000)
struct SHCaterpillarCapsuleComponent_GetCapsuleTargetAnchorWorldRotation final
{
public:
	struct FQuat                                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCaterpillarCapsuleComponent_GetCapsuleTargetAnchorWorldRotation) == 0x000010, "Wrong alignment on SHCaterpillarCapsuleComponent_GetCapsuleTargetAnchorWorldRotation");
static_assert(sizeof(SHCaterpillarCapsuleComponent_GetCapsuleTargetAnchorWorldRotation) == 0x000020, "Wrong size on SHCaterpillarCapsuleComponent_GetCapsuleTargetAnchorWorldRotation");
static_assert(offsetof(SHCaterpillarCapsuleComponent_GetCapsuleTargetAnchorWorldRotation, ReturnValue) == 0x000000, "Member 'SHCaterpillarCapsuleComponent_GetCapsuleTargetAnchorWorldRotation::ReturnValue' has a wrong offset!");

// Function SHProto.SHCaterpillarCapsuleComponent.GetCapsuleUnlyingWorldRotation
// 0x0020 (0x0020 - 0x0000)
struct SHCaterpillarCapsuleComponent_GetCapsuleUnlyingWorldRotation final
{
public:
	struct FQuat                                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCaterpillarCapsuleComponent_GetCapsuleUnlyingWorldRotation) == 0x000010, "Wrong alignment on SHCaterpillarCapsuleComponent_GetCapsuleUnlyingWorldRotation");
static_assert(sizeof(SHCaterpillarCapsuleComponent_GetCapsuleUnlyingWorldRotation) == 0x000020, "Wrong size on SHCaterpillarCapsuleComponent_GetCapsuleUnlyingWorldRotation");
static_assert(offsetof(SHCaterpillarCapsuleComponent_GetCapsuleUnlyingWorldRotation, ReturnValue) == 0x000000, "Member 'SHCaterpillarCapsuleComponent_GetCapsuleUnlyingWorldRotation::ReturnValue' has a wrong offset!");

// Function SHProto.SHCaterpillarCapsuleComponent.GetDesiredCapsuleBottomDistanceFromAnchor
// 0x0004 (0x0004 - 0x0000)
struct SHCaterpillarCapsuleComponent_GetDesiredCapsuleBottomDistanceFromAnchor final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCaterpillarCapsuleComponent_GetDesiredCapsuleBottomDistanceFromAnchor) == 0x000004, "Wrong alignment on SHCaterpillarCapsuleComponent_GetDesiredCapsuleBottomDistanceFromAnchor");
static_assert(sizeof(SHCaterpillarCapsuleComponent_GetDesiredCapsuleBottomDistanceFromAnchor) == 0x000004, "Wrong size on SHCaterpillarCapsuleComponent_GetDesiredCapsuleBottomDistanceFromAnchor");
static_assert(offsetof(SHCaterpillarCapsuleComponent_GetDesiredCapsuleBottomDistanceFromAnchor, ReturnValue) == 0x000000, "Member 'SHCaterpillarCapsuleComponent_GetDesiredCapsuleBottomDistanceFromAnchor::ReturnValue' has a wrong offset!");

// Function SHProto.SHCaterpillarCapsuleComponent.GetDesiredCapsuleTopDistanceFromAnchor
// 0x0004 (0x0004 - 0x0000)
struct SHCaterpillarCapsuleComponent_GetDesiredCapsuleTopDistanceFromAnchor final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCaterpillarCapsuleComponent_GetDesiredCapsuleTopDistanceFromAnchor) == 0x000004, "Wrong alignment on SHCaterpillarCapsuleComponent_GetDesiredCapsuleTopDistanceFromAnchor");
static_assert(sizeof(SHCaterpillarCapsuleComponent_GetDesiredCapsuleTopDistanceFromAnchor) == 0x000004, "Wrong size on SHCaterpillarCapsuleComponent_GetDesiredCapsuleTopDistanceFromAnchor");
static_assert(offsetof(SHCaterpillarCapsuleComponent_GetDesiredCapsuleTopDistanceFromAnchor, ReturnValue) == 0x000000, "Member 'SHCaterpillarCapsuleComponent_GetDesiredCapsuleTopDistanceFromAnchor::ReturnValue' has a wrong offset!");

// Function SHProto.SHAICharacter.DrawDeathSequenceDebug
// 0x0038 (0x0038 - 0x0000)
struct SHAICharacter_DrawDeathSequenceDebug final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   DeathPlayerSoftClass;                              // 0x0008(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAICharacter_DrawDeathSequenceDebug) == 0x000008, "Wrong alignment on SHAICharacter_DrawDeathSequenceDebug");
static_assert(sizeof(SHAICharacter_DrawDeathSequenceDebug) == 0x000038, "Wrong size on SHAICharacter_DrawDeathSequenceDebug");
static_assert(offsetof(SHAICharacter_DrawDeathSequenceDebug, DeltaSeconds) == 0x000000, "Member 'SHAICharacter_DrawDeathSequenceDebug::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(SHAICharacter_DrawDeathSequenceDebug, DeathPlayerSoftClass) == 0x000008, "Member 'SHAICharacter_DrawDeathSequenceDebug::DeathPlayerSoftClass' has a wrong offset!");

// Function SHProto.SHAICharacter.OnPlayerSnap
// 0x0010 (0x0010 - 0x0000)
struct SHAICharacter_OnPlayerSnap final
{
public:
	float                                         SnapDuration;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDamageType>                DamageType;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAICharacter_OnPlayerSnap) == 0x000008, "Wrong alignment on SHAICharacter_OnPlayerSnap");
static_assert(sizeof(SHAICharacter_OnPlayerSnap) == 0x000010, "Wrong size on SHAICharacter_OnPlayerSnap");
static_assert(offsetof(SHAICharacter_OnPlayerSnap, SnapDuration) == 0x000000, "Member 'SHAICharacter_OnPlayerSnap::SnapDuration' has a wrong offset!");
static_assert(offsetof(SHAICharacter_OnPlayerSnap, DamageType) == 0x000008, "Member 'SHAICharacter_OnPlayerSnap::DamageType' has a wrong offset!");

// Function SHProto.SHAICharacter.PlayDeathSequenceRequest
// 0x0040 (0x0040 - 0x0000)
struct SHAICharacter_PlayDeathSequenceRequest final
{
public:
	class APawn*                                  Slayer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   DeathPlayerSoftClass;                              // 0x0008(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHAICharacter_PlayDeathSequenceRequest) == 0x000008, "Wrong alignment on SHAICharacter_PlayDeathSequenceRequest");
static_assert(sizeof(SHAICharacter_PlayDeathSequenceRequest) == 0x000040, "Wrong size on SHAICharacter_PlayDeathSequenceRequest");
static_assert(offsetof(SHAICharacter_PlayDeathSequenceRequest, Slayer) == 0x000000, "Member 'SHAICharacter_PlayDeathSequenceRequest::Slayer' has a wrong offset!");
static_assert(offsetof(SHAICharacter_PlayDeathSequenceRequest, DeathPlayerSoftClass) == 0x000008, "Member 'SHAICharacter_PlayDeathSequenceRequest::DeathPlayerSoftClass' has a wrong offset!");
static_assert(offsetof(SHAICharacter_PlayDeathSequenceRequest, ReturnValue) == 0x000038, "Member 'SHAICharacter_PlayDeathSequenceRequest::ReturnValue' has a wrong offset!");

// Function SHProto.SHAICharacter.SetAudioStopWhenDespawned
// 0x0001 (0x0001 - 0x0000)
struct SHAICharacter_SetAudioStopWhenDespawned final
{
public:
	bool                                          bStopAudioStopWhenDespawned;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAICharacter_SetAudioStopWhenDespawned) == 0x000001, "Wrong alignment on SHAICharacter_SetAudioStopWhenDespawned");
static_assert(sizeof(SHAICharacter_SetAudioStopWhenDespawned) == 0x000001, "Wrong size on SHAICharacter_SetAudioStopWhenDespawned");
static_assert(offsetof(SHAICharacter_SetAudioStopWhenDespawned, bStopAudioStopWhenDespawned) == 0x000000, "Member 'SHAICharacter_SetAudioStopWhenDespawned::bStopAudioStopWhenDespawned' has a wrong offset!");

// Function SHProto.SHAICharacter.SetCustomMesh
// 0x0030 (0x0030 - 0x0000)
struct SHAICharacter_SetCustomMesh final
{
public:
	TSoftObjectPtr<class USkeletalMesh>           CustomMesh;                                        // 0x0000(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAICharacter_SetCustomMesh) == 0x000008, "Wrong alignment on SHAICharacter_SetCustomMesh");
static_assert(sizeof(SHAICharacter_SetCustomMesh) == 0x000030, "Wrong size on SHAICharacter_SetCustomMesh");
static_assert(offsetof(SHAICharacter_SetCustomMesh, CustomMesh) == 0x000000, "Member 'SHAICharacter_SetCustomMesh::CustomMesh' has a wrong offset!");

// Function SHProto.SHAICharacter.SetDisabledPushedByPlayer
// 0x0010 (0x0010 - 0x0000)
struct SHAICharacter_SetDisabledPushedByPlayer final
{
public:
	bool                                          bInDisable;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAICharacter_SetDisabledPushedByPlayer) == 0x000008, "Wrong alignment on SHAICharacter_SetDisabledPushedByPlayer");
static_assert(sizeof(SHAICharacter_SetDisabledPushedByPlayer) == 0x000010, "Wrong size on SHAICharacter_SetDisabledPushedByPlayer");
static_assert(offsetof(SHAICharacter_SetDisabledPushedByPlayer, bInDisable) == 0x000000, "Member 'SHAICharacter_SetDisabledPushedByPlayer::bInDisable' has a wrong offset!");
static_assert(offsetof(SHAICharacter_SetDisabledPushedByPlayer, Object) == 0x000008, "Member 'SHAICharacter_SetDisabledPushedByPlayer::Object' has a wrong offset!");

// Function SHProto.SHAICharacter.AllowDeath
// 0x0001 (0x0001 - 0x0000)
struct SHAICharacter_AllowDeath final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAICharacter_AllowDeath) == 0x000001, "Wrong alignment on SHAICharacter_AllowDeath");
static_assert(sizeof(SHAICharacter_AllowDeath) == 0x000001, "Wrong size on SHAICharacter_AllowDeath");
static_assert(offsetof(SHAICharacter_AllowDeath, ReturnValue) == 0x000000, "Member 'SHAICharacter_AllowDeath::ReturnValue' has a wrong offset!");

// Function SHProto.SHAICharacter.AllowFinisher
// 0x0001 (0x0001 - 0x0000)
struct SHAICharacter_AllowFinisher final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAICharacter_AllowFinisher) == 0x000001, "Wrong alignment on SHAICharacter_AllowFinisher");
static_assert(sizeof(SHAICharacter_AllowFinisher) == 0x000001, "Wrong size on SHAICharacter_AllowFinisher");
static_assert(offsetof(SHAICharacter_AllowFinisher, ReturnValue) == 0x000000, "Member 'SHAICharacter_AllowFinisher::ReturnValue' has a wrong offset!");

// Function SHProto.SHAICharacter.CanBeSteppedOn
// 0x0001 (0x0001 - 0x0000)
struct SHAICharacter_CanBeSteppedOn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAICharacter_CanBeSteppedOn) == 0x000001, "Wrong alignment on SHAICharacter_CanBeSteppedOn");
static_assert(sizeof(SHAICharacter_CanBeSteppedOn) == 0x000001, "Wrong size on SHAICharacter_CanBeSteppedOn");
static_assert(offsetof(SHAICharacter_CanBeSteppedOn, ReturnValue) == 0x000000, "Member 'SHAICharacter_CanBeSteppedOn::ReturnValue' has a wrong offset!");

// Function SHProto.SHAICharacter.EnforceFinisher
// 0x0001 (0x0001 - 0x0000)
struct SHAICharacter_EnforceFinisher final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAICharacter_EnforceFinisher) == 0x000001, "Wrong alignment on SHAICharacter_EnforceFinisher");
static_assert(sizeof(SHAICharacter_EnforceFinisher) == 0x000001, "Wrong size on SHAICharacter_EnforceFinisher");
static_assert(offsetof(SHAICharacter_EnforceFinisher, ReturnValue) == 0x000000, "Member 'SHAICharacter_EnforceFinisher::ReturnValue' has a wrong offset!");

// Function SHProto.SHAICharacter.GetActorLocationAsMeleeTarget
// 0x0018 (0x0018 - 0x0000)
struct SHAICharacter_GetActorLocationAsMeleeTarget final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAICharacter_GetActorLocationAsMeleeTarget) == 0x000008, "Wrong alignment on SHAICharacter_GetActorLocationAsMeleeTarget");
static_assert(sizeof(SHAICharacter_GetActorLocationAsMeleeTarget) == 0x000018, "Wrong size on SHAICharacter_GetActorLocationAsMeleeTarget");
static_assert(offsetof(SHAICharacter_GetActorLocationAsMeleeTarget, ReturnValue) == 0x000000, "Member 'SHAICharacter_GetActorLocationAsMeleeTarget::ReturnValue' has a wrong offset!");

// Function SHProto.SHAICharacter.GetAssetsToHardStore
// 0x0010 (0x0010 - 0x0000)
struct SHAICharacter_GetAssetsToHardStore final
{
public:
	TArray<TSoftObjectPtr<class UObject>>         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAICharacter_GetAssetsToHardStore) == 0x000008, "Wrong alignment on SHAICharacter_GetAssetsToHardStore");
static_assert(sizeof(SHAICharacter_GetAssetsToHardStore) == 0x000010, "Wrong size on SHAICharacter_GetAssetsToHardStore");
static_assert(offsetof(SHAICharacter_GetAssetsToHardStore, ReturnValue) == 0x000000, "Member 'SHAICharacter_GetAssetsToHardStore::ReturnValue' has a wrong offset!");

// Function SHProto.SHAICharacter.GetAutoAimTargets
// 0x0010 (0x0010 - 0x0000)
struct SHAICharacter_GetAutoAimTargets final
{
public:
	TArray<class USceneComponent*>                ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAICharacter_GetAutoAimTargets) == 0x000008, "Wrong alignment on SHAICharacter_GetAutoAimTargets");
static_assert(sizeof(SHAICharacter_GetAutoAimTargets) == 0x000010, "Wrong size on SHAICharacter_GetAutoAimTargets");
static_assert(offsetof(SHAICharacter_GetAutoAimTargets, ReturnValue) == 0x000000, "Member 'SHAICharacter_GetAutoAimTargets::ReturnValue' has a wrong offset!");

// Function SHProto.SHAICharacter.GetFinisherParams
// 0x0038 (0x0038 - 0x0000)
struct SHAICharacter_GetFinisherParams final
{
public:
	class AActor*                                 Victim;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagFilters;                                        // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAICharacter_GetFinisherParams) == 0x000008, "Wrong alignment on SHAICharacter_GetFinisherParams");
static_assert(sizeof(SHAICharacter_GetFinisherParams) == 0x000038, "Wrong size on SHAICharacter_GetFinisherParams");
static_assert(offsetof(SHAICharacter_GetFinisherParams, Victim) == 0x000000, "Member 'SHAICharacter_GetFinisherParams::Victim' has a wrong offset!");
static_assert(offsetof(SHAICharacter_GetFinisherParams, TagFilters) == 0x000008, "Member 'SHAICharacter_GetFinisherParams::TagFilters' has a wrong offset!");
static_assert(offsetof(SHAICharacter_GetFinisherParams, ReturnValue) == 0x000028, "Member 'SHAICharacter_GetFinisherParams::ReturnValue' has a wrong offset!");

// Function SHProto.SHAICharacter.GetFinisherTags
// 0x0028 (0x0028 - 0x0000)
struct SHAICharacter_GetFinisherTags final
{
public:
	class AActor*                                 Victim;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAICharacter_GetFinisherTags) == 0x000008, "Wrong alignment on SHAICharacter_GetFinisherTags");
static_assert(sizeof(SHAICharacter_GetFinisherTags) == 0x000028, "Wrong size on SHAICharacter_GetFinisherTags");
static_assert(offsetof(SHAICharacter_GetFinisherTags, Victim) == 0x000000, "Member 'SHAICharacter_GetFinisherTags::Victim' has a wrong offset!");
static_assert(offsetof(SHAICharacter_GetFinisherTags, ReturnValue) == 0x000008, "Member 'SHAICharacter_GetFinisherTags::ReturnValue' has a wrong offset!");

// Function SHProto.SHAICharacter.GetFlashlightTarget
// 0x0008 (0x0008 - 0x0000)
struct SHAICharacter_GetFlashlightTarget final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAICharacter_GetFlashlightTarget) == 0x000008, "Wrong alignment on SHAICharacter_GetFlashlightTarget");
static_assert(sizeof(SHAICharacter_GetFlashlightTarget) == 0x000008, "Wrong size on SHAICharacter_GetFlashlightTarget");
static_assert(offsetof(SHAICharacter_GetFlashlightTarget, ReturnValue) == 0x000000, "Member 'SHAICharacter_GetFlashlightTarget::ReturnValue' has a wrong offset!");

// Function SHProto.SHAICharacter.GetOffsetForEnvironmentTrace
// 0x0004 (0x0004 - 0x0000)
struct SHAICharacter_GetOffsetForEnvironmentTrace final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAICharacter_GetOffsetForEnvironmentTrace) == 0x000004, "Wrong alignment on SHAICharacter_GetOffsetForEnvironmentTrace");
static_assert(sizeof(SHAICharacter_GetOffsetForEnvironmentTrace) == 0x000004, "Wrong size on SHAICharacter_GetOffsetForEnvironmentTrace");
static_assert(offsetof(SHAICharacter_GetOffsetForEnvironmentTrace, ReturnValue) == 0x000000, "Member 'SHAICharacter_GetOffsetForEnvironmentTrace::ReturnValue' has a wrong offset!");

// Function SHProto.SHAICharacter.IsKnockedDown
// 0x0001 (0x0001 - 0x0000)
struct SHAICharacter_IsKnockedDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAICharacter_IsKnockedDown) == 0x000001, "Wrong alignment on SHAICharacter_IsKnockedDown");
static_assert(sizeof(SHAICharacter_IsKnockedDown) == 0x000001, "Wrong size on SHAICharacter_IsKnockedDown");
static_assert(offsetof(SHAICharacter_IsKnockedDown, ReturnValue) == 0x000000, "Member 'SHAICharacter_IsKnockedDown::ReturnValue' has a wrong offset!");

// Function SHProto.SHAICharacter.IsLying
// 0x0001 (0x0001 - 0x0000)
struct SHAICharacter_IsLying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAICharacter_IsLying) == 0x000001, "Wrong alignment on SHAICharacter_IsLying");
static_assert(sizeof(SHAICharacter_IsLying) == 0x000001, "Wrong size on SHAICharacter_IsLying");
static_assert(offsetof(SHAICharacter_IsLying, ReturnValue) == 0x000000, "Member 'SHAICharacter_IsLying::ReturnValue' has a wrong offset!");

// Function SHProto.SHAICharacter.IsPrimaryEnemy
// 0x0001 (0x0001 - 0x0000)
struct SHAICharacter_IsPrimaryEnemy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAICharacter_IsPrimaryEnemy) == 0x000001, "Wrong alignment on SHAICharacter_IsPrimaryEnemy");
static_assert(sizeof(SHAICharacter_IsPrimaryEnemy) == 0x000001, "Wrong size on SHAICharacter_IsPrimaryEnemy");
static_assert(offsetof(SHAICharacter_IsPrimaryEnemy, ReturnValue) == 0x000000, "Member 'SHAICharacter_IsPrimaryEnemy::ReturnValue' has a wrong offset!");

// Function SHProto.SHAICharacter.IsPushedByPlayerDisabled
// 0x0001 (0x0001 - 0x0000)
struct SHAICharacter_IsPushedByPlayerDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAICharacter_IsPushedByPlayerDisabled) == 0x000001, "Wrong alignment on SHAICharacter_IsPushedByPlayerDisabled");
static_assert(sizeof(SHAICharacter_IsPushedByPlayerDisabled) == 0x000001, "Wrong size on SHAICharacter_IsPushedByPlayerDisabled");
static_assert(offsetof(SHAICharacter_IsPushedByPlayerDisabled, ReturnValue) == 0x000000, "Member 'SHAICharacter_IsPushedByPlayerDisabled::ReturnValue' has a wrong offset!");

// Function SHProto.SHAICharacter.IsPushedByPlayerDisabledBy
// 0x0010 (0x0010 - 0x0000)
struct SHAICharacter_IsPushedByPlayerDisabledBy final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHAICharacter_IsPushedByPlayerDisabledBy) == 0x000008, "Wrong alignment on SHAICharacter_IsPushedByPlayerDisabledBy");
static_assert(sizeof(SHAICharacter_IsPushedByPlayerDisabledBy) == 0x000010, "Wrong size on SHAICharacter_IsPushedByPlayerDisabledBy");
static_assert(offsetof(SHAICharacter_IsPushedByPlayerDisabledBy, Object) == 0x000000, "Member 'SHAICharacter_IsPushedByPlayerDisabledBy::Object' has a wrong offset!");
static_assert(offsetof(SHAICharacter_IsPushedByPlayerDisabledBy, ReturnValue) == 0x000008, "Member 'SHAICharacter_IsPushedByPlayerDisabledBy::ReturnValue' has a wrong offset!");

// Function SHProto.SHAICharacter.IsUnderEnemy
// 0x0001 (0x0001 - 0x0000)
struct SHAICharacter_IsUnderEnemy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAICharacter_IsUnderEnemy) == 0x000001, "Wrong alignment on SHAICharacter_IsUnderEnemy");
static_assert(sizeof(SHAICharacter_IsUnderEnemy) == 0x000001, "Wrong size on SHAICharacter_IsUnderEnemy");
static_assert(offsetof(SHAICharacter_IsUnderEnemy, ReturnValue) == 0x000000, "Member 'SHAICharacter_IsUnderEnemy::ReturnValue' has a wrong offset!");

// Function SHProto.SHAICharacter.IsUnderObstacle
// 0x0001 (0x0001 - 0x0000)
struct SHAICharacter_IsUnderObstacle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAICharacter_IsUnderObstacle) == 0x000001, "Wrong alignment on SHAICharacter_IsUnderObstacle");
static_assert(sizeof(SHAICharacter_IsUnderObstacle) == 0x000001, "Wrong size on SHAICharacter_IsUnderObstacle");
static_assert(offsetof(SHAICharacter_IsUnderObstacle, ReturnValue) == 0x000000, "Member 'SHAICharacter_IsUnderObstacle::ReturnValue' has a wrong offset!");

// Function SHProto.SHBlissEndingFactor.SHDebug_Character_Endings_Factors_BlissEnding_SetDebugIsAllowedToAddValue
// 0x0001 (0x0001 - 0x0000)
struct SHBlissEndingFactor_SHDebug_Character_Endings_Factors_BlissEnding_SetDebugIsAllowedToAddValue final
{
public:
	bool                                          bInValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBlissEndingFactor_SHDebug_Character_Endings_Factors_BlissEnding_SetDebugIsAllowedToAddValue) == 0x000001, "Wrong alignment on SHBlissEndingFactor_SHDebug_Character_Endings_Factors_BlissEnding_SetDebugIsAllowedToAddValue");
static_assert(sizeof(SHBlissEndingFactor_SHDebug_Character_Endings_Factors_BlissEnding_SetDebugIsAllowedToAddValue) == 0x000001, "Wrong size on SHBlissEndingFactor_SHDebug_Character_Endings_Factors_BlissEnding_SetDebugIsAllowedToAddValue");
static_assert(offsetof(SHBlissEndingFactor_SHDebug_Character_Endings_Factors_BlissEnding_SetDebugIsAllowedToAddValue, bInValue) == 0x000000, "Member 'SHBlissEndingFactor_SHDebug_Character_Endings_Factors_BlissEnding_SetDebugIsAllowedToAddValue::bInValue' has a wrong offset!");

// Function SHProto.SHBlissEndingFactor.SHDebug_Character_Endings_Factors_BlissEnding_SetDebugValue
// 0x0001 (0x0001 - 0x0000)
struct SHBlissEndingFactor_SHDebug_Character_Endings_Factors_BlissEnding_SetDebugValue final
{
public:
	bool                                          bInValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBlissEndingFactor_SHDebug_Character_Endings_Factors_BlissEnding_SetDebugValue) == 0x000001, "Wrong alignment on SHBlissEndingFactor_SHDebug_Character_Endings_Factors_BlissEnding_SetDebugValue");
static_assert(sizeof(SHBlissEndingFactor_SHDebug_Character_Endings_Factors_BlissEnding_SetDebugValue) == 0x000001, "Wrong size on SHBlissEndingFactor_SHDebug_Character_Endings_Factors_BlissEnding_SetDebugValue");
static_assert(offsetof(SHBlissEndingFactor_SHDebug_Character_Endings_Factors_BlissEnding_SetDebugValue, bInValue) == 0x000000, "Member 'SHBlissEndingFactor_SHDebug_Character_Endings_Factors_BlissEnding_SetDebugValue::bInValue' has a wrong offset!");

// Function SHProto.SHAIController.ChangeLockedState
// 0x0010 (0x0010 - 0x0000)
struct SHAIController_ChangeLockedState final
{
public:
	bool                                          bNewLockedState;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAIController_ChangeLockedState) == 0x000008, "Wrong alignment on SHAIController_ChangeLockedState");
static_assert(sizeof(SHAIController_ChangeLockedState) == 0x000010, "Wrong size on SHAIController_ChangeLockedState");
static_assert(offsetof(SHAIController_ChangeLockedState, bNewLockedState) == 0x000000, "Member 'SHAIController_ChangeLockedState::bNewLockedState' has a wrong offset!");
static_assert(offsetof(SHAIController_ChangeLockedState, Object) == 0x000008, "Member 'SHAIController_ChangeLockedState::Object' has a wrong offset!");

// Function SHProto.SHAIController.ClearBehaviorType
// 0x0001 (0x0001 - 0x0000)
struct SHAIController_ClearBehaviorType final
{
public:
	ESHAIBehaviors                                Behavior;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAIController_ClearBehaviorType) == 0x000001, "Wrong alignment on SHAIController_ClearBehaviorType");
static_assert(sizeof(SHAIController_ClearBehaviorType) == 0x000001, "Wrong size on SHAIController_ClearBehaviorType");
static_assert(offsetof(SHAIController_ClearBehaviorType, Behavior) == 0x000000, "Member 'SHAIController_ClearBehaviorType::Behavior' has a wrong offset!");

// Function SHProto.SHAIController.SetBehaviorType
// 0x0001 (0x0001 - 0x0000)
struct SHAIController_SetBehaviorType final
{
public:
	ESHAIBehaviors                                Behavior;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAIController_SetBehaviorType) == 0x000001, "Wrong alignment on SHAIController_SetBehaviorType");
static_assert(sizeof(SHAIController_SetBehaviorType) == 0x000001, "Wrong size on SHAIController_SetBehaviorType");
static_assert(offsetof(SHAIController_SetBehaviorType, Behavior) == 0x000000, "Member 'SHAIController_SetBehaviorType::Behavior' has a wrong offset!");

// Function SHProto.SHAIController.GetBehaviorType
// 0x0001 (0x0001 - 0x0000)
struct SHAIController_GetBehaviorType final
{
public:
	ESHAIBehaviors                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAIController_GetBehaviorType) == 0x000001, "Wrong alignment on SHAIController_GetBehaviorType");
static_assert(sizeof(SHAIController_GetBehaviorType) == 0x000001, "Wrong size on SHAIController_GetBehaviorType");
static_assert(offsetof(SHAIController_GetBehaviorType, ReturnValue) == 0x000000, "Member 'SHAIController_GetBehaviorType::ReturnValue' has a wrong offset!");

// Function SHProto.SHAIController.IsInLockedState
// 0x0001 (0x0001 - 0x0000)
struct SHAIController_IsInLockedState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAIController_IsInLockedState) == 0x000001, "Wrong alignment on SHAIController_IsInLockedState");
static_assert(sizeof(SHAIController_IsInLockedState) == 0x000001, "Wrong size on SHAIController_IsInLockedState");
static_assert(offsetof(SHAIController_IsInLockedState, ReturnValue) == 0x000000, "Member 'SHAIController_IsInLockedState::ReturnValue' has a wrong offset!");

// Function SHProto.SHPlaythroughStompedDeadEnemiesEndingFactor.SHDebug_Character_Endings_PlaythroughStompedDeadEnemiesEndingFactor_SetDebugValue
// 0x0004 (0x0004 - 0x0000)
struct SHPlaythroughStompedDeadEnemiesEndingFactor_SHDebug_Character_Endings_PlaythroughStompedDeadEnemiesEndingFactor_SetDebugValue final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPlaythroughStompedDeadEnemiesEndingFactor_SHDebug_Character_Endings_PlaythroughStompedDeadEnemiesEndingFactor_SetDebugValue) == 0x000004, "Wrong alignment on SHPlaythroughStompedDeadEnemiesEndingFactor_SHDebug_Character_Endings_PlaythroughStompedDeadEnemiesEndingFactor_SetDebugValue");
static_assert(sizeof(SHPlaythroughStompedDeadEnemiesEndingFactor_SHDebug_Character_Endings_PlaythroughStompedDeadEnemiesEndingFactor_SetDebugValue) == 0x000004, "Wrong size on SHPlaythroughStompedDeadEnemiesEndingFactor_SHDebug_Character_Endings_PlaythroughStompedDeadEnemiesEndingFactor_SetDebugValue");
static_assert(offsetof(SHPlaythroughStompedDeadEnemiesEndingFactor_SHDebug_Character_Endings_PlaythroughStompedDeadEnemiesEndingFactor_SetDebugValue, InValue) == 0x000000, "Member 'SHPlaythroughStompedDeadEnemiesEndingFactor_SHDebug_Character_Endings_PlaythroughStompedDeadEnemiesEndingFactor_SetDebugValue::InValue' has a wrong offset!");

// Function SHProto.SHAnimPhysicalSubcomp.SetPhysicalAnimationWeight
// 0x0004 (0x0004 - 0x0000)
struct SHAnimPhysicalSubcomp_SetPhysicalAnimationWeight final
{
public:
	float                                         PhysicalAnimationWeight;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimPhysicalSubcomp_SetPhysicalAnimationWeight) == 0x000004, "Wrong alignment on SHAnimPhysicalSubcomp_SetPhysicalAnimationWeight");
static_assert(sizeof(SHAnimPhysicalSubcomp_SetPhysicalAnimationWeight) == 0x000004, "Wrong size on SHAnimPhysicalSubcomp_SetPhysicalAnimationWeight");
static_assert(offsetof(SHAnimPhysicalSubcomp_SetPhysicalAnimationWeight, PhysicalAnimationWeight) == 0x000000, "Member 'SHAnimPhysicalSubcomp_SetPhysicalAnimationWeight::PhysicalAnimationWeight' has a wrong offset!");

// Function SHProto.SHBaseStagedAnimInstance.CanAdvanceStage
// 0x0001 (0x0001 - 0x0000)
struct SHBaseStagedAnimInstance_CanAdvanceStage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBaseStagedAnimInstance_CanAdvanceStage) == 0x000001, "Wrong alignment on SHBaseStagedAnimInstance_CanAdvanceStage");
static_assert(sizeof(SHBaseStagedAnimInstance_CanAdvanceStage) == 0x000001, "Wrong size on SHBaseStagedAnimInstance_CanAdvanceStage");
static_assert(offsetof(SHBaseStagedAnimInstance_CanAdvanceStage, ReturnValue) == 0x000000, "Member 'SHBaseStagedAnimInstance_CanAdvanceStage::ReturnValue' has a wrong offset!");

// Function SHProto.SHSaveSlotsListWidget.Filter
// 0x0001 (0x0001 - 0x0000)
struct SHSaveSlotsListWidget_Filter final
{
public:
	ESavePointFilterId                            FilterId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSaveSlotsListWidget_Filter) == 0x000001, "Wrong alignment on SHSaveSlotsListWidget_Filter");
static_assert(sizeof(SHSaveSlotsListWidget_Filter) == 0x000001, "Wrong size on SHSaveSlotsListWidget_Filter");
static_assert(offsetof(SHSaveSlotsListWidget_Filter, FilterId) == 0x000000, "Member 'SHSaveSlotsListWidget_Filter::FilterId' has a wrong offset!");

// Function SHProto.SHSaveSlotsListWidget.OnSlotHovered
// 0x0080 (0x0080 - 0x0000)
struct SHSaveSlotsListWidget_OnSlotHovered final
{
public:
	struct FGameSaveSlotInfo                      SaveSlot;                                          // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSaveSlotsListWidget_OnSlotHovered) == 0x000008, "Wrong alignment on SHSaveSlotsListWidget_OnSlotHovered");
static_assert(sizeof(SHSaveSlotsListWidget_OnSlotHovered) == 0x000080, "Wrong size on SHSaveSlotsListWidget_OnSlotHovered");
static_assert(offsetof(SHSaveSlotsListWidget_OnSlotHovered, SaveSlot) == 0x000000, "Member 'SHSaveSlotsListWidget_OnSlotHovered::SaveSlot' has a wrong offset!");

// Function SHProto.SHAILitByAFlashlight.isPointLitByAFlashlight
// 0x0030 (0x0030 - 0x0000)
struct SHAILitByAFlashlight_IsPointLitByAFlashlight final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleAlpha;                                        // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeAlpha;                                        // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHAILitByAFlashlight_IsPointLitByAFlashlight) == 0x000008, "Wrong alignment on SHAILitByAFlashlight_IsPointLitByAFlashlight");
static_assert(sizeof(SHAILitByAFlashlight_IsPointLitByAFlashlight) == 0x000030, "Wrong size on SHAILitByAFlashlight_IsPointLitByAFlashlight");
static_assert(offsetof(SHAILitByAFlashlight_IsPointLitByAFlashlight, Owner) == 0x000000, "Member 'SHAILitByAFlashlight_IsPointLitByAFlashlight::Owner' has a wrong offset!");
static_assert(offsetof(SHAILitByAFlashlight_IsPointLitByAFlashlight, Point) == 0x000008, "Member 'SHAILitByAFlashlight_IsPointLitByAFlashlight::Point' has a wrong offset!");
static_assert(offsetof(SHAILitByAFlashlight_IsPointLitByAFlashlight, AngleAlpha) == 0x000020, "Member 'SHAILitByAFlashlight_IsPointLitByAFlashlight::AngleAlpha' has a wrong offset!");
static_assert(offsetof(SHAILitByAFlashlight_IsPointLitByAFlashlight, RangeAlpha) == 0x000024, "Member 'SHAILitByAFlashlight_IsPointLitByAFlashlight::RangeAlpha' has a wrong offset!");
static_assert(offsetof(SHAILitByAFlashlight_IsPointLitByAFlashlight, ReturnValue) == 0x000028, "Member 'SHAILitByAFlashlight_IsPointLitByAFlashlight::ReturnValue' has a wrong offset!");

// Function SHProto.SHAILitByAFlashlight.IsLitByAFlashlight
// 0x0001 (0x0001 - 0x0000)
struct SHAILitByAFlashlight_IsLitByAFlashlight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAILitByAFlashlight_IsLitByAFlashlight) == 0x000001, "Wrong alignment on SHAILitByAFlashlight_IsLitByAFlashlight");
static_assert(sizeof(SHAILitByAFlashlight_IsLitByAFlashlight) == 0x000001, "Wrong size on SHAILitByAFlashlight_IsLitByAFlashlight");
static_assert(offsetof(SHAILitByAFlashlight_IsLitByAFlashlight, ReturnValue) == 0x000000, "Member 'SHAILitByAFlashlight_IsLitByAFlashlight::ReturnValue' has a wrong offset!");

// Function SHProto.SHAILitByAFlashlight.IsFullyLit
// 0x0001 (0x0001 - 0x0000)
struct SHAILitByAFlashlight_IsFullyLit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAILitByAFlashlight_IsFullyLit) == 0x000001, "Wrong alignment on SHAILitByAFlashlight_IsFullyLit");
static_assert(sizeof(SHAILitByAFlashlight_IsFullyLit) == 0x000001, "Wrong size on SHAILitByAFlashlight_IsFullyLit");
static_assert(offsetof(SHAILitByAFlashlight_IsFullyLit, ReturnValue) == 0x000000, "Member 'SHAILitByAFlashlight_IsFullyLit::ReturnValue' has a wrong offset!");

// Function SHProto.SHAimDistruptorComponent.SetEnabled
// 0x0010 (0x0010 - 0x0000)
struct SHAimDistruptorComponent_SetEnabled final
{
public:
	bool                                          bInEnabled;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAimDistruptorComponent_SetEnabled) == 0x000008, "Wrong alignment on SHAimDistruptorComponent_SetEnabled");
static_assert(sizeof(SHAimDistruptorComponent_SetEnabled) == 0x000010, "Wrong size on SHAimDistruptorComponent_SetEnabled");
static_assert(offsetof(SHAimDistruptorComponent_SetEnabled, bInEnabled) == 0x000000, "Member 'SHAimDistruptorComponent_SetEnabled::bInEnabled' has a wrong offset!");
static_assert(offsetof(SHAimDistruptorComponent_SetEnabled, Object) == 0x000008, "Member 'SHAimDistruptorComponent_SetEnabled::Object' has a wrong offset!");

// Function SHProto.SHAimDistruptorComponent.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct SHAimDistruptorComponent_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAimDistruptorComponent_IsEnabled) == 0x000001, "Wrong alignment on SHAimDistruptorComponent_IsEnabled");
static_assert(sizeof(SHAimDistruptorComponent_IsEnabled) == 0x000001, "Wrong size on SHAimDistruptorComponent_IsEnabled");
static_assert(offsetof(SHAimDistruptorComponent_IsEnabled, ReturnValue) == 0x000000, "Member 'SHAimDistruptorComponent_IsEnabled::ReturnValue' has a wrong offset!");

// Function SHProto.SHAIMeleeWeapon.HandleMeshComponentBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct SHAIMeleeWeapon_HandleMeshComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAIMeleeWeapon_HandleMeshComponentBeginOverlap) == 0x000008, "Wrong alignment on SHAIMeleeWeapon_HandleMeshComponentBeginOverlap");
static_assert(sizeof(SHAIMeleeWeapon_HandleMeshComponentBeginOverlap) == 0x000108, "Wrong size on SHAIMeleeWeapon_HandleMeshComponentBeginOverlap");
static_assert(offsetof(SHAIMeleeWeapon_HandleMeshComponentBeginOverlap, OverlappedComponent) == 0x000000, "Member 'SHAIMeleeWeapon_HandleMeshComponentBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SHAIMeleeWeapon_HandleMeshComponentBeginOverlap, OtherActor) == 0x000008, "Member 'SHAIMeleeWeapon_HandleMeshComponentBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SHAIMeleeWeapon_HandleMeshComponentBeginOverlap, OtherComp) == 0x000010, "Member 'SHAIMeleeWeapon_HandleMeshComponentBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(SHAIMeleeWeapon_HandleMeshComponentBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'SHAIMeleeWeapon_HandleMeshComponentBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SHAIMeleeWeapon_HandleMeshComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'SHAIMeleeWeapon_HandleMeshComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(SHAIMeleeWeapon_HandleMeshComponentBeginOverlap, SweepResult) == 0x000020, "Member 'SHAIMeleeWeapon_HandleMeshComponentBeginOverlap::SweepResult' has a wrong offset!");

// Function SHProto.SHAIMeleeWeapon.BlueprintGetEnvCollisionShapes
// 0x0010 (0x0010 - 0x0000)
struct SHAIMeleeWeapon_BlueprintGetEnvCollisionShapes final
{
public:
	TArray<class UShapeComponent*>                ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAIMeleeWeapon_BlueprintGetEnvCollisionShapes) == 0x000008, "Wrong alignment on SHAIMeleeWeapon_BlueprintGetEnvCollisionShapes");
static_assert(sizeof(SHAIMeleeWeapon_BlueprintGetEnvCollisionShapes) == 0x000010, "Wrong size on SHAIMeleeWeapon_BlueprintGetEnvCollisionShapes");
static_assert(offsetof(SHAIMeleeWeapon_BlueprintGetEnvCollisionShapes, ReturnValue) == 0x000000, "Member 'SHAIMeleeWeapon_BlueprintGetEnvCollisionShapes::ReturnValue' has a wrong offset!");

// Function SHProto.SHBaseDoorAttachment.ProcessOnDoorLockStateChanged
// 0x0008 (0x0008 - 0x0000)
struct SHBaseDoorAttachment_ProcessOnDoorLockStateChanged final
{
public:
	class USHDoorLockBaseComponent*               DoorLockComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBaseDoorAttachment_ProcessOnDoorLockStateChanged) == 0x000008, "Wrong alignment on SHBaseDoorAttachment_ProcessOnDoorLockStateChanged");
static_assert(sizeof(SHBaseDoorAttachment_ProcessOnDoorLockStateChanged) == 0x000008, "Wrong size on SHBaseDoorAttachment_ProcessOnDoorLockStateChanged");
static_assert(offsetof(SHBaseDoorAttachment_ProcessOnDoorLockStateChanged, DoorLockComponent) == 0x000000, "Member 'SHBaseDoorAttachment_ProcessOnDoorLockStateChanged::DoorLockComponent' has a wrong offset!");

// Function SHProto.SHBaseDoorAttachment.ProcessProximityBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct SHBaseDoorAttachment_ProcessProximityBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FromSweep;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBaseDoorAttachment_ProcessProximityBeginOverlap) == 0x000008, "Wrong alignment on SHBaseDoorAttachment_ProcessProximityBeginOverlap");
static_assert(sizeof(SHBaseDoorAttachment_ProcessProximityBeginOverlap) == 0x000108, "Wrong size on SHBaseDoorAttachment_ProcessProximityBeginOverlap");
static_assert(offsetof(SHBaseDoorAttachment_ProcessProximityBeginOverlap, OverlappedComponent) == 0x000000, "Member 'SHBaseDoorAttachment_ProcessProximityBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SHBaseDoorAttachment_ProcessProximityBeginOverlap, OtherActor) == 0x000008, "Member 'SHBaseDoorAttachment_ProcessProximityBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SHBaseDoorAttachment_ProcessProximityBeginOverlap, OtherComponent) == 0x000010, "Member 'SHBaseDoorAttachment_ProcessProximityBeginOverlap::OtherComponent' has a wrong offset!");
static_assert(offsetof(SHBaseDoorAttachment_ProcessProximityBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'SHBaseDoorAttachment_ProcessProximityBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SHBaseDoorAttachment_ProcessProximityBeginOverlap, FromSweep) == 0x00001C, "Member 'SHBaseDoorAttachment_ProcessProximityBeginOverlap::FromSweep' has a wrong offset!");
static_assert(offsetof(SHBaseDoorAttachment_ProcessProximityBeginOverlap, SweepResult) == 0x000020, "Member 'SHBaseDoorAttachment_ProcessProximityBeginOverlap::SweepResult' has a wrong offset!");

// Function SHProto.SHBaseDoorAttachment.ProcessProximityEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct SHBaseDoorAttachment_ProcessProximityEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHBaseDoorAttachment_ProcessProximityEndOverlap) == 0x000008, "Wrong alignment on SHBaseDoorAttachment_ProcessProximityEndOverlap");
static_assert(sizeof(SHBaseDoorAttachment_ProcessProximityEndOverlap) == 0x000020, "Wrong size on SHBaseDoorAttachment_ProcessProximityEndOverlap");
static_assert(offsetof(SHBaseDoorAttachment_ProcessProximityEndOverlap, OverlappedComponent) == 0x000000, "Member 'SHBaseDoorAttachment_ProcessProximityEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SHBaseDoorAttachment_ProcessProximityEndOverlap, OtherActor) == 0x000008, "Member 'SHBaseDoorAttachment_ProcessProximityEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SHBaseDoorAttachment_ProcessProximityEndOverlap, OtherComponent) == 0x000010, "Member 'SHBaseDoorAttachment_ProcessProximityEndOverlap::OtherComponent' has a wrong offset!");
static_assert(offsetof(SHBaseDoorAttachment_ProcessProximityEndOverlap, OtherBodyIndex) == 0x000018, "Member 'SHBaseDoorAttachment_ProcessProximityEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function SHProto.SHBaseDoorAttachment.RegisterDoorActor
// 0x0010 (0x0010 - 0x0000)
struct SHBaseDoorAttachment_RegisterDoorActor final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHBaseDoorAttachment_RegisterDoorActor) == 0x000008, "Wrong alignment on SHBaseDoorAttachment_RegisterDoorActor");
static_assert(sizeof(SHBaseDoorAttachment_RegisterDoorActor) == 0x000010, "Wrong size on SHBaseDoorAttachment_RegisterDoorActor");
static_assert(offsetof(SHBaseDoorAttachment_RegisterDoorActor, InActor) == 0x000000, "Member 'SHBaseDoorAttachment_RegisterDoorActor::InActor' has a wrong offset!");
static_assert(offsetof(SHBaseDoorAttachment_RegisterDoorActor, ReturnValue) == 0x000008, "Member 'SHBaseDoorAttachment_RegisterDoorActor::ReturnValue' has a wrong offset!");

// Function SHProto.SHBaseDoorAttachment.SetDoorActorFrozen
// 0x0001 (0x0001 - 0x0000)
struct SHBaseDoorAttachment_SetDoorActorFrozen final
{
public:
	bool                                          Inset;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBaseDoorAttachment_SetDoorActorFrozen) == 0x000001, "Wrong alignment on SHBaseDoorAttachment_SetDoorActorFrozen");
static_assert(sizeof(SHBaseDoorAttachment_SetDoorActorFrozen) == 0x000001, "Wrong size on SHBaseDoorAttachment_SetDoorActorFrozen");
static_assert(offsetof(SHBaseDoorAttachment_SetDoorActorFrozen, Inset) == 0x000000, "Member 'SHBaseDoorAttachment_SetDoorActorFrozen::Inset' has a wrong offset!");

// Function SHProto.SHBaseDoorAttachment.GetKeyAttachmentData
// 0x0058 (0x0058 - 0x0000)
struct SHBaseDoorAttachment_GetKeyAttachmentData final
{
public:
	class FName                                   KeyAttachmentName;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSHKeyAttachmentDataStruct             ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBaseDoorAttachment_GetKeyAttachmentData) == 0x000008, "Wrong alignment on SHBaseDoorAttachment_GetKeyAttachmentData");
static_assert(sizeof(SHBaseDoorAttachment_GetKeyAttachmentData) == 0x000058, "Wrong size on SHBaseDoorAttachment_GetKeyAttachmentData");
static_assert(offsetof(SHBaseDoorAttachment_GetKeyAttachmentData, KeyAttachmentName) == 0x000000, "Member 'SHBaseDoorAttachment_GetKeyAttachmentData::KeyAttachmentName' has a wrong offset!");
static_assert(offsetof(SHBaseDoorAttachment_GetKeyAttachmentData, ReturnValue) == 0x000008, "Member 'SHBaseDoorAttachment_GetKeyAttachmentData::ReturnValue' has a wrong offset!");

// Function SHProto.SHBaseDoorAttachment.GetProximityCharacter
// 0x0008 (0x0008 - 0x0000)
struct SHBaseDoorAttachment_GetProximityCharacter final
{
public:
	class ASHCharacterPlay*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBaseDoorAttachment_GetProximityCharacter) == 0x000008, "Wrong alignment on SHBaseDoorAttachment_GetProximityCharacter");
static_assert(sizeof(SHBaseDoorAttachment_GetProximityCharacter) == 0x000008, "Wrong size on SHBaseDoorAttachment_GetProximityCharacter");
static_assert(offsetof(SHBaseDoorAttachment_GetProximityCharacter, ReturnValue) == 0x000000, "Member 'SHBaseDoorAttachment_GetProximityCharacter::ReturnValue' has a wrong offset!");

// Function SHProto.SHAimOffsetAnimInstance.GetHealthState
// 0x0001 (0x0001 - 0x0000)
struct SHAimOffsetAnimInstance_GetHealthState final
{
public:
	ESHHealthStateEnum                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAimOffsetAnimInstance_GetHealthState) == 0x000001, "Wrong alignment on SHAimOffsetAnimInstance_GetHealthState");
static_assert(sizeof(SHAimOffsetAnimInstance_GetHealthState) == 0x000001, "Wrong size on SHAimOffsetAnimInstance_GetHealthState");
static_assert(offsetof(SHAimOffsetAnimInstance_GetHealthState, ReturnValue) == 0x000000, "Member 'SHAimOffsetAnimInstance_GetHealthState::ReturnValue' has a wrong offset!");

// DelegateFunction SHProto.SHSearchFocusAnimInstance.SHSearchFocusAnimInstanceEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHSearchFocusAnimInstance_SHSearchFocusAnimInstanceEvent__DelegateSignature final
{
public:
	class USHSearchFocusAnimInstance*             AnimInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSearchFocusAnimInstance_SHSearchFocusAnimInstanceEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHSearchFocusAnimInstance_SHSearchFocusAnimInstanceEvent__DelegateSignature");
static_assert(sizeof(SHSearchFocusAnimInstance_SHSearchFocusAnimInstanceEvent__DelegateSignature) == 0x000008, "Wrong size on SHSearchFocusAnimInstance_SHSearchFocusAnimInstanceEvent__DelegateSignature");
static_assert(offsetof(SHSearchFocusAnimInstance_SHSearchFocusAnimInstanceEvent__DelegateSignature, AnimInst) == 0x000000, "Member 'SHSearchFocusAnimInstance_SHSearchFocusAnimInstanceEvent__DelegateSignature::AnimInst' has a wrong offset!");

// Function SHProto.SHSearchFocusAnimInstance.CanReceiveInput
// 0x0001 (0x0001 - 0x0000)
struct SHSearchFocusAnimInstance_CanReceiveInput final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSearchFocusAnimInstance_CanReceiveInput) == 0x000001, "Wrong alignment on SHSearchFocusAnimInstance_CanReceiveInput");
static_assert(sizeof(SHSearchFocusAnimInstance_CanReceiveInput) == 0x000001, "Wrong size on SHSearchFocusAnimInstance_CanReceiveInput");
static_assert(offsetof(SHSearchFocusAnimInstance_CanReceiveInput, ReturnValue) == 0x000000, "Member 'SHSearchFocusAnimInstance_CanReceiveInput::ReturnValue' has a wrong offset!");

// Function SHProto.SHAIUnderObstacleInterface.GetObstaclePrimitivesToIgnore
// 0x0010 (0x0010 - 0x0000)
struct SHAIUnderObstacleInterface_GetObstaclePrimitivesToIgnore final
{
public:
	TArray<class UPrimitiveComponent*>            ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAIUnderObstacleInterface_GetObstaclePrimitivesToIgnore) == 0x000008, "Wrong alignment on SHAIUnderObstacleInterface_GetObstaclePrimitivesToIgnore");
static_assert(sizeof(SHAIUnderObstacleInterface_GetObstaclePrimitivesToIgnore) == 0x000010, "Wrong size on SHAIUnderObstacleInterface_GetObstaclePrimitivesToIgnore");
static_assert(offsetof(SHAIUnderObstacleInterface_GetObstaclePrimitivesToIgnore, ReturnValue) == 0x000000, "Member 'SHAIUnderObstacleInterface_GetObstaclePrimitivesToIgnore::ReturnValue' has a wrong offset!");

// Function SHProto.SHAIUnderObstacleInterface.GetObstaclePrimitiveToOverlap
// 0x0008 (0x0008 - 0x0000)
struct SHAIUnderObstacleInterface_GetObstaclePrimitiveToOverlap final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAIUnderObstacleInterface_GetObstaclePrimitiveToOverlap) == 0x000008, "Wrong alignment on SHAIUnderObstacleInterface_GetObstaclePrimitiveToOverlap");
static_assert(sizeof(SHAIUnderObstacleInterface_GetObstaclePrimitiveToOverlap) == 0x000008, "Wrong size on SHAIUnderObstacleInterface_GetObstaclePrimitiveToOverlap");
static_assert(offsetof(SHAIUnderObstacleInterface_GetObstaclePrimitiveToOverlap, ReturnValue) == 0x000000, "Member 'SHAIUnderObstacleInterface_GetObstaclePrimitiveToOverlap::ReturnValue' has a wrong offset!");

// Function SHProto.SHBreakableActor.AssignRuntimeSecondaryAttackRowName
// 0x0008 (0x0008 - 0x0000)
struct SHBreakableActor_AssignRuntimeSecondaryAttackRowName final
{
public:
	class FName                                   InRowName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBreakableActor_AssignRuntimeSecondaryAttackRowName) == 0x000004, "Wrong alignment on SHBreakableActor_AssignRuntimeSecondaryAttackRowName");
static_assert(sizeof(SHBreakableActor_AssignRuntimeSecondaryAttackRowName) == 0x000008, "Wrong size on SHBreakableActor_AssignRuntimeSecondaryAttackRowName");
static_assert(offsetof(SHBreakableActor_AssignRuntimeSecondaryAttackRowName, InRowName) == 0x000000, "Member 'SHBreakableActor_AssignRuntimeSecondaryAttackRowName::InRowName' has a wrong offset!");

// DelegateFunction SHProto.SHBreakableActor.SHBreakableActorEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHBreakableActor_SHBreakableActorEvent__DelegateSignature final
{
public:
	class ASHBreakableActor*                      Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBreakableActor_SHBreakableActorEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHBreakableActor_SHBreakableActorEvent__DelegateSignature");
static_assert(sizeof(SHBreakableActor_SHBreakableActorEvent__DelegateSignature) == 0x000008, "Wrong size on SHBreakableActor_SHBreakableActorEvent__DelegateSignature");
static_assert(offsetof(SHBreakableActor_SHBreakableActorEvent__DelegateSignature, Actor) == 0x000000, "Member 'SHBreakableActor_SHBreakableActorEvent__DelegateSignature::Actor' has a wrong offset!");

// Function SHProto.SHBreakableActor.IsBroken
// 0x0001 (0x0001 - 0x0000)
struct SHBreakableActor_IsBroken final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBreakableActor_IsBroken) == 0x000001, "Wrong alignment on SHBreakableActor_IsBroken");
static_assert(sizeof(SHBreakableActor_IsBroken) == 0x000001, "Wrong size on SHBreakableActor_IsBroken");
static_assert(offsetof(SHBreakableActor_IsBroken, ReturnValue) == 0x000000, "Member 'SHBreakableActor_IsBroken::ReturnValue' has a wrong offset!");

// Function SHProto.SHAIUnderObstacle.ConditionalExitUnderObstacle
// 0x0008 (0x0008 - 0x0000)
struct SHAIUnderObstacle_ConditionalExitUnderObstacle final
{
public:
	class AActor*                                 Obstacle;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAIUnderObstacle_ConditionalExitUnderObstacle) == 0x000008, "Wrong alignment on SHAIUnderObstacle_ConditionalExitUnderObstacle");
static_assert(sizeof(SHAIUnderObstacle_ConditionalExitUnderObstacle) == 0x000008, "Wrong size on SHAIUnderObstacle_ConditionalExitUnderObstacle");
static_assert(offsetof(SHAIUnderObstacle_ConditionalExitUnderObstacle, Obstacle) == 0x000000, "Member 'SHAIUnderObstacle_ConditionalExitUnderObstacle::Obstacle' has a wrong offset!");

// Function SHProto.SHAIUnderObstacle.EnterUnderObctacle
// 0x0008 (0x0008 - 0x0000)
struct SHAIUnderObstacle_EnterUnderObctacle final
{
public:
	class AActor*                                 Obstacle;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAIUnderObstacle_EnterUnderObctacle) == 0x000008, "Wrong alignment on SHAIUnderObstacle_EnterUnderObctacle");
static_assert(sizeof(SHAIUnderObstacle_EnterUnderObctacle) == 0x000008, "Wrong size on SHAIUnderObstacle_EnterUnderObctacle");
static_assert(offsetof(SHAIUnderObstacle_EnterUnderObctacle, Obstacle) == 0x000000, "Member 'SHAIUnderObstacle_EnterUnderObctacle::Obstacle' has a wrong offset!");

// Function SHProto.SHAIUnderObstacle.OnActorEndOvelap
// 0x0010 (0x0010 - 0x0000)
struct SHAIUnderObstacle_OnActorEndOvelap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAIUnderObstacle_OnActorEndOvelap) == 0x000008, "Wrong alignment on SHAIUnderObstacle_OnActorEndOvelap");
static_assert(sizeof(SHAIUnderObstacle_OnActorEndOvelap) == 0x000010, "Wrong size on SHAIUnderObstacle_OnActorEndOvelap");
static_assert(offsetof(SHAIUnderObstacle_OnActorEndOvelap, OverlappedActor) == 0x000000, "Member 'SHAIUnderObstacle_OnActorEndOvelap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(SHAIUnderObstacle_OnActorEndOvelap, OtherActor) == 0x000008, "Member 'SHAIUnderObstacle_OnActorEndOvelap::OtherActor' has a wrong offset!");

// Function SHProto.SHAIUnderObstacle.OnComponentEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct SHAIUnderObstacle_OnComponentEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHAIUnderObstacle_OnComponentEndOverlap) == 0x000008, "Wrong alignment on SHAIUnderObstacle_OnComponentEndOverlap");
static_assert(sizeof(SHAIUnderObstacle_OnComponentEndOverlap) == 0x000020, "Wrong size on SHAIUnderObstacle_OnComponentEndOverlap");
static_assert(offsetof(SHAIUnderObstacle_OnComponentEndOverlap, OverlappedComponent) == 0x000000, "Member 'SHAIUnderObstacle_OnComponentEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SHAIUnderObstacle_OnComponentEndOverlap, OtherActor) == 0x000008, "Member 'SHAIUnderObstacle_OnComponentEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SHAIUnderObstacle_OnComponentEndOverlap, OtherComp) == 0x000010, "Member 'SHAIUnderObstacle_OnComponentEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(SHAIUnderObstacle_OnComponentEndOverlap, OtherBodyIndex) == 0x000018, "Member 'SHAIUnderObstacle_OnComponentEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function SHProto.SHAIUnderObstacle.IsUnderAnyObstacle
// 0x0001 (0x0001 - 0x0000)
struct SHAIUnderObstacle_IsUnderAnyObstacle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAIUnderObstacle_IsUnderAnyObstacle) == 0x000001, "Wrong alignment on SHAIUnderObstacle_IsUnderAnyObstacle");
static_assert(sizeof(SHAIUnderObstacle_IsUnderAnyObstacle) == 0x000001, "Wrong size on SHAIUnderObstacle_IsUnderAnyObstacle");
static_assert(offsetof(SHAIUnderObstacle_IsUnderAnyObstacle, ReturnValue) == 0x000000, "Member 'SHAIUnderObstacle_IsUnderAnyObstacle::ReturnValue' has a wrong offset!");

// Function SHProto.SHAIWeaponManagerComponent.ProcessSpawnerAfterSpawn
// 0x0008 (0x0008 - 0x0000)
struct SHAIWeaponManagerComponent_ProcessSpawnerAfterSpawn final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAIWeaponManagerComponent_ProcessSpawnerAfterSpawn) == 0x000008, "Wrong alignment on SHAIWeaponManagerComponent_ProcessSpawnerAfterSpawn");
static_assert(sizeof(SHAIWeaponManagerComponent_ProcessSpawnerAfterSpawn) == 0x000008, "Wrong size on SHAIWeaponManagerComponent_ProcessSpawnerAfterSpawn");
static_assert(offsetof(SHAIWeaponManagerComponent_ProcessSpawnerAfterSpawn, Actor) == 0x000000, "Member 'SHAIWeaponManagerComponent_ProcessSpawnerAfterSpawn::Actor' has a wrong offset!");

// DelegateFunction SHProto.SHAIWeaponManagerComponent.SHAIWeaponManagerEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHAIWeaponManagerComponent_SHAIWeaponManagerEvent__DelegateSignature final
{
public:
	class USHAIWeaponManagerComponent*            Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAIWeaponManagerComponent_SHAIWeaponManagerEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHAIWeaponManagerComponent_SHAIWeaponManagerEvent__DelegateSignature");
static_assert(sizeof(SHAIWeaponManagerComponent_SHAIWeaponManagerEvent__DelegateSignature) == 0x000008, "Wrong size on SHAIWeaponManagerComponent_SHAIWeaponManagerEvent__DelegateSignature");
static_assert(offsetof(SHAIWeaponManagerComponent_SHAIWeaponManagerEvent__DelegateSignature, Component) == 0x000000, "Member 'SHAIWeaponManagerComponent_SHAIWeaponManagerEvent__DelegateSignature::Component' has a wrong offset!");

// DelegateFunction SHProto.SHAIWeaponManagerComponent.SHAIWeaponManagerEventWithWeaponContext__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct SHAIWeaponManagerComponent_SHAIWeaponManagerEventWithWeaponContext__DelegateSignature final
{
public:
	class USHAIWeaponManagerComponent*            Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHAIWeapon*                            WeaponContext;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAIWeaponManagerComponent_SHAIWeaponManagerEventWithWeaponContext__DelegateSignature) == 0x000008, "Wrong alignment on SHAIWeaponManagerComponent_SHAIWeaponManagerEventWithWeaponContext__DelegateSignature");
static_assert(sizeof(SHAIWeaponManagerComponent_SHAIWeaponManagerEventWithWeaponContext__DelegateSignature) == 0x000010, "Wrong size on SHAIWeaponManagerComponent_SHAIWeaponManagerEventWithWeaponContext__DelegateSignature");
static_assert(offsetof(SHAIWeaponManagerComponent_SHAIWeaponManagerEventWithWeaponContext__DelegateSignature, Component) == 0x000000, "Member 'SHAIWeaponManagerComponent_SHAIWeaponManagerEventWithWeaponContext__DelegateSignature::Component' has a wrong offset!");
static_assert(offsetof(SHAIWeaponManagerComponent_SHAIWeaponManagerEventWithWeaponContext__DelegateSignature, WeaponContext) == 0x000008, "Member 'SHAIWeaponManagerComponent_SHAIWeaponManagerEventWithWeaponContext__DelegateSignature::WeaponContext' has a wrong offset!");

// Function SHProto.SHAkAcousticPortalBreakableGlass.ProcessBreakableGlassOnBreakEvent
// 0x0008 (0x0008 - 0x0000)
struct SHAkAcousticPortalBreakableGlass_ProcessBreakableGlassOnBreakEvent final
{
public:
	class USHBreakableGlassComponent*             BreakableGlassComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAkAcousticPortalBreakableGlass_ProcessBreakableGlassOnBreakEvent) == 0x000008, "Wrong alignment on SHAkAcousticPortalBreakableGlass_ProcessBreakableGlassOnBreakEvent");
static_assert(sizeof(SHAkAcousticPortalBreakableGlass_ProcessBreakableGlassOnBreakEvent) == 0x000008, "Wrong size on SHAkAcousticPortalBreakableGlass_ProcessBreakableGlassOnBreakEvent");
static_assert(offsetof(SHAkAcousticPortalBreakableGlass_ProcessBreakableGlassOnBreakEvent, BreakableGlassComponent) == 0x000000, "Member 'SHAkAcousticPortalBreakableGlass_ProcessBreakableGlassOnBreakEvent::BreakableGlassComponent' has a wrong offset!");

// Function SHProto.SHAkAcousticPortalBreakableGlass.ProcessOnObservedActorAvailable
// 0x0008 (0x0008 - 0x0000)
struct SHAkAcousticPortalBreakableGlass_ProcessOnObservedActorAvailable final
{
public:
	class AActor*                                 AvailableActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAkAcousticPortalBreakableGlass_ProcessOnObservedActorAvailable) == 0x000008, "Wrong alignment on SHAkAcousticPortalBreakableGlass_ProcessOnObservedActorAvailable");
static_assert(sizeof(SHAkAcousticPortalBreakableGlass_ProcessOnObservedActorAvailable) == 0x000008, "Wrong size on SHAkAcousticPortalBreakableGlass_ProcessOnObservedActorAvailable");
static_assert(offsetof(SHAkAcousticPortalBreakableGlass_ProcessOnObservedActorAvailable, AvailableActor) == 0x000000, "Member 'SHAkAcousticPortalBreakableGlass_ProcessOnObservedActorAvailable::AvailableActor' has a wrong offset!");

// Function SHProto.SHAkPortalDoorComponent.ProcessDoorAlphaChangedEvent
// 0x0008 (0x0008 - 0x0000)
struct SHAkPortalDoorComponent_ProcessDoorAlphaChangedEvent final
{
public:
	class USHDoorMovementBaseComponent*           DummyComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAkPortalDoorComponent_ProcessDoorAlphaChangedEvent) == 0x000008, "Wrong alignment on SHAkPortalDoorComponent_ProcessDoorAlphaChangedEvent");
static_assert(sizeof(SHAkPortalDoorComponent_ProcessDoorAlphaChangedEvent) == 0x000008, "Wrong size on SHAkPortalDoorComponent_ProcessDoorAlphaChangedEvent");
static_assert(offsetof(SHAkPortalDoorComponent_ProcessDoorAlphaChangedEvent, DummyComponent) == 0x000000, "Member 'SHAkPortalDoorComponent_ProcessDoorAlphaChangedEvent::DummyComponent' has a wrong offset!");

// Function SHProto.SHAkPortalDoorComponent.SetInitialState
// 0x0001 (0x0001 - 0x0000)
struct SHAkPortalDoorComponent_SetInitialState final
{
public:
	EAkAcousticPortalState                        InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAkPortalDoorComponent_SetInitialState) == 0x000001, "Wrong alignment on SHAkPortalDoorComponent_SetInitialState");
static_assert(sizeof(SHAkPortalDoorComponent_SetInitialState) == 0x000001, "Wrong size on SHAkPortalDoorComponent_SetInitialState");
static_assert(offsetof(SHAkPortalDoorComponent_SetInitialState, InState) == 0x000000, "Member 'SHAkPortalDoorComponent_SetInitialState::InState' has a wrong offset!");

// Function SHProto.SHPlaythroughBadHealthEndingFactor.SHDebug_Character_Endings_PlaythroughBadHealthEndingFactor_SetDebugValue
// 0x0004 (0x0004 - 0x0000)
struct SHPlaythroughBadHealthEndingFactor_SHDebug_Character_Endings_PlaythroughBadHealthEndingFactor_SetDebugValue final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPlaythroughBadHealthEndingFactor_SHDebug_Character_Endings_PlaythroughBadHealthEndingFactor_SetDebugValue) == 0x000004, "Wrong alignment on SHPlaythroughBadHealthEndingFactor_SHDebug_Character_Endings_PlaythroughBadHealthEndingFactor_SetDebugValue");
static_assert(sizeof(SHPlaythroughBadHealthEndingFactor_SHDebug_Character_Endings_PlaythroughBadHealthEndingFactor_SetDebugValue) == 0x000004, "Wrong size on SHPlaythroughBadHealthEndingFactor_SHDebug_Character_Endings_PlaythroughBadHealthEndingFactor_SetDebugValue");
static_assert(offsetof(SHPlaythroughBadHealthEndingFactor_SHDebug_Character_Endings_PlaythroughBadHealthEndingFactor_SetDebugValue, InValue) == 0x000000, "Member 'SHPlaythroughBadHealthEndingFactor_SHDebug_Character_Endings_PlaythroughBadHealthEndingFactor_SetDebugValue::InValue' has a wrong offset!");

// Function SHProto.SHBreakableWallActor.ProcessBreakableMeshMainComponentBreakEvent
// 0x0008 (0x0008 - 0x0000)
struct SHBreakableWallActor_ProcessBreakableMeshMainComponentBreakEvent final
{
public:
	class USHBreakableMeshComponent*              InComponentPtr;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBreakableWallActor_ProcessBreakableMeshMainComponentBreakEvent) == 0x000008, "Wrong alignment on SHBreakableWallActor_ProcessBreakableMeshMainComponentBreakEvent");
static_assert(sizeof(SHBreakableWallActor_ProcessBreakableMeshMainComponentBreakEvent) == 0x000008, "Wrong size on SHBreakableWallActor_ProcessBreakableMeshMainComponentBreakEvent");
static_assert(offsetof(SHBreakableWallActor_ProcessBreakableMeshMainComponentBreakEvent, InComponentPtr) == 0x000000, "Member 'SHBreakableWallActor_ProcessBreakableMeshMainComponentBreakEvent::InComponentPtr' has a wrong offset!");

// Function SHProto.SHBreakableWallActor.IsBroken
// 0x0001 (0x0001 - 0x0000)
struct SHBreakableWallActor_IsBroken final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBreakableWallActor_IsBroken) == 0x000001, "Wrong alignment on SHBreakableWallActor_IsBroken");
static_assert(sizeof(SHBreakableWallActor_IsBroken) == 0x000001, "Wrong size on SHBreakableWallActor_IsBroken");
static_assert(offsetof(SHBreakableWallActor_IsBroken, ReturnValue) == 0x000000, "Member 'SHBreakableWallActor_IsBroken::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlay.GetGameplayInputMode
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlay_GetGameplayInputMode final
{
public:
	ESHGameplayInputModeEnum                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlay_GetGameplayInputMode) == 0x000001, "Wrong alignment on SHCharacterPlay_GetGameplayInputMode");
static_assert(sizeof(SHCharacterPlay_GetGameplayInputMode) == 0x000001, "Wrong size on SHCharacterPlay_GetGameplayInputMode");
static_assert(offsetof(SHCharacterPlay_GetGameplayInputMode, ReturnValue) == 0x000000, "Member 'SHCharacterPlay_GetGameplayInputMode::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlay.SetCharacterPlayVisibility
// 0x0002 (0x0002 - 0x0000)
struct SHCharacterPlay_SetCharacterPlayVisibility final
{
public:
	bool                                          Hide;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkipFlashlight;                                    // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlay_SetCharacterPlayVisibility) == 0x000001, "Wrong alignment on SHCharacterPlay_SetCharacterPlayVisibility");
static_assert(sizeof(SHCharacterPlay_SetCharacterPlayVisibility) == 0x000002, "Wrong size on SHCharacterPlay_SetCharacterPlayVisibility");
static_assert(offsetof(SHCharacterPlay_SetCharacterPlayVisibility, Hide) == 0x000000, "Member 'SHCharacterPlay_SetCharacterPlayVisibility::Hide' has a wrong offset!");
static_assert(offsetof(SHCharacterPlay_SetCharacterPlayVisibility, SkipFlashlight) == 0x000001, "Member 'SHCharacterPlay_SetCharacterPlayVisibility::SkipFlashlight' has a wrong offset!");

// Function SHProto.SHCharacterPlay.SetGameplayInputMode
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlay_SetGameplayInputMode final
{
public:
	ESHGameplayInputModeEnum                      NewGameplayInputMode;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlay_SetGameplayInputMode) == 0x000001, "Wrong alignment on SHCharacterPlay_SetGameplayInputMode");
static_assert(sizeof(SHCharacterPlay_SetGameplayInputMode) == 0x000001, "Wrong size on SHCharacterPlay_SetGameplayInputMode");
static_assert(offsetof(SHCharacterPlay_SetGameplayInputMode, NewGameplayInputMode) == 0x000000, "Member 'SHCharacterPlay_SetGameplayInputMode::NewGameplayInputMode' has a wrong offset!");

// Function SHProto.SHCharacterPlay.SHDebug_Character_Difficulties_SetCombatDifficulty
// 0x0004 (0x0004 - 0x0000)
struct SHCharacterPlay_SHDebug_Character_Difficulties_SetCombatDifficulty final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlay_SHDebug_Character_Difficulties_SetCombatDifficulty) == 0x000004, "Wrong alignment on SHCharacterPlay_SHDebug_Character_Difficulties_SetCombatDifficulty");
static_assert(sizeof(SHCharacterPlay_SHDebug_Character_Difficulties_SetCombatDifficulty) == 0x000004, "Wrong size on SHCharacterPlay_SHDebug_Character_Difficulties_SetCombatDifficulty");
static_assert(offsetof(SHCharacterPlay_SHDebug_Character_Difficulties_SetCombatDifficulty, InValue) == 0x000000, "Member 'SHCharacterPlay_SHDebug_Character_Difficulties_SetCombatDifficulty::InValue' has a wrong offset!");

// Function SHProto.SHCharacterPlay.SHDebug_Character_Difficulties_SetPuzzlesDifficulty
// 0x0004 (0x0004 - 0x0000)
struct SHCharacterPlay_SHDebug_Character_Difficulties_SetPuzzlesDifficulty final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlay_SHDebug_Character_Difficulties_SetPuzzlesDifficulty) == 0x000004, "Wrong alignment on SHCharacterPlay_SHDebug_Character_Difficulties_SetPuzzlesDifficulty");
static_assert(sizeof(SHCharacterPlay_SHDebug_Character_Difficulties_SetPuzzlesDifficulty) == 0x000004, "Wrong size on SHCharacterPlay_SHDebug_Character_Difficulties_SetPuzzlesDifficulty");
static_assert(offsetof(SHCharacterPlay_SHDebug_Character_Difficulties_SetPuzzlesDifficulty, InValue) == 0x000000, "Member 'SHCharacterPlay_SHDebug_Character_Difficulties_SetPuzzlesDifficulty::InValue' has a wrong offset!");

// Function SHProto.SHCharacterPlay.SHDebug_Custom
// 0x0018 (0x0018 - 0x0000)
struct SHCharacterPlay_SHDebug_Custom final
{
public:
	class FString                                 DebugCommand;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCharacterPlay_SHDebug_Custom) == 0x000008, "Wrong alignment on SHCharacterPlay_SHDebug_Custom");
static_assert(sizeof(SHCharacterPlay_SHDebug_Custom) == 0x000018, "Wrong size on SHCharacterPlay_SHDebug_Custom");
static_assert(offsetof(SHCharacterPlay_SHDebug_Custom, DebugCommand) == 0x000000, "Member 'SHCharacterPlay_SHDebug_Custom::DebugCommand' has a wrong offset!");
static_assert(offsetof(SHCharacterPlay_SHDebug_Custom, Value) == 0x000010, "Member 'SHCharacterPlay_SHDebug_Custom::Value' has a wrong offset!");

// Function SHProto.SHCharacterPlay.SHDebug_Temporal_SetHasEverFinishedGame
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlay_SHDebug_Temporal_SetHasEverFinishedGame final
{
public:
	bool                                          bInValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlay_SHDebug_Temporal_SetHasEverFinishedGame) == 0x000001, "Wrong alignment on SHCharacterPlay_SHDebug_Temporal_SetHasEverFinishedGame");
static_assert(sizeof(SHCharacterPlay_SHDebug_Temporal_SetHasEverFinishedGame) == 0x000001, "Wrong size on SHCharacterPlay_SHDebug_Temporal_SetHasEverFinishedGame");
static_assert(offsetof(SHCharacterPlay_SHDebug_Temporal_SetHasEverFinishedGame, bInValue) == 0x000000, "Member 'SHCharacterPlay_SHDebug_Temporal_SetHasEverFinishedGame::bInValue' has a wrong offset!");

// Function SHProto.SHCharacterPlay.GetAllAttachedActors
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlay_GetAllAttachedActors final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlay_GetAllAttachedActors) == 0x000008, "Wrong alignment on SHCharacterPlay_GetAllAttachedActors");
static_assert(sizeof(SHCharacterPlay_GetAllAttachedActors) == 0x000010, "Wrong size on SHCharacterPlay_GetAllAttachedActors");
static_assert(offsetof(SHCharacterPlay_GetAllAttachedActors, ReturnValue) == 0x000000, "Member 'SHCharacterPlay_GetAllAttachedActors::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlay.HasInputComponent
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlay_HasInputComponent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlay_HasInputComponent) == 0x000001, "Wrong alignment on SHCharacterPlay_HasInputComponent");
static_assert(sizeof(SHCharacterPlay_HasInputComponent) == 0x000001, "Wrong size on SHCharacterPlay_HasInputComponent");
static_assert(offsetof(SHCharacterPlay_HasInputComponent, ReturnValue) == 0x000000, "Member 'SHCharacterPlay_HasInputComponent::ReturnValue' has a wrong offset!");

// Function SHProto.SHAkCharacterAudioComponent.SHDebug_Character_Audio_SetBossState
// 0x0001 (0x0001 - 0x0000)
struct SHAkCharacterAudioComponent_SHDebug_Character_Audio_SetBossState final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAkCharacterAudioComponent_SHDebug_Character_Audio_SetBossState) == 0x000001, "Wrong alignment on SHAkCharacterAudioComponent_SHDebug_Character_Audio_SetBossState");
static_assert(sizeof(SHAkCharacterAudioComponent_SHDebug_Character_Audio_SetBossState) == 0x000001, "Wrong size on SHAkCharacterAudioComponent_SHDebug_Character_Audio_SetBossState");
static_assert(offsetof(SHAkCharacterAudioComponent_SHDebug_Character_Audio_SetBossState, bEnable) == 0x000000, "Member 'SHAkCharacterAudioComponent_SHDebug_Character_Audio_SetBossState::bEnable' has a wrong offset!");

// Function SHProto.SHAkCharacterAudioComponent.SHDebug_Character_Audio_SetCutsceneState
// 0x0001 (0x0001 - 0x0000)
struct SHAkCharacterAudioComponent_SHDebug_Character_Audio_SetCutsceneState final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAkCharacterAudioComponent_SHDebug_Character_Audio_SetCutsceneState) == 0x000001, "Wrong alignment on SHAkCharacterAudioComponent_SHDebug_Character_Audio_SetCutsceneState");
static_assert(sizeof(SHAkCharacterAudioComponent_SHDebug_Character_Audio_SetCutsceneState) == 0x000001, "Wrong size on SHAkCharacterAudioComponent_SHDebug_Character_Audio_SetCutsceneState");
static_assert(offsetof(SHAkCharacterAudioComponent_SHDebug_Character_Audio_SetCutsceneState, bEnable) == 0x000000, "Member 'SHAkCharacterAudioComponent_SHDebug_Character_Audio_SetCutsceneState::bEnable' has a wrong offset!");

// Function SHProto.SHAkCharacterAudioComponent.SHDebug_Character_Audio_SetDangerState
// 0x0004 (0x0004 - 0x0000)
struct SHAkCharacterAudioComponent_SHDebug_Character_Audio_SetDangerState final
{
public:
	int32                                         InDangerMode;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAkCharacterAudioComponent_SHDebug_Character_Audio_SetDangerState) == 0x000004, "Wrong alignment on SHAkCharacterAudioComponent_SHDebug_Character_Audio_SetDangerState");
static_assert(sizeof(SHAkCharacterAudioComponent_SHDebug_Character_Audio_SetDangerState) == 0x000004, "Wrong size on SHAkCharacterAudioComponent_SHDebug_Character_Audio_SetDangerState");
static_assert(offsetof(SHAkCharacterAudioComponent_SHDebug_Character_Audio_SetDangerState, InDangerMode) == 0x000000, "Member 'SHAkCharacterAudioComponent_SHDebug_Character_Audio_SetDangerState::InDangerMode' has a wrong offset!");

// Function SHProto.SHAkCharacterAudioComponent.FindSubcomponentByClass
// 0x0010 (0x0010 - 0x0000)
struct SHAkCharacterAudioComponent_FindSubcomponentByClass final
{
public:
	TSubclassOf<class USHCharacterAudioSubcomponentBase> SubcomponentClass;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USHCharacterAudioSubcomponentBase*      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAkCharacterAudioComponent_FindSubcomponentByClass) == 0x000008, "Wrong alignment on SHAkCharacterAudioComponent_FindSubcomponentByClass");
static_assert(sizeof(SHAkCharacterAudioComponent_FindSubcomponentByClass) == 0x000010, "Wrong size on SHAkCharacterAudioComponent_FindSubcomponentByClass");
static_assert(offsetof(SHAkCharacterAudioComponent_FindSubcomponentByClass, SubcomponentClass) == 0x000000, "Member 'SHAkCharacterAudioComponent_FindSubcomponentByClass::SubcomponentClass' has a wrong offset!");
static_assert(offsetof(SHAkCharacterAudioComponent_FindSubcomponentByClass, ReturnValue) == 0x000008, "Member 'SHAkCharacterAudioComponent_FindSubcomponentByClass::ReturnValue' has a wrong offset!");

// Function SHProto.SHAkComponentsPoolManagerComponent.PostPooledAkEvent
// 0x0020 (0x0020 - 0x0000)
struct SHAkComponentsPoolManagerComponent_PostPooledAkEvent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        InComp;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSocket;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAkComponentsPoolManagerComponent_PostPooledAkEvent) == 0x000008, "Wrong alignment on SHAkComponentsPoolManagerComponent_PostPooledAkEvent");
static_assert(sizeof(SHAkComponentsPoolManagerComponent_PostPooledAkEvent) == 0x000020, "Wrong size on SHAkComponentsPoolManagerComponent_PostPooledAkEvent");
static_assert(offsetof(SHAkComponentsPoolManagerComponent_PostPooledAkEvent, WorldContextObject) == 0x000000, "Member 'SHAkComponentsPoolManagerComponent_PostPooledAkEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHAkComponentsPoolManagerComponent_PostPooledAkEvent, InComp) == 0x000008, "Member 'SHAkComponentsPoolManagerComponent_PostPooledAkEvent::InComp' has a wrong offset!");
static_assert(offsetof(SHAkComponentsPoolManagerComponent_PostPooledAkEvent, InSocket) == 0x000010, "Member 'SHAkComponentsPoolManagerComponent_PostPooledAkEvent::InSocket' has a wrong offset!");
static_assert(offsetof(SHAkComponentsPoolManagerComponent_PostPooledAkEvent, AudioEvent) == 0x000018, "Member 'SHAkComponentsPoolManagerComponent_PostPooledAkEvent::AudioEvent' has a wrong offset!");

// Function SHProto.SHAkDoorBaseComponent.ProcessOnAutoLockedDoorCheckAnimPlayed
// 0x0008 (0x0008 - 0x0000)
struct SHAkDoorBaseComponent_ProcessOnAutoLockedDoorCheckAnimPlayed final
{
public:
	class USHDoorAnimationsComponent*             DoorAnimComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAkDoorBaseComponent_ProcessOnAutoLockedDoorCheckAnimPlayed) == 0x000008, "Wrong alignment on SHAkDoorBaseComponent_ProcessOnAutoLockedDoorCheckAnimPlayed");
static_assert(sizeof(SHAkDoorBaseComponent_ProcessOnAutoLockedDoorCheckAnimPlayed) == 0x000008, "Wrong size on SHAkDoorBaseComponent_ProcessOnAutoLockedDoorCheckAnimPlayed");
static_assert(offsetof(SHAkDoorBaseComponent_ProcessOnAutoLockedDoorCheckAnimPlayed, DoorAnimComponent) == 0x000000, "Member 'SHAkDoorBaseComponent_ProcessOnAutoLockedDoorCheckAnimPlayed::DoorAnimComponent' has a wrong offset!");

// Function SHProto.SHAkDoorBaseComponent.ProcessOnDoorLockStateChanged
// 0x0008 (0x0008 - 0x0000)
struct SHAkDoorBaseComponent_ProcessOnDoorLockStateChanged final
{
public:
	class USHDoorLockBaseComponent*               LockComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAkDoorBaseComponent_ProcessOnDoorLockStateChanged) == 0x000008, "Wrong alignment on SHAkDoorBaseComponent_ProcessOnDoorLockStateChanged");
static_assert(sizeof(SHAkDoorBaseComponent_ProcessOnDoorLockStateChanged) == 0x000008, "Wrong size on SHAkDoorBaseComponent_ProcessOnDoorLockStateChanged");
static_assert(offsetof(SHAkDoorBaseComponent_ProcessOnDoorLockStateChanged, LockComponent) == 0x000000, "Member 'SHAkDoorBaseComponent_ProcessOnDoorLockStateChanged::LockComponent' has a wrong offset!");

// Function SHProto.SHAkDoorBaseComponent.ProcessOnLockAnimPlayed
// 0x0008 (0x0008 - 0x0000)
struct SHAkDoorBaseComponent_ProcessOnLockAnimPlayed final
{
public:
	class USHDoorAnimationsComponent*             DoorAnimComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAkDoorBaseComponent_ProcessOnLockAnimPlayed) == 0x000008, "Wrong alignment on SHAkDoorBaseComponent_ProcessOnLockAnimPlayed");
static_assert(sizeof(SHAkDoorBaseComponent_ProcessOnLockAnimPlayed) == 0x000008, "Wrong size on SHAkDoorBaseComponent_ProcessOnLockAnimPlayed");
static_assert(offsetof(SHAkDoorBaseComponent_ProcessOnLockAnimPlayed, DoorAnimComponent) == 0x000000, "Member 'SHAkDoorBaseComponent_ProcessOnLockAnimPlayed::DoorAnimComponent' has a wrong offset!");

// DelegateFunction SHProto.SHPOVDetectorComponent.PointsAligned__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct SHPOVDetectorComponent_PointsAligned__DelegateSignature final
{
public:
	bool                                          Aligned;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPOVDetectorComponent_PointsAligned__DelegateSignature) == 0x000001, "Wrong alignment on SHPOVDetectorComponent_PointsAligned__DelegateSignature");
static_assert(sizeof(SHPOVDetectorComponent_PointsAligned__DelegateSignature) == 0x000001, "Wrong size on SHPOVDetectorComponent_PointsAligned__DelegateSignature");
static_assert(offsetof(SHPOVDetectorComponent_PointsAligned__DelegateSignature, Aligned) == 0x000000, "Member 'SHPOVDetectorComponent_PointsAligned__DelegateSignature::Aligned' has a wrong offset!");

// Function SHProto.SHPOVDetectorComponent.SetLinePoints
// 0x0018 (0x0018 - 0x0000)
struct SHPOVDetectorComponent_SetLinePoints final
{
public:
	const class USceneComponent*                  Point0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USceneComponent*                  Point1;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USceneComponent*                  Point2;                                            // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPOVDetectorComponent_SetLinePoints) == 0x000008, "Wrong alignment on SHPOVDetectorComponent_SetLinePoints");
static_assert(sizeof(SHPOVDetectorComponent_SetLinePoints) == 0x000018, "Wrong size on SHPOVDetectorComponent_SetLinePoints");
static_assert(offsetof(SHPOVDetectorComponent_SetLinePoints, Point0) == 0x000000, "Member 'SHPOVDetectorComponent_SetLinePoints::Point0' has a wrong offset!");
static_assert(offsetof(SHPOVDetectorComponent_SetLinePoints, Point1) == 0x000008, "Member 'SHPOVDetectorComponent_SetLinePoints::Point1' has a wrong offset!");
static_assert(offsetof(SHPOVDetectorComponent_SetLinePoints, Point2) == 0x000010, "Member 'SHPOVDetectorComponent_SetLinePoints::Point2' has a wrong offset!");

// Function SHProto.SHPOVDetectorComponent.SetManyProximityPoints
// 0x0010 (0x0010 - 0x0000)
struct SHPOVDetectorComponent_SetManyProximityPoints final
{
public:
	TArray<class USceneComponent*>                NewPoints;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPOVDetectorComponent_SetManyProximityPoints) == 0x000008, "Wrong alignment on SHPOVDetectorComponent_SetManyProximityPoints");
static_assert(sizeof(SHPOVDetectorComponent_SetManyProximityPoints) == 0x000010, "Wrong size on SHPOVDetectorComponent_SetManyProximityPoints");
static_assert(offsetof(SHPOVDetectorComponent_SetManyProximityPoints, NewPoints) == 0x000000, "Member 'SHPOVDetectorComponent_SetManyProximityPoints::NewPoints' has a wrong offset!");

// Function SHProto.SHPOVDetectorComponent.SetProximityPoints
// 0x0010 (0x0010 - 0x0000)
struct SHPOVDetectorComponent_SetProximityPoints final
{
public:
	const class USceneComponent*                  Point0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USceneComponent*                  Point1;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPOVDetectorComponent_SetProximityPoints) == 0x000008, "Wrong alignment on SHPOVDetectorComponent_SetProximityPoints");
static_assert(sizeof(SHPOVDetectorComponent_SetProximityPoints) == 0x000010, "Wrong size on SHPOVDetectorComponent_SetProximityPoints");
static_assert(offsetof(SHPOVDetectorComponent_SetProximityPoints, Point0) == 0x000000, "Member 'SHPOVDetectorComponent_SetProximityPoints::Point0' has a wrong offset!");
static_assert(offsetof(SHPOVDetectorComponent_SetProximityPoints, Point1) == 0x000008, "Member 'SHPOVDetectorComponent_SetProximityPoints::Point1' has a wrong offset!");

// Function SHProto.SHPOVDetectorComponent.ArePointsAligned
// 0x0001 (0x0001 - 0x0000)
struct SHPOVDetectorComponent_ArePointsAligned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPOVDetectorComponent_ArePointsAligned) == 0x000001, "Wrong alignment on SHPOVDetectorComponent_ArePointsAligned");
static_assert(sizeof(SHPOVDetectorComponent_ArePointsAligned) == 0x000001, "Wrong size on SHPOVDetectorComponent_ArePointsAligned");
static_assert(offsetof(SHPOVDetectorComponent_ArePointsAligned, ReturnValue) == 0x000000, "Member 'SHPOVDetectorComponent_ArePointsAligned::ReturnValue' has a wrong offset!");

// Function SHProto.SHAkDoorComponent.ProcessDoorFakeMovementComplete
// 0x0008 (0x0008 - 0x0000)
struct SHAkDoorComponent_ProcessDoorFakeMovementComplete final
{
public:
	class USHDoorMovementComponent*               MovementComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAkDoorComponent_ProcessDoorFakeMovementComplete) == 0x000008, "Wrong alignment on SHAkDoorComponent_ProcessDoorFakeMovementComplete");
static_assert(sizeof(SHAkDoorComponent_ProcessDoorFakeMovementComplete) == 0x000008, "Wrong size on SHAkDoorComponent_ProcessDoorFakeMovementComplete");
static_assert(offsetof(SHAkDoorComponent_ProcessDoorFakeMovementComplete, MovementComponent) == 0x000000, "Member 'SHAkDoorComponent_ProcessDoorFakeMovementComplete::MovementComponent' has a wrong offset!");

// Function SHProto.SHAkDoorComponent.ProcessDoorFakeMovementInterupted
// 0x0008 (0x0008 - 0x0000)
struct SHAkDoorComponent_ProcessDoorFakeMovementInterupted final
{
public:
	class USHDoorMovementComponent*               MovementComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAkDoorComponent_ProcessDoorFakeMovementInterupted) == 0x000008, "Wrong alignment on SHAkDoorComponent_ProcessDoorFakeMovementInterupted");
static_assert(sizeof(SHAkDoorComponent_ProcessDoorFakeMovementInterupted) == 0x000008, "Wrong size on SHAkDoorComponent_ProcessDoorFakeMovementInterupted");
static_assert(offsetof(SHAkDoorComponent_ProcessDoorFakeMovementInterupted, MovementComponent) == 0x000000, "Member 'SHAkDoorComponent_ProcessDoorFakeMovementInterupted::MovementComponent' has a wrong offset!");

// Function SHProto.SHAkDoorComponent.ProcessDoorFakeMovementStart
// 0x0008 (0x0008 - 0x0000)
struct SHAkDoorComponent_ProcessDoorFakeMovementStart final
{
public:
	class USHDoorMovementComponent*               MovementComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAkDoorComponent_ProcessDoorFakeMovementStart) == 0x000008, "Wrong alignment on SHAkDoorComponent_ProcessDoorFakeMovementStart");
static_assert(sizeof(SHAkDoorComponent_ProcessDoorFakeMovementStart) == 0x000008, "Wrong size on SHAkDoorComponent_ProcessDoorFakeMovementStart");
static_assert(offsetof(SHAkDoorComponent_ProcessDoorFakeMovementStart, MovementComponent) == 0x000000, "Member 'SHAkDoorComponent_ProcessDoorFakeMovementStart::MovementComponent' has a wrong offset!");

// Function SHProto.SHAkDoorComponent.ProcessDoorPhysicMovementComplete
// 0x0008 (0x0008 - 0x0000)
struct SHAkDoorComponent_ProcessDoorPhysicMovementComplete final
{
public:
	class USHDoorMovementComponent*               MovementComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAkDoorComponent_ProcessDoorPhysicMovementComplete) == 0x000008, "Wrong alignment on SHAkDoorComponent_ProcessDoorPhysicMovementComplete");
static_assert(sizeof(SHAkDoorComponent_ProcessDoorPhysicMovementComplete) == 0x000008, "Wrong size on SHAkDoorComponent_ProcessDoorPhysicMovementComplete");
static_assert(offsetof(SHAkDoorComponent_ProcessDoorPhysicMovementComplete, MovementComponent) == 0x000000, "Member 'SHAkDoorComponent_ProcessDoorPhysicMovementComplete::MovementComponent' has a wrong offset!");

// Function SHProto.SHAkDoorComponent.ProcessDoorPhysicMovementInterupted
// 0x0008 (0x0008 - 0x0000)
struct SHAkDoorComponent_ProcessDoorPhysicMovementInterupted final
{
public:
	class USHDoorMovementComponent*               MovementComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAkDoorComponent_ProcessDoorPhysicMovementInterupted) == 0x000008, "Wrong alignment on SHAkDoorComponent_ProcessDoorPhysicMovementInterupted");
static_assert(sizeof(SHAkDoorComponent_ProcessDoorPhysicMovementInterupted) == 0x000008, "Wrong size on SHAkDoorComponent_ProcessDoorPhysicMovementInterupted");
static_assert(offsetof(SHAkDoorComponent_ProcessDoorPhysicMovementInterupted, MovementComponent) == 0x000000, "Member 'SHAkDoorComponent_ProcessDoorPhysicMovementInterupted::MovementComponent' has a wrong offset!");

// Function SHProto.SHAkDoorComponent.ProcessDoorPhysicMovementStart
// 0x0008 (0x0008 - 0x0000)
struct SHAkDoorComponent_ProcessDoorPhysicMovementStart final
{
public:
	class USHDoorMovementComponent*               MovementComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAkDoorComponent_ProcessDoorPhysicMovementStart) == 0x000008, "Wrong alignment on SHAkDoorComponent_ProcessDoorPhysicMovementStart");
static_assert(sizeof(SHAkDoorComponent_ProcessDoorPhysicMovementStart) == 0x000008, "Wrong size on SHAkDoorComponent_ProcessDoorPhysicMovementStart");
static_assert(offsetof(SHAkDoorComponent_ProcessDoorPhysicMovementStart, MovementComponent) == 0x000000, "Member 'SHAkDoorComponent_ProcessDoorPhysicMovementStart::MovementComponent' has a wrong offset!");

// Function SHProto.SHAkDoorComponent.ProcessDoorSmashOpened
// 0x0008 (0x0008 - 0x0000)
struct SHAkDoorComponent_ProcessDoorSmashOpened final
{
public:
	class USHDoorMovementComponent*               MovementComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAkDoorComponent_ProcessDoorSmashOpened) == 0x000008, "Wrong alignment on SHAkDoorComponent_ProcessDoorSmashOpened");
static_assert(sizeof(SHAkDoorComponent_ProcessDoorSmashOpened) == 0x000008, "Wrong size on SHAkDoorComponent_ProcessDoorSmashOpened");
static_assert(offsetof(SHAkDoorComponent_ProcessDoorSmashOpened, MovementComponent) == 0x000000, "Member 'SHAkDoorComponent_ProcessDoorSmashOpened::MovementComponent' has a wrong offset!");

// Function SHProto.SHAkDoorComponent.ProcessOnDoorAngleChanged
// 0x0008 (0x0008 - 0x0000)
struct SHAkDoorComponent_ProcessOnDoorAngleChanged final
{
public:
	class USHDoorMovementComponent*               MovementComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAkDoorComponent_ProcessOnDoorAngleChanged) == 0x000008, "Wrong alignment on SHAkDoorComponent_ProcessOnDoorAngleChanged");
static_assert(sizeof(SHAkDoorComponent_ProcessOnDoorAngleChanged) == 0x000008, "Wrong size on SHAkDoorComponent_ProcessOnDoorAngleChanged");
static_assert(offsetof(SHAkDoorComponent_ProcessOnDoorAngleChanged, MovementComponent) == 0x000000, "Member 'SHAkDoorComponent_ProcessOnDoorAngleChanged::MovementComponent' has a wrong offset!");

// Function SHProto.SHAkDoorComponent.RequestBlockAudio
// 0x0010 (0x0010 - 0x0000)
struct SHAkDoorComponent_RequestBlockAudio final
{
public:
	bool                                          bLock;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAkDoorComponent_RequestBlockAudio) == 0x000008, "Wrong alignment on SHAkDoorComponent_RequestBlockAudio");
static_assert(sizeof(SHAkDoorComponent_RequestBlockAudio) == 0x000010, "Wrong size on SHAkDoorComponent_RequestBlockAudio");
static_assert(offsetof(SHAkDoorComponent_RequestBlockAudio, bLock) == 0x000000, "Member 'SHAkDoorComponent_RequestBlockAudio::bLock' has a wrong offset!");
static_assert(offsetof(SHAkDoorComponent_RequestBlockAudio, Object) == 0x000008, "Member 'SHAkDoorComponent_RequestBlockAudio::Object' has a wrong offset!");

// Function SHProto.SHAkDoorComponent.IsAudioBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHAkDoorComponent_IsAudioBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAkDoorComponent_IsAudioBlocked) == 0x000001, "Wrong alignment on SHAkDoorComponent_IsAudioBlocked");
static_assert(sizeof(SHAkDoorComponent_IsAudioBlocked) == 0x000001, "Wrong size on SHAkDoorComponent_IsAudioBlocked");
static_assert(offsetof(SHAkDoorComponent_IsAudioBlocked, ReturnValue) == 0x000000, "Member 'SHAkDoorComponent_IsAudioBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHElevatorEngine.AddOrder
// 0x0004 (0x0004 - 0x0000)
struct SHElevatorEngine_AddOrder final
{
public:
	int32                                         FloorOrder;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHElevatorEngine_AddOrder) == 0x000004, "Wrong alignment on SHElevatorEngine_AddOrder");
static_assert(sizeof(SHElevatorEngine_AddOrder) == 0x000004, "Wrong size on SHElevatorEngine_AddOrder");
static_assert(offsetof(SHElevatorEngine_AddOrder, FloorOrder) == 0x000000, "Member 'SHElevatorEngine_AddOrder::FloorOrder' has a wrong offset!");

// Function SHProto.SHElevatorEngine.AreDoorsBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHElevatorEngine_AreDoorsBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHElevatorEngine_AreDoorsBlocked) == 0x000001, "Wrong alignment on SHElevatorEngine_AreDoorsBlocked");
static_assert(sizeof(SHElevatorEngine_AreDoorsBlocked) == 0x000001, "Wrong size on SHElevatorEngine_AreDoorsBlocked");
static_assert(offsetof(SHElevatorEngine_AreDoorsBlocked, ReturnValue) == 0x000000, "Member 'SHElevatorEngine_AreDoorsBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHElevatorEngine.IsInteriorReady
// 0x0001 (0x0001 - 0x0000)
struct SHElevatorEngine_IsInteriorReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHElevatorEngine_IsInteriorReady) == 0x000001, "Wrong alignment on SHElevatorEngine_IsInteriorReady");
static_assert(sizeof(SHElevatorEngine_IsInteriorReady) == 0x000001, "Wrong size on SHElevatorEngine_IsInteriorReady");
static_assert(offsetof(SHElevatorEngine_IsInteriorReady, ReturnValue) == 0x000000, "Member 'SHElevatorEngine_IsInteriorReady::ReturnValue' has a wrong offset!");

// Function SHProto.SHElevatorEngine.ProcessDoorAlphaChanged
// 0x0004 (0x0004 - 0x0000)
struct SHElevatorEngine_ProcessDoorAlphaChanged final
{
public:
	float                                         ALPHA;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHElevatorEngine_ProcessDoorAlphaChanged) == 0x000004, "Wrong alignment on SHElevatorEngine_ProcessDoorAlphaChanged");
static_assert(sizeof(SHElevatorEngine_ProcessDoorAlphaChanged) == 0x000004, "Wrong size on SHElevatorEngine_ProcessDoorAlphaChanged");
static_assert(offsetof(SHElevatorEngine_ProcessDoorAlphaChanged, ALPHA) == 0x000000, "Member 'SHElevatorEngine_ProcessDoorAlphaChanged::ALPHA' has a wrong offset!");

// Function SHProto.SHElevatorEngine.RequestDoorClose
// 0x0002 (0x0002 - 0x0000)
struct SHElevatorEngine_RequestDoorClose final
{
public:
	bool                                          bInInstant;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHElevatorEngine_RequestDoorClose) == 0x000001, "Wrong alignment on SHElevatorEngine_RequestDoorClose");
static_assert(sizeof(SHElevatorEngine_RequestDoorClose) == 0x000002, "Wrong size on SHElevatorEngine_RequestDoorClose");
static_assert(offsetof(SHElevatorEngine_RequestDoorClose, bInInstant) == 0x000000, "Member 'SHElevatorEngine_RequestDoorClose::bInInstant' has a wrong offset!");
static_assert(offsetof(SHElevatorEngine_RequestDoorClose, ReturnValue) == 0x000001, "Member 'SHElevatorEngine_RequestDoorClose::ReturnValue' has a wrong offset!");

// Function SHProto.SHElevatorEngine.RequestDoorCustom
// 0x0008 (0x0008 - 0x0000)
struct SHElevatorEngine_RequestDoorCustom final
{
public:
	float                                         CustomOpenessAlpha;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInInstant;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHElevatorEngine_RequestDoorCustom) == 0x000004, "Wrong alignment on SHElevatorEngine_RequestDoorCustom");
static_assert(sizeof(SHElevatorEngine_RequestDoorCustom) == 0x000008, "Wrong size on SHElevatorEngine_RequestDoorCustom");
static_assert(offsetof(SHElevatorEngine_RequestDoorCustom, CustomOpenessAlpha) == 0x000000, "Member 'SHElevatorEngine_RequestDoorCustom::CustomOpenessAlpha' has a wrong offset!");
static_assert(offsetof(SHElevatorEngine_RequestDoorCustom, bInInstant) == 0x000004, "Member 'SHElevatorEngine_RequestDoorCustom::bInInstant' has a wrong offset!");
static_assert(offsetof(SHElevatorEngine_RequestDoorCustom, ReturnValue) == 0x000005, "Member 'SHElevatorEngine_RequestDoorCustom::ReturnValue' has a wrong offset!");

// Function SHProto.SHElevatorEngine.RequestDoorOpen
// 0x0002 (0x0002 - 0x0000)
struct SHElevatorEngine_RequestDoorOpen final
{
public:
	bool                                          bInInstant;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHElevatorEngine_RequestDoorOpen) == 0x000001, "Wrong alignment on SHElevatorEngine_RequestDoorOpen");
static_assert(sizeof(SHElevatorEngine_RequestDoorOpen) == 0x000002, "Wrong size on SHElevatorEngine_RequestDoorOpen");
static_assert(offsetof(SHElevatorEngine_RequestDoorOpen, bInInstant) == 0x000000, "Member 'SHElevatorEngine_RequestDoorOpen::bInInstant' has a wrong offset!");
static_assert(offsetof(SHElevatorEngine_RequestDoorOpen, ReturnValue) == 0x000001, "Member 'SHElevatorEngine_RequestDoorOpen::ReturnValue' has a wrong offset!");

// Function SHProto.SHElevatorEngine.SetCloseDoorsBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHElevatorEngine_SetCloseDoorsBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHElevatorEngine_SetCloseDoorsBlocked) == 0x000008, "Wrong alignment on SHElevatorEngine_SetCloseDoorsBlocked");
static_assert(sizeof(SHElevatorEngine_SetCloseDoorsBlocked) == 0x000010, "Wrong size on SHElevatorEngine_SetCloseDoorsBlocked");
static_assert(offsetof(SHElevatorEngine_SetCloseDoorsBlocked, Blocked) == 0x000000, "Member 'SHElevatorEngine_SetCloseDoorsBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHElevatorEngine_SetCloseDoorsBlocked, Object) == 0x000008, "Member 'SHElevatorEngine_SetCloseDoorsBlocked::Object' has a wrong offset!");

// Function SHProto.SHElevatorEngine.SetReceiveOrdersBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHElevatorEngine_SetReceiveOrdersBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHElevatorEngine_SetReceiveOrdersBlocked) == 0x000008, "Wrong alignment on SHElevatorEngine_SetReceiveOrdersBlocked");
static_assert(sizeof(SHElevatorEngine_SetReceiveOrdersBlocked) == 0x000010, "Wrong size on SHElevatorEngine_SetReceiveOrdersBlocked");
static_assert(offsetof(SHElevatorEngine_SetReceiveOrdersBlocked, Blocked) == 0x000000, "Member 'SHElevatorEngine_SetReceiveOrdersBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHElevatorEngine_SetReceiveOrdersBlocked, Object) == 0x000008, "Member 'SHElevatorEngine_SetReceiveOrdersBlocked::Object' has a wrong offset!");

// DelegateFunction SHProto.SHElevatorEngine.SHElevatorEngineBaseEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHElevatorEngine_SHElevatorEngineBaseEvent__DelegateSignature final
{
public:
	class ASHElevatorEngine*                      ElevatorEngine;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHElevatorEngine_SHElevatorEngineBaseEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHElevatorEngine_SHElevatorEngineBaseEvent__DelegateSignature");
static_assert(sizeof(SHElevatorEngine_SHElevatorEngineBaseEvent__DelegateSignature) == 0x000008, "Wrong size on SHElevatorEngine_SHElevatorEngineBaseEvent__DelegateSignature");
static_assert(offsetof(SHElevatorEngine_SHElevatorEngineBaseEvent__DelegateSignature, ElevatorEngine) == 0x000000, "Member 'SHElevatorEngine_SHElevatorEngineBaseEvent__DelegateSignature::ElevatorEngine' has a wrong offset!");

// DelegateFunction SHProto.SHElevatorEngine.SHElevatorEngineFloatEvent__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct SHElevatorEngine_SHElevatorEngineFloatEvent__DelegateSignature final
{
public:
	class ASHElevatorEngine*                      ElevatorEngine;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHElevatorEngine_SHElevatorEngineFloatEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHElevatorEngine_SHElevatorEngineFloatEvent__DelegateSignature");
static_assert(sizeof(SHElevatorEngine_SHElevatorEngineFloatEvent__DelegateSignature) == 0x000010, "Wrong size on SHElevatorEngine_SHElevatorEngineFloatEvent__DelegateSignature");
static_assert(offsetof(SHElevatorEngine_SHElevatorEngineFloatEvent__DelegateSignature, ElevatorEngine) == 0x000000, "Member 'SHElevatorEngine_SHElevatorEngineFloatEvent__DelegateSignature::ElevatorEngine' has a wrong offset!");
static_assert(offsetof(SHElevatorEngine_SHElevatorEngineFloatEvent__DelegateSignature, Value) == 0x000008, "Member 'SHElevatorEngine_SHElevatorEngineFloatEvent__DelegateSignature::Value' has a wrong offset!");

// Function SHProto.SHElevatorEngine.GetActiveOrder
// 0x000C (0x000C - 0x0000)
struct SHElevatorEngine_GetActiveOrder final
{
public:
	struct FSHElevatorOrderData                   ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHElevatorEngine_GetActiveOrder) == 0x000004, "Wrong alignment on SHElevatorEngine_GetActiveOrder");
static_assert(sizeof(SHElevatorEngine_GetActiveOrder) == 0x00000C, "Wrong size on SHElevatorEngine_GetActiveOrder");
static_assert(offsetof(SHElevatorEngine_GetActiveOrder, ReturnValue) == 0x000000, "Member 'SHElevatorEngine_GetActiveOrder::ReturnValue' has a wrong offset!");

// Function SHProto.SHElevatorEngine.GetBackDoorsPivot
// 0x0008 (0x0008 - 0x0000)
struct SHElevatorEngine_GetBackDoorsPivot final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHElevatorEngine_GetBackDoorsPivot) == 0x000008, "Wrong alignment on SHElevatorEngine_GetBackDoorsPivot");
static_assert(sizeof(SHElevatorEngine_GetBackDoorsPivot) == 0x000008, "Wrong size on SHElevatorEngine_GetBackDoorsPivot");
static_assert(offsetof(SHElevatorEngine_GetBackDoorsPivot, ReturnValue) == 0x000000, "Member 'SHElevatorEngine_GetBackDoorsPivot::ReturnValue' has a wrong offset!");

// Function SHProto.SHElevatorEngine.GetCurrentDisplayFloor
// 0x0004 (0x0004 - 0x0000)
struct SHElevatorEngine_GetCurrentDisplayFloor final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHElevatorEngine_GetCurrentDisplayFloor) == 0x000004, "Wrong alignment on SHElevatorEngine_GetCurrentDisplayFloor");
static_assert(sizeof(SHElevatorEngine_GetCurrentDisplayFloor) == 0x000004, "Wrong size on SHElevatorEngine_GetCurrentDisplayFloor");
static_assert(offsetof(SHElevatorEngine_GetCurrentDisplayFloor, ReturnValue) == 0x000000, "Member 'SHElevatorEngine_GetCurrentDisplayFloor::ReturnValue' has a wrong offset!");

// Function SHProto.SHElevatorEngine.GetCurrentFloor
// 0x0004 (0x0004 - 0x0000)
struct SHElevatorEngine_GetCurrentFloor final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHElevatorEngine_GetCurrentFloor) == 0x000004, "Wrong alignment on SHElevatorEngine_GetCurrentFloor");
static_assert(sizeof(SHElevatorEngine_GetCurrentFloor) == 0x000004, "Wrong size on SHElevatorEngine_GetCurrentFloor");
static_assert(offsetof(SHElevatorEngine_GetCurrentFloor, ReturnValue) == 0x000000, "Member 'SHElevatorEngine_GetCurrentFloor::ReturnValue' has a wrong offset!");

// Function SHProto.SHElevatorEngine.GetFrontDoorsPivot
// 0x0008 (0x0008 - 0x0000)
struct SHElevatorEngine_GetFrontDoorsPivot final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHElevatorEngine_GetFrontDoorsPivot) == 0x000008, "Wrong alignment on SHElevatorEngine_GetFrontDoorsPivot");
static_assert(sizeof(SHElevatorEngine_GetFrontDoorsPivot) == 0x000008, "Wrong size on SHElevatorEngine_GetFrontDoorsPivot");
static_assert(offsetof(SHElevatorEngine_GetFrontDoorsPivot, ReturnValue) == 0x000000, "Member 'SHElevatorEngine_GetFrontDoorsPivot::ReturnValue' has a wrong offset!");

// Function SHProto.SHElevatorEngine.GetOrdersQueue
// 0x0010 (0x0010 - 0x0000)
struct SHElevatorEngine_GetOrdersQueue final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHElevatorEngine_GetOrdersQueue) == 0x000008, "Wrong alignment on SHElevatorEngine_GetOrdersQueue");
static_assert(sizeof(SHElevatorEngine_GetOrdersQueue) == 0x000010, "Wrong size on SHElevatorEngine_GetOrdersQueue");
static_assert(offsetof(SHElevatorEngine_GetOrdersQueue, ReturnValue) == 0x000000, "Member 'SHElevatorEngine_GetOrdersQueue::ReturnValue' has a wrong offset!");

// Function SHProto.SHElevatorEngine.HasActiveOrder
// 0x0001 (0x0001 - 0x0000)
struct SHElevatorEngine_HasActiveOrder final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHElevatorEngine_HasActiveOrder) == 0x000001, "Wrong alignment on SHElevatorEngine_HasActiveOrder");
static_assert(sizeof(SHElevatorEngine_HasActiveOrder) == 0x000001, "Wrong size on SHElevatorEngine_HasActiveOrder");
static_assert(offsetof(SHElevatorEngine_HasActiveOrder, ReturnValue) == 0x000000, "Member 'SHElevatorEngine_HasActiveOrder::ReturnValue' has a wrong offset!");

// Function SHProto.SHElevatorEngine.IsCloseDoorsBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHElevatorEngine_IsCloseDoorsBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHElevatorEngine_IsCloseDoorsBlocked) == 0x000001, "Wrong alignment on SHElevatorEngine_IsCloseDoorsBlocked");
static_assert(sizeof(SHElevatorEngine_IsCloseDoorsBlocked) == 0x000001, "Wrong size on SHElevatorEngine_IsCloseDoorsBlocked");
static_assert(offsetof(SHElevatorEngine_IsCloseDoorsBlocked, ReturnValue) == 0x000000, "Member 'SHElevatorEngine_IsCloseDoorsBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHElevatorEngine.IsDoorClosed
// 0x0001 (0x0001 - 0x0000)
struct SHElevatorEngine_IsDoorClosed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHElevatorEngine_IsDoorClosed) == 0x000001, "Wrong alignment on SHElevatorEngine_IsDoorClosed");
static_assert(sizeof(SHElevatorEngine_IsDoorClosed) == 0x000001, "Wrong size on SHElevatorEngine_IsDoorClosed");
static_assert(offsetof(SHElevatorEngine_IsDoorClosed, ReturnValue) == 0x000000, "Member 'SHElevatorEngine_IsDoorClosed::ReturnValue' has a wrong offset!");

// Function SHProto.SHElevatorEngine.IsDoorOpened
// 0x0001 (0x0001 - 0x0000)
struct SHElevatorEngine_IsDoorOpened final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHElevatorEngine_IsDoorOpened) == 0x000001, "Wrong alignment on SHElevatorEngine_IsDoorOpened");
static_assert(sizeof(SHElevatorEngine_IsDoorOpened) == 0x000001, "Wrong size on SHElevatorEngine_IsDoorOpened");
static_assert(offsetof(SHElevatorEngine_IsDoorOpened, ReturnValue) == 0x000000, "Member 'SHElevatorEngine_IsDoorOpened::ReturnValue' has a wrong offset!");

// Function SHProto.SHElevatorEngine.IsKeepingDoorStayOpened
// 0x0001 (0x0001 - 0x0000)
struct SHElevatorEngine_IsKeepingDoorStayOpened final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHElevatorEngine_IsKeepingDoorStayOpened) == 0x000001, "Wrong alignment on SHElevatorEngine_IsKeepingDoorStayOpened");
static_assert(sizeof(SHElevatorEngine_IsKeepingDoorStayOpened) == 0x000001, "Wrong size on SHElevatorEngine_IsKeepingDoorStayOpened");
static_assert(offsetof(SHElevatorEngine_IsKeepingDoorStayOpened, ReturnValue) == 0x000000, "Member 'SHElevatorEngine_IsKeepingDoorStayOpened::ReturnValue' has a wrong offset!");

// Function SHProto.SHElevatorEngine.IsPawnInElevator
// 0x0010 (0x0010 - 0x0000)
struct SHElevatorEngine_IsPawnInElevator final
{
public:
	class APawn*                                  InCheckedPawn;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHElevatorEngine_IsPawnInElevator) == 0x000008, "Wrong alignment on SHElevatorEngine_IsPawnInElevator");
static_assert(sizeof(SHElevatorEngine_IsPawnInElevator) == 0x000010, "Wrong size on SHElevatorEngine_IsPawnInElevator");
static_assert(offsetof(SHElevatorEngine_IsPawnInElevator, InCheckedPawn) == 0x000000, "Member 'SHElevatorEngine_IsPawnInElevator::InCheckedPawn' has a wrong offset!");
static_assert(offsetof(SHElevatorEngine_IsPawnInElevator, ReturnValue) == 0x000008, "Member 'SHElevatorEngine_IsPawnInElevator::ReturnValue' has a wrong offset!");

// Function SHProto.SHElevatorEngine.IsReceiveOrdersBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHElevatorEngine_IsReceiveOrdersBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHElevatorEngine_IsReceiveOrdersBlocked) == 0x000001, "Wrong alignment on SHElevatorEngine_IsReceiveOrdersBlocked");
static_assert(sizeof(SHElevatorEngine_IsReceiveOrdersBlocked) == 0x000001, "Wrong size on SHElevatorEngine_IsReceiveOrdersBlocked");
static_assert(offsetof(SHElevatorEngine_IsReceiveOrdersBlocked, ReturnValue) == 0x000000, "Member 'SHElevatorEngine_IsReceiveOrdersBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHElevatorEngine.TraceForBlockedDoor
// 0x0028 (0x0028 - 0x0000)
struct SHElevatorEngine_TraceForBlockedDoor final
{
public:
	float                                         InDoorOpenOffset;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTraceSphereRadius;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InPivotWorldOffset;                                // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHElevatorEngine_TraceForBlockedDoor) == 0x000008, "Wrong alignment on SHElevatorEngine_TraceForBlockedDoor");
static_assert(sizeof(SHElevatorEngine_TraceForBlockedDoor) == 0x000028, "Wrong size on SHElevatorEngine_TraceForBlockedDoor");
static_assert(offsetof(SHElevatorEngine_TraceForBlockedDoor, InDoorOpenOffset) == 0x000000, "Member 'SHElevatorEngine_TraceForBlockedDoor::InDoorOpenOffset' has a wrong offset!");
static_assert(offsetof(SHElevatorEngine_TraceForBlockedDoor, InTraceSphereRadius) == 0x000004, "Member 'SHElevatorEngine_TraceForBlockedDoor::InTraceSphereRadius' has a wrong offset!");
static_assert(offsetof(SHElevatorEngine_TraceForBlockedDoor, InPivotWorldOffset) == 0x000008, "Member 'SHElevatorEngine_TraceForBlockedDoor::InPivotWorldOffset' has a wrong offset!");
static_assert(offsetof(SHElevatorEngine_TraceForBlockedDoor, ReturnValue) == 0x000020, "Member 'SHElevatorEngine_TraceForBlockedDoor::ReturnValue' has a wrong offset!");

// Function SHProto.SHElevatorFloorDoor.HandleDoorAlphaChanged
// 0x0010 (0x0010 - 0x0000)
struct SHElevatorFloorDoor_HandleDoorAlphaChanged final
{
public:
	class ASHElevatorEngine*                      InElevatorEnginePtr;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHElevatorFloorDoor_HandleDoorAlphaChanged) == 0x000008, "Wrong alignment on SHElevatorFloorDoor_HandleDoorAlphaChanged");
static_assert(sizeof(SHElevatorFloorDoor_HandleDoorAlphaChanged) == 0x000010, "Wrong size on SHElevatorFloorDoor_HandleDoorAlphaChanged");
static_assert(offsetof(SHElevatorFloorDoor_HandleDoorAlphaChanged, InElevatorEnginePtr) == 0x000000, "Member 'SHElevatorFloorDoor_HandleDoorAlphaChanged::InElevatorEnginePtr' has a wrong offset!");
static_assert(offsetof(SHElevatorFloorDoor_HandleDoorAlphaChanged, Value) == 0x000008, "Member 'SHElevatorFloorDoor_HandleDoorAlphaChanged::Value' has a wrong offset!");

// Function SHProto.SHElevatorFloorDoor.HandleDoorCollisionInterupted
// 0x0008 (0x0008 - 0x0000)
struct SHElevatorFloorDoor_HandleDoorCollisionInterupted final
{
public:
	class ASHElevatorEngine*                      InElevatorEnginePtr;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHElevatorFloorDoor_HandleDoorCollisionInterupted) == 0x000008, "Wrong alignment on SHElevatorFloorDoor_HandleDoorCollisionInterupted");
static_assert(sizeof(SHElevatorFloorDoor_HandleDoorCollisionInterupted) == 0x000008, "Wrong size on SHElevatorFloorDoor_HandleDoorCollisionInterupted");
static_assert(offsetof(SHElevatorFloorDoor_HandleDoorCollisionInterupted, InElevatorEnginePtr) == 0x000000, "Member 'SHElevatorFloorDoor_HandleDoorCollisionInterupted::InElevatorEnginePtr' has a wrong offset!");

// Function SHProto.SHElevatorFloorDoor.HandleDoorNewRequest
// 0x0008 (0x0008 - 0x0000)
struct SHElevatorFloorDoor_HandleDoorNewRequest final
{
public:
	class ASHElevatorEngine*                      InElevatorEnginePtr;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHElevatorFloorDoor_HandleDoorNewRequest) == 0x000008, "Wrong alignment on SHElevatorFloorDoor_HandleDoorNewRequest");
static_assert(sizeof(SHElevatorFloorDoor_HandleDoorNewRequest) == 0x000008, "Wrong size on SHElevatorFloorDoor_HandleDoorNewRequest");
static_assert(offsetof(SHElevatorFloorDoor_HandleDoorNewRequest, InElevatorEnginePtr) == 0x000000, "Member 'SHElevatorFloorDoor_HandleDoorNewRequest::InElevatorEnginePtr' has a wrong offset!");

// Function SHProto.SHElevatorFloorDoor.HandleEngineDestroy
// 0x0008 (0x0008 - 0x0000)
struct SHElevatorFloorDoor_HandleEngineDestroy final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHElevatorFloorDoor_HandleEngineDestroy) == 0x000008, "Wrong alignment on SHElevatorFloorDoor_HandleEngineDestroy");
static_assert(sizeof(SHElevatorFloorDoor_HandleEngineDestroy) == 0x000008, "Wrong size on SHElevatorFloorDoor_HandleEngineDestroy");
static_assert(offsetof(SHElevatorFloorDoor_HandleEngineDestroy, DestroyedActor) == 0x000000, "Member 'SHElevatorFloorDoor_HandleEngineDestroy::DestroyedActor' has a wrong offset!");

// Function SHProto.SHElevatorFloorDoor.HandleInteract
// 0x0010 (0x0010 - 0x0000)
struct SHElevatorFloorDoor_HandleInteract final
{
public:
	class USHInteractionGenericComponent*         Generic;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHCharacterPlay*                       Character;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHElevatorFloorDoor_HandleInteract) == 0x000008, "Wrong alignment on SHElevatorFloorDoor_HandleInteract");
static_assert(sizeof(SHElevatorFloorDoor_HandleInteract) == 0x000010, "Wrong size on SHElevatorFloorDoor_HandleInteract");
static_assert(offsetof(SHElevatorFloorDoor_HandleInteract, Generic) == 0x000000, "Member 'SHElevatorFloorDoor_HandleInteract::Generic' has a wrong offset!");
static_assert(offsetof(SHElevatorFloorDoor_HandleInteract, Character) == 0x000008, "Member 'SHElevatorFloorDoor_HandleInteract::Character' has a wrong offset!");

// Function SHProto.SHElevatorFloorDoor.HandleOrderCompleted
// 0x0008 (0x0008 - 0x0000)
struct SHElevatorFloorDoor_HandleOrderCompleted final
{
public:
	class ASHElevatorEngine*                      InElevatorEnginePtr;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHElevatorFloorDoor_HandleOrderCompleted) == 0x000008, "Wrong alignment on SHElevatorFloorDoor_HandleOrderCompleted");
static_assert(sizeof(SHElevatorFloorDoor_HandleOrderCompleted) == 0x000008, "Wrong size on SHElevatorFloorDoor_HandleOrderCompleted");
static_assert(offsetof(SHElevatorFloorDoor_HandleOrderCompleted, InElevatorEnginePtr) == 0x000000, "Member 'SHElevatorFloorDoor_HandleOrderCompleted::InElevatorEnginePtr' has a wrong offset!");

// Function SHProto.SHElevatorFloorDoor.HandleOrdersQueueChange
// 0x0008 (0x0008 - 0x0000)
struct SHElevatorFloorDoor_HandleOrdersQueueChange final
{
public:
	class ASHElevatorEngine*                      InElevatorEnginePtr;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHElevatorFloorDoor_HandleOrdersQueueChange) == 0x000008, "Wrong alignment on SHElevatorFloorDoor_HandleOrdersQueueChange");
static_assert(sizeof(SHElevatorFloorDoor_HandleOrdersQueueChange) == 0x000008, "Wrong size on SHElevatorFloorDoor_HandleOrdersQueueChange");
static_assert(offsetof(SHElevatorFloorDoor_HandleOrdersQueueChange, InElevatorEnginePtr) == 0x000000, "Member 'SHElevatorFloorDoor_HandleOrdersQueueChange::InElevatorEnginePtr' has a wrong offset!");

// Function SHProto.SHElevatorFloorDoor.ProcessDoorAlphaChanged
// 0x0004 (0x0004 - 0x0000)
struct SHElevatorFloorDoor_ProcessDoorAlphaChanged final
{
public:
	float                                         ALPHA;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHElevatorFloorDoor_ProcessDoorAlphaChanged) == 0x000004, "Wrong alignment on SHElevatorFloorDoor_ProcessDoorAlphaChanged");
static_assert(sizeof(SHElevatorFloorDoor_ProcessDoorAlphaChanged) == 0x000004, "Wrong size on SHElevatorFloorDoor_ProcessDoorAlphaChanged");
static_assert(offsetof(SHElevatorFloorDoor_ProcessDoorAlphaChanged, ALPHA) == 0x000000, "Member 'SHElevatorFloorDoor_ProcessDoorAlphaChanged::ALPHA' has a wrong offset!");

// Function SHProto.SHElevatorFloorDoor.ProcessInteractionManagerInitialized
// 0x0008 (0x0008 - 0x0000)
struct SHElevatorFloorDoor_ProcessInteractionManagerInitialized final
{
public:
	class USHInteractionManagerComponent*         Manager;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHElevatorFloorDoor_ProcessInteractionManagerInitialized) == 0x000008, "Wrong alignment on SHElevatorFloorDoor_ProcessInteractionManagerInitialized");
static_assert(sizeof(SHElevatorFloorDoor_ProcessInteractionManagerInitialized) == 0x000008, "Wrong size on SHElevatorFloorDoor_ProcessInteractionManagerInitialized");
static_assert(offsetof(SHElevatorFloorDoor_ProcessInteractionManagerInitialized, Manager) == 0x000000, "Member 'SHElevatorFloorDoor_ProcessInteractionManagerInitialized::Manager' has a wrong offset!");

// Function SHProto.SHBreakableGlassComponent.FakeBreak
// 0x0020 (0x0020 - 0x0000)
struct SHBreakableGlassComponent_FakeBreak final
{
public:
	class AController*                            EventInstigator;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InHitDir;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBreakableGlassComponent_FakeBreak) == 0x000008, "Wrong alignment on SHBreakableGlassComponent_FakeBreak");
static_assert(sizeof(SHBreakableGlassComponent_FakeBreak) == 0x000020, "Wrong size on SHBreakableGlassComponent_FakeBreak");
static_assert(offsetof(SHBreakableGlassComponent_FakeBreak, EventInstigator) == 0x000000, "Member 'SHBreakableGlassComponent_FakeBreak::EventInstigator' has a wrong offset!");
static_assert(offsetof(SHBreakableGlassComponent_FakeBreak, InHitDir) == 0x000008, "Member 'SHBreakableGlassComponent_FakeBreak::InHitDir' has a wrong offset!");

// DelegateFunction SHProto.SHBreakableGlassComponent.SHBreakableGlassEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHBreakableGlassComponent_SHBreakableGlassEvent__DelegateSignature final
{
public:
	class USHBreakableGlassComponent*             Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBreakableGlassComponent_SHBreakableGlassEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHBreakableGlassComponent_SHBreakableGlassEvent__DelegateSignature");
static_assert(sizeof(SHBreakableGlassComponent_SHBreakableGlassEvent__DelegateSignature) == 0x000008, "Wrong size on SHBreakableGlassComponent_SHBreakableGlassEvent__DelegateSignature");
static_assert(offsetof(SHBreakableGlassComponent_SHBreakableGlassEvent__DelegateSignature, Component) == 0x000000, "Member 'SHBreakableGlassComponent_SHBreakableGlassEvent__DelegateSignature::Component' has a wrong offset!");

// Function SHProto.SHBreakableGlassComponent.IsBroken
// 0x0001 (0x0001 - 0x0000)
struct SHBreakableGlassComponent_IsBroken final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBreakableGlassComponent_IsBroken) == 0x000001, "Wrong alignment on SHBreakableGlassComponent_IsBroken");
static_assert(sizeof(SHBreakableGlassComponent_IsBroken) == 0x000001, "Wrong size on SHBreakableGlassComponent_IsBroken");
static_assert(offsetof(SHBreakableGlassComponent_IsBroken, ReturnValue) == 0x000000, "Member 'SHBreakableGlassComponent_IsBroken::ReturnValue' has a wrong offset!");

// Function SHProto.SHAkElevatorFloorDoorComponent.PlayButtonClickAudio
// 0x0008 (0x0008 - 0x0000)
struct SHAkElevatorFloorDoorComponent_PlayButtonClickAudio final
{
public:
	class USceneComponent*                        ButtonClickedLocationSceneComponent;               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAkElevatorFloorDoorComponent_PlayButtonClickAudio) == 0x000008, "Wrong alignment on SHAkElevatorFloorDoorComponent_PlayButtonClickAudio");
static_assert(sizeof(SHAkElevatorFloorDoorComponent_PlayButtonClickAudio) == 0x000008, "Wrong size on SHAkElevatorFloorDoorComponent_PlayButtonClickAudio");
static_assert(offsetof(SHAkElevatorFloorDoorComponent_PlayButtonClickAudio, ButtonClickedLocationSceneComponent) == 0x000000, "Member 'SHAkElevatorFloorDoorComponent_PlayButtonClickAudio::ButtonClickedLocationSceneComponent' has a wrong offset!");

// Function SHProto.SHAkElevatorFloorDoorComponent.PlayDoorMovementFinishAudio
// 0x0001 (0x0001 - 0x0000)
struct SHAkElevatorFloorDoorComponent_PlayDoorMovementFinishAudio final
{
public:
	bool                                          IsDoorOpened;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAkElevatorFloorDoorComponent_PlayDoorMovementFinishAudio) == 0x000001, "Wrong alignment on SHAkElevatorFloorDoorComponent_PlayDoorMovementFinishAudio");
static_assert(sizeof(SHAkElevatorFloorDoorComponent_PlayDoorMovementFinishAudio) == 0x000001, "Wrong size on SHAkElevatorFloorDoorComponent_PlayDoorMovementFinishAudio");
static_assert(offsetof(SHAkElevatorFloorDoorComponent_PlayDoorMovementFinishAudio, IsDoorOpened) == 0x000000, "Member 'SHAkElevatorFloorDoorComponent_PlayDoorMovementFinishAudio::IsDoorOpened' has a wrong offset!");

// Function SHProto.SHElevatorInsidePanel.ProcessInteractionManagerInitialized
// 0x0008 (0x0008 - 0x0000)
struct SHElevatorInsidePanel_ProcessInteractionManagerInitialized final
{
public:
	class USHInteractionManagerComponent*         Manager;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHElevatorInsidePanel_ProcessInteractionManagerInitialized) == 0x000008, "Wrong alignment on SHElevatorInsidePanel_ProcessInteractionManagerInitialized");
static_assert(sizeof(SHElevatorInsidePanel_ProcessInteractionManagerInitialized) == 0x000008, "Wrong size on SHElevatorInsidePanel_ProcessInteractionManagerInitialized");
static_assert(offsetof(SHElevatorInsidePanel_ProcessInteractionManagerInitialized, Manager) == 0x000000, "Member 'SHElevatorInsidePanel_ProcessInteractionManagerInitialized::Manager' has a wrong offset!");

// Function SHProto.SHElevatorInsidePanel.ProcessOrderCompleted
// 0x0008 (0x0008 - 0x0000)
struct SHElevatorInsidePanel_ProcessOrderCompleted final
{
public:
	class ASHElevatorEngine*                      InElevatorEnginePtr;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHElevatorInsidePanel_ProcessOrderCompleted) == 0x000008, "Wrong alignment on SHElevatorInsidePanel_ProcessOrderCompleted");
static_assert(sizeof(SHElevatorInsidePanel_ProcessOrderCompleted) == 0x000008, "Wrong size on SHElevatorInsidePanel_ProcessOrderCompleted");
static_assert(offsetof(SHElevatorInsidePanel_ProcessOrderCompleted, InElevatorEnginePtr) == 0x000000, "Member 'SHElevatorInsidePanel_ProcessOrderCompleted::InElevatorEnginePtr' has a wrong offset!");

// Function SHProto.SHElevatorInsidePanel.ProcessOrdersQueueChange
// 0x0008 (0x0008 - 0x0000)
struct SHElevatorInsidePanel_ProcessOrdersQueueChange final
{
public:
	class ASHElevatorEngine*                      InElevatorEnginePtr;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHElevatorInsidePanel_ProcessOrdersQueueChange) == 0x000008, "Wrong alignment on SHElevatorInsidePanel_ProcessOrdersQueueChange");
static_assert(sizeof(SHElevatorInsidePanel_ProcessOrdersQueueChange) == 0x000008, "Wrong size on SHElevatorInsidePanel_ProcessOrdersQueueChange");
static_assert(offsetof(SHElevatorInsidePanel_ProcessOrdersQueueChange, InElevatorEnginePtr) == 0x000000, "Member 'SHElevatorInsidePanel_ProcessOrdersQueueChange::InElevatorEnginePtr' has a wrong offset!");

// Function SHProto.SHCameraActor.GetSHCameraComponent
// 0x0008 (0x0008 - 0x0000)
struct SHCameraActor_GetSHCameraComponent final
{
public:
	class USHCameraComponent*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCameraActor_GetSHCameraComponent) == 0x000008, "Wrong alignment on SHCameraActor_GetSHCameraComponent");
static_assert(sizeof(SHCameraActor_GetSHCameraComponent) == 0x000008, "Wrong size on SHCameraActor_GetSHCameraComponent");
static_assert(offsetof(SHCameraActor_GetSHCameraComponent, ReturnValue) == 0x000000, "Member 'SHCameraActor_GetSHCameraComponent::ReturnValue' has a wrong offset!");

// Function SHProto.SHMathHelperStatics.AngleAndLengthToVector2D
// 0x0018 (0x0018 - 0x0000)
struct SHMathHelperStatics_AngleAndLengthToVector2D final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMathHelperStatics_AngleAndLengthToVector2D) == 0x000008, "Wrong alignment on SHMathHelperStatics_AngleAndLengthToVector2D");
static_assert(sizeof(SHMathHelperStatics_AngleAndLengthToVector2D) == 0x000018, "Wrong size on SHMathHelperStatics_AngleAndLengthToVector2D");
static_assert(offsetof(SHMathHelperStatics_AngleAndLengthToVector2D, Angle) == 0x000000, "Member 'SHMathHelperStatics_AngleAndLengthToVector2D::Angle' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_AngleAndLengthToVector2D, Length) == 0x000004, "Member 'SHMathHelperStatics_AngleAndLengthToVector2D::Length' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_AngleAndLengthToVector2D, ReturnValue) == 0x000008, "Member 'SHMathHelperStatics_AngleAndLengthToVector2D::ReturnValue' has a wrong offset!");

// Function SHProto.SHMathHelperStatics.AngleToVector2D
// 0x0018 (0x0018 - 0x0000)
struct SHMathHelperStatics_AngleToVector2D final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMathHelperStatics_AngleToVector2D) == 0x000008, "Wrong alignment on SHMathHelperStatics_AngleToVector2D");
static_assert(sizeof(SHMathHelperStatics_AngleToVector2D) == 0x000018, "Wrong size on SHMathHelperStatics_AngleToVector2D");
static_assert(offsetof(SHMathHelperStatics_AngleToVector2D, Angle) == 0x000000, "Member 'SHMathHelperStatics_AngleToVector2D::Angle' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_AngleToVector2D, ReturnValue) == 0x000008, "Member 'SHMathHelperStatics_AngleToVector2D::ReturnValue' has a wrong offset!");

// Function SHProto.SHMathHelperStatics.AverageOfFloatArray
// 0x0018 (0x0018 - 0x0000)
struct SHMathHelperStatics_AverageOfFloatArray final
{
public:
	TArray<float>                                 FloatArray;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         AverageValue;                                      // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHMathHelperStatics_AverageOfFloatArray) == 0x000008, "Wrong alignment on SHMathHelperStatics_AverageOfFloatArray");
static_assert(sizeof(SHMathHelperStatics_AverageOfFloatArray) == 0x000018, "Wrong size on SHMathHelperStatics_AverageOfFloatArray");
static_assert(offsetof(SHMathHelperStatics_AverageOfFloatArray, FloatArray) == 0x000000, "Member 'SHMathHelperStatics_AverageOfFloatArray::FloatArray' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_AverageOfFloatArray, AverageValue) == 0x000010, "Member 'SHMathHelperStatics_AverageOfFloatArray::AverageValue' has a wrong offset!");

// Function SHProto.SHMathHelperStatics.FindAngleBetweenNormals
// 0x0038 (0x0038 - 0x0000)
struct SHMathHelperStatics_FindAngleBetweenNormals final
{
public:
	struct FVector                                A;                                                 // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                B;                                                 // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SignedAngle;                                       // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMathHelperStatics_FindAngleBetweenNormals) == 0x000008, "Wrong alignment on SHMathHelperStatics_FindAngleBetweenNormals");
static_assert(sizeof(SHMathHelperStatics_FindAngleBetweenNormals) == 0x000038, "Wrong size on SHMathHelperStatics_FindAngleBetweenNormals");
static_assert(offsetof(SHMathHelperStatics_FindAngleBetweenNormals, A) == 0x000000, "Member 'SHMathHelperStatics_FindAngleBetweenNormals::A' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_FindAngleBetweenNormals, B) == 0x000018, "Member 'SHMathHelperStatics_FindAngleBetweenNormals::B' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_FindAngleBetweenNormals, SignedAngle) == 0x000030, "Member 'SHMathHelperStatics_FindAngleBetweenNormals::SignedAngle' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_FindAngleBetweenNormals, ReturnValue) == 0x000034, "Member 'SHMathHelperStatics_FindAngleBetweenNormals::ReturnValue' has a wrong offset!");

// Function SHProto.SHMathHelperStatics.FindAngleBetweenVectors
// 0x0038 (0x0038 - 0x0000)
struct SHMathHelperStatics_FindAngleBetweenVectors final
{
public:
	struct FVector                                A;                                                 // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                B;                                                 // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SignedAngle;                                       // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMathHelperStatics_FindAngleBetweenVectors) == 0x000008, "Wrong alignment on SHMathHelperStatics_FindAngleBetweenVectors");
static_assert(sizeof(SHMathHelperStatics_FindAngleBetweenVectors) == 0x000038, "Wrong size on SHMathHelperStatics_FindAngleBetweenVectors");
static_assert(offsetof(SHMathHelperStatics_FindAngleBetweenVectors, A) == 0x000000, "Member 'SHMathHelperStatics_FindAngleBetweenVectors::A' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_FindAngleBetweenVectors, B) == 0x000018, "Member 'SHMathHelperStatics_FindAngleBetweenVectors::B' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_FindAngleBetweenVectors, SignedAngle) == 0x000030, "Member 'SHMathHelperStatics_FindAngleBetweenVectors::SignedAngle' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_FindAngleBetweenVectors, ReturnValue) == 0x000034, "Member 'SHMathHelperStatics_FindAngleBetweenVectors::ReturnValue' has a wrong offset!");

// Function SHProto.SHMathHelperStatics.HalfTimeInterp
// 0x0018 (0x0018 - 0x0000)
struct SHMathHelperStatics_HalfTimeInterp final
{
public:
	float                                         Current;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Target;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfTime;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Precision;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMathHelperStatics_HalfTimeInterp) == 0x000004, "Wrong alignment on SHMathHelperStatics_HalfTimeInterp");
static_assert(sizeof(SHMathHelperStatics_HalfTimeInterp) == 0x000018, "Wrong size on SHMathHelperStatics_HalfTimeInterp");
static_assert(offsetof(SHMathHelperStatics_HalfTimeInterp, Current) == 0x000000, "Member 'SHMathHelperStatics_HalfTimeInterp::Current' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_HalfTimeInterp, Target) == 0x000004, "Member 'SHMathHelperStatics_HalfTimeInterp::Target' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_HalfTimeInterp, HalfTime) == 0x000008, "Member 'SHMathHelperStatics_HalfTimeInterp::HalfTime' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_HalfTimeInterp, DeltaTime) == 0x00000C, "Member 'SHMathHelperStatics_HalfTimeInterp::DeltaTime' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_HalfTimeInterp, Precision) == 0x000010, "Member 'SHMathHelperStatics_HalfTimeInterp::Precision' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_HalfTimeInterp, ReturnValue) == 0x000014, "Member 'SHMathHelperStatics_HalfTimeInterp::ReturnValue' has a wrong offset!");

// Function SHProto.SHMathHelperStatics.HalfTimeInterpVector
// 0x0058 (0x0058 - 0x0000)
struct SHMathHelperStatics_HalfTimeInterpVector final
{
public:
	struct FVector                                Current;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Target;                                            // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfTime;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Precision;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMathHelperStatics_HalfTimeInterpVector) == 0x000008, "Wrong alignment on SHMathHelperStatics_HalfTimeInterpVector");
static_assert(sizeof(SHMathHelperStatics_HalfTimeInterpVector) == 0x000058, "Wrong size on SHMathHelperStatics_HalfTimeInterpVector");
static_assert(offsetof(SHMathHelperStatics_HalfTimeInterpVector, Current) == 0x000000, "Member 'SHMathHelperStatics_HalfTimeInterpVector::Current' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_HalfTimeInterpVector, Target) == 0x000018, "Member 'SHMathHelperStatics_HalfTimeInterpVector::Target' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_HalfTimeInterpVector, HalfTime) == 0x000030, "Member 'SHMathHelperStatics_HalfTimeInterpVector::HalfTime' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_HalfTimeInterpVector, DeltaTime) == 0x000034, "Member 'SHMathHelperStatics_HalfTimeInterpVector::DeltaTime' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_HalfTimeInterpVector, Precision) == 0x000038, "Member 'SHMathHelperStatics_HalfTimeInterpVector::Precision' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_HalfTimeInterpVector, ReturnValue) == 0x000040, "Member 'SHMathHelperStatics_HalfTimeInterpVector::ReturnValue' has a wrong offset!");

// Function SHProto.SHMathHelperStatics.HalfTimeInterpVector2D
// 0x0040 (0x0040 - 0x0000)
struct SHMathHelperStatics_HalfTimeInterpVector2D final
{
public:
	struct FVector2D                              Current;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Target;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfTime;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Precision;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMathHelperStatics_HalfTimeInterpVector2D) == 0x000008, "Wrong alignment on SHMathHelperStatics_HalfTimeInterpVector2D");
static_assert(sizeof(SHMathHelperStatics_HalfTimeInterpVector2D) == 0x000040, "Wrong size on SHMathHelperStatics_HalfTimeInterpVector2D");
static_assert(offsetof(SHMathHelperStatics_HalfTimeInterpVector2D, Current) == 0x000000, "Member 'SHMathHelperStatics_HalfTimeInterpVector2D::Current' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_HalfTimeInterpVector2D, Target) == 0x000010, "Member 'SHMathHelperStatics_HalfTimeInterpVector2D::Target' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_HalfTimeInterpVector2D, HalfTime) == 0x000020, "Member 'SHMathHelperStatics_HalfTimeInterpVector2D::HalfTime' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_HalfTimeInterpVector2D, DeltaTime) == 0x000024, "Member 'SHMathHelperStatics_HalfTimeInterpVector2D::DeltaTime' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_HalfTimeInterpVector2D, Precision) == 0x000028, "Member 'SHMathHelperStatics_HalfTimeInterpVector2D::Precision' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_HalfTimeInterpVector2D, ReturnValue) == 0x000030, "Member 'SHMathHelperStatics_HalfTimeInterpVector2D::ReturnValue' has a wrong offset!");

// Function SHProto.SHMathHelperStatics.IfZero
// 0x000C (0x000C - 0x0000)
struct SHMathHelperStatics_IfZero final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZeroValue;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMathHelperStatics_IfZero) == 0x000004, "Wrong alignment on SHMathHelperStatics_IfZero");
static_assert(sizeof(SHMathHelperStatics_IfZero) == 0x00000C, "Wrong size on SHMathHelperStatics_IfZero");
static_assert(offsetof(SHMathHelperStatics_IfZero, Value) == 0x000000, "Member 'SHMathHelperStatics_IfZero::Value' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_IfZero, ZeroValue) == 0x000004, "Member 'SHMathHelperStatics_IfZero::ZeroValue' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_IfZero, ReturnValue) == 0x000008, "Member 'SHMathHelperStatics_IfZero::ReturnValue' has a wrong offset!");

// Function SHProto.SHMathHelperStatics.MaxWithoutSign
// 0x000C (0x000C - 0x0000)
struct SHMathHelperStatics_MaxWithoutSign final
{
public:
	float                                         ValueA;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueB;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMathHelperStatics_MaxWithoutSign) == 0x000004, "Wrong alignment on SHMathHelperStatics_MaxWithoutSign");
static_assert(sizeof(SHMathHelperStatics_MaxWithoutSign) == 0x00000C, "Wrong size on SHMathHelperStatics_MaxWithoutSign");
static_assert(offsetof(SHMathHelperStatics_MaxWithoutSign, ValueA) == 0x000000, "Member 'SHMathHelperStatics_MaxWithoutSign::ValueA' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_MaxWithoutSign, ValueB) == 0x000004, "Member 'SHMathHelperStatics_MaxWithoutSign::ValueB' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_MaxWithoutSign, ReturnValue) == 0x000008, "Member 'SHMathHelperStatics_MaxWithoutSign::ReturnValue' has a wrong offset!");

// Function SHProto.SHMathHelperStatics.MinWithoutSign
// 0x000C (0x000C - 0x0000)
struct SHMathHelperStatics_MinWithoutSign final
{
public:
	float                                         ValueA;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueB;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMathHelperStatics_MinWithoutSign) == 0x000004, "Wrong alignment on SHMathHelperStatics_MinWithoutSign");
static_assert(sizeof(SHMathHelperStatics_MinWithoutSign) == 0x00000C, "Wrong size on SHMathHelperStatics_MinWithoutSign");
static_assert(offsetof(SHMathHelperStatics_MinWithoutSign, ValueA) == 0x000000, "Member 'SHMathHelperStatics_MinWithoutSign::ValueA' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_MinWithoutSign, ValueB) == 0x000004, "Member 'SHMathHelperStatics_MinWithoutSign::ValueB' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_MinWithoutSign, ReturnValue) == 0x000008, "Member 'SHMathHelperStatics_MinWithoutSign::ReturnValue' has a wrong offset!");

// Function SHProto.SHMathHelperStatics.PlaneDot
// 0x0040 (0x0040 - 0x0000)
struct SHMathHelperStatics_PlaneDot final
{
public:
	struct FPlane                                 Plane;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHMathHelperStatics_PlaneDot) == 0x000010, "Wrong alignment on SHMathHelperStatics_PlaneDot");
static_assert(sizeof(SHMathHelperStatics_PlaneDot) == 0x000040, "Wrong size on SHMathHelperStatics_PlaneDot");
static_assert(offsetof(SHMathHelperStatics_PlaneDot, Plane) == 0x000000, "Member 'SHMathHelperStatics_PlaneDot::Plane' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_PlaneDot, Location) == 0x000020, "Member 'SHMathHelperStatics_PlaneDot::Location' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_PlaneDot, ReturnValue) == 0x000038, "Member 'SHMathHelperStatics_PlaneDot::ReturnValue' has a wrong offset!");

// Function SHProto.SHMathHelperStatics.SignNonZero
// 0x000C (0x000C - 0x0000)
struct SHMathHelperStatics_SignNonZero final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZeroValue;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMathHelperStatics_SignNonZero) == 0x000004, "Wrong alignment on SHMathHelperStatics_SignNonZero");
static_assert(sizeof(SHMathHelperStatics_SignNonZero) == 0x00000C, "Wrong size on SHMathHelperStatics_SignNonZero");
static_assert(offsetof(SHMathHelperStatics_SignNonZero, Value) == 0x000000, "Member 'SHMathHelperStatics_SignNonZero::Value' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_SignNonZero, ZeroValue) == 0x000004, "Member 'SHMathHelperStatics_SignNonZero::ZeroValue' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_SignNonZero, ReturnValue) == 0x000008, "Member 'SHMathHelperStatics_SignNonZero::ReturnValue' has a wrong offset!");

// Function SHProto.SHMathHelperStatics.Vector2DToAngle
// 0x0018 (0x0018 - 0x0000)
struct SHMathHelperStatics_Vector2DToAngle final
{
public:
	struct FVector2D                              Vector;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZeroVectorAngle;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMathHelperStatics_Vector2DToAngle) == 0x000008, "Wrong alignment on SHMathHelperStatics_Vector2DToAngle");
static_assert(sizeof(SHMathHelperStatics_Vector2DToAngle) == 0x000018, "Wrong size on SHMathHelperStatics_Vector2DToAngle");
static_assert(offsetof(SHMathHelperStatics_Vector2DToAngle, Vector) == 0x000000, "Member 'SHMathHelperStatics_Vector2DToAngle::Vector' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_Vector2DToAngle, ZeroVectorAngle) == 0x000010, "Member 'SHMathHelperStatics_Vector2DToAngle::ZeroVectorAngle' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_Vector2DToAngle, ReturnValue) == 0x000014, "Member 'SHMathHelperStatics_Vector2DToAngle::ReturnValue' has a wrong offset!");

// Function SHProto.SHMathHelperStatics.Vector2DToAngleAndLength
// 0x0020 (0x0020 - 0x0000)
struct SHMathHelperStatics_Vector2DToAngleAndLength final
{
public:
	float                                         OutAngle;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutLength;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Vector;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZeroVectorAngle;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHMathHelperStatics_Vector2DToAngleAndLength) == 0x000008, "Wrong alignment on SHMathHelperStatics_Vector2DToAngleAndLength");
static_assert(sizeof(SHMathHelperStatics_Vector2DToAngleAndLength) == 0x000020, "Wrong size on SHMathHelperStatics_Vector2DToAngleAndLength");
static_assert(offsetof(SHMathHelperStatics_Vector2DToAngleAndLength, OutAngle) == 0x000000, "Member 'SHMathHelperStatics_Vector2DToAngleAndLength::OutAngle' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_Vector2DToAngleAndLength, OutLength) == 0x000004, "Member 'SHMathHelperStatics_Vector2DToAngleAndLength::OutLength' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_Vector2DToAngleAndLength, Vector) == 0x000008, "Member 'SHMathHelperStatics_Vector2DToAngleAndLength::Vector' has a wrong offset!");
static_assert(offsetof(SHMathHelperStatics_Vector2DToAngleAndLength, ZeroVectorAngle) == 0x000018, "Member 'SHMathHelperStatics_Vector2DToAngleAndLength::ZeroVectorAngle' has a wrong offset!");

// Function SHProto.SHBlenderBase.GetBlendAlpha
// 0x0004 (0x0004 - 0x0000)
struct SHBlenderBase_GetBlendAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBlenderBase_GetBlendAlpha) == 0x000004, "Wrong alignment on SHBlenderBase_GetBlendAlpha");
static_assert(sizeof(SHBlenderBase_GetBlendAlpha) == 0x000004, "Wrong size on SHBlenderBase_GetBlendAlpha");
static_assert(offsetof(SHBlenderBase_GetBlendAlpha, ReturnValue) == 0x000000, "Member 'SHBlenderBase_GetBlendAlpha::ReturnValue' has a wrong offset!");

// Function SHProto.SHBlenderBase.IsBlendingInEnabled
// 0x0001 (0x0001 - 0x0000)
struct SHBlenderBase_IsBlendingInEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBlenderBase_IsBlendingInEnabled) == 0x000001, "Wrong alignment on SHBlenderBase_IsBlendingInEnabled");
static_assert(sizeof(SHBlenderBase_IsBlendingInEnabled) == 0x000001, "Wrong size on SHBlenderBase_IsBlendingInEnabled");
static_assert(offsetof(SHBlenderBase_IsBlendingInEnabled, ReturnValue) == 0x000000, "Member 'SHBlenderBase_IsBlendingInEnabled::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemEquipable.GetItemDataRowName
// 0x0008 (0x0008 - 0x0000)
struct SHItemEquipable_GetItemDataRowName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemEquipable_GetItemDataRowName) == 0x000004, "Wrong alignment on SHItemEquipable_GetItemDataRowName");
static_assert(sizeof(SHItemEquipable_GetItemDataRowName) == 0x000008, "Wrong size on SHItemEquipable_GetItemDataRowName");
static_assert(offsetof(SHItemEquipable_GetItemDataRowName, ReturnValue) == 0x000000, "Member 'SHItemEquipable_GetItemDataRowName::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemEquipable.GetOwnerCharacter
// 0x0008 (0x0008 - 0x0000)
struct SHItemEquipable_GetOwnerCharacter final
{
public:
	class ACharacter*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemEquipable_GetOwnerCharacter) == 0x000008, "Wrong alignment on SHItemEquipable_GetOwnerCharacter");
static_assert(sizeof(SHItemEquipable_GetOwnerCharacter) == 0x000008, "Wrong size on SHItemEquipable_GetOwnerCharacter");
static_assert(offsetof(SHItemEquipable_GetOwnerCharacter, ReturnValue) == 0x000000, "Member 'SHItemEquipable_GetOwnerCharacter::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemEquipment.IsTurnOn
// 0x0001 (0x0001 - 0x0000)
struct SHItemEquipment_IsTurnOn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemEquipment_IsTurnOn) == 0x000001, "Wrong alignment on SHItemEquipment_IsTurnOn");
static_assert(sizeof(SHItemEquipment_IsTurnOn) == 0x000001, "Wrong size on SHItemEquipment_IsTurnOn");
static_assert(offsetof(SHItemEquipment_IsTurnOn, ReturnValue) == 0x000000, "Member 'SHItemEquipment_IsTurnOn::ReturnValue' has a wrong offset!");

// Function SHProto.SHFlashlight.BeginsLightAtMonster
// 0x0008 (0x0008 - 0x0000)
struct SHFlashlight_BeginsLightAtMonster final
{
public:
	class AActor*                                 Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFlashlight_BeginsLightAtMonster) == 0x000008, "Wrong alignment on SHFlashlight_BeginsLightAtMonster");
static_assert(sizeof(SHFlashlight_BeginsLightAtMonster) == 0x000008, "Wrong size on SHFlashlight_BeginsLightAtMonster");
static_assert(offsetof(SHFlashlight_BeginsLightAtMonster, Monster) == 0x000000, "Member 'SHFlashlight_BeginsLightAtMonster::Monster' has a wrong offset!");

// Function SHProto.SHFlashlight.DisableLookAt
// 0x0008 (0x0008 - 0x0000)
struct SHFlashlight_DisableLookAt final
{
public:
	bool                                          InstantViewRotation;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AwaitTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFlashlight_DisableLookAt) == 0x000004, "Wrong alignment on SHFlashlight_DisableLookAt");
static_assert(sizeof(SHFlashlight_DisableLookAt) == 0x000008, "Wrong size on SHFlashlight_DisableLookAt");
static_assert(offsetof(SHFlashlight_DisableLookAt, InstantViewRotation) == 0x000000, "Member 'SHFlashlight_DisableLookAt::InstantViewRotation' has a wrong offset!");
static_assert(offsetof(SHFlashlight_DisableLookAt, AwaitTime) == 0x000004, "Member 'SHFlashlight_DisableLookAt::AwaitTime' has a wrong offset!");

// Function SHProto.SHFlashlight.EnableLookAtComponent
// 0x0010 (0x0010 - 0x0000)
struct SHFlashlight_EnableLookAtComponent final
{
public:
	class USceneComponent*                        NewLookAtRef;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSHFlashlightLookAtSettings            InLookAtSettings;                                  // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFlashlight_EnableLookAtComponent) == 0x000008, "Wrong alignment on SHFlashlight_EnableLookAtComponent");
static_assert(sizeof(SHFlashlight_EnableLookAtComponent) == 0x000010, "Wrong size on SHFlashlight_EnableLookAtComponent");
static_assert(offsetof(SHFlashlight_EnableLookAtComponent, NewLookAtRef) == 0x000000, "Member 'SHFlashlight_EnableLookAtComponent::NewLookAtRef' has a wrong offset!");
static_assert(offsetof(SHFlashlight_EnableLookAtComponent, InLookAtSettings) == 0x000008, "Member 'SHFlashlight_EnableLookAtComponent::InLookAtSettings' has a wrong offset!");

// Function SHProto.SHFlashlight.EndLightAtMonster
// 0x0008 (0x0008 - 0x0000)
struct SHFlashlight_EndLightAtMonster final
{
public:
	class AActor*                                 Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFlashlight_EndLightAtMonster) == 0x000008, "Wrong alignment on SHFlashlight_EndLightAtMonster");
static_assert(sizeof(SHFlashlight_EndLightAtMonster) == 0x000008, "Wrong size on SHFlashlight_EndLightAtMonster");
static_assert(offsetof(SHFlashlight_EndLightAtMonster, Monster) == 0x000000, "Member 'SHFlashlight_EndLightAtMonster::Monster' has a wrong offset!");

// Function SHProto.SHFlashlight.PlayLightIntensityModAnimation
// 0x0010 (0x0010 - 0x0000)
struct SHFlashlight_PlayLightIntensityModAnimation final
{
public:
	class UCurveFloat*                            IntensityModCurve;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFlashlight_PlayLightIntensityModAnimation) == 0x000008, "Wrong alignment on SHFlashlight_PlayLightIntensityModAnimation");
static_assert(sizeof(SHFlashlight_PlayLightIntensityModAnimation) == 0x000010, "Wrong size on SHFlashlight_PlayLightIntensityModAnimation");
static_assert(offsetof(SHFlashlight_PlayLightIntensityModAnimation, IntensityModCurve) == 0x000000, "Member 'SHFlashlight_PlayLightIntensityModAnimation::IntensityModCurve' has a wrong offset!");
static_assert(offsetof(SHFlashlight_PlayLightIntensityModAnimation, ReturnValue) == 0x000008, "Member 'SHFlashlight_PlayLightIntensityModAnimation::ReturnValue' has a wrong offset!");

// Function SHProto.SHFlashlight.SetLightIntensityModProgress
// 0x0004 (0x0004 - 0x0000)
struct SHFlashlight_SetLightIntensityModProgress final
{
public:
	float                                         ModValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFlashlight_SetLightIntensityModProgress) == 0x000004, "Wrong alignment on SHFlashlight_SetLightIntensityModProgress");
static_assert(sizeof(SHFlashlight_SetLightIntensityModProgress) == 0x000004, "Wrong size on SHFlashlight_SetLightIntensityModProgress");
static_assert(offsetof(SHFlashlight_SetLightIntensityModProgress, ModValue) == 0x000000, "Member 'SHFlashlight_SetLightIntensityModProgress::ModValue' has a wrong offset!");

// Function SHProto.SHFlashlight.SetLightIntensityProgress
// 0x0004 (0x0004 - 0x0000)
struct SHFlashlight_SetLightIntensityProgress final
{
public:
	float                                         ProgressValue;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFlashlight_SetLightIntensityProgress) == 0x000004, "Wrong alignment on SHFlashlight_SetLightIntensityProgress");
static_assert(sizeof(SHFlashlight_SetLightIntensityProgress) == 0x000004, "Wrong size on SHFlashlight_SetLightIntensityProgress");
static_assert(offsetof(SHFlashlight_SetLightIntensityProgress, ProgressValue) == 0x000000, "Member 'SHFlashlight_SetLightIntensityProgress::ProgressValue' has a wrong offset!");

// Function SHProto.SHFlashlight.SetMainLightOffsetSource
// 0x0008 (0x0008 - 0x0000)
struct SHFlashlight_SetMainLightOffsetSource final
{
public:
	class USceneComponent*                        NewMainLightOffsetSource;                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFlashlight_SetMainLightOffsetSource) == 0x000008, "Wrong alignment on SHFlashlight_SetMainLightOffsetSource");
static_assert(sizeof(SHFlashlight_SetMainLightOffsetSource) == 0x000008, "Wrong size on SHFlashlight_SetMainLightOffsetSource");
static_assert(offsetof(SHFlashlight_SetMainLightOffsetSource, NewMainLightOffsetSource) == 0x000000, "Member 'SHFlashlight_SetMainLightOffsetSource::NewMainLightOffsetSource' has a wrong offset!");

// Function SHProto.SHFlashlight.UpdateDustMaterial
// 0x0008 (0x0008 - 0x0000)
struct SHFlashlight_UpdateDustMaterial final
{
public:
	class UMaterialInstanceDynamic*               InDustMaterial;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFlashlight_UpdateDustMaterial) == 0x000008, "Wrong alignment on SHFlashlight_UpdateDustMaterial");
static_assert(sizeof(SHFlashlight_UpdateDustMaterial) == 0x000008, "Wrong size on SHFlashlight_UpdateDustMaterial");
static_assert(offsetof(SHFlashlight_UpdateDustMaterial, InDustMaterial) == 0x000000, "Member 'SHFlashlight_UpdateDustMaterial::InDustMaterial' has a wrong offset!");

// Function SHProto.SHFlashlight.UpdateDustNiagara
// 0x0008 (0x0008 - 0x0000)
struct SHFlashlight_UpdateDustNiagara final
{
public:
	class UNiagaraComponent*                      InDustNiagara;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFlashlight_UpdateDustNiagara) == 0x000008, "Wrong alignment on SHFlashlight_UpdateDustNiagara");
static_assert(sizeof(SHFlashlight_UpdateDustNiagara) == 0x000008, "Wrong size on SHFlashlight_UpdateDustNiagara");
static_assert(offsetof(SHFlashlight_UpdateDustNiagara, InDustNiagara) == 0x000000, "Member 'SHFlashlight_UpdateDustNiagara::InDustNiagara' has a wrong offset!");

// Function SHProto.SHFlashlight.UpdateLightAtMonster
// 0x0010 (0x0010 - 0x0000)
struct SHFlashlight_UpdateLightAtMonster final
{
public:
	class AActor*                                 Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InLightingAlpha;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFlashlight_UpdateLightAtMonster) == 0x000008, "Wrong alignment on SHFlashlight_UpdateLightAtMonster");
static_assert(sizeof(SHFlashlight_UpdateLightAtMonster) == 0x000010, "Wrong size on SHFlashlight_UpdateLightAtMonster");
static_assert(offsetof(SHFlashlight_UpdateLightAtMonster, Monster) == 0x000000, "Member 'SHFlashlight_UpdateLightAtMonster::Monster' has a wrong offset!");
static_assert(offsetof(SHFlashlight_UpdateLightAtMonster, InLightingAlpha) == 0x000008, "Member 'SHFlashlight_UpdateLightAtMonster::InLightingAlpha' has a wrong offset!");

// Function SHProto.SHFlashlight.GetIntensityAlpha
// 0x0004 (0x0004 - 0x0000)
struct SHFlashlight_GetIntensityAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFlashlight_GetIntensityAlpha) == 0x000004, "Wrong alignment on SHFlashlight_GetIntensityAlpha");
static_assert(sizeof(SHFlashlight_GetIntensityAlpha) == 0x000004, "Wrong size on SHFlashlight_GetIntensityAlpha");
static_assert(offsetof(SHFlashlight_GetIntensityAlpha, ReturnValue) == 0x000000, "Member 'SHFlashlight_GetIntensityAlpha::ReturnValue' has a wrong offset!");

// Function SHProto.SHBuoyancyMimicComponent.Initialize
// 0x0008 (0x0008 - 0x0000)
struct SHBuoyancyMimicComponent_Initialize final
{
public:
	class USceneComponent*                        InManagedComp;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBuoyancyMimicComponent_Initialize) == 0x000008, "Wrong alignment on SHBuoyancyMimicComponent_Initialize");
static_assert(sizeof(SHBuoyancyMimicComponent_Initialize) == 0x000008, "Wrong size on SHBuoyancyMimicComponent_Initialize");
static_assert(offsetof(SHBuoyancyMimicComponent_Initialize, InManagedComp) == 0x000000, "Member 'SHBuoyancyMimicComponent_Initialize::InManagedComp' has a wrong offset!");

// Function SHProto.SHHookedMeatBase.ApplyDamageToBone
// 0x0030 (0x0030 - 0x0000)
struct SHHookedMeatBase_ApplyDamageToBone final
{
public:
	class FName                                   InBoneName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitFromDirection;                                  // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                InDamageTypeClass;                                 // 0x0020(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHHookedMeatBase_ApplyDamageToBone) == 0x000008, "Wrong alignment on SHHookedMeatBase_ApplyDamageToBone");
static_assert(sizeof(SHHookedMeatBase_ApplyDamageToBone) == 0x000030, "Wrong size on SHHookedMeatBase_ApplyDamageToBone");
static_assert(offsetof(SHHookedMeatBase_ApplyDamageToBone, InBoneName) == 0x000000, "Member 'SHHookedMeatBase_ApplyDamageToBone::InBoneName' has a wrong offset!");
static_assert(offsetof(SHHookedMeatBase_ApplyDamageToBone, HitFromDirection) == 0x000008, "Member 'SHHookedMeatBase_ApplyDamageToBone::HitFromDirection' has a wrong offset!");
static_assert(offsetof(SHHookedMeatBase_ApplyDamageToBone, InDamageTypeClass) == 0x000020, "Member 'SHHookedMeatBase_ApplyDamageToBone::InDamageTypeClass' has a wrong offset!");
static_assert(offsetof(SHHookedMeatBase_ApplyDamageToBone, ReturnValue) == 0x000028, "Member 'SHHookedMeatBase_ApplyDamageToBone::ReturnValue' has a wrong offset!");

// Function SHProto.SHHookedMeatBase.GetBoneDefaultHealth
// 0x000C (0x000C - 0x0000)
struct SHHookedMeatBase_GetBoneDefaultHealth final
{
public:
	class FName                                   InBoneName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHookedMeatBase_GetBoneDefaultHealth) == 0x000004, "Wrong alignment on SHHookedMeatBase_GetBoneDefaultHealth");
static_assert(sizeof(SHHookedMeatBase_GetBoneDefaultHealth) == 0x00000C, "Wrong size on SHHookedMeatBase_GetBoneDefaultHealth");
static_assert(offsetof(SHHookedMeatBase_GetBoneDefaultHealth, InBoneName) == 0x000000, "Member 'SHHookedMeatBase_GetBoneDefaultHealth::InBoneName' has a wrong offset!");
static_assert(offsetof(SHHookedMeatBase_GetBoneDefaultHealth, ReturnValue) == 0x000008, "Member 'SHHookedMeatBase_GetBoneDefaultHealth::ReturnValue' has a wrong offset!");

// Function SHProto.SHHookedMeatBase.GetDamageValueFromTypeClass
// 0x0010 (0x0010 - 0x0000)
struct SHHookedMeatBase_GetDamageValueFromTypeClass final
{
public:
	TSubclassOf<class UDamageType>                InDamageTypeClass;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHHookedMeatBase_GetDamageValueFromTypeClass) == 0x000008, "Wrong alignment on SHHookedMeatBase_GetDamageValueFromTypeClass");
static_assert(sizeof(SHHookedMeatBase_GetDamageValueFromTypeClass) == 0x000010, "Wrong size on SHHookedMeatBase_GetDamageValueFromTypeClass");
static_assert(offsetof(SHHookedMeatBase_GetDamageValueFromTypeClass, InDamageTypeClass) == 0x000000, "Member 'SHHookedMeatBase_GetDamageValueFromTypeClass::InDamageTypeClass' has a wrong offset!");
static_assert(offsetof(SHHookedMeatBase_GetDamageValueFromTypeClass, ReturnValue) == 0x000008, "Member 'SHHookedMeatBase_GetDamageValueFromTypeClass::ReturnValue' has a wrong offset!");

// Function SHProto.SHHookedMeatBase.GetForceValueFromTypeClass
// 0x0010 (0x0010 - 0x0000)
struct SHHookedMeatBase_GetForceValueFromTypeClass final
{
public:
	TSubclassOf<class UDamageType>                InDamageTypeClass;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHHookedMeatBase_GetForceValueFromTypeClass) == 0x000008, "Wrong alignment on SHHookedMeatBase_GetForceValueFromTypeClass");
static_assert(sizeof(SHHookedMeatBase_GetForceValueFromTypeClass) == 0x000010, "Wrong size on SHHookedMeatBase_GetForceValueFromTypeClass");
static_assert(offsetof(SHHookedMeatBase_GetForceValueFromTypeClass, InDamageTypeClass) == 0x000000, "Member 'SHHookedMeatBase_GetForceValueFromTypeClass::InDamageTypeClass' has a wrong offset!");
static_assert(offsetof(SHHookedMeatBase_GetForceValueFromTypeClass, ReturnValue) == 0x000008, "Member 'SHHookedMeatBase_GetForceValueFromTypeClass::ReturnValue' has a wrong offset!");

// Function SHProto.SHHookedMeatBase.OnMeatPush
// 0x0001 (0x0001 - 0x0000)
struct SHHookedMeatBase_OnMeatPush final
{
public:
	bool                                          IsGoingForward;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHookedMeatBase_OnMeatPush) == 0x000001, "Wrong alignment on SHHookedMeatBase_OnMeatPush");
static_assert(sizeof(SHHookedMeatBase_OnMeatPush) == 0x000001, "Wrong size on SHHookedMeatBase_OnMeatPush");
static_assert(offsetof(SHHookedMeatBase_OnMeatPush, IsGoingForward) == 0x000000, "Member 'SHHookedMeatBase_OnMeatPush::IsGoingForward' has a wrong offset!");

// Function SHProto.SHHookedMeatBase.GetDesiredEddieMeatPushPosition
// 0x0020 (0x0020 - 0x0000)
struct SHHookedMeatBase_GetDesiredEddieMeatPushPosition final
{
public:
	const class AActor*                           EddieActor;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHookedMeatBase_GetDesiredEddieMeatPushPosition) == 0x000008, "Wrong alignment on SHHookedMeatBase_GetDesiredEddieMeatPushPosition");
static_assert(sizeof(SHHookedMeatBase_GetDesiredEddieMeatPushPosition) == 0x000020, "Wrong size on SHHookedMeatBase_GetDesiredEddieMeatPushPosition");
static_assert(offsetof(SHHookedMeatBase_GetDesiredEddieMeatPushPosition, EddieActor) == 0x000000, "Member 'SHHookedMeatBase_GetDesiredEddieMeatPushPosition::EddieActor' has a wrong offset!");
static_assert(offsetof(SHHookedMeatBase_GetDesiredEddieMeatPushPosition, ReturnValue) == 0x000008, "Member 'SHHookedMeatBase_GetDesiredEddieMeatPushPosition::ReturnValue' has a wrong offset!");

// Function SHProto.SHHookedMeatBase.GetEddieCoverPosition
// 0x0020 (0x0020 - 0x0000)
struct SHHookedMeatBase_GetEddieCoverPosition final
{
public:
	const class AActor*                           Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHookedMeatBase_GetEddieCoverPosition) == 0x000008, "Wrong alignment on SHHookedMeatBase_GetEddieCoverPosition");
static_assert(sizeof(SHHookedMeatBase_GetEddieCoverPosition) == 0x000020, "Wrong size on SHHookedMeatBase_GetEddieCoverPosition");
static_assert(offsetof(SHHookedMeatBase_GetEddieCoverPosition, Target) == 0x000000, "Member 'SHHookedMeatBase_GetEddieCoverPosition::Target' has a wrong offset!");
static_assert(offsetof(SHHookedMeatBase_GetEddieCoverPosition, ReturnValue) == 0x000008, "Member 'SHHookedMeatBase_GetEddieCoverPosition::ReturnValue' has a wrong offset!");

// Function SHProto.SHHookedMeatBase.GetExistingChildBones
// 0x0018 (0x0018 - 0x0000)
struct SHHookedMeatBase_GetExistingChildBones final
{
public:
	class FName                                   InParentBoneName;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHookedMeatBase_GetExistingChildBones) == 0x000008, "Wrong alignment on SHHookedMeatBase_GetExistingChildBones");
static_assert(sizeof(SHHookedMeatBase_GetExistingChildBones) == 0x000018, "Wrong size on SHHookedMeatBase_GetExistingChildBones");
static_assert(offsetof(SHHookedMeatBase_GetExistingChildBones, InParentBoneName) == 0x000000, "Member 'SHHookedMeatBase_GetExistingChildBones::InParentBoneName' has a wrong offset!");
static_assert(offsetof(SHHookedMeatBase_GetExistingChildBones, ReturnValue) == 0x000008, "Member 'SHHookedMeatBase_GetExistingChildBones::ReturnValue' has a wrong offset!");

// Function SHProto.SHHookedMeatBase.IsFullyDestroyed
// 0x0001 (0x0001 - 0x0000)
struct SHHookedMeatBase_IsFullyDestroyed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHookedMeatBase_IsFullyDestroyed) == 0x000001, "Wrong alignment on SHHookedMeatBase_IsFullyDestroyed");
static_assert(sizeof(SHHookedMeatBase_IsFullyDestroyed) == 0x000001, "Wrong size on SHHookedMeatBase_IsFullyDestroyed");
static_assert(offsetof(SHHookedMeatBase_IsFullyDestroyed, ReturnValue) == 0x000000, "Member 'SHHookedMeatBase_IsFullyDestroyed::ReturnValue' has a wrong offset!");

// Function SHProto.SHHookedMeatBase.ShouldPushLeft
// 0x0028 (0x0028 - 0x0000)
struct SHHookedMeatBase_ShouldPushLeft final
{
public:
	const class AActor*                           Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AttackPosition;                                    // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHHookedMeatBase_ShouldPushLeft) == 0x000008, "Wrong alignment on SHHookedMeatBase_ShouldPushLeft");
static_assert(sizeof(SHHookedMeatBase_ShouldPushLeft) == 0x000028, "Wrong size on SHHookedMeatBase_ShouldPushLeft");
static_assert(offsetof(SHHookedMeatBase_ShouldPushLeft, Target) == 0x000000, "Member 'SHHookedMeatBase_ShouldPushLeft::Target' has a wrong offset!");
static_assert(offsetof(SHHookedMeatBase_ShouldPushLeft, AttackPosition) == 0x000008, "Member 'SHHookedMeatBase_ShouldPushLeft::AttackPosition' has a wrong offset!");
static_assert(offsetof(SHHookedMeatBase_ShouldPushLeft, ReturnValue) == 0x000020, "Member 'SHHookedMeatBase_ShouldPushLeft::ReturnValue' has a wrong offset!");

// Function SHProto.SHAkHookedMeatComponent.OnSkeletalComponentHit
// 0x0118 (0x0118 - 0x0000)
struct SHAkHookedMeatComponent_OnSkeletalComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0030(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAkHookedMeatComponent_OnSkeletalComponentHit) == 0x000008, "Wrong alignment on SHAkHookedMeatComponent_OnSkeletalComponentHit");
static_assert(sizeof(SHAkHookedMeatComponent_OnSkeletalComponentHit) == 0x000118, "Wrong size on SHAkHookedMeatComponent_OnSkeletalComponentHit");
static_assert(offsetof(SHAkHookedMeatComponent_OnSkeletalComponentHit, HitComponent) == 0x000000, "Member 'SHAkHookedMeatComponent_OnSkeletalComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(SHAkHookedMeatComponent_OnSkeletalComponentHit, OtherActor) == 0x000008, "Member 'SHAkHookedMeatComponent_OnSkeletalComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(SHAkHookedMeatComponent_OnSkeletalComponentHit, OtherComp) == 0x000010, "Member 'SHAkHookedMeatComponent_OnSkeletalComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(SHAkHookedMeatComponent_OnSkeletalComponentHit, NormalImpulse) == 0x000018, "Member 'SHAkHookedMeatComponent_OnSkeletalComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(SHAkHookedMeatComponent_OnSkeletalComponentHit, Hit) == 0x000030, "Member 'SHAkHookedMeatComponent_OnSkeletalComponentHit::Hit' has a wrong offset!");

// Function SHProto.SHCharacterImpactInteraction.TryStartInteraction
// 0x0118 (0x0118 - 0x0000)
struct SHCharacterImpactInteraction_TryStartInteraction final
{
public:
	struct FHitEvent                              HitData;                                           // 0x0000(0x0118)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterImpactInteraction_TryStartInteraction) == 0x000008, "Wrong alignment on SHCharacterImpactInteraction_TryStartInteraction");
static_assert(sizeof(SHCharacterImpactInteraction_TryStartInteraction) == 0x000118, "Wrong size on SHCharacterImpactInteraction_TryStartInteraction");
static_assert(offsetof(SHCharacterImpactInteraction_TryStartInteraction, HitData) == 0x000000, "Member 'SHCharacterImpactInteraction_TryStartInteraction::HitData' has a wrong offset!");

// Function SHProto.SHAkItemWeaponRangedAudioComponent.ProcessOwnerCharacterCombatInputModeChanged
// 0x0008 (0x0008 - 0x0000)
struct SHAkItemWeaponRangedAudioComponent_ProcessOwnerCharacterCombatInputModeChanged final
{
public:
	class USHCharacterPlayCombatComponent*        CombatComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAkItemWeaponRangedAudioComponent_ProcessOwnerCharacterCombatInputModeChanged) == 0x000008, "Wrong alignment on SHAkItemWeaponRangedAudioComponent_ProcessOwnerCharacterCombatInputModeChanged");
static_assert(sizeof(SHAkItemWeaponRangedAudioComponent_ProcessOwnerCharacterCombatInputModeChanged) == 0x000008, "Wrong size on SHAkItemWeaponRangedAudioComponent_ProcessOwnerCharacterCombatInputModeChanged");
static_assert(offsetof(SHAkItemWeaponRangedAudioComponent_ProcessOwnerCharacterCombatInputModeChanged, CombatComp) == 0x000000, "Member 'SHAkItemWeaponRangedAudioComponent_ProcessOwnerCharacterCombatInputModeChanged::CombatComp' has a wrong offset!");

// Function SHProto.SHCameraFOVBlender.GetAssignedValue
// 0x0004 (0x0004 - 0x0000)
struct SHCameraFOVBlender_GetAssignedValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCameraFOVBlender_GetAssignedValue) == 0x000004, "Wrong alignment on SHCameraFOVBlender_GetAssignedValue");
static_assert(sizeof(SHCameraFOVBlender_GetAssignedValue) == 0x000004, "Wrong size on SHCameraFOVBlender_GetAssignedValue");
static_assert(offsetof(SHCameraFOVBlender_GetAssignedValue, ReturnValue) == 0x000000, "Member 'SHCameraFOVBlender_GetAssignedValue::ReturnValue' has a wrong offset!");

// Function SHProto.SHAkMusicComponent.ReleaseRequestedMusicSwitch
// 0x0008 (0x0008 - 0x0000)
struct SHAkMusicComponent_ReleaseRequestedMusicSwitch final
{
public:
	class UObject*                                InContext;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAkMusicComponent_ReleaseRequestedMusicSwitch) == 0x000008, "Wrong alignment on SHAkMusicComponent_ReleaseRequestedMusicSwitch");
static_assert(sizeof(SHAkMusicComponent_ReleaseRequestedMusicSwitch) == 0x000008, "Wrong size on SHAkMusicComponent_ReleaseRequestedMusicSwitch");
static_assert(offsetof(SHAkMusicComponent_ReleaseRequestedMusicSwitch, InContext) == 0x000000, "Member 'SHAkMusicComponent_ReleaseRequestedMusicSwitch::InContext' has a wrong offset!");

// Function SHProto.SHAkMusicComponent.RequestMusicSwitch
// 0x0010 (0x0010 - 0x0000)
struct SHAkMusicComponent_RequestMusicSwitch final
{
public:
	class UObject*                                InContext;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkSwitchValue*                         InSwitch;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAkMusicComponent_RequestMusicSwitch) == 0x000008, "Wrong alignment on SHAkMusicComponent_RequestMusicSwitch");
static_assert(sizeof(SHAkMusicComponent_RequestMusicSwitch) == 0x000010, "Wrong size on SHAkMusicComponent_RequestMusicSwitch");
static_assert(offsetof(SHAkMusicComponent_RequestMusicSwitch, InContext) == 0x000000, "Member 'SHAkMusicComponent_RequestMusicSwitch::InContext' has a wrong offset!");
static_assert(offsetof(SHAkMusicComponent_RequestMusicSwitch, InSwitch) == 0x000008, "Member 'SHAkMusicComponent_RequestMusicSwitch::InSwitch' has a wrong offset!");

// Function SHProto.SHFXBloodPuddleSubcomp.ProcessOwnerDamage
// 0x0068 (0x0068 - 0x0000)
struct SHFXBloodPuddleSubcomp_ProcessOwnerDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0030(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ShotFromDirection;                                 // 0x0040(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UDamageType*                      DamageType;                                        // 0x0058(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0060(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXBloodPuddleSubcomp_ProcessOwnerDamage) == 0x000008, "Wrong alignment on SHFXBloodPuddleSubcomp_ProcessOwnerDamage");
static_assert(sizeof(SHFXBloodPuddleSubcomp_ProcessOwnerDamage) == 0x000068, "Wrong size on SHFXBloodPuddleSubcomp_ProcessOwnerDamage");
static_assert(offsetof(SHFXBloodPuddleSubcomp_ProcessOwnerDamage, DamagedActor) == 0x000000, "Member 'SHFXBloodPuddleSubcomp_ProcessOwnerDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(SHFXBloodPuddleSubcomp_ProcessOwnerDamage, Damage) == 0x000008, "Member 'SHFXBloodPuddleSubcomp_ProcessOwnerDamage::Damage' has a wrong offset!");
static_assert(offsetof(SHFXBloodPuddleSubcomp_ProcessOwnerDamage, InstigatedBy) == 0x000010, "Member 'SHFXBloodPuddleSubcomp_ProcessOwnerDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(SHFXBloodPuddleSubcomp_ProcessOwnerDamage, HitLocation) == 0x000018, "Member 'SHFXBloodPuddleSubcomp_ProcessOwnerDamage::HitLocation' has a wrong offset!");
static_assert(offsetof(SHFXBloodPuddleSubcomp_ProcessOwnerDamage, HitComponent) == 0x000030, "Member 'SHFXBloodPuddleSubcomp_ProcessOwnerDamage::HitComponent' has a wrong offset!");
static_assert(offsetof(SHFXBloodPuddleSubcomp_ProcessOwnerDamage, BoneName) == 0x000038, "Member 'SHFXBloodPuddleSubcomp_ProcessOwnerDamage::BoneName' has a wrong offset!");
static_assert(offsetof(SHFXBloodPuddleSubcomp_ProcessOwnerDamage, ShotFromDirection) == 0x000040, "Member 'SHFXBloodPuddleSubcomp_ProcessOwnerDamage::ShotFromDirection' has a wrong offset!");
static_assert(offsetof(SHFXBloodPuddleSubcomp_ProcessOwnerDamage, DamageType) == 0x000058, "Member 'SHFXBloodPuddleSubcomp_ProcessOwnerDamage::DamageType' has a wrong offset!");
static_assert(offsetof(SHFXBloodPuddleSubcomp_ProcessOwnerDamage, DamageCauser) == 0x000060, "Member 'SHFXBloodPuddleSubcomp_ProcessOwnerDamage::DamageCauser' has a wrong offset!");

// Function SHProto.SHFXBloodPuddleSubcomp.SetBloodPuddleBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHFXBloodPuddleSubcomp_SetBloodPuddleBlocked final
{
public:
	bool                                          IsBlock;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXBloodPuddleSubcomp_SetBloodPuddleBlocked) == 0x000008, "Wrong alignment on SHFXBloodPuddleSubcomp_SetBloodPuddleBlocked");
static_assert(sizeof(SHFXBloodPuddleSubcomp_SetBloodPuddleBlocked) == 0x000010, "Wrong size on SHFXBloodPuddleSubcomp_SetBloodPuddleBlocked");
static_assert(offsetof(SHFXBloodPuddleSubcomp_SetBloodPuddleBlocked, IsBlock) == 0x000000, "Member 'SHFXBloodPuddleSubcomp_SetBloodPuddleBlocked::IsBlock' has a wrong offset!");
static_assert(offsetof(SHFXBloodPuddleSubcomp_SetBloodPuddleBlocked, Object) == 0x000008, "Member 'SHFXBloodPuddleSubcomp_SetBloodPuddleBlocked::Object' has a wrong offset!");

// Function SHProto.SHFXBloodPuddleSubcomp.GetCurrentBloodPuddle
// 0x0008 (0x0008 - 0x0000)
struct SHFXBloodPuddleSubcomp_GetCurrentBloodPuddle final
{
public:
	class ASHBloodPuddle*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXBloodPuddleSubcomp_GetCurrentBloodPuddle) == 0x000008, "Wrong alignment on SHFXBloodPuddleSubcomp_GetCurrentBloodPuddle");
static_assert(sizeof(SHFXBloodPuddleSubcomp_GetCurrentBloodPuddle) == 0x000008, "Wrong size on SHFXBloodPuddleSubcomp_GetCurrentBloodPuddle");
static_assert(offsetof(SHFXBloodPuddleSubcomp_GetCurrentBloodPuddle, ReturnValue) == 0x000000, "Member 'SHFXBloodPuddleSubcomp_GetCurrentBloodPuddle::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXBloodPuddleSubcomp.IsBloodPuddleBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHFXBloodPuddleSubcomp_IsBloodPuddleBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXBloodPuddleSubcomp_IsBloodPuddleBlocked) == 0x000001, "Wrong alignment on SHFXBloodPuddleSubcomp_IsBloodPuddleBlocked");
static_assert(sizeof(SHFXBloodPuddleSubcomp_IsBloodPuddleBlocked) == 0x000001, "Wrong size on SHFXBloodPuddleSubcomp_IsBloodPuddleBlocked");
static_assert(offsetof(SHFXBloodPuddleSubcomp_IsBloodPuddleBlocked, ReturnValue) == 0x000000, "Member 'SHFXBloodPuddleSubcomp_IsBloodPuddleBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXBloodPuddleSubcomp.IsBloodPuddleBlockedBy
// 0x0010 (0x0010 - 0x0000)
struct SHFXBloodPuddleSubcomp_IsBloodPuddleBlockedBy final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFXBloodPuddleSubcomp_IsBloodPuddleBlockedBy) == 0x000008, "Wrong alignment on SHFXBloodPuddleSubcomp_IsBloodPuddleBlockedBy");
static_assert(sizeof(SHFXBloodPuddleSubcomp_IsBloodPuddleBlockedBy) == 0x000010, "Wrong size on SHFXBloodPuddleSubcomp_IsBloodPuddleBlockedBy");
static_assert(offsetof(SHFXBloodPuddleSubcomp_IsBloodPuddleBlockedBy, Object) == 0x000000, "Member 'SHFXBloodPuddleSubcomp_IsBloodPuddleBlockedBy::Object' has a wrong offset!");
static_assert(offsetof(SHFXBloodPuddleSubcomp_IsBloodPuddleBlockedBy, ReturnValue) == 0x000008, "Member 'SHFXBloodPuddleSubcomp_IsBloodPuddleBlockedBy::ReturnValue' has a wrong offset!");

// Function SHProto.SHRainManagerComponent.SetRainingBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHRainManagerComponent_SetRainingBlocked final
{
public:
	bool                                          IsBlock;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHRainManagerComponent_SetRainingBlocked) == 0x000008, "Wrong alignment on SHRainManagerComponent_SetRainingBlocked");
static_assert(sizeof(SHRainManagerComponent_SetRainingBlocked) == 0x000010, "Wrong size on SHRainManagerComponent_SetRainingBlocked");
static_assert(offsetof(SHRainManagerComponent_SetRainingBlocked, IsBlock) == 0x000000, "Member 'SHRainManagerComponent_SetRainingBlocked::IsBlock' has a wrong offset!");
static_assert(offsetof(SHRainManagerComponent_SetRainingBlocked, Object) == 0x000008, "Member 'SHRainManagerComponent_SetRainingBlocked::Object' has a wrong offset!");

// Function SHProto.SHRainManagerComponent.SetRainSplashesBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHRainManagerComponent_SetRainSplashesBlocked final
{
public:
	bool                                          IsBlock;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHRainManagerComponent_SetRainSplashesBlocked) == 0x000008, "Wrong alignment on SHRainManagerComponent_SetRainSplashesBlocked");
static_assert(sizeof(SHRainManagerComponent_SetRainSplashesBlocked) == 0x000010, "Wrong size on SHRainManagerComponent_SetRainSplashesBlocked");
static_assert(offsetof(SHRainManagerComponent_SetRainSplashesBlocked, IsBlock) == 0x000000, "Member 'SHRainManagerComponent_SetRainSplashesBlocked::IsBlock' has a wrong offset!");
static_assert(offsetof(SHRainManagerComponent_SetRainSplashesBlocked, Object) == 0x000008, "Member 'SHRainManagerComponent_SetRainSplashesBlocked::Object' has a wrong offset!");

// Function SHProto.SHRainManagerComponent.GetEncompassedRainVolume
// 0x0020 (0x0020 - 0x0000)
struct SHRainManagerComponent_GetEncompassedRainVolume final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHGameplayRainVolume*                  ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHRainManagerComponent_GetEncompassedRainVolume) == 0x000008, "Wrong alignment on SHRainManagerComponent_GetEncompassedRainVolume");
static_assert(sizeof(SHRainManagerComponent_GetEncompassedRainVolume) == 0x000020, "Wrong size on SHRainManagerComponent_GetEncompassedRainVolume");
static_assert(offsetof(SHRainManagerComponent_GetEncompassedRainVolume, InLocation) == 0x000000, "Member 'SHRainManagerComponent_GetEncompassedRainVolume::InLocation' has a wrong offset!");
static_assert(offsetof(SHRainManagerComponent_GetEncompassedRainVolume, ReturnValue) == 0x000018, "Member 'SHRainManagerComponent_GetEncompassedRainVolume::ReturnValue' has a wrong offset!");

// Function SHProto.SHRainManagerComponent.GetRegisteredRainVolumeCount
// 0x0004 (0x0004 - 0x0000)
struct SHRainManagerComponent_GetRegisteredRainVolumeCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHRainManagerComponent_GetRegisteredRainVolumeCount) == 0x000004, "Wrong alignment on SHRainManagerComponent_GetRegisteredRainVolumeCount");
static_assert(sizeof(SHRainManagerComponent_GetRegisteredRainVolumeCount) == 0x000004, "Wrong size on SHRainManagerComponent_GetRegisteredRainVolumeCount");
static_assert(offsetof(SHRainManagerComponent_GetRegisteredRainVolumeCount, ReturnValue) == 0x000000, "Member 'SHRainManagerComponent_GetRegisteredRainVolumeCount::ReturnValue' has a wrong offset!");

// Function SHProto.SHRainManagerComponent.IsRainingBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHRainManagerComponent_IsRainingBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHRainManagerComponent_IsRainingBlocked) == 0x000001, "Wrong alignment on SHRainManagerComponent_IsRainingBlocked");
static_assert(sizeof(SHRainManagerComponent_IsRainingBlocked) == 0x000001, "Wrong size on SHRainManagerComponent_IsRainingBlocked");
static_assert(offsetof(SHRainManagerComponent_IsRainingBlocked, ReturnValue) == 0x000000, "Member 'SHRainManagerComponent_IsRainingBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHRainManagerComponent.IsRainingBlockedBy
// 0x0010 (0x0010 - 0x0000)
struct SHRainManagerComponent_IsRainingBlockedBy final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHRainManagerComponent_IsRainingBlockedBy) == 0x000008, "Wrong alignment on SHRainManagerComponent_IsRainingBlockedBy");
static_assert(sizeof(SHRainManagerComponent_IsRainingBlockedBy) == 0x000010, "Wrong size on SHRainManagerComponent_IsRainingBlockedBy");
static_assert(offsetof(SHRainManagerComponent_IsRainingBlockedBy, Object) == 0x000000, "Member 'SHRainManagerComponent_IsRainingBlockedBy::Object' has a wrong offset!");
static_assert(offsetof(SHRainManagerComponent_IsRainingBlockedBy, ReturnValue) == 0x000008, "Member 'SHRainManagerComponent_IsRainingBlockedBy::ReturnValue' has a wrong offset!");

// Function SHProto.SHRainManagerComponent.IsRainSplashesBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHRainManagerComponent_IsRainSplashesBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHRainManagerComponent_IsRainSplashesBlocked) == 0x000001, "Wrong alignment on SHRainManagerComponent_IsRainSplashesBlocked");
static_assert(sizeof(SHRainManagerComponent_IsRainSplashesBlocked) == 0x000001, "Wrong size on SHRainManagerComponent_IsRainSplashesBlocked");
static_assert(offsetof(SHRainManagerComponent_IsRainSplashesBlocked, ReturnValue) == 0x000000, "Member 'SHRainManagerComponent_IsRainSplashesBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHRainManagerComponent.IsRainSplashesBlockedBy
// 0x0010 (0x0010 - 0x0000)
struct SHRainManagerComponent_IsRainSplashesBlockedBy final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHRainManagerComponent_IsRainSplashesBlockedBy) == 0x000008, "Wrong alignment on SHRainManagerComponent_IsRainSplashesBlockedBy");
static_assert(sizeof(SHRainManagerComponent_IsRainSplashesBlockedBy) == 0x000010, "Wrong size on SHRainManagerComponent_IsRainSplashesBlockedBy");
static_assert(offsetof(SHRainManagerComponent_IsRainSplashesBlockedBy, Object) == 0x000000, "Member 'SHRainManagerComponent_IsRainSplashesBlockedBy::Object' has a wrong offset!");
static_assert(offsetof(SHRainManagerComponent_IsRainSplashesBlockedBy, ReturnValue) == 0x000008, "Member 'SHRainManagerComponent_IsRainSplashesBlockedBy::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayAdaptiveTriggersManager.SetEnabled
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayAdaptiveTriggersManager_SetEnabled final
{
public:
	bool                                          InEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Object;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayAdaptiveTriggersManager_SetEnabled) == 0x000008, "Wrong alignment on SHCharacterPlayAdaptiveTriggersManager_SetEnabled");
static_assert(sizeof(SHCharacterPlayAdaptiveTriggersManager_SetEnabled) == 0x000010, "Wrong size on SHCharacterPlayAdaptiveTriggersManager_SetEnabled");
static_assert(offsetof(SHCharacterPlayAdaptiveTriggersManager_SetEnabled, InEnable) == 0x000000, "Member 'SHCharacterPlayAdaptiveTriggersManager_SetEnabled::InEnable' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayAdaptiveTriggersManager_SetEnabled, Object) == 0x000008, "Member 'SHCharacterPlayAdaptiveTriggersManager_SetEnabled::Object' has a wrong offset!");

// Function SHProto.SHCharacterPlayAdaptiveTriggersManager.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayAdaptiveTriggersManager_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayAdaptiveTriggersManager_IsEnabled) == 0x000001, "Wrong alignment on SHCharacterPlayAdaptiveTriggersManager_IsEnabled");
static_assert(sizeof(SHCharacterPlayAdaptiveTriggersManager_IsEnabled) == 0x000001, "Wrong size on SHCharacterPlayAdaptiveTriggersManager_IsEnabled");
static_assert(offsetof(SHCharacterPlayAdaptiveTriggersManager_IsEnabled, ReturnValue) == 0x000000, "Member 'SHCharacterPlayAdaptiveTriggersManager_IsEnabled::ReturnValue' has a wrong offset!");

// Function SHProto.SHAkSlidingDoorComponent.ProcessOnLockedAnimPlayedNative
// 0x0008 (0x0008 - 0x0000)
struct SHAkSlidingDoorComponent_ProcessOnLockedAnimPlayedNative final
{
public:
	class USHSlidingDoorAnimationsComponent*      SlidingDoorAnimComponent;                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAkSlidingDoorComponent_ProcessOnLockedAnimPlayedNative) == 0x000008, "Wrong alignment on SHAkSlidingDoorComponent_ProcessOnLockedAnimPlayedNative");
static_assert(sizeof(SHAkSlidingDoorComponent_ProcessOnLockedAnimPlayedNative) == 0x000008, "Wrong size on SHAkSlidingDoorComponent_ProcessOnLockedAnimPlayedNative");
static_assert(offsetof(SHAkSlidingDoorComponent_ProcessOnLockedAnimPlayedNative, SlidingDoorAnimComponent) == 0x000000, "Member 'SHAkSlidingDoorComponent_ProcessOnLockedAnimPlayedNative::SlidingDoorAnimComponent' has a wrong offset!");

// Function SHProto.SHAkSlidingDoorComponent.ProcessOnOpenAnimPlayedNative
// 0x0008 (0x0008 - 0x0000)
struct SHAkSlidingDoorComponent_ProcessOnOpenAnimPlayedNative final
{
public:
	class USHSlidingDoorAnimationsComponent*      SlidingDoorAnimComponent;                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAkSlidingDoorComponent_ProcessOnOpenAnimPlayedNative) == 0x000008, "Wrong alignment on SHAkSlidingDoorComponent_ProcessOnOpenAnimPlayedNative");
static_assert(sizeof(SHAkSlidingDoorComponent_ProcessOnOpenAnimPlayedNative) == 0x000008, "Wrong size on SHAkSlidingDoorComponent_ProcessOnOpenAnimPlayedNative");
static_assert(offsetof(SHAkSlidingDoorComponent_ProcessOnOpenAnimPlayedNative, SlidingDoorAnimComponent) == 0x000000, "Member 'SHAkSlidingDoorComponent_ProcessOnOpenAnimPlayedNative::SlidingDoorAnimComponent' has a wrong offset!");

// Function SHProto.SHCharacterPlayTutorialsComponent.SHDebug_Character_Tutorials_RequestShowTutorial
// 0x0004 (0x0004 - 0x0000)
struct SHCharacterPlayTutorialsComponent_SHDebug_Character_Tutorials_RequestShowTutorial final
{
public:
	int32                                         TutorialEnumAsInt;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayTutorialsComponent_SHDebug_Character_Tutorials_RequestShowTutorial) == 0x000004, "Wrong alignment on SHCharacterPlayTutorialsComponent_SHDebug_Character_Tutorials_RequestShowTutorial");
static_assert(sizeof(SHCharacterPlayTutorialsComponent_SHDebug_Character_Tutorials_RequestShowTutorial) == 0x000004, "Wrong size on SHCharacterPlayTutorialsComponent_SHDebug_Character_Tutorials_RequestShowTutorial");
static_assert(offsetof(SHCharacterPlayTutorialsComponent_SHDebug_Character_Tutorials_RequestShowTutorial, TutorialEnumAsInt) == 0x000000, "Member 'SHCharacterPlayTutorialsComponent_SHDebug_Character_Tutorials_RequestShowTutorial::TutorialEnumAsInt' has a wrong offset!");

// Function SHProto.SHCharacterPlayTutorialsComponent.IsTutorialActionRegistered
// 0x0002 (0x0002 - 0x0000)
struct SHCharacterPlayTutorialsComponent_IsTutorialActionRegistered final
{
public:
	ESHGameplayTutorialEnum                       InTutorialEnum;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayTutorialsComponent_IsTutorialActionRegistered) == 0x000001, "Wrong alignment on SHCharacterPlayTutorialsComponent_IsTutorialActionRegistered");
static_assert(sizeof(SHCharacterPlayTutorialsComponent_IsTutorialActionRegistered) == 0x000002, "Wrong size on SHCharacterPlayTutorialsComponent_IsTutorialActionRegistered");
static_assert(offsetof(SHCharacterPlayTutorialsComponent_IsTutorialActionRegistered, InTutorialEnum) == 0x000000, "Member 'SHCharacterPlayTutorialsComponent_IsTutorialActionRegistered::InTutorialEnum' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayTutorialsComponent_IsTutorialActionRegistered, ReturnValue) == 0x000001, "Member 'SHCharacterPlayTutorialsComponent_IsTutorialActionRegistered::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlaySpringArmComponent.ClearCustomCameraData
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlaySpringArmComponent_ClearCustomCameraData final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Instant;                                           // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCharacterPlaySpringArmComponent_ClearCustomCameraData) == 0x000008, "Wrong alignment on SHCharacterPlaySpringArmComponent_ClearCustomCameraData");
static_assert(sizeof(SHCharacterPlaySpringArmComponent_ClearCustomCameraData) == 0x000010, "Wrong size on SHCharacterPlaySpringArmComponent_ClearCustomCameraData");
static_assert(offsetof(SHCharacterPlaySpringArmComponent_ClearCustomCameraData, Object) == 0x000000, "Member 'SHCharacterPlaySpringArmComponent_ClearCustomCameraData::Object' has a wrong offset!");
static_assert(offsetof(SHCharacterPlaySpringArmComponent_ClearCustomCameraData, Instant) == 0x000008, "Member 'SHCharacterPlaySpringArmComponent_ClearCustomCameraData::Instant' has a wrong offset!");

// Function SHProto.SHCharacterPlaySpringArmComponent.ReneableCustomCameraData
// 0x0020 (0x0020 - 0x0000)
struct SHCharacterPlaySpringArmComponent_ReneableCustomCameraData final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InCustomCameraName;                                // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCharacterPlaySpringArmComponent_ReneableCustomCameraData) == 0x000008, "Wrong alignment on SHCharacterPlaySpringArmComponent_ReneableCustomCameraData");
static_assert(sizeof(SHCharacterPlaySpringArmComponent_ReneableCustomCameraData) == 0x000020, "Wrong size on SHCharacterPlaySpringArmComponent_ReneableCustomCameraData");
static_assert(offsetof(SHCharacterPlaySpringArmComponent_ReneableCustomCameraData, Object) == 0x000000, "Member 'SHCharacterPlaySpringArmComponent_ReneableCustomCameraData::Object' has a wrong offset!");
static_assert(offsetof(SHCharacterPlaySpringArmComponent_ReneableCustomCameraData, InCustomCameraName) == 0x000008, "Member 'SHCharacterPlaySpringArmComponent_ReneableCustomCameraData::InCustomCameraName' has a wrong offset!");
static_assert(offsetof(SHCharacterPlaySpringArmComponent_ReneableCustomCameraData, ReturnValue) == 0x000018, "Member 'SHCharacterPlaySpringArmComponent_ReneableCustomCameraData::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlaySpringArmComponent.RequestRefreshState
// 0x0008 (0x0008 - 0x0000)
struct SHCharacterPlaySpringArmComponent_RequestRefreshState final
{
public:
	const class UObject*                          Requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlaySpringArmComponent_RequestRefreshState) == 0x000008, "Wrong alignment on SHCharacterPlaySpringArmComponent_RequestRefreshState");
static_assert(sizeof(SHCharacterPlaySpringArmComponent_RequestRefreshState) == 0x000008, "Wrong size on SHCharacterPlaySpringArmComponent_RequestRefreshState");
static_assert(offsetof(SHCharacterPlaySpringArmComponent_RequestRefreshState, Requester) == 0x000000, "Member 'SHCharacterPlaySpringArmComponent_RequestRefreshState::Requester' has a wrong offset!");

// Function SHProto.SHCharacterPlaySpringArmComponent.SetCustomCameraData
// 0x00C8 (0x00C8 - 0x0000)
struct SHCharacterPlaySpringArmComponent_SetCustomCameraData final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InCustomCameraName;                                // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSHCameraDataStruct                    InCustomCameraData;                                // 0x0018(0x0058)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSHCameraDataStruct                    InCustomCollisionData;                             // 0x0070(0x0058)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlaySpringArmComponent_SetCustomCameraData) == 0x000008, "Wrong alignment on SHCharacterPlaySpringArmComponent_SetCustomCameraData");
static_assert(sizeof(SHCharacterPlaySpringArmComponent_SetCustomCameraData) == 0x0000C8, "Wrong size on SHCharacterPlaySpringArmComponent_SetCustomCameraData");
static_assert(offsetof(SHCharacterPlaySpringArmComponent_SetCustomCameraData, Object) == 0x000000, "Member 'SHCharacterPlaySpringArmComponent_SetCustomCameraData::Object' has a wrong offset!");
static_assert(offsetof(SHCharacterPlaySpringArmComponent_SetCustomCameraData, InCustomCameraName) == 0x000008, "Member 'SHCharacterPlaySpringArmComponent_SetCustomCameraData::InCustomCameraName' has a wrong offset!");
static_assert(offsetof(SHCharacterPlaySpringArmComponent_SetCustomCameraData, InCustomCameraData) == 0x000018, "Member 'SHCharacterPlaySpringArmComponent_SetCustomCameraData::InCustomCameraData' has a wrong offset!");
static_assert(offsetof(SHCharacterPlaySpringArmComponent_SetCustomCameraData, InCustomCollisionData) == 0x000070, "Member 'SHCharacterPlaySpringArmComponent_SetCustomCameraData::InCustomCollisionData' has a wrong offset!");

// Function SHProto.SHCharacterPlaySpringArmComponent.GetCustomCameraBlendAlpha
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlaySpringArmComponent_GetCustomCameraBlendAlpha final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCharacterPlaySpringArmComponent_GetCustomCameraBlendAlpha) == 0x000008, "Wrong alignment on SHCharacterPlaySpringArmComponent_GetCustomCameraBlendAlpha");
static_assert(sizeof(SHCharacterPlaySpringArmComponent_GetCustomCameraBlendAlpha) == 0x000010, "Wrong size on SHCharacterPlaySpringArmComponent_GetCustomCameraBlendAlpha");
static_assert(offsetof(SHCharacterPlaySpringArmComponent_GetCustomCameraBlendAlpha, Object) == 0x000000, "Member 'SHCharacterPlaySpringArmComponent_GetCustomCameraBlendAlpha::Object' has a wrong offset!");
static_assert(offsetof(SHCharacterPlaySpringArmComponent_GetCustomCameraBlendAlpha, ReturnValue) == 0x000008, "Member 'SHCharacterPlaySpringArmComponent_GetCustomCameraBlendAlpha::ReturnValue' has a wrong offset!");

// Function SHProto.SHValve.ProcessAnimInstBeginFinishInteraction
// 0x0008 (0x0008 - 0x0000)
struct SHValve_ProcessAnimInstBeginFinishInteraction final
{
public:
	class USHValveAnimInstance*                   AnimInstPtr;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHValve_ProcessAnimInstBeginFinishInteraction) == 0x000008, "Wrong alignment on SHValve_ProcessAnimInstBeginFinishInteraction");
static_assert(sizeof(SHValve_ProcessAnimInstBeginFinishInteraction) == 0x000008, "Wrong size on SHValve_ProcessAnimInstBeginFinishInteraction");
static_assert(offsetof(SHValve_ProcessAnimInstBeginFinishInteraction, AnimInstPtr) == 0x000000, "Member 'SHValve_ProcessAnimInstBeginFinishInteraction::AnimInstPtr' has a wrong offset!");

// Function SHProto.SHValve.ProcessAnimInstChangedProgressPhase
// 0x0010 (0x0010 - 0x0000)
struct SHValve_ProcessAnimInstChangedProgressPhase final
{
public:
	class USHValveAnimInstance*                   AnimInstPtr;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPhaseNumber;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasStarted;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHValve_ProcessAnimInstChangedProgressPhase) == 0x000008, "Wrong alignment on SHValve_ProcessAnimInstChangedProgressPhase");
static_assert(sizeof(SHValve_ProcessAnimInstChangedProgressPhase) == 0x000010, "Wrong size on SHValve_ProcessAnimInstChangedProgressPhase");
static_assert(offsetof(SHValve_ProcessAnimInstChangedProgressPhase, AnimInstPtr) == 0x000000, "Member 'SHValve_ProcessAnimInstChangedProgressPhase::AnimInstPtr' has a wrong offset!");
static_assert(offsetof(SHValve_ProcessAnimInstChangedProgressPhase, InPhaseNumber) == 0x000008, "Member 'SHValve_ProcessAnimInstChangedProgressPhase::InPhaseNumber' has a wrong offset!");
static_assert(offsetof(SHValve_ProcessAnimInstChangedProgressPhase, bHasStarted) == 0x00000C, "Member 'SHValve_ProcessAnimInstChangedProgressPhase::bHasStarted' has a wrong offset!");

// Function SHProto.SHValve.ProcessAnimInstFinishedInteraction
// 0x0008 (0x0008 - 0x0000)
struct SHValve_ProcessAnimInstFinishedInteraction final
{
public:
	class USHValveAnimInstance*                   AnimInstPtr;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHValve_ProcessAnimInstFinishedInteraction) == 0x000008, "Wrong alignment on SHValve_ProcessAnimInstFinishedInteraction");
static_assert(sizeof(SHValve_ProcessAnimInstFinishedInteraction) == 0x000008, "Wrong size on SHValve_ProcessAnimInstFinishedInteraction");
static_assert(offsetof(SHValve_ProcessAnimInstFinishedInteraction, AnimInstPtr) == 0x000000, "Member 'SHValve_ProcessAnimInstFinishedInteraction::AnimInstPtr' has a wrong offset!");

// Function SHProto.SHValve.ProcessAnimInstStartedInteraction
// 0x0008 (0x0008 - 0x0000)
struct SHValve_ProcessAnimInstStartedInteraction final
{
public:
	class USHValveAnimInstance*                   AnimInstPtr;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHValve_ProcessAnimInstStartedInteraction) == 0x000008, "Wrong alignment on SHValve_ProcessAnimInstStartedInteraction");
static_assert(sizeof(SHValve_ProcessAnimInstStartedInteraction) == 0x000008, "Wrong size on SHValve_ProcessAnimInstStartedInteraction");
static_assert(offsetof(SHValve_ProcessAnimInstStartedInteraction, AnimInstPtr) == 0x000000, "Member 'SHValve_ProcessAnimInstStartedInteraction::AnimInstPtr' has a wrong offset!");

// Function SHProto.SHValve.ProcessFocusableInputActionEvent
// 0x0008 (0x0008 - 0x0000)
struct SHValve_ProcessFocusableInputActionEvent final
{
public:
	ESHFocusableInputActionTypeEnum               InputActionType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         KeyValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHValve_ProcessFocusableInputActionEvent) == 0x000004, "Wrong alignment on SHValve_ProcessFocusableInputActionEvent");
static_assert(sizeof(SHValve_ProcessFocusableInputActionEvent) == 0x000008, "Wrong size on SHValve_ProcessFocusableInputActionEvent");
static_assert(offsetof(SHValve_ProcessFocusableInputActionEvent, InputActionType) == 0x000000, "Member 'SHValve_ProcessFocusableInputActionEvent::InputActionType' has a wrong offset!");
static_assert(offsetof(SHValve_ProcessFocusableInputActionEvent, KeyValue) == 0x000004, "Member 'SHValve_ProcessFocusableInputActionEvent::KeyValue' has a wrong offset!");

// Function SHProto.SHValve.ProcessInteractingCharacterCombatInputModeChanged
// 0x0008 (0x0008 - 0x0000)
struct SHValve_ProcessInteractingCharacterCombatInputModeChanged final
{
public:
	class USHCharacterPlayCombatComponent*        CombatComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHValve_ProcessInteractingCharacterCombatInputModeChanged) == 0x000008, "Wrong alignment on SHValve_ProcessInteractingCharacterCombatInputModeChanged");
static_assert(sizeof(SHValve_ProcessInteractingCharacterCombatInputModeChanged) == 0x000008, "Wrong size on SHValve_ProcessInteractingCharacterCombatInputModeChanged");
static_assert(offsetof(SHValve_ProcessInteractingCharacterCombatInputModeChanged, CombatComp) == 0x000000, "Member 'SHValve_ProcessInteractingCharacterCombatInputModeChanged::CombatComp' has a wrong offset!");

// Function SHProto.SHValve.ProcessInteractingCharacterReceiveDamage
// 0x0008 (0x0008 - 0x0000)
struct SHValve_ProcessInteractingCharacterReceiveDamage final
{
public:
	class USHCharacterPlayCombatComponent*        CombatComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHValve_ProcessInteractingCharacterReceiveDamage) == 0x000008, "Wrong alignment on SHValve_ProcessInteractingCharacterReceiveDamage");
static_assert(sizeof(SHValve_ProcessInteractingCharacterReceiveDamage) == 0x000008, "Wrong size on SHValve_ProcessInteractingCharacterReceiveDamage");
static_assert(offsetof(SHValve_ProcessInteractingCharacterReceiveDamage, CombatComp) == 0x000000, "Member 'SHValve_ProcessInteractingCharacterReceiveDamage::CombatComp' has a wrong offset!");

// Function SHProto.SHValve.ProcessInteractionGenericGrabbed
// 0x0010 (0x0010 - 0x0000)
struct SHValve_ProcessInteractionGenericGrabbed final
{
public:
	class USHInteractionGenericComponent*         Generic;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHCharacterPlay*                       Character;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHValve_ProcessInteractionGenericGrabbed) == 0x000008, "Wrong alignment on SHValve_ProcessInteractionGenericGrabbed");
static_assert(sizeof(SHValve_ProcessInteractionGenericGrabbed) == 0x000010, "Wrong size on SHValve_ProcessInteractionGenericGrabbed");
static_assert(offsetof(SHValve_ProcessInteractionGenericGrabbed, Generic) == 0x000000, "Member 'SHValve_ProcessInteractionGenericGrabbed::Generic' has a wrong offset!");
static_assert(offsetof(SHValve_ProcessInteractionGenericGrabbed, Character) == 0x000008, "Member 'SHValve_ProcessInteractionGenericGrabbed::Character' has a wrong offset!");

// Function SHProto.SHValve.ProcessInteractionManagerInitialized
// 0x0008 (0x0008 - 0x0000)
struct SHValve_ProcessInteractionManagerInitialized final
{
public:
	class USHInteractionManagerComponent*         Manager;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHValve_ProcessInteractionManagerInitialized) == 0x000008, "Wrong alignment on SHValve_ProcessInteractionManagerInitialized");
static_assert(sizeof(SHValve_ProcessInteractionManagerInitialized) == 0x000008, "Wrong size on SHValve_ProcessInteractionManagerInitialized");
static_assert(offsetof(SHValve_ProcessInteractionManagerInitialized, Manager) == 0x000000, "Member 'SHValve_ProcessInteractionManagerInitialized::Manager' has a wrong offset!");

// Function SHProto.SHValve.ProcessMoveCharacterToSpotFinished
// 0x0001 (0x0001 - 0x0000)
struct SHValve_ProcessMoveCharacterToSpotFinished final
{
public:
	bool                                          WasCompleted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHValve_ProcessMoveCharacterToSpotFinished) == 0x000001, "Wrong alignment on SHValve_ProcessMoveCharacterToSpotFinished");
static_assert(sizeof(SHValve_ProcessMoveCharacterToSpotFinished) == 0x000001, "Wrong size on SHValve_ProcessMoveCharacterToSpotFinished");
static_assert(offsetof(SHValve_ProcessMoveCharacterToSpotFinished, WasCompleted) == 0x000000, "Member 'SHValve_ProcessMoveCharacterToSpotFinished::WasCompleted' has a wrong offset!");

// Function SHProto.SHValve.ProcessProximityBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct SHValve_ProcessProximityBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FromSweep;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHValve_ProcessProximityBeginOverlap) == 0x000008, "Wrong alignment on SHValve_ProcessProximityBeginOverlap");
static_assert(sizeof(SHValve_ProcessProximityBeginOverlap) == 0x000108, "Wrong size on SHValve_ProcessProximityBeginOverlap");
static_assert(offsetof(SHValve_ProcessProximityBeginOverlap, OverlappedComponent) == 0x000000, "Member 'SHValve_ProcessProximityBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SHValve_ProcessProximityBeginOverlap, OtherActor) == 0x000008, "Member 'SHValve_ProcessProximityBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SHValve_ProcessProximityBeginOverlap, OtherComponent) == 0x000010, "Member 'SHValve_ProcessProximityBeginOverlap::OtherComponent' has a wrong offset!");
static_assert(offsetof(SHValve_ProcessProximityBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'SHValve_ProcessProximityBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SHValve_ProcessProximityBeginOverlap, FromSweep) == 0x00001C, "Member 'SHValve_ProcessProximityBeginOverlap::FromSweep' has a wrong offset!");
static_assert(offsetof(SHValve_ProcessProximityBeginOverlap, SweepResult) == 0x000020, "Member 'SHValve_ProcessProximityBeginOverlap::SweepResult' has a wrong offset!");

// Function SHProto.SHValve.ProcessProximityEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct SHValve_ProcessProximityEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHValve_ProcessProximityEndOverlap) == 0x000008, "Wrong alignment on SHValve_ProcessProximityEndOverlap");
static_assert(sizeof(SHValve_ProcessProximityEndOverlap) == 0x000020, "Wrong size on SHValve_ProcessProximityEndOverlap");
static_assert(offsetof(SHValve_ProcessProximityEndOverlap, OverlappedComponent) == 0x000000, "Member 'SHValve_ProcessProximityEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SHValve_ProcessProximityEndOverlap, OtherActor) == 0x000008, "Member 'SHValve_ProcessProximityEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SHValve_ProcessProximityEndOverlap, OtherComponent) == 0x000010, "Member 'SHValve_ProcessProximityEndOverlap::OtherComponent' has a wrong offset!");
static_assert(offsetof(SHValve_ProcessProximityEndOverlap, OtherBodyIndex) == 0x000018, "Member 'SHValve_ProcessProximityEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function SHProto.SHValve.GetCurrentPhaseNumber
// 0x0004 (0x0004 - 0x0000)
struct SHValve_GetCurrentPhaseNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHValve_GetCurrentPhaseNumber) == 0x000004, "Wrong alignment on SHValve_GetCurrentPhaseNumber");
static_assert(sizeof(SHValve_GetCurrentPhaseNumber) == 0x000004, "Wrong size on SHValve_GetCurrentPhaseNumber");
static_assert(offsetof(SHValve_GetCurrentPhaseNumber, ReturnValue) == 0x000000, "Member 'SHValve_GetCurrentPhaseNumber::ReturnValue' has a wrong offset!");

// Function SHProto.SHValve.GetTotalRotatedAngle
// 0x0004 (0x0004 - 0x0000)
struct SHValve_GetTotalRotatedAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHValve_GetTotalRotatedAngle) == 0x000004, "Wrong alignment on SHValve_GetTotalRotatedAngle");
static_assert(sizeof(SHValve_GetTotalRotatedAngle) == 0x000004, "Wrong size on SHValve_GetTotalRotatedAngle");
static_assert(offsetof(SHValve_GetTotalRotatedAngle, ReturnValue) == 0x000000, "Member 'SHValve_GetTotalRotatedAngle::ReturnValue' has a wrong offset!");

// Function SHProto.SHValve.IsCompleted
// 0x0001 (0x0001 - 0x0000)
struct SHValve_IsCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHValve_IsCompleted) == 0x000001, "Wrong alignment on SHValve_IsCompleted");
static_assert(sizeof(SHValve_IsCompleted) == 0x000001, "Wrong size on SHValve_IsCompleted");
static_assert(offsetof(SHValve_IsCompleted, ReturnValue) == 0x000000, "Member 'SHValve_IsCompleted::ReturnValue' has a wrong offset!");

// Function SHProto.SHValve.IsInInteraction
// 0x0001 (0x0001 - 0x0000)
struct SHValve_IsInInteraction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHValve_IsInInteraction) == 0x000001, "Wrong alignment on SHValve_IsInInteraction");
static_assert(sizeof(SHValve_IsInInteraction) == 0x000001, "Wrong size on SHValve_IsInInteraction");
static_assert(offsetof(SHValve_IsInInteraction, ReturnValue) == 0x000000, "Member 'SHValve_IsInInteraction::ReturnValue' has a wrong offset!");

// Function SHProto.SHAlreadySeenEndingsEndingFactor.SHDebug_Character_Endings_Factors_AlreadySeenEndings_SetDebugValue
// 0x0004 (0x0004 - 0x0000)
struct SHAlreadySeenEndingsEndingFactor_SHDebug_Character_Endings_Factors_AlreadySeenEndings_SetDebugValue final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAlreadySeenEndingsEndingFactor_SHDebug_Character_Endings_Factors_AlreadySeenEndings_SetDebugValue) == 0x000004, "Wrong alignment on SHAlreadySeenEndingsEndingFactor_SHDebug_Character_Endings_Factors_AlreadySeenEndings_SetDebugValue");
static_assert(sizeof(SHAlreadySeenEndingsEndingFactor_SHDebug_Character_Endings_Factors_AlreadySeenEndings_SetDebugValue) == 0x000004, "Wrong size on SHAlreadySeenEndingsEndingFactor_SHDebug_Character_Endings_Factors_AlreadySeenEndings_SetDebugValue");
static_assert(offsetof(SHAlreadySeenEndingsEndingFactor_SHDebug_Character_Endings_Factors_AlreadySeenEndings_SetDebugValue, InValue) == 0x000000, "Member 'SHAlreadySeenEndingsEndingFactor_SHDebug_Character_Endings_Factors_AlreadySeenEndings_SetDebugValue::InValue' has a wrong offset!");

// Function SHProto.SHFirearmAimOffsetAnimInstance.MapRangeClampedWithZeroInTheMidle
// 0x0018 (0x0018 - 0x0000)
struct SHFirearmAimOffsetAnimInstance_MapRangeClampedWithZeroInTheMidle final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRangeA;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRangeB;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutRangeA;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutRangeB;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFirearmAimOffsetAnimInstance_MapRangeClampedWithZeroInTheMidle) == 0x000004, "Wrong alignment on SHFirearmAimOffsetAnimInstance_MapRangeClampedWithZeroInTheMidle");
static_assert(sizeof(SHFirearmAimOffsetAnimInstance_MapRangeClampedWithZeroInTheMidle) == 0x000018, "Wrong size on SHFirearmAimOffsetAnimInstance_MapRangeClampedWithZeroInTheMidle");
static_assert(offsetof(SHFirearmAimOffsetAnimInstance_MapRangeClampedWithZeroInTheMidle, Value) == 0x000000, "Member 'SHFirearmAimOffsetAnimInstance_MapRangeClampedWithZeroInTheMidle::Value' has a wrong offset!");
static_assert(offsetof(SHFirearmAimOffsetAnimInstance_MapRangeClampedWithZeroInTheMidle, InRangeA) == 0x000004, "Member 'SHFirearmAimOffsetAnimInstance_MapRangeClampedWithZeroInTheMidle::InRangeA' has a wrong offset!");
static_assert(offsetof(SHFirearmAimOffsetAnimInstance_MapRangeClampedWithZeroInTheMidle, InRangeB) == 0x000008, "Member 'SHFirearmAimOffsetAnimInstance_MapRangeClampedWithZeroInTheMidle::InRangeB' has a wrong offset!");
static_assert(offsetof(SHFirearmAimOffsetAnimInstance_MapRangeClampedWithZeroInTheMidle, OutRangeA) == 0x00000C, "Member 'SHFirearmAimOffsetAnimInstance_MapRangeClampedWithZeroInTheMidle::OutRangeA' has a wrong offset!");
static_assert(offsetof(SHFirearmAimOffsetAnimInstance_MapRangeClampedWithZeroInTheMidle, OutRangeB) == 0x000010, "Member 'SHFirearmAimOffsetAnimInstance_MapRangeClampedWithZeroInTheMidle::OutRangeB' has a wrong offset!");
static_assert(offsetof(SHFirearmAimOffsetAnimInstance_MapRangeClampedWithZeroInTheMidle, ReturnValue) == 0x000014, "Member 'SHFirearmAimOffsetAnimInstance_MapRangeClampedWithZeroInTheMidle::ReturnValue' has a wrong offset!");

// Function SHProto.SHFirearmAimOffsetAnimInstance.InterruptEquipToAim
// 0x0004 (0x0004 - 0x0000)
struct SHFirearmAimOffsetAnimInstance_InterruptEquipToAim final
{
public:
	float                                         BlendOutTime;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFirearmAimOffsetAnimInstance_InterruptEquipToAim) == 0x000004, "Wrong alignment on SHFirearmAimOffsetAnimInstance_InterruptEquipToAim");
static_assert(sizeof(SHFirearmAimOffsetAnimInstance_InterruptEquipToAim) == 0x000004, "Wrong size on SHFirearmAimOffsetAnimInstance_InterruptEquipToAim");
static_assert(offsetof(SHFirearmAimOffsetAnimInstance_InterruptEquipToAim, BlendOutTime) == 0x000000, "Member 'SHFirearmAimOffsetAnimInstance_InterruptEquipToAim::BlendOutTime' has a wrong offset!");

// Function SHProto.SHFirearmAimOffsetAnimInstance.GetWeapon
// 0x0008 (0x0008 - 0x0000)
struct SHFirearmAimOffsetAnimInstance_GetWeapon final
{
public:
	class ASHItemWeapon*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFirearmAimOffsetAnimInstance_GetWeapon) == 0x000008, "Wrong alignment on SHFirearmAimOffsetAnimInstance_GetWeapon");
static_assert(sizeof(SHFirearmAimOffsetAnimInstance_GetWeapon) == 0x000008, "Wrong size on SHFirearmAimOffsetAnimInstance_GetWeapon");
static_assert(offsetof(SHFirearmAimOffsetAnimInstance_GetWeapon, ReturnValue) == 0x000000, "Member 'SHFirearmAimOffsetAnimInstance_GetWeapon::ReturnValue' has a wrong offset!");

// Function SHProto.SHFirearmAimOffsetAnimInstance.IsAimOffsetEnabled
// 0x0001 (0x0001 - 0x0000)
struct SHFirearmAimOffsetAnimInstance_IsAimOffsetEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFirearmAimOffsetAnimInstance_IsAimOffsetEnabled) == 0x000001, "Wrong alignment on SHFirearmAimOffsetAnimInstance_IsAimOffsetEnabled");
static_assert(sizeof(SHFirearmAimOffsetAnimInstance_IsAimOffsetEnabled) == 0x000001, "Wrong size on SHFirearmAimOffsetAnimInstance_IsAimOffsetEnabled");
static_assert(offsetof(SHFirearmAimOffsetAnimInstance_IsAimOffsetEnabled, ReturnValue) == 0x000000, "Member 'SHFirearmAimOffsetAnimInstance_IsAimOffsetEnabled::ReturnValue' has a wrong offset!");

// Function SHProto.SHFirearmAimOffsetAnimInstance.LongWeaponAimObstacleRangeCheck
// 0x0038 (0x0038 - 0x0000)
struct SHFirearmAimOffsetAnimInstance_LongWeaponAimObstacleRangeCheck final
{
public:
	struct FLongWeaponAimObstacleCheckPayload     Payload;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFirearmAimOffsetAnimInstance_LongWeaponAimObstacleRangeCheck) == 0x000008, "Wrong alignment on SHFirearmAimOffsetAnimInstance_LongWeaponAimObstacleRangeCheck");
static_assert(sizeof(SHFirearmAimOffsetAnimInstance_LongWeaponAimObstacleRangeCheck) == 0x000038, "Wrong size on SHFirearmAimOffsetAnimInstance_LongWeaponAimObstacleRangeCheck");
static_assert(offsetof(SHFirearmAimOffsetAnimInstance_LongWeaponAimObstacleRangeCheck, Payload) == 0x000000, "Member 'SHFirearmAimOffsetAnimInstance_LongWeaponAimObstacleRangeCheck::Payload' has a wrong offset!");
static_assert(offsetof(SHFirearmAimOffsetAnimInstance_LongWeaponAimObstacleRangeCheck, ReturnValue) == 0x000030, "Member 'SHFirearmAimOffsetAnimInstance_LongWeaponAimObstacleRangeCheck::ReturnValue' has a wrong offset!");

// Function SHProto.SHFirearmAimOffsetAnimInstance.LongWeaponAimObstacleSingleCheck
// 0x0038 (0x0038 - 0x0000)
struct SHFirearmAimOffsetAnimInstance_LongWeaponAimObstacleSingleCheck final
{
public:
	struct FLongWeaponAimObstacleCheckPayload     Payload;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFirearmAimOffsetAnimInstance_LongWeaponAimObstacleSingleCheck) == 0x000008, "Wrong alignment on SHFirearmAimOffsetAnimInstance_LongWeaponAimObstacleSingleCheck");
static_assert(sizeof(SHFirearmAimOffsetAnimInstance_LongWeaponAimObstacleSingleCheck) == 0x000038, "Wrong size on SHFirearmAimOffsetAnimInstance_LongWeaponAimObstacleSingleCheck");
static_assert(offsetof(SHFirearmAimOffsetAnimInstance_LongWeaponAimObstacleSingleCheck, Payload) == 0x000000, "Member 'SHFirearmAimOffsetAnimInstance_LongWeaponAimObstacleSingleCheck::Payload' has a wrong offset!");
static_assert(offsetof(SHFirearmAimOffsetAnimInstance_LongWeaponAimObstacleSingleCheck, ReturnValue) == 0x000030, "Member 'SHFirearmAimOffsetAnimInstance_LongWeaponAimObstacleSingleCheck::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayAimOffsetMatchingTool.DrawMuzzleAimTrace
// 0x0008 (0x0008 - 0x0000)
struct SHCharacterPlayAimOffsetMatchingTool_DrawMuzzleAimTrace final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayAimOffsetMatchingTool_DrawMuzzleAimTrace) == 0x000008, "Wrong alignment on SHCharacterPlayAimOffsetMatchingTool_DrawMuzzleAimTrace");
static_assert(sizeof(SHCharacterPlayAimOffsetMatchingTool_DrawMuzzleAimTrace) == 0x000008, "Wrong size on SHCharacterPlayAimOffsetMatchingTool_DrawMuzzleAimTrace");
static_assert(offsetof(SHCharacterPlayAimOffsetMatchingTool_DrawMuzzleAimTrace, WorldContextObject) == 0x000000, "Member 'SHCharacterPlayAimOffsetMatchingTool_DrawMuzzleAimTrace::WorldContextObject' has a wrong offset!");

// Function SHProto.SHCharacterPlayAimOffsetMatchingTool.FakeAimInput
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayAimOffsetMatchingTool_FakeAimInput final
{
public:
	bool                                          Pressed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayAimOffsetMatchingTool_FakeAimInput) == 0x000001, "Wrong alignment on SHCharacterPlayAimOffsetMatchingTool_FakeAimInput");
static_assert(sizeof(SHCharacterPlayAimOffsetMatchingTool_FakeAimInput) == 0x000001, "Wrong size on SHCharacterPlayAimOffsetMatchingTool_FakeAimInput");
static_assert(offsetof(SHCharacterPlayAimOffsetMatchingTool_FakeAimInput, Pressed) == 0x000000, "Member 'SHCharacterPlayAimOffsetMatchingTool_FakeAimInput::Pressed' has a wrong offset!");

// Function SHProto.SHCharacterPlayAimOffsetMatchingTool.FakeRotationInput
// 0x0008 (0x0008 - 0x0000)
struct SHCharacterPlayAimOffsetMatchingTool_FakeRotationInput final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayAimOffsetMatchingTool_FakeRotationInput) == 0x000004, "Wrong alignment on SHCharacterPlayAimOffsetMatchingTool_FakeRotationInput");
static_assert(sizeof(SHCharacterPlayAimOffsetMatchingTool_FakeRotationInput) == 0x000008, "Wrong size on SHCharacterPlayAimOffsetMatchingTool_FakeRotationInput");
static_assert(offsetof(SHCharacterPlayAimOffsetMatchingTool_FakeRotationInput, X) == 0x000000, "Member 'SHCharacterPlayAimOffsetMatchingTool_FakeRotationInput::X' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayAimOffsetMatchingTool_FakeRotationInput, Y) == 0x000004, "Member 'SHCharacterPlayAimOffsetMatchingTool_FakeRotationInput::Y' has a wrong offset!");

// Function SHProto.SHCharacterPlayAimOffsetMatchingTool.GetCameraPitch
// 0x0004 (0x0004 - 0x0000)
struct SHCharacterPlayAimOffsetMatchingTool_GetCameraPitch final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayAimOffsetMatchingTool_GetCameraPitch) == 0x000004, "Wrong alignment on SHCharacterPlayAimOffsetMatchingTool_GetCameraPitch");
static_assert(sizeof(SHCharacterPlayAimOffsetMatchingTool_GetCameraPitch) == 0x000004, "Wrong size on SHCharacterPlayAimOffsetMatchingTool_GetCameraPitch");
static_assert(offsetof(SHCharacterPlayAimOffsetMatchingTool_GetCameraPitch, ReturnValue) == 0x000000, "Member 'SHCharacterPlayAimOffsetMatchingTool_GetCameraPitch::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayAimOffsetMatchingTool.GetCrosshairAimLocation
// 0x0018 (0x0018 - 0x0000)
struct SHCharacterPlayAimOffsetMatchingTool_GetCrosshairAimLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayAimOffsetMatchingTool_GetCrosshairAimLocation) == 0x000008, "Wrong alignment on SHCharacterPlayAimOffsetMatchingTool_GetCrosshairAimLocation");
static_assert(sizeof(SHCharacterPlayAimOffsetMatchingTool_GetCrosshairAimLocation) == 0x000018, "Wrong size on SHCharacterPlayAimOffsetMatchingTool_GetCrosshairAimLocation");
static_assert(offsetof(SHCharacterPlayAimOffsetMatchingTool_GetCrosshairAimLocation, ReturnValue) == 0x000000, "Member 'SHCharacterPlayAimOffsetMatchingTool_GetCrosshairAimLocation::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayAimOffsetMatchingTool.GetMuzzleAimLocation
// 0x0018 (0x0018 - 0x0000)
struct SHCharacterPlayAimOffsetMatchingTool_GetMuzzleAimLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayAimOffsetMatchingTool_GetMuzzleAimLocation) == 0x000008, "Wrong alignment on SHCharacterPlayAimOffsetMatchingTool_GetMuzzleAimLocation");
static_assert(sizeof(SHCharacterPlayAimOffsetMatchingTool_GetMuzzleAimLocation) == 0x000018, "Wrong size on SHCharacterPlayAimOffsetMatchingTool_GetMuzzleAimLocation");
static_assert(offsetof(SHCharacterPlayAimOffsetMatchingTool_GetMuzzleAimLocation, ReturnValue) == 0x000000, "Member 'SHCharacterPlayAimOffsetMatchingTool_GetMuzzleAimLocation::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXNiagaraDecalComponent.SetInitialErode
// 0x0004 (0x0004 - 0x0000)
struct SHFXNiagaraDecalComponent_SetInitialErode final
{
public:
	float                                         InitialErode;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXNiagaraDecalComponent_SetInitialErode) == 0x000004, "Wrong alignment on SHFXNiagaraDecalComponent_SetInitialErode");
static_assert(sizeof(SHFXNiagaraDecalComponent_SetInitialErode) == 0x000004, "Wrong size on SHFXNiagaraDecalComponent_SetInitialErode");
static_assert(offsetof(SHFXNiagaraDecalComponent_SetInitialErode, InitialErode) == 0x000000, "Member 'SHFXNiagaraDecalComponent_SetInitialErode::InitialErode' has a wrong offset!");

// Function SHProto.SHAngelasKnifeInvestigationEndingFactor.SHDebug_Character_Endings_AngelasKnifeInvestigationEndingFactor_SetDebugValue
// 0x0004 (0x0004 - 0x0000)
struct SHAngelasKnifeInvestigationEndingFactor_SHDebug_Character_Endings_AngelasKnifeInvestigationEndingFactor_SetDebugValue final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAngelasKnifeInvestigationEndingFactor_SHDebug_Character_Endings_AngelasKnifeInvestigationEndingFactor_SetDebugValue) == 0x000004, "Wrong alignment on SHAngelasKnifeInvestigationEndingFactor_SHDebug_Character_Endings_AngelasKnifeInvestigationEndingFactor_SetDebugValue");
static_assert(sizeof(SHAngelasKnifeInvestigationEndingFactor_SHDebug_Character_Endings_AngelasKnifeInvestigationEndingFactor_SetDebugValue) == 0x000004, "Wrong size on SHAngelasKnifeInvestigationEndingFactor_SHDebug_Character_Endings_AngelasKnifeInvestigationEndingFactor_SetDebugValue");
static_assert(offsetof(SHAngelasKnifeInvestigationEndingFactor_SHDebug_Character_Endings_AngelasKnifeInvestigationEndingFactor_SetDebugValue, InValue) == 0x000000, "Member 'SHAngelasKnifeInvestigationEndingFactor_SHDebug_Character_Endings_AngelasKnifeInvestigationEndingFactor_SetDebugValue::InValue' has a wrong offset!");

// DelegateFunction SHProto.SHAnimActionExecutiveBase.AnimActionExeBaseBlueprintEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHAnimActionExecutiveBase_AnimActionExeBaseBlueprintEvent__DelegateSignature final
{
public:
	class USHAnimActionExecutiveBase*             AnimActionExePtr;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimActionExecutiveBase_AnimActionExeBaseBlueprintEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHAnimActionExecutiveBase_AnimActionExeBaseBlueprintEvent__DelegateSignature");
static_assert(sizeof(SHAnimActionExecutiveBase_AnimActionExeBaseBlueprintEvent__DelegateSignature) == 0x000008, "Wrong size on SHAnimActionExecutiveBase_AnimActionExeBaseBlueprintEvent__DelegateSignature");
static_assert(offsetof(SHAnimActionExecutiveBase_AnimActionExeBaseBlueprintEvent__DelegateSignature, AnimActionExePtr) == 0x000000, "Member 'SHAnimActionExecutiveBase_AnimActionExeBaseBlueprintEvent__DelegateSignature::AnimActionExePtr' has a wrong offset!");

// Function SHProto.SHAnimActionExecutiveBase.Finish
// 0x0001 (0x0001 - 0x0000)
struct SHAnimActionExecutiveBase_Finish final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimActionExecutiveBase_Finish) == 0x000001, "Wrong alignment on SHAnimActionExecutiveBase_Finish");
static_assert(sizeof(SHAnimActionExecutiveBase_Finish) == 0x000001, "Wrong size on SHAnimActionExecutiveBase_Finish");
static_assert(offsetof(SHAnimActionExecutiveBase_Finish, Success) == 0x000000, "Member 'SHAnimActionExecutiveBase_Finish::Success' has a wrong offset!");

// Function SHProto.SHAnimActionExecutiveBase.OnTick
// 0x0004 (0x0004 - 0x0000)
struct SHAnimActionExecutiveBase_OnTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimActionExecutiveBase_OnTick) == 0x000004, "Wrong alignment on SHAnimActionExecutiveBase_OnTick");
static_assert(sizeof(SHAnimActionExecutiveBase_OnTick) == 0x000004, "Wrong size on SHAnimActionExecutiveBase_OnTick");
static_assert(offsetof(SHAnimActionExecutiveBase_OnTick, DeltaSeconds) == 0x000000, "Member 'SHAnimActionExecutiveBase_OnTick::DeltaSeconds' has a wrong offset!");

// Function SHProto.SHAnimActionExecutiveBase.GetContextObject
// 0x0008 (0x0008 - 0x0000)
struct SHAnimActionExecutiveBase_GetContextObject final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimActionExecutiveBase_GetContextObject) == 0x000008, "Wrong alignment on SHAnimActionExecutiveBase_GetContextObject");
static_assert(sizeof(SHAnimActionExecutiveBase_GetContextObject) == 0x000008, "Wrong size on SHAnimActionExecutiveBase_GetContextObject");
static_assert(offsetof(SHAnimActionExecutiveBase_GetContextObject, ReturnValue) == 0x000000, "Member 'SHAnimActionExecutiveBase_GetContextObject::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimActionExecutiveBase.GetOwnerCharacter
// 0x0008 (0x0008 - 0x0000)
struct SHAnimActionExecutiveBase_GetOwnerCharacter final
{
public:
	class ACharacter*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimActionExecutiveBase_GetOwnerCharacter) == 0x000008, "Wrong alignment on SHAnimActionExecutiveBase_GetOwnerCharacter");
static_assert(sizeof(SHAnimActionExecutiveBase_GetOwnerCharacter) == 0x000008, "Wrong size on SHAnimActionExecutiveBase_GetOwnerCharacter");
static_assert(offsetof(SHAnimActionExecutiveBase_GetOwnerCharacter, ReturnValue) == 0x000000, "Member 'SHAnimActionExecutiveBase_GetOwnerCharacter::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimActionExecutiveBase.GetSoftAssets
// 0x0010 (0x0010 - 0x0000)
struct SHAnimActionExecutiveBase_GetSoftAssets final
{
public:
	TArray<TSoftObjectPtr<class UObject>>         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimActionExecutiveBase_GetSoftAssets) == 0x000008, "Wrong alignment on SHAnimActionExecutiveBase_GetSoftAssets");
static_assert(sizeof(SHAnimActionExecutiveBase_GetSoftAssets) == 0x000010, "Wrong size on SHAnimActionExecutiveBase_GetSoftAssets");
static_assert(offsetof(SHAnimActionExecutiveBase_GetSoftAssets, ReturnValue) == 0x000000, "Member 'SHAnimActionExecutiveBase_GetSoftAssets::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimActionExecutive.GetAnimPlayer
// 0x0008 (0x0008 - 0x0000)
struct SHAnimActionExecutive_GetAnimPlayer final
{
public:
	class USHAnimMontagePlayer*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimActionExecutive_GetAnimPlayer) == 0x000008, "Wrong alignment on SHAnimActionExecutive_GetAnimPlayer");
static_assert(sizeof(SHAnimActionExecutive_GetAnimPlayer) == 0x000008, "Wrong size on SHAnimActionExecutive_GetAnimPlayer");
static_assert(offsetof(SHAnimActionExecutive_GetAnimPlayer, ReturnValue) == 0x000000, "Member 'SHAnimActionExecutive_GetAnimPlayer::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayBrainComponent.ClearControlRotationInterpSpeed
// 0x0008 (0x0008 - 0x0000)
struct SHCharacterPlayBrainComponent_ClearControlRotationInterpSpeed final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayBrainComponent_ClearControlRotationInterpSpeed) == 0x000008, "Wrong alignment on SHCharacterPlayBrainComponent_ClearControlRotationInterpSpeed");
static_assert(sizeof(SHCharacterPlayBrainComponent_ClearControlRotationInterpSpeed) == 0x000008, "Wrong size on SHCharacterPlayBrainComponent_ClearControlRotationInterpSpeed");
static_assert(offsetof(SHCharacterPlayBrainComponent_ClearControlRotationInterpSpeed, Object) == 0x000000, "Member 'SHCharacterPlayBrainComponent_ClearControlRotationInterpSpeed::Object' has a wrong offset!");

// Function SHProto.SHCharacterPlayBrainComponent.SetControlRotationInterpSpeed
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayBrainComponent_SetControlRotationInterpSpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayBrainComponent_SetControlRotationInterpSpeed) == 0x000008, "Wrong alignment on SHCharacterPlayBrainComponent_SetControlRotationInterpSpeed");
static_assert(sizeof(SHCharacterPlayBrainComponent_SetControlRotationInterpSpeed) == 0x000010, "Wrong size on SHCharacterPlayBrainComponent_SetControlRotationInterpSpeed");
static_assert(offsetof(SHCharacterPlayBrainComponent_SetControlRotationInterpSpeed, Speed) == 0x000000, "Member 'SHCharacterPlayBrainComponent_SetControlRotationInterpSpeed::Speed' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayBrainComponent_SetControlRotationInterpSpeed, Object) == 0x000008, "Member 'SHCharacterPlayBrainComponent_SetControlRotationInterpSpeed::Object' has a wrong offset!");

// Function SHProto.SHCharacterPlayBrainComponent.SetGameplayMenuBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayBrainComponent_SetGameplayMenuBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayBrainComponent_SetGameplayMenuBlocked) == 0x000008, "Wrong alignment on SHCharacterPlayBrainComponent_SetGameplayMenuBlocked");
static_assert(sizeof(SHCharacterPlayBrainComponent_SetGameplayMenuBlocked) == 0x000010, "Wrong size on SHCharacterPlayBrainComponent_SetGameplayMenuBlocked");
static_assert(offsetof(SHCharacterPlayBrainComponent_SetGameplayMenuBlocked, Blocked) == 0x000000, "Member 'SHCharacterPlayBrainComponent_SetGameplayMenuBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayBrainComponent_SetGameplayMenuBlocked, Object) == 0x000008, "Member 'SHCharacterPlayBrainComponent_SetGameplayMenuBlocked::Object' has a wrong offset!");

// Function SHProto.SHCharacterPlayBrainComponent.SetUpdateControlRotationBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayBrainComponent_SetUpdateControlRotationBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayBrainComponent_SetUpdateControlRotationBlocked) == 0x000008, "Wrong alignment on SHCharacterPlayBrainComponent_SetUpdateControlRotationBlocked");
static_assert(sizeof(SHCharacterPlayBrainComponent_SetUpdateControlRotationBlocked) == 0x000010, "Wrong size on SHCharacterPlayBrainComponent_SetUpdateControlRotationBlocked");
static_assert(offsetof(SHCharacterPlayBrainComponent_SetUpdateControlRotationBlocked, Blocked) == 0x000000, "Member 'SHCharacterPlayBrainComponent_SetUpdateControlRotationBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayBrainComponent_SetUpdateControlRotationBlocked, Object) == 0x000008, "Member 'SHCharacterPlayBrainComponent_SetUpdateControlRotationBlocked::Object' has a wrong offset!");

// Function SHProto.SHCharacterPlayBrainComponent.SetUpdateControlRotationWhenIsNotMoving
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayBrainComponent_SetUpdateControlRotationWhenIsNotMoving final
{
public:
	bool                                          Update;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayBrainComponent_SetUpdateControlRotationWhenIsNotMoving) == 0x000008, "Wrong alignment on SHCharacterPlayBrainComponent_SetUpdateControlRotationWhenIsNotMoving");
static_assert(sizeof(SHCharacterPlayBrainComponent_SetUpdateControlRotationWhenIsNotMoving) == 0x000010, "Wrong size on SHCharacterPlayBrainComponent_SetUpdateControlRotationWhenIsNotMoving");
static_assert(offsetof(SHCharacterPlayBrainComponent_SetUpdateControlRotationWhenIsNotMoving, Update) == 0x000000, "Member 'SHCharacterPlayBrainComponent_SetUpdateControlRotationWhenIsNotMoving::Update' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayBrainComponent_SetUpdateControlRotationWhenIsNotMoving, Object) == 0x000008, "Member 'SHCharacterPlayBrainComponent_SetUpdateControlRotationWhenIsNotMoving::Object' has a wrong offset!");

// Function SHProto.SHCharacterPlayBrainComponent.GetUpdateControlRotationWhenIsNotMoving
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayBrainComponent_GetUpdateControlRotationWhenIsNotMoving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayBrainComponent_GetUpdateControlRotationWhenIsNotMoving) == 0x000001, "Wrong alignment on SHCharacterPlayBrainComponent_GetUpdateControlRotationWhenIsNotMoving");
static_assert(sizeof(SHCharacterPlayBrainComponent_GetUpdateControlRotationWhenIsNotMoving) == 0x000001, "Wrong size on SHCharacterPlayBrainComponent_GetUpdateControlRotationWhenIsNotMoving");
static_assert(offsetof(SHCharacterPlayBrainComponent_GetUpdateControlRotationWhenIsNotMoving, ReturnValue) == 0x000000, "Member 'SHCharacterPlayBrainComponent_GetUpdateControlRotationWhenIsNotMoving::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayBrainComponent.IsGameplayMenuBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayBrainComponent_IsGameplayMenuBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayBrainComponent_IsGameplayMenuBlocked) == 0x000001, "Wrong alignment on SHCharacterPlayBrainComponent_IsGameplayMenuBlocked");
static_assert(sizeof(SHCharacterPlayBrainComponent_IsGameplayMenuBlocked) == 0x000001, "Wrong size on SHCharacterPlayBrainComponent_IsGameplayMenuBlocked");
static_assert(offsetof(SHCharacterPlayBrainComponent_IsGameplayMenuBlocked, ReturnValue) == 0x000000, "Member 'SHCharacterPlayBrainComponent_IsGameplayMenuBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayBrainComponent.IsUpdateControlRotationBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayBrainComponent_IsUpdateControlRotationBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayBrainComponent_IsUpdateControlRotationBlocked) == 0x000001, "Wrong alignment on SHCharacterPlayBrainComponent_IsUpdateControlRotationBlocked");
static_assert(sizeof(SHCharacterPlayBrainComponent_IsUpdateControlRotationBlocked) == 0x000001, "Wrong size on SHCharacterPlayBrainComponent_IsUpdateControlRotationBlocked");
static_assert(offsetof(SHCharacterPlayBrainComponent_IsUpdateControlRotationBlocked, ReturnValue) == 0x000000, "Member 'SHCharacterPlayBrainComponent_IsUpdateControlRotationBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemUseExecutive.Finish
// 0x0001 (0x0001 - 0x0000)
struct SHItemUseExecutive_Finish final
{
public:
	ESHUseFinishType                              FinishType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemUseExecutive_Finish) == 0x000001, "Wrong alignment on SHItemUseExecutive_Finish");
static_assert(sizeof(SHItemUseExecutive_Finish) == 0x000001, "Wrong size on SHItemUseExecutive_Finish");
static_assert(offsetof(SHItemUseExecutive_Finish, FinishType) == 0x000000, "Member 'SHItemUseExecutive_Finish::FinishType' has a wrong offset!");

// Function SHProto.SHItemUseExecutive.OnItemSpawn
// 0x0008 (0x0008 - 0x0000)
struct SHItemUseExecutive_OnItemSpawn final
{
public:
	class ASHItemBase*                            ItemPtr;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemUseExecutive_OnItemSpawn) == 0x000008, "Wrong alignment on SHItemUseExecutive_OnItemSpawn");
static_assert(sizeof(SHItemUseExecutive_OnItemSpawn) == 0x000008, "Wrong size on SHItemUseExecutive_OnItemSpawn");
static_assert(offsetof(SHItemUseExecutive_OnItemSpawn, ItemPtr) == 0x000000, "Member 'SHItemUseExecutive_OnItemSpawn::ItemPtr' has a wrong offset!");

// Function SHProto.SHItemUseExecutive.PreItemDespawn
// 0x0008 (0x0008 - 0x0000)
struct SHItemUseExecutive_PreItemDespawn final
{
public:
	class ASHItemBase*                            ItemPtr;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemUseExecutive_PreItemDespawn) == 0x000008, "Wrong alignment on SHItemUseExecutive_PreItemDespawn");
static_assert(sizeof(SHItemUseExecutive_PreItemDespawn) == 0x000008, "Wrong size on SHItemUseExecutive_PreItemDespawn");
static_assert(offsetof(SHItemUseExecutive_PreItemDespawn, ItemPtr) == 0x000000, "Member 'SHItemUseExecutive_PreItemDespawn::ItemPtr' has a wrong offset!");

// Function SHProto.SHItemUseExecutive.GetItem
// 0x0010 (0x0010 - 0x0000)
struct SHItemUseExecutive_GetItem final
{
public:
	int32                                         ForIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASHItemBase*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemUseExecutive_GetItem) == 0x000008, "Wrong alignment on SHItemUseExecutive_GetItem");
static_assert(sizeof(SHItemUseExecutive_GetItem) == 0x000010, "Wrong size on SHItemUseExecutive_GetItem");
static_assert(offsetof(SHItemUseExecutive_GetItem, ForIndex) == 0x000000, "Member 'SHItemUseExecutive_GetItem::ForIndex' has a wrong offset!");
static_assert(offsetof(SHItemUseExecutive_GetItem, ReturnValue) == 0x000008, "Member 'SHItemUseExecutive_GetItem::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemUseExecutive.GetItemContext
// 0x0008 (0x0008 - 0x0000)
struct SHItemUseExecutive_GetItemContext final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemUseExecutive_GetItemContext) == 0x000004, "Wrong alignment on SHItemUseExecutive_GetItemContext");
static_assert(sizeof(SHItemUseExecutive_GetItemContext) == 0x000008, "Wrong size on SHItemUseExecutive_GetItemContext");
static_assert(offsetof(SHItemUseExecutive_GetItemContext, ReturnValue) == 0x000000, "Member 'SHItemUseExecutive_GetItemContext::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemUseExecutive.GetItemData
// 0x03F0 (0x03F0 - 0x0000)
struct SHItemUseExecutive_GetItemData final
{
public:
	struct FSHItemDataStruct                      ReturnValue;                                       // 0x0000(0x03F0)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemUseExecutive_GetItemData) == 0x000008, "Wrong alignment on SHItemUseExecutive_GetItemData");
static_assert(sizeof(SHItemUseExecutive_GetItemData) == 0x0003F0, "Wrong size on SHItemUseExecutive_GetItemData");
static_assert(offsetof(SHItemUseExecutive_GetItemData, ReturnValue) == 0x000000, "Member 'SHItemUseExecutive_GetItemData::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemUseExecutive.GetOwnerCharacter
// 0x0008 (0x0008 - 0x0000)
struct SHItemUseExecutive_GetOwnerCharacter final
{
public:
	class ACharacter*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemUseExecutive_GetOwnerCharacter) == 0x000008, "Wrong alignment on SHItemUseExecutive_GetOwnerCharacter");
static_assert(sizeof(SHItemUseExecutive_GetOwnerCharacter) == 0x000008, "Wrong size on SHItemUseExecutive_GetOwnerCharacter");
static_assert(offsetof(SHItemUseExecutive_GetOwnerCharacter, ReturnValue) == 0x000000, "Member 'SHItemUseExecutive_GetOwnerCharacter::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemUseExecutive.WasBreakRequested
// 0x0001 (0x0001 - 0x0000)
struct SHItemUseExecutive_WasBreakRequested final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemUseExecutive_WasBreakRequested) == 0x000001, "Wrong alignment on SHItemUseExecutive_WasBreakRequested");
static_assert(sizeof(SHItemUseExecutive_WasBreakRequested) == 0x000001, "Wrong size on SHItemUseExecutive_WasBreakRequested");
static_assert(offsetof(SHItemUseExecutive_WasBreakRequested, ReturnValue) == 0x000000, "Member 'SHItemUseExecutive_WasBreakRequested::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimatedItemUseExecutive.ProcessAnimationEnd
// 0x0010 (0x0010 - 0x0000)
struct SHAnimatedItemUseExecutive_ProcessAnimationEnd final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHAnimEndType                                AnimEndType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHAnimatedItemUseExecutive_ProcessAnimationEnd) == 0x000008, "Wrong alignment on SHAnimatedItemUseExecutive_ProcessAnimationEnd");
static_assert(sizeof(SHAnimatedItemUseExecutive_ProcessAnimationEnd) == 0x000010, "Wrong size on SHAnimatedItemUseExecutive_ProcessAnimationEnd");
static_assert(offsetof(SHAnimatedItemUseExecutive_ProcessAnimationEnd, Montage) == 0x000000, "Member 'SHAnimatedItemUseExecutive_ProcessAnimationEnd::Montage' has a wrong offset!");
static_assert(offsetof(SHAnimatedItemUseExecutive_ProcessAnimationEnd, AnimEndType) == 0x000008, "Member 'SHAnimatedItemUseExecutive_ProcessAnimationEnd::AnimEndType' has a wrong offset!");

// Function SHProto.SHCharacterPlayAnimActionExe.ProcessCharacterCombatInputModeChangedEvent
// 0x0008 (0x0008 - 0x0000)
struct SHCharacterPlayAnimActionExe_ProcessCharacterCombatInputModeChangedEvent final
{
public:
	class USHCharacterPlayCombatComponent*        CombatComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayAnimActionExe_ProcessCharacterCombatInputModeChangedEvent) == 0x000008, "Wrong alignment on SHCharacterPlayAnimActionExe_ProcessCharacterCombatInputModeChangedEvent");
static_assert(sizeof(SHCharacterPlayAnimActionExe_ProcessCharacterCombatInputModeChangedEvent) == 0x000008, "Wrong size on SHCharacterPlayAnimActionExe_ProcessCharacterCombatInputModeChangedEvent");
static_assert(offsetof(SHCharacterPlayAnimActionExe_ProcessCharacterCombatInputModeChangedEvent, CombatComp) == 0x000000, "Member 'SHCharacterPlayAnimActionExe_ProcessCharacterCombatInputModeChangedEvent::CombatComp' has a wrong offset!");

// Function SHProto.SHCharacterPlayAnimActionExe.ProcessCharacterReceivedHitEvent
// 0x0008 (0x0008 - 0x0000)
struct SHCharacterPlayAnimActionExe_ProcessCharacterReceivedHitEvent final
{
public:
	class USHCharacterPlayCombatComponent*        CombatComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayAnimActionExe_ProcessCharacterReceivedHitEvent) == 0x000008, "Wrong alignment on SHCharacterPlayAnimActionExe_ProcessCharacterReceivedHitEvent");
static_assert(sizeof(SHCharacterPlayAnimActionExe_ProcessCharacterReceivedHitEvent) == 0x000008, "Wrong size on SHCharacterPlayAnimActionExe_ProcessCharacterReceivedHitEvent");
static_assert(offsetof(SHCharacterPlayAnimActionExe_ProcessCharacterReceivedHitEvent, CombatComp) == 0x000000, "Member 'SHCharacterPlayAnimActionExe_ProcessCharacterReceivedHitEvent::CombatComp' has a wrong offset!");

// Function SHProto.SHAnimationStatics.FindAveragePlayTimeOfBlendSpace
// 0x0010 (0x0010 - 0x0000)
struct SHAnimationStatics_FindAveragePlayTimeOfBlendSpace final
{
public:
	class UBlendSpace*                            InBlendSpace;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHAnimationStatics_FindAveragePlayTimeOfBlendSpace) == 0x000008, "Wrong alignment on SHAnimationStatics_FindAveragePlayTimeOfBlendSpace");
static_assert(sizeof(SHAnimationStatics_FindAveragePlayTimeOfBlendSpace) == 0x000010, "Wrong size on SHAnimationStatics_FindAveragePlayTimeOfBlendSpace");
static_assert(offsetof(SHAnimationStatics_FindAveragePlayTimeOfBlendSpace, InBlendSpace) == 0x000000, "Member 'SHAnimationStatics_FindAveragePlayTimeOfBlendSpace::InBlendSpace' has a wrong offset!");
static_assert(offsetof(SHAnimationStatics_FindAveragePlayTimeOfBlendSpace, ReturnValue) == 0x000008, "Member 'SHAnimationStatics_FindAveragePlayTimeOfBlendSpace::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimationStatics.FindMaximumPlayTimeOfBlendSpace
// 0x0010 (0x0010 - 0x0000)
struct SHAnimationStatics_FindMaximumPlayTimeOfBlendSpace final
{
public:
	class UBlendSpace*                            InBlendSpace;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHAnimationStatics_FindMaximumPlayTimeOfBlendSpace) == 0x000008, "Wrong alignment on SHAnimationStatics_FindMaximumPlayTimeOfBlendSpace");
static_assert(sizeof(SHAnimationStatics_FindMaximumPlayTimeOfBlendSpace) == 0x000010, "Wrong size on SHAnimationStatics_FindMaximumPlayTimeOfBlendSpace");
static_assert(offsetof(SHAnimationStatics_FindMaximumPlayTimeOfBlendSpace, InBlendSpace) == 0x000000, "Member 'SHAnimationStatics_FindMaximumPlayTimeOfBlendSpace::InBlendSpace' has a wrong offset!");
static_assert(offsetof(SHAnimationStatics_FindMaximumPlayTimeOfBlendSpace, ReturnValue) == 0x000008, "Member 'SHAnimationStatics_FindMaximumPlayTimeOfBlendSpace::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimationStatics.FindMinimumPlayTimeOfBlendSpace
// 0x0010 (0x0010 - 0x0000)
struct SHAnimationStatics_FindMinimumPlayTimeOfBlendSpace final
{
public:
	class UBlendSpace*                            InBlendSpace;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHAnimationStatics_FindMinimumPlayTimeOfBlendSpace) == 0x000008, "Wrong alignment on SHAnimationStatics_FindMinimumPlayTimeOfBlendSpace");
static_assert(sizeof(SHAnimationStatics_FindMinimumPlayTimeOfBlendSpace) == 0x000010, "Wrong size on SHAnimationStatics_FindMinimumPlayTimeOfBlendSpace");
static_assert(offsetof(SHAnimationStatics_FindMinimumPlayTimeOfBlendSpace, InBlendSpace) == 0x000000, "Member 'SHAnimationStatics_FindMinimumPlayTimeOfBlendSpace::InBlendSpace' has a wrong offset!");
static_assert(offsetof(SHAnimationStatics_FindMinimumPlayTimeOfBlendSpace, ReturnValue) == 0x000008, "Member 'SHAnimationStatics_FindMinimumPlayTimeOfBlendSpace::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimationStatics.FindPlayTimeOfBlendSpaceForInput
// 0x0028 (0x0028 - 0x0000)
struct SHAnimationStatics_FindPlayTimeOfBlendSpaceForInput final
{
public:
	class UBlendSpace*                            InBlendSpace;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InInput;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHAnimationStatics_FindPlayTimeOfBlendSpaceForInput) == 0x000008, "Wrong alignment on SHAnimationStatics_FindPlayTimeOfBlendSpaceForInput");
static_assert(sizeof(SHAnimationStatics_FindPlayTimeOfBlendSpaceForInput) == 0x000028, "Wrong size on SHAnimationStatics_FindPlayTimeOfBlendSpaceForInput");
static_assert(offsetof(SHAnimationStatics_FindPlayTimeOfBlendSpaceForInput, InBlendSpace) == 0x000000, "Member 'SHAnimationStatics_FindPlayTimeOfBlendSpaceForInput::InBlendSpace' has a wrong offset!");
static_assert(offsetof(SHAnimationStatics_FindPlayTimeOfBlendSpaceForInput, InInput) == 0x000008, "Member 'SHAnimationStatics_FindPlayTimeOfBlendSpaceForInput::InInput' has a wrong offset!");
static_assert(offsetof(SHAnimationStatics_FindPlayTimeOfBlendSpaceForInput, ReturnValue) == 0x000020, "Member 'SHAnimationStatics_FindPlayTimeOfBlendSpaceForInput::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimationStatics.HasActiveRotateInPlaceCurve
// 0x0010 (0x0010 - 0x0000)
struct SHAnimationStatics_HasActiveRotateInPlaceCurve final
{
public:
	class UAnimInstance*                          InAnimInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHAnimationStatics_HasActiveRotateInPlaceCurve) == 0x000008, "Wrong alignment on SHAnimationStatics_HasActiveRotateInPlaceCurve");
static_assert(sizeof(SHAnimationStatics_HasActiveRotateInPlaceCurve) == 0x000010, "Wrong size on SHAnimationStatics_HasActiveRotateInPlaceCurve");
static_assert(offsetof(SHAnimationStatics_HasActiveRotateInPlaceCurve, InAnimInstance) == 0x000000, "Member 'SHAnimationStatics_HasActiveRotateInPlaceCurve::InAnimInstance' has a wrong offset!");
static_assert(offsetof(SHAnimationStatics_HasActiveRotateInPlaceCurve, ReturnValue) == 0x000008, "Member 'SHAnimationStatics_HasActiveRotateInPlaceCurve::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimationStatics.VerifyBlendSpaceSamplesDifference
// 0x0028 (0x0028 - 0x0000)
struct SHAnimationStatics_VerifyBlendSpaceSamplesDifference final
{
public:
	class UBlendSpace*                            InBlendSpace;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMaximumAllowedDifference;                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InDebugWarningMessage;                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHAnimationStatics_VerifyBlendSpaceSamplesDifference) == 0x000008, "Wrong alignment on SHAnimationStatics_VerifyBlendSpaceSamplesDifference");
static_assert(sizeof(SHAnimationStatics_VerifyBlendSpaceSamplesDifference) == 0x000028, "Wrong size on SHAnimationStatics_VerifyBlendSpaceSamplesDifference");
static_assert(offsetof(SHAnimationStatics_VerifyBlendSpaceSamplesDifference, InBlendSpace) == 0x000000, "Member 'SHAnimationStatics_VerifyBlendSpaceSamplesDifference::InBlendSpace' has a wrong offset!");
static_assert(offsetof(SHAnimationStatics_VerifyBlendSpaceSamplesDifference, InMaximumAllowedDifference) == 0x000008, "Member 'SHAnimationStatics_VerifyBlendSpaceSamplesDifference::InMaximumAllowedDifference' has a wrong offset!");
static_assert(offsetof(SHAnimationStatics_VerifyBlendSpaceSamplesDifference, InDebugWarningMessage) == 0x000010, "Member 'SHAnimationStatics_VerifyBlendSpaceSamplesDifference::InDebugWarningMessage' has a wrong offset!");
static_assert(offsetof(SHAnimationStatics_VerifyBlendSpaceSamplesDifference, ReturnValue) == 0x000020, "Member 'SHAnimationStatics_VerifyBlendSpaceSamplesDifference::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimationStatics.VerifyBlendSpaceSamplesMaximumDuration
// 0x0028 (0x0028 - 0x0000)
struct SHAnimationStatics_VerifyBlendSpaceSamplesMaximumDuration final
{
public:
	class UBlendSpace*                            InBlendSpace;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMaximumAllowedDuration;                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InDebugWarningMessage;                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHAnimationStatics_VerifyBlendSpaceSamplesMaximumDuration) == 0x000008, "Wrong alignment on SHAnimationStatics_VerifyBlendSpaceSamplesMaximumDuration");
static_assert(sizeof(SHAnimationStatics_VerifyBlendSpaceSamplesMaximumDuration) == 0x000028, "Wrong size on SHAnimationStatics_VerifyBlendSpaceSamplesMaximumDuration");
static_assert(offsetof(SHAnimationStatics_VerifyBlendSpaceSamplesMaximumDuration, InBlendSpace) == 0x000000, "Member 'SHAnimationStatics_VerifyBlendSpaceSamplesMaximumDuration::InBlendSpace' has a wrong offset!");
static_assert(offsetof(SHAnimationStatics_VerifyBlendSpaceSamplesMaximumDuration, InMaximumAllowedDuration) == 0x000008, "Member 'SHAnimationStatics_VerifyBlendSpaceSamplesMaximumDuration::InMaximumAllowedDuration' has a wrong offset!");
static_assert(offsetof(SHAnimationStatics_VerifyBlendSpaceSamplesMaximumDuration, InDebugWarningMessage) == 0x000010, "Member 'SHAnimationStatics_VerifyBlendSpaceSamplesMaximumDuration::InDebugWarningMessage' has a wrong offset!");
static_assert(offsetof(SHAnimationStatics_VerifyBlendSpaceSamplesMaximumDuration, ReturnValue) == 0x000020, "Member 'SHAnimationStatics_VerifyBlendSpaceSamplesMaximumDuration::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimationStatics.VerifyBlendSpaceSamplesMinimumDuration
// 0x0028 (0x0028 - 0x0000)
struct SHAnimationStatics_VerifyBlendSpaceSamplesMinimumDuration final
{
public:
	class UBlendSpace*                            InBlendSpace;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMinimumAllowedDuration;                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InDebugWarningMessage;                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHAnimationStatics_VerifyBlendSpaceSamplesMinimumDuration) == 0x000008, "Wrong alignment on SHAnimationStatics_VerifyBlendSpaceSamplesMinimumDuration");
static_assert(sizeof(SHAnimationStatics_VerifyBlendSpaceSamplesMinimumDuration) == 0x000028, "Wrong size on SHAnimationStatics_VerifyBlendSpaceSamplesMinimumDuration");
static_assert(offsetof(SHAnimationStatics_VerifyBlendSpaceSamplesMinimumDuration, InBlendSpace) == 0x000000, "Member 'SHAnimationStatics_VerifyBlendSpaceSamplesMinimumDuration::InBlendSpace' has a wrong offset!");
static_assert(offsetof(SHAnimationStatics_VerifyBlendSpaceSamplesMinimumDuration, InMinimumAllowedDuration) == 0x000008, "Member 'SHAnimationStatics_VerifyBlendSpaceSamplesMinimumDuration::InMinimumAllowedDuration' has a wrong offset!");
static_assert(offsetof(SHAnimationStatics_VerifyBlendSpaceSamplesMinimumDuration, InDebugWarningMessage) == 0x000010, "Member 'SHAnimationStatics_VerifyBlendSpaceSamplesMinimumDuration::InDebugWarningMessage' has a wrong offset!");
static_assert(offsetof(SHAnimationStatics_VerifyBlendSpaceSamplesMinimumDuration, ReturnValue) == 0x000020, "Member 'SHAnimationStatics_VerifyBlendSpaceSamplesMinimumDuration::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimDoorSubcomp.OnActionBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct SHAnimDoorSubcomp_OnActionBlendingOut final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHAnimEndType                                AnimEndType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHAnimDoorSubcomp_OnActionBlendingOut) == 0x000008, "Wrong alignment on SHAnimDoorSubcomp_OnActionBlendingOut");
static_assert(sizeof(SHAnimDoorSubcomp_OnActionBlendingOut) == 0x000010, "Wrong size on SHAnimDoorSubcomp_OnActionBlendingOut");
static_assert(offsetof(SHAnimDoorSubcomp_OnActionBlendingOut, Montage) == 0x000000, "Member 'SHAnimDoorSubcomp_OnActionBlendingOut::Montage' has a wrong offset!");
static_assert(offsetof(SHAnimDoorSubcomp_OnActionBlendingOut, AnimEndType) == 0x000008, "Member 'SHAnimDoorSubcomp_OnActionBlendingOut::AnimEndType' has a wrong offset!");

// Function SHProto.SHAnimDoorSubcomp.OnActionEnd
// 0x0010 (0x0010 - 0x0000)
struct SHAnimDoorSubcomp_OnActionEnd final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHAnimEndType                                AnimEndType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHAnimDoorSubcomp_OnActionEnd) == 0x000008, "Wrong alignment on SHAnimDoorSubcomp_OnActionEnd");
static_assert(sizeof(SHAnimDoorSubcomp_OnActionEnd) == 0x000010, "Wrong size on SHAnimDoorSubcomp_OnActionEnd");
static_assert(offsetof(SHAnimDoorSubcomp_OnActionEnd, Montage) == 0x000000, "Member 'SHAnimDoorSubcomp_OnActionEnd::Montage' has a wrong offset!");
static_assert(offsetof(SHAnimDoorSubcomp_OnActionEnd, AnimEndType) == 0x000008, "Member 'SHAnimDoorSubcomp_OnActionEnd::AnimEndType' has a wrong offset!");

// Function SHProto.SHAnimEnviroHitReactionsSubcomp.BlockAnimEnviroHitReactions
// 0x0010 (0x0010 - 0x0000)
struct SHAnimEnviroHitReactionsSubcomp_BlockAnimEnviroHitReactions final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimEnviroHitReactionsSubcomp_BlockAnimEnviroHitReactions) == 0x000008, "Wrong alignment on SHAnimEnviroHitReactionsSubcomp_BlockAnimEnviroHitReactions");
static_assert(sizeof(SHAnimEnviroHitReactionsSubcomp_BlockAnimEnviroHitReactions) == 0x000010, "Wrong size on SHAnimEnviroHitReactionsSubcomp_BlockAnimEnviroHitReactions");
static_assert(offsetof(SHAnimEnviroHitReactionsSubcomp_BlockAnimEnviroHitReactions, Blocked) == 0x000000, "Member 'SHAnimEnviroHitReactionsSubcomp_BlockAnimEnviroHitReactions::Blocked' has a wrong offset!");
static_assert(offsetof(SHAnimEnviroHitReactionsSubcomp_BlockAnimEnviroHitReactions, Object) == 0x000008, "Member 'SHAnimEnviroHitReactionsSubcomp_BlockAnimEnviroHitReactions::Object' has a wrong offset!");

// Function SHProto.SHAnimEnviroHitReactionsSubcomp.BlockAnimEnviroHitSlideSnap
// 0x0010 (0x0010 - 0x0000)
struct SHAnimEnviroHitReactionsSubcomp_BlockAnimEnviroHitSlideSnap final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimEnviroHitReactionsSubcomp_BlockAnimEnviroHitSlideSnap) == 0x000008, "Wrong alignment on SHAnimEnviroHitReactionsSubcomp_BlockAnimEnviroHitSlideSnap");
static_assert(sizeof(SHAnimEnviroHitReactionsSubcomp_BlockAnimEnviroHitSlideSnap) == 0x000010, "Wrong size on SHAnimEnviroHitReactionsSubcomp_BlockAnimEnviroHitSlideSnap");
static_assert(offsetof(SHAnimEnviroHitReactionsSubcomp_BlockAnimEnviroHitSlideSnap, Blocked) == 0x000000, "Member 'SHAnimEnviroHitReactionsSubcomp_BlockAnimEnviroHitSlideSnap::Blocked' has a wrong offset!");
static_assert(offsetof(SHAnimEnviroHitReactionsSubcomp_BlockAnimEnviroHitSlideSnap, Object) == 0x000008, "Member 'SHAnimEnviroHitReactionsSubcomp_BlockAnimEnviroHitSlideSnap::Object' has a wrong offset!");

// Function SHProto.SHAnimFootIKSubcomp.SetFeetAllIKEnabled
// 0x0008 (0x0008 - 0x0000)
struct SHAnimFootIKSubcomp_SetFeetAllIKEnabled final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpSpeed;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimFootIKSubcomp_SetFeetAllIKEnabled) == 0x000004, "Wrong alignment on SHAnimFootIKSubcomp_SetFeetAllIKEnabled");
static_assert(sizeof(SHAnimFootIKSubcomp_SetFeetAllIKEnabled) == 0x000008, "Wrong size on SHAnimFootIKSubcomp_SetFeetAllIKEnabled");
static_assert(offsetof(SHAnimFootIKSubcomp_SetFeetAllIKEnabled, bEnable) == 0x000000, "Member 'SHAnimFootIKSubcomp_SetFeetAllIKEnabled::bEnable' has a wrong offset!");
static_assert(offsetof(SHAnimFootIKSubcomp_SetFeetAllIKEnabled, InterpSpeed) == 0x000004, "Member 'SHAnimFootIKSubcomp_SetFeetAllIKEnabled::InterpSpeed' has a wrong offset!");

// Function SHProto.SHAnimFootIKSubcomp.SetFeetRotationOffsetEnabled
// 0x0001 (0x0001 - 0x0000)
struct SHAnimFootIKSubcomp_SetFeetRotationOffsetEnabled final
{
public:
	bool                                          NewIsEnable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimFootIKSubcomp_SetFeetRotationOffsetEnabled) == 0x000001, "Wrong alignment on SHAnimFootIKSubcomp_SetFeetRotationOffsetEnabled");
static_assert(sizeof(SHAnimFootIKSubcomp_SetFeetRotationOffsetEnabled) == 0x000001, "Wrong size on SHAnimFootIKSubcomp_SetFeetRotationOffsetEnabled");
static_assert(offsetof(SHAnimFootIKSubcomp_SetFeetRotationOffsetEnabled, NewIsEnable) == 0x000000, "Member 'SHAnimFootIKSubcomp_SetFeetRotationOffsetEnabled::NewIsEnable' has a wrong offset!");

// Function SHProto.SHAnimFootIKSubcomp.SetFootIKEnabled
// 0x000C (0x000C - 0x0000)
struct SHAnimFootIKSubcomp_SetFootIKEnabled final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimFootIKSubcomp_SetFootIKEnabled) == 0x000004, "Wrong alignment on SHAnimFootIKSubcomp_SetFootIKEnabled");
static_assert(sizeof(SHAnimFootIKSubcomp_SetFootIKEnabled) == 0x00000C, "Wrong size on SHAnimFootIKSubcomp_SetFootIKEnabled");
static_assert(offsetof(SHAnimFootIKSubcomp_SetFootIKEnabled, bEnable) == 0x000000, "Member 'SHAnimFootIKSubcomp_SetFootIKEnabled::bEnable' has a wrong offset!");
static_assert(offsetof(SHAnimFootIKSubcomp_SetFootIKEnabled, Index_0) == 0x000004, "Member 'SHAnimFootIKSubcomp_SetFootIKEnabled::Index_0' has a wrong offset!");
static_assert(offsetof(SHAnimFootIKSubcomp_SetFootIKEnabled, InterpSpeed) == 0x000008, "Member 'SHAnimFootIKSubcomp_SetFootIKEnabled::InterpSpeed' has a wrong offset!");

// Function SHProto.SHAnimFootIKSubcomp.SetIKEnabled
// 0x0001 (0x0001 - 0x0000)
struct SHAnimFootIKSubcomp_SetIKEnabled final
{
public:
	bool                                          NewIsEnabled;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimFootIKSubcomp_SetIKEnabled) == 0x000001, "Wrong alignment on SHAnimFootIKSubcomp_SetIKEnabled");
static_assert(sizeof(SHAnimFootIKSubcomp_SetIKEnabled) == 0x000001, "Wrong size on SHAnimFootIKSubcomp_SetIKEnabled");
static_assert(offsetof(SHAnimFootIKSubcomp_SetIKEnabled, NewIsEnabled) == 0x000000, "Member 'SHAnimFootIKSubcomp_SetIKEnabled::NewIsEnabled' has a wrong offset!");

// Function SHProto.SHAnimFootIKSubcomp.SetPelvisIKEnabled
// 0x0008 (0x0008 - 0x0000)
struct SHAnimFootIKSubcomp_SetPelvisIKEnabled final
{
public:
	bool                                          NewIsEnable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PelvisInterpSpeed;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimFootIKSubcomp_SetPelvisIKEnabled) == 0x000004, "Wrong alignment on SHAnimFootIKSubcomp_SetPelvisIKEnabled");
static_assert(sizeof(SHAnimFootIKSubcomp_SetPelvisIKEnabled) == 0x000008, "Wrong size on SHAnimFootIKSubcomp_SetPelvisIKEnabled");
static_assert(offsetof(SHAnimFootIKSubcomp_SetPelvisIKEnabled, NewIsEnable) == 0x000000, "Member 'SHAnimFootIKSubcomp_SetPelvisIKEnabled::NewIsEnable' has a wrong offset!");
static_assert(offsetof(SHAnimFootIKSubcomp_SetPelvisIKEnabled, PelvisInterpSpeed) == 0x000004, "Member 'SHAnimFootIKSubcomp_SetPelvisIKEnabled::PelvisInterpSpeed' has a wrong offset!");

// Function SHProto.SHAnimFootIKSubcomp.SHDebug_Shared_Anim_FootIK_Enabled
// 0x0001 (0x0001 - 0x0000)
struct SHAnimFootIKSubcomp_SHDebug_Shared_Anim_FootIK_Enabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimFootIKSubcomp_SHDebug_Shared_Anim_FootIK_Enabled) == 0x000001, "Wrong alignment on SHAnimFootIKSubcomp_SHDebug_Shared_Anim_FootIK_Enabled");
static_assert(sizeof(SHAnimFootIKSubcomp_SHDebug_Shared_Anim_FootIK_Enabled) == 0x000001, "Wrong size on SHAnimFootIKSubcomp_SHDebug_Shared_Anim_FootIK_Enabled");
static_assert(offsetof(SHAnimFootIKSubcomp_SHDebug_Shared_Anim_FootIK_Enabled, Enabled) == 0x000000, "Member 'SHAnimFootIKSubcomp_SHDebug_Shared_Anim_FootIK_Enabled::Enabled' has a wrong offset!");

// Function SHProto.SHAnimFootIKSubcomp.SHDebug_Shared_Anim_FootIK_PelvisOffsetInterpSpeed
// 0x0004 (0x0004 - 0x0000)
struct SHAnimFootIKSubcomp_SHDebug_Shared_Anim_FootIK_PelvisOffsetInterpSpeed final
{
public:
	float                                         InterpSpeed;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimFootIKSubcomp_SHDebug_Shared_Anim_FootIK_PelvisOffsetInterpSpeed) == 0x000004, "Wrong alignment on SHAnimFootIKSubcomp_SHDebug_Shared_Anim_FootIK_PelvisOffsetInterpSpeed");
static_assert(sizeof(SHAnimFootIKSubcomp_SHDebug_Shared_Anim_FootIK_PelvisOffsetInterpSpeed) == 0x000004, "Wrong size on SHAnimFootIKSubcomp_SHDebug_Shared_Anim_FootIK_PelvisOffsetInterpSpeed");
static_assert(offsetof(SHAnimFootIKSubcomp_SHDebug_Shared_Anim_FootIK_PelvisOffsetInterpSpeed, InterpSpeed) == 0x000000, "Member 'SHAnimFootIKSubcomp_SHDebug_Shared_Anim_FootIK_PelvisOffsetInterpSpeed::InterpSpeed' has a wrong offset!");

// Function SHProto.SHAnimFootIKSubcomp.GetFootIK
// 0x0090 (0x0090 - 0x0000)
struct SHAnimFootIKSubcomp_GetFootIK final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFootIKData                            ReturnValue;                                       // 0x0008(0x0088)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimFootIKSubcomp_GetFootIK) == 0x000008, "Wrong alignment on SHAnimFootIKSubcomp_GetFootIK");
static_assert(sizeof(SHAnimFootIKSubcomp_GetFootIK) == 0x000090, "Wrong size on SHAnimFootIKSubcomp_GetFootIK");
static_assert(offsetof(SHAnimFootIKSubcomp_GetFootIK, Index_0) == 0x000000, "Member 'SHAnimFootIKSubcomp_GetFootIK::Index_0' has a wrong offset!");
static_assert(offsetof(SHAnimFootIKSubcomp_GetFootIK, ReturnValue) == 0x000008, "Member 'SHAnimFootIKSubcomp_GetFootIK::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimFootIKSubcomp.GetIsIKEnabled
// 0x0001 (0x0001 - 0x0000)
struct SHAnimFootIKSubcomp_GetIsIKEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimFootIKSubcomp_GetIsIKEnabled) == 0x000001, "Wrong alignment on SHAnimFootIKSubcomp_GetIsIKEnabled");
static_assert(sizeof(SHAnimFootIKSubcomp_GetIsIKEnabled) == 0x000001, "Wrong size on SHAnimFootIKSubcomp_GetIsIKEnabled");
static_assert(offsetof(SHAnimFootIKSubcomp_GetIsIKEnabled, ReturnValue) == 0x000000, "Member 'SHAnimFootIKSubcomp_GetIsIKEnabled::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimHandIKSubcomp.SetLeftHandLocation
// 0x0020 (0x0020 - 0x0000)
struct SHAnimHandIKSubcomp_SetLeftHandLocation final
{
public:
	struct FVector                                InLoc;                                             // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetFullAlpha;                                      // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHAnimHandIKSubcomp_SetLeftHandLocation) == 0x000008, "Wrong alignment on SHAnimHandIKSubcomp_SetLeftHandLocation");
static_assert(sizeof(SHAnimHandIKSubcomp_SetLeftHandLocation) == 0x000020, "Wrong size on SHAnimHandIKSubcomp_SetLeftHandLocation");
static_assert(offsetof(SHAnimHandIKSubcomp_SetLeftHandLocation, InLoc) == 0x000000, "Member 'SHAnimHandIKSubcomp_SetLeftHandLocation::InLoc' has a wrong offset!");
static_assert(offsetof(SHAnimHandIKSubcomp_SetLeftHandLocation, InterpSpeed) == 0x000018, "Member 'SHAnimHandIKSubcomp_SetLeftHandLocation::InterpSpeed' has a wrong offset!");
static_assert(offsetof(SHAnimHandIKSubcomp_SetLeftHandLocation, SetFullAlpha) == 0x00001C, "Member 'SHAnimHandIKSubcomp_SetLeftHandLocation::SetFullAlpha' has a wrong offset!");

// Function SHProto.SHAnimHandIKSubcomp.SetRightHandLocation
// 0x0020 (0x0020 - 0x0000)
struct SHAnimHandIKSubcomp_SetRightHandLocation final
{
public:
	struct FVector                                InLoc;                                             // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetFullAlpha;                                      // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHAnimHandIKSubcomp_SetRightHandLocation) == 0x000008, "Wrong alignment on SHAnimHandIKSubcomp_SetRightHandLocation");
static_assert(sizeof(SHAnimHandIKSubcomp_SetRightHandLocation) == 0x000020, "Wrong size on SHAnimHandIKSubcomp_SetRightHandLocation");
static_assert(offsetof(SHAnimHandIKSubcomp_SetRightHandLocation, InLoc) == 0x000000, "Member 'SHAnimHandIKSubcomp_SetRightHandLocation::InLoc' has a wrong offset!");
static_assert(offsetof(SHAnimHandIKSubcomp_SetRightHandLocation, InterpSpeed) == 0x000018, "Member 'SHAnimHandIKSubcomp_SetRightHandLocation::InterpSpeed' has a wrong offset!");
static_assert(offsetof(SHAnimHandIKSubcomp_SetRightHandLocation, SetFullAlpha) == 0x00001C, "Member 'SHAnimHandIKSubcomp_SetRightHandLocation::SetFullAlpha' has a wrong offset!");

// Function SHProto.SHAnimHandIKSubcomp.StopBothIK
// 0x0004 (0x0004 - 0x0000)
struct SHAnimHandIKSubcomp_StopBothIK final
{
public:
	float                                         InterpSpeed;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimHandIKSubcomp_StopBothIK) == 0x000004, "Wrong alignment on SHAnimHandIKSubcomp_StopBothIK");
static_assert(sizeof(SHAnimHandIKSubcomp_StopBothIK) == 0x000004, "Wrong size on SHAnimHandIKSubcomp_StopBothIK");
static_assert(offsetof(SHAnimHandIKSubcomp_StopBothIK, InterpSpeed) == 0x000000, "Member 'SHAnimHandIKSubcomp_StopBothIK::InterpSpeed' has a wrong offset!");

// Function SHProto.SHAnimHandIKSubcomp.StopLeftHandIK
// 0x0004 (0x0004 - 0x0000)
struct SHAnimHandIKSubcomp_StopLeftHandIK final
{
public:
	float                                         InterpSpeed;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimHandIKSubcomp_StopLeftHandIK) == 0x000004, "Wrong alignment on SHAnimHandIKSubcomp_StopLeftHandIK");
static_assert(sizeof(SHAnimHandIKSubcomp_StopLeftHandIK) == 0x000004, "Wrong size on SHAnimHandIKSubcomp_StopLeftHandIK");
static_assert(offsetof(SHAnimHandIKSubcomp_StopLeftHandIK, InterpSpeed) == 0x000000, "Member 'SHAnimHandIKSubcomp_StopLeftHandIK::InterpSpeed' has a wrong offset!");

// Function SHProto.SHAnimHandIKSubcomp.StopRightHandIK
// 0x0004 (0x0004 - 0x0000)
struct SHAnimHandIKSubcomp_StopRightHandIK final
{
public:
	float                                         InterpSpeed;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimHandIKSubcomp_StopRightHandIK) == 0x000004, "Wrong alignment on SHAnimHandIKSubcomp_StopRightHandIK");
static_assert(sizeof(SHAnimHandIKSubcomp_StopRightHandIK) == 0x000004, "Wrong size on SHAnimHandIKSubcomp_StopRightHandIK");
static_assert(offsetof(SHAnimHandIKSubcomp_StopRightHandIK, InterpSpeed) == 0x000000, "Member 'SHAnimHandIKSubcomp_StopRightHandIK::InterpSpeed' has a wrong offset!");

// Function SHProto.SHAnimHandIKSubcomp.GetLeftHandAlpha
// 0x0004 (0x0004 - 0x0000)
struct SHAnimHandIKSubcomp_GetLeftHandAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimHandIKSubcomp_GetLeftHandAlpha) == 0x000004, "Wrong alignment on SHAnimHandIKSubcomp_GetLeftHandAlpha");
static_assert(sizeof(SHAnimHandIKSubcomp_GetLeftHandAlpha) == 0x000004, "Wrong size on SHAnimHandIKSubcomp_GetLeftHandAlpha");
static_assert(offsetof(SHAnimHandIKSubcomp_GetLeftHandAlpha, ReturnValue) == 0x000000, "Member 'SHAnimHandIKSubcomp_GetLeftHandAlpha::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimHandIKSubcomp.GetLeftHandLocation
// 0x0018 (0x0018 - 0x0000)
struct SHAnimHandIKSubcomp_GetLeftHandLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimHandIKSubcomp_GetLeftHandLocation) == 0x000008, "Wrong alignment on SHAnimHandIKSubcomp_GetLeftHandLocation");
static_assert(sizeof(SHAnimHandIKSubcomp_GetLeftHandLocation) == 0x000018, "Wrong size on SHAnimHandIKSubcomp_GetLeftHandLocation");
static_assert(offsetof(SHAnimHandIKSubcomp_GetLeftHandLocation, ReturnValue) == 0x000000, "Member 'SHAnimHandIKSubcomp_GetLeftHandLocation::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimHandIKSubcomp.GetRightHandAlpha
// 0x0004 (0x0004 - 0x0000)
struct SHAnimHandIKSubcomp_GetRightHandAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimHandIKSubcomp_GetRightHandAlpha) == 0x000004, "Wrong alignment on SHAnimHandIKSubcomp_GetRightHandAlpha");
static_assert(sizeof(SHAnimHandIKSubcomp_GetRightHandAlpha) == 0x000004, "Wrong size on SHAnimHandIKSubcomp_GetRightHandAlpha");
static_assert(offsetof(SHAnimHandIKSubcomp_GetRightHandAlpha, ReturnValue) == 0x000000, "Member 'SHAnimHandIKSubcomp_GetRightHandAlpha::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimHandIKSubcomp.GetRightHandLocation
// 0x0018 (0x0018 - 0x0000)
struct SHAnimHandIKSubcomp_GetRightHandLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimHandIKSubcomp_GetRightHandLocation) == 0x000008, "Wrong alignment on SHAnimHandIKSubcomp_GetRightHandLocation");
static_assert(sizeof(SHAnimHandIKSubcomp_GetRightHandLocation) == 0x000018, "Wrong size on SHAnimHandIKSubcomp_GetRightHandLocation");
static_assert(offsetof(SHAnimHandIKSubcomp_GetRightHandLocation, ReturnValue) == 0x000000, "Member 'SHAnimHandIKSubcomp_GetRightHandLocation::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimHandIKSubcomp.IsLeftHandIKEnabled
// 0x0001 (0x0001 - 0x0000)
struct SHAnimHandIKSubcomp_IsLeftHandIKEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimHandIKSubcomp_IsLeftHandIKEnabled) == 0x000001, "Wrong alignment on SHAnimHandIKSubcomp_IsLeftHandIKEnabled");
static_assert(sizeof(SHAnimHandIKSubcomp_IsLeftHandIKEnabled) == 0x000001, "Wrong size on SHAnimHandIKSubcomp_IsLeftHandIKEnabled");
static_assert(offsetof(SHAnimHandIKSubcomp_IsLeftHandIKEnabled, ReturnValue) == 0x000000, "Member 'SHAnimHandIKSubcomp_IsLeftHandIKEnabled::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimHandIKSubcomp.IsRightHandIKEnabled
// 0x0001 (0x0001 - 0x0000)
struct SHAnimHandIKSubcomp_IsRightHandIKEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimHandIKSubcomp_IsRightHandIKEnabled) == 0x000001, "Wrong alignment on SHAnimHandIKSubcomp_IsRightHandIKEnabled");
static_assert(sizeof(SHAnimHandIKSubcomp_IsRightHandIKEnabled) == 0x000001, "Wrong size on SHAnimHandIKSubcomp_IsRightHandIKEnabled");
static_assert(offsetof(SHAnimHandIKSubcomp_IsRightHandIKEnabled, ReturnValue) == 0x000000, "Member 'SHAnimHandIKSubcomp_IsRightHandIKEnabled::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimHeadRotationBaseSubcomp.ManualLookAtTarget
// 0x0010 (0x0010 - 0x0000)
struct SHAnimHeadRotationBaseSubcomp_ManualLookAtTarget final
{
public:
	class USceneComponent*                        InTargetComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBlendInSpeed;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBlendOutSpeed;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimHeadRotationBaseSubcomp_ManualLookAtTarget) == 0x000008, "Wrong alignment on SHAnimHeadRotationBaseSubcomp_ManualLookAtTarget");
static_assert(sizeof(SHAnimHeadRotationBaseSubcomp_ManualLookAtTarget) == 0x000010, "Wrong size on SHAnimHeadRotationBaseSubcomp_ManualLookAtTarget");
static_assert(offsetof(SHAnimHeadRotationBaseSubcomp_ManualLookAtTarget, InTargetComponent) == 0x000000, "Member 'SHAnimHeadRotationBaseSubcomp_ManualLookAtTarget::InTargetComponent' has a wrong offset!");
static_assert(offsetof(SHAnimHeadRotationBaseSubcomp_ManualLookAtTarget, InBlendInSpeed) == 0x000008, "Member 'SHAnimHeadRotationBaseSubcomp_ManualLookAtTarget::InBlendInSpeed' has a wrong offset!");
static_assert(offsetof(SHAnimHeadRotationBaseSubcomp_ManualLookAtTarget, InBlendOutSpeed) == 0x00000C, "Member 'SHAnimHeadRotationBaseSubcomp_ManualLookAtTarget::InBlendOutSpeed' has a wrong offset!");

// Function SHProto.SHAnimHeadRotationBaseSubcomp.SetHeadRotationEnabled
// 0x0010 (0x0010 - 0x0000)
struct SHAnimHeadRotationBaseSubcomp_SetHeadRotationEnabled final
{
public:
	bool                                          bInEnabled;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InBlendSpeed;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimHeadRotationBaseSubcomp_SetHeadRotationEnabled) == 0x000008, "Wrong alignment on SHAnimHeadRotationBaseSubcomp_SetHeadRotationEnabled");
static_assert(sizeof(SHAnimHeadRotationBaseSubcomp_SetHeadRotationEnabled) == 0x000010, "Wrong size on SHAnimHeadRotationBaseSubcomp_SetHeadRotationEnabled");
static_assert(offsetof(SHAnimHeadRotationBaseSubcomp_SetHeadRotationEnabled, bInEnabled) == 0x000000, "Member 'SHAnimHeadRotationBaseSubcomp_SetHeadRotationEnabled::bInEnabled' has a wrong offset!");
static_assert(offsetof(SHAnimHeadRotationBaseSubcomp_SetHeadRotationEnabled, InBlendSpeed) == 0x000004, "Member 'SHAnimHeadRotationBaseSubcomp_SetHeadRotationEnabled::InBlendSpeed' has a wrong offset!");
static_assert(offsetof(SHAnimHeadRotationBaseSubcomp_SetHeadRotationEnabled, Object) == 0x000008, "Member 'SHAnimHeadRotationBaseSubcomp_SetHeadRotationEnabled::Object' has a wrong offset!");

// Function SHProto.SHAnimHeadRotationBaseSubcomp.SetNewAimOffsetAnimInstance
// 0x0008 (0x0008 - 0x0000)
struct SHAnimHeadRotationBaseSubcomp_SetNewAimOffsetAnimInstance final
{
public:
	TSubclassOf<class USHAimOffsetAnimInstance>   NewAimOffset;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimHeadRotationBaseSubcomp_SetNewAimOffsetAnimInstance) == 0x000008, "Wrong alignment on SHAnimHeadRotationBaseSubcomp_SetNewAimOffsetAnimInstance");
static_assert(sizeof(SHAnimHeadRotationBaseSubcomp_SetNewAimOffsetAnimInstance) == 0x000008, "Wrong size on SHAnimHeadRotationBaseSubcomp_SetNewAimOffsetAnimInstance");
static_assert(offsetof(SHAnimHeadRotationBaseSubcomp_SetNewAimOffsetAnimInstance, NewAimOffset) == 0x000000, "Member 'SHAnimHeadRotationBaseSubcomp_SetNewAimOffsetAnimInstance::NewAimOffset' has a wrong offset!");

// Function SHProto.SHAnimHeadRotationBaseSubcomp.SHDebug_Shared_Anim_HeadRotation_SetLookAtEnabled
// 0x0001 (0x0001 - 0x0000)
struct SHAnimHeadRotationBaseSubcomp_SHDebug_Shared_Anim_HeadRotation_SetLookAtEnabled final
{
public:
	bool                                          bInEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimHeadRotationBaseSubcomp_SHDebug_Shared_Anim_HeadRotation_SetLookAtEnabled) == 0x000001, "Wrong alignment on SHAnimHeadRotationBaseSubcomp_SHDebug_Shared_Anim_HeadRotation_SetLookAtEnabled");
static_assert(sizeof(SHAnimHeadRotationBaseSubcomp_SHDebug_Shared_Anim_HeadRotation_SetLookAtEnabled) == 0x000001, "Wrong size on SHAnimHeadRotationBaseSubcomp_SHDebug_Shared_Anim_HeadRotation_SetLookAtEnabled");
static_assert(offsetof(SHAnimHeadRotationBaseSubcomp_SHDebug_Shared_Anim_HeadRotation_SetLookAtEnabled, bInEnabled) == 0x000000, "Member 'SHAnimHeadRotationBaseSubcomp_SHDebug_Shared_Anim_HeadRotation_SetLookAtEnabled::bInEnabled' has a wrong offset!");

// Function SHProto.SHAnimHeadRotationBaseSubcomp.GetCurrentLookAtTarget
// 0x0008 (0x0008 - 0x0000)
struct SHAnimHeadRotationBaseSubcomp_GetCurrentLookAtTarget final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimHeadRotationBaseSubcomp_GetCurrentLookAtTarget) == 0x000008, "Wrong alignment on SHAnimHeadRotationBaseSubcomp_GetCurrentLookAtTarget");
static_assert(sizeof(SHAnimHeadRotationBaseSubcomp_GetCurrentLookAtTarget) == 0x000008, "Wrong size on SHAnimHeadRotationBaseSubcomp_GetCurrentLookAtTarget");
static_assert(offsetof(SHAnimHeadRotationBaseSubcomp_GetCurrentLookAtTarget, ReturnValue) == 0x000000, "Member 'SHAnimHeadRotationBaseSubcomp_GetCurrentLookAtTarget::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimHeadRotationBaseSubcomp.IsHeadRotationEnabled
// 0x0001 (0x0001 - 0x0000)
struct SHAnimHeadRotationBaseSubcomp_IsHeadRotationEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimHeadRotationBaseSubcomp_IsHeadRotationEnabled) == 0x000001, "Wrong alignment on SHAnimHeadRotationBaseSubcomp_IsHeadRotationEnabled");
static_assert(sizeof(SHAnimHeadRotationBaseSubcomp_IsHeadRotationEnabled) == 0x000001, "Wrong size on SHAnimHeadRotationBaseSubcomp_IsHeadRotationEnabled");
static_assert(offsetof(SHAnimHeadRotationBaseSubcomp_IsHeadRotationEnabled, ReturnValue) == 0x000000, "Member 'SHAnimHeadRotationBaseSubcomp_IsHeadRotationEnabled::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayCameraComponent.AddFOVBlend
// 0x0048 (0x0048 - 0x0000)
struct SHCharacterPlayCameraComponent_AddFOVBlend final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BlendName;                                         // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSHBlendData                           BlendConfig;                                       // 0x0018(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FOVValue;                                          // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class USHCameraFOVBlender*              ReturnValue;                                       // 0x0040(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayCameraComponent_AddFOVBlend) == 0x000008, "Wrong alignment on SHCharacterPlayCameraComponent_AddFOVBlend");
static_assert(sizeof(SHCharacterPlayCameraComponent_AddFOVBlend) == 0x000048, "Wrong size on SHCharacterPlayCameraComponent_AddFOVBlend");
static_assert(offsetof(SHCharacterPlayCameraComponent_AddFOVBlend, Object) == 0x000000, "Member 'SHCharacterPlayCameraComponent_AddFOVBlend::Object' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayCameraComponent_AddFOVBlend, BlendName) == 0x000008, "Member 'SHCharacterPlayCameraComponent_AddFOVBlend::BlendName' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayCameraComponent_AddFOVBlend, BlendConfig) == 0x000018, "Member 'SHCharacterPlayCameraComponent_AddFOVBlend::BlendConfig' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayCameraComponent_AddFOVBlend, FOVValue) == 0x000038, "Member 'SHCharacterPlayCameraComponent_AddFOVBlend::FOVValue' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayCameraComponent_AddFOVBlend, ReturnValue) == 0x000040, "Member 'SHCharacterPlayCameraComponent_AddFOVBlend::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayCameraComponent.CalcLookingAtDelta
// 0x0030 (0x0030 - 0x0000)
struct SHCharacterPlayCameraComponent_CalcLookingAtDelta final
{
public:
	struct FVector                                InWorldLoc;                                        // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayCameraComponent_CalcLookingAtDelta) == 0x000008, "Wrong alignment on SHCharacterPlayCameraComponent_CalcLookingAtDelta");
static_assert(sizeof(SHCharacterPlayCameraComponent_CalcLookingAtDelta) == 0x000030, "Wrong size on SHCharacterPlayCameraComponent_CalcLookingAtDelta");
static_assert(offsetof(SHCharacterPlayCameraComponent_CalcLookingAtDelta, InWorldLoc) == 0x000000, "Member 'SHCharacterPlayCameraComponent_CalcLookingAtDelta::InWorldLoc' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayCameraComponent_CalcLookingAtDelta, ReturnValue) == 0x000018, "Member 'SHCharacterPlayCameraComponent_CalcLookingAtDelta::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayCameraComponent.IsLookingAt
// 0x0028 (0x0028 - 0x0000)
struct SHCharacterPlayCameraComponent_IsLookingAt final
{
public:
	struct FVector                                InWorldLoc;                                        // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchAngleTolerance;                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawAngleTolerance;                                 // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCharacterPlayCameraComponent_IsLookingAt) == 0x000008, "Wrong alignment on SHCharacterPlayCameraComponent_IsLookingAt");
static_assert(sizeof(SHCharacterPlayCameraComponent_IsLookingAt) == 0x000028, "Wrong size on SHCharacterPlayCameraComponent_IsLookingAt");
static_assert(offsetof(SHCharacterPlayCameraComponent_IsLookingAt, InWorldLoc) == 0x000000, "Member 'SHCharacterPlayCameraComponent_IsLookingAt::InWorldLoc' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayCameraComponent_IsLookingAt, PitchAngleTolerance) == 0x000018, "Member 'SHCharacterPlayCameraComponent_IsLookingAt::PitchAngleTolerance' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayCameraComponent_IsLookingAt, YawAngleTolerance) == 0x00001C, "Member 'SHCharacterPlayCameraComponent_IsLookingAt::YawAngleTolerance' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayCameraComponent_IsLookingAt, ReturnValue) == 0x000020, "Member 'SHCharacterPlayCameraComponent_IsLookingAt::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayCameraComponent.PlaySimpleBlendableEffect
// 0x0028 (0x0028 - 0x0000)
struct SHCharacterPlayCameraComponent_PlaySimpleBlendableEffect final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     InPostprocessMaterial;                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEffectMaterialParamName;                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InEffectTime;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayCameraComponent_PlaySimpleBlendableEffect) == 0x000008, "Wrong alignment on SHCharacterPlayCameraComponent_PlaySimpleBlendableEffect");
static_assert(sizeof(SHCharacterPlayCameraComponent_PlaySimpleBlendableEffect) == 0x000028, "Wrong size on SHCharacterPlayCameraComponent_PlaySimpleBlendableEffect");
static_assert(offsetof(SHCharacterPlayCameraComponent_PlaySimpleBlendableEffect, Object) == 0x000000, "Member 'SHCharacterPlayCameraComponent_PlaySimpleBlendableEffect::Object' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayCameraComponent_PlaySimpleBlendableEffect, InPostprocessMaterial) == 0x000008, "Member 'SHCharacterPlayCameraComponent_PlaySimpleBlendableEffect::InPostprocessMaterial' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayCameraComponent_PlaySimpleBlendableEffect, InEffectMaterialParamName) == 0x000010, "Member 'SHCharacterPlayCameraComponent_PlaySimpleBlendableEffect::InEffectMaterialParamName' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayCameraComponent_PlaySimpleBlendableEffect, InEffectTime) == 0x000018, "Member 'SHCharacterPlayCameraComponent_PlaySimpleBlendableEffect::InEffectTime' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayCameraComponent_PlaySimpleBlendableEffect, ReturnValue) == 0x000020, "Member 'SHCharacterPlayCameraComponent_PlaySimpleBlendableEffect::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayCameraComponent.RemoveFOVBlend
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayCameraComponent_RemoveFOVBlend final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Instant;                                           // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCharacterPlayCameraComponent_RemoveFOVBlend) == 0x000008, "Wrong alignment on SHCharacterPlayCameraComponent_RemoveFOVBlend");
static_assert(sizeof(SHCharacterPlayCameraComponent_RemoveFOVBlend) == 0x000010, "Wrong size on SHCharacterPlayCameraComponent_RemoveFOVBlend");
static_assert(offsetof(SHCharacterPlayCameraComponent_RemoveFOVBlend, Object) == 0x000000, "Member 'SHCharacterPlayCameraComponent_RemoveFOVBlend::Object' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayCameraComponent_RemoveFOVBlend, Instant) == 0x000008, "Member 'SHCharacterPlayCameraComponent_RemoveFOVBlend::Instant' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayCameraComponent_RemoveFOVBlend, ReturnValue) == 0x000009, "Member 'SHCharacterPlayCameraComponent_RemoveFOVBlend::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayCameraComponent.FindFOVBlender
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayCameraComponent_FindFOVBlender final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USHCameraFOVBlender*              ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayCameraComponent_FindFOVBlender) == 0x000008, "Wrong alignment on SHCharacterPlayCameraComponent_FindFOVBlender");
static_assert(sizeof(SHCharacterPlayCameraComponent_FindFOVBlender) == 0x000010, "Wrong size on SHCharacterPlayCameraComponent_FindFOVBlender");
static_assert(offsetof(SHCharacterPlayCameraComponent_FindFOVBlender, Object) == 0x000000, "Member 'SHCharacterPlayCameraComponent_FindFOVBlender::Object' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayCameraComponent_FindFOVBlender, ReturnValue) == 0x000008, "Member 'SHCharacterPlayCameraComponent_FindFOVBlender::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayCameraComponent.HasFOVBlend
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayCameraComponent_HasFOVBlend final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCharacterPlayCameraComponent_HasFOVBlend) == 0x000008, "Wrong alignment on SHCharacterPlayCameraComponent_HasFOVBlend");
static_assert(sizeof(SHCharacterPlayCameraComponent_HasFOVBlend) == 0x000010, "Wrong size on SHCharacterPlayCameraComponent_HasFOVBlend");
static_assert(offsetof(SHCharacterPlayCameraComponent_HasFOVBlend, Object) == 0x000000, "Member 'SHCharacterPlayCameraComponent_HasFOVBlend::Object' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayCameraComponent_HasFOVBlend, ReturnValue) == 0x000008, "Member 'SHCharacterPlayCameraComponent_HasFOVBlend::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXSplashPuddleSubcomp.ProcessOwnerDamage
// 0x0068 (0x0068 - 0x0000)
struct SHFXSplashPuddleSubcomp_ProcessOwnerDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0030(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ShotFromDirection;                                 // 0x0040(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UDamageType*                      DamageType;                                        // 0x0058(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0060(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXSplashPuddleSubcomp_ProcessOwnerDamage) == 0x000008, "Wrong alignment on SHFXSplashPuddleSubcomp_ProcessOwnerDamage");
static_assert(sizeof(SHFXSplashPuddleSubcomp_ProcessOwnerDamage) == 0x000068, "Wrong size on SHFXSplashPuddleSubcomp_ProcessOwnerDamage");
static_assert(offsetof(SHFXSplashPuddleSubcomp_ProcessOwnerDamage, DamagedActor) == 0x000000, "Member 'SHFXSplashPuddleSubcomp_ProcessOwnerDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(SHFXSplashPuddleSubcomp_ProcessOwnerDamage, Damage) == 0x000008, "Member 'SHFXSplashPuddleSubcomp_ProcessOwnerDamage::Damage' has a wrong offset!");
static_assert(offsetof(SHFXSplashPuddleSubcomp_ProcessOwnerDamage, InstigatedBy) == 0x000010, "Member 'SHFXSplashPuddleSubcomp_ProcessOwnerDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(SHFXSplashPuddleSubcomp_ProcessOwnerDamage, HitLocation) == 0x000018, "Member 'SHFXSplashPuddleSubcomp_ProcessOwnerDamage::HitLocation' has a wrong offset!");
static_assert(offsetof(SHFXSplashPuddleSubcomp_ProcessOwnerDamage, HitComponent) == 0x000030, "Member 'SHFXSplashPuddleSubcomp_ProcessOwnerDamage::HitComponent' has a wrong offset!");
static_assert(offsetof(SHFXSplashPuddleSubcomp_ProcessOwnerDamage, BoneName) == 0x000038, "Member 'SHFXSplashPuddleSubcomp_ProcessOwnerDamage::BoneName' has a wrong offset!");
static_assert(offsetof(SHFXSplashPuddleSubcomp_ProcessOwnerDamage, ShotFromDirection) == 0x000040, "Member 'SHFXSplashPuddleSubcomp_ProcessOwnerDamage::ShotFromDirection' has a wrong offset!");
static_assert(offsetof(SHFXSplashPuddleSubcomp_ProcessOwnerDamage, DamageType) == 0x000058, "Member 'SHFXSplashPuddleSubcomp_ProcessOwnerDamage::DamageType' has a wrong offset!");
static_assert(offsetof(SHFXSplashPuddleSubcomp_ProcessOwnerDamage, DamageCauser) == 0x000060, "Member 'SHFXSplashPuddleSubcomp_ProcessOwnerDamage::DamageCauser' has a wrong offset!");

// Function SHProto.SHAnimItemInteractionSubcomp.HandleInvestigationFlipAnimEndNotify
// 0x0008 (0x0008 - 0x0000)
struct SHAnimItemInteractionSubcomp_HandleInvestigationFlipAnimEndNotify final
{
public:
	float                                         AnimationTime;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FlipSide;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimItemInteractionSubcomp_HandleInvestigationFlipAnimEndNotify) == 0x000004, "Wrong alignment on SHAnimItemInteractionSubcomp_HandleInvestigationFlipAnimEndNotify");
static_assert(sizeof(SHAnimItemInteractionSubcomp_HandleInvestigationFlipAnimEndNotify) == 0x000008, "Wrong size on SHAnimItemInteractionSubcomp_HandleInvestigationFlipAnimEndNotify");
static_assert(offsetof(SHAnimItemInteractionSubcomp_HandleInvestigationFlipAnimEndNotify, AnimationTime) == 0x000000, "Member 'SHAnimItemInteractionSubcomp_HandleInvestigationFlipAnimEndNotify::AnimationTime' has a wrong offset!");
static_assert(offsetof(SHAnimItemInteractionSubcomp_HandleInvestigationFlipAnimEndNotify, FlipSide) == 0x000004, "Member 'SHAnimItemInteractionSubcomp_HandleInvestigationFlipAnimEndNotify::FlipSide' has a wrong offset!");

// Function SHProto.SHAnimItemInteractionSubcomp.TakeItemSetDirection
// 0x0001 (0x0001 - 0x0000)
struct SHAnimItemInteractionSubcomp_TakeItemSetDirection final
{
public:
	bool                                          bSetProperHand;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimItemInteractionSubcomp_TakeItemSetDirection) == 0x000001, "Wrong alignment on SHAnimItemInteractionSubcomp_TakeItemSetDirection");
static_assert(sizeof(SHAnimItemInteractionSubcomp_TakeItemSetDirection) == 0x000001, "Wrong size on SHAnimItemInteractionSubcomp_TakeItemSetDirection");
static_assert(offsetof(SHAnimItemInteractionSubcomp_TakeItemSetDirection, bSetProperHand) == 0x000000, "Member 'SHAnimItemInteractionSubcomp_TakeItemSetDirection::bSetProperHand' has a wrong offset!");

// Function SHProto.SHAnimKnockDownSubcomp.GetKnockDownState
// 0x0001 (0x0001 - 0x0000)
struct SHAnimKnockDownSubcomp_GetKnockDownState final
{
public:
	EKnockDownState                               ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimKnockDownSubcomp_GetKnockDownState) == 0x000001, "Wrong alignment on SHAnimKnockDownSubcomp_GetKnockDownState");
static_assert(sizeof(SHAnimKnockDownSubcomp_GetKnockDownState) == 0x000001, "Wrong size on SHAnimKnockDownSubcomp_GetKnockDownState");
static_assert(offsetof(SHAnimKnockDownSubcomp_GetKnockDownState, ReturnValue) == 0x000000, "Member 'SHAnimKnockDownSubcomp_GetKnockDownState::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimKnockDownSubcomp.SetKnockDownState
// 0x0001 (0x0001 - 0x0000)
struct SHAnimKnockDownSubcomp_SetKnockDownState final
{
public:
	EKnockDownState                               NewKnockDownState;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimKnockDownSubcomp_SetKnockDownState) == 0x000001, "Wrong alignment on SHAnimKnockDownSubcomp_SetKnockDownState");
static_assert(sizeof(SHAnimKnockDownSubcomp_SetKnockDownState) == 0x000001, "Wrong size on SHAnimKnockDownSubcomp_SetKnockDownState");
static_assert(offsetof(SHAnimKnockDownSubcomp_SetKnockDownState, NewKnockDownState) == 0x000000, "Member 'SHAnimKnockDownSubcomp_SetKnockDownState::NewKnockDownState' has a wrong offset!");

// Function SHProto.SHAnimNPCMovementSubcomp.IsPhysicRotationDuringAnimRootMotionAllowed
// 0x0001 (0x0001 - 0x0000)
struct SHAnimNPCMovementSubcomp_IsPhysicRotationDuringAnimRootMotionAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimNPCMovementSubcomp_IsPhysicRotationDuringAnimRootMotionAllowed) == 0x000001, "Wrong alignment on SHAnimNPCMovementSubcomp_IsPhysicRotationDuringAnimRootMotionAllowed");
static_assert(sizeof(SHAnimNPCMovementSubcomp_IsPhysicRotationDuringAnimRootMotionAllowed) == 0x000001, "Wrong size on SHAnimNPCMovementSubcomp_IsPhysicRotationDuringAnimRootMotionAllowed");
static_assert(offsetof(SHAnimNPCMovementSubcomp_IsPhysicRotationDuringAnimRootMotionAllowed, ReturnValue) == 0x000000, "Member 'SHAnimNPCMovementSubcomp_IsPhysicRotationDuringAnimRootMotionAllowed::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimLyingFigureMovementSubcomp.RegisterPrerequisites
// 0x0018 (0x0018 - 0x0000)
struct SHAnimLyingFigureMovementSubcomp_RegisterPrerequisites final
{
public:
	class USHEnemyLyingComponent*                 InLyingComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        InCrawlRearComponent;                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        InCrawlFrontComponent;                             // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimLyingFigureMovementSubcomp_RegisterPrerequisites) == 0x000008, "Wrong alignment on SHAnimLyingFigureMovementSubcomp_RegisterPrerequisites");
static_assert(sizeof(SHAnimLyingFigureMovementSubcomp_RegisterPrerequisites) == 0x000018, "Wrong size on SHAnimLyingFigureMovementSubcomp_RegisterPrerequisites");
static_assert(offsetof(SHAnimLyingFigureMovementSubcomp_RegisterPrerequisites, InLyingComponent) == 0x000000, "Member 'SHAnimLyingFigureMovementSubcomp_RegisterPrerequisites::InLyingComponent' has a wrong offset!");
static_assert(offsetof(SHAnimLyingFigureMovementSubcomp_RegisterPrerequisites, InCrawlRearComponent) == 0x000008, "Member 'SHAnimLyingFigureMovementSubcomp_RegisterPrerequisites::InCrawlRearComponent' has a wrong offset!");
static_assert(offsetof(SHAnimLyingFigureMovementSubcomp_RegisterPrerequisites, InCrawlFrontComponent) == 0x000010, "Member 'SHAnimLyingFigureMovementSubcomp_RegisterPrerequisites::InCrawlFrontComponent' has a wrong offset!");

// Function SHProto.SHAnimLyingFigureMovementSubcomp.SetAllowInaccurateLocomotionAnimations
// 0x0001 (0x0001 - 0x0000)
struct SHAnimLyingFigureMovementSubcomp_SetAllowInaccurateLocomotionAnimations final
{
public:
	bool                                          InAllow;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimLyingFigureMovementSubcomp_SetAllowInaccurateLocomotionAnimations) == 0x000001, "Wrong alignment on SHAnimLyingFigureMovementSubcomp_SetAllowInaccurateLocomotionAnimations");
static_assert(sizeof(SHAnimLyingFigureMovementSubcomp_SetAllowInaccurateLocomotionAnimations) == 0x000001, "Wrong size on SHAnimLyingFigureMovementSubcomp_SetAllowInaccurateLocomotionAnimations");
static_assert(offsetof(SHAnimLyingFigureMovementSubcomp_SetAllowInaccurateLocomotionAnimations, InAllow) == 0x000000, "Member 'SHAnimLyingFigureMovementSubcomp_SetAllowInaccurateLocomotionAnimations::InAllow' has a wrong offset!");

// Function SHProto.SHAnimLyingFigureMovementSubcomp.SetCrawlBendAngles
// 0x0008 (0x0008 - 0x0000)
struct SHAnimLyingFigureMovementSubcomp_SetCrawlBendAngles final
{
public:
	float                                         InYawAngle;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPitchAngle;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimLyingFigureMovementSubcomp_SetCrawlBendAngles) == 0x000004, "Wrong alignment on SHAnimLyingFigureMovementSubcomp_SetCrawlBendAngles");
static_assert(sizeof(SHAnimLyingFigureMovementSubcomp_SetCrawlBendAngles) == 0x000008, "Wrong size on SHAnimLyingFigureMovementSubcomp_SetCrawlBendAngles");
static_assert(offsetof(SHAnimLyingFigureMovementSubcomp_SetCrawlBendAngles, InYawAngle) == 0x000000, "Member 'SHAnimLyingFigureMovementSubcomp_SetCrawlBendAngles::InYawAngle' has a wrong offset!");
static_assert(offsetof(SHAnimLyingFigureMovementSubcomp_SetCrawlBendAngles, InPitchAngle) == 0x000004, "Member 'SHAnimLyingFigureMovementSubcomp_SetCrawlBendAngles::InPitchAngle' has a wrong offset!");

// Function SHProto.SHAnimLyingFigureMovementSubcomp.SetRequiredLocomotionDistanceAccuracy
// 0x0004 (0x0004 - 0x0000)
struct SHAnimLyingFigureMovementSubcomp_SetRequiredLocomotionDistanceAccuracy final
{
public:
	float                                         InDistanceAccuracy;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimLyingFigureMovementSubcomp_SetRequiredLocomotionDistanceAccuracy) == 0x000004, "Wrong alignment on SHAnimLyingFigureMovementSubcomp_SetRequiredLocomotionDistanceAccuracy");
static_assert(sizeof(SHAnimLyingFigureMovementSubcomp_SetRequiredLocomotionDistanceAccuracy) == 0x000004, "Wrong size on SHAnimLyingFigureMovementSubcomp_SetRequiredLocomotionDistanceAccuracy");
static_assert(offsetof(SHAnimLyingFigureMovementSubcomp_SetRequiredLocomotionDistanceAccuracy, InDistanceAccuracy) == 0x000000, "Member 'SHAnimLyingFigureMovementSubcomp_SetRequiredLocomotionDistanceAccuracy::InDistanceAccuracy' has a wrong offset!");

// Function SHProto.SHMQSpiderAnimInstance.GetMQSpiderAnimInstanceStateData
// 0x0008 (0x0008 - 0x0000)
struct SHMQSpiderAnimInstance_GetMQSpiderAnimInstanceStateData final
{
public:
	class USHMQSpiderAnimInstanceStateData*       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMQSpiderAnimInstance_GetMQSpiderAnimInstanceStateData) == 0x000008, "Wrong alignment on SHMQSpiderAnimInstance_GetMQSpiderAnimInstanceStateData");
static_assert(sizeof(SHMQSpiderAnimInstance_GetMQSpiderAnimInstanceStateData) == 0x000008, "Wrong size on SHMQSpiderAnimInstance_GetMQSpiderAnimInstanceStateData");
static_assert(offsetof(SHMQSpiderAnimInstance_GetMQSpiderAnimInstanceStateData, ReturnValue) == 0x000000, "Member 'SHMQSpiderAnimInstance_GetMQSpiderAnimInstanceStateData::ReturnValue' has a wrong offset!");

// Function SHProto.SHBonePhysicsControllerSubcomponent.ActivatePhysicsForBone
// 0x0030 (0x0030 - 0x0000)
struct SHBonePhysicsControllerSubcomponent_ActivatePhysicsForBone final
{
public:
	class FName                                   InBoneName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActivatePhysicsForParentBodyLevelsAbove;         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSHBonePhysicsPhysicsBlendInput        InPhysicsBlendInput;                               // 0x000C(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          InAllowRootPhysics;                                // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InPhysicsIdentifier;                               // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHBonePhysicsControllerSubcomponent_ActivatePhysicsForBone) == 0x000004, "Wrong alignment on SHBonePhysicsControllerSubcomponent_ActivatePhysicsForBone");
static_assert(sizeof(SHBonePhysicsControllerSubcomponent_ActivatePhysicsForBone) == 0x000030, "Wrong size on SHBonePhysicsControllerSubcomponent_ActivatePhysicsForBone");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ActivatePhysicsForBone, InBoneName) == 0x000000, "Member 'SHBonePhysicsControllerSubcomponent_ActivatePhysicsForBone::InBoneName' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ActivatePhysicsForBone, InActivatePhysicsForParentBodyLevelsAbove) == 0x000008, "Member 'SHBonePhysicsControllerSubcomponent_ActivatePhysicsForBone::InActivatePhysicsForParentBodyLevelsAbove' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ActivatePhysicsForBone, InPhysicsBlendInput) == 0x00000C, "Member 'SHBonePhysicsControllerSubcomponent_ActivatePhysicsForBone::InPhysicsBlendInput' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ActivatePhysicsForBone, InAllowRootPhysics) == 0x000020, "Member 'SHBonePhysicsControllerSubcomponent_ActivatePhysicsForBone::InAllowRootPhysics' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ActivatePhysicsForBone, InPhysicsIdentifier) == 0x000024, "Member 'SHBonePhysicsControllerSubcomponent_ActivatePhysicsForBone::InPhysicsIdentifier' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ActivatePhysicsForBone, ReturnValue) == 0x00002C, "Member 'SHBonePhysicsControllerSubcomponent_ActivatePhysicsForBone::ReturnValue' has a wrong offset!");

// Function SHProto.SHBonePhysicsControllerSubcomponent.ApplyPhysicsForceToBone
// 0x0060 (0x0060 - 0x0000)
struct SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBone final
{
public:
	class FName                                   InBoneName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InForceLocation;                                   // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InForce;                                           // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActivatePhysicsForParentBodyLevelsAbove;         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSHBonePhysicsPhysicsBlendInput        InPhysicsBlendInput;                               // 0x003C(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          InAllowRootPhysics;                                // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InPhysicsIdentifier;                               // 0x0054(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x005C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBone) == 0x000008, "Wrong alignment on SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBone");
static_assert(sizeof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBone) == 0x000060, "Wrong size on SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBone");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBone, InBoneName) == 0x000000, "Member 'SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBone::InBoneName' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBone, InForceLocation) == 0x000008, "Member 'SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBone::InForceLocation' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBone, InForce) == 0x000020, "Member 'SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBone::InForce' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBone, InActivatePhysicsForParentBodyLevelsAbove) == 0x000038, "Member 'SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBone::InActivatePhysicsForParentBodyLevelsAbove' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBone, InPhysicsBlendInput) == 0x00003C, "Member 'SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBone::InPhysicsBlendInput' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBone, InAllowRootPhysics) == 0x000050, "Member 'SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBone::InAllowRootPhysics' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBone, InPhysicsIdentifier) == 0x000054, "Member 'SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBone::InPhysicsIdentifier' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBone, ReturnValue) == 0x00005C, "Member 'SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBone::ReturnValue' has a wrong offset!");

// Function SHProto.SHBonePhysicsControllerSubcomponent.ApplyPhysicsForceToBoneAndItsChildren
// 0x0068 (0x0068 - 0x0000)
struct SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBoneAndItsChildren final
{
public:
	class FName                                   InBoneName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InForceLocation;                                   // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InForce;                                           // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InChildrenBoneForceMultiplier;                     // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InOnlyApplyForceToDirectChildren;                  // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InApplyForceAtChildLocation;                       // 0x003D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InActivatePhysicsForParentBodyLevelsAbove;         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSHBonePhysicsPhysicsBlendInput        InPhysicsBlendInput;                               // 0x0044(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          InAllowRootPhysics;                                // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InPhysicsIdentifier;                               // 0x005C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0064(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBoneAndItsChildren) == 0x000008, "Wrong alignment on SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBoneAndItsChildren");
static_assert(sizeof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBoneAndItsChildren) == 0x000068, "Wrong size on SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBoneAndItsChildren");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBoneAndItsChildren, InBoneName) == 0x000000, "Member 'SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBoneAndItsChildren::InBoneName' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBoneAndItsChildren, InForceLocation) == 0x000008, "Member 'SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBoneAndItsChildren::InForceLocation' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBoneAndItsChildren, InForce) == 0x000020, "Member 'SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBoneAndItsChildren::InForce' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBoneAndItsChildren, InChildrenBoneForceMultiplier) == 0x000038, "Member 'SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBoneAndItsChildren::InChildrenBoneForceMultiplier' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBoneAndItsChildren, InOnlyApplyForceToDirectChildren) == 0x00003C, "Member 'SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBoneAndItsChildren::InOnlyApplyForceToDirectChildren' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBoneAndItsChildren, InApplyForceAtChildLocation) == 0x00003D, "Member 'SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBoneAndItsChildren::InApplyForceAtChildLocation' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBoneAndItsChildren, InActivatePhysicsForParentBodyLevelsAbove) == 0x000040, "Member 'SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBoneAndItsChildren::InActivatePhysicsForParentBodyLevelsAbove' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBoneAndItsChildren, InPhysicsBlendInput) == 0x000044, "Member 'SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBoneAndItsChildren::InPhysicsBlendInput' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBoneAndItsChildren, InAllowRootPhysics) == 0x000058, "Member 'SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBoneAndItsChildren::InAllowRootPhysics' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBoneAndItsChildren, InPhysicsIdentifier) == 0x00005C, "Member 'SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBoneAndItsChildren::InPhysicsIdentifier' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBoneAndItsChildren, ReturnValue) == 0x000064, "Member 'SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToBoneAndItsChildren::ReturnValue' has a wrong offset!");

// Function SHProto.SHBonePhysicsControllerSubcomponent.ApplyPhysicsForceToChildBodiesOfBone
// 0x0060 (0x0060 - 0x0000)
struct SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToChildBodiesOfBone final
{
public:
	class FName                                   InBoneName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InForceLocation;                                   // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InForce;                                           // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InOnlyDirectChildren;                              // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InApplyForceAtChildLocation;                       // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSHBonePhysicsPhysicsBlendInput        InPhysicsBlendInput;                               // 0x003C(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          InAllowRootPhysics;                                // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InPhysicsIdentifier;                               // 0x0054(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x005C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToChildBodiesOfBone) == 0x000008, "Wrong alignment on SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToChildBodiesOfBone");
static_assert(sizeof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToChildBodiesOfBone) == 0x000060, "Wrong size on SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToChildBodiesOfBone");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToChildBodiesOfBone, InBoneName) == 0x000000, "Member 'SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToChildBodiesOfBone::InBoneName' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToChildBodiesOfBone, InForceLocation) == 0x000008, "Member 'SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToChildBodiesOfBone::InForceLocation' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToChildBodiesOfBone, InForce) == 0x000020, "Member 'SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToChildBodiesOfBone::InForce' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToChildBodiesOfBone, InOnlyDirectChildren) == 0x000038, "Member 'SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToChildBodiesOfBone::InOnlyDirectChildren' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToChildBodiesOfBone, InApplyForceAtChildLocation) == 0x000039, "Member 'SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToChildBodiesOfBone::InApplyForceAtChildLocation' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToChildBodiesOfBone, InPhysicsBlendInput) == 0x00003C, "Member 'SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToChildBodiesOfBone::InPhysicsBlendInput' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToChildBodiesOfBone, InAllowRootPhysics) == 0x000050, "Member 'SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToChildBodiesOfBone::InAllowRootPhysics' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToChildBodiesOfBone, InPhysicsIdentifier) == 0x000054, "Member 'SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToChildBodiesOfBone::InPhysicsIdentifier' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToChildBodiesOfBone, ReturnValue) == 0x00005C, "Member 'SHBonePhysicsControllerSubcomponent_ApplyPhysicsForceToChildBodiesOfBone::ReturnValue' has a wrong offset!");

// Function SHProto.SHBonePhysicsControllerSubcomponent.AssignBonePhysicsSettingsProfile
// 0x0068 (0x0068 - 0x0000)
struct SHBonePhysicsControllerSubcomponent_AssignBonePhysicsSettingsProfile final
{
public:
	struct FSHBonePhysicsControllerSettingsProfile InSettingsProfile;                                 // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBonePhysicsControllerSubcomponent_AssignBonePhysicsSettingsProfile) == 0x000008, "Wrong alignment on SHBonePhysicsControllerSubcomponent_AssignBonePhysicsSettingsProfile");
static_assert(sizeof(SHBonePhysicsControllerSubcomponent_AssignBonePhysicsSettingsProfile) == 0x000068, "Wrong size on SHBonePhysicsControllerSubcomponent_AssignBonePhysicsSettingsProfile");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_AssignBonePhysicsSettingsProfile, InSettingsProfile) == 0x000000, "Member 'SHBonePhysicsControllerSubcomponent_AssignBonePhysicsSettingsProfile::InSettingsProfile' has a wrong offset!");

// Function SHProto.SHBonePhysicsControllerSubcomponent.FadeOutAllPhysics
// 0x0008 (0x0008 - 0x0000)
struct SHBonePhysicsControllerSubcomponent_FadeOutAllPhysics final
{
public:
	float                                         InBlendOutTime;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBlendOutCurveBend;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBonePhysicsControllerSubcomponent_FadeOutAllPhysics) == 0x000004, "Wrong alignment on SHBonePhysicsControllerSubcomponent_FadeOutAllPhysics");
static_assert(sizeof(SHBonePhysicsControllerSubcomponent_FadeOutAllPhysics) == 0x000008, "Wrong size on SHBonePhysicsControllerSubcomponent_FadeOutAllPhysics");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_FadeOutAllPhysics, InBlendOutTime) == 0x000000, "Member 'SHBonePhysicsControllerSubcomponent_FadeOutAllPhysics::InBlendOutTime' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_FadeOutAllPhysics, InBlendOutCurveBend) == 0x000004, "Member 'SHBonePhysicsControllerSubcomponent_FadeOutAllPhysics::InBlendOutCurveBend' has a wrong offset!");

// Function SHProto.SHBonePhysicsControllerSubcomponent.FadeOutBonePhysicsByIdentifier
// 0x0018 (0x0018 - 0x0000)
struct SHBonePhysicsControllerSubcomponent_FadeOutBonePhysicsByIdentifier final
{
public:
	float                                         InBlendOutTime;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBlendOutCurveBend;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InPhysicsIdentifier;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InBoneName;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBonePhysicsControllerSubcomponent_FadeOutBonePhysicsByIdentifier) == 0x000004, "Wrong alignment on SHBonePhysicsControllerSubcomponent_FadeOutBonePhysicsByIdentifier");
static_assert(sizeof(SHBonePhysicsControllerSubcomponent_FadeOutBonePhysicsByIdentifier) == 0x000018, "Wrong size on SHBonePhysicsControllerSubcomponent_FadeOutBonePhysicsByIdentifier");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_FadeOutBonePhysicsByIdentifier, InBlendOutTime) == 0x000000, "Member 'SHBonePhysicsControllerSubcomponent_FadeOutBonePhysicsByIdentifier::InBlendOutTime' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_FadeOutBonePhysicsByIdentifier, InBlendOutCurveBend) == 0x000004, "Member 'SHBonePhysicsControllerSubcomponent_FadeOutBonePhysicsByIdentifier::InBlendOutCurveBend' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_FadeOutBonePhysicsByIdentifier, InPhysicsIdentifier) == 0x000008, "Member 'SHBonePhysicsControllerSubcomponent_FadeOutBonePhysicsByIdentifier::InPhysicsIdentifier' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_FadeOutBonePhysicsByIdentifier, InBoneName) == 0x000010, "Member 'SHBonePhysicsControllerSubcomponent_FadeOutBonePhysicsByIdentifier::InBoneName' has a wrong offset!");

// Function SHProto.SHBonePhysicsControllerSubcomponent.FadeOutPhysicsByIdentifier
// 0x0010 (0x0010 - 0x0000)
struct SHBonePhysicsControllerSubcomponent_FadeOutPhysicsByIdentifier final
{
public:
	float                                         InBlendOutTime;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBlendOutCurveBend;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InPhysicsIdentifier;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBonePhysicsControllerSubcomponent_FadeOutPhysicsByIdentifier) == 0x000004, "Wrong alignment on SHBonePhysicsControllerSubcomponent_FadeOutPhysicsByIdentifier");
static_assert(sizeof(SHBonePhysicsControllerSubcomponent_FadeOutPhysicsByIdentifier) == 0x000010, "Wrong size on SHBonePhysicsControllerSubcomponent_FadeOutPhysicsByIdentifier");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_FadeOutPhysicsByIdentifier, InBlendOutTime) == 0x000000, "Member 'SHBonePhysicsControllerSubcomponent_FadeOutPhysicsByIdentifier::InBlendOutTime' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_FadeOutPhysicsByIdentifier, InBlendOutCurveBend) == 0x000004, "Member 'SHBonePhysicsControllerSubcomponent_FadeOutPhysicsByIdentifier::InBlendOutCurveBend' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_FadeOutPhysicsByIdentifier, InPhysicsIdentifier) == 0x000008, "Member 'SHBonePhysicsControllerSubcomponent_FadeOutPhysicsByIdentifier::InPhysicsIdentifier' has a wrong offset!");

// Function SHProto.SHBonePhysicsControllerSubcomponent.FreezeBodiesPose
// 0x0001 (0x0001 - 0x0000)
struct SHBonePhysicsControllerSubcomponent_FreezeBodiesPose final
{
public:
	bool                                          InOnlyIfNotFrozen;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBonePhysicsControllerSubcomponent_FreezeBodiesPose) == 0x000001, "Wrong alignment on SHBonePhysicsControllerSubcomponent_FreezeBodiesPose");
static_assert(sizeof(SHBonePhysicsControllerSubcomponent_FreezeBodiesPose) == 0x000001, "Wrong size on SHBonePhysicsControllerSubcomponent_FreezeBodiesPose");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_FreezeBodiesPose, InOnlyIfNotFrozen) == 0x000000, "Member 'SHBonePhysicsControllerSubcomponent_FreezeBodiesPose::InOnlyIfNotFrozen' has a wrong offset!");

// Function SHProto.SHBonePhysicsControllerSubcomponent.SetDebugPoseDrawing
// 0x0001 (0x0001 - 0x0000)
struct SHBonePhysicsControllerSubcomponent_SetDebugPoseDrawing final
{
public:
	bool                                          InDrawPose;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBonePhysicsControllerSubcomponent_SetDebugPoseDrawing) == 0x000001, "Wrong alignment on SHBonePhysicsControllerSubcomponent_SetDebugPoseDrawing");
static_assert(sizeof(SHBonePhysicsControllerSubcomponent_SetDebugPoseDrawing) == 0x000001, "Wrong size on SHBonePhysicsControllerSubcomponent_SetDebugPoseDrawing");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_SetDebugPoseDrawing, InDrawPose) == 0x000000, "Member 'SHBonePhysicsControllerSubcomponent_SetDebugPoseDrawing::InDrawPose' has a wrong offset!");

// Function SHProto.SHBonePhysicsControllerSubcomponent.SetDebugSettings
// 0x0018 (0x0018 - 0x0000)
struct SHBonePhysicsControllerSubcomponent_SetDebugSettings final
{
public:
	bool                                          InPrintPhysicsStates;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDrawAppliedForcesDebug;                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDrawAppliedForcesScale;                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDrawBodyActiveForcesDebug;                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InBodyActiveForcesScale;                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDrawPoseDebug;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDrawStreamedPoseDuration;                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBonePhysicsControllerSubcomponent_SetDebugSettings) == 0x000004, "Wrong alignment on SHBonePhysicsControllerSubcomponent_SetDebugSettings");
static_assert(sizeof(SHBonePhysicsControllerSubcomponent_SetDebugSettings) == 0x000018, "Wrong size on SHBonePhysicsControllerSubcomponent_SetDebugSettings");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_SetDebugSettings, InPrintPhysicsStates) == 0x000000, "Member 'SHBonePhysicsControllerSubcomponent_SetDebugSettings::InPrintPhysicsStates' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_SetDebugSettings, InDrawAppliedForcesDebug) == 0x000001, "Member 'SHBonePhysicsControllerSubcomponent_SetDebugSettings::InDrawAppliedForcesDebug' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_SetDebugSettings, InDrawAppliedForcesScale) == 0x000004, "Member 'SHBonePhysicsControllerSubcomponent_SetDebugSettings::InDrawAppliedForcesScale' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_SetDebugSettings, InDrawBodyActiveForcesDebug) == 0x000008, "Member 'SHBonePhysicsControllerSubcomponent_SetDebugSettings::InDrawBodyActiveForcesDebug' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_SetDebugSettings, InBodyActiveForcesScale) == 0x00000C, "Member 'SHBonePhysicsControllerSubcomponent_SetDebugSettings::InBodyActiveForcesScale' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_SetDebugSettings, InDrawPoseDebug) == 0x000010, "Member 'SHBonePhysicsControllerSubcomponent_SetDebugSettings::InDrawPoseDebug' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_SetDebugSettings, InDrawStreamedPoseDuration) == 0x000014, "Member 'SHBonePhysicsControllerSubcomponent_SetDebugSettings::InDrawStreamedPoseDuration' has a wrong offset!");

// Function SHProto.SHBonePhysicsControllerSubcomponent.SetDrawAppliedForcesDebugArrows
// 0x0008 (0x0008 - 0x0000)
struct SHBonePhysicsControllerSubcomponent_SetDrawAppliedForcesDebugArrows final
{
public:
	bool                                          InDrawAppliedForcesDebug;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDrawAppliedForcesScale;                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBonePhysicsControllerSubcomponent_SetDrawAppliedForcesDebugArrows) == 0x000004, "Wrong alignment on SHBonePhysicsControllerSubcomponent_SetDrawAppliedForcesDebugArrows");
static_assert(sizeof(SHBonePhysicsControllerSubcomponent_SetDrawAppliedForcesDebugArrows) == 0x000008, "Wrong size on SHBonePhysicsControllerSubcomponent_SetDrawAppliedForcesDebugArrows");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_SetDrawAppliedForcesDebugArrows, InDrawAppliedForcesDebug) == 0x000000, "Member 'SHBonePhysicsControllerSubcomponent_SetDrawAppliedForcesDebugArrows::InDrawAppliedForcesDebug' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_SetDrawAppliedForcesDebugArrows, InDrawAppliedForcesScale) == 0x000004, "Member 'SHBonePhysicsControllerSubcomponent_SetDrawAppliedForcesDebugArrows::InDrawAppliedForcesScale' has a wrong offset!");

// Function SHProto.SHBonePhysicsControllerSubcomponent.SetDrawBodyActiveForcesDebugArrows
// 0x0008 (0x0008 - 0x0000)
struct SHBonePhysicsControllerSubcomponent_SetDrawBodyActiveForcesDebugArrows final
{
public:
	bool                                          InDrawBodyActiveForcesDebug;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InBodyActiveForcesScale;                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBonePhysicsControllerSubcomponent_SetDrawBodyActiveForcesDebugArrows) == 0x000004, "Wrong alignment on SHBonePhysicsControllerSubcomponent_SetDrawBodyActiveForcesDebugArrows");
static_assert(sizeof(SHBonePhysicsControllerSubcomponent_SetDrawBodyActiveForcesDebugArrows) == 0x000008, "Wrong size on SHBonePhysicsControllerSubcomponent_SetDrawBodyActiveForcesDebugArrows");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_SetDrawBodyActiveForcesDebugArrows, InDrawBodyActiveForcesDebug) == 0x000000, "Member 'SHBonePhysicsControllerSubcomponent_SetDrawBodyActiveForcesDebugArrows::InDrawBodyActiveForcesDebug' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_SetDrawBodyActiveForcesDebugArrows, InBodyActiveForcesScale) == 0x000004, "Member 'SHBonePhysicsControllerSubcomponent_SetDrawBodyActiveForcesDebugArrows::InBodyActiveForcesScale' has a wrong offset!");

// Function SHProto.SHBonePhysicsControllerSubcomponent.SetPhysicsStatesDebugPrinting
// 0x0001 (0x0001 - 0x0000)
struct SHBonePhysicsControllerSubcomponent_SetPhysicsStatesDebugPrinting final
{
public:
	bool                                          InEnableDebugPrint;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBonePhysicsControllerSubcomponent_SetPhysicsStatesDebugPrinting) == 0x000001, "Wrong alignment on SHBonePhysicsControllerSubcomponent_SetPhysicsStatesDebugPrinting");
static_assert(sizeof(SHBonePhysicsControllerSubcomponent_SetPhysicsStatesDebugPrinting) == 0x000001, "Wrong size on SHBonePhysicsControllerSubcomponent_SetPhysicsStatesDebugPrinting");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_SetPhysicsStatesDebugPrinting, InEnableDebugPrint) == 0x000000, "Member 'SHBonePhysicsControllerSubcomponent_SetPhysicsStatesDebugPrinting::InEnableDebugPrint' has a wrong offset!");

// Function SHProto.SHBonePhysicsControllerSubcomponent.SetStreamedPoseDrawingDuration
// 0x0004 (0x0004 - 0x0000)
struct SHBonePhysicsControllerSubcomponent_SetStreamedPoseDrawingDuration final
{
public:
	float                                         InDuration;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBonePhysicsControllerSubcomponent_SetStreamedPoseDrawingDuration) == 0x000004, "Wrong alignment on SHBonePhysicsControllerSubcomponent_SetStreamedPoseDrawingDuration");
static_assert(sizeof(SHBonePhysicsControllerSubcomponent_SetStreamedPoseDrawingDuration) == 0x000004, "Wrong size on SHBonePhysicsControllerSubcomponent_SetStreamedPoseDrawingDuration");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_SetStreamedPoseDrawingDuration, InDuration) == 0x000000, "Member 'SHBonePhysicsControllerSubcomponent_SetStreamedPoseDrawingDuration::InDuration' has a wrong offset!");

// Function SHProto.SHBonePhysicsControllerSubcomponent.UnfreezeBodiesPose
// 0x0004 (0x0004 - 0x0000)
struct SHBonePhysicsControllerSubcomponent_UnfreezeBodiesPose final
{
public:
	float                                         InUnfreezeDelay;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBonePhysicsControllerSubcomponent_UnfreezeBodiesPose) == 0x000004, "Wrong alignment on SHBonePhysicsControllerSubcomponent_UnfreezeBodiesPose");
static_assert(sizeof(SHBonePhysicsControllerSubcomponent_UnfreezeBodiesPose) == 0x000004, "Wrong size on SHBonePhysicsControllerSubcomponent_UnfreezeBodiesPose");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_UnfreezeBodiesPose, InUnfreezeDelay) == 0x000000, "Member 'SHBonePhysicsControllerSubcomponent_UnfreezeBodiesPose::InUnfreezeDelay' has a wrong offset!");

// Function SHProto.SHBonePhysicsControllerSubcomponent.FindIfBoneHasActivePhysics
// 0x000C (0x000C - 0x0000)
struct SHBonePhysicsControllerSubcomponent_FindIfBoneHasActivePhysics final
{
public:
	class FName                                   InBoneName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHBonePhysicsControllerSubcomponent_FindIfBoneHasActivePhysics) == 0x000004, "Wrong alignment on SHBonePhysicsControllerSubcomponent_FindIfBoneHasActivePhysics");
static_assert(sizeof(SHBonePhysicsControllerSubcomponent_FindIfBoneHasActivePhysics) == 0x00000C, "Wrong size on SHBonePhysicsControllerSubcomponent_FindIfBoneHasActivePhysics");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_FindIfBoneHasActivePhysics, InBoneName) == 0x000000, "Member 'SHBonePhysicsControllerSubcomponent_FindIfBoneHasActivePhysics::InBoneName' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_FindIfBoneHasActivePhysics, ReturnValue) == 0x000008, "Member 'SHBonePhysicsControllerSubcomponent_FindIfBoneHasActivePhysics::ReturnValue' has a wrong offset!");

// Function SHProto.SHBonePhysicsControllerSubcomponent.FindIfRootPhysicsSimulationIsActive
// 0x0001 (0x0001 - 0x0000)
struct SHBonePhysicsControllerSubcomponent_FindIfRootPhysicsSimulationIsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBonePhysicsControllerSubcomponent_FindIfRootPhysicsSimulationIsActive) == 0x000001, "Wrong alignment on SHBonePhysicsControllerSubcomponent_FindIfRootPhysicsSimulationIsActive");
static_assert(sizeof(SHBonePhysicsControllerSubcomponent_FindIfRootPhysicsSimulationIsActive) == 0x000001, "Wrong size on SHBonePhysicsControllerSubcomponent_FindIfRootPhysicsSimulationIsActive");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_FindIfRootPhysicsSimulationIsActive, ReturnValue) == 0x000000, "Member 'SHBonePhysicsControllerSubcomponent_FindIfRootPhysicsSimulationIsActive::ReturnValue' has a wrong offset!");

// Function SHProto.SHBonePhysicsControllerSubcomponent.IsBodiesPoseFrozen
// 0x0002 (0x0002 - 0x0000)
struct SHBonePhysicsControllerSubcomponent_IsBodiesPoseFrozen final
{
public:
	bool                                          InIncludeUnfreezing;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBonePhysicsControllerSubcomponent_IsBodiesPoseFrozen) == 0x000001, "Wrong alignment on SHBonePhysicsControllerSubcomponent_IsBodiesPoseFrozen");
static_assert(sizeof(SHBonePhysicsControllerSubcomponent_IsBodiesPoseFrozen) == 0x000002, "Wrong size on SHBonePhysicsControllerSubcomponent_IsBodiesPoseFrozen");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_IsBodiesPoseFrozen, InIncludeUnfreezing) == 0x000000, "Member 'SHBonePhysicsControllerSubcomponent_IsBodiesPoseFrozen::InIncludeUnfreezing' has a wrong offset!");
static_assert(offsetof(SHBonePhysicsControllerSubcomponent_IsBodiesPoseFrozen, ReturnValue) == 0x000001, "Member 'SHBonePhysicsControllerSubcomponent_IsBodiesPoseFrozen::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimMariaMovementSubcomp.PrepareChaseMovement
// 0x0008 (0x0008 - 0x0000)
struct SHAnimMariaMovementSubcomp_PrepareChaseMovement final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimMariaMovementSubcomp_PrepareChaseMovement) == 0x000008, "Wrong alignment on SHAnimMariaMovementSubcomp_PrepareChaseMovement");
static_assert(sizeof(SHAnimMariaMovementSubcomp_PrepareChaseMovement) == 0x000008, "Wrong size on SHAnimMariaMovementSubcomp_PrepareChaseMovement");
static_assert(offsetof(SHAnimMariaMovementSubcomp_PrepareChaseMovement, Object) == 0x000000, "Member 'SHAnimMariaMovementSubcomp_PrepareChaseMovement::Object' has a wrong offset!");

// Function SHProto.SHAnimMontagePlayer.ChangeSectionRequest
// 0x0014 (0x0014 - 0x0000)
struct SHAnimMontagePlayer_ChangeSectionRequest final
{
public:
	class FName                                   NewSectionName;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewSectionBlendInTime;                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldSectionBlendOutTime;                            // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHAnimMontagePlayer_ChangeSectionRequest) == 0x000004, "Wrong alignment on SHAnimMontagePlayer_ChangeSectionRequest");
static_assert(sizeof(SHAnimMontagePlayer_ChangeSectionRequest) == 0x000014, "Wrong size on SHAnimMontagePlayer_ChangeSectionRequest");
static_assert(offsetof(SHAnimMontagePlayer_ChangeSectionRequest, NewSectionName) == 0x000000, "Member 'SHAnimMontagePlayer_ChangeSectionRequest::NewSectionName' has a wrong offset!");
static_assert(offsetof(SHAnimMontagePlayer_ChangeSectionRequest, NewSectionBlendInTime) == 0x000008, "Member 'SHAnimMontagePlayer_ChangeSectionRequest::NewSectionBlendInTime' has a wrong offset!");
static_assert(offsetof(SHAnimMontagePlayer_ChangeSectionRequest, OldSectionBlendOutTime) == 0x00000C, "Member 'SHAnimMontagePlayer_ChangeSectionRequest::OldSectionBlendOutTime' has a wrong offset!");
static_assert(offsetof(SHAnimMontagePlayer_ChangeSectionRequest, ReturnValue) == 0x000010, "Member 'SHAnimMontagePlayer_ChangeSectionRequest::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimMontagePlayer.OnAnyMontageBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct SHAnimMontagePlayer_OnAnyMontageBlendingOut final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHAnimMontagePlayer_OnAnyMontageBlendingOut) == 0x000008, "Wrong alignment on SHAnimMontagePlayer_OnAnyMontageBlendingOut");
static_assert(sizeof(SHAnimMontagePlayer_OnAnyMontageBlendingOut) == 0x000010, "Wrong size on SHAnimMontagePlayer_OnAnyMontageBlendingOut");
static_assert(offsetof(SHAnimMontagePlayer_OnAnyMontageBlendingOut, Montage) == 0x000000, "Member 'SHAnimMontagePlayer_OnAnyMontageBlendingOut::Montage' has a wrong offset!");
static_assert(offsetof(SHAnimMontagePlayer_OnAnyMontageBlendingOut, bInterrupted) == 0x000008, "Member 'SHAnimMontagePlayer_OnAnyMontageBlendingOut::bInterrupted' has a wrong offset!");

// Function SHProto.SHAnimMontagePlayer.OnAnyMontageEnd
// 0x0010 (0x0010 - 0x0000)
struct SHAnimMontagePlayer_OnAnyMontageEnd final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHAnimMontagePlayer_OnAnyMontageEnd) == 0x000008, "Wrong alignment on SHAnimMontagePlayer_OnAnyMontageEnd");
static_assert(sizeof(SHAnimMontagePlayer_OnAnyMontageEnd) == 0x000010, "Wrong size on SHAnimMontagePlayer_OnAnyMontageEnd");
static_assert(offsetof(SHAnimMontagePlayer_OnAnyMontageEnd, Montage) == 0x000000, "Member 'SHAnimMontagePlayer_OnAnyMontageEnd::Montage' has a wrong offset!");
static_assert(offsetof(SHAnimMontagePlayer_OnAnyMontageEnd, bInterrupted) == 0x000008, "Member 'SHAnimMontagePlayer_OnAnyMontageEnd::bInterrupted' has a wrong offset!");

// Function SHProto.SHAnimMontagePlayer.OverwriteRequest
// 0x00D8 (0x00D8 - 0x0000)
struct SHAnimMontagePlayer_OverwriteRequest final
{
public:
	float                                         StopBlendoutTime;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayAnimationData                     AnimData;                                          // 0x0008(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                BlendSpaceInput;                                   // 0x00B8(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00D0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHAnimMontagePlayer_OverwriteRequest) == 0x000008, "Wrong alignment on SHAnimMontagePlayer_OverwriteRequest");
static_assert(sizeof(SHAnimMontagePlayer_OverwriteRequest) == 0x0000D8, "Wrong size on SHAnimMontagePlayer_OverwriteRequest");
static_assert(offsetof(SHAnimMontagePlayer_OverwriteRequest, StopBlendoutTime) == 0x000000, "Member 'SHAnimMontagePlayer_OverwriteRequest::StopBlendoutTime' has a wrong offset!");
static_assert(offsetof(SHAnimMontagePlayer_OverwriteRequest, AnimData) == 0x000008, "Member 'SHAnimMontagePlayer_OverwriteRequest::AnimData' has a wrong offset!");
static_assert(offsetof(SHAnimMontagePlayer_OverwriteRequest, BlendSpaceInput) == 0x0000B8, "Member 'SHAnimMontagePlayer_OverwriteRequest::BlendSpaceInput' has a wrong offset!");
static_assert(offsetof(SHAnimMontagePlayer_OverwriteRequest, ReturnValue) == 0x0000D0, "Member 'SHAnimMontagePlayer_OverwriteRequest::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimMontagePlayer.PauseRequest
// 0x0001 (0x0001 - 0x0000)
struct SHAnimMontagePlayer_PauseRequest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimMontagePlayer_PauseRequest) == 0x000001, "Wrong alignment on SHAnimMontagePlayer_PauseRequest");
static_assert(sizeof(SHAnimMontagePlayer_PauseRequest) == 0x000001, "Wrong size on SHAnimMontagePlayer_PauseRequest");
static_assert(offsetof(SHAnimMontagePlayer_PauseRequest, ReturnValue) == 0x000000, "Member 'SHAnimMontagePlayer_PauseRequest::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimMontagePlayer.PlayOrOverwriteRequest
// 0x00D8 (0x00D8 - 0x0000)
struct SHAnimMontagePlayer_PlayOrOverwriteRequest final
{
public:
	float                                         StopBlendoutTime;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayAnimationData                     AnimData;                                          // 0x0008(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                BlendSpaceInput;                                   // 0x00B8(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00D0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHAnimMontagePlayer_PlayOrOverwriteRequest) == 0x000008, "Wrong alignment on SHAnimMontagePlayer_PlayOrOverwriteRequest");
static_assert(sizeof(SHAnimMontagePlayer_PlayOrOverwriteRequest) == 0x0000D8, "Wrong size on SHAnimMontagePlayer_PlayOrOverwriteRequest");
static_assert(offsetof(SHAnimMontagePlayer_PlayOrOverwriteRequest, StopBlendoutTime) == 0x000000, "Member 'SHAnimMontagePlayer_PlayOrOverwriteRequest::StopBlendoutTime' has a wrong offset!");
static_assert(offsetof(SHAnimMontagePlayer_PlayOrOverwriteRequest, AnimData) == 0x000008, "Member 'SHAnimMontagePlayer_PlayOrOverwriteRequest::AnimData' has a wrong offset!");
static_assert(offsetof(SHAnimMontagePlayer_PlayOrOverwriteRequest, BlendSpaceInput) == 0x0000B8, "Member 'SHAnimMontagePlayer_PlayOrOverwriteRequest::BlendSpaceInput' has a wrong offset!");
static_assert(offsetof(SHAnimMontagePlayer_PlayOrOverwriteRequest, ReturnValue) == 0x0000D0, "Member 'SHAnimMontagePlayer_PlayOrOverwriteRequest::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimMontagePlayer.PlayRequest
// 0x00D0 (0x00D0 - 0x0000)
struct SHAnimMontagePlayer_PlayRequest final
{
public:
	struct FPlayAnimationData                     AnimData;                                          // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                BlendSpaceInput;                                   // 0x00B0(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00C8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHAnimMontagePlayer_PlayRequest) == 0x000008, "Wrong alignment on SHAnimMontagePlayer_PlayRequest");
static_assert(sizeof(SHAnimMontagePlayer_PlayRequest) == 0x0000D0, "Wrong size on SHAnimMontagePlayer_PlayRequest");
static_assert(offsetof(SHAnimMontagePlayer_PlayRequest, AnimData) == 0x000000, "Member 'SHAnimMontagePlayer_PlayRequest::AnimData' has a wrong offset!");
static_assert(offsetof(SHAnimMontagePlayer_PlayRequest, BlendSpaceInput) == 0x0000B0, "Member 'SHAnimMontagePlayer_PlayRequest::BlendSpaceInput' has a wrong offset!");
static_assert(offsetof(SHAnimMontagePlayer_PlayRequest, ReturnValue) == 0x0000C8, "Member 'SHAnimMontagePlayer_PlayRequest::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimMontagePlayer.ResumeRequest
// 0x0001 (0x0001 - 0x0000)
struct SHAnimMontagePlayer_ResumeRequest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimMontagePlayer_ResumeRequest) == 0x000001, "Wrong alignment on SHAnimMontagePlayer_ResumeRequest");
static_assert(sizeof(SHAnimMontagePlayer_ResumeRequest) == 0x000001, "Wrong size on SHAnimMontagePlayer_ResumeRequest");
static_assert(offsetof(SHAnimMontagePlayer_ResumeRequest, ReturnValue) == 0x000000, "Member 'SHAnimMontagePlayer_ResumeRequest::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimMontagePlayer.StopRequest
// 0x0008 (0x0008 - 0x0000)
struct SHAnimMontagePlayer_StopRequest final
{
public:
	float                                         StopBlendoutTime;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHAnimMontagePlayer_StopRequest) == 0x000004, "Wrong alignment on SHAnimMontagePlayer_StopRequest");
static_assert(sizeof(SHAnimMontagePlayer_StopRequest) == 0x000008, "Wrong size on SHAnimMontagePlayer_StopRequest");
static_assert(offsetof(SHAnimMontagePlayer_StopRequest, StopBlendoutTime) == 0x000000, "Member 'SHAnimMontagePlayer_StopRequest::StopBlendoutTime' has a wrong offset!");
static_assert(offsetof(SHAnimMontagePlayer_StopRequest, ReturnValue) == 0x000004, "Member 'SHAnimMontagePlayer_StopRequest::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimMontagePlayer.GetCurrentMontage
// 0x0008 (0x0008 - 0x0000)
struct SHAnimMontagePlayer_GetCurrentMontage final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimMontagePlayer_GetCurrentMontage) == 0x000008, "Wrong alignment on SHAnimMontagePlayer_GetCurrentMontage");
static_assert(sizeof(SHAnimMontagePlayer_GetCurrentMontage) == 0x000008, "Wrong size on SHAnimMontagePlayer_GetCurrentMontage");
static_assert(offsetof(SHAnimMontagePlayer_GetCurrentMontage, ReturnValue) == 0x000000, "Member 'SHAnimMontagePlayer_GetCurrentMontage::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimMontagePlayer.GetInputData
// 0x0008 (0x0008 - 0x0000)
struct SHAnimMontagePlayer_GetInputData final
{
public:
	class UAnimSequenceBase*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimMontagePlayer_GetInputData) == 0x000008, "Wrong alignment on SHAnimMontagePlayer_GetInputData");
static_assert(sizeof(SHAnimMontagePlayer_GetInputData) == 0x000008, "Wrong size on SHAnimMontagePlayer_GetInputData");
static_assert(offsetof(SHAnimMontagePlayer_GetInputData, ReturnValue) == 0x000000, "Member 'SHAnimMontagePlayer_GetInputData::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimMontagePlayer.GetPlayAnimationData
// 0x00B0 (0x00B0 - 0x0000)
struct SHAnimMontagePlayer_GetPlayAnimationData final
{
public:
	struct FPlayAnimationData                     ReturnValue;                                       // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimMontagePlayer_GetPlayAnimationData) == 0x000008, "Wrong alignment on SHAnimMontagePlayer_GetPlayAnimationData");
static_assert(sizeof(SHAnimMontagePlayer_GetPlayAnimationData) == 0x0000B0, "Wrong size on SHAnimMontagePlayer_GetPlayAnimationData");
static_assert(offsetof(SHAnimMontagePlayer_GetPlayAnimationData, ReturnValue) == 0x000000, "Member 'SHAnimMontagePlayer_GetPlayAnimationData::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimMontagePlayer.GetPosition
// 0x0004 (0x0004 - 0x0000)
struct SHAnimMontagePlayer_GetPosition final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimMontagePlayer_GetPosition) == 0x000004, "Wrong alignment on SHAnimMontagePlayer_GetPosition");
static_assert(sizeof(SHAnimMontagePlayer_GetPosition) == 0x000004, "Wrong size on SHAnimMontagePlayer_GetPosition");
static_assert(offsetof(SHAnimMontagePlayer_GetPosition, ReturnValue) == 0x000000, "Member 'SHAnimMontagePlayer_GetPosition::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimMontagePlayer.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct SHAnimMontagePlayer_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimMontagePlayer_IsPlaying) == 0x000001, "Wrong alignment on SHAnimMontagePlayer_IsPlaying");
static_assert(sizeof(SHAnimMontagePlayer_IsPlaying) == 0x000001, "Wrong size on SHAnimMontagePlayer_IsPlaying");
static_assert(offsetof(SHAnimMontagePlayer_IsPlaying, ReturnValue) == 0x000000, "Member 'SHAnimMontagePlayer_IsPlaying::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimMovementSubcomp.CanPlayInvestigationAnim
// 0x0001 (0x0001 - 0x0000)
struct SHAnimMovementSubcomp_CanPlayInvestigationAnim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimMovementSubcomp_CanPlayInvestigationAnim) == 0x000001, "Wrong alignment on SHAnimMovementSubcomp_CanPlayInvestigationAnim");
static_assert(sizeof(SHAnimMovementSubcomp_CanPlayInvestigationAnim) == 0x000001, "Wrong size on SHAnimMovementSubcomp_CanPlayInvestigationAnim");
static_assert(offsetof(SHAnimMovementSubcomp_CanPlayInvestigationAnim, ReturnValue) == 0x000000, "Member 'SHAnimMovementSubcomp_CanPlayInvestigationAnim::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimMovementSubcomp.GetLocomotionAnimationState
// 0x0001 (0x0001 - 0x0000)
struct SHAnimMovementSubcomp_GetLocomotionAnimationState final
{
public:
	ELocomotionState                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimMovementSubcomp_GetLocomotionAnimationState) == 0x000001, "Wrong alignment on SHAnimMovementSubcomp_GetLocomotionAnimationState");
static_assert(sizeof(SHAnimMovementSubcomp_GetLocomotionAnimationState) == 0x000001, "Wrong size on SHAnimMovementSubcomp_GetLocomotionAnimationState");
static_assert(offsetof(SHAnimMovementSubcomp_GetLocomotionAnimationState, ReturnValue) == 0x000000, "Member 'SHAnimMovementSubcomp_GetLocomotionAnimationState::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimMovementSubcomp.GetLocomotionAnimInstance
// 0x0008 (0x0008 - 0x0000)
struct SHAnimMovementSubcomp_GetLocomotionAnimInstance final
{
public:
	class USHLocomotionAnimInstance*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimMovementSubcomp_GetLocomotionAnimInstance) == 0x000008, "Wrong alignment on SHAnimMovementSubcomp_GetLocomotionAnimInstance");
static_assert(sizeof(SHAnimMovementSubcomp_GetLocomotionAnimInstance) == 0x000008, "Wrong size on SHAnimMovementSubcomp_GetLocomotionAnimInstance");
static_assert(offsetof(SHAnimMovementSubcomp_GetLocomotionAnimInstance, ReturnValue) == 0x000000, "Member 'SHAnimMovementSubcomp_GetLocomotionAnimInstance::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimMovementSubcomp.HasMovementInput
// 0x0001 (0x0001 - 0x0000)
struct SHAnimMovementSubcomp_HasMovementInput final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimMovementSubcomp_HasMovementInput) == 0x000001, "Wrong alignment on SHAnimMovementSubcomp_HasMovementInput");
static_assert(sizeof(SHAnimMovementSubcomp_HasMovementInput) == 0x000001, "Wrong size on SHAnimMovementSubcomp_HasMovementInput");
static_assert(offsetof(SHAnimMovementSubcomp_HasMovementInput, ReturnValue) == 0x000000, "Member 'SHAnimMovementSubcomp_HasMovementInput::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimMovementSubcomp.IsMoving
// 0x0001 (0x0001 - 0x0000)
struct SHAnimMovementSubcomp_IsMoving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimMovementSubcomp_IsMoving) == 0x000001, "Wrong alignment on SHAnimMovementSubcomp_IsMoving");
static_assert(sizeof(SHAnimMovementSubcomp_IsMoving) == 0x000001, "Wrong size on SHAnimMovementSubcomp_IsMoving");
static_assert(offsetof(SHAnimMovementSubcomp_IsMoving, ReturnValue) == 0x000000, "Member 'SHAnimMovementSubcomp_IsMoving::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimMovementSubcomp.ShouldLookOnAimWalk
// 0x0001 (0x0001 - 0x0000)
struct SHAnimMovementSubcomp_ShouldLookOnAimWalk final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimMovementSubcomp_ShouldLookOnAimWalk) == 0x000001, "Wrong alignment on SHAnimMovementSubcomp_ShouldLookOnAimWalk");
static_assert(sizeof(SHAnimMovementSubcomp_ShouldLookOnAimWalk) == 0x000001, "Wrong size on SHAnimMovementSubcomp_ShouldLookOnAimWalk");
static_assert(offsetof(SHAnimMovementSubcomp_ShouldLookOnAimWalk, ReturnValue) == 0x000000, "Member 'SHAnimMovementSubcomp_ShouldLookOnAimWalk::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimMovementSubcomp.ShouldMove
// 0x0001 (0x0001 - 0x0000)
struct SHAnimMovementSubcomp_ShouldMove final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimMovementSubcomp_ShouldMove) == 0x000001, "Wrong alignment on SHAnimMovementSubcomp_ShouldMove");
static_assert(sizeof(SHAnimMovementSubcomp_ShouldMove) == 0x000001, "Wrong size on SHAnimMovementSubcomp_ShouldMove");
static_assert(offsetof(SHAnimMovementSubcomp_ShouldMove, ReturnValue) == 0x000000, "Member 'SHAnimMovementSubcomp_ShouldMove::ReturnValue' has a wrong offset!");

// Function SHProto.SHStagedAnimActionExecutive.AdvanceStageRequest
// 0x0001 (0x0001 - 0x0000)
struct SHStagedAnimActionExecutive_AdvanceStageRequest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHStagedAnimActionExecutive_AdvanceStageRequest) == 0x000001, "Wrong alignment on SHStagedAnimActionExecutive_AdvanceStageRequest");
static_assert(sizeof(SHStagedAnimActionExecutive_AdvanceStageRequest) == 0x000001, "Wrong size on SHStagedAnimActionExecutive_AdvanceStageRequest");
static_assert(offsetof(SHStagedAnimActionExecutive_AdvanceStageRequest, ReturnValue) == 0x000000, "Member 'SHStagedAnimActionExecutive_AdvanceStageRequest::ReturnValue' has a wrong offset!");

// Function SHProto.SHStagedAnimActionExecutive.GetLinkedStagedAnimInst
// 0x0008 (0x0008 - 0x0000)
struct SHStagedAnimActionExecutive_GetLinkedStagedAnimInst final
{
public:
	class USHBaseStagedAnimInstance*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHStagedAnimActionExecutive_GetLinkedStagedAnimInst) == 0x000008, "Wrong alignment on SHStagedAnimActionExecutive_GetLinkedStagedAnimInst");
static_assert(sizeof(SHStagedAnimActionExecutive_GetLinkedStagedAnimInst) == 0x000008, "Wrong size on SHStagedAnimActionExecutive_GetLinkedStagedAnimInst");
static_assert(offsetof(SHStagedAnimActionExecutive_GetLinkedStagedAnimInst, ReturnValue) == 0x000000, "Member 'SHStagedAnimActionExecutive_GetLinkedStagedAnimInst::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayImpactDetectionComponent.CreateHitEvent
// 0x0118 (0x0118 - 0x0000)
struct SHCharacterPlayImpactDetectionComponent_CreateHitEvent final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0030(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayImpactDetectionComponent_CreateHitEvent) == 0x000008, "Wrong alignment on SHCharacterPlayImpactDetectionComponent_CreateHitEvent");
static_assert(sizeof(SHCharacterPlayImpactDetectionComponent_CreateHitEvent) == 0x000118, "Wrong size on SHCharacterPlayImpactDetectionComponent_CreateHitEvent");
static_assert(offsetof(SHCharacterPlayImpactDetectionComponent_CreateHitEvent, HitComponent) == 0x000000, "Member 'SHCharacterPlayImpactDetectionComponent_CreateHitEvent::HitComponent' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayImpactDetectionComponent_CreateHitEvent, OtherActor) == 0x000008, "Member 'SHCharacterPlayImpactDetectionComponent_CreateHitEvent::OtherActor' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayImpactDetectionComponent_CreateHitEvent, OtherComp) == 0x000010, "Member 'SHCharacterPlayImpactDetectionComponent_CreateHitEvent::OtherComp' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayImpactDetectionComponent_CreateHitEvent, NormalImpulse) == 0x000018, "Member 'SHCharacterPlayImpactDetectionComponent_CreateHitEvent::NormalImpulse' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayImpactDetectionComponent_CreateHitEvent, Hit) == 0x000030, "Member 'SHCharacterPlayImpactDetectionComponent_CreateHitEvent::Hit' has a wrong offset!");

// Function SHProto.SHCharacterPlayLighting.SetFlashlightOffSupportLightProgress
// 0x0004 (0x0004 - 0x0000)
struct SHCharacterPlayLighting_SetFlashlightOffSupportLightProgress final
{
public:
	float                                         ProgressValue;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayLighting_SetFlashlightOffSupportLightProgress) == 0x000004, "Wrong alignment on SHCharacterPlayLighting_SetFlashlightOffSupportLightProgress");
static_assert(sizeof(SHCharacterPlayLighting_SetFlashlightOffSupportLightProgress) == 0x000004, "Wrong size on SHCharacterPlayLighting_SetFlashlightOffSupportLightProgress");
static_assert(offsetof(SHCharacterPlayLighting_SetFlashlightOffSupportLightProgress, ProgressValue) == 0x000000, "Member 'SHCharacterPlayLighting_SetFlashlightOffSupportLightProgress::ProgressValue' has a wrong offset!");

// Function SHProto.SHSystemFXBase.OnInit
// 0x00F0 (0x00F0 - 0x0000)
struct SHSystemFXBase_OnInit final
{
public:
	const class USHSystemFXData*                  InSystemFXData;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             InHit;                                             // 0x0008(0x00E8)(ConstParm, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSystemFXBase_OnInit) == 0x000008, "Wrong alignment on SHSystemFXBase_OnInit");
static_assert(sizeof(SHSystemFXBase_OnInit) == 0x0000F0, "Wrong size on SHSystemFXBase_OnInit");
static_assert(offsetof(SHSystemFXBase_OnInit, InSystemFXData) == 0x000000, "Member 'SHSystemFXBase_OnInit::InSystemFXData' has a wrong offset!");
static_assert(offsetof(SHSystemFXBase_OnInit, InHit) == 0x000008, "Member 'SHSystemFXBase_OnInit::InHit' has a wrong offset!");

// Function SHProto.SHSystemFXBase.PostAkEvent
// 0x0010 (0x0010 - 0x0000)
struct SHSystemFXBase_PostAkEvent final
{
public:
	class UAkAudioEvent*                          InAudioAsset;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InShouldStopPooledAkComponentOnEndPlay;            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHSystemFXBase_PostAkEvent) == 0x000008, "Wrong alignment on SHSystemFXBase_PostAkEvent");
static_assert(sizeof(SHSystemFXBase_PostAkEvent) == 0x000010, "Wrong size on SHSystemFXBase_PostAkEvent");
static_assert(offsetof(SHSystemFXBase_PostAkEvent, InAudioAsset) == 0x000000, "Member 'SHSystemFXBase_PostAkEvent::InAudioAsset' has a wrong offset!");
static_assert(offsetof(SHSystemFXBase_PostAkEvent, InShouldStopPooledAkComponentOnEndPlay) == 0x000008, "Member 'SHSystemFXBase_PostAkEvent::InShouldStopPooledAkComponentOnEndPlay' has a wrong offset!");

// Function SHProto.SHSystemFXBase.ProcessImpactFXFinished
// 0x0008 (0x0008 - 0x0000)
struct SHSystemFXBase_ProcessImpactFXFinished final
{
public:
	class UNiagaraComponent*                      InComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSystemFXBase_ProcessImpactFXFinished) == 0x000008, "Wrong alignment on SHSystemFXBase_ProcessImpactFXFinished");
static_assert(sizeof(SHSystemFXBase_ProcessImpactFXFinished) == 0x000008, "Wrong size on SHSystemFXBase_ProcessImpactFXFinished");
static_assert(offsetof(SHSystemFXBase_ProcessImpactFXFinished, InComponent) == 0x000000, "Member 'SHSystemFXBase_ProcessImpactFXFinished::InComponent' has a wrong offset!");

// Function SHProto.SHSystemFXBase.SetSelfDestroyTimeValue
// 0x0004 (0x0004 - 0x0000)
struct SHSystemFXBase_SetSelfDestroyTimeValue final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSystemFXBase_SetSelfDestroyTimeValue) == 0x000004, "Wrong alignment on SHSystemFXBase_SetSelfDestroyTimeValue");
static_assert(sizeof(SHSystemFXBase_SetSelfDestroyTimeValue) == 0x000004, "Wrong size on SHSystemFXBase_SetSelfDestroyTimeValue");
static_assert(offsetof(SHSystemFXBase_SetSelfDestroyTimeValue, InValue) == 0x000000, "Member 'SHSystemFXBase_SetSelfDestroyTimeValue::InValue' has a wrong offset!");

// Function SHProto.SHSystemFXBase.GetDecalMaterialDynamic
// 0x0008 (0x0008 - 0x0000)
struct SHSystemFXBase_GetDecalMaterialDynamic final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSystemFXBase_GetDecalMaterialDynamic) == 0x000008, "Wrong alignment on SHSystemFXBase_GetDecalMaterialDynamic");
static_assert(sizeof(SHSystemFXBase_GetDecalMaterialDynamic) == 0x000008, "Wrong size on SHSystemFXBase_GetDecalMaterialDynamic");
static_assert(offsetof(SHSystemFXBase_GetDecalMaterialDynamic, ReturnValue) == 0x000000, "Member 'SHSystemFXBase_GetDecalMaterialDynamic::ReturnValue' has a wrong offset!");

// Function SHProto.SHSystemFXBase.GetSpawnedNiagaraComponent
// 0x0008 (0x0008 - 0x0000)
struct SHSystemFXBase_GetSpawnedNiagaraComponent final
{
public:
	class UNiagaraComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSystemFXBase_GetSpawnedNiagaraComponent) == 0x000008, "Wrong alignment on SHSystemFXBase_GetSpawnedNiagaraComponent");
static_assert(sizeof(SHSystemFXBase_GetSpawnedNiagaraComponent) == 0x000008, "Wrong size on SHSystemFXBase_GetSpawnedNiagaraComponent");
static_assert(offsetof(SHSystemFXBase_GetSpawnedNiagaraComponent, ReturnValue) == 0x000000, "Member 'SHSystemFXBase_GetSpawnedNiagaraComponent::ReturnValue' has a wrong offset!");

// Function SHProto.SHPukePuddleBase.GetPuddleRadius
// 0x0004 (0x0004 - 0x0000)
struct SHPukePuddleBase_GetPuddleRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPukePuddleBase_GetPuddleRadius) == 0x000004, "Wrong alignment on SHPukePuddleBase_GetPuddleRadius");
static_assert(sizeof(SHPukePuddleBase_GetPuddleRadius) == 0x000004, "Wrong size on SHPukePuddleBase_GetPuddleRadius");
static_assert(offsetof(SHPukePuddleBase_GetPuddleRadius, ReturnValue) == 0x000000, "Member 'SHPukePuddleBase_GetPuddleRadius::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.ClearMovementScale
// 0x0008 (0x0008 - 0x0000)
struct SHCharacterPlayMovementComponent_ClearMovementScale final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_ClearMovementScale) == 0x000008, "Wrong alignment on SHCharacterPlayMovementComponent_ClearMovementScale");
static_assert(sizeof(SHCharacterPlayMovementComponent_ClearMovementScale) == 0x000008, "Wrong size on SHCharacterPlayMovementComponent_ClearMovementScale");
static_assert(offsetof(SHCharacterPlayMovementComponent_ClearMovementScale, Object) == 0x000000, "Member 'SHCharacterPlayMovementComponent_ClearMovementScale::Object' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.HandleReceiveDamageEvent
// 0x0008 (0x0008 - 0x0000)
struct SHCharacterPlayMovementComponent_HandleReceiveDamageEvent final
{
public:
	class USHCharacterPlayCombatComponent*        CombatComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_HandleReceiveDamageEvent) == 0x000008, "Wrong alignment on SHCharacterPlayMovementComponent_HandleReceiveDamageEvent");
static_assert(sizeof(SHCharacterPlayMovementComponent_HandleReceiveDamageEvent) == 0x000008, "Wrong size on SHCharacterPlayMovementComponent_HandleReceiveDamageEvent");
static_assert(offsetof(SHCharacterPlayMovementComponent_HandleReceiveDamageEvent, CombatComp) == 0x000000, "Member 'SHCharacterPlayMovementComponent_HandleReceiveDamageEvent::CombatComp' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.MovementSnapAbsolute
// 0x0038 (0x0038 - 0x0000)
struct SHCharacterPlayMovementComponent_MovementSnapAbsolute final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSHMovementSnapConfig                  Config;                                            // 0x001C(0x0008)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USHOperationEvents*                     ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_MovementSnapAbsolute) == 0x000008, "Wrong alignment on SHCharacterPlayMovementComponent_MovementSnapAbsolute");
static_assert(sizeof(SHCharacterPlayMovementComponent_MovementSnapAbsolute) == 0x000038, "Wrong size on SHCharacterPlayMovementComponent_MovementSnapAbsolute");
static_assert(offsetof(SHCharacterPlayMovementComponent_MovementSnapAbsolute, Location) == 0x000000, "Member 'SHCharacterPlayMovementComponent_MovementSnapAbsolute::Location' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMovementComponent_MovementSnapAbsolute, Timeout) == 0x000018, "Member 'SHCharacterPlayMovementComponent_MovementSnapAbsolute::Timeout' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMovementComponent_MovementSnapAbsolute, Config) == 0x00001C, "Member 'SHCharacterPlayMovementComponent_MovementSnapAbsolute::Config' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMovementComponent_MovementSnapAbsolute, Object) == 0x000028, "Member 'SHCharacterPlayMovementComponent_MovementSnapAbsolute::Object' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMovementComponent_MovementSnapAbsolute, ReturnValue) == 0x000030, "Member 'SHCharacterPlayMovementComponent_MovementSnapAbsolute::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.RotationSnapAbsolute
// 0x0038 (0x0038 - 0x0000)
struct SHCharacterPlayMovementComponent_RotationSnapAbsolute final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Curve;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USHOperationEvents*                     ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_RotationSnapAbsolute) == 0x000008, "Wrong alignment on SHCharacterPlayMovementComponent_RotationSnapAbsolute");
static_assert(sizeof(SHCharacterPlayMovementComponent_RotationSnapAbsolute) == 0x000038, "Wrong size on SHCharacterPlayMovementComponent_RotationSnapAbsolute");
static_assert(offsetof(SHCharacterPlayMovementComponent_RotationSnapAbsolute, Location) == 0x000000, "Member 'SHCharacterPlayMovementComponent_RotationSnapAbsolute::Location' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMovementComponent_RotationSnapAbsolute, Duration) == 0x000018, "Member 'SHCharacterPlayMovementComponent_RotationSnapAbsolute::Duration' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMovementComponent_RotationSnapAbsolute, Object) == 0x000020, "Member 'SHCharacterPlayMovementComponent_RotationSnapAbsolute::Object' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMovementComponent_RotationSnapAbsolute, Curve) == 0x000028, "Member 'SHCharacterPlayMovementComponent_RotationSnapAbsolute::Curve' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMovementComponent_RotationSnapAbsolute, ReturnValue) == 0x000030, "Member 'SHCharacterPlayMovementComponent_RotationSnapAbsolute::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.RotationSnapAbsoluteStatic
// 0x0038 (0x0038 - 0x0000)
struct SHCharacterPlayMovementComponent_RotationSnapAbsoluteStatic final
{
public:
	struct FRotator                               WorldRotation;                                     // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Curve;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USHOperationEvents*                     ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_RotationSnapAbsoluteStatic) == 0x000008, "Wrong alignment on SHCharacterPlayMovementComponent_RotationSnapAbsoluteStatic");
static_assert(sizeof(SHCharacterPlayMovementComponent_RotationSnapAbsoluteStatic) == 0x000038, "Wrong size on SHCharacterPlayMovementComponent_RotationSnapAbsoluteStatic");
static_assert(offsetof(SHCharacterPlayMovementComponent_RotationSnapAbsoluteStatic, WorldRotation) == 0x000000, "Member 'SHCharacterPlayMovementComponent_RotationSnapAbsoluteStatic::WorldRotation' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMovementComponent_RotationSnapAbsoluteStatic, Duration) == 0x000018, "Member 'SHCharacterPlayMovementComponent_RotationSnapAbsoluteStatic::Duration' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMovementComponent_RotationSnapAbsoluteStatic, Object) == 0x000020, "Member 'SHCharacterPlayMovementComponent_RotationSnapAbsoluteStatic::Object' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMovementComponent_RotationSnapAbsoluteStatic, Curve) == 0x000028, "Member 'SHCharacterPlayMovementComponent_RotationSnapAbsoluteStatic::Curve' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMovementComponent_RotationSnapAbsoluteStatic, ReturnValue) == 0x000030, "Member 'SHCharacterPlayMovementComponent_RotationSnapAbsoluteStatic::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.SetControllerYawRotationMatchingBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayMovementComponent_SetControllerYawRotationMatchingBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_SetControllerYawRotationMatchingBlocked) == 0x000008, "Wrong alignment on SHCharacterPlayMovementComponent_SetControllerYawRotationMatchingBlocked");
static_assert(sizeof(SHCharacterPlayMovementComponent_SetControllerYawRotationMatchingBlocked) == 0x000010, "Wrong size on SHCharacterPlayMovementComponent_SetControllerYawRotationMatchingBlocked");
static_assert(offsetof(SHCharacterPlayMovementComponent_SetControllerYawRotationMatchingBlocked, Blocked) == 0x000000, "Member 'SHCharacterPlayMovementComponent_SetControllerYawRotationMatchingBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMovementComponent_SetControllerYawRotationMatchingBlocked, Object) == 0x000008, "Member 'SHCharacterPlayMovementComponent_SetControllerYawRotationMatchingBlocked::Object' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.SetDisableToggleSprintAutoEnd
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayMovementComponent_SetDisableToggleSprintAutoEnd final
{
public:
	bool                                          InValue;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_SetDisableToggleSprintAutoEnd) == 0x000008, "Wrong alignment on SHCharacterPlayMovementComponent_SetDisableToggleSprintAutoEnd");
static_assert(sizeof(SHCharacterPlayMovementComponent_SetDisableToggleSprintAutoEnd) == 0x000010, "Wrong size on SHCharacterPlayMovementComponent_SetDisableToggleSprintAutoEnd");
static_assert(offsetof(SHCharacterPlayMovementComponent_SetDisableToggleSprintAutoEnd, InValue) == 0x000000, "Member 'SHCharacterPlayMovementComponent_SetDisableToggleSprintAutoEnd::InValue' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMovementComponent_SetDisableToggleSprintAutoEnd, Object) == 0x000008, "Member 'SHCharacterPlayMovementComponent_SetDisableToggleSprintAutoEnd::Object' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.SetIsOnStairs
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayMovementComponent_SetIsOnStairs final
{
public:
	bool                                          OnStairs;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_SetIsOnStairs) == 0x000001, "Wrong alignment on SHCharacterPlayMovementComponent_SetIsOnStairs");
static_assert(sizeof(SHCharacterPlayMovementComponent_SetIsOnStairs) == 0x000001, "Wrong size on SHCharacterPlayMovementComponent_SetIsOnStairs");
static_assert(offsetof(SHCharacterPlayMovementComponent_SetIsOnStairs, OnStairs) == 0x000000, "Member 'SHCharacterPlayMovementComponent_SetIsOnStairs::OnStairs' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.SetMovementBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayMovementComponent_SetMovementBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_SetMovementBlocked) == 0x000008, "Wrong alignment on SHCharacterPlayMovementComponent_SetMovementBlocked");
static_assert(sizeof(SHCharacterPlayMovementComponent_SetMovementBlocked) == 0x000010, "Wrong size on SHCharacterPlayMovementComponent_SetMovementBlocked");
static_assert(offsetof(SHCharacterPlayMovementComponent_SetMovementBlocked, Blocked) == 0x000000, "Member 'SHCharacterPlayMovementComponent_SetMovementBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMovementComponent_SetMovementBlocked, Object) == 0x000008, "Member 'SHCharacterPlayMovementComponent_SetMovementBlocked::Object' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.SetMovementScale
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayMovementComponent_SetMovementScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_SetMovementScale) == 0x000008, "Wrong alignment on SHCharacterPlayMovementComponent_SetMovementScale");
static_assert(sizeof(SHCharacterPlayMovementComponent_SetMovementScale) == 0x000010, "Wrong size on SHCharacterPlayMovementComponent_SetMovementScale");
static_assert(offsetof(SHCharacterPlayMovementComponent_SetMovementScale, Scale) == 0x000000, "Member 'SHCharacterPlayMovementComponent_SetMovementScale::Scale' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMovementComponent_SetMovementScale, Object) == 0x000008, "Member 'SHCharacterPlayMovementComponent_SetMovementScale::Object' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.SetPhysWalkingBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayMovementComponent_SetPhysWalkingBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_SetPhysWalkingBlocked) == 0x000008, "Wrong alignment on SHCharacterPlayMovementComponent_SetPhysWalkingBlocked");
static_assert(sizeof(SHCharacterPlayMovementComponent_SetPhysWalkingBlocked) == 0x000010, "Wrong size on SHCharacterPlayMovementComponent_SetPhysWalkingBlocked");
static_assert(offsetof(SHCharacterPlayMovementComponent_SetPhysWalkingBlocked, Blocked) == 0x000000, "Member 'SHCharacterPlayMovementComponent_SetPhysWalkingBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMovementComponent_SetPhysWalkingBlocked, Object) == 0x000008, "Member 'SHCharacterPlayMovementComponent_SetPhysWalkingBlocked::Object' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.SetRotateInPlaceBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayMovementComponent_SetRotateInPlaceBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_SetRotateInPlaceBlocked) == 0x000008, "Wrong alignment on SHCharacterPlayMovementComponent_SetRotateInPlaceBlocked");
static_assert(sizeof(SHCharacterPlayMovementComponent_SetRotateInPlaceBlocked) == 0x000010, "Wrong size on SHCharacterPlayMovementComponent_SetRotateInPlaceBlocked");
static_assert(offsetof(SHCharacterPlayMovementComponent_SetRotateInPlaceBlocked, Blocked) == 0x000000, "Member 'SHCharacterPlayMovementComponent_SetRotateInPlaceBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMovementComponent_SetRotateInPlaceBlocked, Object) == 0x000008, "Member 'SHCharacterPlayMovementComponent_SetRotateInPlaceBlocked::Object' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.SetRotateInPlaceCustomAllowed
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayMovementComponent_SetRotateInPlaceCustomAllowed final
{
public:
	bool                                          bInAllowed;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_SetRotateInPlaceCustomAllowed) == 0x000008, "Wrong alignment on SHCharacterPlayMovementComponent_SetRotateInPlaceCustomAllowed");
static_assert(sizeof(SHCharacterPlayMovementComponent_SetRotateInPlaceCustomAllowed) == 0x000010, "Wrong size on SHCharacterPlayMovementComponent_SetRotateInPlaceCustomAllowed");
static_assert(offsetof(SHCharacterPlayMovementComponent_SetRotateInPlaceCustomAllowed, bInAllowed) == 0x000000, "Member 'SHCharacterPlayMovementComponent_SetRotateInPlaceCustomAllowed::bInAllowed' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMovementComponent_SetRotateInPlaceCustomAllowed, Object) == 0x000008, "Member 'SHCharacterPlayMovementComponent_SetRotateInPlaceCustomAllowed::Object' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.SetSprintBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayMovementComponent_SetSprintBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_SetSprintBlocked) == 0x000008, "Wrong alignment on SHCharacterPlayMovementComponent_SetSprintBlocked");
static_assert(sizeof(SHCharacterPlayMovementComponent_SetSprintBlocked) == 0x000010, "Wrong size on SHCharacterPlayMovementComponent_SetSprintBlocked");
static_assert(offsetof(SHCharacterPlayMovementComponent_SetSprintBlocked, Blocked) == 0x000000, "Member 'SHCharacterPlayMovementComponent_SetSprintBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMovementComponent_SetSprintBlocked, Object) == 0x000008, "Member 'SHCharacterPlayMovementComponent_SetSprintBlocked::Object' has a wrong offset!");

// DelegateFunction SHProto.SHCharacterPlayMovementComponent.SHCharacterPlayMovementEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHCharacterPlayMovementComponent_SHCharacterPlayMovementEvent__DelegateSignature final
{
public:
	class USHCharacterPlayMovementComponent*      ComponentRef;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_SHCharacterPlayMovementEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHCharacterPlayMovementComponent_SHCharacterPlayMovementEvent__DelegateSignature");
static_assert(sizeof(SHCharacterPlayMovementComponent_SHCharacterPlayMovementEvent__DelegateSignature) == 0x000008, "Wrong size on SHCharacterPlayMovementComponent_SHCharacterPlayMovementEvent__DelegateSignature");
static_assert(offsetof(SHCharacterPlayMovementComponent_SHCharacterPlayMovementEvent__DelegateSignature, ComponentRef) == 0x000000, "Member 'SHCharacterPlayMovementComponent_SHCharacterPlayMovementEvent__DelegateSignature::ComponentRef' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.SlideSnapAbsolute
// 0x0048 (0x0048 - 0x0000)
struct SHCharacterPlayMovementComponent_SlideSnapAbsolute final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         InCollisionIgnoredActors;                          // 0x0028(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Curve;                                             // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USHOperationEvents*                     ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_SlideSnapAbsolute) == 0x000008, "Wrong alignment on SHCharacterPlayMovementComponent_SlideSnapAbsolute");
static_assert(sizeof(SHCharacterPlayMovementComponent_SlideSnapAbsolute) == 0x000048, "Wrong size on SHCharacterPlayMovementComponent_SlideSnapAbsolute");
static_assert(offsetof(SHCharacterPlayMovementComponent_SlideSnapAbsolute, Location) == 0x000000, "Member 'SHCharacterPlayMovementComponent_SlideSnapAbsolute::Location' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMovementComponent_SlideSnapAbsolute, Duration) == 0x000018, "Member 'SHCharacterPlayMovementComponent_SlideSnapAbsolute::Duration' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMovementComponent_SlideSnapAbsolute, Object) == 0x000020, "Member 'SHCharacterPlayMovementComponent_SlideSnapAbsolute::Object' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMovementComponent_SlideSnapAbsolute, InCollisionIgnoredActors) == 0x000028, "Member 'SHCharacterPlayMovementComponent_SlideSnapAbsolute::InCollisionIgnoredActors' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMovementComponent_SlideSnapAbsolute, Curve) == 0x000038, "Member 'SHCharacterPlayMovementComponent_SlideSnapAbsolute::Curve' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMovementComponent_SlideSnapAbsolute, ReturnValue) == 0x000040, "Member 'SHCharacterPlayMovementComponent_SlideSnapAbsolute::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.TeleportAbsolute
// 0x0060 (0x0060 - 0x0000)
struct SHCharacterPlayMovementComponent_TeleportAbsolute final
{
public:
	struct FTransform                             InTransform;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_TeleportAbsolute) == 0x000010, "Wrong alignment on SHCharacterPlayMovementComponent_TeleportAbsolute");
static_assert(sizeof(SHCharacterPlayMovementComponent_TeleportAbsolute) == 0x000060, "Wrong size on SHCharacterPlayMovementComponent_TeleportAbsolute");
static_assert(offsetof(SHCharacterPlayMovementComponent_TeleportAbsolute, InTransform) == 0x000000, "Member 'SHCharacterPlayMovementComponent_TeleportAbsolute::InTransform' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.TeleportAbsoluteWithView
// 0x0080 (0x0080 - 0x0000)
struct SHCharacterPlayMovementComponent_TeleportAbsoluteWithView final
{
public:
	struct FTransform                             InTransform;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InViewRotation;                                    // 0x0060(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCharacterPlayMovementComponent_TeleportAbsoluteWithView) == 0x000010, "Wrong alignment on SHCharacterPlayMovementComponent_TeleportAbsoluteWithView");
static_assert(sizeof(SHCharacterPlayMovementComponent_TeleportAbsoluteWithView) == 0x000080, "Wrong size on SHCharacterPlayMovementComponent_TeleportAbsoluteWithView");
static_assert(offsetof(SHCharacterPlayMovementComponent_TeleportAbsoluteWithView, InTransform) == 0x000000, "Member 'SHCharacterPlayMovementComponent_TeleportAbsoluteWithView::InTransform' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMovementComponent_TeleportAbsoluteWithView, InViewRotation) == 0x000060, "Member 'SHCharacterPlayMovementComponent_TeleportAbsoluteWithView::InViewRotation' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.TeleportRelatively
// 0x00C0 (0x00C0 - 0x0000)
struct SHCharacterPlayMovementComponent_TeleportRelatively final
{
public:
	struct FTransform                             FirstAnchor;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             SecondAnchor;                                      // 0x0060(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_TeleportRelatively) == 0x000010, "Wrong alignment on SHCharacterPlayMovementComponent_TeleportRelatively");
static_assert(sizeof(SHCharacterPlayMovementComponent_TeleportRelatively) == 0x0000C0, "Wrong size on SHCharacterPlayMovementComponent_TeleportRelatively");
static_assert(offsetof(SHCharacterPlayMovementComponent_TeleportRelatively, FirstAnchor) == 0x000000, "Member 'SHCharacterPlayMovementComponent_TeleportRelatively::FirstAnchor' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMovementComponent_TeleportRelatively, SecondAnchor) == 0x000060, "Member 'SHCharacterPlayMovementComponent_TeleportRelatively::SecondAnchor' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.TeleportRelativelyToActors
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayMovementComponent_TeleportRelativelyToActors final
{
public:
	class AActor*                                 FirstAnchor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SecondAnchor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_TeleportRelativelyToActors) == 0x000008, "Wrong alignment on SHCharacterPlayMovementComponent_TeleportRelativelyToActors");
static_assert(sizeof(SHCharacterPlayMovementComponent_TeleportRelativelyToActors) == 0x000010, "Wrong size on SHCharacterPlayMovementComponent_TeleportRelativelyToActors");
static_assert(offsetof(SHCharacterPlayMovementComponent_TeleportRelativelyToActors, FirstAnchor) == 0x000000, "Member 'SHCharacterPlayMovementComponent_TeleportRelativelyToActors::FirstAnchor' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMovementComponent_TeleportRelativelyToActors, SecondAnchor) == 0x000008, "Member 'SHCharacterPlayMovementComponent_TeleportRelativelyToActors::SecondAnchor' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.TeleportRelativelyToComponents
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayMovementComponent_TeleportRelativelyToComponents final
{
public:
	class USceneComponent*                        FirstAnchor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        SecondAnchor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_TeleportRelativelyToComponents) == 0x000008, "Wrong alignment on SHCharacterPlayMovementComponent_TeleportRelativelyToComponents");
static_assert(sizeof(SHCharacterPlayMovementComponent_TeleportRelativelyToComponents) == 0x000010, "Wrong size on SHCharacterPlayMovementComponent_TeleportRelativelyToComponents");
static_assert(offsetof(SHCharacterPlayMovementComponent_TeleportRelativelyToComponents, FirstAnchor) == 0x000000, "Member 'SHCharacterPlayMovementComponent_TeleportRelativelyToComponents::FirstAnchor' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMovementComponent_TeleportRelativelyToComponents, SecondAnchor) == 0x000008, "Member 'SHCharacterPlayMovementComponent_TeleportRelativelyToComponents::SecondAnchor' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.TelportAbsoluteWithDefaultView
// 0x0060 (0x0060 - 0x0000)
struct SHCharacterPlayMovementComponent_TelportAbsoluteWithDefaultView final
{
public:
	struct FTransform                             InTransform;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_TelportAbsoluteWithDefaultView) == 0x000010, "Wrong alignment on SHCharacterPlayMovementComponent_TelportAbsoluteWithDefaultView");
static_assert(sizeof(SHCharacterPlayMovementComponent_TelportAbsoluteWithDefaultView) == 0x000060, "Wrong size on SHCharacterPlayMovementComponent_TelportAbsoluteWithDefaultView");
static_assert(offsetof(SHCharacterPlayMovementComponent_TelportAbsoluteWithDefaultView, InTransform) == 0x000000, "Member 'SHCharacterPlayMovementComponent_TelportAbsoluteWithDefaultView::InTransform' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.GetFakedVelocity
// 0x0018 (0x0018 - 0x0000)
struct SHCharacterPlayMovementComponent_GetFakedVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_GetFakedVelocity) == 0x000008, "Wrong alignment on SHCharacterPlayMovementComponent_GetFakedVelocity");
static_assert(sizeof(SHCharacterPlayMovementComponent_GetFakedVelocity) == 0x000018, "Wrong size on SHCharacterPlayMovementComponent_GetFakedVelocity");
static_assert(offsetof(SHCharacterPlayMovementComponent_GetFakedVelocity, ReturnValue) == 0x000000, "Member 'SHCharacterPlayMovementComponent_GetFakedVelocity::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.GetInteriorExteriorState
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayMovementComponent_GetInteriorExteriorState final
{
public:
	ESHInteriorExteriorStateEnum                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_GetInteriorExteriorState) == 0x000001, "Wrong alignment on SHCharacterPlayMovementComponent_GetInteriorExteriorState");
static_assert(sizeof(SHCharacterPlayMovementComponent_GetInteriorExteriorState) == 0x000001, "Wrong size on SHCharacterPlayMovementComponent_GetInteriorExteriorState");
static_assert(offsetof(SHCharacterPlayMovementComponent_GetInteriorExteriorState, ReturnValue) == 0x000000, "Member 'SHCharacterPlayMovementComponent_GetInteriorExteriorState::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.GetLastInputValue
// 0x0018 (0x0018 - 0x0000)
struct SHCharacterPlayMovementComponent_GetLastInputValue final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_GetLastInputValue) == 0x000008, "Wrong alignment on SHCharacterPlayMovementComponent_GetLastInputValue");
static_assert(sizeof(SHCharacterPlayMovementComponent_GetLastInputValue) == 0x000018, "Wrong size on SHCharacterPlayMovementComponent_GetLastInputValue");
static_assert(offsetof(SHCharacterPlayMovementComponent_GetLastInputValue, ReturnValue) == 0x000000, "Member 'SHCharacterPlayMovementComponent_GetLastInputValue::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.GetLastSlopeAngleDeg
// 0x0004 (0x0004 - 0x0000)
struct SHCharacterPlayMovementComponent_GetLastSlopeAngleDeg final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_GetLastSlopeAngleDeg) == 0x000004, "Wrong alignment on SHCharacterPlayMovementComponent_GetLastSlopeAngleDeg");
static_assert(sizeof(SHCharacterPlayMovementComponent_GetLastSlopeAngleDeg) == 0x000004, "Wrong size on SHCharacterPlayMovementComponent_GetLastSlopeAngleDeg");
static_assert(offsetof(SHCharacterPlayMovementComponent_GetLastSlopeAngleDeg, ReturnValue) == 0x000000, "Member 'SHCharacterPlayMovementComponent_GetLastSlopeAngleDeg::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.IsControllerYawRotationMatchingBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayMovementComponent_IsControllerYawRotationMatchingBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_IsControllerYawRotationMatchingBlocked) == 0x000001, "Wrong alignment on SHCharacterPlayMovementComponent_IsControllerYawRotationMatchingBlocked");
static_assert(sizeof(SHCharacterPlayMovementComponent_IsControllerYawRotationMatchingBlocked) == 0x000001, "Wrong size on SHCharacterPlayMovementComponent_IsControllerYawRotationMatchingBlocked");
static_assert(offsetof(SHCharacterPlayMovementComponent_IsControllerYawRotationMatchingBlocked, ReturnValue) == 0x000000, "Member 'SHCharacterPlayMovementComponent_IsControllerYawRotationMatchingBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.IsInWater
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayMovementComponent_IsInWater final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_IsInWater) == 0x000001, "Wrong alignment on SHCharacterPlayMovementComponent_IsInWater");
static_assert(sizeof(SHCharacterPlayMovementComponent_IsInWater) == 0x000001, "Wrong size on SHCharacterPlayMovementComponent_IsInWater");
static_assert(offsetof(SHCharacterPlayMovementComponent_IsInWater, ReturnValue) == 0x000000, "Member 'SHCharacterPlayMovementComponent_IsInWater::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.IsMovementBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayMovementComponent_IsMovementBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_IsMovementBlocked) == 0x000001, "Wrong alignment on SHCharacterPlayMovementComponent_IsMovementBlocked");
static_assert(sizeof(SHCharacterPlayMovementComponent_IsMovementBlocked) == 0x000001, "Wrong size on SHCharacterPlayMovementComponent_IsMovementBlocked");
static_assert(offsetof(SHCharacterPlayMovementComponent_IsMovementBlocked, ReturnValue) == 0x000000, "Member 'SHCharacterPlayMovementComponent_IsMovementBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.IsMovementBlockedBy
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayMovementComponent_IsMovementBlockedBy final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCharacterPlayMovementComponent_IsMovementBlockedBy) == 0x000008, "Wrong alignment on SHCharacterPlayMovementComponent_IsMovementBlockedBy");
static_assert(sizeof(SHCharacterPlayMovementComponent_IsMovementBlockedBy) == 0x000010, "Wrong size on SHCharacterPlayMovementComponent_IsMovementBlockedBy");
static_assert(offsetof(SHCharacterPlayMovementComponent_IsMovementBlockedBy, Object) == 0x000000, "Member 'SHCharacterPlayMovementComponent_IsMovementBlockedBy::Object' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMovementComponent_IsMovementBlockedBy, ReturnValue) == 0x000008, "Member 'SHCharacterPlayMovementComponent_IsMovementBlockedBy::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.IsMovingOnSlope
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayMovementComponent_IsMovingOnSlope final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_IsMovingOnSlope) == 0x000001, "Wrong alignment on SHCharacterPlayMovementComponent_IsMovingOnSlope");
static_assert(sizeof(SHCharacterPlayMovementComponent_IsMovingOnSlope) == 0x000001, "Wrong size on SHCharacterPlayMovementComponent_IsMovingOnSlope");
static_assert(offsetof(SHCharacterPlayMovementComponent_IsMovingOnSlope, ReturnValue) == 0x000000, "Member 'SHCharacterPlayMovementComponent_IsMovingOnSlope::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.IsOnStairs
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayMovementComponent_IsOnStairs final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_IsOnStairs) == 0x000001, "Wrong alignment on SHCharacterPlayMovementComponent_IsOnStairs");
static_assert(sizeof(SHCharacterPlayMovementComponent_IsOnStairs) == 0x000001, "Wrong size on SHCharacterPlayMovementComponent_IsOnStairs");
static_assert(offsetof(SHCharacterPlayMovementComponent_IsOnStairs, ReturnValue) == 0x000000, "Member 'SHCharacterPlayMovementComponent_IsOnStairs::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.IsPhysWalkingBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayMovementComponent_IsPhysWalkingBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_IsPhysWalkingBlocked) == 0x000001, "Wrong alignment on SHCharacterPlayMovementComponent_IsPhysWalkingBlocked");
static_assert(sizeof(SHCharacterPlayMovementComponent_IsPhysWalkingBlocked) == 0x000001, "Wrong size on SHCharacterPlayMovementComponent_IsPhysWalkingBlocked");
static_assert(offsetof(SHCharacterPlayMovementComponent_IsPhysWalkingBlocked, ReturnValue) == 0x000000, "Member 'SHCharacterPlayMovementComponent_IsPhysWalkingBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.IsRotateInPlaceBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayMovementComponent_IsRotateInPlaceBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_IsRotateInPlaceBlocked) == 0x000001, "Wrong alignment on SHCharacterPlayMovementComponent_IsRotateInPlaceBlocked");
static_assert(sizeof(SHCharacterPlayMovementComponent_IsRotateInPlaceBlocked) == 0x000001, "Wrong size on SHCharacterPlayMovementComponent_IsRotateInPlaceBlocked");
static_assert(offsetof(SHCharacterPlayMovementComponent_IsRotateInPlaceBlocked, ReturnValue) == 0x000000, "Member 'SHCharacterPlayMovementComponent_IsRotateInPlaceBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.IsSprintBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayMovementComponent_IsSprintBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_IsSprintBlocked) == 0x000001, "Wrong alignment on SHCharacterPlayMovementComponent_IsSprintBlocked");
static_assert(sizeof(SHCharacterPlayMovementComponent_IsSprintBlocked) == 0x000001, "Wrong size on SHCharacterPlayMovementComponent_IsSprintBlocked");
static_assert(offsetof(SHCharacterPlayMovementComponent_IsSprintBlocked, ReturnValue) == 0x000000, "Member 'SHCharacterPlayMovementComponent_IsSprintBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.IsSprintBlockedBy
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayMovementComponent_IsSprintBlockedBy final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCharacterPlayMovementComponent_IsSprintBlockedBy) == 0x000008, "Wrong alignment on SHCharacterPlayMovementComponent_IsSprintBlockedBy");
static_assert(sizeof(SHCharacterPlayMovementComponent_IsSprintBlockedBy) == 0x000010, "Wrong size on SHCharacterPlayMovementComponent_IsSprintBlockedBy");
static_assert(offsetof(SHCharacterPlayMovementComponent_IsSprintBlockedBy, Object) == 0x000000, "Member 'SHCharacterPlayMovementComponent_IsSprintBlockedBy::Object' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMovementComponent_IsSprintBlockedBy, ReturnValue) == 0x000008, "Member 'SHCharacterPlayMovementComponent_IsSprintBlockedBy::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayMovementComponent.IsSprinting
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayMovementComponent_IsSprinting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMovementComponent_IsSprinting) == 0x000001, "Wrong alignment on SHCharacterPlayMovementComponent_IsSprinting");
static_assert(sizeof(SHCharacterPlayMovementComponent_IsSprinting) == 0x000001, "Wrong size on SHCharacterPlayMovementComponent_IsSprinting");
static_assert(offsetof(SHCharacterPlayMovementComponent_IsSprinting, ReturnValue) == 0x000000, "Member 'SHCharacterPlayMovementComponent_IsSprinting::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayItemsComponent.CollectItem
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayItemsComponent_CollectItem final
{
public:
	class FName                                   ItemDataRowName;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemQuantity;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddNewItemFlag;                                    // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCharacterPlayItemsComponent_CollectItem) == 0x000004, "Wrong alignment on SHCharacterPlayItemsComponent_CollectItem");
static_assert(sizeof(SHCharacterPlayItemsComponent_CollectItem) == 0x000010, "Wrong size on SHCharacterPlayItemsComponent_CollectItem");
static_assert(offsetof(SHCharacterPlayItemsComponent_CollectItem, ItemDataRowName) == 0x000000, "Member 'SHCharacterPlayItemsComponent_CollectItem::ItemDataRowName' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayItemsComponent_CollectItem, ItemQuantity) == 0x000008, "Member 'SHCharacterPlayItemsComponent_CollectItem::ItemQuantity' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayItemsComponent_CollectItem, AddNewItemFlag) == 0x00000C, "Member 'SHCharacterPlayItemsComponent_CollectItem::AddNewItemFlag' has a wrong offset!");

// Function SHProto.SHCharacterPlayItemsComponent.GetItemExecutive
// 0x0008 (0x0008 - 0x0000)
struct SHCharacterPlayItemsComponent_GetItemExecutive final
{
public:
	class ASHItemExecutiveBase*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayItemsComponent_GetItemExecutive) == 0x000008, "Wrong alignment on SHCharacterPlayItemsComponent_GetItemExecutive");
static_assert(sizeof(SHCharacterPlayItemsComponent_GetItemExecutive) == 0x000008, "Wrong size on SHCharacterPlayItemsComponent_GetItemExecutive");
static_assert(offsetof(SHCharacterPlayItemsComponent_GetItemExecutive, ReturnValue) == 0x000000, "Member 'SHCharacterPlayItemsComponent_GetItemExecutive::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayItemsComponent.InvestigateCollectedItemRequest
// 0x000C (0x000C - 0x0000)
struct SHCharacterPlayItemsComponent_InvestigateCollectedItemRequest final
{
public:
	class FName                                   InItemDataRowName;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCharacterPlayItemsComponent_InvestigateCollectedItemRequest) == 0x000004, "Wrong alignment on SHCharacterPlayItemsComponent_InvestigateCollectedItemRequest");
static_assert(sizeof(SHCharacterPlayItemsComponent_InvestigateCollectedItemRequest) == 0x00000C, "Wrong size on SHCharacterPlayItemsComponent_InvestigateCollectedItemRequest");
static_assert(offsetof(SHCharacterPlayItemsComponent_InvestigateCollectedItemRequest, InItemDataRowName) == 0x000000, "Member 'SHCharacterPlayItemsComponent_InvestigateCollectedItemRequest::InItemDataRowName' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayItemsComponent_InvestigateCollectedItemRequest, ReturnValue) == 0x000008, "Member 'SHCharacterPlayItemsComponent_InvestigateCollectedItemRequest::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayItemsComponent.OverrideFlashlightPocketState
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayItemsComponent_OverrideFlashlightPocketState final
{
public:
	bool                                          InShouldBeOpened;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayItemsComponent_OverrideFlashlightPocketState) == 0x000008, "Wrong alignment on SHCharacterPlayItemsComponent_OverrideFlashlightPocketState");
static_assert(sizeof(SHCharacterPlayItemsComponent_OverrideFlashlightPocketState) == 0x000010, "Wrong size on SHCharacterPlayItemsComponent_OverrideFlashlightPocketState");
static_assert(offsetof(SHCharacterPlayItemsComponent_OverrideFlashlightPocketState, InShouldBeOpened) == 0x000000, "Member 'SHCharacterPlayItemsComponent_OverrideFlashlightPocketState::InShouldBeOpened' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayItemsComponent_OverrideFlashlightPocketState, Object) == 0x000008, "Member 'SHCharacterPlayItemsComponent_OverrideFlashlightPocketState::Object' has a wrong offset!");

// Function SHProto.SHCharacterPlayItemsComponent.ProcessOwnerCombatInputModeChanged
// 0x0008 (0x0008 - 0x0000)
struct SHCharacterPlayItemsComponent_ProcessOwnerCombatInputModeChanged final
{
public:
	class USHCharacterPlayCombatComponent*        CombatComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayItemsComponent_ProcessOwnerCombatInputModeChanged) == 0x000008, "Wrong alignment on SHCharacterPlayItemsComponent_ProcessOwnerCombatInputModeChanged");
static_assert(sizeof(SHCharacterPlayItemsComponent_ProcessOwnerCombatInputModeChanged) == 0x000008, "Wrong size on SHCharacterPlayItemsComponent_ProcessOwnerCombatInputModeChanged");
static_assert(offsetof(SHCharacterPlayItemsComponent_ProcessOwnerCombatInputModeChanged, CombatComp) == 0x000000, "Member 'SHCharacterPlayItemsComponent_ProcessOwnerCombatInputModeChanged::CombatComp' has a wrong offset!");

// Function SHProto.SHCharacterPlayItemsComponent.ProcessOwnerReceivedDamage
// 0x0008 (0x0008 - 0x0000)
struct SHCharacterPlayItemsComponent_ProcessOwnerReceivedDamage final
{
public:
	class USHCharacterPlayCombatComponent*        CombatComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayItemsComponent_ProcessOwnerReceivedDamage) == 0x000008, "Wrong alignment on SHCharacterPlayItemsComponent_ProcessOwnerReceivedDamage");
static_assert(sizeof(SHCharacterPlayItemsComponent_ProcessOwnerReceivedDamage) == 0x000008, "Wrong size on SHCharacterPlayItemsComponent_ProcessOwnerReceivedDamage");
static_assert(offsetof(SHCharacterPlayItemsComponent_ProcessOwnerReceivedDamage, CombatComp) == 0x000000, "Member 'SHCharacterPlayItemsComponent_ProcessOwnerReceivedDamage::CombatComp' has a wrong offset!");

// Function SHProto.SHCharacterPlayItemsComponent.RemoveItem
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayItemsComponent_RemoveItem final
{
public:
	class FName                                   ItemDataRowName;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemQuantity;                                      // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RemoveNewItemFlag;                                 // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCharacterPlayItemsComponent_RemoveItem) == 0x000004, "Wrong alignment on SHCharacterPlayItemsComponent_RemoveItem");
static_assert(sizeof(SHCharacterPlayItemsComponent_RemoveItem) == 0x000010, "Wrong size on SHCharacterPlayItemsComponent_RemoveItem");
static_assert(offsetof(SHCharacterPlayItemsComponent_RemoveItem, ItemDataRowName) == 0x000000, "Member 'SHCharacterPlayItemsComponent_RemoveItem::ItemDataRowName' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayItemsComponent_RemoveItem, ItemQuantity) == 0x000008, "Member 'SHCharacterPlayItemsComponent_RemoveItem::ItemQuantity' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayItemsComponent_RemoveItem, RemoveNewItemFlag) == 0x00000C, "Member 'SHCharacterPlayItemsComponent_RemoveItem::RemoveNewItemFlag' has a wrong offset!");

// Function SHProto.SHCharacterPlayItemsComponent.SetInvestigateItemBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayItemsComponent_SetInvestigateItemBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayItemsComponent_SetInvestigateItemBlocked) == 0x000008, "Wrong alignment on SHCharacterPlayItemsComponent_SetInvestigateItemBlocked");
static_assert(sizeof(SHCharacterPlayItemsComponent_SetInvestigateItemBlocked) == 0x000010, "Wrong size on SHCharacterPlayItemsComponent_SetInvestigateItemBlocked");
static_assert(offsetof(SHCharacterPlayItemsComponent_SetInvestigateItemBlocked, Blocked) == 0x000000, "Member 'SHCharacterPlayItemsComponent_SetInvestigateItemBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayItemsComponent_SetInvestigateItemBlocked, Object) == 0x000008, "Member 'SHCharacterPlayItemsComponent_SetInvestigateItemBlocked::Object' has a wrong offset!");

// Function SHProto.SHCharacterPlayItemsComponent.SetUseItemBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayItemsComponent_SetUseItemBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayItemsComponent_SetUseItemBlocked) == 0x000008, "Wrong alignment on SHCharacterPlayItemsComponent_SetUseItemBlocked");
static_assert(sizeof(SHCharacterPlayItemsComponent_SetUseItemBlocked) == 0x000010, "Wrong size on SHCharacterPlayItemsComponent_SetUseItemBlocked");
static_assert(offsetof(SHCharacterPlayItemsComponent_SetUseItemBlocked, Blocked) == 0x000000, "Member 'SHCharacterPlayItemsComponent_SetUseItemBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayItemsComponent_SetUseItemBlocked, Object) == 0x000008, "Member 'SHCharacterPlayItemsComponent_SetUseItemBlocked::Object' has a wrong offset!");

// Function SHProto.SHCharacterPlayItemsComponent.SHDebug_Character_Items_Give
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayItemsComponent_SHDebug_Character_Items_Give final
{
public:
	class FString                                 ItemRowName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayItemsComponent_SHDebug_Character_Items_Give) == 0x000008, "Wrong alignment on SHCharacterPlayItemsComponent_SHDebug_Character_Items_Give");
static_assert(sizeof(SHCharacterPlayItemsComponent_SHDebug_Character_Items_Give) == 0x000010, "Wrong size on SHCharacterPlayItemsComponent_SHDebug_Character_Items_Give");
static_assert(offsetof(SHCharacterPlayItemsComponent_SHDebug_Character_Items_Give, ItemRowName) == 0x000000, "Member 'SHCharacterPlayItemsComponent_SHDebug_Character_Items_Give::ItemRowName' has a wrong offset!");

// DelegateFunction SHProto.SHCharacterPlayItemsComponent.SHItemsComponentEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHCharacterPlayItemsComponent_SHItemsComponentEvent__DelegateSignature final
{
public:
	class USHCharacterPlayItemsComponent*         ComponentPtr;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayItemsComponent_SHItemsComponentEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHCharacterPlayItemsComponent_SHItemsComponentEvent__DelegateSignature");
static_assert(sizeof(SHCharacterPlayItemsComponent_SHItemsComponentEvent__DelegateSignature) == 0x000008, "Wrong size on SHCharacterPlayItemsComponent_SHItemsComponentEvent__DelegateSignature");
static_assert(offsetof(SHCharacterPlayItemsComponent_SHItemsComponentEvent__DelegateSignature, ComponentPtr) == 0x000000, "Member 'SHCharacterPlayItemsComponent_SHItemsComponentEvent__DelegateSignature::ComponentPtr' has a wrong offset!");

// DelegateFunction SHProto.SHCharacterPlayItemsComponent.SHItemsComponentWithContextEvent__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayItemsComponent_SHItemsComponentWithContextEvent__DelegateSignature final
{
public:
	class USHCharacterPlayItemsComponent*         ComponentPtr;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemContext;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayItemsComponent_SHItemsComponentWithContextEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHCharacterPlayItemsComponent_SHItemsComponentWithContextEvent__DelegateSignature");
static_assert(sizeof(SHCharacterPlayItemsComponent_SHItemsComponentWithContextEvent__DelegateSignature) == 0x000010, "Wrong size on SHCharacterPlayItemsComponent_SHItemsComponentWithContextEvent__DelegateSignature");
static_assert(offsetof(SHCharacterPlayItemsComponent_SHItemsComponentWithContextEvent__DelegateSignature, ComponentPtr) == 0x000000, "Member 'SHCharacterPlayItemsComponent_SHItemsComponentWithContextEvent__DelegateSignature::ComponentPtr' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayItemsComponent_SHItemsComponentWithContextEvent__DelegateSignature, ItemContext) == 0x000008, "Member 'SHCharacterPlayItemsComponent_SHItemsComponentWithContextEvent__DelegateSignature::ItemContext' has a wrong offset!");

// Function SHProto.SHCharacterPlayItemsComponent.GetItemCount
// 0x000C (0x000C - 0x0000)
struct SHCharacterPlayItemsComponent_GetItemCount final
{
public:
	class FName                                   ItemDataRowName;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayItemsComponent_GetItemCount) == 0x000004, "Wrong alignment on SHCharacterPlayItemsComponent_GetItemCount");
static_assert(sizeof(SHCharacterPlayItemsComponent_GetItemCount) == 0x00000C, "Wrong size on SHCharacterPlayItemsComponent_GetItemCount");
static_assert(offsetof(SHCharacterPlayItemsComponent_GetItemCount, ItemDataRowName) == 0x000000, "Member 'SHCharacterPlayItemsComponent_GetItemCount::ItemDataRowName' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayItemsComponent_GetItemCount, ReturnValue) == 0x000008, "Member 'SHCharacterPlayItemsComponent_GetItemCount::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayItemsComponent.HasItem
// 0x000C (0x000C - 0x0000)
struct SHCharacterPlayItemsComponent_HasItem final
{
public:
	class FName                                   ItemDataRowName;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCharacterPlayItemsComponent_HasItem) == 0x000004, "Wrong alignment on SHCharacterPlayItemsComponent_HasItem");
static_assert(sizeof(SHCharacterPlayItemsComponent_HasItem) == 0x00000C, "Wrong size on SHCharacterPlayItemsComponent_HasItem");
static_assert(offsetof(SHCharacterPlayItemsComponent_HasItem, ItemDataRowName) == 0x000000, "Member 'SHCharacterPlayItemsComponent_HasItem::ItemDataRowName' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayItemsComponent_HasItem, ReturnValue) == 0x000008, "Member 'SHCharacterPlayItemsComponent_HasItem::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayItemsComponent.IsInvestigateItemBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayItemsComponent_IsInvestigateItemBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayItemsComponent_IsInvestigateItemBlocked) == 0x000001, "Wrong alignment on SHCharacterPlayItemsComponent_IsInvestigateItemBlocked");
static_assert(sizeof(SHCharacterPlayItemsComponent_IsInvestigateItemBlocked) == 0x000001, "Wrong size on SHCharacterPlayItemsComponent_IsInvestigateItemBlocked");
static_assert(offsetof(SHCharacterPlayItemsComponent_IsInvestigateItemBlocked, ReturnValue) == 0x000000, "Member 'SHCharacterPlayItemsComponent_IsInvestigateItemBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayItemsComponent.IsUseItemBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayItemsComponent_IsUseItemBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayItemsComponent_IsUseItemBlocked) == 0x000001, "Wrong alignment on SHCharacterPlayItemsComponent_IsUseItemBlocked");
static_assert(sizeof(SHCharacterPlayItemsComponent_IsUseItemBlocked) == 0x000001, "Wrong size on SHCharacterPlayItemsComponent_IsUseItemBlocked");
static_assert(offsetof(SHCharacterPlayItemsComponent_IsUseItemBlocked, ReturnValue) == 0x000000, "Member 'SHCharacterPlayItemsComponent_IsUseItemBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHPushNClimbDesiredSpot.RelayAppliedManagedActorState
// 0x0002 (0x0002 - 0x0000)
struct SHPushNClimbDesiredSpot_RelayAppliedManagedActorState final
{
public:
	bool                                          bIsInDesiredSpotState;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstantApply;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushNClimbDesiredSpot_RelayAppliedManagedActorState) == 0x000001, "Wrong alignment on SHPushNClimbDesiredSpot_RelayAppliedManagedActorState");
static_assert(sizeof(SHPushNClimbDesiredSpot_RelayAppliedManagedActorState) == 0x000002, "Wrong size on SHPushNClimbDesiredSpot_RelayAppliedManagedActorState");
static_assert(offsetof(SHPushNClimbDesiredSpot_RelayAppliedManagedActorState, bIsInDesiredSpotState) == 0x000000, "Member 'SHPushNClimbDesiredSpot_RelayAppliedManagedActorState::bIsInDesiredSpotState' has a wrong offset!");
static_assert(offsetof(SHPushNClimbDesiredSpot_RelayAppliedManagedActorState, bInstantApply) == 0x000001, "Member 'SHPushNClimbDesiredSpot_RelayAppliedManagedActorState::bInstantApply' has a wrong offset!");

// DelegateFunction SHProto.SHPushNClimbDesiredSpot.SHPushNClimbDesiredSpotEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHPushNClimbDesiredSpot_SHPushNClimbDesiredSpotEvent__DelegateSignature final
{
public:
	class ASHPushNClimbDesiredSpot*               DesiredSpot;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushNClimbDesiredSpot_SHPushNClimbDesiredSpotEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHPushNClimbDesiredSpot_SHPushNClimbDesiredSpotEvent__DelegateSignature");
static_assert(sizeof(SHPushNClimbDesiredSpot_SHPushNClimbDesiredSpotEvent__DelegateSignature) == 0x000008, "Wrong size on SHPushNClimbDesiredSpot_SHPushNClimbDesiredSpotEvent__DelegateSignature");
static_assert(offsetof(SHPushNClimbDesiredSpot_SHPushNClimbDesiredSpotEvent__DelegateSignature, DesiredSpot) == 0x000000, "Member 'SHPushNClimbDesiredSpot_SHPushNClimbDesiredSpotEvent__DelegateSignature::DesiredSpot' has a wrong offset!");

// Function SHProto.SHPushNClimbDesiredSpot.IsManagedActorInDesiredSpot
// 0x0001 (0x0001 - 0x0000)
struct SHPushNClimbDesiredSpot_IsManagedActorInDesiredSpot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushNClimbDesiredSpot_IsManagedActorInDesiredSpot) == 0x000001, "Wrong alignment on SHPushNClimbDesiredSpot_IsManagedActorInDesiredSpot");
static_assert(sizeof(SHPushNClimbDesiredSpot_IsManagedActorInDesiredSpot) == 0x000001, "Wrong size on SHPushNClimbDesiredSpot_IsManagedActorInDesiredSpot");
static_assert(offsetof(SHPushNClimbDesiredSpot_IsManagedActorInDesiredSpot, ReturnValue) == 0x000000, "Member 'SHPushNClimbDesiredSpot_IsManagedActorInDesiredSpot::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimNPCIdleSubcomp.GetShouldPlayCustomIdle
// 0x0001 (0x0001 - 0x0000)
struct SHAnimNPCIdleSubcomp_GetShouldPlayCustomIdle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimNPCIdleSubcomp_GetShouldPlayCustomIdle) == 0x000001, "Wrong alignment on SHAnimNPCIdleSubcomp_GetShouldPlayCustomIdle");
static_assert(sizeof(SHAnimNPCIdleSubcomp_GetShouldPlayCustomIdle) == 0x000001, "Wrong size on SHAnimNPCIdleSubcomp_GetShouldPlayCustomIdle");
static_assert(offsetof(SHAnimNPCIdleSubcomp_GetShouldPlayCustomIdle, ReturnValue) == 0x000000, "Member 'SHAnimNPCIdleSubcomp_GetShouldPlayCustomIdle::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayStatisticsComponent.SHDebug_Character_Statistics_SetPlaytime
// 0x0004 (0x0004 - 0x0000)
struct SHCharacterPlayStatisticsComponent_SHDebug_Character_Statistics_SetPlaytime final
{
public:
	float                                         InHours;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayStatisticsComponent_SHDebug_Character_Statistics_SetPlaytime) == 0x000004, "Wrong alignment on SHCharacterPlayStatisticsComponent_SHDebug_Character_Statistics_SetPlaytime");
static_assert(sizeof(SHCharacterPlayStatisticsComponent_SHDebug_Character_Statistics_SetPlaytime) == 0x000004, "Wrong size on SHCharacterPlayStatisticsComponent_SHDebug_Character_Statistics_SetPlaytime");
static_assert(offsetof(SHCharacterPlayStatisticsComponent_SHDebug_Character_Statistics_SetPlaytime, InHours) == 0x000000, "Member 'SHCharacterPlayStatisticsComponent_SHDebug_Character_Statistics_SetPlaytime::InHours' has a wrong offset!");

// Function SHProto.SHAnimNPCObstaclesDetectSubcomp.GetSocketAlpha
// 0x0008 (0x0008 - 0x0000)
struct SHAnimNPCObstaclesDetectSubcomp_GetSocketAlpha final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimNPCObstaclesDetectSubcomp_GetSocketAlpha) == 0x000004, "Wrong alignment on SHAnimNPCObstaclesDetectSubcomp_GetSocketAlpha");
static_assert(sizeof(SHAnimNPCObstaclesDetectSubcomp_GetSocketAlpha) == 0x000008, "Wrong size on SHAnimNPCObstaclesDetectSubcomp_GetSocketAlpha");
static_assert(offsetof(SHAnimNPCObstaclesDetectSubcomp_GetSocketAlpha, Index_0) == 0x000000, "Member 'SHAnimNPCObstaclesDetectSubcomp_GetSocketAlpha::Index_0' has a wrong offset!");
static_assert(offsetof(SHAnimNPCObstaclesDetectSubcomp_GetSocketAlpha, ReturnValue) == 0x000004, "Member 'SHAnimNPCObstaclesDetectSubcomp_GetSocketAlpha::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimNPCObstaclesDetectSubcomp.GetSocketCheckVector
// 0x0020 (0x0020 - 0x0000)
struct SHAnimNPCObstaclesDetectSubcomp_GetSocketCheckVector final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimNPCObstaclesDetectSubcomp_GetSocketCheckVector) == 0x000008, "Wrong alignment on SHAnimNPCObstaclesDetectSubcomp_GetSocketCheckVector");
static_assert(sizeof(SHAnimNPCObstaclesDetectSubcomp_GetSocketCheckVector) == 0x000020, "Wrong size on SHAnimNPCObstaclesDetectSubcomp_GetSocketCheckVector");
static_assert(offsetof(SHAnimNPCObstaclesDetectSubcomp_GetSocketCheckVector, Index_0) == 0x000000, "Member 'SHAnimNPCObstaclesDetectSubcomp_GetSocketCheckVector::Index_0' has a wrong offset!");
static_assert(offsetof(SHAnimNPCObstaclesDetectSubcomp_GetSocketCheckVector, ReturnValue) == 0x000008, "Member 'SHAnimNPCObstaclesDetectSubcomp_GetSocketCheckVector::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimNPCObstaclesDetectSubcomp.GetSocketCheckVectorLength
// 0x0008 (0x0008 - 0x0000)
struct SHAnimNPCObstaclesDetectSubcomp_GetSocketCheckVectorLength final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimNPCObstaclesDetectSubcomp_GetSocketCheckVectorLength) == 0x000004, "Wrong alignment on SHAnimNPCObstaclesDetectSubcomp_GetSocketCheckVectorLength");
static_assert(sizeof(SHAnimNPCObstaclesDetectSubcomp_GetSocketCheckVectorLength) == 0x000008, "Wrong size on SHAnimNPCObstaclesDetectSubcomp_GetSocketCheckVectorLength");
static_assert(offsetof(SHAnimNPCObstaclesDetectSubcomp_GetSocketCheckVectorLength, Index_0) == 0x000000, "Member 'SHAnimNPCObstaclesDetectSubcomp_GetSocketCheckVectorLength::Index_0' has a wrong offset!");
static_assert(offsetof(SHAnimNPCObstaclesDetectSubcomp_GetSocketCheckVectorLength, ReturnValue) == 0x000004, "Member 'SHAnimNPCObstaclesDetectSubcomp_GetSocketCheckVectorLength::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimNPCObstaclesDetectSubcomp.GetSocketLocation
// 0x0020 (0x0020 - 0x0000)
struct SHAnimNPCObstaclesDetectSubcomp_GetSocketLocation final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimNPCObstaclesDetectSubcomp_GetSocketLocation) == 0x000008, "Wrong alignment on SHAnimNPCObstaclesDetectSubcomp_GetSocketLocation");
static_assert(sizeof(SHAnimNPCObstaclesDetectSubcomp_GetSocketLocation) == 0x000020, "Wrong size on SHAnimNPCObstaclesDetectSubcomp_GetSocketLocation");
static_assert(offsetof(SHAnimNPCObstaclesDetectSubcomp_GetSocketLocation, Index_0) == 0x000000, "Member 'SHAnimNPCObstaclesDetectSubcomp_GetSocketLocation::Index_0' has a wrong offset!");
static_assert(offsetof(SHAnimNPCObstaclesDetectSubcomp_GetSocketLocation, ReturnValue) == 0x000008, "Member 'SHAnimNPCObstaclesDetectSubcomp_GetSocketLocation::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayRaycastDetectorComponent.SetHoverBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayRaycastDetectorComponent_SetHoverBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayRaycastDetectorComponent_SetHoverBlocked) == 0x000008, "Wrong alignment on SHCharacterPlayRaycastDetectorComponent_SetHoverBlocked");
static_assert(sizeof(SHCharacterPlayRaycastDetectorComponent_SetHoverBlocked) == 0x000010, "Wrong size on SHCharacterPlayRaycastDetectorComponent_SetHoverBlocked");
static_assert(offsetof(SHCharacterPlayRaycastDetectorComponent_SetHoverBlocked, Blocked) == 0x000000, "Member 'SHCharacterPlayRaycastDetectorComponent_SetHoverBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayRaycastDetectorComponent_SetHoverBlocked, Object) == 0x000008, "Member 'SHCharacterPlayRaycastDetectorComponent_SetHoverBlocked::Object' has a wrong offset!");

// Function SHProto.SHCharacterPlayRaycastDetectorComponent.SetInteractBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayRaycastDetectorComponent_SetInteractBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayRaycastDetectorComponent_SetInteractBlocked) == 0x000008, "Wrong alignment on SHCharacterPlayRaycastDetectorComponent_SetInteractBlocked");
static_assert(sizeof(SHCharacterPlayRaycastDetectorComponent_SetInteractBlocked) == 0x000010, "Wrong size on SHCharacterPlayRaycastDetectorComponent_SetInteractBlocked");
static_assert(offsetof(SHCharacterPlayRaycastDetectorComponent_SetInteractBlocked, Blocked) == 0x000000, "Member 'SHCharacterPlayRaycastDetectorComponent_SetInteractBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayRaycastDetectorComponent_SetInteractBlocked, Object) == 0x000008, "Member 'SHCharacterPlayRaycastDetectorComponent_SetInteractBlocked::Object' has a wrong offset!");

// Function SHProto.SHCharacterPlayRaycastDetectorComponent.IsHoverBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayRaycastDetectorComponent_IsHoverBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayRaycastDetectorComponent_IsHoverBlocked) == 0x000001, "Wrong alignment on SHCharacterPlayRaycastDetectorComponent_IsHoverBlocked");
static_assert(sizeof(SHCharacterPlayRaycastDetectorComponent_IsHoverBlocked) == 0x000001, "Wrong size on SHCharacterPlayRaycastDetectorComponent_IsHoverBlocked");
static_assert(offsetof(SHCharacterPlayRaycastDetectorComponent_IsHoverBlocked, ReturnValue) == 0x000000, "Member 'SHCharacterPlayRaycastDetectorComponent_IsHoverBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayRaycastDetectorComponent.IsInteractBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayRaycastDetectorComponent_IsInteractBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayRaycastDetectorComponent_IsInteractBlocked) == 0x000001, "Wrong alignment on SHCharacterPlayRaycastDetectorComponent_IsInteractBlocked");
static_assert(sizeof(SHCharacterPlayRaycastDetectorComponent_IsInteractBlocked) == 0x000001, "Wrong size on SHCharacterPlayRaycastDetectorComponent_IsInteractBlocked");
static_assert(offsetof(SHCharacterPlayRaycastDetectorComponent_IsInteractBlocked, ReturnValue) == 0x000000, "Member 'SHCharacterPlayRaycastDetectorComponent_IsInteractBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimReviveSubcomp.SetActorOnBodyPosition
// 0x00C0 (0x00C0 - 0x0000)
struct SHAnimReviveSubcomp_SetActorOnBodyPosition final
{
public:
	struct FReviveAnimationData                   ReviveData;                                        // 0x0000(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimReviveSubcomp_SetActorOnBodyPosition) == 0x000008, "Wrong alignment on SHAnimReviveSubcomp_SetActorOnBodyPosition");
static_assert(sizeof(SHAnimReviveSubcomp_SetActorOnBodyPosition) == 0x0000C0, "Wrong size on SHAnimReviveSubcomp_SetActorOnBodyPosition");
static_assert(offsetof(SHAnimReviveSubcomp_SetActorOnBodyPosition, ReviveData) == 0x000000, "Member 'SHAnimReviveSubcomp_SetActorOnBodyPosition::ReviveData' has a wrong offset!");

// Function SHProto.SHAnimReviveSubcomp.GetReviveAnimation
// 0x0008 (0x0008 - 0x0000)
struct SHAnimReviveSubcomp_GetReviveAnimation final
{
public:
	class UAnimSequenceBase*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimReviveSubcomp_GetReviveAnimation) == 0x000008, "Wrong alignment on SHAnimReviveSubcomp_GetReviveAnimation");
static_assert(sizeof(SHAnimReviveSubcomp_GetReviveAnimation) == 0x000008, "Wrong size on SHAnimReviveSubcomp_GetReviveAnimation");
static_assert(offsetof(SHAnimReviveSubcomp_GetReviveAnimation, ReturnValue) == 0x000000, "Member 'SHAnimReviveSubcomp_GetReviveAnimation::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimReviveSubcomp.GetReviveAnimationFromBodyPose
// 0x0008 (0x0008 - 0x0000)
struct SHAnimReviveSubcomp_GetReviveAnimationFromBodyPose final
{
public:
	class UAnimSequenceBase*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimReviveSubcomp_GetReviveAnimationFromBodyPose) == 0x000008, "Wrong alignment on SHAnimReviveSubcomp_GetReviveAnimationFromBodyPose");
static_assert(sizeof(SHAnimReviveSubcomp_GetReviveAnimationFromBodyPose) == 0x000008, "Wrong size on SHAnimReviveSubcomp_GetReviveAnimationFromBodyPose");
static_assert(offsetof(SHAnimReviveSubcomp_GetReviveAnimationFromBodyPose, ReturnValue) == 0x000000, "Member 'SHAnimReviveSubcomp_GetReviveAnimationFromBodyPose::ReturnValue' has a wrong offset!");

// Function SHProto.SHAnimReviveSubcomp.GetReviveData
// 0x00C0 (0x00C0 - 0x0000)
struct SHAnimReviveSubcomp_GetReviveData final
{
public:
	struct FReviveAnimationData                   ReturnValue;                                       // 0x0000(0x00C0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAnimReviveSubcomp_GetReviveData) == 0x000008, "Wrong alignment on SHAnimReviveSubcomp_GetReviveData");
static_assert(sizeof(SHAnimReviveSubcomp_GetReviveData) == 0x0000C0, "Wrong size on SHAnimReviveSubcomp_GetReviveData");
static_assert(offsetof(SHAnimReviveSubcomp_GetReviveData, ReturnValue) == 0x000000, "Member 'SHAnimReviveSubcomp_GetReviveData::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemInvestigatedEndingValueProcessor.ProcessCollectedItemInvestigatedEvent
// 0x0010 (0x0010 - 0x0000)
struct SHItemInvestigatedEndingValueProcessor_ProcessCollectedItemInvestigatedEvent final
{
public:
	class USHCharacterPlayItemsComponent*         ComponentPtr;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemContext;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemInvestigatedEndingValueProcessor_ProcessCollectedItemInvestigatedEvent) == 0x000008, "Wrong alignment on SHItemInvestigatedEndingValueProcessor_ProcessCollectedItemInvestigatedEvent");
static_assert(sizeof(SHItemInvestigatedEndingValueProcessor_ProcessCollectedItemInvestigatedEvent) == 0x000010, "Wrong size on SHItemInvestigatedEndingValueProcessor_ProcessCollectedItemInvestigatedEvent");
static_assert(offsetof(SHItemInvestigatedEndingValueProcessor_ProcessCollectedItemInvestigatedEvent, ComponentPtr) == 0x000000, "Member 'SHItemInvestigatedEndingValueProcessor_ProcessCollectedItemInvestigatedEvent::ComponentPtr' has a wrong offset!");
static_assert(offsetof(SHItemInvestigatedEndingValueProcessor_ProcessCollectedItemInvestigatedEvent, ItemContext) == 0x000008, "Member 'SHItemInvestigatedEndingValueProcessor_ProcessCollectedItemInvestigatedEvent::ItemContext' has a wrong offset!");

// Function SHProto.SHAsyncLoadRequestingComponent.GetObject
// 0x0040 (0x0040 - 0x0000)
struct SHAsyncLoadRequestingComponent_GetObject final
{
public:
	TSoftObjectPtr<class UObject>                 SoftObject;                                        // 0x0000(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldFallbackToSyncLoad;                         // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAsyncLoadRequestingComponent_GetObject) == 0x000008, "Wrong alignment on SHAsyncLoadRequestingComponent_GetObject");
static_assert(sizeof(SHAsyncLoadRequestingComponent_GetObject) == 0x000040, "Wrong size on SHAsyncLoadRequestingComponent_GetObject");
static_assert(offsetof(SHAsyncLoadRequestingComponent_GetObject, SoftObject) == 0x000000, "Member 'SHAsyncLoadRequestingComponent_GetObject::SoftObject' has a wrong offset!");
static_assert(offsetof(SHAsyncLoadRequestingComponent_GetObject, bShouldFallbackToSyncLoad) == 0x000030, "Member 'SHAsyncLoadRequestingComponent_GetObject::bShouldFallbackToSyncLoad' has a wrong offset!");
static_assert(offsetof(SHAsyncLoadRequestingComponent_GetObject, ReturnValue) == 0x000038, "Member 'SHAsyncLoadRequestingComponent_GetObject::ReturnValue' has a wrong offset!");

// Function SHProto.SHAsyncLoadRequestingComponent.PreloadAnimActionExecutive
// 0x0008 (0x0008 - 0x0000)
struct SHAsyncLoadRequestingComponent_PreloadAnimActionExecutive final
{
public:
	TSubclassOf<class USHAnimActionExecutiveBase> InAnimActionExeClass;                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAsyncLoadRequestingComponent_PreloadAnimActionExecutive) == 0x000008, "Wrong alignment on SHAsyncLoadRequestingComponent_PreloadAnimActionExecutive");
static_assert(sizeof(SHAsyncLoadRequestingComponent_PreloadAnimActionExecutive) == 0x000008, "Wrong size on SHAsyncLoadRequestingComponent_PreloadAnimActionExecutive");
static_assert(offsetof(SHAsyncLoadRequestingComponent_PreloadAnimActionExecutive, InAnimActionExeClass) == 0x000000, "Member 'SHAsyncLoadRequestingComponent_PreloadAnimActionExecutive::InAnimActionExeClass' has a wrong offset!");

// Function SHProto.SHAsyncLoadRequestingComponent.PreloadAnimationData
// 0x00B0 (0x00B0 - 0x0000)
struct SHAsyncLoadRequestingComponent_PreloadAnimationData final
{
public:
	struct FPlayAnimationData                     InAnimationData;                                   // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAsyncLoadRequestingComponent_PreloadAnimationData) == 0x000008, "Wrong alignment on SHAsyncLoadRequestingComponent_PreloadAnimationData");
static_assert(sizeof(SHAsyncLoadRequestingComponent_PreloadAnimationData) == 0x0000B0, "Wrong size on SHAsyncLoadRequestingComponent_PreloadAnimationData");
static_assert(offsetof(SHAsyncLoadRequestingComponent_PreloadAnimationData, InAnimationData) == 0x000000, "Member 'SHAsyncLoadRequestingComponent_PreloadAnimationData::InAnimationData' has a wrong offset!");

// Function SHProto.SHAsyncLoadRequestingComponent.PreloadCameraData
// 0x0080 (0x0080 - 0x0000)
struct SHAsyncLoadRequestingComponent_PreloadCameraData final
{
public:
	struct FSHCameraAnimationData                 InCameraData;                                      // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAsyncLoadRequestingComponent_PreloadCameraData) == 0x000008, "Wrong alignment on SHAsyncLoadRequestingComponent_PreloadCameraData");
static_assert(sizeof(SHAsyncLoadRequestingComponent_PreloadCameraData) == 0x000080, "Wrong size on SHAsyncLoadRequestingComponent_PreloadCameraData");
static_assert(offsetof(SHAsyncLoadRequestingComponent_PreloadCameraData, InCameraData) == 0x000000, "Member 'SHAsyncLoadRequestingComponent_PreloadCameraData::InCameraData' has a wrong offset!");

// Function SHProto.SHAsyncLoadRequestingComponent.PreloadDialog
// 0x0028 (0x0028 - 0x0000)
struct SHAsyncLoadRequestingComponent_PreloadDialog final
{
public:
	struct FDialogTalkID                          InDialogTalkID;                                    // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAsyncLoadRequestingComponent_PreloadDialog) == 0x000008, "Wrong alignment on SHAsyncLoadRequestingComponent_PreloadDialog");
static_assert(sizeof(SHAsyncLoadRequestingComponent_PreloadDialog) == 0x000028, "Wrong size on SHAsyncLoadRequestingComponent_PreloadDialog");
static_assert(offsetof(SHAsyncLoadRequestingComponent_PreloadDialog, InDialogTalkID) == 0x000000, "Member 'SHAsyncLoadRequestingComponent_PreloadDialog::InDialogTalkID' has a wrong offset!");

// Function SHProto.SHAsyncLoadRequestingComponent.PreloadItemCollect
// 0x0008 (0x0008 - 0x0000)
struct SHAsyncLoadRequestingComponent_PreloadItemCollect final
{
public:
	class FName                                   InItemName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAsyncLoadRequestingComponent_PreloadItemCollect) == 0x000004, "Wrong alignment on SHAsyncLoadRequestingComponent_PreloadItemCollect");
static_assert(sizeof(SHAsyncLoadRequestingComponent_PreloadItemCollect) == 0x000008, "Wrong size on SHAsyncLoadRequestingComponent_PreloadItemCollect");
static_assert(offsetof(SHAsyncLoadRequestingComponent_PreloadItemCollect, InItemName) == 0x000000, "Member 'SHAsyncLoadRequestingComponent_PreloadItemCollect::InItemName' has a wrong offset!");

// Function SHProto.SHAsyncLoadRequestingComponent.ReleaseAsset
// 0x0030 (0x0030 - 0x0000)
struct SHAsyncLoadRequestingComponent_ReleaseAsset final
{
public:
	TSoftObjectPtr<class UObject>                 SoftObject;                                        // 0x0000(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAsyncLoadRequestingComponent_ReleaseAsset) == 0x000008, "Wrong alignment on SHAsyncLoadRequestingComponent_ReleaseAsset");
static_assert(sizeof(SHAsyncLoadRequestingComponent_ReleaseAsset) == 0x000030, "Wrong size on SHAsyncLoadRequestingComponent_ReleaseAsset");
static_assert(offsetof(SHAsyncLoadRequestingComponent_ReleaseAsset, SoftObject) == 0x000000, "Member 'SHAsyncLoadRequestingComponent_ReleaseAsset::SoftObject' has a wrong offset!");

// Function SHProto.SHAsyncLoadRequestingComponent.RequestAsyncLoad
// 0x0038 (0x0038 - 0x0000)
struct SHAsyncLoadRequestingComponent_RequestAsyncLoad final
{
public:
	TSoftObjectPtr<class UObject>                 SoftObject;                                        // 0x0000(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepLoaded;                                       // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHAsyncLoadRequestingComponent_RequestAsyncLoad) == 0x000008, "Wrong alignment on SHAsyncLoadRequestingComponent_RequestAsyncLoad");
static_assert(sizeof(SHAsyncLoadRequestingComponent_RequestAsyncLoad) == 0x000038, "Wrong size on SHAsyncLoadRequestingComponent_RequestAsyncLoad");
static_assert(offsetof(SHAsyncLoadRequestingComponent_RequestAsyncLoad, SoftObject) == 0x000000, "Member 'SHAsyncLoadRequestingComponent_RequestAsyncLoad::SoftObject' has a wrong offset!");
static_assert(offsetof(SHAsyncLoadRequestingComponent_RequestAsyncLoad, bKeepLoaded) == 0x000030, "Member 'SHAsyncLoadRequestingComponent_RequestAsyncLoad::bKeepLoaded' has a wrong offset!");

// Function SHProto.SHAsyncLoadRequestingComponent.RequestAsyncLoadAnimActionExe
// 0x0010 (0x0010 - 0x0000)
struct SHAsyncLoadRequestingComponent_RequestAsyncLoadAnimActionExe final
{
public:
	TSubclassOf<class USHAnimActionExecutiveBase> InAnimActionExeClass;                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepLoaded;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHAsyncLoadRequestingComponent_RequestAsyncLoadAnimActionExe) == 0x000008, "Wrong alignment on SHAsyncLoadRequestingComponent_RequestAsyncLoadAnimActionExe");
static_assert(sizeof(SHAsyncLoadRequestingComponent_RequestAsyncLoadAnimActionExe) == 0x000010, "Wrong size on SHAsyncLoadRequestingComponent_RequestAsyncLoadAnimActionExe");
static_assert(offsetof(SHAsyncLoadRequestingComponent_RequestAsyncLoadAnimActionExe, InAnimActionExeClass) == 0x000000, "Member 'SHAsyncLoadRequestingComponent_RequestAsyncLoadAnimActionExe::InAnimActionExeClass' has a wrong offset!");
static_assert(offsetof(SHAsyncLoadRequestingComponent_RequestAsyncLoadAnimActionExe, bKeepLoaded) == 0x000008, "Member 'SHAsyncLoadRequestingComponent_RequestAsyncLoadAnimActionExe::bKeepLoaded' has a wrong offset!");

// Function SHProto.SHAsyncLoadRequestingComponent.RequestAsyncLoadSet
// 0x0058 (0x0058 - 0x0000)
struct SHAsyncLoadRequestingComponent_RequestAsyncLoadSet final
{
public:
	TSet<TSoftObjectPtr<class UObject>>           SoftObjects;                                       // 0x0000(0x0050)(Parm, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bKeepLoaded;                                       // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHAsyncLoadRequestingComponent_RequestAsyncLoadSet) == 0x000008, "Wrong alignment on SHAsyncLoadRequestingComponent_RequestAsyncLoadSet");
static_assert(sizeof(SHAsyncLoadRequestingComponent_RequestAsyncLoadSet) == 0x000058, "Wrong size on SHAsyncLoadRequestingComponent_RequestAsyncLoadSet");
static_assert(offsetof(SHAsyncLoadRequestingComponent_RequestAsyncLoadSet, SoftObjects) == 0x000000, "Member 'SHAsyncLoadRequestingComponent_RequestAsyncLoadSet::SoftObjects' has a wrong offset!");
static_assert(offsetof(SHAsyncLoadRequestingComponent_RequestAsyncLoadSet, bKeepLoaded) == 0x000050, "Member 'SHAsyncLoadRequestingComponent_RequestAsyncLoadSet::bKeepLoaded' has a wrong offset!");

// DelegateFunction SHProto.SHAsyncLoadRequestingComponent.SHAsyncLoadReqEventWithObjectContext__DelegateSignature
// 0x0038 (0x0038 - 0x0000)
struct SHAsyncLoadRequestingComponent_SHAsyncLoadReqEventWithObjectContext__DelegateSignature final
{
public:
	class USHAsyncLoadRequestingComponent*        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 SoftObjectContext;                                 // 0x0008(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHAsyncLoadRequestingComponent_SHAsyncLoadReqEventWithObjectContext__DelegateSignature) == 0x000008, "Wrong alignment on SHAsyncLoadRequestingComponent_SHAsyncLoadReqEventWithObjectContext__DelegateSignature");
static_assert(sizeof(SHAsyncLoadRequestingComponent_SHAsyncLoadReqEventWithObjectContext__DelegateSignature) == 0x000038, "Wrong size on SHAsyncLoadRequestingComponent_SHAsyncLoadReqEventWithObjectContext__DelegateSignature");
static_assert(offsetof(SHAsyncLoadRequestingComponent_SHAsyncLoadReqEventWithObjectContext__DelegateSignature, Component) == 0x000000, "Member 'SHAsyncLoadRequestingComponent_SHAsyncLoadReqEventWithObjectContext__DelegateSignature::Component' has a wrong offset!");
static_assert(offsetof(SHAsyncLoadRequestingComponent_SHAsyncLoadReqEventWithObjectContext__DelegateSignature, SoftObjectContext) == 0x000008, "Member 'SHAsyncLoadRequestingComponent_SHAsyncLoadReqEventWithObjectContext__DelegateSignature::SoftObjectContext' has a wrong offset!");

// Function SHProto.SHAsyncLoadRequestingComponent.IsLoaded
// 0x0010 (0x0010 - 0x0000)
struct SHAsyncLoadRequestingComponent_IsLoaded final
{
public:
	TSubclassOf<class USHAnimActionExecutiveBase> InAnimActionExeClass;                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHAsyncLoadRequestingComponent_IsLoaded) == 0x000008, "Wrong alignment on SHAsyncLoadRequestingComponent_IsLoaded");
static_assert(sizeof(SHAsyncLoadRequestingComponent_IsLoaded) == 0x000010, "Wrong size on SHAsyncLoadRequestingComponent_IsLoaded");
static_assert(offsetof(SHAsyncLoadRequestingComponent_IsLoaded, InAnimActionExeClass) == 0x000000, "Member 'SHAsyncLoadRequestingComponent_IsLoaded::InAnimActionExeClass' has a wrong offset!");
static_assert(offsetof(SHAsyncLoadRequestingComponent_IsLoaded, ReturnValue) == 0x000008, "Member 'SHAsyncLoadRequestingComponent_IsLoaded::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemsStatics.DebugGiveItems
// 0x0018 (0x0018 - 0x0000)
struct SHItemsStatics_DebugGiveItems final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDataTableRowHandle>            InItemsHandles;                                    // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemsStatics_DebugGiveItems) == 0x000008, "Wrong alignment on SHItemsStatics_DebugGiveItems");
static_assert(sizeof(SHItemsStatics_DebugGiveItems) == 0x000018, "Wrong size on SHItemsStatics_DebugGiveItems");
static_assert(offsetof(SHItemsStatics_DebugGiveItems, WorldContextObject) == 0x000000, "Member 'SHItemsStatics_DebugGiveItems::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHItemsStatics_DebugGiveItems, InItemsHandles) == 0x000008, "Member 'SHItemsStatics_DebugGiveItems::InItemsHandles' has a wrong offset!");

// Function SHProto.SHItemsStatics.GetFlashlight
// 0x0010 (0x0010 - 0x0000)
struct SHItemsStatics_GetFlashlight final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHFlashlight*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemsStatics_GetFlashlight) == 0x000008, "Wrong alignment on SHItemsStatics_GetFlashlight");
static_assert(sizeof(SHItemsStatics_GetFlashlight) == 0x000010, "Wrong size on SHItemsStatics_GetFlashlight");
static_assert(offsetof(SHItemsStatics_GetFlashlight, WorldContextObject) == 0x000000, "Member 'SHItemsStatics_GetFlashlight::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHItemsStatics_GetFlashlight, ReturnValue) == 0x000008, "Member 'SHItemsStatics_GetFlashlight::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemsStatics.GetRadio
// 0x0010 (0x0010 - 0x0000)
struct SHItemsStatics_GetRadio final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHRadio*                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemsStatics_GetRadio) == 0x000008, "Wrong alignment on SHItemsStatics_GetRadio");
static_assert(sizeof(SHItemsStatics_GetRadio) == 0x000010, "Wrong size on SHItemsStatics_GetRadio");
static_assert(offsetof(SHItemsStatics_GetRadio, WorldContextObject) == 0x000000, "Member 'SHItemsStatics_GetRadio::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHItemsStatics_GetRadio, ReturnValue) == 0x000008, "Member 'SHItemsStatics_GetRadio::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemsStatics.IsFlashlightInUse
// 0x0010 (0x0010 - 0x0000)
struct SHItemsStatics_IsFlashlightInUse final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHItemsStatics_IsFlashlightInUse) == 0x000008, "Wrong alignment on SHItemsStatics_IsFlashlightInUse");
static_assert(sizeof(SHItemsStatics_IsFlashlightInUse) == 0x000010, "Wrong size on SHItemsStatics_IsFlashlightInUse");
static_assert(offsetof(SHItemsStatics_IsFlashlightInUse, WorldContextObject) == 0x000000, "Member 'SHItemsStatics_IsFlashlightInUse::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHItemsStatics_IsFlashlightInUse, ReturnValue) == 0x000008, "Member 'SHItemsStatics_IsFlashlightInUse::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemsStatics.IsPlayerInventoryEmpty
// 0x0020 (0x0020 - 0x0000)
struct SHItemsStatics_IsPlayerInventoryEmpty final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ItemsToIgnore;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHItemsStatics_IsPlayerInventoryEmpty) == 0x000008, "Wrong alignment on SHItemsStatics_IsPlayerInventoryEmpty");
static_assert(sizeof(SHItemsStatics_IsPlayerInventoryEmpty) == 0x000020, "Wrong size on SHItemsStatics_IsPlayerInventoryEmpty");
static_assert(offsetof(SHItemsStatics_IsPlayerInventoryEmpty, WorldContextObject) == 0x000000, "Member 'SHItemsStatics_IsPlayerInventoryEmpty::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHItemsStatics_IsPlayerInventoryEmpty, ItemsToIgnore) == 0x000008, "Member 'SHItemsStatics_IsPlayerInventoryEmpty::ItemsToIgnore' has a wrong offset!");
static_assert(offsetof(SHItemsStatics_IsPlayerInventoryEmpty, ReturnValue) == 0x000018, "Member 'SHItemsStatics_IsPlayerInventoryEmpty::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemsStatics.PerformNotesScribble
// 0x0010 (0x0010 - 0x0000)
struct SHItemsStatics_PerformNotesScribble final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHItemsStatics_PerformNotesScribble) == 0x000008, "Wrong alignment on SHItemsStatics_PerformNotesScribble");
static_assert(sizeof(SHItemsStatics_PerformNotesScribble) == 0x000010, "Wrong size on SHItemsStatics_PerformNotesScribble");
static_assert(offsetof(SHItemsStatics_PerformNotesScribble, WorldContextObject) == 0x000000, "Member 'SHItemsStatics_PerformNotesScribble::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHItemsStatics_PerformNotesScribble, ReturnValue) == 0x000008, "Member 'SHItemsStatics_PerformNotesScribble::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemsStatics.PerformNotesScribbleMapContexted
// 0x0010 (0x0010 - 0x0000)
struct SHItemsStatics_PerformNotesScribbleMapContexted final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHMapsEnum                                   InMapContext;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHItemsStatics_PerformNotesScribbleMapContexted) == 0x000008, "Wrong alignment on SHItemsStatics_PerformNotesScribbleMapContexted");
static_assert(sizeof(SHItemsStatics_PerformNotesScribbleMapContexted) == 0x000010, "Wrong size on SHItemsStatics_PerformNotesScribbleMapContexted");
static_assert(offsetof(SHItemsStatics_PerformNotesScribbleMapContexted, WorldContextObject) == 0x000000, "Member 'SHItemsStatics_PerformNotesScribbleMapContexted::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHItemsStatics_PerformNotesScribbleMapContexted, InMapContext) == 0x000008, "Member 'SHItemsStatics_PerformNotesScribbleMapContexted::InMapContext' has a wrong offset!");
static_assert(offsetof(SHItemsStatics_PerformNotesScribbleMapContexted, ReturnValue) == 0x000009, "Member 'SHItemsStatics_PerformNotesScribbleMapContexted::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemsStatics.PreloadAssetsForItemWeapon
// 0x0010 (0x0010 - 0x0000)
struct SHItemsStatics_PreloadAssetsForItemWeapon final
{
public:
	class UObject*                                Requester;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InItemWeaponName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemsStatics_PreloadAssetsForItemWeapon) == 0x000008, "Wrong alignment on SHItemsStatics_PreloadAssetsForItemWeapon");
static_assert(sizeof(SHItemsStatics_PreloadAssetsForItemWeapon) == 0x000010, "Wrong size on SHItemsStatics_PreloadAssetsForItemWeapon");
static_assert(offsetof(SHItemsStatics_PreloadAssetsForItemWeapon, Requester) == 0x000000, "Member 'SHItemsStatics_PreloadAssetsForItemWeapon::Requester' has a wrong offset!");
static_assert(offsetof(SHItemsStatics_PreloadAssetsForItemWeapon, InItemWeaponName) == 0x000008, "Member 'SHItemsStatics_PreloadAssetsForItemWeapon::InItemWeaponName' has a wrong offset!");

// Function SHProto.SHItemsStatics.ReleaseAssetsForItemWeapon
// 0x0010 (0x0010 - 0x0000)
struct SHItemsStatics_ReleaseAssetsForItemWeapon final
{
public:
	class UObject*                                Requester;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InItemWeaponName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemsStatics_ReleaseAssetsForItemWeapon) == 0x000008, "Wrong alignment on SHItemsStatics_ReleaseAssetsForItemWeapon");
static_assert(sizeof(SHItemsStatics_ReleaseAssetsForItemWeapon) == 0x000010, "Wrong size on SHItemsStatics_ReleaseAssetsForItemWeapon");
static_assert(offsetof(SHItemsStatics_ReleaseAssetsForItemWeapon, Requester) == 0x000000, "Member 'SHItemsStatics_ReleaseAssetsForItemWeapon::Requester' has a wrong offset!");
static_assert(offsetof(SHItemsStatics_ReleaseAssetsForItemWeapon, InItemWeaponName) == 0x000008, "Member 'SHItemsStatics_ReleaseAssetsForItemWeapon::InItemWeaponName' has a wrong offset!");

// Function SHProto.SHItemsStatics.ReleasePreloadedItemInvestigationAssets
// 0x0010 (0x0010 - 0x0000)
struct SHItemsStatics_ReleasePreloadedItemInvestigationAssets final
{
public:
	class UObject*                                Requester;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemsStatics_ReleasePreloadedItemInvestigationAssets) == 0x000008, "Wrong alignment on SHItemsStatics_ReleasePreloadedItemInvestigationAssets");
static_assert(sizeof(SHItemsStatics_ReleasePreloadedItemInvestigationAssets) == 0x000010, "Wrong size on SHItemsStatics_ReleasePreloadedItemInvestigationAssets");
static_assert(offsetof(SHItemsStatics_ReleasePreloadedItemInvestigationAssets, Requester) == 0x000000, "Member 'SHItemsStatics_ReleasePreloadedItemInvestigationAssets::Requester' has a wrong offset!");
static_assert(offsetof(SHItemsStatics_ReleasePreloadedItemInvestigationAssets, ItemName) == 0x000008, "Member 'SHItemsStatics_ReleasePreloadedItemInvestigationAssets::ItemName' has a wrong offset!");

// Function SHProto.SHItemsStatics.RequestCollectAndInvestigateItem
// 0x0018 (0x0018 - 0x0000)
struct SHItemsStatics_RequestCollectAndInvestigateItem final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemDataRowName;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHItemsStatics_RequestCollectAndInvestigateItem) == 0x000008, "Wrong alignment on SHItemsStatics_RequestCollectAndInvestigateItem");
static_assert(sizeof(SHItemsStatics_RequestCollectAndInvestigateItem) == 0x000018, "Wrong size on SHItemsStatics_RequestCollectAndInvestigateItem");
static_assert(offsetof(SHItemsStatics_RequestCollectAndInvestigateItem, WorldContextObject) == 0x000000, "Member 'SHItemsStatics_RequestCollectAndInvestigateItem::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHItemsStatics_RequestCollectAndInvestigateItem, ItemDataRowName) == 0x000008, "Member 'SHItemsStatics_RequestCollectAndInvestigateItem::ItemDataRowName' has a wrong offset!");
static_assert(offsetof(SHItemsStatics_RequestCollectAndInvestigateItem, ReturnValue) == 0x000010, "Member 'SHItemsStatics_RequestCollectAndInvestigateItem::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemsStatics.RequestCollectItemWithNotify
// 0x0018 (0x0018 - 0x0000)
struct SHItemsStatics_RequestCollectItemWithNotify final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemDataRowName;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHItemsStatics_RequestCollectItemWithNotify) == 0x000008, "Wrong alignment on SHItemsStatics_RequestCollectItemWithNotify");
static_assert(sizeof(SHItemsStatics_RequestCollectItemWithNotify) == 0x000018, "Wrong size on SHItemsStatics_RequestCollectItemWithNotify");
static_assert(offsetof(SHItemsStatics_RequestCollectItemWithNotify, WorldContextObject) == 0x000000, "Member 'SHItemsStatics_RequestCollectItemWithNotify::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHItemsStatics_RequestCollectItemWithNotify, ItemDataRowName) == 0x000008, "Member 'SHItemsStatics_RequestCollectItemWithNotify::ItemDataRowName' has a wrong offset!");
static_assert(offsetof(SHItemsStatics_RequestCollectItemWithNotify, ReturnValue) == 0x000010, "Member 'SHItemsStatics_RequestCollectItemWithNotify::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemsStatics.RequestItemsSwap
// 0x0020 (0x0020 - 0x0000)
struct SHItemsStatics_RequestItemsSwap final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemNameToRemove;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemNameToAdd;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddOnlyIfRemovedWithSuccess;                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHItemsStatics_RequestItemsSwap) == 0x000008, "Wrong alignment on SHItemsStatics_RequestItemsSwap");
static_assert(sizeof(SHItemsStatics_RequestItemsSwap) == 0x000020, "Wrong size on SHItemsStatics_RequestItemsSwap");
static_assert(offsetof(SHItemsStatics_RequestItemsSwap, WorldContextObject) == 0x000000, "Member 'SHItemsStatics_RequestItemsSwap::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHItemsStatics_RequestItemsSwap, ItemNameToRemove) == 0x000008, "Member 'SHItemsStatics_RequestItemsSwap::ItemNameToRemove' has a wrong offset!");
static_assert(offsetof(SHItemsStatics_RequestItemsSwap, ItemNameToAdd) == 0x000010, "Member 'SHItemsStatics_RequestItemsSwap::ItemNameToAdd' has a wrong offset!");
static_assert(offsetof(SHItemsStatics_RequestItemsSwap, bAddOnlyIfRemovedWithSuccess) == 0x000018, "Member 'SHItemsStatics_RequestItemsSwap::bAddOnlyIfRemovedWithSuccess' has a wrong offset!");
static_assert(offsetof(SHItemsStatics_RequestItemsSwap, ReturnValue) == 0x000019, "Member 'SHItemsStatics_RequestItemsSwap::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemsStatics.RequestPreloadItemInvestigationAssets
// 0x0010 (0x0010 - 0x0000)
struct SHItemsStatics_RequestPreloadItemInvestigationAssets final
{
public:
	class UObject*                                Requester;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemsStatics_RequestPreloadItemInvestigationAssets) == 0x000008, "Wrong alignment on SHItemsStatics_RequestPreloadItemInvestigationAssets");
static_assert(sizeof(SHItemsStatics_RequestPreloadItemInvestigationAssets) == 0x000010, "Wrong size on SHItemsStatics_RequestPreloadItemInvestigationAssets");
static_assert(offsetof(SHItemsStatics_RequestPreloadItemInvestigationAssets, Requester) == 0x000000, "Member 'SHItemsStatics_RequestPreloadItemInvestigationAssets::Requester' has a wrong offset!");
static_assert(offsetof(SHItemsStatics_RequestPreloadItemInvestigationAssets, ItemName) == 0x000008, "Member 'SHItemsStatics_RequestPreloadItemInvestigationAssets::ItemName' has a wrong offset!");

// Function SHProto.SHBloodPuddle.IsFullyDeveloped
// 0x0001 (0x0001 - 0x0000)
struct SHBloodPuddle_IsFullyDeveloped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBloodPuddle_IsFullyDeveloped) == 0x000001, "Wrong alignment on SHBloodPuddle_IsFullyDeveloped");
static_assert(sizeof(SHBloodPuddle_IsFullyDeveloped) == 0x000001, "Wrong size on SHBloodPuddle_IsFullyDeveloped");
static_assert(offsetof(SHBloodPuddle_IsFullyDeveloped, ReturnValue) == 0x000000, "Member 'SHBloodPuddle_IsFullyDeveloped::ReturnValue' has a wrong offset!");

// Function SHProto.SHHitReactionSubcomponent.ApplyArtificialHitReaction
// 0x00F8 (0x00F8 - 0x0000)
struct SHHitReactionSubcomponent_ApplyArtificialHitReaction final
{
public:
	struct FSHHitReactionResult                   OutHitReactionResult;                              // 0x0000(0x0078)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FSHHitReactionArtificialHitConfiguration InArtificialHitReactionConfiguration;              // 0x0078(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHHitReactionSubcomponent_ApplyArtificialHitReaction) == 0x000008, "Wrong alignment on SHHitReactionSubcomponent_ApplyArtificialHitReaction");
static_assert(sizeof(SHHitReactionSubcomponent_ApplyArtificialHitReaction) == 0x0000F8, "Wrong size on SHHitReactionSubcomponent_ApplyArtificialHitReaction");
static_assert(offsetof(SHHitReactionSubcomponent_ApplyArtificialHitReaction, OutHitReactionResult) == 0x000000, "Member 'SHHitReactionSubcomponent_ApplyArtificialHitReaction::OutHitReactionResult' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_ApplyArtificialHitReaction, InArtificialHitReactionConfiguration) == 0x000078, "Member 'SHHitReactionSubcomponent_ApplyArtificialHitReaction::InArtificialHitReactionConfiguration' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_ApplyArtificialHitReaction, ReturnValue) == 0x0000F0, "Member 'SHHitReactionSubcomponent_ApplyArtificialHitReaction::ReturnValue' has a wrong offset!");

// Function SHProto.SHHitReactionSubcomponent.ApplyHitReaction
// 0x03A0 (0x03A0 - 0x0000)
struct SHHitReactionSubcomponent_ApplyHitReaction final
{
public:
	struct FSHHitReactionResult                   OutHitReactionResult;                              // 0x0000(0x0078)(Parm, OutParm, NativeAccessSpecifierPublic)
	const class UDamageType*                      InDamageType;                                      // 0x0078(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHHitReactionResponseType                    InResponseType;                                    // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InResponseVariant;                                 // 0x0084(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDurationLimit;                                   // 0x008C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InForce;                                           // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHHitReactionHitType                         InHitType;                                         // 0x0094(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InSourceLocation;                                  // 0x0098(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InDamageCauser;                                    // 0x00B0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitInfo;                                           // 0x00B8(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FSHHitReactionConfiguration            InHitReactionConfiguration;                        // 0x01A0(0x01F8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0398(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_399[0x7];                                      // 0x0399(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHHitReactionSubcomponent_ApplyHitReaction) == 0x000008, "Wrong alignment on SHHitReactionSubcomponent_ApplyHitReaction");
static_assert(sizeof(SHHitReactionSubcomponent_ApplyHitReaction) == 0x0003A0, "Wrong size on SHHitReactionSubcomponent_ApplyHitReaction");
static_assert(offsetof(SHHitReactionSubcomponent_ApplyHitReaction, OutHitReactionResult) == 0x000000, "Member 'SHHitReactionSubcomponent_ApplyHitReaction::OutHitReactionResult' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_ApplyHitReaction, InDamageType) == 0x000078, "Member 'SHHitReactionSubcomponent_ApplyHitReaction::InDamageType' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_ApplyHitReaction, InResponseType) == 0x000080, "Member 'SHHitReactionSubcomponent_ApplyHitReaction::InResponseType' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_ApplyHitReaction, InResponseVariant) == 0x000084, "Member 'SHHitReactionSubcomponent_ApplyHitReaction::InResponseVariant' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_ApplyHitReaction, InDurationLimit) == 0x00008C, "Member 'SHHitReactionSubcomponent_ApplyHitReaction::InDurationLimit' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_ApplyHitReaction, InForce) == 0x000090, "Member 'SHHitReactionSubcomponent_ApplyHitReaction::InForce' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_ApplyHitReaction, InHitType) == 0x000094, "Member 'SHHitReactionSubcomponent_ApplyHitReaction::InHitType' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_ApplyHitReaction, InSourceLocation) == 0x000098, "Member 'SHHitReactionSubcomponent_ApplyHitReaction::InSourceLocation' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_ApplyHitReaction, InDamageCauser) == 0x0000B0, "Member 'SHHitReactionSubcomponent_ApplyHitReaction::InDamageCauser' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_ApplyHitReaction, HitInfo) == 0x0000B8, "Member 'SHHitReactionSubcomponent_ApplyHitReaction::HitInfo' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_ApplyHitReaction, InHitReactionConfiguration) == 0x0001A0, "Member 'SHHitReactionSubcomponent_ApplyHitReaction::InHitReactionConfiguration' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_ApplyHitReaction, ReturnValue) == 0x000398, "Member 'SHHitReactionSubcomponent_ApplyHitReaction::ReturnValue' has a wrong offset!");

// Function SHProto.SHHitReactionSubcomponent.AreHitReactionsOfTypeDelayed
// 0x0002 (0x0002 - 0x0000)
struct SHHitReactionSubcomponent_AreHitReactionsOfTypeDelayed final
{
public:
	ESHHitReactionResponseType                    InResponseType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionSubcomponent_AreHitReactionsOfTypeDelayed) == 0x000001, "Wrong alignment on SHHitReactionSubcomponent_AreHitReactionsOfTypeDelayed");
static_assert(sizeof(SHHitReactionSubcomponent_AreHitReactionsOfTypeDelayed) == 0x000002, "Wrong size on SHHitReactionSubcomponent_AreHitReactionsOfTypeDelayed");
static_assert(offsetof(SHHitReactionSubcomponent_AreHitReactionsOfTypeDelayed, InResponseType) == 0x000000, "Member 'SHHitReactionSubcomponent_AreHitReactionsOfTypeDelayed::InResponseType' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_AreHitReactionsOfTypeDelayed, ReturnValue) == 0x000001, "Member 'SHHitReactionSubcomponent_AreHitReactionsOfTypeDelayed::ReturnValue' has a wrong offset!");

// Function SHProto.SHHitReactionSubcomponent.CancelAllHitReactions
// 0x0001 (0x0001 - 0x0000)
struct SHHitReactionSubcomponent_CancelAllHitReactions final
{
public:
	bool                                          InInstant;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionSubcomponent_CancelAllHitReactions) == 0x000001, "Wrong alignment on SHHitReactionSubcomponent_CancelAllHitReactions");
static_assert(sizeof(SHHitReactionSubcomponent_CancelAllHitReactions) == 0x000001, "Wrong size on SHHitReactionSubcomponent_CancelAllHitReactions");
static_assert(offsetof(SHHitReactionSubcomponent_CancelAllHitReactions, InInstant) == 0x000000, "Member 'SHHitReactionSubcomponent_CancelAllHitReactions::InInstant' has a wrong offset!");

// Function SHProto.SHHitReactionSubcomponent.CancelHitReactionsOfType
// 0x0002 (0x0002 - 0x0000)
struct SHHitReactionSubcomponent_CancelHitReactionsOfType final
{
public:
	ESHHitReactionResponseType                    InResponseType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InInstant;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionSubcomponent_CancelHitReactionsOfType) == 0x000001, "Wrong alignment on SHHitReactionSubcomponent_CancelHitReactionsOfType");
static_assert(sizeof(SHHitReactionSubcomponent_CancelHitReactionsOfType) == 0x000002, "Wrong size on SHHitReactionSubcomponent_CancelHitReactionsOfType");
static_assert(offsetof(SHHitReactionSubcomponent_CancelHitReactionsOfType, InResponseType) == 0x000000, "Member 'SHHitReactionSubcomponent_CancelHitReactionsOfType::InResponseType' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_CancelHitReactionsOfType, InInstant) == 0x000001, "Member 'SHHitReactionSubcomponent_CancelHitReactionsOfType::InInstant' has a wrong offset!");

// Function SHProto.SHHitReactionSubcomponent.CancelHitReactionsOfTypeAndVariant
// 0x0010 (0x0010 - 0x0000)
struct SHHitReactionSubcomponent_CancelHitReactionsOfTypeAndVariant final
{
public:
	ESHHitReactionResponseType                    InResponseType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InResponseVariant;                                 // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InInstant;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHHitReactionSubcomponent_CancelHitReactionsOfTypeAndVariant) == 0x000004, "Wrong alignment on SHHitReactionSubcomponent_CancelHitReactionsOfTypeAndVariant");
static_assert(sizeof(SHHitReactionSubcomponent_CancelHitReactionsOfTypeAndVariant) == 0x000010, "Wrong size on SHHitReactionSubcomponent_CancelHitReactionsOfTypeAndVariant");
static_assert(offsetof(SHHitReactionSubcomponent_CancelHitReactionsOfTypeAndVariant, InResponseType) == 0x000000, "Member 'SHHitReactionSubcomponent_CancelHitReactionsOfTypeAndVariant::InResponseType' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_CancelHitReactionsOfTypeAndVariant, InResponseVariant) == 0x000004, "Member 'SHHitReactionSubcomponent_CancelHitReactionsOfTypeAndVariant::InResponseVariant' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_CancelHitReactionsOfTypeAndVariant, InInstant) == 0x00000C, "Member 'SHHitReactionSubcomponent_CancelHitReactionsOfTypeAndVariant::InInstant' has a wrong offset!");

// Function SHProto.SHHitReactionSubcomponent.CancelHitReactionsOfTypes
// 0x0007 (0x0007 - 0x0000)
struct SHHitReactionSubcomponent_CancelHitReactionsOfTypes final
{
public:
	bool                                          InDeath;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InKnockdown;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InFalter;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InStagger;                                         // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InNormal;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InTwitch;                                          // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InInstant;                                         // 0x0006(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionSubcomponent_CancelHitReactionsOfTypes) == 0x000001, "Wrong alignment on SHHitReactionSubcomponent_CancelHitReactionsOfTypes");
static_assert(sizeof(SHHitReactionSubcomponent_CancelHitReactionsOfTypes) == 0x000007, "Wrong size on SHHitReactionSubcomponent_CancelHitReactionsOfTypes");
static_assert(offsetof(SHHitReactionSubcomponent_CancelHitReactionsOfTypes, InDeath) == 0x000000, "Member 'SHHitReactionSubcomponent_CancelHitReactionsOfTypes::InDeath' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_CancelHitReactionsOfTypes, InKnockdown) == 0x000001, "Member 'SHHitReactionSubcomponent_CancelHitReactionsOfTypes::InKnockdown' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_CancelHitReactionsOfTypes, InFalter) == 0x000002, "Member 'SHHitReactionSubcomponent_CancelHitReactionsOfTypes::InFalter' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_CancelHitReactionsOfTypes, InStagger) == 0x000003, "Member 'SHHitReactionSubcomponent_CancelHitReactionsOfTypes::InStagger' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_CancelHitReactionsOfTypes, InNormal) == 0x000004, "Member 'SHHitReactionSubcomponent_CancelHitReactionsOfTypes::InNormal' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_CancelHitReactionsOfTypes, InTwitch) == 0x000005, "Member 'SHHitReactionSubcomponent_CancelHitReactionsOfTypes::InTwitch' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_CancelHitReactionsOfTypes, InInstant) == 0x000006, "Member 'SHHitReactionSubcomponent_CancelHitReactionsOfTypes::InInstant' has a wrong offset!");

// Function SHProto.SHHitReactionSubcomponent.ChooseAndApplyHitReaction
// 0x01A8 (0x01A8 - 0x0000)
struct SHHitReactionSubcomponent_ChooseAndApplyHitReaction final
{
public:
	struct FSHHitReactionResult                   OutHitReactionResult;                              // 0x0000(0x0078)(Parm, OutParm, NativeAccessSpecifierPublic)
	const class UDamageType*                      InDamageType;                                      // 0x0078(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHHitReactionResponseType                    InResponseType;                                    // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InResponseVariant;                                 // 0x0084(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDurationLimit;                                   // 0x008C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InForce;                                           // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHHitReactionHitType                         InHitType;                                         // 0x0094(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InSourceLocation;                                  // 0x0098(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InDamageCauser;                                    // 0x00B0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitInfo;                                           // 0x00B8(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHHitReactionSubcomponent_ChooseAndApplyHitReaction) == 0x000008, "Wrong alignment on SHHitReactionSubcomponent_ChooseAndApplyHitReaction");
static_assert(sizeof(SHHitReactionSubcomponent_ChooseAndApplyHitReaction) == 0x0001A8, "Wrong size on SHHitReactionSubcomponent_ChooseAndApplyHitReaction");
static_assert(offsetof(SHHitReactionSubcomponent_ChooseAndApplyHitReaction, OutHitReactionResult) == 0x000000, "Member 'SHHitReactionSubcomponent_ChooseAndApplyHitReaction::OutHitReactionResult' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_ChooseAndApplyHitReaction, InDamageType) == 0x000078, "Member 'SHHitReactionSubcomponent_ChooseAndApplyHitReaction::InDamageType' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_ChooseAndApplyHitReaction, InResponseType) == 0x000080, "Member 'SHHitReactionSubcomponent_ChooseAndApplyHitReaction::InResponseType' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_ChooseAndApplyHitReaction, InResponseVariant) == 0x000084, "Member 'SHHitReactionSubcomponent_ChooseAndApplyHitReaction::InResponseVariant' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_ChooseAndApplyHitReaction, InDurationLimit) == 0x00008C, "Member 'SHHitReactionSubcomponent_ChooseAndApplyHitReaction::InDurationLimit' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_ChooseAndApplyHitReaction, InForce) == 0x000090, "Member 'SHHitReactionSubcomponent_ChooseAndApplyHitReaction::InForce' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_ChooseAndApplyHitReaction, InHitType) == 0x000094, "Member 'SHHitReactionSubcomponent_ChooseAndApplyHitReaction::InHitType' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_ChooseAndApplyHitReaction, InSourceLocation) == 0x000098, "Member 'SHHitReactionSubcomponent_ChooseAndApplyHitReaction::InSourceLocation' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_ChooseAndApplyHitReaction, InDamageCauser) == 0x0000B0, "Member 'SHHitReactionSubcomponent_ChooseAndApplyHitReaction::InDamageCauser' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_ChooseAndApplyHitReaction, HitInfo) == 0x0000B8, "Member 'SHHitReactionSubcomponent_ChooseAndApplyHitReaction::HitInfo' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_ChooseAndApplyHitReaction, ReturnValue) == 0x0001A0, "Member 'SHHitReactionSubcomponent_ChooseAndApplyHitReaction::ReturnValue' has a wrong offset!");

// Function SHProto.SHHitReactionSubcomponent.DisableHitReactionTypeDelay
// 0x0018 (0x0018 - 0x0000)
struct SHHitReactionSubcomponent_DisableHitReactionTypeDelay final
{
public:
	ESHHitReactionResponseType                    InResponseType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InApplyDelayedHitReactions;                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           InDontApplyVariants;                               // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionSubcomponent_DisableHitReactionTypeDelay) == 0x000008, "Wrong alignment on SHHitReactionSubcomponent_DisableHitReactionTypeDelay");
static_assert(sizeof(SHHitReactionSubcomponent_DisableHitReactionTypeDelay) == 0x000018, "Wrong size on SHHitReactionSubcomponent_DisableHitReactionTypeDelay");
static_assert(offsetof(SHHitReactionSubcomponent_DisableHitReactionTypeDelay, InResponseType) == 0x000000, "Member 'SHHitReactionSubcomponent_DisableHitReactionTypeDelay::InResponseType' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_DisableHitReactionTypeDelay, InApplyDelayedHitReactions) == 0x000001, "Member 'SHHitReactionSubcomponent_DisableHitReactionTypeDelay::InApplyDelayedHitReactions' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_DisableHitReactionTypeDelay, InDontApplyVariants) == 0x000008, "Member 'SHHitReactionSubcomponent_DisableHitReactionTypeDelay::InDontApplyVariants' has a wrong offset!");

// Function SHProto.SHHitReactionSubcomponent.EnableHitReactionTypeDelay
// 0x0018 (0x0018 - 0x0000)
struct SHHitReactionSubcomponent_EnableHitReactionTypeDelay final
{
public:
	ESHHitReactionResponseType                    InResponseType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           InDontDelayVariants;                               // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionSubcomponent_EnableHitReactionTypeDelay) == 0x000008, "Wrong alignment on SHHitReactionSubcomponent_EnableHitReactionTypeDelay");
static_assert(sizeof(SHHitReactionSubcomponent_EnableHitReactionTypeDelay) == 0x000018, "Wrong size on SHHitReactionSubcomponent_EnableHitReactionTypeDelay");
static_assert(offsetof(SHHitReactionSubcomponent_EnableHitReactionTypeDelay, InResponseType) == 0x000000, "Member 'SHHitReactionSubcomponent_EnableHitReactionTypeDelay::InResponseType' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_EnableHitReactionTypeDelay, InDontDelayVariants) == 0x000008, "Member 'SHHitReactionSubcomponent_EnableHitReactionTypeDelay::InDontDelayVariants' has a wrong offset!");

// Function SHProto.SHHitReactionSubcomponent.FinishHitReactionsOfType
// 0x0001 (0x0001 - 0x0000)
struct SHHitReactionSubcomponent_FinishHitReactionsOfType final
{
public:
	ESHHitReactionResponseType                    InResponseType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionSubcomponent_FinishHitReactionsOfType) == 0x000001, "Wrong alignment on SHHitReactionSubcomponent_FinishHitReactionsOfType");
static_assert(sizeof(SHHitReactionSubcomponent_FinishHitReactionsOfType) == 0x000001, "Wrong size on SHHitReactionSubcomponent_FinishHitReactionsOfType");
static_assert(offsetof(SHHitReactionSubcomponent_FinishHitReactionsOfType, InResponseType) == 0x000000, "Member 'SHHitReactionSubcomponent_FinishHitReactionsOfType::InResponseType' has a wrong offset!");

// Function SHProto.SHHitReactionSubcomponent.FinishHitReactionsOfTypeAndVariant
// 0x000C (0x000C - 0x0000)
struct SHHitReactionSubcomponent_FinishHitReactionsOfTypeAndVariant final
{
public:
	ESHHitReactionResponseType                    InResponseType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InResponseVariant;                                 // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionSubcomponent_FinishHitReactionsOfTypeAndVariant) == 0x000004, "Wrong alignment on SHHitReactionSubcomponent_FinishHitReactionsOfTypeAndVariant");
static_assert(sizeof(SHHitReactionSubcomponent_FinishHitReactionsOfTypeAndVariant) == 0x00000C, "Wrong size on SHHitReactionSubcomponent_FinishHitReactionsOfTypeAndVariant");
static_assert(offsetof(SHHitReactionSubcomponent_FinishHitReactionsOfTypeAndVariant, InResponseType) == 0x000000, "Member 'SHHitReactionSubcomponent_FinishHitReactionsOfTypeAndVariant::InResponseType' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_FinishHitReactionsOfTypeAndVariant, InResponseVariant) == 0x000004, "Member 'SHHitReactionSubcomponent_FinishHitReactionsOfTypeAndVariant::InResponseVariant' has a wrong offset!");

// Function SHProto.SHHitReactionSubcomponent.FinishHitReactionsOfTypes
// 0x0006 (0x0006 - 0x0000)
struct SHHitReactionSubcomponent_FinishHitReactionsOfTypes final
{
public:
	bool                                          InDeath;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InKnockdown;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InFalter;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InStagger;                                         // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InNormal;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InTwitch;                                          // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionSubcomponent_FinishHitReactionsOfTypes) == 0x000001, "Wrong alignment on SHHitReactionSubcomponent_FinishHitReactionsOfTypes");
static_assert(sizeof(SHHitReactionSubcomponent_FinishHitReactionsOfTypes) == 0x000006, "Wrong size on SHHitReactionSubcomponent_FinishHitReactionsOfTypes");
static_assert(offsetof(SHHitReactionSubcomponent_FinishHitReactionsOfTypes, InDeath) == 0x000000, "Member 'SHHitReactionSubcomponent_FinishHitReactionsOfTypes::InDeath' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_FinishHitReactionsOfTypes, InKnockdown) == 0x000001, "Member 'SHHitReactionSubcomponent_FinishHitReactionsOfTypes::InKnockdown' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_FinishHitReactionsOfTypes, InFalter) == 0x000002, "Member 'SHHitReactionSubcomponent_FinishHitReactionsOfTypes::InFalter' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_FinishHitReactionsOfTypes, InStagger) == 0x000003, "Member 'SHHitReactionSubcomponent_FinishHitReactionsOfTypes::InStagger' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_FinishHitReactionsOfTypes, InNormal) == 0x000004, "Member 'SHHitReactionSubcomponent_FinishHitReactionsOfTypes::InNormal' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_FinishHitReactionsOfTypes, InTwitch) == 0x000005, "Member 'SHHitReactionSubcomponent_FinishHitReactionsOfTypes::InTwitch' has a wrong offset!");

// Function SHProto.SHHitReactionSubcomponent.HitReactionStateEnded
// 0x0008 (0x0008 - 0x0000)
struct SHHitReactionSubcomponent_HitReactionStateEnded final
{
public:
	class USHHitReactionState*                    InHitReactionState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionSubcomponent_HitReactionStateEnded) == 0x000008, "Wrong alignment on SHHitReactionSubcomponent_HitReactionStateEnded");
static_assert(sizeof(SHHitReactionSubcomponent_HitReactionStateEnded) == 0x000008, "Wrong size on SHHitReactionSubcomponent_HitReactionStateEnded");
static_assert(offsetof(SHHitReactionSubcomponent_HitReactionStateEnded, InHitReactionState) == 0x000000, "Member 'SHHitReactionSubcomponent_HitReactionStateEnded::InHitReactionState' has a wrong offset!");

// Function SHProto.SHHitReactionSubcomponent.HitReactionStateFinishing
// 0x0008 (0x0008 - 0x0000)
struct SHHitReactionSubcomponent_HitReactionStateFinishing final
{
public:
	class USHHitReactionState*                    InHitReactionState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionSubcomponent_HitReactionStateFinishing) == 0x000008, "Wrong alignment on SHHitReactionSubcomponent_HitReactionStateFinishing");
static_assert(sizeof(SHHitReactionSubcomponent_HitReactionStateFinishing) == 0x000008, "Wrong size on SHHitReactionSubcomponent_HitReactionStateFinishing");
static_assert(offsetof(SHHitReactionSubcomponent_HitReactionStateFinishing, InHitReactionState) == 0x000000, "Member 'SHHitReactionSubcomponent_HitReactionStateFinishing::InHitReactionState' has a wrong offset!");

// Function SHProto.SHHitReactionSubcomponent.SetChangeHitReactionsSetDelayed
// 0x0001 (0x0001 - 0x0000)
struct SHHitReactionSubcomponent_SetChangeHitReactionsSetDelayed final
{
public:
	bool                                          bInChangeHitReactionsSetDelayed;                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionSubcomponent_SetChangeHitReactionsSetDelayed) == 0x000001, "Wrong alignment on SHHitReactionSubcomponent_SetChangeHitReactionsSetDelayed");
static_assert(sizeof(SHHitReactionSubcomponent_SetChangeHitReactionsSetDelayed) == 0x000001, "Wrong size on SHHitReactionSubcomponent_SetChangeHitReactionsSetDelayed");
static_assert(offsetof(SHHitReactionSubcomponent_SetChangeHitReactionsSetDelayed, bInChangeHitReactionsSetDelayed) == 0x000000, "Member 'SHHitReactionSubcomponent_SetChangeHitReactionsSetDelayed::bInChangeHitReactionsSetDelayed' has a wrong offset!");

// Function SHProto.SHHitReactionSubcomponent.SetHitReactionsDrawDebugEnabled
// 0x0001 (0x0001 - 0x0000)
struct SHHitReactionSubcomponent_SetHitReactionsDrawDebugEnabled final
{
public:
	bool                                          InDrawDebug;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionSubcomponent_SetHitReactionsDrawDebugEnabled) == 0x000001, "Wrong alignment on SHHitReactionSubcomponent_SetHitReactionsDrawDebugEnabled");
static_assert(sizeof(SHHitReactionSubcomponent_SetHitReactionsDrawDebugEnabled) == 0x000001, "Wrong size on SHHitReactionSubcomponent_SetHitReactionsDrawDebugEnabled");
static_assert(offsetof(SHHitReactionSubcomponent_SetHitReactionsDrawDebugEnabled, InDrawDebug) == 0x000000, "Member 'SHHitReactionSubcomponent_SetHitReactionsDrawDebugEnabled::InDrawDebug' has a wrong offset!");

// Function SHProto.SHHitReactionSubcomponent.SetHitReactionsSet
// 0x0030 (0x0030 - 0x0000)
struct SHHitReactionSubcomponent_SetHitReactionsSet final
{
public:
	TSoftObjectPtr<class USHHitReactionsSet>      InHitReactionsSet;                                 // 0x0000(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionSubcomponent_SetHitReactionsSet) == 0x000008, "Wrong alignment on SHHitReactionSubcomponent_SetHitReactionsSet");
static_assert(sizeof(SHHitReactionSubcomponent_SetHitReactionsSet) == 0x000030, "Wrong size on SHHitReactionSubcomponent_SetHitReactionsSet");
static_assert(offsetof(SHHitReactionSubcomponent_SetHitReactionsSet, InHitReactionsSet) == 0x000000, "Member 'SHHitReactionSubcomponent_SetHitReactionsSet::InHitReactionsSet' has a wrong offset!");

// Function SHProto.SHHitReactionSubcomponent.AreHitReactionsPreventingControllerRotation
// 0x0001 (0x0001 - 0x0000)
struct SHHitReactionSubcomponent_AreHitReactionsPreventingControllerRotation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionSubcomponent_AreHitReactionsPreventingControllerRotation) == 0x000001, "Wrong alignment on SHHitReactionSubcomponent_AreHitReactionsPreventingControllerRotation");
static_assert(sizeof(SHHitReactionSubcomponent_AreHitReactionsPreventingControllerRotation) == 0x000001, "Wrong size on SHHitReactionSubcomponent_AreHitReactionsPreventingControllerRotation");
static_assert(offsetof(SHHitReactionSubcomponent_AreHitReactionsPreventingControllerRotation, ReturnValue) == 0x000000, "Member 'SHHitReactionSubcomponent_AreHitReactionsPreventingControllerRotation::ReturnValue' has a wrong offset!");

// Function SHProto.SHHitReactionSubcomponent.AreHitReactionsWantingDisabledAI
// 0x0001 (0x0001 - 0x0000)
struct SHHitReactionSubcomponent_AreHitReactionsWantingDisabledAI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionSubcomponent_AreHitReactionsWantingDisabledAI) == 0x000001, "Wrong alignment on SHHitReactionSubcomponent_AreHitReactionsWantingDisabledAI");
static_assert(sizeof(SHHitReactionSubcomponent_AreHitReactionsWantingDisabledAI) == 0x000001, "Wrong size on SHHitReactionSubcomponent_AreHitReactionsWantingDisabledAI");
static_assert(offsetof(SHHitReactionSubcomponent_AreHitReactionsWantingDisabledAI, ReturnValue) == 0x000000, "Member 'SHHitReactionSubcomponent_AreHitReactionsWantingDisabledAI::ReturnValue' has a wrong offset!");

// Function SHProto.SHHitReactionSubcomponent.ChooseHitReaction
// 0x0328 (0x0328 - 0x0000)
struct SHHitReactionSubcomponent_ChooseHitReaction final
{
public:
	struct FSHHitReactionConfiguration            OutHitReactionConfiguration;                       // 0x0000(0x01F8)(Parm, OutParm, NativeAccessSpecifierPublic)
	const class UDamageType*                      InDamageType;                                      // 0x01F8(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHHitReactionResponseType                    InResponseType;                                    // 0x0200(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_201[0x3];                                      // 0x0201(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InResponseVariant;                                 // 0x0204(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InForce;                                           // 0x020C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHHitReactionHitType                         InHitType;                                         // 0x0210(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_211[0x7];                                      // 0x0211(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InSourceLocation;                                  // 0x0218(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InDamageCauser;                                    // 0x0230(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitInfo;                                           // 0x0238(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0320(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_321[0x7];                                      // 0x0321(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHHitReactionSubcomponent_ChooseHitReaction) == 0x000008, "Wrong alignment on SHHitReactionSubcomponent_ChooseHitReaction");
static_assert(sizeof(SHHitReactionSubcomponent_ChooseHitReaction) == 0x000328, "Wrong size on SHHitReactionSubcomponent_ChooseHitReaction");
static_assert(offsetof(SHHitReactionSubcomponent_ChooseHitReaction, OutHitReactionConfiguration) == 0x000000, "Member 'SHHitReactionSubcomponent_ChooseHitReaction::OutHitReactionConfiguration' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_ChooseHitReaction, InDamageType) == 0x0001F8, "Member 'SHHitReactionSubcomponent_ChooseHitReaction::InDamageType' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_ChooseHitReaction, InResponseType) == 0x000200, "Member 'SHHitReactionSubcomponent_ChooseHitReaction::InResponseType' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_ChooseHitReaction, InResponseVariant) == 0x000204, "Member 'SHHitReactionSubcomponent_ChooseHitReaction::InResponseVariant' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_ChooseHitReaction, InForce) == 0x00020C, "Member 'SHHitReactionSubcomponent_ChooseHitReaction::InForce' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_ChooseHitReaction, InHitType) == 0x000210, "Member 'SHHitReactionSubcomponent_ChooseHitReaction::InHitType' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_ChooseHitReaction, InSourceLocation) == 0x000218, "Member 'SHHitReactionSubcomponent_ChooseHitReaction::InSourceLocation' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_ChooseHitReaction, InDamageCauser) == 0x000230, "Member 'SHHitReactionSubcomponent_ChooseHitReaction::InDamageCauser' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_ChooseHitReaction, HitInfo) == 0x000238, "Member 'SHHitReactionSubcomponent_ChooseHitReaction::HitInfo' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_ChooseHitReaction, ReturnValue) == 0x000320, "Member 'SHHitReactionSubcomponent_ChooseHitReaction::ReturnValue' has a wrong offset!");

// Function SHProto.SHHitReactionSubcomponent.FindActiveHitReactionVariants
// 0x0020 (0x0020 - 0x0000)
struct SHHitReactionSubcomponent_FindActiveHitReactionVariants final
{
public:
	ESHHitReactionResponseType                    InResponseType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           OutHitReactionVariants;                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          InIncludeFinishing;                                // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIncludeDelayed;                                  // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHHitReactionSubcomponent_FindActiveHitReactionVariants) == 0x000008, "Wrong alignment on SHHitReactionSubcomponent_FindActiveHitReactionVariants");
static_assert(sizeof(SHHitReactionSubcomponent_FindActiveHitReactionVariants) == 0x000020, "Wrong size on SHHitReactionSubcomponent_FindActiveHitReactionVariants");
static_assert(offsetof(SHHitReactionSubcomponent_FindActiveHitReactionVariants, InResponseType) == 0x000000, "Member 'SHHitReactionSubcomponent_FindActiveHitReactionVariants::InResponseType' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_FindActiveHitReactionVariants, OutHitReactionVariants) == 0x000008, "Member 'SHHitReactionSubcomponent_FindActiveHitReactionVariants::OutHitReactionVariants' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_FindActiveHitReactionVariants, InIncludeFinishing) == 0x000018, "Member 'SHHitReactionSubcomponent_FindActiveHitReactionVariants::InIncludeFinishing' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_FindActiveHitReactionVariants, InIncludeDelayed) == 0x000019, "Member 'SHHitReactionSubcomponent_FindActiveHitReactionVariants::InIncludeDelayed' has a wrong offset!");

// Function SHProto.SHHitReactionSubcomponent.FindAllHitReactionStateIdentifiers
// 0x0018 (0x0018 - 0x0000)
struct SHHitReactionSubcomponent_FindAllHitReactionStateIdentifiers final
{
public:
	TArray<struct FSHHitReactionIdentifier>       OutHitReactionIdentifiers;                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          InIncludeFinishing;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIncludeDelayed;                                  // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHHitReactionSubcomponent_FindAllHitReactionStateIdentifiers) == 0x000008, "Wrong alignment on SHHitReactionSubcomponent_FindAllHitReactionStateIdentifiers");
static_assert(sizeof(SHHitReactionSubcomponent_FindAllHitReactionStateIdentifiers) == 0x000018, "Wrong size on SHHitReactionSubcomponent_FindAllHitReactionStateIdentifiers");
static_assert(offsetof(SHHitReactionSubcomponent_FindAllHitReactionStateIdentifiers, OutHitReactionIdentifiers) == 0x000000, "Member 'SHHitReactionSubcomponent_FindAllHitReactionStateIdentifiers::OutHitReactionIdentifiers' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_FindAllHitReactionStateIdentifiers, InIncludeFinishing) == 0x000010, "Member 'SHHitReactionSubcomponent_FindAllHitReactionStateIdentifiers::InIncludeFinishing' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_FindAllHitReactionStateIdentifiers, InIncludeDelayed) == 0x000011, "Member 'SHHitReactionSubcomponent_FindAllHitReactionStateIdentifiers::InIncludeDelayed' has a wrong offset!");

// Function SHProto.SHHitReactionSubcomponent.HasAnyOfHitReactionStatesOfTypeInProgress
// 0x0009 (0x0009 - 0x0000)
struct SHHitReactionSubcomponent_HasAnyOfHitReactionStatesOfTypeInProgress final
{
public:
	bool                                          InDeath;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InKnockdown;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InFalter;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InStagger;                                         // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InNormal;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InTwitch;                                          // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIncludeFinishing;                                // 0x0006(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIncludeDelayed;                                  // 0x0007(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionSubcomponent_HasAnyOfHitReactionStatesOfTypeInProgress) == 0x000001, "Wrong alignment on SHHitReactionSubcomponent_HasAnyOfHitReactionStatesOfTypeInProgress");
static_assert(sizeof(SHHitReactionSubcomponent_HasAnyOfHitReactionStatesOfTypeInProgress) == 0x000009, "Wrong size on SHHitReactionSubcomponent_HasAnyOfHitReactionStatesOfTypeInProgress");
static_assert(offsetof(SHHitReactionSubcomponent_HasAnyOfHitReactionStatesOfTypeInProgress, InDeath) == 0x000000, "Member 'SHHitReactionSubcomponent_HasAnyOfHitReactionStatesOfTypeInProgress::InDeath' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_HasAnyOfHitReactionStatesOfTypeInProgress, InKnockdown) == 0x000001, "Member 'SHHitReactionSubcomponent_HasAnyOfHitReactionStatesOfTypeInProgress::InKnockdown' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_HasAnyOfHitReactionStatesOfTypeInProgress, InFalter) == 0x000002, "Member 'SHHitReactionSubcomponent_HasAnyOfHitReactionStatesOfTypeInProgress::InFalter' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_HasAnyOfHitReactionStatesOfTypeInProgress, InStagger) == 0x000003, "Member 'SHHitReactionSubcomponent_HasAnyOfHitReactionStatesOfTypeInProgress::InStagger' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_HasAnyOfHitReactionStatesOfTypeInProgress, InNormal) == 0x000004, "Member 'SHHitReactionSubcomponent_HasAnyOfHitReactionStatesOfTypeInProgress::InNormal' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_HasAnyOfHitReactionStatesOfTypeInProgress, InTwitch) == 0x000005, "Member 'SHHitReactionSubcomponent_HasAnyOfHitReactionStatesOfTypeInProgress::InTwitch' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_HasAnyOfHitReactionStatesOfTypeInProgress, InIncludeFinishing) == 0x000006, "Member 'SHHitReactionSubcomponent_HasAnyOfHitReactionStatesOfTypeInProgress::InIncludeFinishing' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_HasAnyOfHitReactionStatesOfTypeInProgress, InIncludeDelayed) == 0x000007, "Member 'SHHitReactionSubcomponent_HasAnyOfHitReactionStatesOfTypeInProgress::InIncludeDelayed' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_HasAnyOfHitReactionStatesOfTypeInProgress, ReturnValue) == 0x000008, "Member 'SHHitReactionSubcomponent_HasAnyOfHitReactionStatesOfTypeInProgress::ReturnValue' has a wrong offset!");

// Function SHProto.SHHitReactionSubcomponent.HasHitReactionStatesOfTypeAndVariantInProgress
// 0x0010 (0x0010 - 0x0000)
struct SHHitReactionSubcomponent_HasHitReactionStatesOfTypeAndVariantInProgress final
{
public:
	ESHHitReactionResponseType                    InResponseType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InResponseVariant;                                 // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIncludeFinishing;                                // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIncludeDelayed;                                  // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000E(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHHitReactionSubcomponent_HasHitReactionStatesOfTypeAndVariantInProgress) == 0x000004, "Wrong alignment on SHHitReactionSubcomponent_HasHitReactionStatesOfTypeAndVariantInProgress");
static_assert(sizeof(SHHitReactionSubcomponent_HasHitReactionStatesOfTypeAndVariantInProgress) == 0x000010, "Wrong size on SHHitReactionSubcomponent_HasHitReactionStatesOfTypeAndVariantInProgress");
static_assert(offsetof(SHHitReactionSubcomponent_HasHitReactionStatesOfTypeAndVariantInProgress, InResponseType) == 0x000000, "Member 'SHHitReactionSubcomponent_HasHitReactionStatesOfTypeAndVariantInProgress::InResponseType' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_HasHitReactionStatesOfTypeAndVariantInProgress, InResponseVariant) == 0x000004, "Member 'SHHitReactionSubcomponent_HasHitReactionStatesOfTypeAndVariantInProgress::InResponseVariant' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_HasHitReactionStatesOfTypeAndVariantInProgress, InIncludeFinishing) == 0x00000C, "Member 'SHHitReactionSubcomponent_HasHitReactionStatesOfTypeAndVariantInProgress::InIncludeFinishing' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_HasHitReactionStatesOfTypeAndVariantInProgress, InIncludeDelayed) == 0x00000D, "Member 'SHHitReactionSubcomponent_HasHitReactionStatesOfTypeAndVariantInProgress::InIncludeDelayed' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_HasHitReactionStatesOfTypeAndVariantInProgress, ReturnValue) == 0x00000E, "Member 'SHHitReactionSubcomponent_HasHitReactionStatesOfTypeAndVariantInProgress::ReturnValue' has a wrong offset!");

// Function SHProto.SHHitReactionSubcomponent.HasHitReactionStatesOfTypeInProgress
// 0x0004 (0x0004 - 0x0000)
struct SHHitReactionSubcomponent_HasHitReactionStatesOfTypeInProgress final
{
public:
	ESHHitReactionResponseType                    InResponseType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIncludeFinishing;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIncludeDelayed;                                  // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionSubcomponent_HasHitReactionStatesOfTypeInProgress) == 0x000001, "Wrong alignment on SHHitReactionSubcomponent_HasHitReactionStatesOfTypeInProgress");
static_assert(sizeof(SHHitReactionSubcomponent_HasHitReactionStatesOfTypeInProgress) == 0x000004, "Wrong size on SHHitReactionSubcomponent_HasHitReactionStatesOfTypeInProgress");
static_assert(offsetof(SHHitReactionSubcomponent_HasHitReactionStatesOfTypeInProgress, InResponseType) == 0x000000, "Member 'SHHitReactionSubcomponent_HasHitReactionStatesOfTypeInProgress::InResponseType' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_HasHitReactionStatesOfTypeInProgress, InIncludeFinishing) == 0x000001, "Member 'SHHitReactionSubcomponent_HasHitReactionStatesOfTypeInProgress::InIncludeFinishing' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_HasHitReactionStatesOfTypeInProgress, InIncludeDelayed) == 0x000002, "Member 'SHHitReactionSubcomponent_HasHitReactionStatesOfTypeInProgress::InIncludeDelayed' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_HasHitReactionStatesOfTypeInProgress, ReturnValue) == 0x000003, "Member 'SHHitReactionSubcomponent_HasHitReactionStatesOfTypeInProgress::ReturnValue' has a wrong offset!");

// Function SHProto.SHHitReactionSubcomponent.IsUsingHitReactionsSet
// 0x0038 (0x0038 - 0x0000)
struct SHHitReactionSubcomponent_IsUsingHitReactionsSet final
{
public:
	TSoftObjectPtr<class USHHitReactionsSet>      InHitReactionsSet;                                 // 0x0000(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InCheckDelayedSet;                                 // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHHitReactionSubcomponent_IsUsingHitReactionsSet) == 0x000008, "Wrong alignment on SHHitReactionSubcomponent_IsUsingHitReactionsSet");
static_assert(sizeof(SHHitReactionSubcomponent_IsUsingHitReactionsSet) == 0x000038, "Wrong size on SHHitReactionSubcomponent_IsUsingHitReactionsSet");
static_assert(offsetof(SHHitReactionSubcomponent_IsUsingHitReactionsSet, InHitReactionsSet) == 0x000000, "Member 'SHHitReactionSubcomponent_IsUsingHitReactionsSet::InHitReactionsSet' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_IsUsingHitReactionsSet, InCheckDelayedSet) == 0x000030, "Member 'SHHitReactionSubcomponent_IsUsingHitReactionsSet::InCheckDelayedSet' has a wrong offset!");
static_assert(offsetof(SHHitReactionSubcomponent_IsUsingHitReactionsSet, ReturnValue) == 0x000031, "Member 'SHHitReactionSubcomponent_IsUsingHitReactionsSet::ReturnValue' has a wrong offset!");

// DelegateFunction SHProto.SHMariaCombatComponent.SHMariaCombatBlueprintEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHMariaCombatComponent_SHMariaCombatBlueprintEvent__DelegateSignature final
{
public:
	class USHMariaCombatComponent*                Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMariaCombatComponent_SHMariaCombatBlueprintEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHMariaCombatComponent_SHMariaCombatBlueprintEvent__DelegateSignature");
static_assert(sizeof(SHMariaCombatComponent_SHMariaCombatBlueprintEvent__DelegateSignature) == 0x000008, "Wrong size on SHMariaCombatComponent_SHMariaCombatBlueprintEvent__DelegateSignature");
static_assert(offsetof(SHMariaCombatComponent_SHMariaCombatBlueprintEvent__DelegateSignature, Component) == 0x000000, "Member 'SHMariaCombatComponent_SHMariaCombatBlueprintEvent__DelegateSignature::Component' has a wrong offset!");

// Function SHProto.SHMariaCombatComponent.IsInDanger
// 0x0001 (0x0001 - 0x0000)
struct SHMariaCombatComponent_IsInDanger final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMariaCombatComponent_IsInDanger) == 0x000001, "Wrong alignment on SHMariaCombatComponent_IsInDanger");
static_assert(sizeof(SHMariaCombatComponent_IsInDanger) == 0x000001, "Wrong size on SHMariaCombatComponent_IsInDanger");
static_assert(offsetof(SHMariaCombatComponent_IsInDanger, ReturnValue) == 0x000000, "Member 'SHMariaCombatComponent_IsInDanger::ReturnValue' has a wrong offset!");

// Function SHProto.SHMariaCombatComponent.IsInjured
// 0x0001 (0x0001 - 0x0000)
struct SHMariaCombatComponent_IsInjured final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMariaCombatComponent_IsInjured) == 0x000001, "Wrong alignment on SHMariaCombatComponent_IsInjured");
static_assert(sizeof(SHMariaCombatComponent_IsInjured) == 0x000001, "Wrong size on SHMariaCombatComponent_IsInjured");
static_assert(offsetof(SHMariaCombatComponent_IsInjured, ReturnValue) == 0x000000, "Member 'SHMariaCombatComponent_IsInjured::ReturnValue' has a wrong offset!");

// Function SHProto.SHMariaCombatComponent.WasAttacked
// 0x0001 (0x0001 - 0x0000)
struct SHMariaCombatComponent_WasAttacked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMariaCombatComponent_WasAttacked) == 0x000001, "Wrong alignment on SHMariaCombatComponent_WasAttacked");
static_assert(sizeof(SHMariaCombatComponent_WasAttacked) == 0x000001, "Wrong size on SHMariaCombatComponent_WasAttacked");
static_assert(offsetof(SHMariaCombatComponent_WasAttacked, ReturnValue) == 0x000000, "Member 'SHMariaCombatComponent_WasAttacked::ReturnValue' has a wrong offset!");

// Function SHProto.SHMariaCombatComponent.WasSaved
// 0x0001 (0x0001 - 0x0000)
struct SHMariaCombatComponent_WasSaved final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMariaCombatComponent_WasSaved) == 0x000001, "Wrong alignment on SHMariaCombatComponent_WasSaved");
static_assert(sizeof(SHMariaCombatComponent_WasSaved) == 0x000001, "Wrong size on SHMariaCombatComponent_WasSaved");
static_assert(offsetof(SHMariaCombatComponent_WasSaved, ReturnValue) == 0x000000, "Member 'SHMariaCombatComponent_WasSaved::ReturnValue' has a wrong offset!");

// Function SHProto.SHHotelFWKilledAllDefenselessEnemiesEndingFactor.SHDebug_Character_Endings_HotelFWKilledAllDefenselessEnemiesEndingFactor_SetDebugValue
// 0x0001 (0x0001 - 0x0000)
struct SHHotelFWKilledAllDefenselessEnemiesEndingFactor_SHDebug_Character_Endings_HotelFWKilledAllDefenselessEnemiesEndingFactor_SetDebugValue final
{
public:
	bool                                          InValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHotelFWKilledAllDefenselessEnemiesEndingFactor_SHDebug_Character_Endings_HotelFWKilledAllDefenselessEnemiesEndingFactor_SetDebugValue) == 0x000001, "Wrong alignment on SHHotelFWKilledAllDefenselessEnemiesEndingFactor_SHDebug_Character_Endings_HotelFWKilledAllDefenselessEnemiesEndingFactor_SetDebugValue");
static_assert(sizeof(SHHotelFWKilledAllDefenselessEnemiesEndingFactor_SHDebug_Character_Endings_HotelFWKilledAllDefenselessEnemiesEndingFactor_SetDebugValue) == 0x000001, "Wrong size on SHHotelFWKilledAllDefenselessEnemiesEndingFactor_SHDebug_Character_Endings_HotelFWKilledAllDefenselessEnemiesEndingFactor_SetDebugValue");
static_assert(offsetof(SHHotelFWKilledAllDefenselessEnemiesEndingFactor_SHDebug_Character_Endings_HotelFWKilledAllDefenselessEnemiesEndingFactor_SetDebugValue, InValue) == 0x000000, "Member 'SHHotelFWKilledAllDefenselessEnemiesEndingFactor_SHDebug_Character_Endings_HotelFWKilledAllDefenselessEnemiesEndingFactor_SetDebugValue::InValue' has a wrong offset!");

// Function SHProto.SHBossfightItemsManager.PerformManagementForPhase
// 0x0004 (0x0004 - 0x0000)
struct SHBossfightItemsManager_PerformManagementForPhase final
{
public:
	int32                                         InPhaseIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBossfightItemsManager_PerformManagementForPhase) == 0x000004, "Wrong alignment on SHBossfightItemsManager_PerformManagementForPhase");
static_assert(sizeof(SHBossfightItemsManager_PerformManagementForPhase) == 0x000004, "Wrong size on SHBossfightItemsManager_PerformManagementForPhase");
static_assert(offsetof(SHBossfightItemsManager_PerformManagementForPhase, InPhaseIndex) == 0x000000, "Member 'SHBossfightItemsManager_PerformManagementForPhase::InPhaseIndex' has a wrong offset!");

// Function SHProto.SHBreakableMeshComponent.ManualBreakRequest
// 0x0010 (0x0010 - 0x0000)
struct SHBreakableMeshComponent_ManualBreakRequest final
{
public:
	const class UObject*                          Requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHBreakableMeshComponent_ManualBreakRequest) == 0x000008, "Wrong alignment on SHBreakableMeshComponent_ManualBreakRequest");
static_assert(sizeof(SHBreakableMeshComponent_ManualBreakRequest) == 0x000010, "Wrong size on SHBreakableMeshComponent_ManualBreakRequest");
static_assert(offsetof(SHBreakableMeshComponent_ManualBreakRequest, Requester) == 0x000000, "Member 'SHBreakableMeshComponent_ManualBreakRequest::Requester' has a wrong offset!");
static_assert(offsetof(SHBreakableMeshComponent_ManualBreakRequest, ReturnValue) == 0x000008, "Member 'SHBreakableMeshComponent_ManualBreakRequest::ReturnValue' has a wrong offset!");

// DelegateFunction SHProto.SHBreakableMeshComponent.SHBreakableMeshEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHBreakableMeshComponent_SHBreakableMeshEvent__DelegateSignature final
{
public:
	class USHBreakableMeshComponent*              Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBreakableMeshComponent_SHBreakableMeshEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHBreakableMeshComponent_SHBreakableMeshEvent__DelegateSignature");
static_assert(sizeof(SHBreakableMeshComponent_SHBreakableMeshEvent__DelegateSignature) == 0x000008, "Wrong size on SHBreakableMeshComponent_SHBreakableMeshEvent__DelegateSignature");
static_assert(offsetof(SHBreakableMeshComponent_SHBreakableMeshEvent__DelegateSignature, Component) == 0x000000, "Member 'SHBreakableMeshComponent_SHBreakableMeshEvent__DelegateSignature::Component' has a wrong offset!");

// DelegateFunction SHProto.SHBreakableMeshComponent.SHBreakableMeshWithHitContextEvent__DelegateSignature
// 0x00F8 (0x00F8 - 0x0000)
struct SHBreakableMeshComponent_SHBreakableMeshWithHitContextEvent__DelegateSignature final
{
public:
	class USHBreakableMeshComponent*              Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                DamageTypeClass;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0010(0x00E8)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBreakableMeshComponent_SHBreakableMeshWithHitContextEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHBreakableMeshComponent_SHBreakableMeshWithHitContextEvent__DelegateSignature");
static_assert(sizeof(SHBreakableMeshComponent_SHBreakableMeshWithHitContextEvent__DelegateSignature) == 0x0000F8, "Wrong size on SHBreakableMeshComponent_SHBreakableMeshWithHitContextEvent__DelegateSignature");
static_assert(offsetof(SHBreakableMeshComponent_SHBreakableMeshWithHitContextEvent__DelegateSignature, Component) == 0x000000, "Member 'SHBreakableMeshComponent_SHBreakableMeshWithHitContextEvent__DelegateSignature::Component' has a wrong offset!");
static_assert(offsetof(SHBreakableMeshComponent_SHBreakableMeshWithHitContextEvent__DelegateSignature, DamageTypeClass) == 0x000008, "Member 'SHBreakableMeshComponent_SHBreakableMeshWithHitContextEvent__DelegateSignature::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(SHBreakableMeshComponent_SHBreakableMeshWithHitContextEvent__DelegateSignature, HitResult) == 0x000010, "Member 'SHBreakableMeshComponent_SHBreakableMeshWithHitContextEvent__DelegateSignature::HitResult' has a wrong offset!");

// Function SHProto.SHBreakableMeshComponent.GetCurrentBrokenIndex
// 0x0004 (0x0004 - 0x0000)
struct SHBreakableMeshComponent_GetCurrentBrokenIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHBreakableMeshComponent_GetCurrentBrokenIndex) == 0x000004, "Wrong alignment on SHBreakableMeshComponent_GetCurrentBrokenIndex");
static_assert(sizeof(SHBreakableMeshComponent_GetCurrentBrokenIndex) == 0x000004, "Wrong size on SHBreakableMeshComponent_GetCurrentBrokenIndex");
static_assert(offsetof(SHBreakableMeshComponent_GetCurrentBrokenIndex, ReturnValue) == 0x000000, "Member 'SHBreakableMeshComponent_GetCurrentBrokenIndex::ReturnValue' has a wrong offset!");

// Function SHProto.SHBreakableMeshComponent.IsAfterLastBrokenStep
// 0x0008 (0x0008 - 0x0000)
struct SHBreakableMeshComponent_IsAfterLastBrokenStep final
{
public:
	int32                                         CheckedIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHBreakableMeshComponent_IsAfterLastBrokenStep) == 0x000004, "Wrong alignment on SHBreakableMeshComponent_IsAfterLastBrokenStep");
static_assert(sizeof(SHBreakableMeshComponent_IsAfterLastBrokenStep) == 0x000008, "Wrong size on SHBreakableMeshComponent_IsAfterLastBrokenStep");
static_assert(offsetof(SHBreakableMeshComponent_IsAfterLastBrokenStep, CheckedIndex) == 0x000000, "Member 'SHBreakableMeshComponent_IsAfterLastBrokenStep::CheckedIndex' has a wrong offset!");
static_assert(offsetof(SHBreakableMeshComponent_IsAfterLastBrokenStep, ReturnValue) == 0x000004, "Member 'SHBreakableMeshComponent_IsAfterLastBrokenStep::ReturnValue' has a wrong offset!");

// Function SHProto.SHBreakableMeshComponent.IsLastBrokenStep
// 0x0008 (0x0008 - 0x0000)
struct SHBreakableMeshComponent_IsLastBrokenStep final
{
public:
	int32                                         CheckedIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHBreakableMeshComponent_IsLastBrokenStep) == 0x000004, "Wrong alignment on SHBreakableMeshComponent_IsLastBrokenStep");
static_assert(sizeof(SHBreakableMeshComponent_IsLastBrokenStep) == 0x000008, "Wrong size on SHBreakableMeshComponent_IsLastBrokenStep");
static_assert(offsetof(SHBreakableMeshComponent_IsLastBrokenStep, CheckedIndex) == 0x000000, "Member 'SHBreakableMeshComponent_IsLastBrokenStep::CheckedIndex' has a wrong offset!");
static_assert(offsetof(SHBreakableMeshComponent_IsLastBrokenStep, ReturnValue) == 0x000004, "Member 'SHBreakableMeshComponent_IsLastBrokenStep::ReturnValue' has a wrong offset!");

// Function SHProto.USHMariaPushComponent.CalculatePushedLoc
// 0x0048 (0x0048 - 0x0000)
struct USHMariaPushComponent_CalculatePushedLoc final
{
public:
	struct FVector                                PushingLoc;                                        // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PushingNormal;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(USHMariaPushComponent_CalculatePushedLoc) == 0x000008, "Wrong alignment on USHMariaPushComponent_CalculatePushedLoc");
static_assert(sizeof(USHMariaPushComponent_CalculatePushedLoc) == 0x000048, "Wrong size on USHMariaPushComponent_CalculatePushedLoc");
static_assert(offsetof(USHMariaPushComponent_CalculatePushedLoc, PushingLoc) == 0x000000, "Member 'USHMariaPushComponent_CalculatePushedLoc::PushingLoc' has a wrong offset!");
static_assert(offsetof(USHMariaPushComponent_CalculatePushedLoc, PushingNormal) == 0x000018, "Member 'USHMariaPushComponent_CalculatePushedLoc::PushingNormal' has a wrong offset!");
static_assert(offsetof(USHMariaPushComponent_CalculatePushedLoc, ReturnValue) == 0x000030, "Member 'USHMariaPushComponent_CalculatePushedLoc::ReturnValue' has a wrong offset!");

// Function SHProto.SHGameplayItemNotificationWidget.CanShowNotification
// 0x0001 (0x0001 - 0x0000)
struct SHGameplayItemNotificationWidget_CanShowNotification final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayItemNotificationWidget_CanShowNotification) == 0x000001, "Wrong alignment on SHGameplayItemNotificationWidget_CanShowNotification");
static_assert(sizeof(SHGameplayItemNotificationWidget_CanShowNotification) == 0x000001, "Wrong size on SHGameplayItemNotificationWidget_CanShowNotification");
static_assert(offsetof(SHGameplayItemNotificationWidget_CanShowNotification, ReturnValue) == 0x000000, "Member 'SHGameplayItemNotificationWidget_CanShowNotification::ReturnValue' has a wrong offset!");

// Function SHProto.SHCameraAnimationExecutive.SetActorToAttachTo
// 0x0008 (0x0008 - 0x0000)
struct SHCameraAnimationExecutive_SetActorToAttachTo final
{
public:
	class AActor*                                 InActorToAttachTo;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCameraAnimationExecutive_SetActorToAttachTo) == 0x000008, "Wrong alignment on SHCameraAnimationExecutive_SetActorToAttachTo");
static_assert(sizeof(SHCameraAnimationExecutive_SetActorToAttachTo) == 0x000008, "Wrong size on SHCameraAnimationExecutive_SetActorToAttachTo");
static_assert(offsetof(SHCameraAnimationExecutive_SetActorToAttachTo, InActorToAttachTo) == 0x000000, "Member 'SHCameraAnimationExecutive_SetActorToAttachTo::InActorToAttachTo' has a wrong offset!");

// Function SHProto.SHCameraAnimationExecutive.SetLockCharacterAttachment
// 0x0001 (0x0001 - 0x0000)
struct SHCameraAnimationExecutive_SetLockCharacterAttachment final
{
public:
	bool                                          InLockCharacterAttachment;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCameraAnimationExecutive_SetLockCharacterAttachment) == 0x000001, "Wrong alignment on SHCameraAnimationExecutive_SetLockCharacterAttachment");
static_assert(sizeof(SHCameraAnimationExecutive_SetLockCharacterAttachment) == 0x000001, "Wrong size on SHCameraAnimationExecutive_SetLockCharacterAttachment");
static_assert(offsetof(SHCameraAnimationExecutive_SetLockCharacterAttachment, InLockCharacterAttachment) == 0x000000, "Member 'SHCameraAnimationExecutive_SetLockCharacterAttachment::InLockCharacterAttachment' has a wrong offset!");

// Function SHProto.SHCameraAnimationExecutive.SetLockCharacterAttachmentTransform
// 0x0060 (0x0060 - 0x0000)
struct SHCameraAnimationExecutive_SetLockCharacterAttachmentTransform final
{
public:
	struct FTransform                             InTransform;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCameraAnimationExecutive_SetLockCharacterAttachmentTransform) == 0x000010, "Wrong alignment on SHCameraAnimationExecutive_SetLockCharacterAttachmentTransform");
static_assert(sizeof(SHCameraAnimationExecutive_SetLockCharacterAttachmentTransform) == 0x000060, "Wrong size on SHCameraAnimationExecutive_SetLockCharacterAttachmentTransform");
static_assert(offsetof(SHCameraAnimationExecutive_SetLockCharacterAttachmentTransform, InTransform) == 0x000000, "Member 'SHCameraAnimationExecutive_SetLockCharacterAttachmentTransform::InTransform' has a wrong offset!");

// Function SHProto.SHInteriorExteriorVolume.IsPointWithin
// 0x0020 (0x0020 - 0x0000)
struct SHInteriorExteriorVolume_IsPointWithin final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHInteriorExteriorVolume_IsPointWithin) == 0x000008, "Wrong alignment on SHInteriorExteriorVolume_IsPointWithin");
static_assert(sizeof(SHInteriorExteriorVolume_IsPointWithin) == 0x000020, "Wrong size on SHInteriorExteriorVolume_IsPointWithin");
static_assert(offsetof(SHInteriorExteriorVolume_IsPointWithin, Point) == 0x000000, "Member 'SHInteriorExteriorVolume_IsPointWithin::Point' has a wrong offset!");
static_assert(offsetof(SHInteriorExteriorVolume_IsPointWithin, ReturnValue) == 0x000018, "Member 'SHInteriorExteriorVolume_IsPointWithin::ReturnValue' has a wrong offset!");

// Function SHProto.SHCameraWorkStatics.CreateAndPlayCameraAnimation
// 0x0098 (0x0098 - 0x0000)
struct SHCameraWorkStatics_CreateAndPlayCameraAnimation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharacter*                             Character;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSHCameraAnimationData                 CameraAnimData;                                    // 0x0010(0x0080)(Parm, NativeAccessSpecifierPublic)
	class ASHCameraAnimationExecutive*            ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCameraWorkStatics_CreateAndPlayCameraAnimation) == 0x000008, "Wrong alignment on SHCameraWorkStatics_CreateAndPlayCameraAnimation");
static_assert(sizeof(SHCameraWorkStatics_CreateAndPlayCameraAnimation) == 0x000098, "Wrong size on SHCameraWorkStatics_CreateAndPlayCameraAnimation");
static_assert(offsetof(SHCameraWorkStatics_CreateAndPlayCameraAnimation, WorldContextObject) == 0x000000, "Member 'SHCameraWorkStatics_CreateAndPlayCameraAnimation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHCameraWorkStatics_CreateAndPlayCameraAnimation, Character) == 0x000008, "Member 'SHCameraWorkStatics_CreateAndPlayCameraAnimation::Character' has a wrong offset!");
static_assert(offsetof(SHCameraWorkStatics_CreateAndPlayCameraAnimation, CameraAnimData) == 0x000010, "Member 'SHCameraWorkStatics_CreateAndPlayCameraAnimation::CameraAnimData' has a wrong offset!");
static_assert(offsetof(SHCameraWorkStatics_CreateAndPlayCameraAnimation, ReturnValue) == 0x000090, "Member 'SHCameraWorkStatics_CreateAndPlayCameraAnimation::ReturnValue' has a wrong offset!");

// Function SHProto.SHCameraWorkStatics.CreateCameraAnimation
// 0x0090 (0x0090 - 0x0000)
struct SHCameraWorkStatics_CreateCameraAnimation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSHCameraAnimationData                 CameraAnimData;                                    // 0x0008(0x0080)(Parm, NativeAccessSpecifierPublic)
	class ASHCameraAnimationExecutive*            ReturnValue;                                       // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCameraWorkStatics_CreateCameraAnimation) == 0x000008, "Wrong alignment on SHCameraWorkStatics_CreateCameraAnimation");
static_assert(sizeof(SHCameraWorkStatics_CreateCameraAnimation) == 0x000090, "Wrong size on SHCameraWorkStatics_CreateCameraAnimation");
static_assert(offsetof(SHCameraWorkStatics_CreateCameraAnimation, WorldContextObject) == 0x000000, "Member 'SHCameraWorkStatics_CreateCameraAnimation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHCameraWorkStatics_CreateCameraAnimation, CameraAnimData) == 0x000008, "Member 'SHCameraWorkStatics_CreateCameraAnimation::CameraAnimData' has a wrong offset!");
static_assert(offsetof(SHCameraWorkStatics_CreateCameraAnimation, ReturnValue) == 0x000088, "Member 'SHCameraWorkStatics_CreateCameraAnimation::ReturnValue' has a wrong offset!");

// Function SHProto.SHCameraWorkStatics.GetCameraAnimTracks
// 0x0018 (0x0018 - 0x0000)
struct SHCameraWorkStatics_GetCameraAnimTracks final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMovieSceneTrack*>               ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCameraWorkStatics_GetCameraAnimTracks) == 0x000008, "Wrong alignment on SHCameraWorkStatics_GetCameraAnimTracks");
static_assert(sizeof(SHCameraWorkStatics_GetCameraAnimTracks) == 0x000018, "Wrong size on SHCameraWorkStatics_GetCameraAnimTracks");
static_assert(offsetof(SHCameraWorkStatics_GetCameraAnimTracks, Sequence) == 0x000000, "Member 'SHCameraWorkStatics_GetCameraAnimTracks::Sequence' has a wrong offset!");
static_assert(offsetof(SHCameraWorkStatics_GetCameraAnimTracks, ReturnValue) == 0x000008, "Member 'SHCameraWorkStatics_GetCameraAnimTracks::ReturnValue' has a wrong offset!");

// Function SHProto.SHCameraWorkStatics.GetCameraPath
// 0x0018 (0x0018 - 0x0000)
struct SHCameraWorkStatics_GetCameraPath final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCameraWorkStatics_GetCameraPath) == 0x000008, "Wrong alignment on SHCameraWorkStatics_GetCameraPath");
static_assert(sizeof(SHCameraWorkStatics_GetCameraPath) == 0x000018, "Wrong size on SHCameraWorkStatics_GetCameraPath");
static_assert(offsetof(SHCameraWorkStatics_GetCameraPath, Sequence) == 0x000000, "Member 'SHCameraWorkStatics_GetCameraPath::Sequence' has a wrong offset!");
static_assert(offsetof(SHCameraWorkStatics_GetCameraPath, ReturnValue) == 0x000008, "Member 'SHCameraWorkStatics_GetCameraPath::ReturnValue' has a wrong offset!");

// Function SHProto.SHCameraWorkStatics.PlayCameraAnimation
// 0x0098 (0x0098 - 0x0000)
struct SHCameraWorkStatics_PlayCameraAnimation final
{
public:
	class ASHCameraAnimationExecutive*            CameraAnimExe;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharacter*                             Character;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSHCameraAnimationData                 CameraAnimData;                                    // 0x0010(0x0080)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCameraWorkStatics_PlayCameraAnimation) == 0x000008, "Wrong alignment on SHCameraWorkStatics_PlayCameraAnimation");
static_assert(sizeof(SHCameraWorkStatics_PlayCameraAnimation) == 0x000098, "Wrong size on SHCameraWorkStatics_PlayCameraAnimation");
static_assert(offsetof(SHCameraWorkStatics_PlayCameraAnimation, CameraAnimExe) == 0x000000, "Member 'SHCameraWorkStatics_PlayCameraAnimation::CameraAnimExe' has a wrong offset!");
static_assert(offsetof(SHCameraWorkStatics_PlayCameraAnimation, Character) == 0x000008, "Member 'SHCameraWorkStatics_PlayCameraAnimation::Character' has a wrong offset!");
static_assert(offsetof(SHCameraWorkStatics_PlayCameraAnimation, CameraAnimData) == 0x000010, "Member 'SHCameraWorkStatics_PlayCameraAnimation::CameraAnimData' has a wrong offset!");
static_assert(offsetof(SHCameraWorkStatics_PlayCameraAnimation, ReturnValue) == 0x000090, "Member 'SHCameraWorkStatics_PlayCameraAnimation::ReturnValue' has a wrong offset!");

// Function SHProto.SHCameraWorkStatics.ValidateCameraAnimData
// 0x0088 (0x0088 - 0x0000)
struct SHCameraWorkStatics_ValidateCameraAnimData final
{
public:
	struct FSHCameraAnimationData                 CameraAnimData;                                    // 0x0000(0x0080)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCameraWorkStatics_ValidateCameraAnimData) == 0x000008, "Wrong alignment on SHCameraWorkStatics_ValidateCameraAnimData");
static_assert(sizeof(SHCameraWorkStatics_ValidateCameraAnimData) == 0x000088, "Wrong size on SHCameraWorkStatics_ValidateCameraAnimData");
static_assert(offsetof(SHCameraWorkStatics_ValidateCameraAnimData, CameraAnimData) == 0x000000, "Member 'SHCameraWorkStatics_ValidateCameraAnimData::CameraAnimData' has a wrong offset!");
static_assert(offsetof(SHCameraWorkStatics_ValidateCameraAnimData, ReturnValue) == 0x000080, "Member 'SHCameraWorkStatics_ValidateCameraAnimData::ReturnValue' has a wrong offset!");

// Function SHProto.SHCarMovementProcessor.SetTransmissionRatio
// 0x0004 (0x0004 - 0x0000)
struct SHCarMovementProcessor_SetTransmissionRatio final
{
public:
	float                                         InRatio;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCarMovementProcessor_SetTransmissionRatio) == 0x000004, "Wrong alignment on SHCarMovementProcessor_SetTransmissionRatio");
static_assert(sizeof(SHCarMovementProcessor_SetTransmissionRatio) == 0x000004, "Wrong size on SHCarMovementProcessor_SetTransmissionRatio");
static_assert(offsetof(SHCarMovementProcessor_SetTransmissionRatio, InRatio) == 0x000000, "Member 'SHCarMovementProcessor_SetTransmissionRatio::InRatio' has a wrong offset!");

// Function SHProto.SHCarMovementProcessor.GetEngineRevolutionsPerMinute
// 0x0004 (0x0004 - 0x0000)
struct SHCarMovementProcessor_GetEngineRevolutionsPerMinute final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCarMovementProcessor_GetEngineRevolutionsPerMinute) == 0x000004, "Wrong alignment on SHCarMovementProcessor_GetEngineRevolutionsPerMinute");
static_assert(sizeof(SHCarMovementProcessor_GetEngineRevolutionsPerMinute) == 0x000004, "Wrong size on SHCarMovementProcessor_GetEngineRevolutionsPerMinute");
static_assert(offsetof(SHCarMovementProcessor_GetEngineRevolutionsPerMinute, ReturnValue) == 0x000000, "Member 'SHCarMovementProcessor_GetEngineRevolutionsPerMinute::ReturnValue' has a wrong offset!");

// Function SHProto.SHCarMovementProcessor.GetRotationInput
// 0x0004 (0x0004 - 0x0000)
struct SHCarMovementProcessor_GetRotationInput final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCarMovementProcessor_GetRotationInput) == 0x000004, "Wrong alignment on SHCarMovementProcessor_GetRotationInput");
static_assert(sizeof(SHCarMovementProcessor_GetRotationInput) == 0x000004, "Wrong size on SHCarMovementProcessor_GetRotationInput");
static_assert(offsetof(SHCarMovementProcessor_GetRotationInput, ReturnValue) == 0x000000, "Member 'SHCarMovementProcessor_GetRotationInput::ReturnValue' has a wrong offset!");

// Function SHProto.SHInteraction.ProcessInput
// 0x0018 (0x0018 - 0x0000)
struct SHInteraction_ProcessInput final
{
public:
	struct FVector2D                              Input;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameBaseInputDevice                          InputDevice;                                       // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHInteraction_ProcessInput) == 0x000008, "Wrong alignment on SHInteraction_ProcessInput");
static_assert(sizeof(SHInteraction_ProcessInput) == 0x000018, "Wrong size on SHInteraction_ProcessInput");
static_assert(offsetof(SHInteraction_ProcessInput, Input) == 0x000000, "Member 'SHInteraction_ProcessInput::Input' has a wrong offset!");
static_assert(offsetof(SHInteraction_ProcessInput, InputDevice) == 0x000010, "Member 'SHInteraction_ProcessInput::InputDevice' has a wrong offset!");

// Function SHProto.SHInteraction.TryStartInteraction
// 0x0018 (0x0018 - 0x0000)
struct SHInteraction_TryStartInteraction final
{
public:
	TScriptInterface<class ISHInteractionSlot>    InteractionSlot;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHInteraction_TryStartInteraction) == 0x000008, "Wrong alignment on SHInteraction_TryStartInteraction");
static_assert(sizeof(SHInteraction_TryStartInteraction) == 0x000018, "Wrong size on SHInteraction_TryStartInteraction");
static_assert(offsetof(SHInteraction_TryStartInteraction, InteractionSlot) == 0x000000, "Member 'SHInteraction_TryStartInteraction::InteractionSlot' has a wrong offset!");
static_assert(offsetof(SHInteraction_TryStartInteraction, ReturnValue) == 0x000010, "Member 'SHInteraction_TryStartInteraction::ReturnValue' has a wrong offset!");

// Function SHProto.SHInteraction.GetCleanupConfig
// 0x0014 (0x0014 - 0x0000)
struct SHInteraction_GetCleanupConfig final
{
public:
	struct FSHManagedInteractionSlotCleanupConfig ReturnValue;                                       // 0x0000(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteraction_GetCleanupConfig) == 0x000004, "Wrong alignment on SHInteraction_GetCleanupConfig");
static_assert(sizeof(SHInteraction_GetCleanupConfig) == 0x000014, "Wrong size on SHInteraction_GetCleanupConfig");
static_assert(offsetof(SHInteraction_GetCleanupConfig, ReturnValue) == 0x000000, "Member 'SHInteraction_GetCleanupConfig::ReturnValue' has a wrong offset!");

// Function SHProto.SHInteraction.IsInteractionActive
// 0x0001 (0x0001 - 0x0000)
struct SHInteraction_IsInteractionActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteraction_IsInteractionActive) == 0x000001, "Wrong alignment on SHInteraction_IsInteractionActive");
static_assert(sizeof(SHInteraction_IsInteractionActive) == 0x000001, "Wrong size on SHInteraction_IsInteractionActive");
static_assert(offsetof(SHInteraction_IsInteractionActive, ReturnValue) == 0x000000, "Member 'SHInteraction_IsInteractionActive::ReturnValue' has a wrong offset!");

// Function SHProto.SHInteraction.IsOverridingCleanupConfig
// 0x0001 (0x0001 - 0x0000)
struct SHInteraction_IsOverridingCleanupConfig final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteraction_IsOverridingCleanupConfig) == 0x000001, "Wrong alignment on SHInteraction_IsOverridingCleanupConfig");
static_assert(sizeof(SHInteraction_IsOverridingCleanupConfig) == 0x000001, "Wrong size on SHInteraction_IsOverridingCleanupConfig");
static_assert(offsetof(SHInteraction_IsOverridingCleanupConfig, ReturnValue) == 0x000000, "Member 'SHInteraction_IsOverridingCleanupConfig::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayAnimComponent.SHDebug_Character_AimOffset_Enabled
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayAnimComponent_SHDebug_Character_AimOffset_Enabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayAnimComponent_SHDebug_Character_AimOffset_Enabled) == 0x000001, "Wrong alignment on SHCharacterPlayAnimComponent_SHDebug_Character_AimOffset_Enabled");
static_assert(sizeof(SHCharacterPlayAnimComponent_SHDebug_Character_AimOffset_Enabled) == 0x000001, "Wrong size on SHCharacterPlayAnimComponent_SHDebug_Character_AimOffset_Enabled");
static_assert(offsetof(SHCharacterPlayAnimComponent_SHDebug_Character_AimOffset_Enabled, Enabled) == 0x000000, "Member 'SHCharacterPlayAnimComponent_SHDebug_Character_AimOffset_Enabled::Enabled' has a wrong offset!");

// Function SHProto.SHCharacterPlayAnimComponent.ForceTposeDebug
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayAnimComponent_ForceTposeDebug final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayAnimComponent_ForceTposeDebug) == 0x000001, "Wrong alignment on SHCharacterPlayAnimComponent_ForceTposeDebug");
static_assert(sizeof(SHCharacterPlayAnimComponent_ForceTposeDebug) == 0x000001, "Wrong size on SHCharacterPlayAnimComponent_ForceTposeDebug");
static_assert(offsetof(SHCharacterPlayAnimComponent_ForceTposeDebug, ReturnValue) == 0x000000, "Member 'SHCharacterPlayAnimComponent_ForceTposeDebug::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayAnimComponent.GetAimRotation
// 0x0018 (0x0018 - 0x0000)
struct SHCharacterPlayAnimComponent_GetAimRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayAnimComponent_GetAimRotation) == 0x000008, "Wrong alignment on SHCharacterPlayAnimComponent_GetAimRotation");
static_assert(sizeof(SHCharacterPlayAnimComponent_GetAimRotation) == 0x000018, "Wrong size on SHCharacterPlayAnimComponent_GetAimRotation");
static_assert(offsetof(SHCharacterPlayAnimComponent_GetAimRotation, ReturnValue) == 0x000000, "Member 'SHCharacterPlayAnimComponent_GetAimRotation::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayAnimComponent.GetCurrentRotationSpeed
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayAnimComponent_GetCurrentRotationSpeed final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayAnimComponent_GetCurrentRotationSpeed) == 0x000008, "Wrong alignment on SHCharacterPlayAnimComponent_GetCurrentRotationSpeed");
static_assert(sizeof(SHCharacterPlayAnimComponent_GetCurrentRotationSpeed) == 0x000010, "Wrong size on SHCharacterPlayAnimComponent_GetCurrentRotationSpeed");
static_assert(offsetof(SHCharacterPlayAnimComponent_GetCurrentRotationSpeed, ReturnValue) == 0x000000, "Member 'SHCharacterPlayAnimComponent_GetCurrentRotationSpeed::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayAnimComponent.GetHealthStateAsMontageBlendspaceInput
// 0x0018 (0x0018 - 0x0000)
struct SHCharacterPlayAnimComponent_GetHealthStateAsMontageBlendspaceInput final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayAnimComponent_GetHealthStateAsMontageBlendspaceInput) == 0x000008, "Wrong alignment on SHCharacterPlayAnimComponent_GetHealthStateAsMontageBlendspaceInput");
static_assert(sizeof(SHCharacterPlayAnimComponent_GetHealthStateAsMontageBlendspaceInput) == 0x000018, "Wrong size on SHCharacterPlayAnimComponent_GetHealthStateAsMontageBlendspaceInput");
static_assert(offsetof(SHCharacterPlayAnimComponent_GetHealthStateAsMontageBlendspaceInput, ReturnValue) == 0x000000, "Member 'SHCharacterPlayAnimComponent_GetHealthStateAsMontageBlendspaceInput::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayAnimComponent.IsAlive
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayAnimComponent_IsAlive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayAnimComponent_IsAlive) == 0x000001, "Wrong alignment on SHCharacterPlayAnimComponent_IsAlive");
static_assert(sizeof(SHCharacterPlayAnimComponent_IsAlive) == 0x000001, "Wrong size on SHCharacterPlayAnimComponent_IsAlive");
static_assert(offsetof(SHCharacterPlayAnimComponent_IsAlive, ReturnValue) == 0x000000, "Member 'SHCharacterPlayAnimComponent_IsAlive::ReturnValue' has a wrong offset!");

// Function SHProto.SHMaryAnimComponent.SetMaryMovementState
// 0x0002 (0x0002 - 0x0000)
struct SHMaryAnimComponent_SetMaryMovementState final
{
public:
	ESHMaryAnimInstanceMovementState              InMovementState;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InMovementChangeInProgress;                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMaryAnimComponent_SetMaryMovementState) == 0x000001, "Wrong alignment on SHMaryAnimComponent_SetMaryMovementState");
static_assert(sizeof(SHMaryAnimComponent_SetMaryMovementState) == 0x000002, "Wrong size on SHMaryAnimComponent_SetMaryMovementState");
static_assert(offsetof(SHMaryAnimComponent_SetMaryMovementState, InMovementState) == 0x000000, "Member 'SHMaryAnimComponent_SetMaryMovementState::InMovementState' has a wrong offset!");
static_assert(offsetof(SHMaryAnimComponent_SetMaryMovementState, InMovementChangeInProgress) == 0x000001, "Member 'SHMaryAnimComponent_SetMaryMovementState::InMovementChangeInProgress' has a wrong offset!");

// Function SHProto.SHCharacterPlayBreathNoiseComponent.IsHoldingBreath
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayBreathNoiseComponent_IsHoldingBreath final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayBreathNoiseComponent_IsHoldingBreath) == 0x000001, "Wrong alignment on SHCharacterPlayBreathNoiseComponent_IsHoldingBreath");
static_assert(sizeof(SHCharacterPlayBreathNoiseComponent_IsHoldingBreath) == 0x000001, "Wrong size on SHCharacterPlayBreathNoiseComponent_IsHoldingBreath");
static_assert(offsetof(SHCharacterPlayBreathNoiseComponent_IsHoldingBreath, ReturnValue) == 0x000000, "Member 'SHCharacterPlayBreathNoiseComponent_IsHoldingBreath::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemWeapon.SetMeshHidden
// 0x0010 (0x0010 - 0x0000)
struct SHItemWeapon_SetMeshHidden final
{
public:
	bool                                          InWantHidden;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemWeapon_SetMeshHidden) == 0x000008, "Wrong alignment on SHItemWeapon_SetMeshHidden");
static_assert(sizeof(SHItemWeapon_SetMeshHidden) == 0x000010, "Wrong size on SHItemWeapon_SetMeshHidden");
static_assert(offsetof(SHItemWeapon_SetMeshHidden, InWantHidden) == 0x000000, "Member 'SHItemWeapon_SetMeshHidden::InWantHidden' has a wrong offset!");
static_assert(offsetof(SHItemWeapon_SetMeshHidden, Object) == 0x000008, "Member 'SHItemWeapon_SetMeshHidden::Object' has a wrong offset!");

// Function SHProto.SHItemWeapon.HasEnabledAnyDebug
// 0x0001 (0x0001 - 0x0000)
struct SHItemWeapon_HasEnabledAnyDebug final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemWeapon_HasEnabledAnyDebug) == 0x000001, "Wrong alignment on SHItemWeapon_HasEnabledAnyDebug");
static_assert(sizeof(SHItemWeapon_HasEnabledAnyDebug) == 0x000001, "Wrong size on SHItemWeapon_HasEnabledAnyDebug");
static_assert(offsetof(SHItemWeapon_HasEnabledAnyDebug, ReturnValue) == 0x000000, "Member 'SHItemWeapon_HasEnabledAnyDebug::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemWeapon.IsMeshHidden
// 0x0001 (0x0001 - 0x0000)
struct SHItemWeapon_IsMeshHidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemWeapon_IsMeshHidden) == 0x000001, "Wrong alignment on SHItemWeapon_IsMeshHidden");
static_assert(sizeof(SHItemWeapon_IsMeshHidden) == 0x000001, "Wrong size on SHItemWeapon_IsMeshHidden");
static_assert(offsetof(SHItemWeapon_IsMeshHidden, ReturnValue) == 0x000000, "Member 'SHItemWeapon_IsMeshHidden::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemWeaponRanged.DrawAimDetailedDebug
// 0x0004 (0x0004 - 0x0000)
struct SHItemWeaponRanged_DrawAimDetailedDebug final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemWeaponRanged_DrawAimDetailedDebug) == 0x000004, "Wrong alignment on SHItemWeaponRanged_DrawAimDetailedDebug");
static_assert(sizeof(SHItemWeaponRanged_DrawAimDetailedDebug) == 0x000004, "Wrong size on SHItemWeaponRanged_DrawAimDetailedDebug");
static_assert(offsetof(SHItemWeaponRanged_DrawAimDetailedDebug, DeltaTime) == 0x000000, "Member 'SHItemWeaponRanged_DrawAimDetailedDebug::DeltaTime' has a wrong offset!");

// Function SHProto.SHItemWeaponRanged.OnFirePerformed
// 0x0018 (0x0018 - 0x0000)
struct SHItemWeaponRanged_OnFirePerformed final
{
public:
	struct FVector                                ShootEndWorldLoc;                                  // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemWeaponRanged_OnFirePerformed) == 0x000008, "Wrong alignment on SHItemWeaponRanged_OnFirePerformed");
static_assert(sizeof(SHItemWeaponRanged_OnFirePerformed) == 0x000018, "Wrong size on SHItemWeaponRanged_OnFirePerformed");
static_assert(offsetof(SHItemWeaponRanged_OnFirePerformed, ShootEndWorldLoc) == 0x000000, "Member 'SHItemWeaponRanged_OnFirePerformed::ShootEndWorldLoc' has a wrong offset!");

// Function SHProto.SHItemWeaponRanged.OnFireSpreadPerformed
// 0x0010 (0x0010 - 0x0000)
struct SHItemWeaponRanged_OnFireSpreadPerformed final
{
public:
	TArray<struct FVector>                        ShootsHitLoc;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemWeaponRanged_OnFireSpreadPerformed) == 0x000008, "Wrong alignment on SHItemWeaponRanged_OnFireSpreadPerformed");
static_assert(sizeof(SHItemWeaponRanged_OnFireSpreadPerformed) == 0x000010, "Wrong size on SHItemWeaponRanged_OnFireSpreadPerformed");
static_assert(offsetof(SHItemWeaponRanged_OnFireSpreadPerformed, ShootsHitLoc) == 0x000000, "Member 'SHItemWeaponRanged_OnFireSpreadPerformed::ShootsHitLoc' has a wrong offset!");

// Function SHProto.SHItemWeaponRanged.RegisterFirePoint
// 0x0008 (0x0008 - 0x0000)
struct SHItemWeaponRanged_RegisterFirePoint final
{
public:
	class USceneComponent*                        InPoint;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemWeaponRanged_RegisterFirePoint) == 0x000008, "Wrong alignment on SHItemWeaponRanged_RegisterFirePoint");
static_assert(sizeof(SHItemWeaponRanged_RegisterFirePoint) == 0x000008, "Wrong size on SHItemWeaponRanged_RegisterFirePoint");
static_assert(offsetof(SHItemWeaponRanged_RegisterFirePoint, InPoint) == 0x000000, "Member 'SHItemWeaponRanged_RegisterFirePoint::InPoint' has a wrong offset!");

// Function SHProto.SHItemWeaponRanged.TracePerfectForPointingData
// 0x0010 (0x0010 - 0x0000)
struct SHItemWeaponRanged_TracePerfectForPointingData final
{
public:
	bool                                          bForceRefresh;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSHWeaponRangedPointingData            ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemWeaponRanged_TracePerfectForPointingData) == 0x000004, "Wrong alignment on SHItemWeaponRanged_TracePerfectForPointingData");
static_assert(sizeof(SHItemWeaponRanged_TracePerfectForPointingData) == 0x000010, "Wrong size on SHItemWeaponRanged_TracePerfectForPointingData");
static_assert(offsetof(SHItemWeaponRanged_TracePerfectForPointingData, bForceRefresh) == 0x000000, "Member 'SHItemWeaponRanged_TracePerfectForPointingData::bForceRefresh' has a wrong offset!");
static_assert(offsetof(SHItemWeaponRanged_TracePerfectForPointingData, ReturnValue) == 0x000004, "Member 'SHItemWeaponRanged_TracePerfectForPointingData::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemWeaponRanged.CanBeReloaded
// 0x0001 (0x0001 - 0x0000)
struct SHItemWeaponRanged_CanBeReloaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemWeaponRanged_CanBeReloaded) == 0x000001, "Wrong alignment on SHItemWeaponRanged_CanBeReloaded");
static_assert(sizeof(SHItemWeaponRanged_CanBeReloaded) == 0x000001, "Wrong size on SHItemWeaponRanged_CanBeReloaded");
static_assert(offsetof(SHItemWeaponRanged_CanBeReloaded, ReturnValue) == 0x000000, "Member 'SHItemWeaponRanged_CanBeReloaded::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemWeaponRanged.GetCachedPerfectTraceCachedData
// 0x000C (0x000C - 0x0000)
struct SHItemWeaponRanged_GetCachedPerfectTraceCachedData final
{
public:
	struct FSHWeaponRangedPointingData            ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemWeaponRanged_GetCachedPerfectTraceCachedData) == 0x000004, "Wrong alignment on SHItemWeaponRanged_GetCachedPerfectTraceCachedData");
static_assert(sizeof(SHItemWeaponRanged_GetCachedPerfectTraceCachedData) == 0x00000C, "Wrong size on SHItemWeaponRanged_GetCachedPerfectTraceCachedData");
static_assert(offsetof(SHItemWeaponRanged_GetCachedPerfectTraceCachedData, ReturnValue) == 0x000000, "Member 'SHItemWeaponRanged_GetCachedPerfectTraceCachedData::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemWeaponRanged.GetEndTraceLoc
// 0x0030 (0x0030 - 0x0000)
struct SHItemWeaponRanged_GetEndTraceLoc final
{
public:
	float                                         ShootAngle;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SpreadAngles;                                      // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemWeaponRanged_GetEndTraceLoc) == 0x000008, "Wrong alignment on SHItemWeaponRanged_GetEndTraceLoc");
static_assert(sizeof(SHItemWeaponRanged_GetEndTraceLoc) == 0x000030, "Wrong size on SHItemWeaponRanged_GetEndTraceLoc");
static_assert(offsetof(SHItemWeaponRanged_GetEndTraceLoc, ShootAngle) == 0x000000, "Member 'SHItemWeaponRanged_GetEndTraceLoc::ShootAngle' has a wrong offset!");
static_assert(offsetof(SHItemWeaponRanged_GetEndTraceLoc, SpreadAngles) == 0x000008, "Member 'SHItemWeaponRanged_GetEndTraceLoc::SpreadAngles' has a wrong offset!");
static_assert(offsetof(SHItemWeaponRanged_GetEndTraceLoc, ReturnValue) == 0x000018, "Member 'SHItemWeaponRanged_GetEndTraceLoc::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemWeaponRanged.GetFocusValue
// 0x0004 (0x0004 - 0x0000)
struct SHItemWeaponRanged_GetFocusValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemWeaponRanged_GetFocusValue) == 0x000004, "Wrong alignment on SHItemWeaponRanged_GetFocusValue");
static_assert(sizeof(SHItemWeaponRanged_GetFocusValue) == 0x000004, "Wrong size on SHItemWeaponRanged_GetFocusValue");
static_assert(offsetof(SHItemWeaponRanged_GetFocusValue, ReturnValue) == 0x000000, "Member 'SHItemWeaponRanged_GetFocusValue::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemWeaponRanged.GetPerfectShootVector
// 0x0018 (0x0018 - 0x0000)
struct SHItemWeaponRanged_GetPerfectShootVector final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemWeaponRanged_GetPerfectShootVector) == 0x000008, "Wrong alignment on SHItemWeaponRanged_GetPerfectShootVector");
static_assert(sizeof(SHItemWeaponRanged_GetPerfectShootVector) == 0x000018, "Wrong size on SHItemWeaponRanged_GetPerfectShootVector");
static_assert(offsetof(SHItemWeaponRanged_GetPerfectShootVector, ReturnValue) == 0x000000, "Member 'SHItemWeaponRanged_GetPerfectShootVector::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemWeaponRanged.GetRandomEndTraceLoc
// 0x0018 (0x0018 - 0x0000)
struct SHItemWeaponRanged_GetRandomEndTraceLoc final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemWeaponRanged_GetRandomEndTraceLoc) == 0x000008, "Wrong alignment on SHItemWeaponRanged_GetRandomEndTraceLoc");
static_assert(sizeof(SHItemWeaponRanged_GetRandomEndTraceLoc) == 0x000018, "Wrong size on SHItemWeaponRanged_GetRandomEndTraceLoc");
static_assert(offsetof(SHItemWeaponRanged_GetRandomEndTraceLoc, ReturnValue) == 0x000000, "Member 'SHItemWeaponRanged_GetRandomEndTraceLoc::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemWeaponRanged.GetSpreadShootVector
// 0x0028 (0x0028 - 0x0000)
struct SHItemWeaponRanged_GetSpreadShootVector final
{
public:
	struct FVector2D                              SpreadAngles;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemWeaponRanged_GetSpreadShootVector) == 0x000008, "Wrong alignment on SHItemWeaponRanged_GetSpreadShootVector");
static_assert(sizeof(SHItemWeaponRanged_GetSpreadShootVector) == 0x000028, "Wrong size on SHItemWeaponRanged_GetSpreadShootVector");
static_assert(offsetof(SHItemWeaponRanged_GetSpreadShootVector, SpreadAngles) == 0x000000, "Member 'SHItemWeaponRanged_GetSpreadShootVector::SpreadAngles' has a wrong offset!");
static_assert(offsetof(SHItemWeaponRanged_GetSpreadShootVector, ReturnValue) == 0x000010, "Member 'SHItemWeaponRanged_GetSpreadShootVector::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemWeaponRanged.GetStartTraceLoc
// 0x0018 (0x0018 - 0x0000)
struct SHItemWeaponRanged_GetStartTraceLoc final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemWeaponRanged_GetStartTraceLoc) == 0x000008, "Wrong alignment on SHItemWeaponRanged_GetStartTraceLoc");
static_assert(sizeof(SHItemWeaponRanged_GetStartTraceLoc) == 0x000018, "Wrong size on SHItemWeaponRanged_GetStartTraceLoc");
static_assert(offsetof(SHItemWeaponRanged_GetStartTraceLoc, ReturnValue) == 0x000000, "Member 'SHItemWeaponRanged_GetStartTraceLoc::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemWeaponRanged.HasAnyAmmoInClip
// 0x0001 (0x0001 - 0x0000)
struct SHItemWeaponRanged_HasAnyAmmoInClip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemWeaponRanged_HasAnyAmmoInClip) == 0x000001, "Wrong alignment on SHItemWeaponRanged_HasAnyAmmoInClip");
static_assert(sizeof(SHItemWeaponRanged_HasAnyAmmoInClip) == 0x000001, "Wrong size on SHItemWeaponRanged_HasAnyAmmoInClip");
static_assert(offsetof(SHItemWeaponRanged_HasAnyAmmoInClip, ReturnValue) == 0x000000, "Member 'SHItemWeaponRanged_HasAnyAmmoInClip::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemWeaponRanged.HasWeaponAmmoInInventory
// 0x0001 (0x0001 - 0x0000)
struct SHItemWeaponRanged_HasWeaponAmmoInInventory final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemWeaponRanged_HasWeaponAmmoInInventory) == 0x000001, "Wrong alignment on SHItemWeaponRanged_HasWeaponAmmoInInventory");
static_assert(sizeof(SHItemWeaponRanged_HasWeaponAmmoInInventory) == 0x000001, "Wrong size on SHItemWeaponRanged_HasWeaponAmmoInInventory");
static_assert(offsetof(SHItemWeaponRanged_HasWeaponAmmoInInventory, ReturnValue) == 0x000000, "Member 'SHItemWeaponRanged_HasWeaponAmmoInInventory::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemWeaponRanged.IsFireReady
// 0x0001 (0x0001 - 0x0000)
struct SHItemWeaponRanged_IsFireReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemWeaponRanged_IsFireReady) == 0x000001, "Wrong alignment on SHItemWeaponRanged_IsFireReady");
static_assert(sizeof(SHItemWeaponRanged_IsFireReady) == 0x000001, "Wrong size on SHItemWeaponRanged_IsFireReady");
static_assert(offsetof(SHItemWeaponRanged_IsFireReady, ReturnValue) == 0x000000, "Member 'SHItemWeaponRanged_IsFireReady::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayCombatComponent.ReceiveDamage
// 0x0038 (0x0038 - 0x0000)
struct SHCharacterPlayCombatComponent_ReceiveDamage final
{
public:
	float                                         DamageValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitDirection;                                      // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                DamageType;                                        // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCharacterPlayCombatComponent_ReceiveDamage) == 0x000008, "Wrong alignment on SHCharacterPlayCombatComponent_ReceiveDamage");
static_assert(sizeof(SHCharacterPlayCombatComponent_ReceiveDamage) == 0x000038, "Wrong size on SHCharacterPlayCombatComponent_ReceiveDamage");
static_assert(offsetof(SHCharacterPlayCombatComponent_ReceiveDamage, DamageValue) == 0x000000, "Member 'SHCharacterPlayCombatComponent_ReceiveDamage::DamageValue' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayCombatComponent_ReceiveDamage, Object) == 0x000008, "Member 'SHCharacterPlayCombatComponent_ReceiveDamage::Object' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayCombatComponent_ReceiveDamage, HitDirection) == 0x000010, "Member 'SHCharacterPlayCombatComponent_ReceiveDamage::HitDirection' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayCombatComponent_ReceiveDamage, DamageType) == 0x000028, "Member 'SHCharacterPlayCombatComponent_ReceiveDamage::DamageType' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayCombatComponent_ReceiveDamage, ReturnValue) == 0x000030, "Member 'SHCharacterPlayCombatComponent_ReceiveDamage::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayCombatComponent.SetAllCombatBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayCombatComponent_SetAllCombatBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayCombatComponent_SetAllCombatBlocked) == 0x000008, "Wrong alignment on SHCharacterPlayCombatComponent_SetAllCombatBlocked");
static_assert(sizeof(SHCharacterPlayCombatComponent_SetAllCombatBlocked) == 0x000010, "Wrong size on SHCharacterPlayCombatComponent_SetAllCombatBlocked");
static_assert(offsetof(SHCharacterPlayCombatComponent_SetAllCombatBlocked, Blocked) == 0x000000, "Member 'SHCharacterPlayCombatComponent_SetAllCombatBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayCombatComponent_SetAllCombatBlocked, Object) == 0x000008, "Member 'SHCharacterPlayCombatComponent_SetAllCombatBlocked::Object' has a wrong offset!");

// DelegateFunction SHProto.SHCharacterPlayCombatComponent.SHCombatComponentEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHCharacterPlayCombatComponent_SHCombatComponentEvent__DelegateSignature final
{
public:
	class USHCharacterPlayCombatComponent*        ComponentPtr;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayCombatComponent_SHCombatComponentEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHCharacterPlayCombatComponent_SHCombatComponentEvent__DelegateSignature");
static_assert(sizeof(SHCharacterPlayCombatComponent_SHCombatComponentEvent__DelegateSignature) == 0x000008, "Wrong size on SHCharacterPlayCombatComponent_SHCombatComponentEvent__DelegateSignature");
static_assert(offsetof(SHCharacterPlayCombatComponent_SHCombatComponentEvent__DelegateSignature, ComponentPtr) == 0x000000, "Member 'SHCharacterPlayCombatComponent_SHCombatComponentEvent__DelegateSignature::ComponentPtr' has a wrong offset!");

// Function SHProto.SHCharacterPlayCombatComponent.SynchroReceiveDamage
// 0x00C0 (0x00C0 - 0x0000)
struct SHCharacterPlayCombatComponent_SynchroReceiveDamage final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayAnimationData                     AnimData;                                          // 0x0008(0x00B0)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCharacterPlayCombatComponent_SynchroReceiveDamage) == 0x000008, "Wrong alignment on SHCharacterPlayCombatComponent_SynchroReceiveDamage");
static_assert(sizeof(SHCharacterPlayCombatComponent_SynchroReceiveDamage) == 0x0000C0, "Wrong size on SHCharacterPlayCombatComponent_SynchroReceiveDamage");
static_assert(offsetof(SHCharacterPlayCombatComponent_SynchroReceiveDamage, Object) == 0x000000, "Member 'SHCharacterPlayCombatComponent_SynchroReceiveDamage::Object' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayCombatComponent_SynchroReceiveDamage, AnimData) == 0x000008, "Member 'SHCharacterPlayCombatComponent_SynchroReceiveDamage::AnimData' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayCombatComponent_SynchroReceiveDamage, ReturnValue) == 0x0000B8, "Member 'SHCharacterPlayCombatComponent_SynchroReceiveDamage::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayCombatComponent.FindSubcomponentByClass
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayCombatComponent_FindSubcomponentByClass final
{
public:
	TSubclassOf<class USHCombatSubcomponentBase>  SubcomponentClass;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USHCombatSubcomponentBase*              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayCombatComponent_FindSubcomponentByClass) == 0x000008, "Wrong alignment on SHCharacterPlayCombatComponent_FindSubcomponentByClass");
static_assert(sizeof(SHCharacterPlayCombatComponent_FindSubcomponentByClass) == 0x000010, "Wrong size on SHCharacterPlayCombatComponent_FindSubcomponentByClass");
static_assert(offsetof(SHCharacterPlayCombatComponent_FindSubcomponentByClass, SubcomponentClass) == 0x000000, "Member 'SHCharacterPlayCombatComponent_FindSubcomponentByClass::SubcomponentClass' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayCombatComponent_FindSubcomponentByClass, ReturnValue) == 0x000008, "Member 'SHCharacterPlayCombatComponent_FindSubcomponentByClass::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayCombatComponent.GetCombatInputMode
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayCombatComponent_GetCombatInputMode final
{
public:
	ESHCombatInputModeEnum                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayCombatComponent_GetCombatInputMode) == 0x000001, "Wrong alignment on SHCharacterPlayCombatComponent_GetCombatInputMode");
static_assert(sizeof(SHCharacterPlayCombatComponent_GetCombatInputMode) == 0x000001, "Wrong size on SHCharacterPlayCombatComponent_GetCombatInputMode");
static_assert(offsetof(SHCharacterPlayCombatComponent_GetCombatInputMode, ReturnValue) == 0x000000, "Member 'SHCharacterPlayCombatComponent_GetCombatInputMode::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayCombatComponent.GetCombatPose
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayCombatComponent_GetCombatPose final
{
public:
	ESHCombatPoseType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayCombatComponent_GetCombatPose) == 0x000001, "Wrong alignment on SHCharacterPlayCombatComponent_GetCombatPose");
static_assert(sizeof(SHCharacterPlayCombatComponent_GetCombatPose) == 0x000001, "Wrong size on SHCharacterPlayCombatComponent_GetCombatPose");
static_assert(offsetof(SHCharacterPlayCombatComponent_GetCombatPose, ReturnValue) == 0x000000, "Member 'SHCharacterPlayCombatComponent_GetCombatPose::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayCombatComponent.GetDrawDebug
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayCombatComponent_GetDrawDebug final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayCombatComponent_GetDrawDebug) == 0x000001, "Wrong alignment on SHCharacterPlayCombatComponent_GetDrawDebug");
static_assert(sizeof(SHCharacterPlayCombatComponent_GetDrawDebug) == 0x000001, "Wrong size on SHCharacterPlayCombatComponent_GetDrawDebug");
static_assert(offsetof(SHCharacterPlayCombatComponent_GetDrawDebug, ReturnValue) == 0x000000, "Member 'SHCharacterPlayCombatComponent_GetDrawDebug::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayCombatComponent.IsAllCombatBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayCombatComponent_IsAllCombatBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayCombatComponent_IsAllCombatBlocked) == 0x000001, "Wrong alignment on SHCharacterPlayCombatComponent_IsAllCombatBlocked");
static_assert(sizeof(SHCharacterPlayCombatComponent_IsAllCombatBlocked) == 0x000001, "Wrong size on SHCharacterPlayCombatComponent_IsAllCombatBlocked");
static_assert(offsetof(SHCharacterPlayCombatComponent_IsAllCombatBlocked, ReturnValue) == 0x000000, "Member 'SHCharacterPlayCombatComponent_IsAllCombatBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayDLCSkinStaticMeshComponent.SetShouldBeHidden
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayDLCSkinStaticMeshComponent_SetShouldBeHidden final
{
public:
	bool                                          bInHidden;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayDLCSkinStaticMeshComponent_SetShouldBeHidden) == 0x000008, "Wrong alignment on SHCharacterPlayDLCSkinStaticMeshComponent_SetShouldBeHidden");
static_assert(sizeof(SHCharacterPlayDLCSkinStaticMeshComponent_SetShouldBeHidden) == 0x000010, "Wrong size on SHCharacterPlayDLCSkinStaticMeshComponent_SetShouldBeHidden");
static_assert(offsetof(SHCharacterPlayDLCSkinStaticMeshComponent_SetShouldBeHidden, bInHidden) == 0x000000, "Member 'SHCharacterPlayDLCSkinStaticMeshComponent_SetShouldBeHidden::bInHidden' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayDLCSkinStaticMeshComponent_SetShouldBeHidden, Object) == 0x000008, "Member 'SHCharacterPlayDLCSkinStaticMeshComponent_SetShouldBeHidden::Object' has a wrong offset!");

// Function SHProto.SHCharacterPlayDLCSkinStaticMeshComponent.ShouldBeHidden
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayDLCSkinStaticMeshComponent_ShouldBeHidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayDLCSkinStaticMeshComponent_ShouldBeHidden) == 0x000001, "Wrong alignment on SHCharacterPlayDLCSkinStaticMeshComponent_ShouldBeHidden");
static_assert(sizeof(SHCharacterPlayDLCSkinStaticMeshComponent_ShouldBeHidden) == 0x000001, "Wrong size on SHCharacterPlayDLCSkinStaticMeshComponent_ShouldBeHidden");
static_assert(offsetof(SHCharacterPlayDLCSkinStaticMeshComponent_ShouldBeHidden, ReturnValue) == 0x000000, "Member 'SHCharacterPlayDLCSkinStaticMeshComponent_ShouldBeHidden::ReturnValue' has a wrong offset!");

// Function SHProto.SHFleshLipAnimInstance.K2_OnFleshLipTransformationStateChanged
// 0x0001 (0x0001 - 0x0000)
struct SHFleshLipAnimInstance_K2_OnFleshLipTransformationStateChanged final
{
public:
	ESHFleshLipAnimInstanceTransformationState    InTransformedInto;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipAnimInstance_K2_OnFleshLipTransformationStateChanged) == 0x000001, "Wrong alignment on SHFleshLipAnimInstance_K2_OnFleshLipTransformationStateChanged");
static_assert(sizeof(SHFleshLipAnimInstance_K2_OnFleshLipTransformationStateChanged) == 0x000001, "Wrong size on SHFleshLipAnimInstance_K2_OnFleshLipTransformationStateChanged");
static_assert(offsetof(SHFleshLipAnimInstance_K2_OnFleshLipTransformationStateChanged, InTransformedInto) == 0x000000, "Member 'SHFleshLipAnimInstance_K2_OnFleshLipTransformationStateChanged::InTransformedInto' has a wrong offset!");

// Function SHProto.SHFleshLipAnimInstance.GetActiveFleshLipLocomotionAnimInstance
// 0x0008 (0x0008 - 0x0000)
struct SHFleshLipAnimInstance_GetActiveFleshLipLocomotionAnimInstance final
{
public:
	class USHFleshLipLocomotionAnimInstance*      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipAnimInstance_GetActiveFleshLipLocomotionAnimInstance) == 0x000008, "Wrong alignment on SHFleshLipAnimInstance_GetActiveFleshLipLocomotionAnimInstance");
static_assert(sizeof(SHFleshLipAnimInstance_GetActiveFleshLipLocomotionAnimInstance) == 0x000008, "Wrong size on SHFleshLipAnimInstance_GetActiveFleshLipLocomotionAnimInstance");
static_assert(offsetof(SHFleshLipAnimInstance_GetActiveFleshLipLocomotionAnimInstance, ReturnValue) == 0x000000, "Member 'SHFleshLipAnimInstance_GetActiveFleshLipLocomotionAnimInstance::ReturnValue' has a wrong offset!");

// Function SHProto.SHFleshLipAnimInstance.GetFleshLipAnimInstanceStateData
// 0x0008 (0x0008 - 0x0000)
struct SHFleshLipAnimInstance_GetFleshLipAnimInstanceStateData final
{
public:
	class USHFleshLipAnimInstanceStateData*       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipAnimInstance_GetFleshLipAnimInstanceStateData) == 0x000008, "Wrong alignment on SHFleshLipAnimInstance_GetFleshLipAnimInstanceStateData");
static_assert(sizeof(SHFleshLipAnimInstance_GetFleshLipAnimInstanceStateData) == 0x000008, "Wrong size on SHFleshLipAnimInstance_GetFleshLipAnimInstanceStateData");
static_assert(offsetof(SHFleshLipAnimInstance_GetFleshLipAnimInstanceStateData, ReturnValue) == 0x000000, "Member 'SHFleshLipAnimInstance_GetFleshLipAnimInstanceStateData::ReturnValue' has a wrong offset!");

// Function SHProto.SHFleshLipAnimInstance.GetFleshLipFallenLocomotionAnimInstance
// 0x0008 (0x0008 - 0x0000)
struct SHFleshLipAnimInstance_GetFleshLipFallenLocomotionAnimInstance final
{
public:
	class USHFleshLipFallenLocomotionAnimInstance* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipAnimInstance_GetFleshLipFallenLocomotionAnimInstance) == 0x000008, "Wrong alignment on SHFleshLipAnimInstance_GetFleshLipFallenLocomotionAnimInstance");
static_assert(sizeof(SHFleshLipAnimInstance_GetFleshLipFallenLocomotionAnimInstance) == 0x000008, "Wrong size on SHFleshLipAnimInstance_GetFleshLipFallenLocomotionAnimInstance");
static_assert(offsetof(SHFleshLipAnimInstance_GetFleshLipFallenLocomotionAnimInstance, ReturnValue) == 0x000000, "Member 'SHFleshLipAnimInstance_GetFleshLipFallenLocomotionAnimInstance::ReturnValue' has a wrong offset!");

// Function SHProto.SHFleshLipAnimInstance.GetFleshLipFlyingLocomotionAnimInstance
// 0x0008 (0x0008 - 0x0000)
struct SHFleshLipAnimInstance_GetFleshLipFlyingLocomotionAnimInstance final
{
public:
	class USHFleshLipFlyingLocomotionAnimInstance* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipAnimInstance_GetFleshLipFlyingLocomotionAnimInstance) == 0x000008, "Wrong alignment on SHFleshLipAnimInstance_GetFleshLipFlyingLocomotionAnimInstance");
static_assert(sizeof(SHFleshLipAnimInstance_GetFleshLipFlyingLocomotionAnimInstance) == 0x000008, "Wrong size on SHFleshLipAnimInstance_GetFleshLipFlyingLocomotionAnimInstance");
static_assert(offsetof(SHFleshLipAnimInstance_GetFleshLipFlyingLocomotionAnimInstance, ReturnValue) == 0x000000, "Member 'SHFleshLipAnimInstance_GetFleshLipFlyingLocomotionAnimInstance::ReturnValue' has a wrong offset!");

// Function SHProto.SHFleshLipAnimInstance.GetFleshLipHangingLocomotionAnimInstance
// 0x0008 (0x0008 - 0x0000)
struct SHFleshLipAnimInstance_GetFleshLipHangingLocomotionAnimInstance final
{
public:
	class USHFleshLipHangingLocomotionAnimInstance* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipAnimInstance_GetFleshLipHangingLocomotionAnimInstance) == 0x000008, "Wrong alignment on SHFleshLipAnimInstance_GetFleshLipHangingLocomotionAnimInstance");
static_assert(sizeof(SHFleshLipAnimInstance_GetFleshLipHangingLocomotionAnimInstance) == 0x000008, "Wrong size on SHFleshLipAnimInstance_GetFleshLipHangingLocomotionAnimInstance");
static_assert(offsetof(SHFleshLipAnimInstance_GetFleshLipHangingLocomotionAnimInstance, ReturnValue) == 0x000000, "Member 'SHFleshLipAnimInstance_GetFleshLipHangingLocomotionAnimInstance::ReturnValue' has a wrong offset!");

// Function SHProto.SHFleshLipAnimInstance.GetFleshLipLeftArmIsReleased
// 0x0001 (0x0001 - 0x0000)
struct SHFleshLipAnimInstance_GetFleshLipLeftArmIsReleased final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipAnimInstance_GetFleshLipLeftArmIsReleased) == 0x000001, "Wrong alignment on SHFleshLipAnimInstance_GetFleshLipLeftArmIsReleased");
static_assert(sizeof(SHFleshLipAnimInstance_GetFleshLipLeftArmIsReleased) == 0x000001, "Wrong size on SHFleshLipAnimInstance_GetFleshLipLeftArmIsReleased");
static_assert(offsetof(SHFleshLipAnimInstance_GetFleshLipLeftArmIsReleased, ReturnValue) == 0x000000, "Member 'SHFleshLipAnimInstance_GetFleshLipLeftArmIsReleased::ReturnValue' has a wrong offset!");

// Function SHProto.SHFleshLipAnimInstance.GetFleshLipLegsAreReleased
// 0x0001 (0x0001 - 0x0000)
struct SHFleshLipAnimInstance_GetFleshLipLegsAreReleased final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipAnimInstance_GetFleshLipLegsAreReleased) == 0x000001, "Wrong alignment on SHFleshLipAnimInstance_GetFleshLipLegsAreReleased");
static_assert(sizeof(SHFleshLipAnimInstance_GetFleshLipLegsAreReleased) == 0x000001, "Wrong size on SHFleshLipAnimInstance_GetFleshLipLegsAreReleased");
static_assert(offsetof(SHFleshLipAnimInstance_GetFleshLipLegsAreReleased, ReturnValue) == 0x000000, "Member 'SHFleshLipAnimInstance_GetFleshLipLegsAreReleased::ReturnValue' has a wrong offset!");

// Function SHProto.SHFleshLipAnimInstance.GetFleshLipRightArmIsReleased
// 0x0001 (0x0001 - 0x0000)
struct SHFleshLipAnimInstance_GetFleshLipRightArmIsReleased final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipAnimInstance_GetFleshLipRightArmIsReleased) == 0x000001, "Wrong alignment on SHFleshLipAnimInstance_GetFleshLipRightArmIsReleased");
static_assert(sizeof(SHFleshLipAnimInstance_GetFleshLipRightArmIsReleased) == 0x000001, "Wrong size on SHFleshLipAnimInstance_GetFleshLipRightArmIsReleased");
static_assert(offsetof(SHFleshLipAnimInstance_GetFleshLipRightArmIsReleased, ReturnValue) == 0x000000, "Member 'SHFleshLipAnimInstance_GetFleshLipRightArmIsReleased::ReturnValue' has a wrong offset!");

// Function SHProto.SHFleshLipAnimInstance.GetFleshLipStandingLocomotionAnimInstance
// 0x0008 (0x0008 - 0x0000)
struct SHFleshLipAnimInstance_GetFleshLipStandingLocomotionAnimInstance final
{
public:
	class USHFleshLipStandingLocomotionAnimInstance* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipAnimInstance_GetFleshLipStandingLocomotionAnimInstance) == 0x000008, "Wrong alignment on SHFleshLipAnimInstance_GetFleshLipStandingLocomotionAnimInstance");
static_assert(sizeof(SHFleshLipAnimInstance_GetFleshLipStandingLocomotionAnimInstance) == 0x000008, "Wrong size on SHFleshLipAnimInstance_GetFleshLipStandingLocomotionAnimInstance");
static_assert(offsetof(SHFleshLipAnimInstance_GetFleshLipStandingLocomotionAnimInstance, ReturnValue) == 0x000000, "Member 'SHFleshLipAnimInstance_GetFleshLipStandingLocomotionAnimInstance::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayHealthComponent.PlayDeathSequenceRequest
// 0x0028 (0x0028 - 0x0000)
struct SHCharacterPlayHealthComponent_PlayDeathSequenceRequest final
{
public:
	class UObject*                                InSlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InHitWorldDirection;                               // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCharacterPlayHealthComponent_PlayDeathSequenceRequest) == 0x000008, "Wrong alignment on SHCharacterPlayHealthComponent_PlayDeathSequenceRequest");
static_assert(sizeof(SHCharacterPlayHealthComponent_PlayDeathSequenceRequest) == 0x000028, "Wrong size on SHCharacterPlayHealthComponent_PlayDeathSequenceRequest");
static_assert(offsetof(SHCharacterPlayHealthComponent_PlayDeathSequenceRequest, InSlayer) == 0x000000, "Member 'SHCharacterPlayHealthComponent_PlayDeathSequenceRequest::InSlayer' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayHealthComponent_PlayDeathSequenceRequest, InHitWorldDirection) == 0x000008, "Member 'SHCharacterPlayHealthComponent_PlayDeathSequenceRequest::InHitWorldDirection' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayHealthComponent_PlayDeathSequenceRequest, ReturnValue) == 0x000020, "Member 'SHCharacterPlayHealthComponent_PlayDeathSequenceRequest::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayHealthComponent.ReceiveDamage
// 0x0018 (0x0018 - 0x0000)
struct SHCharacterPlayHealthComponent_ReceiveDamage final
{
public:
	float                                         DamageValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequireCriticalnjuryState;                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayHealthComponent_ReceiveDamage) == 0x000008, "Wrong alignment on SHCharacterPlayHealthComponent_ReceiveDamage");
static_assert(sizeof(SHCharacterPlayHealthComponent_ReceiveDamage) == 0x000018, "Wrong size on SHCharacterPlayHealthComponent_ReceiveDamage");
static_assert(offsetof(SHCharacterPlayHealthComponent_ReceiveDamage, DamageValue) == 0x000000, "Member 'SHCharacterPlayHealthComponent_ReceiveDamage::DamageValue' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayHealthComponent_ReceiveDamage, Object) == 0x000008, "Member 'SHCharacterPlayHealthComponent_ReceiveDamage::Object' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayHealthComponent_ReceiveDamage, bRequireCriticalnjuryState) == 0x000010, "Member 'SHCharacterPlayHealthComponent_ReceiveDamage::bRequireCriticalnjuryState' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayHealthComponent_ReceiveDamage, ReturnValue) == 0x000014, "Member 'SHCharacterPlayHealthComponent_ReceiveDamage::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayHealthComponent.ReceiveHeal
// 0x0018 (0x0018 - 0x0000)
struct SHCharacterPlayHealthComponent_ReceiveHeal final
{
public:
	float                                         InHealValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCharacterPlayHealthComponent_ReceiveHeal) == 0x000008, "Wrong alignment on SHCharacterPlayHealthComponent_ReceiveHeal");
static_assert(sizeof(SHCharacterPlayHealthComponent_ReceiveHeal) == 0x000018, "Wrong size on SHCharacterPlayHealthComponent_ReceiveHeal");
static_assert(offsetof(SHCharacterPlayHealthComponent_ReceiveHeal, InHealValue) == 0x000000, "Member 'SHCharacterPlayHealthComponent_ReceiveHeal::InHealValue' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayHealthComponent_ReceiveHeal, Object) == 0x000008, "Member 'SHCharacterPlayHealthComponent_ReceiveHeal::Object' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayHealthComponent_ReceiveHeal, ReturnValue) == 0x000010, "Member 'SHCharacterPlayHealthComponent_ReceiveHeal::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayHealthComponent.SetDeathSequenceBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayHealthComponent_SetDeathSequenceBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayHealthComponent_SetDeathSequenceBlocked) == 0x000008, "Wrong alignment on SHCharacterPlayHealthComponent_SetDeathSequenceBlocked");
static_assert(sizeof(SHCharacterPlayHealthComponent_SetDeathSequenceBlocked) == 0x000010, "Wrong size on SHCharacterPlayHealthComponent_SetDeathSequenceBlocked");
static_assert(offsetof(SHCharacterPlayHealthComponent_SetDeathSequenceBlocked, Blocked) == 0x000000, "Member 'SHCharacterPlayHealthComponent_SetDeathSequenceBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayHealthComponent_SetDeathSequenceBlocked, Object) == 0x000008, "Member 'SHCharacterPlayHealthComponent_SetDeathSequenceBlocked::Object' has a wrong offset!");

// Function SHProto.SHCharacterPlayHealthComponent.SHDebug_Character_Health_FakeDamage
// 0x0004 (0x0004 - 0x0000)
struct SHCharacterPlayHealthComponent_SHDebug_Character_Health_FakeDamage final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayHealthComponent_SHDebug_Character_Health_FakeDamage) == 0x000004, "Wrong alignment on SHCharacterPlayHealthComponent_SHDebug_Character_Health_FakeDamage");
static_assert(sizeof(SHCharacterPlayHealthComponent_SHDebug_Character_Health_FakeDamage) == 0x000004, "Wrong size on SHCharacterPlayHealthComponent_SHDebug_Character_Health_FakeDamage");
static_assert(offsetof(SHCharacterPlayHealthComponent_SHDebug_Character_Health_FakeDamage, Value) == 0x000000, "Member 'SHCharacterPlayHealthComponent_SHDebug_Character_Health_FakeDamage::Value' has a wrong offset!");

// Function SHProto.SHCharacterPlayHealthComponent.SHDebug_Character_Health_FakeHeal
// 0x0004 (0x0004 - 0x0000)
struct SHCharacterPlayHealthComponent_SHDebug_Character_Health_FakeHeal final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayHealthComponent_SHDebug_Character_Health_FakeHeal) == 0x000004, "Wrong alignment on SHCharacterPlayHealthComponent_SHDebug_Character_Health_FakeHeal");
static_assert(sizeof(SHCharacterPlayHealthComponent_SHDebug_Character_Health_FakeHeal) == 0x000004, "Wrong size on SHCharacterPlayHealthComponent_SHDebug_Character_Health_FakeHeal");
static_assert(offsetof(SHCharacterPlayHealthComponent_SHDebug_Character_Health_FakeHeal, Value) == 0x000000, "Member 'SHCharacterPlayHealthComponent_SHDebug_Character_Health_FakeHeal::Value' has a wrong offset!");

// DelegateFunction SHProto.SHCharacterPlayHealthComponent.SHHealthComponentEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHCharacterPlayHealthComponent_SHHealthComponentEvent__DelegateSignature final
{
public:
	class USHCharacterPlayHealthComponent*        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayHealthComponent_SHHealthComponentEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHCharacterPlayHealthComponent_SHHealthComponentEvent__DelegateSignature");
static_assert(sizeof(SHCharacterPlayHealthComponent_SHHealthComponentEvent__DelegateSignature) == 0x000008, "Wrong size on SHCharacterPlayHealthComponent_SHHealthComponentEvent__DelegateSignature");
static_assert(offsetof(SHCharacterPlayHealthComponent_SHHealthComponentEvent__DelegateSignature, Component) == 0x000000, "Member 'SHCharacterPlayHealthComponent_SHHealthComponentEvent__DelegateSignature::Component' has a wrong offset!");

// DelegateFunction SHProto.SHCharacterPlayHealthComponent.SHHealthValueChangedDetailedEvent__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct SHCharacterPlayHealthComponent_SHHealthValueChangedDetailedEvent__DelegateSignature final
{
public:
	class USHCharacterPlayHealthComponent*        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeDelta;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldValue;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewValue;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCharacterPlayHealthComponent_SHHealthValueChangedDetailedEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHCharacterPlayHealthComponent_SHHealthValueChangedDetailedEvent__DelegateSignature");
static_assert(sizeof(SHCharacterPlayHealthComponent_SHHealthValueChangedDetailedEvent__DelegateSignature) == 0x000018, "Wrong size on SHCharacterPlayHealthComponent_SHHealthValueChangedDetailedEvent__DelegateSignature");
static_assert(offsetof(SHCharacterPlayHealthComponent_SHHealthValueChangedDetailedEvent__DelegateSignature, Component) == 0x000000, "Member 'SHCharacterPlayHealthComponent_SHHealthValueChangedDetailedEvent__DelegateSignature::Component' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayHealthComponent_SHHealthValueChangedDetailedEvent__DelegateSignature, ChangeDelta) == 0x000008, "Member 'SHCharacterPlayHealthComponent_SHHealthValueChangedDetailedEvent__DelegateSignature::ChangeDelta' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayHealthComponent_SHHealthValueChangedDetailedEvent__DelegateSignature, OldValue) == 0x00000C, "Member 'SHCharacterPlayHealthComponent_SHHealthValueChangedDetailedEvent__DelegateSignature::OldValue' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayHealthComponent_SHHealthValueChangedDetailedEvent__DelegateSignature, NewValue) == 0x000010, "Member 'SHCharacterPlayHealthComponent_SHHealthValueChangedDetailedEvent__DelegateSignature::NewValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayHealthComponent.GetHealthState
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayHealthComponent_GetHealthState final
{
public:
	ESHHealthStateEnum                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayHealthComponent_GetHealthState) == 0x000001, "Wrong alignment on SHCharacterPlayHealthComponent_GetHealthState");
static_assert(sizeof(SHCharacterPlayHealthComponent_GetHealthState) == 0x000001, "Wrong size on SHCharacterPlayHealthComponent_GetHealthState");
static_assert(offsetof(SHCharacterPlayHealthComponent_GetHealthState, ReturnValue) == 0x000000, "Member 'SHCharacterPlayHealthComponent_GetHealthState::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayHealthComponent.GetHealthValue
// 0x0004 (0x0004 - 0x0000)
struct SHCharacterPlayHealthComponent_GetHealthValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayHealthComponent_GetHealthValue) == 0x000004, "Wrong alignment on SHCharacterPlayHealthComponent_GetHealthValue");
static_assert(sizeof(SHCharacterPlayHealthComponent_GetHealthValue) == 0x000004, "Wrong size on SHCharacterPlayHealthComponent_GetHealthValue");
static_assert(offsetof(SHCharacterPlayHealthComponent_GetHealthValue, ReturnValue) == 0x000000, "Member 'SHCharacterPlayHealthComponent_GetHealthValue::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayHealthComponent.IsDeathSequenceBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayHealthComponent_IsDeathSequenceBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayHealthComponent_IsDeathSequenceBlocked) == 0x000001, "Wrong alignment on SHCharacterPlayHealthComponent_IsDeathSequenceBlocked");
static_assert(sizeof(SHCharacterPlayHealthComponent_IsDeathSequenceBlocked) == 0x000001, "Wrong size on SHCharacterPlayHealthComponent_IsDeathSequenceBlocked");
static_assert(offsetof(SHCharacterPlayHealthComponent_IsDeathSequenceBlocked, ReturnValue) == 0x000000, "Member 'SHCharacterPlayHealthComponent_IsDeathSequenceBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHInteractionSlot.ProcessInteractionRequest
// 0x0018 (0x0018 - 0x0000)
struct SHInteractionSlot_ProcessInteractionRequest final
{
public:
	TScriptInterface<class ISHInteraction>        Interaction;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHInteractionSlot_ProcessInteractionRequest) == 0x000008, "Wrong alignment on SHInteractionSlot_ProcessInteractionRequest");
static_assert(sizeof(SHInteractionSlot_ProcessInteractionRequest) == 0x000018, "Wrong size on SHInteractionSlot_ProcessInteractionRequest");
static_assert(offsetof(SHInteractionSlot_ProcessInteractionRequest, Interaction) == 0x000000, "Member 'SHInteractionSlot_ProcessInteractionRequest::Interaction' has a wrong offset!");
static_assert(offsetof(SHInteractionSlot_ProcessInteractionRequest, ReturnValue) == 0x000010, "Member 'SHInteractionSlot_ProcessInteractionRequest::ReturnValue' has a wrong offset!");

// Function SHProto.SHInteractionSlot.HasInteraction
// 0x0001 (0x0001 - 0x0000)
struct SHInteractionSlot_HasInteraction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteractionSlot_HasInteraction) == 0x000001, "Wrong alignment on SHInteractionSlot_HasInteraction");
static_assert(sizeof(SHInteractionSlot_HasInteraction) == 0x000001, "Wrong size on SHInteractionSlot_HasInteraction");
static_assert(offsetof(SHInteractionSlot_HasInteraction, ReturnValue) == 0x000000, "Member 'SHInteractionSlot_HasInteraction::ReturnValue' has a wrong offset!");

// Function SHProto.SHInteractionGenericSlot.ProcessGenericInteractionStop
// 0x0001 (0x0001 - 0x0000)
struct SHInteractionGenericSlot_ProcessGenericInteractionStop final
{
public:
	struct FSHInteractionGenericStopData          StopData;                                          // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteractionGenericSlot_ProcessGenericInteractionStop) == 0x000001, "Wrong alignment on SHInteractionGenericSlot_ProcessGenericInteractionStop");
static_assert(sizeof(SHInteractionGenericSlot_ProcessGenericInteractionStop) == 0x000001, "Wrong size on SHInteractionGenericSlot_ProcessGenericInteractionStop");
static_assert(offsetof(SHInteractionGenericSlot_ProcessGenericInteractionStop, StopData) == 0x000000, "Member 'SHInteractionGenericSlot_ProcessGenericInteractionStop::StopData' has a wrong offset!");

// Function SHProto.SHCharacterPlayLightingAlternative.HandleDisableCharacterLightsUpdated
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayLightingAlternative_HandleDisableCharacterLightsUpdated final
{
public:
	bool                                          CurrentDisableCharacterLightsFlag;                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayLightingAlternative_HandleDisableCharacterLightsUpdated) == 0x000001, "Wrong alignment on SHCharacterPlayLightingAlternative_HandleDisableCharacterLightsUpdated");
static_assert(sizeof(SHCharacterPlayLightingAlternative_HandleDisableCharacterLightsUpdated) == 0x000001, "Wrong size on SHCharacterPlayLightingAlternative_HandleDisableCharacterLightsUpdated");
static_assert(offsetof(SHCharacterPlayLightingAlternative_HandleDisableCharacterLightsUpdated, CurrentDisableCharacterLightsFlag) == 0x000000, "Member 'SHCharacterPlayLightingAlternative_HandleDisableCharacterLightsUpdated::CurrentDisableCharacterLightsFlag' has a wrong offset!");

// Function SHProto.SHCharacterPlayLightingAlternative.HandleFlashlightColorChanged
// 0x0004 (0x0004 - 0x0000)
struct SHCharacterPlayLightingAlternative_HandleFlashlightColorChanged final
{
public:
	struct FColor                                 CurrentFlashlightColor;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayLightingAlternative_HandleFlashlightColorChanged) == 0x000004, "Wrong alignment on SHCharacterPlayLightingAlternative_HandleFlashlightColorChanged");
static_assert(sizeof(SHCharacterPlayLightingAlternative_HandleFlashlightColorChanged) == 0x000004, "Wrong size on SHCharacterPlayLightingAlternative_HandleFlashlightColorChanged");
static_assert(offsetof(SHCharacterPlayLightingAlternative_HandleFlashlightColorChanged, CurrentFlashlightColor) == 0x000000, "Member 'SHCharacterPlayLightingAlternative_HandleFlashlightColorChanged::CurrentFlashlightColor' has a wrong offset!");

// Function SHProto.SHCharacterPlayLightingAlternative.HandleFlashlightIntensityChanged
// 0x0004 (0x0004 - 0x0000)
struct SHCharacterPlayLightingAlternative_HandleFlashlightIntensityChanged final
{
public:
	float                                         CurrentFlashlightIntensity;                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayLightingAlternative_HandleFlashlightIntensityChanged) == 0x000004, "Wrong alignment on SHCharacterPlayLightingAlternative_HandleFlashlightIntensityChanged");
static_assert(sizeof(SHCharacterPlayLightingAlternative_HandleFlashlightIntensityChanged) == 0x000004, "Wrong size on SHCharacterPlayLightingAlternative_HandleFlashlightIntensityChanged");
static_assert(offsetof(SHCharacterPlayLightingAlternative_HandleFlashlightIntensityChanged, CurrentFlashlightIntensity) == 0x000000, "Member 'SHCharacterPlayLightingAlternative_HandleFlashlightIntensityChanged::CurrentFlashlightIntensity' has a wrong offset!");

// Function SHProto.SHCharacterPlayLightingAlternative.HandleGlobalColorUpdated
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayLightingAlternative_HandleGlobalColorUpdated final
{
public:
	struct FLinearColor                           InColorOverride;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayLightingAlternative_HandleGlobalColorUpdated) == 0x000004, "Wrong alignment on SHCharacterPlayLightingAlternative_HandleGlobalColorUpdated");
static_assert(sizeof(SHCharacterPlayLightingAlternative_HandleGlobalColorUpdated) == 0x000010, "Wrong size on SHCharacterPlayLightingAlternative_HandleGlobalColorUpdated");
static_assert(offsetof(SHCharacterPlayLightingAlternative_HandleGlobalColorUpdated, InColorOverride) == 0x000000, "Member 'SHCharacterPlayLightingAlternative_HandleGlobalColorUpdated::InColorOverride' has a wrong offset!");

// Function SHProto.SHCharacterPlayLightingAlternative.HandleGlobalIntensityMulUpdated
// 0x0004 (0x0004 - 0x0000)
struct SHCharacterPlayLightingAlternative_HandleGlobalIntensityMulUpdated final
{
public:
	float                                         CurrentGlobalIntensityMul;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayLightingAlternative_HandleGlobalIntensityMulUpdated) == 0x000004, "Wrong alignment on SHCharacterPlayLightingAlternative_HandleGlobalIntensityMulUpdated");
static_assert(sizeof(SHCharacterPlayLightingAlternative_HandleGlobalIntensityMulUpdated) == 0x000004, "Wrong size on SHCharacterPlayLightingAlternative_HandleGlobalIntensityMulUpdated");
static_assert(offsetof(SHCharacterPlayLightingAlternative_HandleGlobalIntensityMulUpdated, CurrentGlobalIntensityMul) == 0x000000, "Member 'SHCharacterPlayLightingAlternative_HandleGlobalIntensityMulUpdated::CurrentGlobalIntensityMul' has a wrong offset!");

// Function SHProto.SHMandarinLocomotionAnimInstance.GetDesiredVelocitySizeAndYaw
// 0x000C (0x000C - 0x0000)
struct SHMandarinLocomotionAnimInstance_GetDesiredVelocitySizeAndYaw final
{
public:
	float                                         OutVectorSize;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVectorYaw;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Smoothing;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMandarinLocomotionAnimInstance_GetDesiredVelocitySizeAndYaw) == 0x000004, "Wrong alignment on SHMandarinLocomotionAnimInstance_GetDesiredVelocitySizeAndYaw");
static_assert(sizeof(SHMandarinLocomotionAnimInstance_GetDesiredVelocitySizeAndYaw) == 0x00000C, "Wrong size on SHMandarinLocomotionAnimInstance_GetDesiredVelocitySizeAndYaw");
static_assert(offsetof(SHMandarinLocomotionAnimInstance_GetDesiredVelocitySizeAndYaw, OutVectorSize) == 0x000000, "Member 'SHMandarinLocomotionAnimInstance_GetDesiredVelocitySizeAndYaw::OutVectorSize' has a wrong offset!");
static_assert(offsetof(SHMandarinLocomotionAnimInstance_GetDesiredVelocitySizeAndYaw, OutVectorYaw) == 0x000004, "Member 'SHMandarinLocomotionAnimInstance_GetDesiredVelocitySizeAndYaw::OutVectorYaw' has a wrong offset!");
static_assert(offsetof(SHMandarinLocomotionAnimInstance_GetDesiredVelocitySizeAndYaw, Smoothing) == 0x000008, "Member 'SHMandarinLocomotionAnimInstance_GetDesiredVelocitySizeAndYaw::Smoothing' has a wrong offset!");

// Function SHProto.SHMandarinLocomotionAnimInstance.IsMandarinOver
// 0x0001 (0x0001 - 0x0000)
struct SHMandarinLocomotionAnimInstance_IsMandarinOver final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMandarinLocomotionAnimInstance_IsMandarinOver) == 0x000001, "Wrong alignment on SHMandarinLocomotionAnimInstance_IsMandarinOver");
static_assert(sizeof(SHMandarinLocomotionAnimInstance_IsMandarinOver) == 0x000001, "Wrong size on SHMandarinLocomotionAnimInstance_IsMandarinOver");
static_assert(offsetof(SHMandarinLocomotionAnimInstance_IsMandarinOver, ReturnValue) == 0x000000, "Member 'SHMandarinLocomotionAnimInstance_IsMandarinOver::ReturnValue' has a wrong offset!");

// Function SHProto.SHMandarinLocomotionAnimInstance.GetMandarinAnimInstanceStateData
// 0x0008 (0x0008 - 0x0000)
struct SHMandarinLocomotionAnimInstance_GetMandarinAnimInstanceStateData final
{
public:
	class USHMandarinAnimInstanceStateData*       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMandarinLocomotionAnimInstance_GetMandarinAnimInstanceStateData) == 0x000008, "Wrong alignment on SHMandarinLocomotionAnimInstance_GetMandarinAnimInstanceStateData");
static_assert(sizeof(SHMandarinLocomotionAnimInstance_GetMandarinAnimInstanceStateData) == 0x000008, "Wrong size on SHMandarinLocomotionAnimInstance_GetMandarinAnimInstanceStateData");
static_assert(offsetof(SHMandarinLocomotionAnimInstance_GetMandarinAnimInstanceStateData, ReturnValue) == 0x000000, "Member 'SHMandarinLocomotionAnimInstance_GetMandarinAnimInstanceStateData::ReturnValue' has a wrong offset!");

// Function SHProto.SHMandarinLocomotionAnimInstance.GetSmoothedLookAt
// 0x0020 (0x0020 - 0x0000)
struct SHMandarinLocomotionAnimInstance_GetSmoothedLookAt final
{
public:
	struct FRotator                               OutRotation;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         OutAlpha;                                          // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHMandarinLocomotionAnimInstance_GetSmoothedLookAt) == 0x000008, "Wrong alignment on SHMandarinLocomotionAnimInstance_GetSmoothedLookAt");
static_assert(sizeof(SHMandarinLocomotionAnimInstance_GetSmoothedLookAt) == 0x000020, "Wrong size on SHMandarinLocomotionAnimInstance_GetSmoothedLookAt");
static_assert(offsetof(SHMandarinLocomotionAnimInstance_GetSmoothedLookAt, OutRotation) == 0x000000, "Member 'SHMandarinLocomotionAnimInstance_GetSmoothedLookAt::OutRotation' has a wrong offset!");
static_assert(offsetof(SHMandarinLocomotionAnimInstance_GetSmoothedLookAt, OutAlpha) == 0x000018, "Member 'SHMandarinLocomotionAnimInstance_GetSmoothedLookAt::OutAlpha' has a wrong offset!");

// Function SHProto.SHCharacterPlayMapComponent.AddFogRevealObjectToApply
// 0x000C (0x000C - 0x0000)
struct SHCharacterPlayMapComponent_AddFogRevealObjectToApply final
{
public:
	struct FSHMapFogRevealObjectData              MapFogRevealObjectData;                            // 0x0000(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMapComponent_AddFogRevealObjectToApply) == 0x000004, "Wrong alignment on SHCharacterPlayMapComponent_AddFogRevealObjectToApply");
static_assert(sizeof(SHCharacterPlayMapComponent_AddFogRevealObjectToApply) == 0x00000C, "Wrong size on SHCharacterPlayMapComponent_AddFogRevealObjectToApply");
static_assert(offsetof(SHCharacterPlayMapComponent_AddFogRevealObjectToApply, MapFogRevealObjectData) == 0x000000, "Member 'SHCharacterPlayMapComponent_AddFogRevealObjectToApply::MapFogRevealObjectData' has a wrong offset!");

// Function SHProto.SHCharacterPlayMapComponent.AddOrUpdateDynamicObjectData
// 0x0020 (0x0020 - 0x0000)
struct SHCharacterPlayMapComponent_AddOrUpdateDynamicObjectData final
{
public:
	struct FSHMapDynamicObjectDataStruct          MapDynamicObjectData;                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMapComponent_AddOrUpdateDynamicObjectData) == 0x000008, "Wrong alignment on SHCharacterPlayMapComponent_AddOrUpdateDynamicObjectData");
static_assert(sizeof(SHCharacterPlayMapComponent_AddOrUpdateDynamicObjectData) == 0x000020, "Wrong size on SHCharacterPlayMapComponent_AddOrUpdateDynamicObjectData");
static_assert(offsetof(SHCharacterPlayMapComponent_AddOrUpdateDynamicObjectData, MapDynamicObjectData) == 0x000000, "Member 'SHCharacterPlayMapComponent_AddOrUpdateDynamicObjectData::MapDynamicObjectData' has a wrong offset!");

// Function SHProto.SHCharacterPlayMapComponent.AddOrUpdateObjectData
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayMapComponent_AddOrUpdateObjectData final
{
public:
	struct FSHMapObjectDataStruct                 MapObjectData;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMapComponent_AddOrUpdateObjectData) == 0x000004, "Wrong alignment on SHCharacterPlayMapComponent_AddOrUpdateObjectData");
static_assert(sizeof(SHCharacterPlayMapComponent_AddOrUpdateObjectData) == 0x000010, "Wrong size on SHCharacterPlayMapComponent_AddOrUpdateObjectData");
static_assert(offsetof(SHCharacterPlayMapComponent_AddOrUpdateObjectData, MapObjectData) == 0x000000, "Member 'SHCharacterPlayMapComponent_AddOrUpdateObjectData::MapObjectData' has a wrong offset!");

// Function SHProto.SHCharacterPlayMapComponent.AddOrUpdateObjectDataArray
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayMapComponent_AddOrUpdateObjectDataArray final
{
public:
	TArray<struct FSHMapObjectDataStruct>         MapObjectDataArray;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMapComponent_AddOrUpdateObjectDataArray) == 0x000008, "Wrong alignment on SHCharacterPlayMapComponent_AddOrUpdateObjectDataArray");
static_assert(sizeof(SHCharacterPlayMapComponent_AddOrUpdateObjectDataArray) == 0x000010, "Wrong size on SHCharacterPlayMapComponent_AddOrUpdateObjectDataArray");
static_assert(offsetof(SHCharacterPlayMapComponent_AddOrUpdateObjectDataArray, MapObjectDataArray) == 0x000000, "Member 'SHCharacterPlayMapComponent_AddOrUpdateObjectDataArray::MapObjectDataArray' has a wrong offset!");

// Function SHProto.SHCharacterPlayMapComponent.TryOverrideObjectType
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayMapComponent_TryOverrideObjectType final
{
public:
	struct FSHMapDataConfigStruct                 ExistingMapObjectConfig;                           // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	ESHMapObjectTypeEnum                          InNewType;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCharacterPlayMapComponent_TryOverrideObjectType) == 0x000004, "Wrong alignment on SHCharacterPlayMapComponent_TryOverrideObjectType");
static_assert(sizeof(SHCharacterPlayMapComponent_TryOverrideObjectType) == 0x000010, "Wrong size on SHCharacterPlayMapComponent_TryOverrideObjectType");
static_assert(offsetof(SHCharacterPlayMapComponent_TryOverrideObjectType, ExistingMapObjectConfig) == 0x000000, "Member 'SHCharacterPlayMapComponent_TryOverrideObjectType::ExistingMapObjectConfig' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMapComponent_TryOverrideObjectType, InNewType) == 0x00000C, "Member 'SHCharacterPlayMapComponent_TryOverrideObjectType::InNewType' has a wrong offset!");

// Function SHProto.SHCharacterPlayMapComponent.FindObjectDataValue
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayMapComponent_FindObjectDataValue final
{
public:
	class FName                                   ObjectID;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHMapsEnum                                   Map;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayMapComponent_FindObjectDataValue) == 0x000004, "Wrong alignment on SHCharacterPlayMapComponent_FindObjectDataValue");
static_assert(sizeof(SHCharacterPlayMapComponent_FindObjectDataValue) == 0x000010, "Wrong size on SHCharacterPlayMapComponent_FindObjectDataValue");
static_assert(offsetof(SHCharacterPlayMapComponent_FindObjectDataValue, ObjectID) == 0x000000, "Member 'SHCharacterPlayMapComponent_FindObjectDataValue::ObjectID' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMapComponent_FindObjectDataValue, Map) == 0x000008, "Member 'SHCharacterPlayMapComponent_FindObjectDataValue::Map' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayMapComponent_FindObjectDataValue, ReturnValue) == 0x00000C, "Member 'SHCharacterPlayMapComponent_FindObjectDataValue::ReturnValue' has a wrong offset!");

// Function SHProto.SHMannequinLocomotionAnimInstance.GetMannequinAnimInstanceStateData
// 0x0008 (0x0008 - 0x0000)
struct SHMannequinLocomotionAnimInstance_GetMannequinAnimInstanceStateData final
{
public:
	class USHMannequinAnimInstanceStateData*      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMannequinLocomotionAnimInstance_GetMannequinAnimInstanceStateData) == 0x000008, "Wrong alignment on SHMannequinLocomotionAnimInstance_GetMannequinAnimInstanceStateData");
static_assert(sizeof(SHMannequinLocomotionAnimInstance_GetMannequinAnimInstanceStateData) == 0x000008, "Wrong size on SHMannequinLocomotionAnimInstance_GetMannequinAnimInstanceStateData");
static_assert(offsetof(SHMannequinLocomotionAnimInstance_GetMannequinAnimInstanceStateData, ReturnValue) == 0x000000, "Member 'SHMannequinLocomotionAnimInstance_GetMannequinAnimInstanceStateData::ReturnValue' has a wrong offset!");

// Function SHProto.SHMannequinStandingLocomotionAnimInstance.GetSmoothedDesiredRotationYaw
// 0x0004 (0x0004 - 0x0000)
struct SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw final
{
public:
	float                                         OutYaw;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw) == 0x000004, "Wrong alignment on SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw");
static_assert(sizeof(SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw) == 0x000004, "Wrong size on SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw");
static_assert(offsetof(SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw, OutYaw) == 0x000000, "Member 'SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw::OutYaw' has a wrong offset!");

// Function SHProto.SHMannequinStandingLocomotionAnimInstance.GetSmoothedDesiredVelocity
// 0x0018 (0x0018 - 0x0000)
struct SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredVelocity final
{
public:
	struct FVector                                OutVelocity;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredVelocity) == 0x000008, "Wrong alignment on SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredVelocity");
static_assert(sizeof(SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredVelocity) == 0x000018, "Wrong size on SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredVelocity");
static_assert(offsetof(SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredVelocity, OutVelocity) == 0x000000, "Member 'SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredVelocity::OutVelocity' has a wrong offset!");

// Function SHProto.SHMannequinStandingLocomotionAnimInstance.GetSmoothedDesiredVelocitySizeAndYaw
// 0x0008 (0x0008 - 0x0000)
struct SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw final
{
public:
	float                                         OutVelocitySize;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVelocityYaw;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw) == 0x000004, "Wrong alignment on SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw");
static_assert(sizeof(SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw) == 0x000008, "Wrong size on SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw");
static_assert(offsetof(SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw, OutVelocitySize) == 0x000000, "Member 'SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw::OutVelocitySize' has a wrong offset!");
static_assert(offsetof(SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw, OutVelocityYaw) == 0x000004, "Member 'SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw::OutVelocityYaw' has a wrong offset!");

// Function SHProto.SHMannequinStandingLocomotionAnimInstance.GetSmoothedDesiredVelocitySizeAndYawLimitedToDirection
// 0x0010 (0x0010 - 0x0000)
struct SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYawLimitedToDirection final
{
public:
	float                                         OutVelocitySize;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVelocityYaw;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDirectionYaw;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InToleranceAngle;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYawLimitedToDirection) == 0x000004, "Wrong alignment on SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYawLimitedToDirection");
static_assert(sizeof(SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYawLimitedToDirection) == 0x000010, "Wrong size on SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYawLimitedToDirection");
static_assert(offsetof(SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYawLimitedToDirection, OutVelocitySize) == 0x000000, "Member 'SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYawLimitedToDirection::OutVelocitySize' has a wrong offset!");
static_assert(offsetof(SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYawLimitedToDirection, OutVelocityYaw) == 0x000004, "Member 'SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYawLimitedToDirection::OutVelocityYaw' has a wrong offset!");
static_assert(offsetof(SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYawLimitedToDirection, InDirectionYaw) == 0x000008, "Member 'SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYawLimitedToDirection::InDirectionYaw' has a wrong offset!");
static_assert(offsetof(SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYawLimitedToDirection, InToleranceAngle) == 0x00000C, "Member 'SHMannequinStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYawLimitedToDirection::InToleranceAngle' has a wrong offset!");

// Function SHProto.SHMannequinStandingLocomotionAnimInstance.GetSmoothedLookAt
// 0x0020 (0x0020 - 0x0000)
struct SHMannequinStandingLocomotionAnimInstance_GetSmoothedLookAt final
{
public:
	struct FRotator                               OutRotation;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         OutAlpha;                                          // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHMannequinStandingLocomotionAnimInstance_GetSmoothedLookAt) == 0x000008, "Wrong alignment on SHMannequinStandingLocomotionAnimInstance_GetSmoothedLookAt");
static_assert(sizeof(SHMannequinStandingLocomotionAnimInstance_GetSmoothedLookAt) == 0x000020, "Wrong size on SHMannequinStandingLocomotionAnimInstance_GetSmoothedLookAt");
static_assert(offsetof(SHMannequinStandingLocomotionAnimInstance_GetSmoothedLookAt, OutRotation) == 0x000000, "Member 'SHMannequinStandingLocomotionAnimInstance_GetSmoothedLookAt::OutRotation' has a wrong offset!");
static_assert(offsetof(SHMannequinStandingLocomotionAnimInstance_GetSmoothedLookAt, OutAlpha) == 0x000018, "Member 'SHMannequinStandingLocomotionAnimInstance_GetSmoothedLookAt::OutAlpha' has a wrong offset!");

// Function SHProto.SHMannequinStandingLocomotionAnimInstance.GetTargetDesiredRotationYaw
// 0x0004 (0x0004 - 0x0000)
struct SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredRotationYaw final
{
public:
	float                                         OutYaw;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredRotationYaw) == 0x000004, "Wrong alignment on SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredRotationYaw");
static_assert(sizeof(SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredRotationYaw) == 0x000004, "Wrong size on SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredRotationYaw");
static_assert(offsetof(SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredRotationYaw, OutYaw) == 0x000000, "Member 'SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredRotationYaw::OutYaw' has a wrong offset!");

// Function SHProto.SHMannequinStandingLocomotionAnimInstance.GetTargetDesiredVelocity
// 0x0018 (0x0018 - 0x0000)
struct SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredVelocity final
{
public:
	struct FVector                                OutVelocity;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredVelocity) == 0x000008, "Wrong alignment on SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredVelocity");
static_assert(sizeof(SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredVelocity) == 0x000018, "Wrong size on SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredVelocity");
static_assert(offsetof(SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredVelocity, OutVelocity) == 0x000000, "Member 'SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredVelocity::OutVelocity' has a wrong offset!");

// Function SHProto.SHMannequinStandingLocomotionAnimInstance.GetTargetDesiredVelocitySizeAndYaw
// 0x0008 (0x0008 - 0x0000)
struct SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw final
{
public:
	float                                         OutVelocitySize;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVelocityYaw;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw) == 0x000004, "Wrong alignment on SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw");
static_assert(sizeof(SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw) == 0x000008, "Wrong size on SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw");
static_assert(offsetof(SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw, OutVelocitySize) == 0x000000, "Member 'SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw::OutVelocitySize' has a wrong offset!");
static_assert(offsetof(SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw, OutVelocityYaw) == 0x000004, "Member 'SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw::OutVelocityYaw' has a wrong offset!");

// Function SHProto.SHMannequinStandingLocomotionAnimInstance.GetTargetDesiredVelocitySizeAndYawLimitedToDirection
// 0x0010 (0x0010 - 0x0000)
struct SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYawLimitedToDirection final
{
public:
	float                                         OutVelocitySize;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVelocityYaw;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDirectionYaw;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InToleranceAngle;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYawLimitedToDirection) == 0x000004, "Wrong alignment on SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYawLimitedToDirection");
static_assert(sizeof(SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYawLimitedToDirection) == 0x000010, "Wrong size on SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYawLimitedToDirection");
static_assert(offsetof(SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYawLimitedToDirection, OutVelocitySize) == 0x000000, "Member 'SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYawLimitedToDirection::OutVelocitySize' has a wrong offset!");
static_assert(offsetof(SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYawLimitedToDirection, OutVelocityYaw) == 0x000004, "Member 'SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYawLimitedToDirection::OutVelocityYaw' has a wrong offset!");
static_assert(offsetof(SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYawLimitedToDirection, InDirectionYaw) == 0x000008, "Member 'SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYawLimitedToDirection::InDirectionYaw' has a wrong offset!");
static_assert(offsetof(SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYawLimitedToDirection, InToleranceAngle) == 0x00000C, "Member 'SHMannequinStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYawLimitedToDirection::InToleranceAngle' has a wrong offset!");

// Function SHProto.SHMannequinStandingLocomotionAnimInstance.GetTargetLookAtAlpha
// 0x0004 (0x0004 - 0x0000)
struct SHMannequinStandingLocomotionAnimInstance_GetTargetLookAtAlpha final
{
public:
	float                                         OutAlpha;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMannequinStandingLocomotionAnimInstance_GetTargetLookAtAlpha) == 0x000004, "Wrong alignment on SHMannequinStandingLocomotionAnimInstance_GetTargetLookAtAlpha");
static_assert(sizeof(SHMannequinStandingLocomotionAnimInstance_GetTargetLookAtAlpha) == 0x000004, "Wrong size on SHMannequinStandingLocomotionAnimInstance_GetTargetLookAtAlpha");
static_assert(offsetof(SHMannequinStandingLocomotionAnimInstance_GetTargetLookAtAlpha, OutAlpha) == 0x000000, "Member 'SHMannequinStandingLocomotionAnimInstance_GetTargetLookAtAlpha::OutAlpha' has a wrong offset!");

// Function SHProto.SHCharacterPlayTraversalComponent.ProcessTraversalEndedEvent
// 0x0008 (0x0008 - 0x0000)
struct SHCharacterPlayTraversalComponent_ProcessTraversalEndedEvent final
{
public:
	class USHTraversalBaseComponent*              InTraversalComp;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayTraversalComponent_ProcessTraversalEndedEvent) == 0x000008, "Wrong alignment on SHCharacterPlayTraversalComponent_ProcessTraversalEndedEvent");
static_assert(sizeof(SHCharacterPlayTraversalComponent_ProcessTraversalEndedEvent) == 0x000008, "Wrong size on SHCharacterPlayTraversalComponent_ProcessTraversalEndedEvent");
static_assert(offsetof(SHCharacterPlayTraversalComponent_ProcessTraversalEndedEvent, InTraversalComp) == 0x000000, "Member 'SHCharacterPlayTraversalComponent_ProcessTraversalEndedEvent::InTraversalComp' has a wrong offset!");

// Function SHProto.SHCharacterPlayTraversalComponent.ProcessTraversalStartedEvent
// 0x0008 (0x0008 - 0x0000)
struct SHCharacterPlayTraversalComponent_ProcessTraversalStartedEvent final
{
public:
	class USHTraversalBaseComponent*              InTraversalComp;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayTraversalComponent_ProcessTraversalStartedEvent) == 0x000008, "Wrong alignment on SHCharacterPlayTraversalComponent_ProcessTraversalStartedEvent");
static_assert(sizeof(SHCharacterPlayTraversalComponent_ProcessTraversalStartedEvent) == 0x000008, "Wrong size on SHCharacterPlayTraversalComponent_ProcessTraversalStartedEvent");
static_assert(offsetof(SHCharacterPlayTraversalComponent_ProcessTraversalStartedEvent, InTraversalComp) == 0x000000, "Member 'SHCharacterPlayTraversalComponent_ProcessTraversalStartedEvent::InTraversalComp' has a wrong offset!");

// Function SHProto.SHCharacterPlayUIComponent.GetGameplayHudWidgetPointer
// 0x0008 (0x0008 - 0x0000)
struct SHCharacterPlayUIComponent_GetGameplayHudWidgetPointer final
{
public:
	class USHGameplayHudWidget*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayUIComponent_GetGameplayHudWidgetPointer) == 0x000008, "Wrong alignment on SHCharacterPlayUIComponent_GetGameplayHudWidgetPointer");
static_assert(sizeof(SHCharacterPlayUIComponent_GetGameplayHudWidgetPointer) == 0x000008, "Wrong size on SHCharacterPlayUIComponent_GetGameplayHudWidgetPointer");
static_assert(offsetof(SHCharacterPlayUIComponent_GetGameplayHudWidgetPointer, ReturnValue) == 0x000000, "Member 'SHCharacterPlayUIComponent_GetGameplayHudWidgetPointer::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayViewComponent.AddToControlRotation
// 0x0020 (0x0020 - 0x0000)
struct SHCharacterPlayViewComponent_AddToControlRotation final
{
public:
	struct FRotator                               RotationToAdd;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	const class UObject*                          Object;                                            // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayViewComponent_AddToControlRotation) == 0x000008, "Wrong alignment on SHCharacterPlayViewComponent_AddToControlRotation");
static_assert(sizeof(SHCharacterPlayViewComponent_AddToControlRotation) == 0x000020, "Wrong size on SHCharacterPlayViewComponent_AddToControlRotation");
static_assert(offsetof(SHCharacterPlayViewComponent_AddToControlRotation, RotationToAdd) == 0x000000, "Member 'SHCharacterPlayViewComponent_AddToControlRotation::RotationToAdd' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayViewComponent_AddToControlRotation, Object) == 0x000018, "Member 'SHCharacterPlayViewComponent_AddToControlRotation::Object' has a wrong offset!");

// Function SHProto.SHCharacterPlayViewComponent.ClearRotationScale
// 0x0008 (0x0008 - 0x0000)
struct SHCharacterPlayViewComponent_ClearRotationScale final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayViewComponent_ClearRotationScale) == 0x000008, "Wrong alignment on SHCharacterPlayViewComponent_ClearRotationScale");
static_assert(sizeof(SHCharacterPlayViewComponent_ClearRotationScale) == 0x000008, "Wrong size on SHCharacterPlayViewComponent_ClearRotationScale");
static_assert(offsetof(SHCharacterPlayViewComponent_ClearRotationScale, Object) == 0x000000, "Member 'SHCharacterPlayViewComponent_ClearRotationScale::Object' has a wrong offset!");

// Function SHProto.SHCharacterPlayViewComponent.LookAtLocationAbsolute
// 0x0040 (0x0040 - 0x0000)
struct SHCharacterPlayViewComponent_LookAtLocationAbsolute final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotateDuration;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetAngle;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            InCurve;                                           // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USHOperationEvents*                     ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayViewComponent_LookAtLocationAbsolute) == 0x000008, "Wrong alignment on SHCharacterPlayViewComponent_LookAtLocationAbsolute");
static_assert(sizeof(SHCharacterPlayViewComponent_LookAtLocationAbsolute) == 0x000040, "Wrong size on SHCharacterPlayViewComponent_LookAtLocationAbsolute");
static_assert(offsetof(SHCharacterPlayViewComponent_LookAtLocationAbsolute, Location) == 0x000000, "Member 'SHCharacterPlayViewComponent_LookAtLocationAbsolute::Location' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayViewComponent_LookAtLocationAbsolute, RotateDuration) == 0x000018, "Member 'SHCharacterPlayViewComponent_LookAtLocationAbsolute::RotateDuration' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayViewComponent_LookAtLocationAbsolute, Object) == 0x000020, "Member 'SHCharacterPlayViewComponent_LookAtLocationAbsolute::Object' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayViewComponent_LookAtLocationAbsolute, OffsetAngle) == 0x000028, "Member 'SHCharacterPlayViewComponent_LookAtLocationAbsolute::OffsetAngle' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayViewComponent_LookAtLocationAbsolute, InCurve) == 0x000030, "Member 'SHCharacterPlayViewComponent_LookAtLocationAbsolute::InCurve' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayViewComponent_LookAtLocationAbsolute, ReturnValue) == 0x000038, "Member 'SHCharacterPlayViewComponent_LookAtLocationAbsolute::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayViewComponent.LookAtRotationAbsolute
// 0x0040 (0x0040 - 0x0000)
struct SHCharacterPlayViewComponent_LookAtRotationAbsolute final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RotateDuration;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetAngle;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            InCurve;                                           // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USHOperationEvents*                     ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayViewComponent_LookAtRotationAbsolute) == 0x000008, "Wrong alignment on SHCharacterPlayViewComponent_LookAtRotationAbsolute");
static_assert(sizeof(SHCharacterPlayViewComponent_LookAtRotationAbsolute) == 0x000040, "Wrong size on SHCharacterPlayViewComponent_LookAtRotationAbsolute");
static_assert(offsetof(SHCharacterPlayViewComponent_LookAtRotationAbsolute, Rotation) == 0x000000, "Member 'SHCharacterPlayViewComponent_LookAtRotationAbsolute::Rotation' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayViewComponent_LookAtRotationAbsolute, RotateDuration) == 0x000018, "Member 'SHCharacterPlayViewComponent_LookAtRotationAbsolute::RotateDuration' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayViewComponent_LookAtRotationAbsolute, Object) == 0x000020, "Member 'SHCharacterPlayViewComponent_LookAtRotationAbsolute::Object' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayViewComponent_LookAtRotationAbsolute, OffsetAngle) == 0x000028, "Member 'SHCharacterPlayViewComponent_LookAtRotationAbsolute::OffsetAngle' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayViewComponent_LookAtRotationAbsolute, InCurve) == 0x000030, "Member 'SHCharacterPlayViewComponent_LookAtRotationAbsolute::InCurve' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayViewComponent_LookAtRotationAbsolute, ReturnValue) == 0x000038, "Member 'SHCharacterPlayViewComponent_LookAtRotationAbsolute::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayViewComponent.LookOperationComp
// 0x0058 (0x0058 - 0x0000)
struct SHCharacterPlayViewComponent_LookOperationComp final
{
public:
	class USceneComponent*                        InComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotateDuration;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSHViewLookOperationSettings           InSettings;                                        // 0x0018(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class USHOperationEvents*                     ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayViewComponent_LookOperationComp) == 0x000008, "Wrong alignment on SHCharacterPlayViewComponent_LookOperationComp");
static_assert(sizeof(SHCharacterPlayViewComponent_LookOperationComp) == 0x000058, "Wrong size on SHCharacterPlayViewComponent_LookOperationComp");
static_assert(offsetof(SHCharacterPlayViewComponent_LookOperationComp, InComponent) == 0x000000, "Member 'SHCharacterPlayViewComponent_LookOperationComp::InComponent' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayViewComponent_LookOperationComp, RotateDuration) == 0x000008, "Member 'SHCharacterPlayViewComponent_LookOperationComp::RotateDuration' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayViewComponent_LookOperationComp, Object) == 0x000010, "Member 'SHCharacterPlayViewComponent_LookOperationComp::Object' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayViewComponent_LookOperationComp, InSettings) == 0x000018, "Member 'SHCharacterPlayViewComponent_LookOperationComp::InSettings' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayViewComponent_LookOperationComp, ReturnValue) == 0x000050, "Member 'SHCharacterPlayViewComponent_LookOperationComp::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayViewComponent.LookOperationLoc
// 0x0068 (0x0068 - 0x0000)
struct SHCharacterPlayViewComponent_LookOperationLoc final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotateDuration;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSHViewLookOperationSettings           InSettings;                                        // 0x0028(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class USHOperationEvents*                     ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayViewComponent_LookOperationLoc) == 0x000008, "Wrong alignment on SHCharacterPlayViewComponent_LookOperationLoc");
static_assert(sizeof(SHCharacterPlayViewComponent_LookOperationLoc) == 0x000068, "Wrong size on SHCharacterPlayViewComponent_LookOperationLoc");
static_assert(offsetof(SHCharacterPlayViewComponent_LookOperationLoc, Location) == 0x000000, "Member 'SHCharacterPlayViewComponent_LookOperationLoc::Location' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayViewComponent_LookOperationLoc, RotateDuration) == 0x000018, "Member 'SHCharacterPlayViewComponent_LookOperationLoc::RotateDuration' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayViewComponent_LookOperationLoc, Object) == 0x000020, "Member 'SHCharacterPlayViewComponent_LookOperationLoc::Object' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayViewComponent_LookOperationLoc, InSettings) == 0x000028, "Member 'SHCharacterPlayViewComponent_LookOperationLoc::InSettings' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayViewComponent_LookOperationLoc, ReturnValue) == 0x000060, "Member 'SHCharacterPlayViewComponent_LookOperationLoc::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayViewComponent.LookOperationRot
// 0x0068 (0x0068 - 0x0000)
struct SHCharacterPlayViewComponent_LookOperationRot final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RotateDuration;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSHViewLookOperationSettings           InSettings;                                        // 0x0028(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class USHOperationEvents*                     ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayViewComponent_LookOperationRot) == 0x000008, "Wrong alignment on SHCharacterPlayViewComponent_LookOperationRot");
static_assert(sizeof(SHCharacterPlayViewComponent_LookOperationRot) == 0x000068, "Wrong size on SHCharacterPlayViewComponent_LookOperationRot");
static_assert(offsetof(SHCharacterPlayViewComponent_LookOperationRot, Rotation) == 0x000000, "Member 'SHCharacterPlayViewComponent_LookOperationRot::Rotation' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayViewComponent_LookOperationRot, RotateDuration) == 0x000018, "Member 'SHCharacterPlayViewComponent_LookOperationRot::RotateDuration' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayViewComponent_LookOperationRot, Object) == 0x000020, "Member 'SHCharacterPlayViewComponent_LookOperationRot::Object' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayViewComponent_LookOperationRot, InSettings) == 0x000028, "Member 'SHCharacterPlayViewComponent_LookOperationRot::InSettings' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayViewComponent_LookOperationRot, ReturnValue) == 0x000060, "Member 'SHCharacterPlayViewComponent_LookOperationRot::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayViewComponent.OverrideControlRotation
// 0x0020 (0x0020 - 0x0000)
struct SHCharacterPlayViewComponent_OverrideControlRotation final
{
public:
	struct FRotator                               NewControlRotation;                                // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	const class UObject*                          Object;                                            // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayViewComponent_OverrideControlRotation) == 0x000008, "Wrong alignment on SHCharacterPlayViewComponent_OverrideControlRotation");
static_assert(sizeof(SHCharacterPlayViewComponent_OverrideControlRotation) == 0x000020, "Wrong size on SHCharacterPlayViewComponent_OverrideControlRotation");
static_assert(offsetof(SHCharacterPlayViewComponent_OverrideControlRotation, NewControlRotation) == 0x000000, "Member 'SHCharacterPlayViewComponent_OverrideControlRotation::NewControlRotation' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayViewComponent_OverrideControlRotation, Object) == 0x000018, "Member 'SHCharacterPlayViewComponent_OverrideControlRotation::Object' has a wrong offset!");

// Function SHProto.SHCharacterPlayViewComponent.ResetLookOperation
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayViewComponent_ResetLookOperation final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCharacterPlayViewComponent_ResetLookOperation) == 0x000008, "Wrong alignment on SHCharacterPlayViewComponent_ResetLookOperation");
static_assert(sizeof(SHCharacterPlayViewComponent_ResetLookOperation) == 0x000010, "Wrong size on SHCharacterPlayViewComponent_ResetLookOperation");
static_assert(offsetof(SHCharacterPlayViewComponent_ResetLookOperation, Object) == 0x000000, "Member 'SHCharacterPlayViewComponent_ResetLookOperation::Object' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayViewComponent_ResetLookOperation, ReturnValue) == 0x000008, "Member 'SHCharacterPlayViewComponent_ResetLookOperation::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayViewComponent.SetRotationBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayViewComponent_SetRotationBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayViewComponent_SetRotationBlocked) == 0x000008, "Wrong alignment on SHCharacterPlayViewComponent_SetRotationBlocked");
static_assert(sizeof(SHCharacterPlayViewComponent_SetRotationBlocked) == 0x000010, "Wrong size on SHCharacterPlayViewComponent_SetRotationBlocked");
static_assert(offsetof(SHCharacterPlayViewComponent_SetRotationBlocked, Blocked) == 0x000000, "Member 'SHCharacterPlayViewComponent_SetRotationBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayViewComponent_SetRotationBlocked, Object) == 0x000008, "Member 'SHCharacterPlayViewComponent_SetRotationBlocked::Object' has a wrong offset!");

// Function SHProto.SHCharacterPlayViewComponent.SetRotationScale
// 0x0010 (0x0010 - 0x0000)
struct SHCharacterPlayViewComponent_SetRotationScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayViewComponent_SetRotationScale) == 0x000008, "Wrong alignment on SHCharacterPlayViewComponent_SetRotationScale");
static_assert(sizeof(SHCharacterPlayViewComponent_SetRotationScale) == 0x000010, "Wrong size on SHCharacterPlayViewComponent_SetRotationScale");
static_assert(offsetof(SHCharacterPlayViewComponent_SetRotationScale, Scale) == 0x000000, "Member 'SHCharacterPlayViewComponent_SetRotationScale::Scale' has a wrong offset!");
static_assert(offsetof(SHCharacterPlayViewComponent_SetRotationScale, Object) == 0x000008, "Member 'SHCharacterPlayViewComponent_SetRotationScale::Object' has a wrong offset!");

// Function SHProto.SHCharacterPlayViewComponent.GetViewDirection
// 0x0018 (0x0018 - 0x0000)
struct SHCharacterPlayViewComponent_GetViewDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayViewComponent_GetViewDirection) == 0x000008, "Wrong alignment on SHCharacterPlayViewComponent_GetViewDirection");
static_assert(sizeof(SHCharacterPlayViewComponent_GetViewDirection) == 0x000018, "Wrong size on SHCharacterPlayViewComponent_GetViewDirection");
static_assert(offsetof(SHCharacterPlayViewComponent_GetViewDirection, ReturnValue) == 0x000000, "Member 'SHCharacterPlayViewComponent_GetViewDirection::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayViewComponent.GetViewLocation
// 0x0018 (0x0018 - 0x0000)
struct SHCharacterPlayViewComponent_GetViewLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayViewComponent_GetViewLocation) == 0x000008, "Wrong alignment on SHCharacterPlayViewComponent_GetViewLocation");
static_assert(sizeof(SHCharacterPlayViewComponent_GetViewLocation) == 0x000018, "Wrong size on SHCharacterPlayViewComponent_GetViewLocation");
static_assert(offsetof(SHCharacterPlayViewComponent_GetViewLocation, ReturnValue) == 0x000000, "Member 'SHCharacterPlayViewComponent_GetViewLocation::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayViewComponent.GetViewRotation
// 0x0018 (0x0018 - 0x0000)
struct SHCharacterPlayViewComponent_GetViewRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayViewComponent_GetViewRotation) == 0x000008, "Wrong alignment on SHCharacterPlayViewComponent_GetViewRotation");
static_assert(sizeof(SHCharacterPlayViewComponent_GetViewRotation) == 0x000018, "Wrong size on SHCharacterPlayViewComponent_GetViewRotation");
static_assert(offsetof(SHCharacterPlayViewComponent_GetViewRotation, ReturnValue) == 0x000000, "Member 'SHCharacterPlayViewComponent_GetViewRotation::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharacterPlayViewComponent.IsRotationBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHCharacterPlayViewComponent_IsRotationBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharacterPlayViewComponent_IsRotationBlocked) == 0x000001, "Wrong alignment on SHCharacterPlayViewComponent_IsRotationBlocked");
static_assert(sizeof(SHCharacterPlayViewComponent_IsRotationBlocked) == 0x000001, "Wrong size on SHCharacterPlayViewComponent_IsRotationBlocked");
static_assert(offsetof(SHCharacterPlayViewComponent_IsRotationBlocked, ReturnValue) == 0x000000, "Member 'SHCharacterPlayViewComponent_IsRotationBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHFogCutoutActor.SetEnabled
// 0x0010 (0x0010 - 0x0000)
struct SHFogCutoutActor_SetEnabled final
{
public:
	const class UObject*                          Enabler;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InEnabled;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFogCutoutActor_SetEnabled) == 0x000008, "Wrong alignment on SHFogCutoutActor_SetEnabled");
static_assert(sizeof(SHFogCutoutActor_SetEnabled) == 0x000010, "Wrong size on SHFogCutoutActor_SetEnabled");
static_assert(offsetof(SHFogCutoutActor_SetEnabled, Enabler) == 0x000000, "Member 'SHFogCutoutActor_SetEnabled::Enabler' has a wrong offset!");
static_assert(offsetof(SHFogCutoutActor_SetEnabled, InEnabled) == 0x000008, "Member 'SHFogCutoutActor_SetEnabled::InEnabled' has a wrong offset!");

// Function SHProto.SHCharAnimationInstance.GetAllPlayingSlotAnimationSlotNames
// 0x0010 (0x0010 - 0x0000)
struct SHCharAnimationInstance_GetAllPlayingSlotAnimationSlotNames final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharAnimationInstance_GetAllPlayingSlotAnimationSlotNames) == 0x000008, "Wrong alignment on SHCharAnimationInstance_GetAllPlayingSlotAnimationSlotNames");
static_assert(sizeof(SHCharAnimationInstance_GetAllPlayingSlotAnimationSlotNames) == 0x000010, "Wrong size on SHCharAnimationInstance_GetAllPlayingSlotAnimationSlotNames");
static_assert(offsetof(SHCharAnimationInstance_GetAllPlayingSlotAnimationSlotNames, ReturnValue) == 0x000000, "Member 'SHCharAnimationInstance_GetAllPlayingSlotAnimationSlotNames::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharAnimationInstance.GetEquippedWeapon
// 0x0008 (0x0008 - 0x0000)
struct SHCharAnimationInstance_GetEquippedWeapon final
{
public:
	class ASHItemWeapon*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharAnimationInstance_GetEquippedWeapon) == 0x000008, "Wrong alignment on SHCharAnimationInstance_GetEquippedWeapon");
static_assert(sizeof(SHCharAnimationInstance_GetEquippedWeapon) == 0x000008, "Wrong size on SHCharAnimationInstance_GetEquippedWeapon");
static_assert(offsetof(SHCharAnimationInstance_GetEquippedWeapon, ReturnValue) == 0x000000, "Member 'SHCharAnimationInstance_GetEquippedWeapon::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharAnimationInstance.GetPlayingSlotAnimationSlotNames
// 0x0010 (0x0010 - 0x0000)
struct SHCharAnimationInstance_GetPlayingSlotAnimationSlotNames final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharAnimationInstance_GetPlayingSlotAnimationSlotNames) == 0x000008, "Wrong alignment on SHCharAnimationInstance_GetPlayingSlotAnimationSlotNames");
static_assert(sizeof(SHCharAnimationInstance_GetPlayingSlotAnimationSlotNames) == 0x000010, "Wrong size on SHCharAnimationInstance_GetPlayingSlotAnimationSlotNames");
static_assert(offsetof(SHCharAnimationInstance_GetPlayingSlotAnimationSlotNames, ReturnValue) == 0x000000, "Member 'SHCharAnimationInstance_GetPlayingSlotAnimationSlotNames::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharAnimationInstance.GetSpeedWarpingForcedMultiplier
// 0x0008 (0x0008 - 0x0000)
struct SHCharAnimationInstance_GetSpeedWarpingForcedMultiplier final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForcedValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharAnimationInstance_GetSpeedWarpingForcedMultiplier) == 0x000004, "Wrong alignment on SHCharAnimationInstance_GetSpeedWarpingForcedMultiplier");
static_assert(sizeof(SHCharAnimationInstance_GetSpeedWarpingForcedMultiplier) == 0x000008, "Wrong size on SHCharAnimationInstance_GetSpeedWarpingForcedMultiplier");
static_assert(offsetof(SHCharAnimationInstance_GetSpeedWarpingForcedMultiplier, Enabled) == 0x000000, "Member 'SHCharAnimationInstance_GetSpeedWarpingForcedMultiplier::Enabled' has a wrong offset!");
static_assert(offsetof(SHCharAnimationInstance_GetSpeedWarpingForcedMultiplier, ForcedValue) == 0x000004, "Member 'SHCharAnimationInstance_GetSpeedWarpingForcedMultiplier::ForcedValue' has a wrong offset!");

// Function SHProto.SHCharAnimationInstance.IsAimingWeapon
// 0x0001 (0x0001 - 0x0000)
struct SHCharAnimationInstance_IsAimingWeapon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharAnimationInstance_IsAimingWeapon) == 0x000001, "Wrong alignment on SHCharAnimationInstance_IsAimingWeapon");
static_assert(sizeof(SHCharAnimationInstance_IsAimingWeapon) == 0x000001, "Wrong size on SHCharAnimationInstance_IsAimingWeapon");
static_assert(offsetof(SHCharAnimationInstance_IsAimingWeapon, ReturnValue) == 0x000000, "Member 'SHCharAnimationInstance_IsAimingWeapon::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharAnimationInstance.IsChangingWeaponActionPlaying
// 0x0001 (0x0001 - 0x0000)
struct SHCharAnimationInstance_IsChangingWeaponActionPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharAnimationInstance_IsChangingWeaponActionPlaying) == 0x000001, "Wrong alignment on SHCharAnimationInstance_IsChangingWeaponActionPlaying");
static_assert(sizeof(SHCharAnimationInstance_IsChangingWeaponActionPlaying) == 0x000001, "Wrong size on SHCharAnimationInstance_IsChangingWeaponActionPlaying");
static_assert(offsetof(SHCharAnimationInstance_IsChangingWeaponActionPlaying, ReturnValue) == 0x000000, "Member 'SHCharAnimationInstance_IsChangingWeaponActionPlaying::ReturnValue' has a wrong offset!");

// Function SHProto.SHCharAnimationInstance.IsCharacterCorrectivePostprocessEnabled
// 0x0001 (0x0001 - 0x0000)
struct SHCharAnimationInstance_IsCharacterCorrectivePostprocessEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCharAnimationInstance_IsCharacterCorrectivePostprocessEnabled) == 0x000001, "Wrong alignment on SHCharAnimationInstance_IsCharacterCorrectivePostprocessEnabled");
static_assert(sizeof(SHCharAnimationInstance_IsCharacterCorrectivePostprocessEnabled) == 0x000001, "Wrong size on SHCharAnimationInstance_IsCharacterCorrectivePostprocessEnabled");
static_assert(offsetof(SHCharAnimationInstance_IsCharacterCorrectivePostprocessEnabled, ReturnValue) == 0x000000, "Member 'SHCharAnimationInstance_IsCharacterCorrectivePostprocessEnabled::ReturnValue' has a wrong offset!");

// Function SHProto.SHFriendAnimInstance.GetFriendAnimInstanceStateData
// 0x0008 (0x0008 - 0x0000)
struct SHFriendAnimInstance_GetFriendAnimInstanceStateData final
{
public:
	class USHFriendAnimInstanceStateData*         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFriendAnimInstance_GetFriendAnimInstanceStateData) == 0x000008, "Wrong alignment on SHFriendAnimInstance_GetFriendAnimInstanceStateData");
static_assert(sizeof(SHFriendAnimInstance_GetFriendAnimInstanceStateData) == 0x000008, "Wrong size on SHFriendAnimInstance_GetFriendAnimInstanceStateData");
static_assert(offsetof(SHFriendAnimInstance_GetFriendAnimInstanceStateData, ReturnValue) == 0x000000, "Member 'SHFriendAnimInstance_GetFriendAnimInstanceStateData::ReturnValue' has a wrong offset!");

// Function SHProto.SHFriendAnimInstance.GetFriendLocomotionAnimInstance
// 0x0010 (0x0010 - 0x0000)
struct SHFriendAnimInstance_GetFriendLocomotionAnimInstance final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USHFriendLocomotionAnimInstance*        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFriendAnimInstance_GetFriendLocomotionAnimInstance) == 0x000008, "Wrong alignment on SHFriendAnimInstance_GetFriendLocomotionAnimInstance");
static_assert(sizeof(SHFriendAnimInstance_GetFriendLocomotionAnimInstance) == 0x000010, "Wrong size on SHFriendAnimInstance_GetFriendLocomotionAnimInstance");
static_assert(offsetof(SHFriendAnimInstance_GetFriendLocomotionAnimInstance, SlotIndex) == 0x000000, "Member 'SHFriendAnimInstance_GetFriendLocomotionAnimInstance::SlotIndex' has a wrong offset!");
static_assert(offsetof(SHFriendAnimInstance_GetFriendLocomotionAnimInstance, ReturnValue) == 0x000008, "Member 'SHFriendAnimInstance_GetFriendLocomotionAnimInstance::ReturnValue' has a wrong offset!");

// Function SHProto.SHChAudioHealthSubcomponent.RequestDeathHealthState
// 0x0008 (0x0008 - 0x0000)
struct SHChAudioHealthSubcomponent_RequestDeathHealthState final
{
public:
	class UObject*                                Requester;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHChAudioHealthSubcomponent_RequestDeathHealthState) == 0x000008, "Wrong alignment on SHChAudioHealthSubcomponent_RequestDeathHealthState");
static_assert(sizeof(SHChAudioHealthSubcomponent_RequestDeathHealthState) == 0x000008, "Wrong size on SHChAudioHealthSubcomponent_RequestDeathHealthState");
static_assert(offsetof(SHChAudioHealthSubcomponent_RequestDeathHealthState, Requester) == 0x000000, "Member 'SHChAudioHealthSubcomponent_RequestDeathHealthState::Requester' has a wrong offset!");

// Function SHProto.SHFlashlightMainLightOffsetBlender.GetAssignedValue
// 0x0018 (0x0018 - 0x0000)
struct SHFlashlightMainLightOffsetBlender_GetAssignedValue final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFlashlightMainLightOffsetBlender_GetAssignedValue) == 0x000008, "Wrong alignment on SHFlashlightMainLightOffsetBlender_GetAssignedValue");
static_assert(sizeof(SHFlashlightMainLightOffsetBlender_GetAssignedValue) == 0x000018, "Wrong size on SHFlashlightMainLightOffsetBlender_GetAssignedValue");
static_assert(offsetof(SHFlashlightMainLightOffsetBlender_GetAssignedValue, ReturnValue) == 0x000000, "Member 'SHFlashlightMainLightOffsetBlender_GetAssignedValue::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXPukePuddleDamageSubcomp.ProcessFootstep
// 0x0010 (0x0010 - 0x0000)
struct SHFXPukePuddleDamageSubcomp_ProcessFootstep final
{
public:
	EFoot                                         Foot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABeingFootstep*                         Footstep;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXPukePuddleDamageSubcomp_ProcessFootstep) == 0x000008, "Wrong alignment on SHFXPukePuddleDamageSubcomp_ProcessFootstep");
static_assert(sizeof(SHFXPukePuddleDamageSubcomp_ProcessFootstep) == 0x000010, "Wrong size on SHFXPukePuddleDamageSubcomp_ProcessFootstep");
static_assert(offsetof(SHFXPukePuddleDamageSubcomp_ProcessFootstep, Foot) == 0x000000, "Member 'SHFXPukePuddleDamageSubcomp_ProcessFootstep::Foot' has a wrong offset!");
static_assert(offsetof(SHFXPukePuddleDamageSubcomp_ProcessFootstep, Footstep) == 0x000008, "Member 'SHFXPukePuddleDamageSubcomp_ProcessFootstep::Footstep' has a wrong offset!");

// Function SHProto.SHFXPukePuddleDamageSubcomp.SetPuddleDamageBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHFXPukePuddleDamageSubcomp_SetPuddleDamageBlocked final
{
public:
	bool                                          IsBlock;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXPukePuddleDamageSubcomp_SetPuddleDamageBlocked) == 0x000008, "Wrong alignment on SHFXPukePuddleDamageSubcomp_SetPuddleDamageBlocked");
static_assert(sizeof(SHFXPukePuddleDamageSubcomp_SetPuddleDamageBlocked) == 0x000010, "Wrong size on SHFXPukePuddleDamageSubcomp_SetPuddleDamageBlocked");
static_assert(offsetof(SHFXPukePuddleDamageSubcomp_SetPuddleDamageBlocked, IsBlock) == 0x000000, "Member 'SHFXPukePuddleDamageSubcomp_SetPuddleDamageBlocked::IsBlock' has a wrong offset!");
static_assert(offsetof(SHFXPukePuddleDamageSubcomp_SetPuddleDamageBlocked, Object) == 0x000008, "Member 'SHFXPukePuddleDamageSubcomp_SetPuddleDamageBlocked::Object' has a wrong offset!");

// Function SHProto.SHFXPukePuddleDamageSubcomp.GetPukeActivePuddlesCount
// 0x0004 (0x0004 - 0x0000)
struct SHFXPukePuddleDamageSubcomp_GetPukeActivePuddlesCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXPukePuddleDamageSubcomp_GetPukeActivePuddlesCount) == 0x000004, "Wrong alignment on SHFXPukePuddleDamageSubcomp_GetPukeActivePuddlesCount");
static_assert(sizeof(SHFXPukePuddleDamageSubcomp_GetPukeActivePuddlesCount) == 0x000004, "Wrong size on SHFXPukePuddleDamageSubcomp_GetPukeActivePuddlesCount");
static_assert(offsetof(SHFXPukePuddleDamageSubcomp_GetPukeActivePuddlesCount, ReturnValue) == 0x000000, "Member 'SHFXPukePuddleDamageSubcomp_GetPukeActivePuddlesCount::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXPukePuddleDamageSubcomp.GetPukePuddlesCount
// 0x0004 (0x0004 - 0x0000)
struct SHFXPukePuddleDamageSubcomp_GetPukePuddlesCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXPukePuddleDamageSubcomp_GetPukePuddlesCount) == 0x000004, "Wrong alignment on SHFXPukePuddleDamageSubcomp_GetPukePuddlesCount");
static_assert(sizeof(SHFXPukePuddleDamageSubcomp_GetPukePuddlesCount) == 0x000004, "Wrong size on SHFXPukePuddleDamageSubcomp_GetPukePuddlesCount");
static_assert(offsetof(SHFXPukePuddleDamageSubcomp_GetPukePuddlesCount, ReturnValue) == 0x000000, "Member 'SHFXPukePuddleDamageSubcomp_GetPukePuddlesCount::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXPukePuddleDamageSubcomp.IsPuddleDamageBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHFXPukePuddleDamageSubcomp_IsPuddleDamageBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXPukePuddleDamageSubcomp_IsPuddleDamageBlocked) == 0x000001, "Wrong alignment on SHFXPukePuddleDamageSubcomp_IsPuddleDamageBlocked");
static_assert(sizeof(SHFXPukePuddleDamageSubcomp_IsPuddleDamageBlocked) == 0x000001, "Wrong size on SHFXPukePuddleDamageSubcomp_IsPuddleDamageBlocked");
static_assert(offsetof(SHFXPukePuddleDamageSubcomp_IsPuddleDamageBlocked, ReturnValue) == 0x000000, "Member 'SHFXPukePuddleDamageSubcomp_IsPuddleDamageBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXPukePuddleDamageSubcomp.IsPuddleDamageBlockedBy
// 0x0010 (0x0010 - 0x0000)
struct SHFXPukePuddleDamageSubcomp_IsPuddleDamageBlockedBy final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFXPukePuddleDamageSubcomp_IsPuddleDamageBlockedBy) == 0x000008, "Wrong alignment on SHFXPukePuddleDamageSubcomp_IsPuddleDamageBlockedBy");
static_assert(sizeof(SHFXPukePuddleDamageSubcomp_IsPuddleDamageBlockedBy) == 0x000010, "Wrong size on SHFXPukePuddleDamageSubcomp_IsPuddleDamageBlockedBy");
static_assert(offsetof(SHFXPukePuddleDamageSubcomp_IsPuddleDamageBlockedBy, Object) == 0x000000, "Member 'SHFXPukePuddleDamageSubcomp_IsPuddleDamageBlockedBy::Object' has a wrong offset!");
static_assert(offsetof(SHFXPukePuddleDamageSubcomp_IsPuddleDamageBlockedBy, ReturnValue) == 0x000008, "Member 'SHFXPukePuddleDamageSubcomp_IsPuddleDamageBlockedBy::ReturnValue' has a wrong offset!");

// Function SHProto.SHChAudioStatesSubcomponent.RequestBossFightState
// 0x0010 (0x0010 - 0x0000)
struct SHChAudioStatesSubcomponent_RequestBossFightState final
{
public:
	bool                                          bInState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Requester;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHChAudioStatesSubcomponent_RequestBossFightState) == 0x000008, "Wrong alignment on SHChAudioStatesSubcomponent_RequestBossFightState");
static_assert(sizeof(SHChAudioStatesSubcomponent_RequestBossFightState) == 0x000010, "Wrong size on SHChAudioStatesSubcomponent_RequestBossFightState");
static_assert(offsetof(SHChAudioStatesSubcomponent_RequestBossFightState, bInState) == 0x000000, "Member 'SHChAudioStatesSubcomponent_RequestBossFightState::bInState' has a wrong offset!");
static_assert(offsetof(SHChAudioStatesSubcomponent_RequestBossFightState, Requester) == 0x000008, "Member 'SHChAudioStatesSubcomponent_RequestBossFightState::Requester' has a wrong offset!");

// Function SHProto.SHFleshLipLocomotionAnimInstance.GetFleshLipAnimInstanceStateData
// 0x0008 (0x0008 - 0x0000)
struct SHFleshLipLocomotionAnimInstance_GetFleshLipAnimInstanceStateData final
{
public:
	class USHFleshLipAnimInstanceStateData*       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipLocomotionAnimInstance_GetFleshLipAnimInstanceStateData) == 0x000008, "Wrong alignment on SHFleshLipLocomotionAnimInstance_GetFleshLipAnimInstanceStateData");
static_assert(sizeof(SHFleshLipLocomotionAnimInstance_GetFleshLipAnimInstanceStateData) == 0x000008, "Wrong size on SHFleshLipLocomotionAnimInstance_GetFleshLipAnimInstanceStateData");
static_assert(offsetof(SHFleshLipLocomotionAnimInstance_GetFleshLipAnimInstanceStateData, ReturnValue) == 0x000000, "Member 'SHFleshLipLocomotionAnimInstance_GetFleshLipAnimInstanceStateData::ReturnValue' has a wrong offset!");

// Function SHProto.SHFleshLipLocomotionAnimInstance.GetFleshLipLeftArmIsReleased
// 0x0001 (0x0001 - 0x0000)
struct SHFleshLipLocomotionAnimInstance_GetFleshLipLeftArmIsReleased final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipLocomotionAnimInstance_GetFleshLipLeftArmIsReleased) == 0x000001, "Wrong alignment on SHFleshLipLocomotionAnimInstance_GetFleshLipLeftArmIsReleased");
static_assert(sizeof(SHFleshLipLocomotionAnimInstance_GetFleshLipLeftArmIsReleased) == 0x000001, "Wrong size on SHFleshLipLocomotionAnimInstance_GetFleshLipLeftArmIsReleased");
static_assert(offsetof(SHFleshLipLocomotionAnimInstance_GetFleshLipLeftArmIsReleased, ReturnValue) == 0x000000, "Member 'SHFleshLipLocomotionAnimInstance_GetFleshLipLeftArmIsReleased::ReturnValue' has a wrong offset!");

// Function SHProto.SHFleshLipLocomotionAnimInstance.GetFleshLipLegsAreReleased
// 0x0001 (0x0001 - 0x0000)
struct SHFleshLipLocomotionAnimInstance_GetFleshLipLegsAreReleased final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipLocomotionAnimInstance_GetFleshLipLegsAreReleased) == 0x000001, "Wrong alignment on SHFleshLipLocomotionAnimInstance_GetFleshLipLegsAreReleased");
static_assert(sizeof(SHFleshLipLocomotionAnimInstance_GetFleshLipLegsAreReleased) == 0x000001, "Wrong size on SHFleshLipLocomotionAnimInstance_GetFleshLipLegsAreReleased");
static_assert(offsetof(SHFleshLipLocomotionAnimInstance_GetFleshLipLegsAreReleased, ReturnValue) == 0x000000, "Member 'SHFleshLipLocomotionAnimInstance_GetFleshLipLegsAreReleased::ReturnValue' has a wrong offset!");

// Function SHProto.SHFleshLipLocomotionAnimInstance.GetFleshLipRightArmIsReleased
// 0x0001 (0x0001 - 0x0000)
struct SHFleshLipLocomotionAnimInstance_GetFleshLipRightArmIsReleased final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipLocomotionAnimInstance_GetFleshLipRightArmIsReleased) == 0x000001, "Wrong alignment on SHFleshLipLocomotionAnimInstance_GetFleshLipRightArmIsReleased");
static_assert(sizeof(SHFleshLipLocomotionAnimInstance_GetFleshLipRightArmIsReleased) == 0x000001, "Wrong size on SHFleshLipLocomotionAnimInstance_GetFleshLipRightArmIsReleased");
static_assert(offsetof(SHFleshLipLocomotionAnimInstance_GetFleshLipRightArmIsReleased, ReturnValue) == 0x000000, "Member 'SHFleshLipLocomotionAnimInstance_GetFleshLipRightArmIsReleased::ReturnValue' has a wrong offset!");

// Function SHProto.SHFleshLipLocomotionAnimInstance.GetSmoothedDesiredRotationYaw
// 0x0004 (0x0004 - 0x0000)
struct SHFleshLipLocomotionAnimInstance_GetSmoothedDesiredRotationYaw final
{
public:
	float                                         OutYaw;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipLocomotionAnimInstance_GetSmoothedDesiredRotationYaw) == 0x000004, "Wrong alignment on SHFleshLipLocomotionAnimInstance_GetSmoothedDesiredRotationYaw");
static_assert(sizeof(SHFleshLipLocomotionAnimInstance_GetSmoothedDesiredRotationYaw) == 0x000004, "Wrong size on SHFleshLipLocomotionAnimInstance_GetSmoothedDesiredRotationYaw");
static_assert(offsetof(SHFleshLipLocomotionAnimInstance_GetSmoothedDesiredRotationYaw, OutYaw) == 0x000000, "Member 'SHFleshLipLocomotionAnimInstance_GetSmoothedDesiredRotationYaw::OutYaw' has a wrong offset!");

// Function SHProto.SHFleshLipLocomotionAnimInstance.GetSmoothedDesiredVelocity
// 0x0018 (0x0018 - 0x0000)
struct SHFleshLipLocomotionAnimInstance_GetSmoothedDesiredVelocity final
{
public:
	struct FVector                                OutVelocity;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipLocomotionAnimInstance_GetSmoothedDesiredVelocity) == 0x000008, "Wrong alignment on SHFleshLipLocomotionAnimInstance_GetSmoothedDesiredVelocity");
static_assert(sizeof(SHFleshLipLocomotionAnimInstance_GetSmoothedDesiredVelocity) == 0x000018, "Wrong size on SHFleshLipLocomotionAnimInstance_GetSmoothedDesiredVelocity");
static_assert(offsetof(SHFleshLipLocomotionAnimInstance_GetSmoothedDesiredVelocity, OutVelocity) == 0x000000, "Member 'SHFleshLipLocomotionAnimInstance_GetSmoothedDesiredVelocity::OutVelocity' has a wrong offset!");

// Function SHProto.SHFleshLipLocomotionAnimInstance.GetSmoothedDesiredVelocitySizeAndYaw
// 0x0008 (0x0008 - 0x0000)
struct SHFleshLipLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw final
{
public:
	float                                         OutVelocitySize;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVelocityYaw;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw) == 0x000004, "Wrong alignment on SHFleshLipLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw");
static_assert(sizeof(SHFleshLipLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw) == 0x000008, "Wrong size on SHFleshLipLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw");
static_assert(offsetof(SHFleshLipLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw, OutVelocitySize) == 0x000000, "Member 'SHFleshLipLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw::OutVelocitySize' has a wrong offset!");
static_assert(offsetof(SHFleshLipLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw, OutVelocityYaw) == 0x000004, "Member 'SHFleshLipLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw::OutVelocityYaw' has a wrong offset!");

// Function SHProto.SHFleshLipLocomotionAnimInstance.GetSmoothedLookAt
// 0x0020 (0x0020 - 0x0000)
struct SHFleshLipLocomotionAnimInstance_GetSmoothedLookAt final
{
public:
	struct FRotator                               OutRotation;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         OutAlpha;                                          // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFleshLipLocomotionAnimInstance_GetSmoothedLookAt) == 0x000008, "Wrong alignment on SHFleshLipLocomotionAnimInstance_GetSmoothedLookAt");
static_assert(sizeof(SHFleshLipLocomotionAnimInstance_GetSmoothedLookAt) == 0x000020, "Wrong size on SHFleshLipLocomotionAnimInstance_GetSmoothedLookAt");
static_assert(offsetof(SHFleshLipLocomotionAnimInstance_GetSmoothedLookAt, OutRotation) == 0x000000, "Member 'SHFleshLipLocomotionAnimInstance_GetSmoothedLookAt::OutRotation' has a wrong offset!");
static_assert(offsetof(SHFleshLipLocomotionAnimInstance_GetSmoothedLookAt, OutAlpha) == 0x000018, "Member 'SHFleshLipLocomotionAnimInstance_GetSmoothedLookAt::OutAlpha' has a wrong offset!");

// Function SHProto.SHFleshLipLocomotionAnimInstance.GetTargetDesiredRotationYaw
// 0x0004 (0x0004 - 0x0000)
struct SHFleshLipLocomotionAnimInstance_GetTargetDesiredRotationYaw final
{
public:
	float                                         OutYaw;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipLocomotionAnimInstance_GetTargetDesiredRotationYaw) == 0x000004, "Wrong alignment on SHFleshLipLocomotionAnimInstance_GetTargetDesiredRotationYaw");
static_assert(sizeof(SHFleshLipLocomotionAnimInstance_GetTargetDesiredRotationYaw) == 0x000004, "Wrong size on SHFleshLipLocomotionAnimInstance_GetTargetDesiredRotationYaw");
static_assert(offsetof(SHFleshLipLocomotionAnimInstance_GetTargetDesiredRotationYaw, OutYaw) == 0x000000, "Member 'SHFleshLipLocomotionAnimInstance_GetTargetDesiredRotationYaw::OutYaw' has a wrong offset!");

// Function SHProto.SHFleshLipLocomotionAnimInstance.GetTargetDesiredVelocity
// 0x0018 (0x0018 - 0x0000)
struct SHFleshLipLocomotionAnimInstance_GetTargetDesiredVelocity final
{
public:
	struct FVector                                OutVelocity;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipLocomotionAnimInstance_GetTargetDesiredVelocity) == 0x000008, "Wrong alignment on SHFleshLipLocomotionAnimInstance_GetTargetDesiredVelocity");
static_assert(sizeof(SHFleshLipLocomotionAnimInstance_GetTargetDesiredVelocity) == 0x000018, "Wrong size on SHFleshLipLocomotionAnimInstance_GetTargetDesiredVelocity");
static_assert(offsetof(SHFleshLipLocomotionAnimInstance_GetTargetDesiredVelocity, OutVelocity) == 0x000000, "Member 'SHFleshLipLocomotionAnimInstance_GetTargetDesiredVelocity::OutVelocity' has a wrong offset!");

// Function SHProto.SHFleshLipLocomotionAnimInstance.GetTargetDesiredVelocitySizeAndYaw
// 0x0008 (0x0008 - 0x0000)
struct SHFleshLipLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw final
{
public:
	float                                         OutVelocitySize;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVelocityYaw;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw) == 0x000004, "Wrong alignment on SHFleshLipLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw");
static_assert(sizeof(SHFleshLipLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw) == 0x000008, "Wrong size on SHFleshLipLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw");
static_assert(offsetof(SHFleshLipLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw, OutVelocitySize) == 0x000000, "Member 'SHFleshLipLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw::OutVelocitySize' has a wrong offset!");
static_assert(offsetof(SHFleshLipLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw, OutVelocityYaw) == 0x000004, "Member 'SHFleshLipLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw::OutVelocityYaw' has a wrong offset!");

// Function SHProto.SHFleshLipLocomotionAnimInstance.GetTargetLookAtAlpha
// 0x0004 (0x0004 - 0x0000)
struct SHFleshLipLocomotionAnimInstance_GetTargetLookAtAlpha final
{
public:
	float                                         OutAlpha;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipLocomotionAnimInstance_GetTargetLookAtAlpha) == 0x000004, "Wrong alignment on SHFleshLipLocomotionAnimInstance_GetTargetLookAtAlpha");
static_assert(sizeof(SHFleshLipLocomotionAnimInstance_GetTargetLookAtAlpha) == 0x000004, "Wrong size on SHFleshLipLocomotionAnimInstance_GetTargetLookAtAlpha");
static_assert(offsetof(SHFleshLipLocomotionAnimInstance_GetTargetLookAtAlpha, OutAlpha) == 0x000000, "Member 'SHFleshLipLocomotionAnimInstance_GetTargetLookAtAlpha::OutAlpha' has a wrong offset!");

// Function SHProto.SHGameplayRangedWeaponDetailsWidget.ProcessEquippedWeaponModifiedEvent
// 0x0008 (0x0008 - 0x0000)
struct SHGameplayRangedWeaponDetailsWidget_ProcessEquippedWeaponModifiedEvent final
{
public:
	class USHWeaponManageCmbSubcomp*              WeaponManagement;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayRangedWeaponDetailsWidget_ProcessEquippedWeaponModifiedEvent) == 0x000008, "Wrong alignment on SHGameplayRangedWeaponDetailsWidget_ProcessEquippedWeaponModifiedEvent");
static_assert(sizeof(SHGameplayRangedWeaponDetailsWidget_ProcessEquippedWeaponModifiedEvent) == 0x000008, "Wrong size on SHGameplayRangedWeaponDetailsWidget_ProcessEquippedWeaponModifiedEvent");
static_assert(offsetof(SHGameplayRangedWeaponDetailsWidget_ProcessEquippedWeaponModifiedEvent, WeaponManagement) == 0x000000, "Member 'SHGameplayRangedWeaponDetailsWidget_ProcessEquippedWeaponModifiedEvent::WeaponManagement' has a wrong offset!");

// Function SHProto.SHGameplayRangedWeaponDetailsWidget.ProcessRangedAimStateChangedEvent
// 0x0008 (0x0008 - 0x0000)
struct SHGameplayRangedWeaponDetailsWidget_ProcessRangedAimStateChangedEvent final
{
public:
	class USHRangedCmbSubcomp*                    RangedManagement;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayRangedWeaponDetailsWidget_ProcessRangedAimStateChangedEvent) == 0x000008, "Wrong alignment on SHGameplayRangedWeaponDetailsWidget_ProcessRangedAimStateChangedEvent");
static_assert(sizeof(SHGameplayRangedWeaponDetailsWidget_ProcessRangedAimStateChangedEvent) == 0x000008, "Wrong size on SHGameplayRangedWeaponDetailsWidget_ProcessRangedAimStateChangedEvent");
static_assert(offsetof(SHGameplayRangedWeaponDetailsWidget_ProcessRangedAimStateChangedEvent, RangedManagement) == 0x000000, "Member 'SHGameplayRangedWeaponDetailsWidget_ProcessRangedAimStateChangedEvent::RangedManagement' has a wrong offset!");

// Function SHProto.SHCineCameraComponent.TrackCharacterBone
// 0x0010 (0x0010 - 0x0000)
struct SHCineCameraComponent_TrackCharacterBone final
{
public:
	class ACharacter*                             InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InCharacterBoneName;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCineCameraComponent_TrackCharacterBone) == 0x000008, "Wrong alignment on SHCineCameraComponent_TrackCharacterBone");
static_assert(sizeof(SHCineCameraComponent_TrackCharacterBone) == 0x000010, "Wrong size on SHCineCameraComponent_TrackCharacterBone");
static_assert(offsetof(SHCineCameraComponent_TrackCharacterBone, InCharacter) == 0x000000, "Member 'SHCineCameraComponent_TrackCharacterBone::InCharacter' has a wrong offset!");
static_assert(offsetof(SHCineCameraComponent_TrackCharacterBone, InCharacterBoneName) == 0x000008, "Member 'SHCineCameraComponent_TrackCharacterBone::InCharacterBoneName' has a wrong offset!");

// Function SHProto.SHCineCameraComponent.TrackComponent
// 0x0008 (0x0008 - 0x0000)
struct SHCineCameraComponent_TrackComponent final
{
public:
	class USceneComponent*                        InComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCineCameraComponent_TrackComponent) == 0x000008, "Wrong alignment on SHCineCameraComponent_TrackComponent");
static_assert(sizeof(SHCineCameraComponent_TrackComponent) == 0x000008, "Wrong size on SHCineCameraComponent_TrackComponent");
static_assert(offsetof(SHCineCameraComponent_TrackComponent, InComponent) == 0x000000, "Member 'SHCineCameraComponent_TrackComponent::InComponent' has a wrong offset!");

// Function SHProto.SHCineCameraComponent.TrackSkeletalMeshBone
// 0x0010 (0x0010 - 0x0000)
struct SHCineCameraComponent_TrackSkeletalMeshBone final
{
public:
	class USkeletalMeshComponent*                 InComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InBoneName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCineCameraComponent_TrackSkeletalMeshBone) == 0x000008, "Wrong alignment on SHCineCameraComponent_TrackSkeletalMeshBone");
static_assert(sizeof(SHCineCameraComponent_TrackSkeletalMeshBone) == 0x000010, "Wrong size on SHCineCameraComponent_TrackSkeletalMeshBone");
static_assert(offsetof(SHCineCameraComponent_TrackSkeletalMeshBone, InComponent) == 0x000000, "Member 'SHCineCameraComponent_TrackSkeletalMeshBone::InComponent' has a wrong offset!");
static_assert(offsetof(SHCineCameraComponent_TrackSkeletalMeshBone, InBoneName) == 0x000008, "Member 'SHCineCameraComponent_TrackSkeletalMeshBone::InBoneName' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingActor.ApplyTilesPressure
// 0x0028 (0x0028 - 0x0000)
struct SHFleshLipCeilingActor_ApplyTilesPressure final
{
public:
	struct FVector                                InWorldLocation;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPushDepth;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRadius;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InLimitedByBars;                                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIfTileExistsAtLocation;                          // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InParticlesSpawnAlphaThreshold;                    // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipCeilingActor_ApplyTilesPressure) == 0x000008, "Wrong alignment on SHFleshLipCeilingActor_ApplyTilesPressure");
static_assert(sizeof(SHFleshLipCeilingActor_ApplyTilesPressure) == 0x000028, "Wrong size on SHFleshLipCeilingActor_ApplyTilesPressure");
static_assert(offsetof(SHFleshLipCeilingActor_ApplyTilesPressure, InWorldLocation) == 0x000000, "Member 'SHFleshLipCeilingActor_ApplyTilesPressure::InWorldLocation' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_ApplyTilesPressure, InPushDepth) == 0x000018, "Member 'SHFleshLipCeilingActor_ApplyTilesPressure::InPushDepth' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_ApplyTilesPressure, InRadius) == 0x00001C, "Member 'SHFleshLipCeilingActor_ApplyTilesPressure::InRadius' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_ApplyTilesPressure, InLimitedByBars) == 0x000020, "Member 'SHFleshLipCeilingActor_ApplyTilesPressure::InLimitedByBars' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_ApplyTilesPressure, InIfTileExistsAtLocation) == 0x000021, "Member 'SHFleshLipCeilingActor_ApplyTilesPressure::InIfTileExistsAtLocation' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_ApplyTilesPressure, InParticlesSpawnAlphaThreshold) == 0x000024, "Member 'SHFleshLipCeilingActor_ApplyTilesPressure::InParticlesSpawnAlphaThreshold' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingActor.BreakCeilingTilesAtWorldLocation
// 0x0038 (0x0038 - 0x0000)
struct SHFleshLipCeilingActor_BreakCeilingTilesAtWorldLocation final
{
public:
	struct FVector                                InWorldLocation;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRadius;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InLimitedByBars;                                   // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InVerticalVelocity;                                // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InHorizontalVelocity;                              // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMaximumRotation;                                 // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSimpleBentCurve                       InForceDistribution;                               // 0x002C(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFleshLipCeilingActor_BreakCeilingTilesAtWorldLocation) == 0x000008, "Wrong alignment on SHFleshLipCeilingActor_BreakCeilingTilesAtWorldLocation");
static_assert(sizeof(SHFleshLipCeilingActor_BreakCeilingTilesAtWorldLocation) == 0x000038, "Wrong size on SHFleshLipCeilingActor_BreakCeilingTilesAtWorldLocation");
static_assert(offsetof(SHFleshLipCeilingActor_BreakCeilingTilesAtWorldLocation, InWorldLocation) == 0x000000, "Member 'SHFleshLipCeilingActor_BreakCeilingTilesAtWorldLocation::InWorldLocation' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_BreakCeilingTilesAtWorldLocation, InRadius) == 0x000018, "Member 'SHFleshLipCeilingActor_BreakCeilingTilesAtWorldLocation::InRadius' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_BreakCeilingTilesAtWorldLocation, InLimitedByBars) == 0x00001C, "Member 'SHFleshLipCeilingActor_BreakCeilingTilesAtWorldLocation::InLimitedByBars' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_BreakCeilingTilesAtWorldLocation, InVerticalVelocity) == 0x000020, "Member 'SHFleshLipCeilingActor_BreakCeilingTilesAtWorldLocation::InVerticalVelocity' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_BreakCeilingTilesAtWorldLocation, InHorizontalVelocity) == 0x000024, "Member 'SHFleshLipCeilingActor_BreakCeilingTilesAtWorldLocation::InHorizontalVelocity' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_BreakCeilingTilesAtWorldLocation, InMaximumRotation) == 0x000028, "Member 'SHFleshLipCeilingActor_BreakCeilingTilesAtWorldLocation::InMaximumRotation' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_BreakCeilingTilesAtWorldLocation, InForceDistribution) == 0x00002C, "Member 'SHFleshLipCeilingActor_BreakCeilingTilesAtWorldLocation::InForceDistribution' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingActor.DamageCeilingTile
// 0x0040 (0x0040 - 0x0000)
struct SHFleshLipCeilingActor_DamageCeilingTile final
{
public:
	int32                                         InTileX;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InTileY;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InHitLocation;                                     // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InHitVelocity;                                     // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMaximumDropRotation;                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFleshLipCeilingActor_DamageCeilingTile) == 0x000008, "Wrong alignment on SHFleshLipCeilingActor_DamageCeilingTile");
static_assert(sizeof(SHFleshLipCeilingActor_DamageCeilingTile) == 0x000040, "Wrong size on SHFleshLipCeilingActor_DamageCeilingTile");
static_assert(offsetof(SHFleshLipCeilingActor_DamageCeilingTile, InTileX) == 0x000000, "Member 'SHFleshLipCeilingActor_DamageCeilingTile::InTileX' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_DamageCeilingTile, InTileY) == 0x000004, "Member 'SHFleshLipCeilingActor_DamageCeilingTile::InTileY' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_DamageCeilingTile, InHitLocation) == 0x000008, "Member 'SHFleshLipCeilingActor_DamageCeilingTile::InHitLocation' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_DamageCeilingTile, InHitVelocity) == 0x000020, "Member 'SHFleshLipCeilingActor_DamageCeilingTile::InHitVelocity' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_DamageCeilingTile, InMaximumDropRotation) == 0x000038, "Member 'SHFleshLipCeilingActor_DamageCeilingTile::InMaximumDropRotation' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingActor.DestroyCeilingTile
// 0x000C (0x000C - 0x0000)
struct SHFleshLipCeilingActor_DestroyCeilingTile final
{
public:
	int32                                         InTileX;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InTileY;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDropHangingNeighbours;                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFleshLipCeilingActor_DestroyCeilingTile) == 0x000004, "Wrong alignment on SHFleshLipCeilingActor_DestroyCeilingTile");
static_assert(sizeof(SHFleshLipCeilingActor_DestroyCeilingTile) == 0x00000C, "Wrong size on SHFleshLipCeilingActor_DestroyCeilingTile");
static_assert(offsetof(SHFleshLipCeilingActor_DestroyCeilingTile, InTileX) == 0x000000, "Member 'SHFleshLipCeilingActor_DestroyCeilingTile::InTileX' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_DestroyCeilingTile, InTileY) == 0x000004, "Member 'SHFleshLipCeilingActor_DestroyCeilingTile::InTileY' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_DestroyCeilingTile, InDropHangingNeighbours) == 0x000008, "Member 'SHFleshLipCeilingActor_DestroyCeilingTile::InDropHangingNeighbours' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingActor.DestroyCeilingTilesAtWorldLocation
// 0x0020 (0x0020 - 0x0000)
struct SHFleshLipCeilingActor_DestroyCeilingTilesAtWorldLocation final
{
public:
	struct FVector                                InWorldLocation;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRadius;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InLimitedByBars;                                   // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDropHangingNeighbours;                           // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFleshLipCeilingActor_DestroyCeilingTilesAtWorldLocation) == 0x000008, "Wrong alignment on SHFleshLipCeilingActor_DestroyCeilingTilesAtWorldLocation");
static_assert(sizeof(SHFleshLipCeilingActor_DestroyCeilingTilesAtWorldLocation) == 0x000020, "Wrong size on SHFleshLipCeilingActor_DestroyCeilingTilesAtWorldLocation");
static_assert(offsetof(SHFleshLipCeilingActor_DestroyCeilingTilesAtWorldLocation, InWorldLocation) == 0x000000, "Member 'SHFleshLipCeilingActor_DestroyCeilingTilesAtWorldLocation::InWorldLocation' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_DestroyCeilingTilesAtWorldLocation, InRadius) == 0x000018, "Member 'SHFleshLipCeilingActor_DestroyCeilingTilesAtWorldLocation::InRadius' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_DestroyCeilingTilesAtWorldLocation, InLimitedByBars) == 0x00001C, "Member 'SHFleshLipCeilingActor_DestroyCeilingTilesAtWorldLocation::InLimitedByBars' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_DestroyCeilingTilesAtWorldLocation, InDropHangingNeighbours) == 0x00001D, "Member 'SHFleshLipCeilingActor_DestroyCeilingTilesAtWorldLocation::InDropHangingNeighbours' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingActor.DropCeilingTile
// 0x0040 (0x0040 - 0x0000)
struct SHFleshLipCeilingActor_DropCeilingTile final
{
public:
	int32                                         InTileX;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InTileY;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDropDelay;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InOverrideExistingDelay;                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InDropVelocity;                                    // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InDropRotation;                                    // 0x0028(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipCeilingActor_DropCeilingTile) == 0x000008, "Wrong alignment on SHFleshLipCeilingActor_DropCeilingTile");
static_assert(sizeof(SHFleshLipCeilingActor_DropCeilingTile) == 0x000040, "Wrong size on SHFleshLipCeilingActor_DropCeilingTile");
static_assert(offsetof(SHFleshLipCeilingActor_DropCeilingTile, InTileX) == 0x000000, "Member 'SHFleshLipCeilingActor_DropCeilingTile::InTileX' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_DropCeilingTile, InTileY) == 0x000004, "Member 'SHFleshLipCeilingActor_DropCeilingTile::InTileY' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_DropCeilingTile, InDropDelay) == 0x000008, "Member 'SHFleshLipCeilingActor_DropCeilingTile::InDropDelay' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_DropCeilingTile, InOverrideExistingDelay) == 0x00000C, "Member 'SHFleshLipCeilingActor_DropCeilingTile::InOverrideExistingDelay' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_DropCeilingTile, InDropVelocity) == 0x000010, "Member 'SHFleshLipCeilingActor_DropCeilingTile::InDropVelocity' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_DropCeilingTile, InDropRotation) == 0x000028, "Member 'SHFleshLipCeilingActor_DropCeilingTile::InDropRotation' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingActor.GetCeilingTileActorAtCoordinates
// 0x0018 (0x0018 - 0x0000)
struct SHFleshLipCeilingActor_GetCeilingTileActorAtCoordinates final
{
public:
	int32                                         InTileX;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InTileY;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InConvertFromInstance;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASHFleshLipCeilingTileActor*            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipCeilingActor_GetCeilingTileActorAtCoordinates) == 0x000008, "Wrong alignment on SHFleshLipCeilingActor_GetCeilingTileActorAtCoordinates");
static_assert(sizeof(SHFleshLipCeilingActor_GetCeilingTileActorAtCoordinates) == 0x000018, "Wrong size on SHFleshLipCeilingActor_GetCeilingTileActorAtCoordinates");
static_assert(offsetof(SHFleshLipCeilingActor_GetCeilingTileActorAtCoordinates, InTileX) == 0x000000, "Member 'SHFleshLipCeilingActor_GetCeilingTileActorAtCoordinates::InTileX' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetCeilingTileActorAtCoordinates, InTileY) == 0x000004, "Member 'SHFleshLipCeilingActor_GetCeilingTileActorAtCoordinates::InTileY' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetCeilingTileActorAtCoordinates, InConvertFromInstance) == 0x000008, "Member 'SHFleshLipCeilingActor_GetCeilingTileActorAtCoordinates::InConvertFromInstance' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetCeilingTileActorAtCoordinates, ReturnValue) == 0x000010, "Member 'SHFleshLipCeilingActor_GetCeilingTileActorAtCoordinates::ReturnValue' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingActor.GetCeilingTileActorAtWorldLocation
// 0x0028 (0x0028 - 0x0000)
struct SHFleshLipCeilingActor_GetCeilingTileActorAtWorldLocation final
{
public:
	struct FVector                                InWorldLocation;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InConvertFromInstance;                             // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASHFleshLipCeilingTileActor*            ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipCeilingActor_GetCeilingTileActorAtWorldLocation) == 0x000008, "Wrong alignment on SHFleshLipCeilingActor_GetCeilingTileActorAtWorldLocation");
static_assert(sizeof(SHFleshLipCeilingActor_GetCeilingTileActorAtWorldLocation) == 0x000028, "Wrong size on SHFleshLipCeilingActor_GetCeilingTileActorAtWorldLocation");
static_assert(offsetof(SHFleshLipCeilingActor_GetCeilingTileActorAtWorldLocation, InWorldLocation) == 0x000000, "Member 'SHFleshLipCeilingActor_GetCeilingTileActorAtWorldLocation::InWorldLocation' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetCeilingTileActorAtWorldLocation, InConvertFromInstance) == 0x000018, "Member 'SHFleshLipCeilingActor_GetCeilingTileActorAtWorldLocation::InConvertFromInstance' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetCeilingTileActorAtWorldLocation, ReturnValue) == 0x000020, "Member 'SHFleshLipCeilingActor_GetCeilingTileActorAtWorldLocation::ReturnValue' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingActor.GetCeilingTileActorsBetweenCoordinates
// 0x0028 (0x0028 - 0x0000)
struct SHFleshLipCeilingActor_GetCeilingTileActorsBetweenCoordinates final
{
public:
	TArray<class ASHFleshLipCeilingTileActor*>    OutTileActors;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InFromTileX;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InFromTileY;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InToTileX;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InToTileY;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InConvertFromInstances;                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFleshLipCeilingActor_GetCeilingTileActorsBetweenCoordinates) == 0x000008, "Wrong alignment on SHFleshLipCeilingActor_GetCeilingTileActorsBetweenCoordinates");
static_assert(sizeof(SHFleshLipCeilingActor_GetCeilingTileActorsBetweenCoordinates) == 0x000028, "Wrong size on SHFleshLipCeilingActor_GetCeilingTileActorsBetweenCoordinates");
static_assert(offsetof(SHFleshLipCeilingActor_GetCeilingTileActorsBetweenCoordinates, OutTileActors) == 0x000000, "Member 'SHFleshLipCeilingActor_GetCeilingTileActorsBetweenCoordinates::OutTileActors' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetCeilingTileActorsBetweenCoordinates, InFromTileX) == 0x000010, "Member 'SHFleshLipCeilingActor_GetCeilingTileActorsBetweenCoordinates::InFromTileX' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetCeilingTileActorsBetweenCoordinates, InFromTileY) == 0x000014, "Member 'SHFleshLipCeilingActor_GetCeilingTileActorsBetweenCoordinates::InFromTileY' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetCeilingTileActorsBetweenCoordinates, InToTileX) == 0x000018, "Member 'SHFleshLipCeilingActor_GetCeilingTileActorsBetweenCoordinates::InToTileX' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetCeilingTileActorsBetweenCoordinates, InToTileY) == 0x00001C, "Member 'SHFleshLipCeilingActor_GetCeilingTileActorsBetweenCoordinates::InToTileY' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetCeilingTileActorsBetweenCoordinates, InConvertFromInstances) == 0x000020, "Member 'SHFleshLipCeilingActor_GetCeilingTileActorsBetweenCoordinates::InConvertFromInstances' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingActor.GetCeilingTileActorsBetweenWorldLocations
// 0x0048 (0x0048 - 0x0000)
struct SHFleshLipCeilingActor_GetCeilingTileActorsBetweenWorldLocations final
{
public:
	TArray<class ASHFleshLipCeilingTileActor*>    OutTileActors;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                InFromWorldLocation;                               // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InToWorldLocation;                                 // 0x0028(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InConvertFromInstances;                            // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFleshLipCeilingActor_GetCeilingTileActorsBetweenWorldLocations) == 0x000008, "Wrong alignment on SHFleshLipCeilingActor_GetCeilingTileActorsBetweenWorldLocations");
static_assert(sizeof(SHFleshLipCeilingActor_GetCeilingTileActorsBetweenWorldLocations) == 0x000048, "Wrong size on SHFleshLipCeilingActor_GetCeilingTileActorsBetweenWorldLocations");
static_assert(offsetof(SHFleshLipCeilingActor_GetCeilingTileActorsBetweenWorldLocations, OutTileActors) == 0x000000, "Member 'SHFleshLipCeilingActor_GetCeilingTileActorsBetweenWorldLocations::OutTileActors' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetCeilingTileActorsBetweenWorldLocations, InFromWorldLocation) == 0x000010, "Member 'SHFleshLipCeilingActor_GetCeilingTileActorsBetweenWorldLocations::InFromWorldLocation' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetCeilingTileActorsBetweenWorldLocations, InToWorldLocation) == 0x000028, "Member 'SHFleshLipCeilingActor_GetCeilingTileActorsBetweenWorldLocations::InToWorldLocation' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetCeilingTileActorsBetweenWorldLocations, InConvertFromInstances) == 0x000040, "Member 'SHFleshLipCeilingActor_GetCeilingTileActorsBetweenWorldLocations::InConvertFromInstances' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingActor.OnTileParticlesSystemFinished
// 0x0008 (0x0008 - 0x0000)
struct SHFleshLipCeilingActor_OnTileParticlesSystemFinished final
{
public:
	class UNiagaraComponent*                      InParticlesComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipCeilingActor_OnTileParticlesSystemFinished) == 0x000008, "Wrong alignment on SHFleshLipCeilingActor_OnTileParticlesSystemFinished");
static_assert(sizeof(SHFleshLipCeilingActor_OnTileParticlesSystemFinished) == 0x000008, "Wrong size on SHFleshLipCeilingActor_OnTileParticlesSystemFinished");
static_assert(offsetof(SHFleshLipCeilingActor_OnTileParticlesSystemFinished, InParticlesComponent) == 0x000000, "Member 'SHFleshLipCeilingActor_OnTileParticlesSystemFinished::InParticlesComponent' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingActor.SetIgnoreCollisionWithActor
// 0x0010 (0x0010 - 0x0000)
struct SHFleshLipCeilingActor_SetIgnoreCollisionWithActor final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIgnoreCollision;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFleshLipCeilingActor_SetIgnoreCollisionWithActor) == 0x000008, "Wrong alignment on SHFleshLipCeilingActor_SetIgnoreCollisionWithActor");
static_assert(sizeof(SHFleshLipCeilingActor_SetIgnoreCollisionWithActor) == 0x000010, "Wrong size on SHFleshLipCeilingActor_SetIgnoreCollisionWithActor");
static_assert(offsetof(SHFleshLipCeilingActor_SetIgnoreCollisionWithActor, InActor) == 0x000000, "Member 'SHFleshLipCeilingActor_SetIgnoreCollisionWithActor::InActor' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_SetIgnoreCollisionWithActor, InIgnoreCollision) == 0x000008, "Member 'SHFleshLipCeilingActor_SetIgnoreCollisionWithActor::InIgnoreCollision' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingActor.SetTileTransformRelativeToCell
// 0x0080 (0x0080 - 0x0000)
struct SHFleshLipCeilingActor_SetTileTransformRelativeToCell final
{
public:
	struct FVector2D                              InTileCoordinates;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             InTransformInCell;                                 // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InAllowForDisconnectedTile;                        // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0071(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0xE];                                       // 0x0072(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFleshLipCeilingActor_SetTileTransformRelativeToCell) == 0x000010, "Wrong alignment on SHFleshLipCeilingActor_SetTileTransformRelativeToCell");
static_assert(sizeof(SHFleshLipCeilingActor_SetTileTransformRelativeToCell) == 0x000080, "Wrong size on SHFleshLipCeilingActor_SetTileTransformRelativeToCell");
static_assert(offsetof(SHFleshLipCeilingActor_SetTileTransformRelativeToCell, InTileCoordinates) == 0x000000, "Member 'SHFleshLipCeilingActor_SetTileTransformRelativeToCell::InTileCoordinates' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_SetTileTransformRelativeToCell, InTransformInCell) == 0x000010, "Member 'SHFleshLipCeilingActor_SetTileTransformRelativeToCell::InTransformInCell' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_SetTileTransformRelativeToCell, InAllowForDisconnectedTile) == 0x000070, "Member 'SHFleshLipCeilingActor_SetTileTransformRelativeToCell::InAllowForDisconnectedTile' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_SetTileTransformRelativeToCell, ReturnValue) == 0x000071, "Member 'SHFleshLipCeilingActor_SetTileTransformRelativeToCell::ReturnValue' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingActor.SetTileWorldTransform
// 0x0080 (0x0080 - 0x0000)
struct SHFleshLipCeilingActor_SetTileWorldTransform final
{
public:
	struct FVector2D                              InTileCoordinates;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             InWorldTransform;                                  // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InAllowForDisconnectedTile;                        // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0071(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0xE];                                       // 0x0072(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFleshLipCeilingActor_SetTileWorldTransform) == 0x000010, "Wrong alignment on SHFleshLipCeilingActor_SetTileWorldTransform");
static_assert(sizeof(SHFleshLipCeilingActor_SetTileWorldTransform) == 0x000080, "Wrong size on SHFleshLipCeilingActor_SetTileWorldTransform");
static_assert(offsetof(SHFleshLipCeilingActor_SetTileWorldTransform, InTileCoordinates) == 0x000000, "Member 'SHFleshLipCeilingActor_SetTileWorldTransform::InTileCoordinates' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_SetTileWorldTransform, InWorldTransform) == 0x000010, "Member 'SHFleshLipCeilingActor_SetTileWorldTransform::InWorldTransform' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_SetTileWorldTransform, InAllowForDisconnectedTile) == 0x000070, "Member 'SHFleshLipCeilingActor_SetTileWorldTransform::InAllowForDisconnectedTile' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_SetTileWorldTransform, ReturnValue) == 0x000071, "Member 'SHFleshLipCeilingActor_SetTileWorldTransform::ReturnValue' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingActor.SpawnParticlesAtTiles
// 0x00A0 (0x00A0 - 0x0000)
struct SHFleshLipCeilingActor_SpawnParticlesAtTiles final
{
public:
	class UNiagaraSystem*                         InParticles;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InParticlesOffset;                                 // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InWorldLocation;                                   // 0x0070(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRadius;                                          // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InLimitedByBars;                                   // 0x008C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIfTileExistsAtLocation;                          // 0x008D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8E[0x2];                                       // 0x008E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InParticlesSpawnAlphaThreshold;                    // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InParticleDistanceAlphaParameterName;              // 0x0094(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFleshLipCeilingActor_SpawnParticlesAtTiles) == 0x000010, "Wrong alignment on SHFleshLipCeilingActor_SpawnParticlesAtTiles");
static_assert(sizeof(SHFleshLipCeilingActor_SpawnParticlesAtTiles) == 0x0000A0, "Wrong size on SHFleshLipCeilingActor_SpawnParticlesAtTiles");
static_assert(offsetof(SHFleshLipCeilingActor_SpawnParticlesAtTiles, InParticles) == 0x000000, "Member 'SHFleshLipCeilingActor_SpawnParticlesAtTiles::InParticles' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_SpawnParticlesAtTiles, InParticlesOffset) == 0x000010, "Member 'SHFleshLipCeilingActor_SpawnParticlesAtTiles::InParticlesOffset' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_SpawnParticlesAtTiles, InWorldLocation) == 0x000070, "Member 'SHFleshLipCeilingActor_SpawnParticlesAtTiles::InWorldLocation' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_SpawnParticlesAtTiles, InRadius) == 0x000088, "Member 'SHFleshLipCeilingActor_SpawnParticlesAtTiles::InRadius' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_SpawnParticlesAtTiles, InLimitedByBars) == 0x00008C, "Member 'SHFleshLipCeilingActor_SpawnParticlesAtTiles::InLimitedByBars' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_SpawnParticlesAtTiles, InIfTileExistsAtLocation) == 0x00008D, "Member 'SHFleshLipCeilingActor_SpawnParticlesAtTiles::InIfTileExistsAtLocation' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_SpawnParticlesAtTiles, InParticlesSpawnAlphaThreshold) == 0x000090, "Member 'SHFleshLipCeilingActor_SpawnParticlesAtTiles::InParticlesSpawnAlphaThreshold' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_SpawnParticlesAtTiles, InParticleDistanceAlphaParameterName) == 0x000094, "Member 'SHFleshLipCeilingActor_SpawnParticlesAtTiles::InParticleDistanceAlphaParameterName' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingActor.AreTileCoordinatesValid
// 0x000C (0x000C - 0x0000)
struct SHFleshLipCeilingActor_AreTileCoordinatesValid final
{
public:
	int32                                         InTileX;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InTileY;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFleshLipCeilingActor_AreTileCoordinatesValid) == 0x000004, "Wrong alignment on SHFleshLipCeilingActor_AreTileCoordinatesValid");
static_assert(sizeof(SHFleshLipCeilingActor_AreTileCoordinatesValid) == 0x00000C, "Wrong size on SHFleshLipCeilingActor_AreTileCoordinatesValid");
static_assert(offsetof(SHFleshLipCeilingActor_AreTileCoordinatesValid, InTileX) == 0x000000, "Member 'SHFleshLipCeilingActor_AreTileCoordinatesValid::InTileX' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_AreTileCoordinatesValid, InTileY) == 0x000004, "Member 'SHFleshLipCeilingActor_AreTileCoordinatesValid::InTileY' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_AreTileCoordinatesValid, ReturnValue) == 0x000008, "Member 'SHFleshLipCeilingActor_AreTileCoordinatesValid::ReturnValue' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingActor.DoesCeilingTileAtCoordinatesExist
// 0x000C (0x000C - 0x0000)
struct SHFleshLipCeilingActor_DoesCeilingTileAtCoordinatesExist final
{
public:
	int32                                         InTileX;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InTileY;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InAllowDisconnected;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFleshLipCeilingActor_DoesCeilingTileAtCoordinatesExist) == 0x000004, "Wrong alignment on SHFleshLipCeilingActor_DoesCeilingTileAtCoordinatesExist");
static_assert(sizeof(SHFleshLipCeilingActor_DoesCeilingTileAtCoordinatesExist) == 0x00000C, "Wrong size on SHFleshLipCeilingActor_DoesCeilingTileAtCoordinatesExist");
static_assert(offsetof(SHFleshLipCeilingActor_DoesCeilingTileAtCoordinatesExist, InTileX) == 0x000000, "Member 'SHFleshLipCeilingActor_DoesCeilingTileAtCoordinatesExist::InTileX' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_DoesCeilingTileAtCoordinatesExist, InTileY) == 0x000004, "Member 'SHFleshLipCeilingActor_DoesCeilingTileAtCoordinatesExist::InTileY' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_DoesCeilingTileAtCoordinatesExist, InAllowDisconnected) == 0x000008, "Member 'SHFleshLipCeilingActor_DoesCeilingTileAtCoordinatesExist::InAllowDisconnected' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_DoesCeilingTileAtCoordinatesExist, ReturnValue) == 0x000009, "Member 'SHFleshLipCeilingActor_DoesCeilingTileAtCoordinatesExist::ReturnValue' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingActor.DoesCeilingTileAtWorldLocationExist
// 0x0020 (0x0020 - 0x0000)
struct SHFleshLipCeilingActor_DoesCeilingTileAtWorldLocationExist final
{
public:
	struct FVector                                InWorldLocation;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InAllowDisconnected;                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFleshLipCeilingActor_DoesCeilingTileAtWorldLocationExist) == 0x000008, "Wrong alignment on SHFleshLipCeilingActor_DoesCeilingTileAtWorldLocationExist");
static_assert(sizeof(SHFleshLipCeilingActor_DoesCeilingTileAtWorldLocationExist) == 0x000020, "Wrong size on SHFleshLipCeilingActor_DoesCeilingTileAtWorldLocationExist");
static_assert(offsetof(SHFleshLipCeilingActor_DoesCeilingTileAtWorldLocationExist, InWorldLocation) == 0x000000, "Member 'SHFleshLipCeilingActor_DoesCeilingTileAtWorldLocationExist::InWorldLocation' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_DoesCeilingTileAtWorldLocationExist, InAllowDisconnected) == 0x000018, "Member 'SHFleshLipCeilingActor_DoesCeilingTileAtWorldLocationExist::InAllowDisconnected' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_DoesCeilingTileAtWorldLocationExist, ReturnValue) == 0x000019, "Member 'SHFleshLipCeilingActor_DoesCeilingTileAtWorldLocationExist::ReturnValue' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingActor.GetBarsFrameTileCoordinatesAroundTile
// 0x0028 (0x0028 - 0x0000)
struct SHFleshLipCeilingActor_GetBarsFrameTileCoordinatesAroundTile final
{
public:
	float                                         OutFrameMinX;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutFrameMinY;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutFrameMaxX;                                      // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutFrameMaxY;                                      // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InTileCoordinates;                                 // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InInnerMax;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFleshLipCeilingActor_GetBarsFrameTileCoordinatesAroundTile) == 0x000008, "Wrong alignment on SHFleshLipCeilingActor_GetBarsFrameTileCoordinatesAroundTile");
static_assert(sizeof(SHFleshLipCeilingActor_GetBarsFrameTileCoordinatesAroundTile) == 0x000028, "Wrong size on SHFleshLipCeilingActor_GetBarsFrameTileCoordinatesAroundTile");
static_assert(offsetof(SHFleshLipCeilingActor_GetBarsFrameTileCoordinatesAroundTile, OutFrameMinX) == 0x000000, "Member 'SHFleshLipCeilingActor_GetBarsFrameTileCoordinatesAroundTile::OutFrameMinX' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetBarsFrameTileCoordinatesAroundTile, OutFrameMinY) == 0x000004, "Member 'SHFleshLipCeilingActor_GetBarsFrameTileCoordinatesAroundTile::OutFrameMinY' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetBarsFrameTileCoordinatesAroundTile, OutFrameMaxX) == 0x000008, "Member 'SHFleshLipCeilingActor_GetBarsFrameTileCoordinatesAroundTile::OutFrameMaxX' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetBarsFrameTileCoordinatesAroundTile, OutFrameMaxY) == 0x00000C, "Member 'SHFleshLipCeilingActor_GetBarsFrameTileCoordinatesAroundTile::OutFrameMaxY' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetBarsFrameTileCoordinatesAroundTile, InTileCoordinates) == 0x000010, "Member 'SHFleshLipCeilingActor_GetBarsFrameTileCoordinatesAroundTile::InTileCoordinates' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetBarsFrameTileCoordinatesAroundTile, InInnerMax) == 0x000020, "Member 'SHFleshLipCeilingActor_GetBarsFrameTileCoordinatesAroundTile::InInnerMax' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingActor.GetCeilingSize
// 0x0010 (0x0010 - 0x0000)
struct SHFleshLipCeilingActor_GetCeilingSize final
{
public:
	struct FVector2D                              OutSize;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipCeilingActor_GetCeilingSize) == 0x000008, "Wrong alignment on SHFleshLipCeilingActor_GetCeilingSize");
static_assert(sizeof(SHFleshLipCeilingActor_GetCeilingSize) == 0x000010, "Wrong size on SHFleshLipCeilingActor_GetCeilingSize");
static_assert(offsetof(SHFleshLipCeilingActor_GetCeilingSize, OutSize) == 0x000000, "Member 'SHFleshLipCeilingActor_GetCeilingSize::OutSize' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingActor.GetNearestBarsGrabWorldTransform
// 0x0080 (0x0080 - 0x0000)
struct SHFleshLipCeilingActor_GetNearestBarsGrabWorldTransform final
{
public:
	struct FTransform                             OutWorldTransform;                                 // 0x0000(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InNearLocation;                                    // 0x0060(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InJunctionDistance;                                // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InExcludeEdges;                                    // 0x007C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFleshLipCeilingActor_GetNearestBarsGrabWorldTransform) == 0x000010, "Wrong alignment on SHFleshLipCeilingActor_GetNearestBarsGrabWorldTransform");
static_assert(sizeof(SHFleshLipCeilingActor_GetNearestBarsGrabWorldTransform) == 0x000080, "Wrong size on SHFleshLipCeilingActor_GetNearestBarsGrabWorldTransform");
static_assert(offsetof(SHFleshLipCeilingActor_GetNearestBarsGrabWorldTransform, OutWorldTransform) == 0x000000, "Member 'SHFleshLipCeilingActor_GetNearestBarsGrabWorldTransform::OutWorldTransform' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetNearestBarsGrabWorldTransform, InNearLocation) == 0x000060, "Member 'SHFleshLipCeilingActor_GetNearestBarsGrabWorldTransform::InNearLocation' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetNearestBarsGrabWorldTransform, InJunctionDistance) == 0x000078, "Member 'SHFleshLipCeilingActor_GetNearestBarsGrabWorldTransform::InJunctionDistance' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetNearestBarsGrabWorldTransform, InExcludeEdges) == 0x00007C, "Member 'SHFleshLipCeilingActor_GetNearestBarsGrabWorldTransform::InExcludeEdges' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingActor.GetNearestFreeWorldLocationBetweenBars
// 0x0038 (0x0038 - 0x0000)
struct SHFleshLipCeilingActor_GetNearestFreeWorldLocationBetweenBars final
{
public:
	struct FVector                                OutWorldLocation;                                  // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InNearLocation;                                    // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBarsDistance;                                    // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFleshLipCeilingActor_GetNearestFreeWorldLocationBetweenBars) == 0x000008, "Wrong alignment on SHFleshLipCeilingActor_GetNearestFreeWorldLocationBetweenBars");
static_assert(sizeof(SHFleshLipCeilingActor_GetNearestFreeWorldLocationBetweenBars) == 0x000038, "Wrong size on SHFleshLipCeilingActor_GetNearestFreeWorldLocationBetweenBars");
static_assert(offsetof(SHFleshLipCeilingActor_GetNearestFreeWorldLocationBetweenBars, OutWorldLocation) == 0x000000, "Member 'SHFleshLipCeilingActor_GetNearestFreeWorldLocationBetweenBars::OutWorldLocation' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetNearestFreeWorldLocationBetweenBars, InNearLocation) == 0x000018, "Member 'SHFleshLipCeilingActor_GetNearestFreeWorldLocationBetweenBars::InNearLocation' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetNearestFreeWorldLocationBetweenBars, InBarsDistance) == 0x000030, "Member 'SHFleshLipCeilingActor_GetNearestFreeWorldLocationBetweenBars::InBarsDistance' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingActor.GetTileCoordinatesFromGridLocation
// 0x0028 (0x0028 - 0x0000)
struct SHFleshLipCeilingActor_GetTileCoordinatesFromGridLocation final
{
public:
	struct FVector2D                              OutTileCoordinates;                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InGridLocation;                                    // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipCeilingActor_GetTileCoordinatesFromGridLocation) == 0x000008, "Wrong alignment on SHFleshLipCeilingActor_GetTileCoordinatesFromGridLocation");
static_assert(sizeof(SHFleshLipCeilingActor_GetTileCoordinatesFromGridLocation) == 0x000028, "Wrong size on SHFleshLipCeilingActor_GetTileCoordinatesFromGridLocation");
static_assert(offsetof(SHFleshLipCeilingActor_GetTileCoordinatesFromGridLocation, OutTileCoordinates) == 0x000000, "Member 'SHFleshLipCeilingActor_GetTileCoordinatesFromGridLocation::OutTileCoordinates' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetTileCoordinatesFromGridLocation, InGridLocation) == 0x000010, "Member 'SHFleshLipCeilingActor_GetTileCoordinatesFromGridLocation::InGridLocation' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingActor.GetTileCoordinatesFromWorldLocation
// 0x0028 (0x0028 - 0x0000)
struct SHFleshLipCeilingActor_GetTileCoordinatesFromWorldLocation final
{
public:
	struct FVector2D                              OutTileCoordinates;                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InWorldLocation;                                   // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipCeilingActor_GetTileCoordinatesFromWorldLocation) == 0x000008, "Wrong alignment on SHFleshLipCeilingActor_GetTileCoordinatesFromWorldLocation");
static_assert(sizeof(SHFleshLipCeilingActor_GetTileCoordinatesFromWorldLocation) == 0x000028, "Wrong size on SHFleshLipCeilingActor_GetTileCoordinatesFromWorldLocation");
static_assert(offsetof(SHFleshLipCeilingActor_GetTileCoordinatesFromWorldLocation, OutTileCoordinates) == 0x000000, "Member 'SHFleshLipCeilingActor_GetTileCoordinatesFromWorldLocation::OutTileCoordinates' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetTileCoordinatesFromWorldLocation, InWorldLocation) == 0x000010, "Member 'SHFleshLipCeilingActor_GetTileCoordinatesFromWorldLocation::InWorldLocation' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingActor.GetTileGridCellLocation
// 0x0028 (0x0028 - 0x0000)
struct SHFleshLipCeilingActor_GetTileGridCellLocation final
{
public:
	struct FVector2D                              InTileCoordinates;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipCeilingActor_GetTileGridCellLocation) == 0x000008, "Wrong alignment on SHFleshLipCeilingActor_GetTileGridCellLocation");
static_assert(sizeof(SHFleshLipCeilingActor_GetTileGridCellLocation) == 0x000028, "Wrong size on SHFleshLipCeilingActor_GetTileGridCellLocation");
static_assert(offsetof(SHFleshLipCeilingActor_GetTileGridCellLocation, InTileCoordinates) == 0x000000, "Member 'SHFleshLipCeilingActor_GetTileGridCellLocation::InTileCoordinates' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetTileGridCellLocation, ReturnValue) == 0x000010, "Member 'SHFleshLipCeilingActor_GetTileGridCellLocation::ReturnValue' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingActor.GetTileGridCellTransform
// 0x0070 (0x0070 - 0x0000)
struct SHFleshLipCeilingActor_GetTileGridCellTransform final
{
public:
	struct FVector2D                              InTileCoordinates;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipCeilingActor_GetTileGridCellTransform) == 0x000010, "Wrong alignment on SHFleshLipCeilingActor_GetTileGridCellTransform");
static_assert(sizeof(SHFleshLipCeilingActor_GetTileGridCellTransform) == 0x000070, "Wrong size on SHFleshLipCeilingActor_GetTileGridCellTransform");
static_assert(offsetof(SHFleshLipCeilingActor_GetTileGridCellTransform, InTileCoordinates) == 0x000000, "Member 'SHFleshLipCeilingActor_GetTileGridCellTransform::InTileCoordinates' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetTileGridCellTransform, ReturnValue) == 0x000010, "Member 'SHFleshLipCeilingActor_GetTileGridCellTransform::ReturnValue' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingActor.GetTileGridCellWorldLocation
// 0x0028 (0x0028 - 0x0000)
struct SHFleshLipCeilingActor_GetTileGridCellWorldLocation final
{
public:
	struct FVector2D                              InTileCoordinates;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipCeilingActor_GetTileGridCellWorldLocation) == 0x000008, "Wrong alignment on SHFleshLipCeilingActor_GetTileGridCellWorldLocation");
static_assert(sizeof(SHFleshLipCeilingActor_GetTileGridCellWorldLocation) == 0x000028, "Wrong size on SHFleshLipCeilingActor_GetTileGridCellWorldLocation");
static_assert(offsetof(SHFleshLipCeilingActor_GetTileGridCellWorldLocation, InTileCoordinates) == 0x000000, "Member 'SHFleshLipCeilingActor_GetTileGridCellWorldLocation::InTileCoordinates' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetTileGridCellWorldLocation, ReturnValue) == 0x000010, "Member 'SHFleshLipCeilingActor_GetTileGridCellWorldLocation::ReturnValue' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingActor.GetTileGridCellWorldTransform
// 0x0070 (0x0070 - 0x0000)
struct SHFleshLipCeilingActor_GetTileGridCellWorldTransform final
{
public:
	struct FVector2D                              InTileCoordinates;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipCeilingActor_GetTileGridCellWorldTransform) == 0x000010, "Wrong alignment on SHFleshLipCeilingActor_GetTileGridCellWorldTransform");
static_assert(sizeof(SHFleshLipCeilingActor_GetTileGridCellWorldTransform) == 0x000070, "Wrong size on SHFleshLipCeilingActor_GetTileGridCellWorldTransform");
static_assert(offsetof(SHFleshLipCeilingActor_GetTileGridCellWorldTransform, InTileCoordinates) == 0x000000, "Member 'SHFleshLipCeilingActor_GetTileGridCellWorldTransform::InTileCoordinates' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetTileGridCellWorldTransform, ReturnValue) == 0x000010, "Member 'SHFleshLipCeilingActor_GetTileGridCellWorldTransform::ReturnValue' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingActor.GetTileTransformRelativeToCell
// 0x0080 (0x0080 - 0x0000)
struct SHFleshLipCeilingActor_GetTileTransformRelativeToCell final
{
public:
	struct FVector2D                              InTileCoordinates;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             OutRelativeTransform;                              // 0x0010(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0xF];                                       // 0x0071(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFleshLipCeilingActor_GetTileTransformRelativeToCell) == 0x000010, "Wrong alignment on SHFleshLipCeilingActor_GetTileTransformRelativeToCell");
static_assert(sizeof(SHFleshLipCeilingActor_GetTileTransformRelativeToCell) == 0x000080, "Wrong size on SHFleshLipCeilingActor_GetTileTransformRelativeToCell");
static_assert(offsetof(SHFleshLipCeilingActor_GetTileTransformRelativeToCell, InTileCoordinates) == 0x000000, "Member 'SHFleshLipCeilingActor_GetTileTransformRelativeToCell::InTileCoordinates' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetTileTransformRelativeToCell, OutRelativeTransform) == 0x000010, "Member 'SHFleshLipCeilingActor_GetTileTransformRelativeToCell::OutRelativeTransform' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetTileTransformRelativeToCell, ReturnValue) == 0x000070, "Member 'SHFleshLipCeilingActor_GetTileTransformRelativeToCell::ReturnValue' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingActor.GetTileWorldTransform
// 0x0080 (0x0080 - 0x0000)
struct SHFleshLipCeilingActor_GetTileWorldTransform final
{
public:
	struct FVector2D                              InTileCoordinates;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             OutWorldTransform;                                 // 0x0010(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0xF];                                       // 0x0071(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFleshLipCeilingActor_GetTileWorldTransform) == 0x000010, "Wrong alignment on SHFleshLipCeilingActor_GetTileWorldTransform");
static_assert(sizeof(SHFleshLipCeilingActor_GetTileWorldTransform) == 0x000080, "Wrong size on SHFleshLipCeilingActor_GetTileWorldTransform");
static_assert(offsetof(SHFleshLipCeilingActor_GetTileWorldTransform, InTileCoordinates) == 0x000000, "Member 'SHFleshLipCeilingActor_GetTileWorldTransform::InTileCoordinates' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetTileWorldTransform, OutWorldTransform) == 0x000010, "Member 'SHFleshLipCeilingActor_GetTileWorldTransform::OutWorldTransform' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingActor_GetTileWorldTransform, ReturnValue) == 0x000070, "Member 'SHFleshLipCeilingActor_GetTileWorldTransform::ReturnValue' has a wrong offset!");

// Function SHProto.SHCombatPlayDeathInterface.GetDeathPlayerData
// 0x0098 (0x0098 - 0x0000)
struct SHCombatPlayDeathInterface_GetDeathPlayerData final
{
public:
	class ACharacter*                             Killed;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSHDeathPlayerData                     ReturnValue;                                       // 0x0008(0x0090)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCombatPlayDeathInterface_GetDeathPlayerData) == 0x000008, "Wrong alignment on SHCombatPlayDeathInterface_GetDeathPlayerData");
static_assert(sizeof(SHCombatPlayDeathInterface_GetDeathPlayerData) == 0x000098, "Wrong size on SHCombatPlayDeathInterface_GetDeathPlayerData");
static_assert(offsetof(SHCombatPlayDeathInterface_GetDeathPlayerData, Killed) == 0x000000, "Member 'SHCombatPlayDeathInterface_GetDeathPlayerData::Killed' has a wrong offset!");
static_assert(offsetof(SHCombatPlayDeathInterface_GetDeathPlayerData, ReturnValue) == 0x000008, "Member 'SHCombatPlayDeathInterface_GetDeathPlayerData::ReturnValue' has a wrong offset!");

// Function SHProto.SHCombatPlayDeathInterface.GetDeathPlayerDataForDebug
// 0x0098 (0x0098 - 0x0000)
struct SHCombatPlayDeathInterface_GetDeathPlayerDataForDebug final
{
public:
	class ACharacter*                             Killed;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSHDeathPlayerData                     ReturnValue;                                       // 0x0008(0x0090)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCombatPlayDeathInterface_GetDeathPlayerDataForDebug) == 0x000008, "Wrong alignment on SHCombatPlayDeathInterface_GetDeathPlayerDataForDebug");
static_assert(sizeof(SHCombatPlayDeathInterface_GetDeathPlayerDataForDebug) == 0x000098, "Wrong size on SHCombatPlayDeathInterface_GetDeathPlayerDataForDebug");
static_assert(offsetof(SHCombatPlayDeathInterface_GetDeathPlayerDataForDebug, Killed) == 0x000000, "Member 'SHCombatPlayDeathInterface_GetDeathPlayerDataForDebug::Killed' has a wrong offset!");
static_assert(offsetof(SHCombatPlayDeathInterface_GetDeathPlayerDataForDebug, ReturnValue) == 0x000008, "Member 'SHCombatPlayDeathInterface_GetDeathPlayerDataForDebug::ReturnValue' has a wrong offset!");

// Function SHProto.SHCombatPlayDeathInterface.PlayDeath
// 0x0020 (0x0020 - 0x0000)
struct SHCombatPlayDeathInterface_PlayDeath final
{
public:
	class ACharacter*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PawnAnimTag;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PlayerAnimTag;                                     // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHCombatPlayDeathInterface_PlayDeath) == 0x000008, "Wrong alignment on SHCombatPlayDeathInterface_PlayDeath");
static_assert(sizeof(SHCombatPlayDeathInterface_PlayDeath) == 0x000020, "Wrong size on SHCombatPlayDeathInterface_PlayDeath");
static_assert(offsetof(SHCombatPlayDeathInterface_PlayDeath, Player) == 0x000000, "Member 'SHCombatPlayDeathInterface_PlayDeath::Player' has a wrong offset!");
static_assert(offsetof(SHCombatPlayDeathInterface_PlayDeath, PawnAnimTag) == 0x000008, "Member 'SHCombatPlayDeathInterface_PlayDeath::PawnAnimTag' has a wrong offset!");
static_assert(offsetof(SHCombatPlayDeathInterface_PlayDeath, PlayerAnimTag) == 0x000010, "Member 'SHCombatPlayDeathInterface_PlayDeath::PlayerAnimTag' has a wrong offset!");
static_assert(offsetof(SHCombatPlayDeathInterface_PlayDeath, ReturnValue) == 0x000018, "Member 'SHCombatPlayDeathInterface_PlayDeath::ReturnValue' has a wrong offset!");

// Function SHProto.SHCombatCustomGenericDeathSequenceProvider.GetCustomGenericDeathSequenceSoftClass
// 0x0038 (0x0038 - 0x0000)
struct SHCombatCustomGenericDeathSequenceProvider_GetCustomGenericDeathSequenceSoftClass final
{
public:
	ESHSimpleDirectionType                        InLastHitWorldDirType;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0008(0x0030)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCombatCustomGenericDeathSequenceProvider_GetCustomGenericDeathSequenceSoftClass) == 0x000008, "Wrong alignment on SHCombatCustomGenericDeathSequenceProvider_GetCustomGenericDeathSequenceSoftClass");
static_assert(sizeof(SHCombatCustomGenericDeathSequenceProvider_GetCustomGenericDeathSequenceSoftClass) == 0x000038, "Wrong size on SHCombatCustomGenericDeathSequenceProvider_GetCustomGenericDeathSequenceSoftClass");
static_assert(offsetof(SHCombatCustomGenericDeathSequenceProvider_GetCustomGenericDeathSequenceSoftClass, InLastHitWorldDirType) == 0x000000, "Member 'SHCombatCustomGenericDeathSequenceProvider_GetCustomGenericDeathSequenceSoftClass::InLastHitWorldDirType' has a wrong offset!");
static_assert(offsetof(SHCombatCustomGenericDeathSequenceProvider_GetCustomGenericDeathSequenceSoftClass, ReturnValue) == 0x000008, "Member 'SHCombatCustomGenericDeathSequenceProvider_GetCustomGenericDeathSequenceSoftClass::ReturnValue' has a wrong offset!");

// Function SHProto.SHCombineItemsTutorialHandler.ProcessItemCollected
// 0x0010 (0x0010 - 0x0000)
struct SHCombineItemsTutorialHandler_ProcessItemCollected final
{
public:
	class USHCharacterPlayItemsComponent*         Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemContext;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCombineItemsTutorialHandler_ProcessItemCollected) == 0x000008, "Wrong alignment on SHCombineItemsTutorialHandler_ProcessItemCollected");
static_assert(sizeof(SHCombineItemsTutorialHandler_ProcessItemCollected) == 0x000010, "Wrong size on SHCombineItemsTutorialHandler_ProcessItemCollected");
static_assert(offsetof(SHCombineItemsTutorialHandler_ProcessItemCollected, Component) == 0x000000, "Member 'SHCombineItemsTutorialHandler_ProcessItemCollected::Component' has a wrong offset!");
static_assert(offsetof(SHCombineItemsTutorialHandler_ProcessItemCollected, ItemContext) == 0x000008, "Member 'SHCombineItemsTutorialHandler_ProcessItemCollected::ItemContext' has a wrong offset!");

// Function SHProto.SHNiagaraVolume.IsPointWithin
// 0x0020 (0x0020 - 0x0000)
struct SHNiagaraVolume_IsPointWithin final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHNiagaraVolume_IsPointWithin) == 0x000008, "Wrong alignment on SHNiagaraVolume_IsPointWithin");
static_assert(sizeof(SHNiagaraVolume_IsPointWithin) == 0x000020, "Wrong size on SHNiagaraVolume_IsPointWithin");
static_assert(offsetof(SHNiagaraVolume_IsPointWithin, Point) == 0x000000, "Member 'SHNiagaraVolume_IsPointWithin::Point' has a wrong offset!");
static_assert(offsetof(SHNiagaraVolume_IsPointWithin, ReturnValue) == 0x000018, "Member 'SHNiagaraVolume_IsPointWithin::ReturnValue' has a wrong offset!");

// Function SHProto.SHCreeperAnimComponent.SetAttackBlend
// 0x0004 (0x0004 - 0x0000)
struct SHCreeperAnimComponent_SetAttackBlend final
{
public:
	float                                         Velocity;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCreeperAnimComponent_SetAttackBlend) == 0x000004, "Wrong alignment on SHCreeperAnimComponent_SetAttackBlend");
static_assert(sizeof(SHCreeperAnimComponent_SetAttackBlend) == 0x000004, "Wrong size on SHCreeperAnimComponent_SetAttackBlend");
static_assert(offsetof(SHCreeperAnimComponent_SetAttackBlend, Velocity) == 0x000000, "Member 'SHCreeperAnimComponent_SetAttackBlend::Velocity' has a wrong offset!");

// Function SHProto.SHCrosshairContainerWidget.ProcessEquippedWeaponModifiedEvent
// 0x0008 (0x0008 - 0x0000)
struct SHCrosshairContainerWidget_ProcessEquippedWeaponModifiedEvent final
{
public:
	class USHWeaponManageCmbSubcomp*              WeaponManagement;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCrosshairContainerWidget_ProcessEquippedWeaponModifiedEvent) == 0x000008, "Wrong alignment on SHCrosshairContainerWidget_ProcessEquippedWeaponModifiedEvent");
static_assert(sizeof(SHCrosshairContainerWidget_ProcessEquippedWeaponModifiedEvent) == 0x000008, "Wrong size on SHCrosshairContainerWidget_ProcessEquippedWeaponModifiedEvent");
static_assert(offsetof(SHCrosshairContainerWidget_ProcessEquippedWeaponModifiedEvent, WeaponManagement) == 0x000000, "Member 'SHCrosshairContainerWidget_ProcessEquippedWeaponModifiedEvent::WeaponManagement' has a wrong offset!");

// Function SHProto.SHCustomBorder.ManualTick
// 0x0004 (0x0004 - 0x0000)
struct SHCustomBorder_ManualTick final
{
public:
	float                                         InDeltaTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCustomBorder_ManualTick) == 0x000004, "Wrong alignment on SHCustomBorder_ManualTick");
static_assert(sizeof(SHCustomBorder_ManualTick) == 0x000004, "Wrong size on SHCustomBorder_ManualTick");
static_assert(offsetof(SHCustomBorder_ManualTick, InDeltaTime) == 0x000000, "Member 'SHCustomBorder_ManualTick::InDeltaTime' has a wrong offset!");

// Function SHProto.SHCustomPrimitiveDataHelper.InterpFloatValue
// 0x0018 (0x0018 - 0x0000)
struct SHCustomPrimitiveDataHelper_InterpFloatValue final
{
public:
	class UPrimitiveComponent*                    InComp;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartValue;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpTime;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DataIndex;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCustomPrimitiveDataHelper_InterpFloatValue) == 0x000008, "Wrong alignment on SHCustomPrimitiveDataHelper_InterpFloatValue");
static_assert(sizeof(SHCustomPrimitiveDataHelper_InterpFloatValue) == 0x000018, "Wrong size on SHCustomPrimitiveDataHelper_InterpFloatValue");
static_assert(offsetof(SHCustomPrimitiveDataHelper_InterpFloatValue, InComp) == 0x000000, "Member 'SHCustomPrimitiveDataHelper_InterpFloatValue::InComp' has a wrong offset!");
static_assert(offsetof(SHCustomPrimitiveDataHelper_InterpFloatValue, StartValue) == 0x000008, "Member 'SHCustomPrimitiveDataHelper_InterpFloatValue::StartValue' has a wrong offset!");
static_assert(offsetof(SHCustomPrimitiveDataHelper_InterpFloatValue, EndValue) == 0x00000C, "Member 'SHCustomPrimitiveDataHelper_InterpFloatValue::EndValue' has a wrong offset!");
static_assert(offsetof(SHCustomPrimitiveDataHelper_InterpFloatValue, InterpTime) == 0x000010, "Member 'SHCustomPrimitiveDataHelper_InterpFloatValue::InterpTime' has a wrong offset!");
static_assert(offsetof(SHCustomPrimitiveDataHelper_InterpFloatValue, DataIndex) == 0x000014, "Member 'SHCustomPrimitiveDataHelper_InterpFloatValue::DataIndex' has a wrong offset!");

// Function SHProto.SHCustomPrimitiveDataHelper.SetFloatValue
// 0x0010 (0x0010 - 0x0000)
struct SHCustomPrimitiveDataHelper_SetFloatValue final
{
public:
	class UPrimitiveComponent*                    InComp;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DataIndex;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCustomPrimitiveDataHelper_SetFloatValue) == 0x000008, "Wrong alignment on SHCustomPrimitiveDataHelper_SetFloatValue");
static_assert(sizeof(SHCustomPrimitiveDataHelper_SetFloatValue) == 0x000010, "Wrong size on SHCustomPrimitiveDataHelper_SetFloatValue");
static_assert(offsetof(SHCustomPrimitiveDataHelper_SetFloatValue, InComp) == 0x000000, "Member 'SHCustomPrimitiveDataHelper_SetFloatValue::InComp' has a wrong offset!");
static_assert(offsetof(SHCustomPrimitiveDataHelper_SetFloatValue, InValue) == 0x000008, "Member 'SHCustomPrimitiveDataHelper_SetFloatValue::InValue' has a wrong offset!");
static_assert(offsetof(SHCustomPrimitiveDataHelper_SetFloatValue, DataIndex) == 0x00000C, "Member 'SHCustomPrimitiveDataHelper_SetFloatValue::DataIndex' has a wrong offset!");

// Function SHProto.SHFlashlightTutorialHandler.ProcessEquipmentItemSpawned
// 0x0010 (0x0010 - 0x0000)
struct SHFlashlightTutorialHandler_ProcessEquipmentItemSpawned final
{
public:
	class USHCharacterPlayItemsComponent*         Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemContext;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFlashlightTutorialHandler_ProcessEquipmentItemSpawned) == 0x000008, "Wrong alignment on SHFlashlightTutorialHandler_ProcessEquipmentItemSpawned");
static_assert(sizeof(SHFlashlightTutorialHandler_ProcessEquipmentItemSpawned) == 0x000010, "Wrong size on SHFlashlightTutorialHandler_ProcessEquipmentItemSpawned");
static_assert(offsetof(SHFlashlightTutorialHandler_ProcessEquipmentItemSpawned, Component) == 0x000000, "Member 'SHFlashlightTutorialHandler_ProcessEquipmentItemSpawned::Component' has a wrong offset!");
static_assert(offsetof(SHFlashlightTutorialHandler_ProcessEquipmentItemSpawned, ItemContext) == 0x000008, "Member 'SHFlashlightTutorialHandler_ProcessEquipmentItemSpawned::ItemContext' has a wrong offset!");

// Function SHProto.SHCustomRetainerBox.ManualTick
// 0x0004 (0x0004 - 0x0000)
struct SHCustomRetainerBox_ManualTick final
{
public:
	float                                         InDeltaTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHCustomRetainerBox_ManualTick) == 0x000004, "Wrong alignment on SHCustomRetainerBox_ManualTick");
static_assert(sizeof(SHCustomRetainerBox_ManualTick) == 0x000004, "Wrong size on SHCustomRetainerBox_ManualTick");
static_assert(offsetof(SHCustomRetainerBox_ManualTick, InDeltaTime) == 0x000000, "Member 'SHCustomRetainerBox_ManualTick::InDeltaTime' has a wrong offset!");

// Function SHProto.SHGameplayGameOverWidget.OnShown
// 0x0001 (0x0001 - 0x0000)
struct SHGameplayGameOverWidget_OnShown final
{
public:
	EGameOverCause                                _GameOverCause;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayGameOverWidget_OnShown) == 0x000001, "Wrong alignment on SHGameplayGameOverWidget_OnShown");
static_assert(sizeof(SHGameplayGameOverWidget_OnShown) == 0x000001, "Wrong size on SHGameplayGameOverWidget_OnShown");
static_assert(offsetof(SHGameplayGameOverWidget_OnShown, _GameOverCause) == 0x000000, "Member 'SHGameplayGameOverWidget_OnShown::_GameOverCause' has a wrong offset!");

// Function SHProto.SHDoorAnimationsComponent.OnAutoLockedDoorCheckAnimEnd
// 0x0010 (0x0010 - 0x0000)
struct SHDoorAnimationsComponent_OnAutoLockedDoorCheckAnimEnd final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHAnimEndType                                AnimEndType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHDoorAnimationsComponent_OnAutoLockedDoorCheckAnimEnd) == 0x000008, "Wrong alignment on SHDoorAnimationsComponent_OnAutoLockedDoorCheckAnimEnd");
static_assert(sizeof(SHDoorAnimationsComponent_OnAutoLockedDoorCheckAnimEnd) == 0x000010, "Wrong size on SHDoorAnimationsComponent_OnAutoLockedDoorCheckAnimEnd");
static_assert(offsetof(SHDoorAnimationsComponent_OnAutoLockedDoorCheckAnimEnd, Montage) == 0x000000, "Member 'SHDoorAnimationsComponent_OnAutoLockedDoorCheckAnimEnd::Montage' has a wrong offset!");
static_assert(offsetof(SHDoorAnimationsComponent_OnAutoLockedDoorCheckAnimEnd, AnimEndType) == 0x000008, "Member 'SHDoorAnimationsComponent_OnAutoLockedDoorCheckAnimEnd::AnimEndType' has a wrong offset!");

// Function SHProto.SHDoorAnimationsComponent.OnPhysicMovementAppliedForceFromActor
// 0x0010 (0x0010 - 0x0000)
struct SHDoorAnimationsComponent_OnPhysicMovementAppliedForceFromActor final
{
public:
	class USHDoorMovementComponent*               DoorMovementComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ActorContext;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorAnimationsComponent_OnPhysicMovementAppliedForceFromActor) == 0x000008, "Wrong alignment on SHDoorAnimationsComponent_OnPhysicMovementAppliedForceFromActor");
static_assert(sizeof(SHDoorAnimationsComponent_OnPhysicMovementAppliedForceFromActor) == 0x000010, "Wrong size on SHDoorAnimationsComponent_OnPhysicMovementAppliedForceFromActor");
static_assert(offsetof(SHDoorAnimationsComponent_OnPhysicMovementAppliedForceFromActor, DoorMovementComponent) == 0x000000, "Member 'SHDoorAnimationsComponent_OnPhysicMovementAppliedForceFromActor::DoorMovementComponent' has a wrong offset!");
static_assert(offsetof(SHDoorAnimationsComponent_OnPhysicMovementAppliedForceFromActor, ActorContext) == 0x000008, "Member 'SHDoorAnimationsComponent_OnPhysicMovementAppliedForceFromActor::ActorContext' has a wrong offset!");

// Function SHProto.SHDoorAnimationsComponent.SetPlayAutoLockedDoorCheckAnimBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHDoorAnimationsComponent_SetPlayAutoLockedDoorCheckAnimBlocked final
{
public:
	bool                                          bInBlocked;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorAnimationsComponent_SetPlayAutoLockedDoorCheckAnimBlocked) == 0x000008, "Wrong alignment on SHDoorAnimationsComponent_SetPlayAutoLockedDoorCheckAnimBlocked");
static_assert(sizeof(SHDoorAnimationsComponent_SetPlayAutoLockedDoorCheckAnimBlocked) == 0x000010, "Wrong size on SHDoorAnimationsComponent_SetPlayAutoLockedDoorCheckAnimBlocked");
static_assert(offsetof(SHDoorAnimationsComponent_SetPlayAutoLockedDoorCheckAnimBlocked, bInBlocked) == 0x000000, "Member 'SHDoorAnimationsComponent_SetPlayAutoLockedDoorCheckAnimBlocked::bInBlocked' has a wrong offset!");
static_assert(offsetof(SHDoorAnimationsComponent_SetPlayAutoLockedDoorCheckAnimBlocked, Object) == 0x000008, "Member 'SHDoorAnimationsComponent_SetPlayAutoLockedDoorCheckAnimBlocked::Object' has a wrong offset!");

// DelegateFunction SHProto.SHDoorAnimationsComponent.SHDoorAnimationEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHDoorAnimationsComponent_SHDoorAnimationEvent__DelegateSignature final
{
public:
	class USHDoorAnimationsComponent*             Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorAnimationsComponent_SHDoorAnimationEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHDoorAnimationsComponent_SHDoorAnimationEvent__DelegateSignature");
static_assert(sizeof(SHDoorAnimationsComponent_SHDoorAnimationEvent__DelegateSignature) == 0x000008, "Wrong size on SHDoorAnimationsComponent_SHDoorAnimationEvent__DelegateSignature");
static_assert(offsetof(SHDoorAnimationsComponent_SHDoorAnimationEvent__DelegateSignature, Component) == 0x000000, "Member 'SHDoorAnimationsComponent_SHDoorAnimationEvent__DelegateSignature::Component' has a wrong offset!");

// DelegateFunction SHProto.SHDoorAnimationsComponent.SHDoorAnimationEventBP__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHDoorAnimationsComponent_SHDoorAnimationEventBP__DelegateSignature final
{
public:
	class USHDoorAnimationsComponent*             Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorAnimationsComponent_SHDoorAnimationEventBP__DelegateSignature) == 0x000008, "Wrong alignment on SHDoorAnimationsComponent_SHDoorAnimationEventBP__DelegateSignature");
static_assert(sizeof(SHDoorAnimationsComponent_SHDoorAnimationEventBP__DelegateSignature) == 0x000008, "Wrong size on SHDoorAnimationsComponent_SHDoorAnimationEventBP__DelegateSignature");
static_assert(offsetof(SHDoorAnimationsComponent_SHDoorAnimationEventBP__DelegateSignature, Component) == 0x000000, "Member 'SHDoorAnimationsComponent_SHDoorAnimationEventBP__DelegateSignature::Component' has a wrong offset!");

// Function SHProto.SHDoorAnimationsComponent.IsPlayAutoLockedDoorCheckAnimBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHDoorAnimationsComponent_IsPlayAutoLockedDoorCheckAnimBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorAnimationsComponent_IsPlayAutoLockedDoorCheckAnimBlocked) == 0x000001, "Wrong alignment on SHDoorAnimationsComponent_IsPlayAutoLockedDoorCheckAnimBlocked");
static_assert(sizeof(SHDoorAnimationsComponent_IsPlayAutoLockedDoorCheckAnimBlocked) == 0x000001, "Wrong size on SHDoorAnimationsComponent_IsPlayAutoLockedDoorCheckAnimBlocked");
static_assert(offsetof(SHDoorAnimationsComponent_IsPlayAutoLockedDoorCheckAnimBlocked, ReturnValue) == 0x000000, "Member 'SHDoorAnimationsComponent_IsPlayAutoLockedDoorCheckAnimBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHDoorAttachment.OnInteractionAnimationEnd
// 0x0001 (0x0001 - 0x0000)
struct SHDoorAttachment_OnInteractionAnimationEnd final
{
public:
	ESHAnimEndType                                AnimEndType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorAttachment_OnInteractionAnimationEnd) == 0x000001, "Wrong alignment on SHDoorAttachment_OnInteractionAnimationEnd");
static_assert(sizeof(SHDoorAttachment_OnInteractionAnimationEnd) == 0x000001, "Wrong size on SHDoorAttachment_OnInteractionAnimationEnd");
static_assert(offsetof(SHDoorAttachment_OnInteractionAnimationEnd, AnimEndType) == 0x000000, "Member 'SHDoorAttachment_OnInteractionAnimationEnd::AnimEndType' has a wrong offset!");

// Function SHProto.SHDoorAttachment.PlayInteractionAnimation
// 0x00B8 (0x00B8 - 0x0000)
struct SHDoorAttachment_PlayInteractionAnimation final
{
public:
	struct FPlayAnimationData                     AnimToPlay;                                        // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHDoorAttachment_PlayInteractionAnimation) == 0x000008, "Wrong alignment on SHDoorAttachment_PlayInteractionAnimation");
static_assert(sizeof(SHDoorAttachment_PlayInteractionAnimation) == 0x0000B8, "Wrong size on SHDoorAttachment_PlayInteractionAnimation");
static_assert(offsetof(SHDoorAttachment_PlayInteractionAnimation, AnimToPlay) == 0x000000, "Member 'SHDoorAttachment_PlayInteractionAnimation::AnimToPlay' has a wrong offset!");
static_assert(offsetof(SHDoorAttachment_PlayInteractionAnimation, ReturnValue) == 0x0000B0, "Member 'SHDoorAttachment_PlayInteractionAnimation::ReturnValue' has a wrong offset!");

// Function SHProto.SHDoorAttachment.ProcessActionAnimEnd
// 0x0010 (0x0010 - 0x0000)
struct SHDoorAttachment_ProcessActionAnimEnd final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHAnimEndType                                AnimEndType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHDoorAttachment_ProcessActionAnimEnd) == 0x000008, "Wrong alignment on SHDoorAttachment_ProcessActionAnimEnd");
static_assert(sizeof(SHDoorAttachment_ProcessActionAnimEnd) == 0x000010, "Wrong size on SHDoorAttachment_ProcessActionAnimEnd");
static_assert(offsetof(SHDoorAttachment_ProcessActionAnimEnd, Montage) == 0x000000, "Member 'SHDoorAttachment_ProcessActionAnimEnd::Montage' has a wrong offset!");
static_assert(offsetof(SHDoorAttachment_ProcessActionAnimEnd, AnimEndType) == 0x000008, "Member 'SHDoorAttachment_ProcessActionAnimEnd::AnimEndType' has a wrong offset!");

// Function SHProto.SHDoorAttachment.ProcessInteracted
// 0x0010 (0x0010 - 0x0000)
struct SHDoorAttachment_ProcessInteracted final
{
public:
	class USHInteractionGenericComponent*         Generic;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHCharacterPlay*                       Character;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorAttachment_ProcessInteracted) == 0x000008, "Wrong alignment on SHDoorAttachment_ProcessInteracted");
static_assert(sizeof(SHDoorAttachment_ProcessInteracted) == 0x000010, "Wrong size on SHDoorAttachment_ProcessInteracted");
static_assert(offsetof(SHDoorAttachment_ProcessInteracted, Generic) == 0x000000, "Member 'SHDoorAttachment_ProcessInteracted::Generic' has a wrong offset!");
static_assert(offsetof(SHDoorAttachment_ProcessInteracted, Character) == 0x000008, "Member 'SHDoorAttachment_ProcessInteracted::Character' has a wrong offset!");

// Function SHProto.SHDoorAttachment.ProcessInteractionManagerInitialized
// 0x0008 (0x0008 - 0x0000)
struct SHDoorAttachment_ProcessInteractionManagerInitialized final
{
public:
	class USHInteractionManagerComponent*         Manager;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorAttachment_ProcessInteractionManagerInitialized) == 0x000008, "Wrong alignment on SHDoorAttachment_ProcessInteractionManagerInitialized");
static_assert(sizeof(SHDoorAttachment_ProcessInteractionManagerInitialized) == 0x000008, "Wrong size on SHDoorAttachment_ProcessInteractionManagerInitialized");
static_assert(offsetof(SHDoorAttachment_ProcessInteractionManagerInitialized, Manager) == 0x000000, "Member 'SHDoorAttachment_ProcessInteractionManagerInitialized::Manager' has a wrong offset!");

// Function SHProto.SHDoorAttachment.ProcessMovementSnapFinished
// 0x0001 (0x0001 - 0x0000)
struct SHDoorAttachment_ProcessMovementSnapFinished final
{
public:
	bool                                          WasCompleted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorAttachment_ProcessMovementSnapFinished) == 0x000001, "Wrong alignment on SHDoorAttachment_ProcessMovementSnapFinished");
static_assert(sizeof(SHDoorAttachment_ProcessMovementSnapFinished) == 0x000001, "Wrong size on SHDoorAttachment_ProcessMovementSnapFinished");
static_assert(offsetof(SHDoorAttachment_ProcessMovementSnapFinished, WasCompleted) == 0x000000, "Member 'SHDoorAttachment_ProcessMovementSnapFinished::WasCompleted' has a wrong offset!");

// Function SHProto.SHDoorAttachment.ProcessPutCharacterOnSpotFinished
// 0x0001 (0x0001 - 0x0000)
struct SHDoorAttachment_ProcessPutCharacterOnSpotFinished final
{
public:
	bool                                          WasCompleted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorAttachment_ProcessPutCharacterOnSpotFinished) == 0x000001, "Wrong alignment on SHDoorAttachment_ProcessPutCharacterOnSpotFinished");
static_assert(sizeof(SHDoorAttachment_ProcessPutCharacterOnSpotFinished) == 0x000001, "Wrong size on SHDoorAttachment_ProcessPutCharacterOnSpotFinished");
static_assert(offsetof(SHDoorAttachment_ProcessPutCharacterOnSpotFinished, WasCompleted) == 0x000000, "Member 'SHDoorAttachment_ProcessPutCharacterOnSpotFinished::WasCompleted' has a wrong offset!");

// Function SHProto.SHDoorAttachment.ProcessReceiveDamageEvent
// 0x0008 (0x0008 - 0x0000)
struct SHDoorAttachment_ProcessReceiveDamageEvent final
{
public:
	class USHCharacterPlayCombatComponent*        CombatComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorAttachment_ProcessReceiveDamageEvent) == 0x000008, "Wrong alignment on SHDoorAttachment_ProcessReceiveDamageEvent");
static_assert(sizeof(SHDoorAttachment_ProcessReceiveDamageEvent) == 0x000008, "Wrong size on SHDoorAttachment_ProcessReceiveDamageEvent");
static_assert(offsetof(SHDoorAttachment_ProcessReceiveDamageEvent, CombatComp) == 0x000000, "Member 'SHDoorAttachment_ProcessReceiveDamageEvent::CombatComp' has a wrong offset!");

// Function SHProto.SHDoorAttachment.PutCharacterOnSpotRequest
// 0x0004 (0x0004 - 0x0000)
struct SHDoorAttachment_PutCharacterOnSpotRequest final
{
public:
	float                                         InBlendInTime;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorAttachment_PutCharacterOnSpotRequest) == 0x000004, "Wrong alignment on SHDoorAttachment_PutCharacterOnSpotRequest");
static_assert(sizeof(SHDoorAttachment_PutCharacterOnSpotRequest) == 0x000004, "Wrong size on SHDoorAttachment_PutCharacterOnSpotRequest");
static_assert(offsetof(SHDoorAttachment_PutCharacterOnSpotRequest, InBlendInTime) == 0x000000, "Member 'SHDoorAttachment_PutCharacterOnSpotRequest::InBlendInTime' has a wrong offset!");

// Function SHProto.SHDoorAttachment.RegisterInteractionAnimation
// 0x00B0 (0x00B0 - 0x0000)
struct SHDoorAttachment_RegisterInteractionAnimation final
{
public:
	struct FPlayAnimationData                     AnimToPlay;                                        // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorAttachment_RegisterInteractionAnimation) == 0x000008, "Wrong alignment on SHDoorAttachment_RegisterInteractionAnimation");
static_assert(sizeof(SHDoorAttachment_RegisterInteractionAnimation) == 0x0000B0, "Wrong size on SHDoorAttachment_RegisterInteractionAnimation");
static_assert(offsetof(SHDoorAttachment_RegisterInteractionAnimation, AnimToPlay) == 0x000000, "Member 'SHDoorAttachment_RegisterInteractionAnimation::AnimToPlay' has a wrong offset!");

// Function SHProto.SHDoorAttachment.UnregisterInteractionAnimation
// 0x00B0 (0x00B0 - 0x0000)
struct SHDoorAttachment_UnregisterInteractionAnimation final
{
public:
	struct FPlayAnimationData                     AnimToPlay;                                        // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorAttachment_UnregisterInteractionAnimation) == 0x000008, "Wrong alignment on SHDoorAttachment_UnregisterInteractionAnimation");
static_assert(sizeof(SHDoorAttachment_UnregisterInteractionAnimation) == 0x0000B0, "Wrong size on SHDoorAttachment_UnregisterInteractionAnimation");
static_assert(offsetof(SHDoorAttachment_UnregisterInteractionAnimation, AnimToPlay) == 0x000000, "Member 'SHDoorAttachment_UnregisterInteractionAnimation::AnimToPlay' has a wrong offset!");

// Function SHProto.SHDoorAttachment.IsProximityCharacterOnCorrectSide
// 0x0001 (0x0001 - 0x0000)
struct SHDoorAttachment_IsProximityCharacterOnCorrectSide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorAttachment_IsProximityCharacterOnCorrectSide) == 0x000001, "Wrong alignment on SHDoorAttachment_IsProximityCharacterOnCorrectSide");
static_assert(sizeof(SHDoorAttachment_IsProximityCharacterOnCorrectSide) == 0x000001, "Wrong size on SHDoorAttachment_IsProximityCharacterOnCorrectSide");
static_assert(offsetof(SHDoorAttachment_IsProximityCharacterOnCorrectSide, ReturnValue) == 0x000000, "Member 'SHDoorAttachment_IsProximityCharacterOnCorrectSide::ReturnValue' has a wrong offset!");

// Function SHProto.SHDoorMovementBaseComponent.ProcessMeshHit
// 0x0118 (0x0118 - 0x0000)
struct SHDoorMovementBaseComponent_ProcessMeshHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0030(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorMovementBaseComponent_ProcessMeshHit) == 0x000008, "Wrong alignment on SHDoorMovementBaseComponent_ProcessMeshHit");
static_assert(sizeof(SHDoorMovementBaseComponent_ProcessMeshHit) == 0x000118, "Wrong size on SHDoorMovementBaseComponent_ProcessMeshHit");
static_assert(offsetof(SHDoorMovementBaseComponent_ProcessMeshHit, HitComponent) == 0x000000, "Member 'SHDoorMovementBaseComponent_ProcessMeshHit::HitComponent' has a wrong offset!");
static_assert(offsetof(SHDoorMovementBaseComponent_ProcessMeshHit, OtherActor) == 0x000008, "Member 'SHDoorMovementBaseComponent_ProcessMeshHit::OtherActor' has a wrong offset!");
static_assert(offsetof(SHDoorMovementBaseComponent_ProcessMeshHit, OtherComponent) == 0x000010, "Member 'SHDoorMovementBaseComponent_ProcessMeshHit::OtherComponent' has a wrong offset!");
static_assert(offsetof(SHDoorMovementBaseComponent_ProcessMeshHit, NormalImpulse) == 0x000018, "Member 'SHDoorMovementBaseComponent_ProcessMeshHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(SHDoorMovementBaseComponent_ProcessMeshHit, Hit) == 0x000030, "Member 'SHDoorMovementBaseComponent_ProcessMeshHit::Hit' has a wrong offset!");

// Function SHProto.SHDoorMovementBaseComponent.ProcessProximitySHActorBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct SHDoorMovementBaseComponent_ProcessProximitySHActorBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FromSweep;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorMovementBaseComponent_ProcessProximitySHActorBeginOverlap) == 0x000008, "Wrong alignment on SHDoorMovementBaseComponent_ProcessProximitySHActorBeginOverlap");
static_assert(sizeof(SHDoorMovementBaseComponent_ProcessProximitySHActorBeginOverlap) == 0x000108, "Wrong size on SHDoorMovementBaseComponent_ProcessProximitySHActorBeginOverlap");
static_assert(offsetof(SHDoorMovementBaseComponent_ProcessProximitySHActorBeginOverlap, OverlappedComponent) == 0x000000, "Member 'SHDoorMovementBaseComponent_ProcessProximitySHActorBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SHDoorMovementBaseComponent_ProcessProximitySHActorBeginOverlap, OtherActor) == 0x000008, "Member 'SHDoorMovementBaseComponent_ProcessProximitySHActorBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SHDoorMovementBaseComponent_ProcessProximitySHActorBeginOverlap, OtherComponent) == 0x000010, "Member 'SHDoorMovementBaseComponent_ProcessProximitySHActorBeginOverlap::OtherComponent' has a wrong offset!");
static_assert(offsetof(SHDoorMovementBaseComponent_ProcessProximitySHActorBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'SHDoorMovementBaseComponent_ProcessProximitySHActorBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SHDoorMovementBaseComponent_ProcessProximitySHActorBeginOverlap, FromSweep) == 0x00001C, "Member 'SHDoorMovementBaseComponent_ProcessProximitySHActorBeginOverlap::FromSweep' has a wrong offset!");
static_assert(offsetof(SHDoorMovementBaseComponent_ProcessProximitySHActorBeginOverlap, SweepResult) == 0x000020, "Member 'SHDoorMovementBaseComponent_ProcessProximitySHActorBeginOverlap::SweepResult' has a wrong offset!");

// Function SHProto.SHDoorMovementBaseComponent.ProcessProximitySHActorEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct SHDoorMovementBaseComponent_ProcessProximitySHActorEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHDoorMovementBaseComponent_ProcessProximitySHActorEndOverlap) == 0x000008, "Wrong alignment on SHDoorMovementBaseComponent_ProcessProximitySHActorEndOverlap");
static_assert(sizeof(SHDoorMovementBaseComponent_ProcessProximitySHActorEndOverlap) == 0x000020, "Wrong size on SHDoorMovementBaseComponent_ProcessProximitySHActorEndOverlap");
static_assert(offsetof(SHDoorMovementBaseComponent_ProcessProximitySHActorEndOverlap, OverlappedComponent) == 0x000000, "Member 'SHDoorMovementBaseComponent_ProcessProximitySHActorEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SHDoorMovementBaseComponent_ProcessProximitySHActorEndOverlap, OtherActor) == 0x000008, "Member 'SHDoorMovementBaseComponent_ProcessProximitySHActorEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SHDoorMovementBaseComponent_ProcessProximitySHActorEndOverlap, OtherComponent) == 0x000010, "Member 'SHDoorMovementBaseComponent_ProcessProximitySHActorEndOverlap::OtherComponent' has a wrong offset!");
static_assert(offsetof(SHDoorMovementBaseComponent_ProcessProximitySHActorEndOverlap, OtherBodyIndex) == 0x000018, "Member 'SHDoorMovementBaseComponent_ProcessProximitySHActorEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function SHProto.SHDoorMovementBaseComponent.SetIsManagedByCutscene
// 0x0010 (0x0010 - 0x0000)
struct SHDoorMovementBaseComponent_SetIsManagedByCutscene final
{
public:
	bool                                          InEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorMovementBaseComponent_SetIsManagedByCutscene) == 0x000008, "Wrong alignment on SHDoorMovementBaseComponent_SetIsManagedByCutscene");
static_assert(sizeof(SHDoorMovementBaseComponent_SetIsManagedByCutscene) == 0x000010, "Wrong size on SHDoorMovementBaseComponent_SetIsManagedByCutscene");
static_assert(offsetof(SHDoorMovementBaseComponent_SetIsManagedByCutscene, InEnable) == 0x000000, "Member 'SHDoorMovementBaseComponent_SetIsManagedByCutscene::InEnable' has a wrong offset!");
static_assert(offsetof(SHDoorMovementBaseComponent_SetIsManagedByCutscene, Object) == 0x000008, "Member 'SHDoorMovementBaseComponent_SetIsManagedByCutscene::Object' has a wrong offset!");

// DelegateFunction SHProto.SHDoorMovementBaseComponent.SHDoorBaseMovementEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHDoorMovementBaseComponent_SHDoorBaseMovementEvent__DelegateSignature final
{
public:
	class USHDoorMovementBaseComponent*           Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorMovementBaseComponent_SHDoorBaseMovementEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHDoorMovementBaseComponent_SHDoorBaseMovementEvent__DelegateSignature");
static_assert(sizeof(SHDoorMovementBaseComponent_SHDoorBaseMovementEvent__DelegateSignature) == 0x000008, "Wrong size on SHDoorMovementBaseComponent_SHDoorBaseMovementEvent__DelegateSignature");
static_assert(offsetof(SHDoorMovementBaseComponent_SHDoorBaseMovementEvent__DelegateSignature, Component) == 0x000000, "Member 'SHDoorMovementBaseComponent_SHDoorBaseMovementEvent__DelegateSignature::Component' has a wrong offset!");

// DelegateFunction SHProto.SHDoorMovementBaseComponent.SHDoorBaseMovementEventBP__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHDoorMovementBaseComponent_SHDoorBaseMovementEventBP__DelegateSignature final
{
public:
	class USHDoorMovementBaseComponent*           Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorMovementBaseComponent_SHDoorBaseMovementEventBP__DelegateSignature) == 0x000008, "Wrong alignment on SHDoorMovementBaseComponent_SHDoorBaseMovementEventBP__DelegateSignature");
static_assert(sizeof(SHDoorMovementBaseComponent_SHDoorBaseMovementEventBP__DelegateSignature) == 0x000008, "Wrong size on SHDoorMovementBaseComponent_SHDoorBaseMovementEventBP__DelegateSignature");
static_assert(offsetof(SHDoorMovementBaseComponent_SHDoorBaseMovementEventBP__DelegateSignature, Component) == 0x000000, "Member 'SHDoorMovementBaseComponent_SHDoorBaseMovementEventBP__DelegateSignature::Component' has a wrong offset!");

// Function SHProto.SHDoorMovementBaseComponent.GetCurrentDoorState
// 0x0001 (0x0001 - 0x0000)
struct SHDoorMovementBaseComponent_GetCurrentDoorState final
{
public:
	ESHDoorStateEnum                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorMovementBaseComponent_GetCurrentDoorState) == 0x000001, "Wrong alignment on SHDoorMovementBaseComponent_GetCurrentDoorState");
static_assert(sizeof(SHDoorMovementBaseComponent_GetCurrentDoorState) == 0x000001, "Wrong size on SHDoorMovementBaseComponent_GetCurrentDoorState");
static_assert(offsetof(SHDoorMovementBaseComponent_GetCurrentDoorState, ReturnValue) == 0x000000, "Member 'SHDoorMovementBaseComponent_GetCurrentDoorState::ReturnValue' has a wrong offset!");

// Function SHProto.SHDoorMovementBaseComponent.GetCurrentDoorVelocity
// 0x0004 (0x0004 - 0x0000)
struct SHDoorMovementBaseComponent_GetCurrentDoorVelocity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorMovementBaseComponent_GetCurrentDoorVelocity) == 0x000004, "Wrong alignment on SHDoorMovementBaseComponent_GetCurrentDoorVelocity");
static_assert(sizeof(SHDoorMovementBaseComponent_GetCurrentDoorVelocity) == 0x000004, "Wrong size on SHDoorMovementBaseComponent_GetCurrentDoorVelocity");
static_assert(offsetof(SHDoorMovementBaseComponent_GetCurrentDoorVelocity, ReturnValue) == 0x000000, "Member 'SHDoorMovementBaseComponent_GetCurrentDoorVelocity::ReturnValue' has a wrong offset!");

// Function SHProto.SHDoorMovementBaseComponent.GetDoorTraceHalfSize
// 0x0018 (0x0018 - 0x0000)
struct SHDoorMovementBaseComponent_GetDoorTraceHalfSize final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorMovementBaseComponent_GetDoorTraceHalfSize) == 0x000008, "Wrong alignment on SHDoorMovementBaseComponent_GetDoorTraceHalfSize");
static_assert(sizeof(SHDoorMovementBaseComponent_GetDoorTraceHalfSize) == 0x000018, "Wrong size on SHDoorMovementBaseComponent_GetDoorTraceHalfSize");
static_assert(offsetof(SHDoorMovementBaseComponent_GetDoorTraceHalfSize, ReturnValue) == 0x000000, "Member 'SHDoorMovementBaseComponent_GetDoorTraceHalfSize::ReturnValue' has a wrong offset!");

// Function SHProto.SHDoorMovementBaseComponent.GetLastDoorVelocity
// 0x0004 (0x0004 - 0x0000)
struct SHDoorMovementBaseComponent_GetLastDoorVelocity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorMovementBaseComponent_GetLastDoorVelocity) == 0x000004, "Wrong alignment on SHDoorMovementBaseComponent_GetLastDoorVelocity");
static_assert(sizeof(SHDoorMovementBaseComponent_GetLastDoorVelocity) == 0x000004, "Wrong size on SHDoorMovementBaseComponent_GetLastDoorVelocity");
static_assert(offsetof(SHDoorMovementBaseComponent_GetLastDoorVelocity, ReturnValue) == 0x000000, "Member 'SHDoorMovementBaseComponent_GetLastDoorVelocity::ReturnValue' has a wrong offset!");

// Function SHProto.SHDoorMovementBaseComponent.IsManagedByCutscene
// 0x0001 (0x0001 - 0x0000)
struct SHDoorMovementBaseComponent_IsManagedByCutscene final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorMovementBaseComponent_IsManagedByCutscene) == 0x000001, "Wrong alignment on SHDoorMovementBaseComponent_IsManagedByCutscene");
static_assert(sizeof(SHDoorMovementBaseComponent_IsManagedByCutscene) == 0x000001, "Wrong size on SHDoorMovementBaseComponent_IsManagedByCutscene");
static_assert(offsetof(SHDoorMovementBaseComponent_IsManagedByCutscene, ReturnValue) == 0x000000, "Member 'SHDoorMovementBaseComponent_IsManagedByCutscene::ReturnValue' has a wrong offset!");

// Function SHProto.SHDoorMovementComponent.AddActorToTraceIgnoreActors
// 0x0008 (0x0008 - 0x0000)
struct SHDoorMovementComponent_AddActorToTraceIgnoreActors final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorMovementComponent_AddActorToTraceIgnoreActors) == 0x000008, "Wrong alignment on SHDoorMovementComponent_AddActorToTraceIgnoreActors");
static_assert(sizeof(SHDoorMovementComponent_AddActorToTraceIgnoreActors) == 0x000008, "Wrong size on SHDoorMovementComponent_AddActorToTraceIgnoreActors");
static_assert(offsetof(SHDoorMovementComponent_AddActorToTraceIgnoreActors, InActor) == 0x000000, "Member 'SHDoorMovementComponent_AddActorToTraceIgnoreActors::InActor' has a wrong offset!");

// Function SHProto.SHDoorMovementComponent.AddPhysicForce
// 0x0004 (0x0004 - 0x0000)
struct SHDoorMovementComponent_AddPhysicForce final
{
public:
	float                                         MoveForce;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorMovementComponent_AddPhysicForce) == 0x000004, "Wrong alignment on SHDoorMovementComponent_AddPhysicForce");
static_assert(sizeof(SHDoorMovementComponent_AddPhysicForce) == 0x000004, "Wrong size on SHDoorMovementComponent_AddPhysicForce");
static_assert(offsetof(SHDoorMovementComponent_AddPhysicForce, MoveForce) == 0x000000, "Member 'SHDoorMovementComponent_AddPhysicForce::MoveForce' has a wrong offset!");

// Function SHProto.SHDoorMovementComponent.PlayCurveAnim
// 0x0010 (0x0010 - 0x0000)
struct SHDoorMovementComponent_PlayCurveAnim final
{
public:
	class UCurveFloat*                            InCurve;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InSkipTracing;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHDoorMovementComponent_PlayCurveAnim) == 0x000008, "Wrong alignment on SHDoorMovementComponent_PlayCurveAnim");
static_assert(sizeof(SHDoorMovementComponent_PlayCurveAnim) == 0x000010, "Wrong size on SHDoorMovementComponent_PlayCurveAnim");
static_assert(offsetof(SHDoorMovementComponent_PlayCurveAnim, InCurve) == 0x000000, "Member 'SHDoorMovementComponent_PlayCurveAnim::InCurve' has a wrong offset!");
static_assert(offsetof(SHDoorMovementComponent_PlayCurveAnim, InSkipTracing) == 0x000008, "Member 'SHDoorMovementComponent_PlayCurveAnim::InSkipTracing' has a wrong offset!");

// Function SHProto.SHDoorMovementComponent.RequestCustomFakeMovement
// 0x0010 (0x0010 - 0x0000)
struct SHDoorMovementComponent_RequestCustomFakeMovement final
{
public:
	float                                         InAngleTarget;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSpeed;                                           // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBlendExp;                                        // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InForceMovement;                                   // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHDoorMovementComponent_RequestCustomFakeMovement) == 0x000004, "Wrong alignment on SHDoorMovementComponent_RequestCustomFakeMovement");
static_assert(sizeof(SHDoorMovementComponent_RequestCustomFakeMovement) == 0x000010, "Wrong size on SHDoorMovementComponent_RequestCustomFakeMovement");
static_assert(offsetof(SHDoorMovementComponent_RequestCustomFakeMovement, InAngleTarget) == 0x000000, "Member 'SHDoorMovementComponent_RequestCustomFakeMovement::InAngleTarget' has a wrong offset!");
static_assert(offsetof(SHDoorMovementComponent_RequestCustomFakeMovement, InSpeed) == 0x000004, "Member 'SHDoorMovementComponent_RequestCustomFakeMovement::InSpeed' has a wrong offset!");
static_assert(offsetof(SHDoorMovementComponent_RequestCustomFakeMovement, InBlendExp) == 0x000008, "Member 'SHDoorMovementComponent_RequestCustomFakeMovement::InBlendExp' has a wrong offset!");
static_assert(offsetof(SHDoorMovementComponent_RequestCustomFakeMovement, InForceMovement) == 0x00000C, "Member 'SHDoorMovementComponent_RequestCustomFakeMovement::InForceMovement' has a wrong offset!");
static_assert(offsetof(SHDoorMovementComponent_RequestCustomFakeMovement, ReturnValue) == 0x00000D, "Member 'SHDoorMovementComponent_RequestCustomFakeMovement::ReturnValue' has a wrong offset!");

// Function SHProto.SHDoorMovementComponent.RequestFakeClose
// 0x0001 (0x0001 - 0x0000)
struct SHDoorMovementComponent_RequestFakeClose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorMovementComponent_RequestFakeClose) == 0x000001, "Wrong alignment on SHDoorMovementComponent_RequestFakeClose");
static_assert(sizeof(SHDoorMovementComponent_RequestFakeClose) == 0x000001, "Wrong size on SHDoorMovementComponent_RequestFakeClose");
static_assert(offsetof(SHDoorMovementComponent_RequestFakeClose, ReturnValue) == 0x000000, "Member 'SHDoorMovementComponent_RequestFakeClose::ReturnValue' has a wrong offset!");

// Function SHProto.SHDoorMovementComponent.RequestFakeOpen
// 0x0002 (0x0002 - 0x0000)
struct SHDoorMovementComponent_RequestFakeOpen final
{
public:
	bool                                          ToOtherside;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorMovementComponent_RequestFakeOpen) == 0x000001, "Wrong alignment on SHDoorMovementComponent_RequestFakeOpen");
static_assert(sizeof(SHDoorMovementComponent_RequestFakeOpen) == 0x000002, "Wrong size on SHDoorMovementComponent_RequestFakeOpen");
static_assert(offsetof(SHDoorMovementComponent_RequestFakeOpen, ToOtherside) == 0x000000, "Member 'SHDoorMovementComponent_RequestFakeOpen::ToOtherside' has a wrong offset!");
static_assert(offsetof(SHDoorMovementComponent_RequestFakeOpen, ReturnValue) == 0x000001, "Member 'SHDoorMovementComponent_RequestFakeOpen::ReturnValue' has a wrong offset!");

// Function SHProto.SHDoorMovementComponent.SetAutocloseBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHDoorMovementComponent_SetAutocloseBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorMovementComponent_SetAutocloseBlocked) == 0x000008, "Wrong alignment on SHDoorMovementComponent_SetAutocloseBlocked");
static_assert(sizeof(SHDoorMovementComponent_SetAutocloseBlocked) == 0x000010, "Wrong size on SHDoorMovementComponent_SetAutocloseBlocked");
static_assert(offsetof(SHDoorMovementComponent_SetAutocloseBlocked, Blocked) == 0x000000, "Member 'SHDoorMovementComponent_SetAutocloseBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHDoorMovementComponent_SetAutocloseBlocked, Object) == 0x000008, "Member 'SHDoorMovementComponent_SetAutocloseBlocked::Object' has a wrong offset!");

// Function SHProto.SHDoorMovementComponent.SetDoorFrozen
// 0x0001 (0x0001 - 0x0000)
struct SHDoorMovementComponent_SetDoorFrozen final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorMovementComponent_SetDoorFrozen) == 0x000001, "Wrong alignment on SHDoorMovementComponent_SetDoorFrozen");
static_assert(sizeof(SHDoorMovementComponent_SetDoorFrozen) == 0x000001, "Wrong size on SHDoorMovementComponent_SetDoorFrozen");
static_assert(offsetof(SHDoorMovementComponent_SetDoorFrozen, NewValue) == 0x000000, "Member 'SHDoorMovementComponent_SetDoorFrozen::NewValue' has a wrong offset!");

// DelegateFunction SHProto.SHDoorMovementComponent.SHDoorMovementEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHDoorMovementComponent_SHDoorMovementEvent__DelegateSignature final
{
public:
	class USHDoorMovementComponent*               Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorMovementComponent_SHDoorMovementEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHDoorMovementComponent_SHDoorMovementEvent__DelegateSignature");
static_assert(sizeof(SHDoorMovementComponent_SHDoorMovementEvent__DelegateSignature) == 0x000008, "Wrong size on SHDoorMovementComponent_SHDoorMovementEvent__DelegateSignature");
static_assert(offsetof(SHDoorMovementComponent_SHDoorMovementEvent__DelegateSignature, Component) == 0x000000, "Member 'SHDoorMovementComponent_SHDoorMovementEvent__DelegateSignature::Component' has a wrong offset!");

// DelegateFunction SHProto.SHDoorMovementComponent.SHDoorMovementEventBP__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHDoorMovementComponent_SHDoorMovementEventBP__DelegateSignature final
{
public:
	class USHDoorMovementComponent*               Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorMovementComponent_SHDoorMovementEventBP__DelegateSignature) == 0x000008, "Wrong alignment on SHDoorMovementComponent_SHDoorMovementEventBP__DelegateSignature");
static_assert(sizeof(SHDoorMovementComponent_SHDoorMovementEventBP__DelegateSignature) == 0x000008, "Wrong size on SHDoorMovementComponent_SHDoorMovementEventBP__DelegateSignature");
static_assert(offsetof(SHDoorMovementComponent_SHDoorMovementEventBP__DelegateSignature, Component) == 0x000000, "Member 'SHDoorMovementComponent_SHDoorMovementEventBP__DelegateSignature::Component' has a wrong offset!");

// DelegateFunction SHProto.SHDoorMovementComponent.SHDoorMovementWithActorContextEvent__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct SHDoorMovementComponent_SHDoorMovementWithActorContextEvent__DelegateSignature final
{
public:
	class USHDoorMovementComponent*               Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ActorContext;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorMovementComponent_SHDoorMovementWithActorContextEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHDoorMovementComponent_SHDoorMovementWithActorContextEvent__DelegateSignature");
static_assert(sizeof(SHDoorMovementComponent_SHDoorMovementWithActorContextEvent__DelegateSignature) == 0x000010, "Wrong size on SHDoorMovementComponent_SHDoorMovementWithActorContextEvent__DelegateSignature");
static_assert(offsetof(SHDoorMovementComponent_SHDoorMovementWithActorContextEvent__DelegateSignature, Component) == 0x000000, "Member 'SHDoorMovementComponent_SHDoorMovementWithActorContextEvent__DelegateSignature::Component' has a wrong offset!");
static_assert(offsetof(SHDoorMovementComponent_SHDoorMovementWithActorContextEvent__DelegateSignature, ActorContext) == 0x000008, "Member 'SHDoorMovementComponent_SHDoorMovementWithActorContextEvent__DelegateSignature::ActorContext' has a wrong offset!");

// Function SHProto.SHDoorMovementComponent.GetCurrentDoorAngle
// 0x0004 (0x0004 - 0x0000)
struct SHDoorMovementComponent_GetCurrentDoorAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorMovementComponent_GetCurrentDoorAngle) == 0x000004, "Wrong alignment on SHDoorMovementComponent_GetCurrentDoorAngle");
static_assert(sizeof(SHDoorMovementComponent_GetCurrentDoorAngle) == 0x000004, "Wrong size on SHDoorMovementComponent_GetCurrentDoorAngle");
static_assert(offsetof(SHDoorMovementComponent_GetCurrentDoorAngle, ReturnValue) == 0x000000, "Member 'SHDoorMovementComponent_GetCurrentDoorAngle::ReturnValue' has a wrong offset!");

// Function SHProto.SHDoorMovementComponent.GetDoorTraceLoc
// 0x0020 (0x0020 - 0x0000)
struct SHDoorMovementComponent_GetDoorTraceLoc final
{
public:
	float                                         DoorTraceAngle;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorMovementComponent_GetDoorTraceLoc) == 0x000008, "Wrong alignment on SHDoorMovementComponent_GetDoorTraceLoc");
static_assert(sizeof(SHDoorMovementComponent_GetDoorTraceLoc) == 0x000020, "Wrong size on SHDoorMovementComponent_GetDoorTraceLoc");
static_assert(offsetof(SHDoorMovementComponent_GetDoorTraceLoc, DoorTraceAngle) == 0x000000, "Member 'SHDoorMovementComponent_GetDoorTraceLoc::DoorTraceAngle' has a wrong offset!");
static_assert(offsetof(SHDoorMovementComponent_GetDoorTraceLoc, ReturnValue) == 0x000008, "Member 'SHDoorMovementComponent_GetDoorTraceLoc::ReturnValue' has a wrong offset!");

// Function SHProto.SHDoorMovementComponent.GetFakeMovementTargetAngle
// 0x0004 (0x0004 - 0x0000)
struct SHDoorMovementComponent_GetFakeMovementTargetAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorMovementComponent_GetFakeMovementTargetAngle) == 0x000004, "Wrong alignment on SHDoorMovementComponent_GetFakeMovementTargetAngle");
static_assert(sizeof(SHDoorMovementComponent_GetFakeMovementTargetAngle) == 0x000004, "Wrong size on SHDoorMovementComponent_GetFakeMovementTargetAngle");
static_assert(offsetof(SHDoorMovementComponent_GetFakeMovementTargetAngle, ReturnValue) == 0x000000, "Member 'SHDoorMovementComponent_GetFakeMovementTargetAngle::ReturnValue' has a wrong offset!");

// Function SHProto.SHDoorMovementComponent.GetFakeMovementTargetState
// 0x0001 (0x0001 - 0x0000)
struct SHDoorMovementComponent_GetFakeMovementTargetState final
{
public:
	ESHDoorStateEnum                              ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorMovementComponent_GetFakeMovementTargetState) == 0x000001, "Wrong alignment on SHDoorMovementComponent_GetFakeMovementTargetState");
static_assert(sizeof(SHDoorMovementComponent_GetFakeMovementTargetState) == 0x000001, "Wrong size on SHDoorMovementComponent_GetFakeMovementTargetState");
static_assert(offsetof(SHDoorMovementComponent_GetFakeMovementTargetState, ReturnValue) == 0x000000, "Member 'SHDoorMovementComponent_GetFakeMovementTargetState::ReturnValue' has a wrong offset!");

// Function SHProto.SHDoorMovementComponent.GetMaxDoorVelocity
// 0x0004 (0x0004 - 0x0000)
struct SHDoorMovementComponent_GetMaxDoorVelocity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorMovementComponent_GetMaxDoorVelocity) == 0x000004, "Wrong alignment on SHDoorMovementComponent_GetMaxDoorVelocity");
static_assert(sizeof(SHDoorMovementComponent_GetMaxDoorVelocity) == 0x000004, "Wrong size on SHDoorMovementComponent_GetMaxDoorVelocity");
static_assert(offsetof(SHDoorMovementComponent_GetMaxDoorVelocity, ReturnValue) == 0x000000, "Member 'SHDoorMovementComponent_GetMaxDoorVelocity::ReturnValue' has a wrong offset!");

// Function SHProto.SHDoorMovementComponent.HasPhysicForce
// 0x0001 (0x0001 - 0x0000)
struct SHDoorMovementComponent_HasPhysicForce final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorMovementComponent_HasPhysicForce) == 0x000001, "Wrong alignment on SHDoorMovementComponent_HasPhysicForce");
static_assert(sizeof(SHDoorMovementComponent_HasPhysicForce) == 0x000001, "Wrong size on SHDoorMovementComponent_HasPhysicForce");
static_assert(offsetof(SHDoorMovementComponent_HasPhysicForce, ReturnValue) == 0x000000, "Member 'SHDoorMovementComponent_HasPhysicForce::ReturnValue' has a wrong offset!");

// Function SHProto.SHDoorMovementComponent.IsAutocloseBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHDoorMovementComponent_IsAutocloseBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorMovementComponent_IsAutocloseBlocked) == 0x000001, "Wrong alignment on SHDoorMovementComponent_IsAutocloseBlocked");
static_assert(sizeof(SHDoorMovementComponent_IsAutocloseBlocked) == 0x000001, "Wrong size on SHDoorMovementComponent_IsAutocloseBlocked");
static_assert(offsetof(SHDoorMovementComponent_IsAutocloseBlocked, ReturnValue) == 0x000000, "Member 'SHDoorMovementComponent_IsAutocloseBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHDoorMovementComponent.IsDoorFrozen
// 0x0001 (0x0001 - 0x0000)
struct SHDoorMovementComponent_IsDoorFrozen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorMovementComponent_IsDoorFrozen) == 0x000001, "Wrong alignment on SHDoorMovementComponent_IsDoorFrozen");
static_assert(sizeof(SHDoorMovementComponent_IsDoorFrozen) == 0x000001, "Wrong size on SHDoorMovementComponent_IsDoorFrozen");
static_assert(offsetof(SHDoorMovementComponent_IsDoorFrozen, ReturnValue) == 0x000000, "Member 'SHDoorMovementComponent_IsDoorFrozen::ReturnValue' has a wrong offset!");

// Function SHProto.SHDoorMovementComponent.IsPlayingCurveAnim
// 0x0001 (0x0001 - 0x0000)
struct SHDoorMovementComponent_IsPlayingCurveAnim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorMovementComponent_IsPlayingCurveAnim) == 0x000001, "Wrong alignment on SHDoorMovementComponent_IsPlayingCurveAnim");
static_assert(sizeof(SHDoorMovementComponent_IsPlayingCurveAnim) == 0x000001, "Wrong size on SHDoorMovementComponent_IsPlayingCurveAnim");
static_assert(offsetof(SHDoorMovementComponent_IsPlayingCurveAnim, ReturnValue) == 0x000000, "Member 'SHDoorMovementComponent_IsPlayingCurveAnim::ReturnValue' has a wrong offset!");

// Function SHProto.SHDoorMovementComponent.IsPreHitOverlapingAnyCharacter
// 0x0001 (0x0001 - 0x0000)
struct SHDoorMovementComponent_IsPreHitOverlapingAnyCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorMovementComponent_IsPreHitOverlapingAnyCharacter) == 0x000001, "Wrong alignment on SHDoorMovementComponent_IsPreHitOverlapingAnyCharacter");
static_assert(sizeof(SHDoorMovementComponent_IsPreHitOverlapingAnyCharacter) == 0x000001, "Wrong size on SHDoorMovementComponent_IsPreHitOverlapingAnyCharacter");
static_assert(offsetof(SHDoorMovementComponent_IsPreHitOverlapingAnyCharacter, ReturnValue) == 0x000000, "Member 'SHDoorMovementComponent_IsPreHitOverlapingAnyCharacter::ReturnValue' has a wrong offset!");

// Function SHProto.SHDoorMovementComponent.IsPreHitOverlapingCharacterPlay
// 0x0001 (0x0001 - 0x0000)
struct SHDoorMovementComponent_IsPreHitOverlapingCharacterPlay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorMovementComponent_IsPreHitOverlapingCharacterPlay) == 0x000001, "Wrong alignment on SHDoorMovementComponent_IsPreHitOverlapingCharacterPlay");
static_assert(sizeof(SHDoorMovementComponent_IsPreHitOverlapingCharacterPlay) == 0x000001, "Wrong size on SHDoorMovementComponent_IsPreHitOverlapingCharacterPlay");
static_assert(offsetof(SHDoorMovementComponent_IsPreHitOverlapingCharacterPlay, ReturnValue) == 0x000000, "Member 'SHDoorMovementComponent_IsPreHitOverlapingCharacterPlay::ReturnValue' has a wrong offset!");

// Function SHProto.SHDoorMovementComponent.WasPhysicMovingLastTick
// 0x0001 (0x0001 - 0x0000)
struct SHDoorMovementComponent_WasPhysicMovingLastTick final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoorMovementComponent_WasPhysicMovingLastTick) == 0x000001, "Wrong alignment on SHDoorMovementComponent_WasPhysicMovingLastTick");
static_assert(sizeof(SHDoorMovementComponent_WasPhysicMovingLastTick) == 0x000001, "Wrong size on SHDoorMovementComponent_WasPhysicMovingLastTick");
static_assert(offsetof(SHDoorMovementComponent_WasPhysicMovingLastTick, ReturnValue) == 0x000000, "Member 'SHDoorMovementComponent_WasPhysicMovingLastTick::ReturnValue' has a wrong offset!");

// Function SHProto.SHGameplayMapBaseWidget.ApplyObjectData
// 0x0010 (0x0010 - 0x0000)
struct SHGameplayMapBaseWidget_ApplyObjectData final
{
public:
	class UWidget*                                WidgetObject;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHMapObjectTypeEnum                          ObjectType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ObjectValue;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayMapBaseWidget_ApplyObjectData) == 0x000008, "Wrong alignment on SHGameplayMapBaseWidget_ApplyObjectData");
static_assert(sizeof(SHGameplayMapBaseWidget_ApplyObjectData) == 0x000010, "Wrong size on SHGameplayMapBaseWidget_ApplyObjectData");
static_assert(offsetof(SHGameplayMapBaseWidget_ApplyObjectData, WidgetObject) == 0x000000, "Member 'SHGameplayMapBaseWidget_ApplyObjectData::WidgetObject' has a wrong offset!");
static_assert(offsetof(SHGameplayMapBaseWidget_ApplyObjectData, ObjectType) == 0x000008, "Member 'SHGameplayMapBaseWidget_ApplyObjectData::ObjectType' has a wrong offset!");
static_assert(offsetof(SHGameplayMapBaseWidget_ApplyObjectData, ObjectValue) == 0x00000C, "Member 'SHGameplayMapBaseWidget_ApplyObjectData::ObjectValue' has a wrong offset!");

// Function SHProto.SHDoubleDoorSD.ProcessDoorAlphaChanged
// 0x0008 (0x0008 - 0x0000)
struct SHDoubleDoorSD_ProcessDoorAlphaChanged final
{
public:
	class USHDoorMovementBaseComponent*           MovementComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoubleDoorSD_ProcessDoorAlphaChanged) == 0x000008, "Wrong alignment on SHDoubleDoorSD_ProcessDoorAlphaChanged");
static_assert(sizeof(SHDoubleDoorSD_ProcessDoorAlphaChanged) == 0x000008, "Wrong size on SHDoubleDoorSD_ProcessDoorAlphaChanged");
static_assert(offsetof(SHDoubleDoorSD_ProcessDoorAlphaChanged, MovementComponent) == 0x000000, "Member 'SHDoubleDoorSD_ProcessDoorAlphaChanged::MovementComponent' has a wrong offset!");

// Function SHProto.SHDoubleDoorSD.ProcessInteractionManagerInitialized
// 0x0008 (0x0008 - 0x0000)
struct SHDoubleDoorSD_ProcessInteractionManagerInitialized final
{
public:
	class USHInteractionManagerComponent*         Manager;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDoubleDoorSD_ProcessInteractionManagerInitialized) == 0x000008, "Wrong alignment on SHDoubleDoorSD_ProcessInteractionManagerInitialized");
static_assert(sizeof(SHDoubleDoorSD_ProcessInteractionManagerInitialized) == 0x000008, "Wrong size on SHDoubleDoorSD_ProcessInteractionManagerInitialized");
static_assert(offsetof(SHDoubleDoorSD_ProcessInteractionManagerInitialized, Manager) == 0x000000, "Member 'SHDoubleDoorSD_ProcessInteractionManagerInitialized::Manager' has a wrong offset!");

// Function SHProto.SHDynamicInteractionExecutive.GetOwnerContext
// 0x0008 (0x0008 - 0x0000)
struct SHDynamicInteractionExecutive_GetOwnerContext final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDynamicInteractionExecutive_GetOwnerContext) == 0x000008, "Wrong alignment on SHDynamicInteractionExecutive_GetOwnerContext");
static_assert(sizeof(SHDynamicInteractionExecutive_GetOwnerContext) == 0x000008, "Wrong size on SHDynamicInteractionExecutive_GetOwnerContext");
static_assert(offsetof(SHDynamicInteractionExecutive_GetOwnerContext, ReturnValue) == 0x000000, "Member 'SHDynamicInteractionExecutive_GetOwnerContext::ReturnValue' has a wrong offset!");

// Function SHProto.SHDynamicInteractionExecutive.GetOwnerManager
// 0x0008 (0x0008 - 0x0000)
struct SHDynamicInteractionExecutive_GetOwnerManager final
{
public:
	class USHDynamicInteractionManagerComponent*  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDynamicInteractionExecutive_GetOwnerManager) == 0x000008, "Wrong alignment on SHDynamicInteractionExecutive_GetOwnerManager");
static_assert(sizeof(SHDynamicInteractionExecutive_GetOwnerManager) == 0x000008, "Wrong size on SHDynamicInteractionExecutive_GetOwnerManager");
static_assert(offsetof(SHDynamicInteractionExecutive_GetOwnerManager, ReturnValue) == 0x000000, "Member 'SHDynamicInteractionExecutive_GetOwnerManager::ReturnValue' has a wrong offset!");

// Function SHProto.SHDynamicInteractionExecutive.ProcessInteractionManagerInitialized
// 0x0008 (0x0008 - 0x0000)
struct SHDynamicInteractionExecutive_ProcessInteractionManagerInitialized final
{
public:
	class USHInteractionManagerComponent*         Manager;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDynamicInteractionExecutive_ProcessInteractionManagerInitialized) == 0x000008, "Wrong alignment on SHDynamicInteractionExecutive_ProcessInteractionManagerInitialized");
static_assert(sizeof(SHDynamicInteractionExecutive_ProcessInteractionManagerInitialized) == 0x000008, "Wrong size on SHDynamicInteractionExecutive_ProcessInteractionManagerInitialized");
static_assert(offsetof(SHDynamicInteractionExecutive_ProcessInteractionManagerInitialized, Manager) == 0x000000, "Member 'SHDynamicInteractionExecutive_ProcessInteractionManagerInitialized::Manager' has a wrong offset!");

// Function SHProto.SHPlaythroughMariaReceivedDamageEndingFactor.SHDebug_Character_Endings_PlaythroughMariaReceivedDamageEndingFactor_SetDebugValue
// 0x0004 (0x0004 - 0x0000)
struct SHPlaythroughMariaReceivedDamageEndingFactor_SHDebug_Character_Endings_PlaythroughMariaReceivedDamageEndingFactor_SetDebugValue final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPlaythroughMariaReceivedDamageEndingFactor_SHDebug_Character_Endings_PlaythroughMariaReceivedDamageEndingFactor_SetDebugValue) == 0x000004, "Wrong alignment on SHPlaythroughMariaReceivedDamageEndingFactor_SHDebug_Character_Endings_PlaythroughMariaReceivedDamageEndingFactor_SetDebugValue");
static_assert(sizeof(SHPlaythroughMariaReceivedDamageEndingFactor_SHDebug_Character_Endings_PlaythroughMariaReceivedDamageEndingFactor_SetDebugValue) == 0x000004, "Wrong size on SHPlaythroughMariaReceivedDamageEndingFactor_SHDebug_Character_Endings_PlaythroughMariaReceivedDamageEndingFactor_SetDebugValue");
static_assert(offsetof(SHPlaythroughMariaReceivedDamageEndingFactor_SHDebug_Character_Endings_PlaythroughMariaReceivedDamageEndingFactor_SetDebugValue, InValue) == 0x000000, "Member 'SHPlaythroughMariaReceivedDamageEndingFactor_SHDebug_Character_Endings_PlaythroughMariaReceivedDamageEndingFactor_SetDebugValue::InValue' has a wrong offset!");

// Function SHProto.InteriorExteriorManager.getInstance
// 0x0010 (0x0010 - 0x0000)
struct InteriorExteriorManager_GetInstance final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInteriorExteriorManager*               ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteriorExteriorManager_GetInstance) == 0x000008, "Wrong alignment on InteriorExteriorManager_GetInstance");
static_assert(sizeof(InteriorExteriorManager_GetInstance) == 0x000010, "Wrong size on InteriorExteriorManager_GetInstance");
static_assert(offsetof(InteriorExteriorManager_GetInstance, WorldContext) == 0x000000, "Member 'InteriorExteriorManager_GetInstance::WorldContext' has a wrong offset!");
static_assert(offsetof(InteriorExteriorManager_GetInstance, ReturnValue) == 0x000008, "Member 'InteriorExteriorManager_GetInstance::ReturnValue' has a wrong offset!");

// Function SHProto.InteriorExteriorManager.CalcInteriorExteriorState
// 0x0010 (0x0010 - 0x0000)
struct InteriorExteriorManager_CalcInteriorExteriorState final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHInteriorExteriorStateEnum                  ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteriorExteriorManager_CalcInteriorExteriorState) == 0x000008, "Wrong alignment on InteriorExteriorManager_CalcInteriorExteriorState");
static_assert(sizeof(InteriorExteriorManager_CalcInteriorExteriorState) == 0x000010, "Wrong size on InteriorExteriorManager_CalcInteriorExteriorState");
static_assert(offsetof(InteriorExteriorManager_CalcInteriorExteriorState, Actor) == 0x000000, "Member 'InteriorExteriorManager_CalcInteriorExteriorState::Actor' has a wrong offset!");
static_assert(offsetof(InteriorExteriorManager_CalcInteriorExteriorState, ReturnValue) == 0x000008, "Member 'InteriorExteriorManager_CalcInteriorExteriorState::ReturnValue' has a wrong offset!");

// Function SHProto.SHDynamicObjectsCustomStencilStatics.GetCustomStencilValue
// 0x0008 (0x0008 - 0x0000)
struct SHDynamicObjectsCustomStencilStatics_GetCustomStencilValue final
{
public:
	ESHCustomStencilDynamicObject                 DynamicObjectType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHDynamicObjectsCustomStencilStatics_GetCustomStencilValue) == 0x000004, "Wrong alignment on SHDynamicObjectsCustomStencilStatics_GetCustomStencilValue");
static_assert(sizeof(SHDynamicObjectsCustomStencilStatics_GetCustomStencilValue) == 0x000008, "Wrong size on SHDynamicObjectsCustomStencilStatics_GetCustomStencilValue");
static_assert(offsetof(SHDynamicObjectsCustomStencilStatics_GetCustomStencilValue, DynamicObjectType) == 0x000000, "Member 'SHDynamicObjectsCustomStencilStatics_GetCustomStencilValue::DynamicObjectType' has a wrong offset!");
static_assert(offsetof(SHDynamicObjectsCustomStencilStatics_GetCustomStencilValue, ReturnValue) == 0x000004, "Member 'SHDynamicObjectsCustomStencilStatics_GetCustomStencilValue::ReturnValue' has a wrong offset!");

// Function SHProto.SHDynamicObjectsCustomStencilStatics.SetCustomStencilValue
// 0x0010 (0x0010 - 0x0000)
struct SHDynamicObjectsCustomStencilStatics_SetCustomStencilValue final
{
public:
	class UPrimitiveComponent*                    InDynamicObjectPrimitive;                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHCustomStencilDynamicObject                 DynamicObjectType;                                 // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHDynamicObjectsCustomStencilStatics_SetCustomStencilValue) == 0x000008, "Wrong alignment on SHDynamicObjectsCustomStencilStatics_SetCustomStencilValue");
static_assert(sizeof(SHDynamicObjectsCustomStencilStatics_SetCustomStencilValue) == 0x000010, "Wrong size on SHDynamicObjectsCustomStencilStatics_SetCustomStencilValue");
static_assert(offsetof(SHDynamicObjectsCustomStencilStatics_SetCustomStencilValue, InDynamicObjectPrimitive) == 0x000000, "Member 'SHDynamicObjectsCustomStencilStatics_SetCustomStencilValue::InDynamicObjectPrimitive' has a wrong offset!");
static_assert(offsetof(SHDynamicObjectsCustomStencilStatics_SetCustomStencilValue, DynamicObjectType) == 0x000008, "Member 'SHDynamicObjectsCustomStencilStatics_SetCustomStencilValue::DynamicObjectType' has a wrong offset!");

// Function SHProto.SHEddieAnimComponent.SetEddieMovementState
// 0x0002 (0x0002 - 0x0000)
struct SHEddieAnimComponent_SetEddieMovementState final
{
public:
	ESHEddieAnimInstanceMovementState             InMovementState;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InMovementChangeInProgress;                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEddieAnimComponent_SetEddieMovementState) == 0x000001, "Wrong alignment on SHEddieAnimComponent_SetEddieMovementState");
static_assert(sizeof(SHEddieAnimComponent_SetEddieMovementState) == 0x000002, "Wrong size on SHEddieAnimComponent_SetEddieMovementState");
static_assert(offsetof(SHEddieAnimComponent_SetEddieMovementState, InMovementState) == 0x000000, "Member 'SHEddieAnimComponent_SetEddieMovementState::InMovementState' has a wrong offset!");
static_assert(offsetof(SHEddieAnimComponent_SetEddieMovementState, InMovementChangeInProgress) == 0x000001, "Member 'SHEddieAnimComponent_SetEddieMovementState::InMovementChangeInProgress' has a wrong offset!");

// Function SHProto.SHProjectileFightable.SetDeactivated
// 0x0010 (0x0010 - 0x0000)
struct SHProjectileFightable_SetDeactivated final
{
public:
	bool                                          bDeactivated;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHProjectileFightable_SetDeactivated) == 0x000008, "Wrong alignment on SHProjectileFightable_SetDeactivated");
static_assert(sizeof(SHProjectileFightable_SetDeactivated) == 0x000010, "Wrong size on SHProjectileFightable_SetDeactivated");
static_assert(offsetof(SHProjectileFightable_SetDeactivated, bDeactivated) == 0x000000, "Member 'SHProjectileFightable_SetDeactivated::bDeactivated' has a wrong offset!");
static_assert(offsetof(SHProjectileFightable_SetDeactivated, Object) == 0x000008, "Member 'SHProjectileFightable_SetDeactivated::Object' has a wrong offset!");

// Function SHProto.SHProjectileFightable.IsDeactivated
// 0x0001 (0x0001 - 0x0000)
struct SHProjectileFightable_IsDeactivated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHProjectileFightable_IsDeactivated) == 0x000001, "Wrong alignment on SHProjectileFightable_IsDeactivated");
static_assert(sizeof(SHProjectileFightable_IsDeactivated) == 0x000001, "Wrong size on SHProjectileFightable_IsDeactivated");
static_assert(offsetof(SHProjectileFightable_IsDeactivated, ReturnValue) == 0x000000, "Member 'SHProjectileFightable_IsDeactivated::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemEmissiveDataHelper.InterpEmmisive
// 0x0010 (0x0010 - 0x0000)
struct SHItemEmissiveDataHelper_InterpEmmisive final
{
public:
	class UPrimitiveComponent*                    InComp;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldEmmisiveBeEnabled;                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHItemEmissiveDataHelper_InterpEmmisive) == 0x000008, "Wrong alignment on SHItemEmissiveDataHelper_InterpEmmisive");
static_assert(sizeof(SHItemEmissiveDataHelper_InterpEmmisive) == 0x000010, "Wrong size on SHItemEmissiveDataHelper_InterpEmmisive");
static_assert(offsetof(SHItemEmissiveDataHelper_InterpEmmisive, InComp) == 0x000000, "Member 'SHItemEmissiveDataHelper_InterpEmmisive::InComp' has a wrong offset!");
static_assert(offsetof(SHItemEmissiveDataHelper_InterpEmmisive, bShouldEmmisiveBeEnabled) == 0x000008, "Member 'SHItemEmissiveDataHelper_InterpEmmisive::bShouldEmmisiveBeEnabled' has a wrong offset!");

// Function SHProto.SHItemEmissiveDataHelper.OverrideDisabledValue
// 0x0010 (0x0010 - 0x0000)
struct SHItemEmissiveDataHelper_OverrideDisabledValue final
{
public:
	class UObject*                                Requester;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHItemEmissiveDataHelper_OverrideDisabledValue) == 0x000008, "Wrong alignment on SHItemEmissiveDataHelper_OverrideDisabledValue");
static_assert(sizeof(SHItemEmissiveDataHelper_OverrideDisabledValue) == 0x000010, "Wrong size on SHItemEmissiveDataHelper_OverrideDisabledValue");
static_assert(offsetof(SHItemEmissiveDataHelper_OverrideDisabledValue, Requester) == 0x000000, "Member 'SHItemEmissiveDataHelper_OverrideDisabledValue::Requester' has a wrong offset!");
static_assert(offsetof(SHItemEmissiveDataHelper_OverrideDisabledValue, InValue) == 0x000008, "Member 'SHItemEmissiveDataHelper_OverrideDisabledValue::InValue' has a wrong offset!");

// Function SHProto.SHItemEmissiveDataHelper.SetEmmisive
// 0x0010 (0x0010 - 0x0000)
struct SHItemEmissiveDataHelper_SetEmmisive final
{
public:
	class UPrimitiveComponent*                    InComp;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldEmmisiveBeEnabled;                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHItemEmissiveDataHelper_SetEmmisive) == 0x000008, "Wrong alignment on SHItemEmissiveDataHelper_SetEmmisive");
static_assert(sizeof(SHItemEmissiveDataHelper_SetEmmisive) == 0x000010, "Wrong size on SHItemEmissiveDataHelper_SetEmmisive");
static_assert(offsetof(SHItemEmissiveDataHelper_SetEmmisive, InComp) == 0x000000, "Member 'SHItemEmissiveDataHelper_SetEmmisive::InComp' has a wrong offset!");
static_assert(offsetof(SHItemEmissiveDataHelper_SetEmmisive, bShouldEmmisiveBeEnabled) == 0x000008, "Member 'SHItemEmissiveDataHelper_SetEmmisive::bShouldEmmisiveBeEnabled' has a wrong offset!");

// Function SHProto.SHItemEmissiveDataHelper.GetValue
// 0x0008 (0x0008 - 0x0000)
struct SHItemEmissiveDataHelper_GetValue final
{
public:
	bool                                          bShouldEmmisiveBeEnabled;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemEmissiveDataHelper_GetValue) == 0x000004, "Wrong alignment on SHItemEmissiveDataHelper_GetValue");
static_assert(sizeof(SHItemEmissiveDataHelper_GetValue) == 0x000008, "Wrong size on SHItemEmissiveDataHelper_GetValue");
static_assert(offsetof(SHItemEmissiveDataHelper_GetValue, bShouldEmmisiveBeEnabled) == 0x000000, "Member 'SHItemEmissiveDataHelper_GetValue::bShouldEmmisiveBeEnabled' has a wrong offset!");
static_assert(offsetof(SHItemEmissiveDataHelper_GetValue, ReturnValue) == 0x000004, "Member 'SHItemEmissiveDataHelper_GetValue::ReturnValue' has a wrong offset!");

// Function SHProto.SHEddieRangedWeapon.Fire
// 0x00F8 (0x00F8 - 0x0000)
struct SHEddieRangedWeapon_Fire final
{
public:
	struct FHitResult                             FoundHit;                                          // 0x0000(0x00E8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 Parent;                                            // 0x00E8(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHEddieRangedWeapon_Fire) == 0x000008, "Wrong alignment on SHEddieRangedWeapon_Fire");
static_assert(sizeof(SHEddieRangedWeapon_Fire) == 0x0000F8, "Wrong size on SHEddieRangedWeapon_Fire");
static_assert(offsetof(SHEddieRangedWeapon_Fire, FoundHit) == 0x000000, "Member 'SHEddieRangedWeapon_Fire::FoundHit' has a wrong offset!");
static_assert(offsetof(SHEddieRangedWeapon_Fire, Parent) == 0x0000E8, "Member 'SHEddieRangedWeapon_Fire::Parent' has a wrong offset!");
static_assert(offsetof(SHEddieRangedWeapon_Fire, ReturnValue) == 0x0000F0, "Member 'SHEddieRangedWeapon_Fire::ReturnValue' has a wrong offset!");

// Function SHProto.SHGameplayTutorialStatics.ShowScriptedBreakGlassTutorial
// 0x0008 (0x0008 - 0x0000)
struct SHGameplayTutorialStatics_ShowScriptedBreakGlassTutorial final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayTutorialStatics_ShowScriptedBreakGlassTutorial) == 0x000008, "Wrong alignment on SHGameplayTutorialStatics_ShowScriptedBreakGlassTutorial");
static_assert(sizeof(SHGameplayTutorialStatics_ShowScriptedBreakGlassTutorial) == 0x000008, "Wrong size on SHGameplayTutorialStatics_ShowScriptedBreakGlassTutorial");
static_assert(offsetof(SHGameplayTutorialStatics_ShowScriptedBreakGlassTutorial, WorldContextObject) == 0x000000, "Member 'SHGameplayTutorialStatics_ShowScriptedBreakGlassTutorial::WorldContextObject' has a wrong offset!");

// Function SHProto.SHGameplayTutorialStatics.ShowScriptedBreakWallTutorial
// 0x0008 (0x0008 - 0x0000)
struct SHGameplayTutorialStatics_ShowScriptedBreakWallTutorial final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayTutorialStatics_ShowScriptedBreakWallTutorial) == 0x000008, "Wrong alignment on SHGameplayTutorialStatics_ShowScriptedBreakWallTutorial");
static_assert(sizeof(SHGameplayTutorialStatics_ShowScriptedBreakWallTutorial) == 0x000008, "Wrong size on SHGameplayTutorialStatics_ShowScriptedBreakWallTutorial");
static_assert(offsetof(SHGameplayTutorialStatics_ShowScriptedBreakWallTutorial, WorldContextObject) == 0x000000, "Member 'SHGameplayTutorialStatics_ShowScriptedBreakWallTutorial::WorldContextObject' has a wrong offset!");

// Function SHProto.SHGameplayTutorialStatics.ShowScriptedPreTraversalTutorial
// 0x0008 (0x0008 - 0x0000)
struct SHGameplayTutorialStatics_ShowScriptedPreTraversalTutorial final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayTutorialStatics_ShowScriptedPreTraversalTutorial) == 0x000008, "Wrong alignment on SHGameplayTutorialStatics_ShowScriptedPreTraversalTutorial");
static_assert(sizeof(SHGameplayTutorialStatics_ShowScriptedPreTraversalTutorial) == 0x000008, "Wrong size on SHGameplayTutorialStatics_ShowScriptedPreTraversalTutorial");
static_assert(offsetof(SHGameplayTutorialStatics_ShowScriptedPreTraversalTutorial, WorldContextObject) == 0x000000, "Member 'SHGameplayTutorialStatics_ShowScriptedPreTraversalTutorial::WorldContextObject' has a wrong offset!");

// Function SHProto.SHGameplayTutorialStatics.ShowSprintTutorial
// 0x0008 (0x0008 - 0x0000)
struct SHGameplayTutorialStatics_ShowSprintTutorial final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayTutorialStatics_ShowSprintTutorial) == 0x000008, "Wrong alignment on SHGameplayTutorialStatics_ShowSprintTutorial");
static_assert(sizeof(SHGameplayTutorialStatics_ShowSprintTutorial) == 0x000008, "Wrong size on SHGameplayTutorialStatics_ShowSprintTutorial");
static_assert(offsetof(SHGameplayTutorialStatics_ShowSprintTutorial, WorldContextObject) == 0x000000, "Member 'SHGameplayTutorialStatics_ShowSprintTutorial::WorldContextObject' has a wrong offset!");

// Function SHProto.SHEnemiesManageCmbSubcomp.EnableInDangerModeOverride
// 0x0002 (0x0002 - 0x0000)
struct SHEnemiesManageCmbSubcomp_EnableInDangerModeOverride final
{
public:
	bool                                          Override;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemiesManageCmbSubcomp_EnableInDangerModeOverride) == 0x000001, "Wrong alignment on SHEnemiesManageCmbSubcomp_EnableInDangerModeOverride");
static_assert(sizeof(SHEnemiesManageCmbSubcomp_EnableInDangerModeOverride) == 0x000002, "Wrong size on SHEnemiesManageCmbSubcomp_EnableInDangerModeOverride");
static_assert(offsetof(SHEnemiesManageCmbSubcomp_EnableInDangerModeOverride, Override) == 0x000000, "Member 'SHEnemiesManageCmbSubcomp_EnableInDangerModeOverride::Override' has a wrong offset!");
static_assert(offsetof(SHEnemiesManageCmbSubcomp_EnableInDangerModeOverride, Value) == 0x000001, "Member 'SHEnemiesManageCmbSubcomp_EnableInDangerModeOverride::Value' has a wrong offset!");

// Function SHProto.SHEnemiesManageCmbSubcomp.RefreshInDangerInstant
// 0x0008 (0x0008 - 0x0000)
struct SHEnemiesManageCmbSubcomp_RefreshInDangerInstant final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemiesManageCmbSubcomp_RefreshInDangerInstant) == 0x000008, "Wrong alignment on SHEnemiesManageCmbSubcomp_RefreshInDangerInstant");
static_assert(sizeof(SHEnemiesManageCmbSubcomp_RefreshInDangerInstant) == 0x000008, "Wrong size on SHEnemiesManageCmbSubcomp_RefreshInDangerInstant");
static_assert(offsetof(SHEnemiesManageCmbSubcomp_RefreshInDangerInstant, Object) == 0x000000, "Member 'SHEnemiesManageCmbSubcomp_RefreshInDangerInstant::Object' has a wrong offset!");

// Function SHProto.SHEnemiesManageCmbSubcomp.SetCustomInDanger
// 0x0010 (0x0010 - 0x0000)
struct SHEnemiesManageCmbSubcomp_SetCustomInDanger final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemiesManageCmbSubcomp_SetCustomInDanger) == 0x000008, "Wrong alignment on SHEnemiesManageCmbSubcomp_SetCustomInDanger");
static_assert(sizeof(SHEnemiesManageCmbSubcomp_SetCustomInDanger) == 0x000010, "Wrong size on SHEnemiesManageCmbSubcomp_SetCustomInDanger");
static_assert(offsetof(SHEnemiesManageCmbSubcomp_SetCustomInDanger, NewValue) == 0x000000, "Member 'SHEnemiesManageCmbSubcomp_SetCustomInDanger::NewValue' has a wrong offset!");
static_assert(offsetof(SHEnemiesManageCmbSubcomp_SetCustomInDanger, Object) == 0x000008, "Member 'SHEnemiesManageCmbSubcomp_SetCustomInDanger::Object' has a wrong offset!");

// Function SHProto.SHEnemiesManageCmbSubcomp.SHDebug_Character_Combat_ForceDangerMode
// 0x0002 (0x0002 - 0x0000)
struct SHEnemiesManageCmbSubcomp_SHDebug_Character_Combat_ForceDangerMode final
{
public:
	bool                                          Force;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForcedValue;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemiesManageCmbSubcomp_SHDebug_Character_Combat_ForceDangerMode) == 0x000001, "Wrong alignment on SHEnemiesManageCmbSubcomp_SHDebug_Character_Combat_ForceDangerMode");
static_assert(sizeof(SHEnemiesManageCmbSubcomp_SHDebug_Character_Combat_ForceDangerMode) == 0x000002, "Wrong size on SHEnemiesManageCmbSubcomp_SHDebug_Character_Combat_ForceDangerMode");
static_assert(offsetof(SHEnemiesManageCmbSubcomp_SHDebug_Character_Combat_ForceDangerMode, Force) == 0x000000, "Member 'SHEnemiesManageCmbSubcomp_SHDebug_Character_Combat_ForceDangerMode::Force' has a wrong offset!");
static_assert(offsetof(SHEnemiesManageCmbSubcomp_SHDebug_Character_Combat_ForceDangerMode, ForcedValue) == 0x000001, "Member 'SHEnemiesManageCmbSubcomp_SHDebug_Character_Combat_ForceDangerMode::ForcedValue' has a wrong offset!");

// Function SHProto.SHEnemiesManageCmbSubcomp.FindNearbyDeadEnemies
// 0x0018 (0x0018 - 0x0000)
struct SHEnemiesManageCmbSubcomp_FindNearbyDeadEnemies final
{
public:
	float                                         InRadius;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMaxDeltaHeight;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ACharacter*>                     ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemiesManageCmbSubcomp_FindNearbyDeadEnemies) == 0x000008, "Wrong alignment on SHEnemiesManageCmbSubcomp_FindNearbyDeadEnemies");
static_assert(sizeof(SHEnemiesManageCmbSubcomp_FindNearbyDeadEnemies) == 0x000018, "Wrong size on SHEnemiesManageCmbSubcomp_FindNearbyDeadEnemies");
static_assert(offsetof(SHEnemiesManageCmbSubcomp_FindNearbyDeadEnemies, InRadius) == 0x000000, "Member 'SHEnemiesManageCmbSubcomp_FindNearbyDeadEnemies::InRadius' has a wrong offset!");
static_assert(offsetof(SHEnemiesManageCmbSubcomp_FindNearbyDeadEnemies, InMaxDeltaHeight) == 0x000004, "Member 'SHEnemiesManageCmbSubcomp_FindNearbyDeadEnemies::InMaxDeltaHeight' has a wrong offset!");
static_assert(offsetof(SHEnemiesManageCmbSubcomp_FindNearbyDeadEnemies, ReturnValue) == 0x000008, "Member 'SHEnemiesManageCmbSubcomp_FindNearbyDeadEnemies::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemiesManageCmbSubcomp.FindNearbyEnemies
// 0x0018 (0x0018 - 0x0000)
struct SHEnemiesManageCmbSubcomp_FindNearbyEnemies final
{
public:
	float                                         InRadius;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMaxDeltaHeight;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ACharacter*>                     ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemiesManageCmbSubcomp_FindNearbyEnemies) == 0x000008, "Wrong alignment on SHEnemiesManageCmbSubcomp_FindNearbyEnemies");
static_assert(sizeof(SHEnemiesManageCmbSubcomp_FindNearbyEnemies) == 0x000018, "Wrong size on SHEnemiesManageCmbSubcomp_FindNearbyEnemies");
static_assert(offsetof(SHEnemiesManageCmbSubcomp_FindNearbyEnemies, InRadius) == 0x000000, "Member 'SHEnemiesManageCmbSubcomp_FindNearbyEnemies::InRadius' has a wrong offset!");
static_assert(offsetof(SHEnemiesManageCmbSubcomp_FindNearbyEnemies, InMaxDeltaHeight) == 0x000004, "Member 'SHEnemiesManageCmbSubcomp_FindNearbyEnemies::InMaxDeltaHeight' has a wrong offset!");
static_assert(offsetof(SHEnemiesManageCmbSubcomp_FindNearbyEnemies, ReturnValue) == 0x000008, "Member 'SHEnemiesManageCmbSubcomp_FindNearbyEnemies::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemiesManageCmbSubcomp.GetNearbyDeadEnemies
// 0x0010 (0x0010 - 0x0000)
struct SHEnemiesManageCmbSubcomp_GetNearbyDeadEnemies final
{
public:
	TArray<class ACharacter*>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemiesManageCmbSubcomp_GetNearbyDeadEnemies) == 0x000008, "Wrong alignment on SHEnemiesManageCmbSubcomp_GetNearbyDeadEnemies");
static_assert(sizeof(SHEnemiesManageCmbSubcomp_GetNearbyDeadEnemies) == 0x000010, "Wrong size on SHEnemiesManageCmbSubcomp_GetNearbyDeadEnemies");
static_assert(offsetof(SHEnemiesManageCmbSubcomp_GetNearbyDeadEnemies, ReturnValue) == 0x000000, "Member 'SHEnemiesManageCmbSubcomp_GetNearbyDeadEnemies::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemiesManageCmbSubcomp.GetNearbyEnemies
// 0x0010 (0x0010 - 0x0000)
struct SHEnemiesManageCmbSubcomp_GetNearbyEnemies final
{
public:
	TArray<class ACharacter*>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemiesManageCmbSubcomp_GetNearbyEnemies) == 0x000008, "Wrong alignment on SHEnemiesManageCmbSubcomp_GetNearbyEnemies");
static_assert(sizeof(SHEnemiesManageCmbSubcomp_GetNearbyEnemies) == 0x000010, "Wrong size on SHEnemiesManageCmbSubcomp_GetNearbyEnemies");
static_assert(offsetof(SHEnemiesManageCmbSubcomp_GetNearbyEnemies, ReturnValue) == 0x000000, "Member 'SHEnemiesManageCmbSubcomp_GetNearbyEnemies::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemiesManageCmbSubcomp.HasAnyEnemyAggro
// 0x0002 (0x0002 - 0x0000)
struct SHEnemiesManageCmbSubcomp_HasAnyEnemyAggro final
{
public:
	bool                                          RequireAggressiveBehaviorStance;                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemiesManageCmbSubcomp_HasAnyEnemyAggro) == 0x000001, "Wrong alignment on SHEnemiesManageCmbSubcomp_HasAnyEnemyAggro");
static_assert(sizeof(SHEnemiesManageCmbSubcomp_HasAnyEnemyAggro) == 0x000002, "Wrong size on SHEnemiesManageCmbSubcomp_HasAnyEnemyAggro");
static_assert(offsetof(SHEnemiesManageCmbSubcomp_HasAnyEnemyAggro, RequireAggressiveBehaviorStance) == 0x000000, "Member 'SHEnemiesManageCmbSubcomp_HasAnyEnemyAggro::RequireAggressiveBehaviorStance' has a wrong offset!");
static_assert(offsetof(SHEnemiesManageCmbSubcomp_HasAnyEnemyAggro, ReturnValue) == 0x000001, "Member 'SHEnemiesManageCmbSubcomp_HasAnyEnemyAggro::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemiesManageCmbSubcomp.HasEnemyAggro
// 0x0010 (0x0010 - 0x0000)
struct SHEnemiesManageCmbSubcomp_HasEnemyAggro final
{
public:
	class APawn*                                  CheckedEnemy;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RequireAggressiveBehaviorStance;                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHEnemiesManageCmbSubcomp_HasEnemyAggro) == 0x000008, "Wrong alignment on SHEnemiesManageCmbSubcomp_HasEnemyAggro");
static_assert(sizeof(SHEnemiesManageCmbSubcomp_HasEnemyAggro) == 0x000010, "Wrong size on SHEnemiesManageCmbSubcomp_HasEnemyAggro");
static_assert(offsetof(SHEnemiesManageCmbSubcomp_HasEnemyAggro, CheckedEnemy) == 0x000000, "Member 'SHEnemiesManageCmbSubcomp_HasEnemyAggro::CheckedEnemy' has a wrong offset!");
static_assert(offsetof(SHEnemiesManageCmbSubcomp_HasEnemyAggro, RequireAggressiveBehaviorStance) == 0x000008, "Member 'SHEnemiesManageCmbSubcomp_HasEnemyAggro::RequireAggressiveBehaviorStance' has a wrong offset!");
static_assert(offsetof(SHEnemiesManageCmbSubcomp_HasEnemyAggro, ReturnValue) == 0x000009, "Member 'SHEnemiesManageCmbSubcomp_HasEnemyAggro::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemiesManageCmbSubcomp.HasPrimaryEnemyAggro
// 0x0002 (0x0002 - 0x0000)
struct SHEnemiesManageCmbSubcomp_HasPrimaryEnemyAggro final
{
public:
	bool                                          RequireAggressiveBehaviorStance;                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemiesManageCmbSubcomp_HasPrimaryEnemyAggro) == 0x000001, "Wrong alignment on SHEnemiesManageCmbSubcomp_HasPrimaryEnemyAggro");
static_assert(sizeof(SHEnemiesManageCmbSubcomp_HasPrimaryEnemyAggro) == 0x000002, "Wrong size on SHEnemiesManageCmbSubcomp_HasPrimaryEnemyAggro");
static_assert(offsetof(SHEnemiesManageCmbSubcomp_HasPrimaryEnemyAggro, RequireAggressiveBehaviorStance) == 0x000000, "Member 'SHEnemiesManageCmbSubcomp_HasPrimaryEnemyAggro::RequireAggressiveBehaviorStance' has a wrong offset!");
static_assert(offsetof(SHEnemiesManageCmbSubcomp_HasPrimaryEnemyAggro, ReturnValue) == 0x000001, "Member 'SHEnemiesManageCmbSubcomp_HasPrimaryEnemyAggro::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemiesManageCmbSubcomp.IsDangerModeForced
// 0x0001 (0x0001 - 0x0000)
struct SHEnemiesManageCmbSubcomp_IsDangerModeForced final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemiesManageCmbSubcomp_IsDangerModeForced) == 0x000001, "Wrong alignment on SHEnemiesManageCmbSubcomp_IsDangerModeForced");
static_assert(sizeof(SHEnemiesManageCmbSubcomp_IsDangerModeForced) == 0x000001, "Wrong size on SHEnemiesManageCmbSubcomp_IsDangerModeForced");
static_assert(offsetof(SHEnemiesManageCmbSubcomp_IsDangerModeForced, ReturnValue) == 0x000000, "Member 'SHEnemiesManageCmbSubcomp_IsDangerModeForced::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemiesManageCmbSubcomp.IsInDanger
// 0x0001 (0x0001 - 0x0000)
struct SHEnemiesManageCmbSubcomp_IsInDanger final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemiesManageCmbSubcomp_IsInDanger) == 0x000001, "Wrong alignment on SHEnemiesManageCmbSubcomp_IsInDanger");
static_assert(sizeof(SHEnemiesManageCmbSubcomp_IsInDanger) == 0x000001, "Wrong size on SHEnemiesManageCmbSubcomp_IsInDanger");
static_assert(offsetof(SHEnemiesManageCmbSubcomp_IsInDanger, ReturnValue) == 0x000000, "Member 'SHEnemiesManageCmbSubcomp_IsInDanger::ReturnValue' has a wrong offset!");

// Function SHProto.SHFlickeringLightBase.GetAllFlickeringLights
// 0x0010 (0x0010 - 0x0000)
struct SHFlickeringLightBase_GetAllFlickeringLights final
{
public:
	TArray<class ASHFlickeringLightBase*>         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFlickeringLightBase_GetAllFlickeringLights) == 0x000008, "Wrong alignment on SHFlickeringLightBase_GetAllFlickeringLights");
static_assert(sizeof(SHFlickeringLightBase_GetAllFlickeringLights) == 0x000010, "Wrong size on SHFlickeringLightBase_GetAllFlickeringLights");
static_assert(offsetof(SHFlickeringLightBase_GetAllFlickeringLights, ReturnValue) == 0x000000, "Member 'SHFlickeringLightBase_GetAllFlickeringLights::ReturnValue' has a wrong offset!");

// Function SHProto.SHFlickeringLightBase.GetGroupState
// 0x000C (0x000C - 0x0000)
struct SHFlickeringLightBase_GetGroupState final
{
public:
	class FName                                   Group;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHFlickerGroupState                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFlickeringLightBase_GetGroupState) == 0x000004, "Wrong alignment on SHFlickeringLightBase_GetGroupState");
static_assert(sizeof(SHFlickeringLightBase_GetGroupState) == 0x00000C, "Wrong size on SHFlickeringLightBase_GetGroupState");
static_assert(offsetof(SHFlickeringLightBase_GetGroupState, Group) == 0x000000, "Member 'SHFlickeringLightBase_GetGroupState::Group' has a wrong offset!");
static_assert(offsetof(SHFlickeringLightBase_GetGroupState, ReturnValue) == 0x000008, "Member 'SHFlickeringLightBase_GetGroupState::ReturnValue' has a wrong offset!");

// Function SHProto.SHFlickeringLightBase.PrepareFlickerGroups
// 0x000C (0x000C - 0x0000)
struct SHFlickeringLightBase_PrepareFlickerGroups final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntensityScale;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ResetGroups;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFlickeringLightBase_PrepareFlickerGroups) == 0x000004, "Wrong alignment on SHFlickeringLightBase_PrepareFlickerGroups");
static_assert(sizeof(SHFlickeringLightBase_PrepareFlickerGroups) == 0x00000C, "Wrong size on SHFlickeringLightBase_PrepareFlickerGroups");
static_assert(offsetof(SHFlickeringLightBase_PrepareFlickerGroups, Temperature) == 0x000000, "Member 'SHFlickeringLightBase_PrepareFlickerGroups::Temperature' has a wrong offset!");
static_assert(offsetof(SHFlickeringLightBase_PrepareFlickerGroups, IntensityScale) == 0x000004, "Member 'SHFlickeringLightBase_PrepareFlickerGroups::IntensityScale' has a wrong offset!");
static_assert(offsetof(SHFlickeringLightBase_PrepareFlickerGroups, ResetGroups) == 0x000008, "Member 'SHFlickeringLightBase_PrepareFlickerGroups::ResetGroups' has a wrong offset!");

// Function SHProto.SHFlickeringLightBase.SetGroupState
// 0x000C (0x000C - 0x0000)
struct SHFlickeringLightBase_SetGroupState final
{
public:
	class FName                                   Group;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHFlickerGroupState                          State;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFlickeringLightBase_SetGroupState) == 0x000004, "Wrong alignment on SHFlickeringLightBase_SetGroupState");
static_assert(sizeof(SHFlickeringLightBase_SetGroupState) == 0x00000C, "Wrong size on SHFlickeringLightBase_SetGroupState");
static_assert(offsetof(SHFlickeringLightBase_SetGroupState, Group) == 0x000000, "Member 'SHFlickeringLightBase_SetGroupState::Group' has a wrong offset!");
static_assert(offsetof(SHFlickeringLightBase_SetGroupState, State) == 0x000008, "Member 'SHFlickeringLightBase_SetGroupState::State' has a wrong offset!");

// Function SHProto.SHFlickeringLightBase.SetWantTickEnabled
// 0x0001 (0x0001 - 0x0000)
struct SHFlickeringLightBase_SetWantTickEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFlickeringLightBase_SetWantTickEnabled) == 0x000001, "Wrong alignment on SHFlickeringLightBase_SetWantTickEnabled");
static_assert(sizeof(SHFlickeringLightBase_SetWantTickEnabled) == 0x000001, "Wrong size on SHFlickeringLightBase_SetWantTickEnabled");
static_assert(offsetof(SHFlickeringLightBase_SetWantTickEnabled, bEnabled) == 0x000000, "Member 'SHFlickeringLightBase_SetWantTickEnabled::bEnabled' has a wrong offset!");

// Function SHProto.SHFlickeringLightBase.StepFlickersInEditor
// 0x0004 (0x0004 - 0x0000)
struct SHFlickeringLightBase_StepFlickersInEditor final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFlickeringLightBase_StepFlickersInEditor) == 0x000004, "Wrong alignment on SHFlickeringLightBase_StepFlickersInEditor");
static_assert(sizeof(SHFlickeringLightBase_StepFlickersInEditor) == 0x000004, "Wrong size on SHFlickeringLightBase_StepFlickersInEditor");
static_assert(offsetof(SHFlickeringLightBase_StepFlickersInEditor, DeltaSeconds) == 0x000000, "Member 'SHFlickeringLightBase_StepFlickersInEditor::DeltaSeconds' has a wrong offset!");

// Function SHProto.SHFlickeringLightBase.UpdateNativeFlickers
// 0x0020 (0x0020 - 0x0000)
struct SHFlickeringLightBase_UpdateNativeFlickers final
{
public:
	bool                                          RandomFlickerEnabled;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           EmissionColor;                                     // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EmissionReplaceMtl;                                // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EmissionReplaceLgh;                                // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExternalScaleLight;                                // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExternalScaleMaterial;                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFlickeringLightBase_UpdateNativeFlickers) == 0x000004, "Wrong alignment on SHFlickeringLightBase_UpdateNativeFlickers");
static_assert(sizeof(SHFlickeringLightBase_UpdateNativeFlickers) == 0x000020, "Wrong size on SHFlickeringLightBase_UpdateNativeFlickers");
static_assert(offsetof(SHFlickeringLightBase_UpdateNativeFlickers, RandomFlickerEnabled) == 0x000000, "Member 'SHFlickeringLightBase_UpdateNativeFlickers::RandomFlickerEnabled' has a wrong offset!");
static_assert(offsetof(SHFlickeringLightBase_UpdateNativeFlickers, EmissionColor) == 0x000004, "Member 'SHFlickeringLightBase_UpdateNativeFlickers::EmissionColor' has a wrong offset!");
static_assert(offsetof(SHFlickeringLightBase_UpdateNativeFlickers, EmissionReplaceMtl) == 0x000014, "Member 'SHFlickeringLightBase_UpdateNativeFlickers::EmissionReplaceMtl' has a wrong offset!");
static_assert(offsetof(SHFlickeringLightBase_UpdateNativeFlickers, EmissionReplaceLgh) == 0x000015, "Member 'SHFlickeringLightBase_UpdateNativeFlickers::EmissionReplaceLgh' has a wrong offset!");
static_assert(offsetof(SHFlickeringLightBase_UpdateNativeFlickers, ExternalScaleLight) == 0x000018, "Member 'SHFlickeringLightBase_UpdateNativeFlickers::ExternalScaleLight' has a wrong offset!");
static_assert(offsetof(SHFlickeringLightBase_UpdateNativeFlickers, ExternalScaleMaterial) == 0x00001C, "Member 'SHFlickeringLightBase_UpdateNativeFlickers::ExternalScaleMaterial' has a wrong offset!");

// Function SHProto.SHFlickeringLightBase.UpdateNativeParameters
// 0x0028 (0x0028 - 0x0000)
struct SHFlickeringLightBase_UpdateNativeParameters final
{
public:
	bool                                          EnableRandomFlicker;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LightIntensityMin;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightIntensityMax;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlinkingMin;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlinkingMax;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeTimeMin;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeTimeMax;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShutdownIntensity;                                 // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GentleShutdownTime;                                // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceGentleShutdown;                               // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BlinkingIsAbsolute;                                // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFlickeringLightBase_UpdateNativeParameters) == 0x000004, "Wrong alignment on SHFlickeringLightBase_UpdateNativeParameters");
static_assert(sizeof(SHFlickeringLightBase_UpdateNativeParameters) == 0x000028, "Wrong size on SHFlickeringLightBase_UpdateNativeParameters");
static_assert(offsetof(SHFlickeringLightBase_UpdateNativeParameters, EnableRandomFlicker) == 0x000000, "Member 'SHFlickeringLightBase_UpdateNativeParameters::EnableRandomFlicker' has a wrong offset!");
static_assert(offsetof(SHFlickeringLightBase_UpdateNativeParameters, LightIntensityMin) == 0x000004, "Member 'SHFlickeringLightBase_UpdateNativeParameters::LightIntensityMin' has a wrong offset!");
static_assert(offsetof(SHFlickeringLightBase_UpdateNativeParameters, LightIntensityMax) == 0x000008, "Member 'SHFlickeringLightBase_UpdateNativeParameters::LightIntensityMax' has a wrong offset!");
static_assert(offsetof(SHFlickeringLightBase_UpdateNativeParameters, BlinkingMin) == 0x00000C, "Member 'SHFlickeringLightBase_UpdateNativeParameters::BlinkingMin' has a wrong offset!");
static_assert(offsetof(SHFlickeringLightBase_UpdateNativeParameters, BlinkingMax) == 0x000010, "Member 'SHFlickeringLightBase_UpdateNativeParameters::BlinkingMax' has a wrong offset!");
static_assert(offsetof(SHFlickeringLightBase_UpdateNativeParameters, ChangeTimeMin) == 0x000014, "Member 'SHFlickeringLightBase_UpdateNativeParameters::ChangeTimeMin' has a wrong offset!");
static_assert(offsetof(SHFlickeringLightBase_UpdateNativeParameters, ChangeTimeMax) == 0x000018, "Member 'SHFlickeringLightBase_UpdateNativeParameters::ChangeTimeMax' has a wrong offset!");
static_assert(offsetof(SHFlickeringLightBase_UpdateNativeParameters, ShutdownIntensity) == 0x00001C, "Member 'SHFlickeringLightBase_UpdateNativeParameters::ShutdownIntensity' has a wrong offset!");
static_assert(offsetof(SHFlickeringLightBase_UpdateNativeParameters, GentleShutdownTime) == 0x000020, "Member 'SHFlickeringLightBase_UpdateNativeParameters::GentleShutdownTime' has a wrong offset!");
static_assert(offsetof(SHFlickeringLightBase_UpdateNativeParameters, ForceGentleShutdown) == 0x000024, "Member 'SHFlickeringLightBase_UpdateNativeParameters::ForceGentleShutdown' has a wrong offset!");
static_assert(offsetof(SHFlickeringLightBase_UpdateNativeParameters, BlinkingIsAbsolute) == 0x000025, "Member 'SHFlickeringLightBase_UpdateNativeParameters::BlinkingIsAbsolute' has a wrong offset!");

// Function SHProto.SHFlickeringLightBase.UpdateTemperatureAndBaseIntensity
// 0x0008 (0x0008 - 0x0000)
struct SHFlickeringLightBase_UpdateTemperatureAndBaseIntensity final
{
public:
	float                                         Temperature;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntensityScale;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFlickeringLightBase_UpdateTemperatureAndBaseIntensity) == 0x000004, "Wrong alignment on SHFlickeringLightBase_UpdateTemperatureAndBaseIntensity");
static_assert(sizeof(SHFlickeringLightBase_UpdateTemperatureAndBaseIntensity) == 0x000008, "Wrong size on SHFlickeringLightBase_UpdateTemperatureAndBaseIntensity");
static_assert(offsetof(SHFlickeringLightBase_UpdateTemperatureAndBaseIntensity, Temperature) == 0x000000, "Member 'SHFlickeringLightBase_UpdateTemperatureAndBaseIntensity::Temperature' has a wrong offset!");
static_assert(offsetof(SHFlickeringLightBase_UpdateTemperatureAndBaseIntensity, IntensityScale) == 0x000004, "Member 'SHFlickeringLightBase_UpdateTemperatureAndBaseIntensity::IntensityScale' has a wrong offset!");

// Function SHProto.SHFlickeringLightBase.EditModeEnabled
// 0x0001 (0x0001 - 0x0000)
struct SHFlickeringLightBase_EditModeEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFlickeringLightBase_EditModeEnabled) == 0x000001, "Wrong alignment on SHFlickeringLightBase_EditModeEnabled");
static_assert(sizeof(SHFlickeringLightBase_EditModeEnabled) == 0x000001, "Wrong size on SHFlickeringLightBase_EditModeEnabled");
static_assert(offsetof(SHFlickeringLightBase_EditModeEnabled, ReturnValue) == 0x000000, "Member 'SHFlickeringLightBase_EditModeEnabled::ReturnValue' has a wrong offset!");

// Function SHProto.SHFlickeringLightBase.GetAverageIntensity
// 0x0004 (0x0004 - 0x0000)
struct SHFlickeringLightBase_GetAverageIntensity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFlickeringLightBase_GetAverageIntensity) == 0x000004, "Wrong alignment on SHFlickeringLightBase_GetAverageIntensity");
static_assert(sizeof(SHFlickeringLightBase_GetAverageIntensity) == 0x000004, "Wrong size on SHFlickeringLightBase_GetAverageIntensity");
static_assert(offsetof(SHFlickeringLightBase_GetAverageIntensity, ReturnValue) == 0x000000, "Member 'SHFlickeringLightBase_GetAverageIntensity::ReturnValue' has a wrong offset!");

// Function SHProto.SHFlickeringLightBase.GetNumberOfBrokenComponents
// 0x0004 (0x0004 - 0x0000)
struct SHFlickeringLightBase_GetNumberOfBrokenComponents final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFlickeringLightBase_GetNumberOfBrokenComponents) == 0x000004, "Wrong alignment on SHFlickeringLightBase_GetNumberOfBrokenComponents");
static_assert(sizeof(SHFlickeringLightBase_GetNumberOfBrokenComponents) == 0x000004, "Wrong size on SHFlickeringLightBase_GetNumberOfBrokenComponents");
static_assert(offsetof(SHFlickeringLightBase_GetNumberOfBrokenComponents, ReturnValue) == 0x000000, "Member 'SHFlickeringLightBase_GetNumberOfBrokenComponents::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyHitReactionSelectionComponent.AddHitReactionsBlocker
// 0x0010 (0x0010 - 0x0000)
struct SHEnemyHitReactionSelectionComponent_AddHitReactionsBlocker final
{
public:
	TScriptInterface<class ISHHitReactionSelectionHitReactionBlockerInterface> InHitReactionsBlocker;                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyHitReactionSelectionComponent_AddHitReactionsBlocker) == 0x000008, "Wrong alignment on SHEnemyHitReactionSelectionComponent_AddHitReactionsBlocker");
static_assert(sizeof(SHEnemyHitReactionSelectionComponent_AddHitReactionsBlocker) == 0x000010, "Wrong size on SHEnemyHitReactionSelectionComponent_AddHitReactionsBlocker");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_AddHitReactionsBlocker, InHitReactionsBlocker) == 0x000000, "Member 'SHEnemyHitReactionSelectionComponent_AddHitReactionsBlocker::InHitReactionsBlocker' has a wrong offset!");

// Function SHProto.SHEnemyHitReactionSelectionComponent.CountReceivedHitAndDecideResponse
// 0x01B8 (0x01B8 - 0x0000)
struct SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse final
{
public:
	float                                         OutDamageMultiplier;                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutMaximumRemainingHealthFraction;                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHHitReactionSelectionHitResponseType        OutHitResponseType;                                // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OutHitResponseVariant;                             // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutHitResponseDurationLimit;                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutDeathVariant;                                   // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InDamageSourceLocation;                            // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             InHitInfo;                                         // 0x0038(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	const class UDamageType*                      InDamageType;                                      // 0x0120(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InDamageCauser;                                    // 0x0128(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InHitIdentifier;                                   // 0x0130(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaiAggroStance                               InAggressionLevel;                                 // 0x0134(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InHealthFraction;                                  // 0x0138(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSHHitReactionIdentifier>       InActiveHitReactions;                              // 0x0140(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSHEnemyHitReactionSelectionAllowedStates InAllowedStates;                                   // 0x0150(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B1[0x7];                                      // 0x01B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse) == 0x000008, "Wrong alignment on SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse");
static_assert(sizeof(SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse) == 0x0001B8, "Wrong size on SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse, OutDamageMultiplier) == 0x000000, "Member 'SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse::OutDamageMultiplier' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse, OutMaximumRemainingHealthFraction) == 0x000004, "Member 'SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse::OutMaximumRemainingHealthFraction' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse, OutHitResponseType) == 0x000008, "Member 'SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse::OutHitResponseType' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse, OutHitResponseVariant) == 0x00000C, "Member 'SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse::OutHitResponseVariant' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse, OutHitResponseDurationLimit) == 0x000014, "Member 'SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse::OutHitResponseDurationLimit' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse, OutDeathVariant) == 0x000018, "Member 'SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse::OutDeathVariant' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse, InDamageSourceLocation) == 0x000020, "Member 'SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse::InDamageSourceLocation' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse, InHitInfo) == 0x000038, "Member 'SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse::InHitInfo' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse, InDamageType) == 0x000120, "Member 'SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse::InDamageType' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse, InDamageCauser) == 0x000128, "Member 'SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse::InDamageCauser' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse, InHitIdentifier) == 0x000130, "Member 'SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse::InHitIdentifier' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse, InAggressionLevel) == 0x000134, "Member 'SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse::InAggressionLevel' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse, InHealthFraction) == 0x000138, "Member 'SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse::InHealthFraction' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse, InActiveHitReactions) == 0x000140, "Member 'SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse::InActiveHitReactions' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse, InAllowedStates) == 0x000150, "Member 'SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse::InAllowedStates' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse, ReturnValue) == 0x0001B0, "Member 'SHEnemyHitReactionSelectionComponent_CountReceivedHitAndDecideResponse::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyHitReactionSelectionComponent.DecideHitResponse
// 0x01B8 (0x01B8 - 0x0000)
struct SHEnemyHitReactionSelectionComponent_DecideHitResponse final
{
public:
	float                                         OutDamageMultiplier;                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutMaximumRemainingHealthFraction;                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHHitReactionSelectionHitResponseType        OutHitResponseType;                                // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OutHitResponseVariant;                             // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutHitResponseDurationLimit;                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutDeathVariant;                                   // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           OutResetConsecutiveHitCounters;                    // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                InDamageSourceLocation;                            // 0x0030(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             InHitInfo;                                         // 0x0048(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	const class UDamageType*                      InDamageType;                                      // 0x0130(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InDamageCauser;                                    // 0x0138(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaiAggroStance                               InAggressionLevel;                                 // 0x0140(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InHealthFraction;                                  // 0x0144(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSHHitReactionIdentifier>       InActiveHitReactions;                              // 0x0148(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSHEnemyHitReactionSelectionAllowedStates InAllowedStates;                                   // 0x0158(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyHitReactionSelectionComponent_DecideHitResponse) == 0x000008, "Wrong alignment on SHEnemyHitReactionSelectionComponent_DecideHitResponse");
static_assert(sizeof(SHEnemyHitReactionSelectionComponent_DecideHitResponse) == 0x0001B8, "Wrong size on SHEnemyHitReactionSelectionComponent_DecideHitResponse");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_DecideHitResponse, OutDamageMultiplier) == 0x000000, "Member 'SHEnemyHitReactionSelectionComponent_DecideHitResponse::OutDamageMultiplier' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_DecideHitResponse, OutMaximumRemainingHealthFraction) == 0x000004, "Member 'SHEnemyHitReactionSelectionComponent_DecideHitResponse::OutMaximumRemainingHealthFraction' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_DecideHitResponse, OutHitResponseType) == 0x000008, "Member 'SHEnemyHitReactionSelectionComponent_DecideHitResponse::OutHitResponseType' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_DecideHitResponse, OutHitResponseVariant) == 0x00000C, "Member 'SHEnemyHitReactionSelectionComponent_DecideHitResponse::OutHitResponseVariant' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_DecideHitResponse, OutHitResponseDurationLimit) == 0x000014, "Member 'SHEnemyHitReactionSelectionComponent_DecideHitResponse::OutHitResponseDurationLimit' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_DecideHitResponse, OutDeathVariant) == 0x000018, "Member 'SHEnemyHitReactionSelectionComponent_DecideHitResponse::OutDeathVariant' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_DecideHitResponse, OutResetConsecutiveHitCounters) == 0x000020, "Member 'SHEnemyHitReactionSelectionComponent_DecideHitResponse::OutResetConsecutiveHitCounters' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_DecideHitResponse, InDamageSourceLocation) == 0x000030, "Member 'SHEnemyHitReactionSelectionComponent_DecideHitResponse::InDamageSourceLocation' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_DecideHitResponse, InHitInfo) == 0x000048, "Member 'SHEnemyHitReactionSelectionComponent_DecideHitResponse::InHitInfo' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_DecideHitResponse, InDamageType) == 0x000130, "Member 'SHEnemyHitReactionSelectionComponent_DecideHitResponse::InDamageType' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_DecideHitResponse, InDamageCauser) == 0x000138, "Member 'SHEnemyHitReactionSelectionComponent_DecideHitResponse::InDamageCauser' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_DecideHitResponse, InAggressionLevel) == 0x000140, "Member 'SHEnemyHitReactionSelectionComponent_DecideHitResponse::InAggressionLevel' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_DecideHitResponse, InHealthFraction) == 0x000144, "Member 'SHEnemyHitReactionSelectionComponent_DecideHitResponse::InHealthFraction' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_DecideHitResponse, InActiveHitReactions) == 0x000148, "Member 'SHEnemyHitReactionSelectionComponent_DecideHitResponse::InActiveHitReactions' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_DecideHitResponse, InAllowedStates) == 0x000158, "Member 'SHEnemyHitReactionSelectionComponent_DecideHitResponse::InAllowedStates' has a wrong offset!");

// Function SHProto.SHEnemyHitReactionSelectionComponent.IncrementActiveCountedHitsByDamage
// 0x0020 (0x0020 - 0x0000)
struct SHEnemyHitReactionSelectionComponent_IncrementActiveCountedHitsByDamage final
{
public:
	int32                                         InHitIdentifier;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      InDamageType;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InHitBoneName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InHitBoneShapeIndex;                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHEnemyHitReactionSelectionComponent_IncrementActiveCountedHitsByDamage) == 0x000008, "Wrong alignment on SHEnemyHitReactionSelectionComponent_IncrementActiveCountedHitsByDamage");
static_assert(sizeof(SHEnemyHitReactionSelectionComponent_IncrementActiveCountedHitsByDamage) == 0x000020, "Wrong size on SHEnemyHitReactionSelectionComponent_IncrementActiveCountedHitsByDamage");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_IncrementActiveCountedHitsByDamage, InHitIdentifier) == 0x000000, "Member 'SHEnemyHitReactionSelectionComponent_IncrementActiveCountedHitsByDamage::InHitIdentifier' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_IncrementActiveCountedHitsByDamage, InDamageType) == 0x000008, "Member 'SHEnemyHitReactionSelectionComponent_IncrementActiveCountedHitsByDamage::InDamageType' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_IncrementActiveCountedHitsByDamage, InHitBoneName) == 0x000010, "Member 'SHEnemyHitReactionSelectionComponent_IncrementActiveCountedHitsByDamage::InHitBoneName' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_IncrementActiveCountedHitsByDamage, InHitBoneShapeIndex) == 0x000018, "Member 'SHEnemyHitReactionSelectionComponent_IncrementActiveCountedHitsByDamage::InHitBoneShapeIndex' has a wrong offset!");

// Function SHProto.SHEnemyHitReactionSelectionComponent.RemoveHitReactionsBlocker
// 0x0010 (0x0010 - 0x0000)
struct SHEnemyHitReactionSelectionComponent_RemoveHitReactionsBlocker final
{
public:
	TScriptInterface<class ISHHitReactionSelectionHitReactionBlockerInterface> InHitReactionsBlocker;                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyHitReactionSelectionComponent_RemoveHitReactionsBlocker) == 0x000008, "Wrong alignment on SHEnemyHitReactionSelectionComponent_RemoveHitReactionsBlocker");
static_assert(sizeof(SHEnemyHitReactionSelectionComponent_RemoveHitReactionsBlocker) == 0x000010, "Wrong size on SHEnemyHitReactionSelectionComponent_RemoveHitReactionsBlocker");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_RemoveHitReactionsBlocker, InHitReactionsBlocker) == 0x000000, "Member 'SHEnemyHitReactionSelectionComponent_RemoveHitReactionsBlocker::InHitReactionsBlocker' has a wrong offset!");

// Function SHProto.SHEnemyHitReactionSelectionComponent.ResetActiveCountedHitsOfCounterName
// 0x0008 (0x0008 - 0x0000)
struct SHEnemyHitReactionSelectionComponent_ResetActiveCountedHitsOfCounterName final
{
public:
	class FName                                   InConsecutiveHitsCounterName;                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyHitReactionSelectionComponent_ResetActiveCountedHitsOfCounterName) == 0x000004, "Wrong alignment on SHEnemyHitReactionSelectionComponent_ResetActiveCountedHitsOfCounterName");
static_assert(sizeof(SHEnemyHitReactionSelectionComponent_ResetActiveCountedHitsOfCounterName) == 0x000008, "Wrong size on SHEnemyHitReactionSelectionComponent_ResetActiveCountedHitsOfCounterName");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_ResetActiveCountedHitsOfCounterName, InConsecutiveHitsCounterName) == 0x000000, "Member 'SHEnemyHitReactionSelectionComponent_ResetActiveCountedHitsOfCounterName::InConsecutiveHitsCounterName' has a wrong offset!");

// Function SHProto.SHEnemyHitReactionSelectionComponent.SetHitReactionSelectionConfiguration
// 0x0008 (0x0008 - 0x0000)
struct SHEnemyHitReactionSelectionComponent_SetHitReactionSelectionConfiguration final
{
public:
	class USEnemyHitReactionSelection*            InConfiguration;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyHitReactionSelectionComponent_SetHitReactionSelectionConfiguration) == 0x000008, "Wrong alignment on SHEnemyHitReactionSelectionComponent_SetHitReactionSelectionConfiguration");
static_assert(sizeof(SHEnemyHitReactionSelectionComponent_SetHitReactionSelectionConfiguration) == 0x000008, "Wrong size on SHEnemyHitReactionSelectionComponent_SetHitReactionSelectionConfiguration");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_SetHitReactionSelectionConfiguration, InConfiguration) == 0x000000, "Member 'SHEnemyHitReactionSelectionComponent_SetHitReactionSelectionConfiguration::InConfiguration' has a wrong offset!");

// Function SHProto.SHEnemyHitReactionSelectionComponent.SetPrintHitReactionSelectionDebug
// 0x0001 (0x0001 - 0x0000)
struct SHEnemyHitReactionSelectionComponent_SetPrintHitReactionSelectionDebug final
{
public:
	bool                                          InPrintDebug;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyHitReactionSelectionComponent_SetPrintHitReactionSelectionDebug) == 0x000001, "Wrong alignment on SHEnemyHitReactionSelectionComponent_SetPrintHitReactionSelectionDebug");
static_assert(sizeof(SHEnemyHitReactionSelectionComponent_SetPrintHitReactionSelectionDebug) == 0x000001, "Wrong size on SHEnemyHitReactionSelectionComponent_SetPrintHitReactionSelectionDebug");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_SetPrintHitReactionSelectionDebug, InPrintDebug) == 0x000000, "Member 'SHEnemyHitReactionSelectionComponent_SetPrintHitReactionSelectionDebug::InPrintDebug' has a wrong offset!");

// Function SHProto.SHEnemyHitReactionSelectionComponent.StartHitResponseCooldownCounter
// 0x0010 (0x0010 - 0x0000)
struct SHEnemyHitReactionSelectionComponent_StartHitResponseCooldownCounter final
{
public:
	class FName                                   InCounterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCooldownTime;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InResetCurrent;                                    // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHEnemyHitReactionSelectionComponent_StartHitResponseCooldownCounter) == 0x000004, "Wrong alignment on SHEnemyHitReactionSelectionComponent_StartHitResponseCooldownCounter");
static_assert(sizeof(SHEnemyHitReactionSelectionComponent_StartHitResponseCooldownCounter) == 0x000010, "Wrong size on SHEnemyHitReactionSelectionComponent_StartHitResponseCooldownCounter");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_StartHitResponseCooldownCounter, InCounterName) == 0x000000, "Member 'SHEnemyHitReactionSelectionComponent_StartHitResponseCooldownCounter::InCounterName' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_StartHitResponseCooldownCounter, InCooldownTime) == 0x000008, "Member 'SHEnemyHitReactionSelectionComponent_StartHitResponseCooldownCounter::InCooldownTime' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_StartHitResponseCooldownCounter, InResetCurrent) == 0x00000C, "Member 'SHEnemyHitReactionSelectionComponent_StartHitResponseCooldownCounter::InResetCurrent' has a wrong offset!");

// Function SHProto.SHEnemyHitReactionSelectionComponent.StartHitResponseDefaultCooldownCounter
// 0x000C (0x000C - 0x0000)
struct SHEnemyHitReactionSelectionComponent_StartHitResponseDefaultCooldownCounter final
{
public:
	ESHHitReactionSelectionHitResponseType        InHitResponse;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InCooldownTime;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InResetCurrent;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHEnemyHitReactionSelectionComponent_StartHitResponseDefaultCooldownCounter) == 0x000004, "Wrong alignment on SHEnemyHitReactionSelectionComponent_StartHitResponseDefaultCooldownCounter");
static_assert(sizeof(SHEnemyHitReactionSelectionComponent_StartHitResponseDefaultCooldownCounter) == 0x00000C, "Wrong size on SHEnemyHitReactionSelectionComponent_StartHitResponseDefaultCooldownCounter");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_StartHitResponseDefaultCooldownCounter, InHitResponse) == 0x000000, "Member 'SHEnemyHitReactionSelectionComponent_StartHitResponseDefaultCooldownCounter::InHitResponse' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_StartHitResponseDefaultCooldownCounter, InCooldownTime) == 0x000004, "Member 'SHEnemyHitReactionSelectionComponent_StartHitResponseDefaultCooldownCounter::InCooldownTime' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_StartHitResponseDefaultCooldownCounter, InResetCurrent) == 0x000008, "Member 'SHEnemyHitReactionSelectionComponent_StartHitResponseDefaultCooldownCounter::InResetCurrent' has a wrong offset!");

// Function SHProto.SHEnemyHitReactionSelectionComponent.StartHitResponseVariantCooldowns
// 0x0014 (0x0014 - 0x0000)
struct SHEnemyHitReactionSelectionComponent_StartHitResponseVariantCooldowns final
{
public:
	ESHHitReactionSelectionHitResponseType        InHitResponse;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InVariantName;                                     // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAdditionalDuration;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InResetCurrent;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHEnemyHitReactionSelectionComponent_StartHitResponseVariantCooldowns) == 0x000004, "Wrong alignment on SHEnemyHitReactionSelectionComponent_StartHitResponseVariantCooldowns");
static_assert(sizeof(SHEnemyHitReactionSelectionComponent_StartHitResponseVariantCooldowns) == 0x000014, "Wrong size on SHEnemyHitReactionSelectionComponent_StartHitResponseVariantCooldowns");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_StartHitResponseVariantCooldowns, InHitResponse) == 0x000000, "Member 'SHEnemyHitReactionSelectionComponent_StartHitResponseVariantCooldowns::InHitResponse' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_StartHitResponseVariantCooldowns, InVariantName) == 0x000004, "Member 'SHEnemyHitReactionSelectionComponent_StartHitResponseVariantCooldowns::InVariantName' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_StartHitResponseVariantCooldowns, InAdditionalDuration) == 0x00000C, "Member 'SHEnemyHitReactionSelectionComponent_StartHitResponseVariantCooldowns::InAdditionalDuration' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_StartHitResponseVariantCooldowns, InResetCurrent) == 0x000010, "Member 'SHEnemyHitReactionSelectionComponent_StartHitResponseVariantCooldowns::InResetCurrent' has a wrong offset!");

// Function SHProto.SHEnemyHitReactionSelectionComponent.FindHitsCounterNameUsedByBone
// 0x0014 (0x0014 - 0x0000)
struct SHEnemyHitReactionSelectionComponent_FindHitsCounterNameUsedByBone final
{
public:
	class FName                                   InBoneName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InBoneShapeIndex;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyHitReactionSelectionComponent_FindHitsCounterNameUsedByBone) == 0x000004, "Wrong alignment on SHEnemyHitReactionSelectionComponent_FindHitsCounterNameUsedByBone");
static_assert(sizeof(SHEnemyHitReactionSelectionComponent_FindHitsCounterNameUsedByBone) == 0x000014, "Wrong size on SHEnemyHitReactionSelectionComponent_FindHitsCounterNameUsedByBone");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_FindHitsCounterNameUsedByBone, InBoneName) == 0x000000, "Member 'SHEnemyHitReactionSelectionComponent_FindHitsCounterNameUsedByBone::InBoneName' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_FindHitsCounterNameUsedByBone, InBoneShapeIndex) == 0x000008, "Member 'SHEnemyHitReactionSelectionComponent_FindHitsCounterNameUsedByBone::InBoneShapeIndex' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_FindHitsCounterNameUsedByBone, ReturnValue) == 0x00000C, "Member 'SHEnemyHitReactionSelectionComponent_FindHitsCounterNameUsedByBone::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyHitReactionSelectionComponent.FindHitsCounterNameUsedByBonesGroup
// 0x0010 (0x0010 - 0x0000)
struct SHEnemyHitReactionSelectionComponent_FindHitsCounterNameUsedByBonesGroup final
{
public:
	class FName                                   InBonesGroupName;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyHitReactionSelectionComponent_FindHitsCounterNameUsedByBonesGroup) == 0x000004, "Wrong alignment on SHEnemyHitReactionSelectionComponent_FindHitsCounterNameUsedByBonesGroup");
static_assert(sizeof(SHEnemyHitReactionSelectionComponent_FindHitsCounterNameUsedByBonesGroup) == 0x000010, "Wrong size on SHEnemyHitReactionSelectionComponent_FindHitsCounterNameUsedByBonesGroup");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_FindHitsCounterNameUsedByBonesGroup, InBonesGroupName) == 0x000000, "Member 'SHEnemyHitReactionSelectionComponent_FindHitsCounterNameUsedByBonesGroup::InBonesGroupName' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_FindHitsCounterNameUsedByBonesGroup, ReturnValue) == 0x000008, "Member 'SHEnemyHitReactionSelectionComponent_FindHitsCounterNameUsedByBonesGroup::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyHitReactionSelectionComponent.GetActiveCountedHitsOfCounterName
// 0x000C (0x000C - 0x0000)
struct SHEnemyHitReactionSelectionComponent_GetActiveCountedHitsOfCounterName final
{
public:
	class FName                                   InConsecutiveHitsCounterName;                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyHitReactionSelectionComponent_GetActiveCountedHitsOfCounterName) == 0x000004, "Wrong alignment on SHEnemyHitReactionSelectionComponent_GetActiveCountedHitsOfCounterName");
static_assert(sizeof(SHEnemyHitReactionSelectionComponent_GetActiveCountedHitsOfCounterName) == 0x00000C, "Wrong size on SHEnemyHitReactionSelectionComponent_GetActiveCountedHitsOfCounterName");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_GetActiveCountedHitsOfCounterName, InConsecutiveHitsCounterName) == 0x000000, "Member 'SHEnemyHitReactionSelectionComponent_GetActiveCountedHitsOfCounterName::InConsecutiveHitsCounterName' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_GetActiveCountedHitsOfCounterName, ReturnValue) == 0x000008, "Member 'SHEnemyHitReactionSelectionComponent_GetActiveCountedHitsOfCounterName::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyHitReactionSelectionComponent.GetActiveCountedHitsOfTimerUsedByBone
// 0x0010 (0x0010 - 0x0000)
struct SHEnemyHitReactionSelectionComponent_GetActiveCountedHitsOfTimerUsedByBone final
{
public:
	class FName                                   InBoneName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InBoneShapeIndex;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyHitReactionSelectionComponent_GetActiveCountedHitsOfTimerUsedByBone) == 0x000004, "Wrong alignment on SHEnemyHitReactionSelectionComponent_GetActiveCountedHitsOfTimerUsedByBone");
static_assert(sizeof(SHEnemyHitReactionSelectionComponent_GetActiveCountedHitsOfTimerUsedByBone) == 0x000010, "Wrong size on SHEnemyHitReactionSelectionComponent_GetActiveCountedHitsOfTimerUsedByBone");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_GetActiveCountedHitsOfTimerUsedByBone, InBoneName) == 0x000000, "Member 'SHEnemyHitReactionSelectionComponent_GetActiveCountedHitsOfTimerUsedByBone::InBoneName' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_GetActiveCountedHitsOfTimerUsedByBone, InBoneShapeIndex) == 0x000008, "Member 'SHEnemyHitReactionSelectionComponent_GetActiveCountedHitsOfTimerUsedByBone::InBoneShapeIndex' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_GetActiveCountedHitsOfTimerUsedByBone, ReturnValue) == 0x00000C, "Member 'SHEnemyHitReactionSelectionComponent_GetActiveCountedHitsOfTimerUsedByBone::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyHitReactionSelectionComponent.GetActiveCountedHitsOfTimerUsedByBoneGroup
// 0x000C (0x000C - 0x0000)
struct SHEnemyHitReactionSelectionComponent_GetActiveCountedHitsOfTimerUsedByBoneGroup final
{
public:
	class FName                                   InBonesGroupName;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyHitReactionSelectionComponent_GetActiveCountedHitsOfTimerUsedByBoneGroup) == 0x000004, "Wrong alignment on SHEnemyHitReactionSelectionComponent_GetActiveCountedHitsOfTimerUsedByBoneGroup");
static_assert(sizeof(SHEnemyHitReactionSelectionComponent_GetActiveCountedHitsOfTimerUsedByBoneGroup) == 0x00000C, "Wrong size on SHEnemyHitReactionSelectionComponent_GetActiveCountedHitsOfTimerUsedByBoneGroup");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_GetActiveCountedHitsOfTimerUsedByBoneGroup, InBonesGroupName) == 0x000000, "Member 'SHEnemyHitReactionSelectionComponent_GetActiveCountedHitsOfTimerUsedByBoneGroup::InBonesGroupName' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_GetActiveCountedHitsOfTimerUsedByBoneGroup, ReturnValue) == 0x000008, "Member 'SHEnemyHitReactionSelectionComponent_GetActiveCountedHitsOfTimerUsedByBoneGroup::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyHitReactionSelectionComponent.GetHitResponseCooldownCounterRemainingTime
// 0x000C (0x000C - 0x0000)
struct SHEnemyHitReactionSelectionComponent_GetHitResponseCooldownCounterRemainingTime final
{
public:
	class FName                                   InCounterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyHitReactionSelectionComponent_GetHitResponseCooldownCounterRemainingTime) == 0x000004, "Wrong alignment on SHEnemyHitReactionSelectionComponent_GetHitResponseCooldownCounterRemainingTime");
static_assert(sizeof(SHEnemyHitReactionSelectionComponent_GetHitResponseCooldownCounterRemainingTime) == 0x00000C, "Wrong size on SHEnemyHitReactionSelectionComponent_GetHitResponseCooldownCounterRemainingTime");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_GetHitResponseCooldownCounterRemainingTime, InCounterName) == 0x000000, "Member 'SHEnemyHitReactionSelectionComponent_GetHitResponseCooldownCounterRemainingTime::InCounterName' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_GetHitResponseCooldownCounterRemainingTime, ReturnValue) == 0x000008, "Member 'SHEnemyHitReactionSelectionComponent_GetHitResponseCooldownCounterRemainingTime::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyHitReactionSelectionComponent.GetHitResponseCooldownRemainingTime
// 0x0010 (0x0010 - 0x0000)
struct SHEnemyHitReactionSelectionComponent_GetHitResponseCooldownRemainingTime final
{
public:
	ESHHitReactionSelectionHitResponseType        InHitResponse;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InVariantName;                                     // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyHitReactionSelectionComponent_GetHitResponseCooldownRemainingTime) == 0x000004, "Wrong alignment on SHEnemyHitReactionSelectionComponent_GetHitResponseCooldownRemainingTime");
static_assert(sizeof(SHEnemyHitReactionSelectionComponent_GetHitResponseCooldownRemainingTime) == 0x000010, "Wrong size on SHEnemyHitReactionSelectionComponent_GetHitResponseCooldownRemainingTime");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_GetHitResponseCooldownRemainingTime, InHitResponse) == 0x000000, "Member 'SHEnemyHitReactionSelectionComponent_GetHitResponseCooldownRemainingTime::InHitResponse' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_GetHitResponseCooldownRemainingTime, InVariantName) == 0x000004, "Member 'SHEnemyHitReactionSelectionComponent_GetHitResponseCooldownRemainingTime::InVariantName' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_GetHitResponseCooldownRemainingTime, ReturnValue) == 0x00000C, "Member 'SHEnemyHitReactionSelectionComponent_GetHitResponseCooldownRemainingTime::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyHitReactionSelectionComponent.GetHitResponseDefaultCooldownRemainingTime
// 0x0008 (0x0008 - 0x0000)
struct SHEnemyHitReactionSelectionComponent_GetHitResponseDefaultCooldownRemainingTime final
{
public:
	ESHHitReactionSelectionHitResponseType        InHitResponse;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyHitReactionSelectionComponent_GetHitResponseDefaultCooldownRemainingTime) == 0x000004, "Wrong alignment on SHEnemyHitReactionSelectionComponent_GetHitResponseDefaultCooldownRemainingTime");
static_assert(sizeof(SHEnemyHitReactionSelectionComponent_GetHitResponseDefaultCooldownRemainingTime) == 0x000008, "Wrong size on SHEnemyHitReactionSelectionComponent_GetHitResponseDefaultCooldownRemainingTime");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_GetHitResponseDefaultCooldownRemainingTime, InHitResponse) == 0x000000, "Member 'SHEnemyHitReactionSelectionComponent_GetHitResponseDefaultCooldownRemainingTime::InHitResponse' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_GetHitResponseDefaultCooldownRemainingTime, ReturnValue) == 0x000004, "Member 'SHEnemyHitReactionSelectionComponent_GetHitResponseDefaultCooldownRemainingTime::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyHitReactionSelectionComponent.IsUsingHitReactionSelectionConfiguration
// 0x0010 (0x0010 - 0x0000)
struct SHEnemyHitReactionSelectionComponent_IsUsingHitReactionSelectionConfiguration final
{
public:
	class USEnemyHitReactionSelection*            InConfiguration;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHEnemyHitReactionSelectionComponent_IsUsingHitReactionSelectionConfiguration) == 0x000008, "Wrong alignment on SHEnemyHitReactionSelectionComponent_IsUsingHitReactionSelectionConfiguration");
static_assert(sizeof(SHEnemyHitReactionSelectionComponent_IsUsingHitReactionSelectionConfiguration) == 0x000010, "Wrong size on SHEnemyHitReactionSelectionComponent_IsUsingHitReactionSelectionConfiguration");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_IsUsingHitReactionSelectionConfiguration, InConfiguration) == 0x000000, "Member 'SHEnemyHitReactionSelectionComponent_IsUsingHitReactionSelectionConfiguration::InConfiguration' has a wrong offset!");
static_assert(offsetof(SHEnemyHitReactionSelectionComponent_IsUsingHitReactionSelectionConfiguration, ReturnValue) == 0x000008, "Member 'SHEnemyHitReactionSelectionComponent_IsUsingHitReactionSelectionConfiguration::ReturnValue' has a wrong offset!");

// Function SHProto.SHHitReactionSelectionHitReactionBlockerInterface.GetHitReactionBlockerAllowedHitReactions
// 0x0060 (0x0060 - 0x0000)
struct SHHitReactionSelectionHitReactionBlockerInterface_GetHitReactionBlockerAllowedHitReactions final
{
public:
	struct FSHEnemyHitReactionSelectionAllowedStates ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionSelectionHitReactionBlockerInterface_GetHitReactionBlockerAllowedHitReactions) == 0x000008, "Wrong alignment on SHHitReactionSelectionHitReactionBlockerInterface_GetHitReactionBlockerAllowedHitReactions");
static_assert(sizeof(SHHitReactionSelectionHitReactionBlockerInterface_GetHitReactionBlockerAllowedHitReactions) == 0x000060, "Wrong size on SHHitReactionSelectionHitReactionBlockerInterface_GetHitReactionBlockerAllowedHitReactions");
static_assert(offsetof(SHHitReactionSelectionHitReactionBlockerInterface_GetHitReactionBlockerAllowedHitReactions, ReturnValue) == 0x000000, "Member 'SHHitReactionSelectionHitReactionBlockerInterface_GetHitReactionBlockerAllowedHitReactions::ReturnValue' has a wrong offset!");

// Function SHProto.SHHitReactionSelectionHitReactionBlockerInterface.GetHitReactionBlockerDebugDisplayName
// 0x0010 (0x0010 - 0x0000)
struct SHHitReactionSelectionHitReactionBlockerInterface_GetHitReactionBlockerDebugDisplayName final
{
public:
	class FString                                 OutDebugName;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionSelectionHitReactionBlockerInterface_GetHitReactionBlockerDebugDisplayName) == 0x000008, "Wrong alignment on SHHitReactionSelectionHitReactionBlockerInterface_GetHitReactionBlockerDebugDisplayName");
static_assert(sizeof(SHHitReactionSelectionHitReactionBlockerInterface_GetHitReactionBlockerDebugDisplayName) == 0x000010, "Wrong size on SHHitReactionSelectionHitReactionBlockerInterface_GetHitReactionBlockerDebugDisplayName");
static_assert(offsetof(SHHitReactionSelectionHitReactionBlockerInterface_GetHitReactionBlockerDebugDisplayName, OutDebugName) == 0x000000, "Member 'SHHitReactionSelectionHitReactionBlockerInterface_GetHitReactionBlockerDebugDisplayName::OutDebugName' has a wrong offset!");

// Function SHProto.SHFXWaterInteractionSubcomp.SetWaterInteractionBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHFXWaterInteractionSubcomp_SetWaterInteractionBlocked final
{
public:
	bool                                          IsBlock;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXWaterInteractionSubcomp_SetWaterInteractionBlocked) == 0x000008, "Wrong alignment on SHFXWaterInteractionSubcomp_SetWaterInteractionBlocked");
static_assert(sizeof(SHFXWaterInteractionSubcomp_SetWaterInteractionBlocked) == 0x000010, "Wrong size on SHFXWaterInteractionSubcomp_SetWaterInteractionBlocked");
static_assert(offsetof(SHFXWaterInteractionSubcomp_SetWaterInteractionBlocked, IsBlock) == 0x000000, "Member 'SHFXWaterInteractionSubcomp_SetWaterInteractionBlocked::IsBlock' has a wrong offset!");
static_assert(offsetof(SHFXWaterInteractionSubcomp_SetWaterInteractionBlocked, Object) == 0x000008, "Member 'SHFXWaterInteractionSubcomp_SetWaterInteractionBlocked::Object' has a wrong offset!");

// Function SHProto.SHFXWaterInteractionSubcomp.GetCurrentIntersections
// 0x0010 (0x0010 - 0x0000)
struct SHFXWaterInteractionSubcomp_GetCurrentIntersections final
{
public:
	TArray<struct FSHXWaterIntersection>          ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXWaterInteractionSubcomp_GetCurrentIntersections) == 0x000008, "Wrong alignment on SHFXWaterInteractionSubcomp_GetCurrentIntersections");
static_assert(sizeof(SHFXWaterInteractionSubcomp_GetCurrentIntersections) == 0x000010, "Wrong size on SHFXWaterInteractionSubcomp_GetCurrentIntersections");
static_assert(offsetof(SHFXWaterInteractionSubcomp_GetCurrentIntersections, ReturnValue) == 0x000000, "Member 'SHFXWaterInteractionSubcomp_GetCurrentIntersections::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXWaterInteractionSubcomp.IsWaterInteractionBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHFXWaterInteractionSubcomp_IsWaterInteractionBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXWaterInteractionSubcomp_IsWaterInteractionBlocked) == 0x000001, "Wrong alignment on SHFXWaterInteractionSubcomp_IsWaterInteractionBlocked");
static_assert(sizeof(SHFXWaterInteractionSubcomp_IsWaterInteractionBlocked) == 0x000001, "Wrong size on SHFXWaterInteractionSubcomp_IsWaterInteractionBlocked");
static_assert(offsetof(SHFXWaterInteractionSubcomp_IsWaterInteractionBlocked, ReturnValue) == 0x000000, "Member 'SHFXWaterInteractionSubcomp_IsWaterInteractionBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXWaterInteractionSubcomp.IsWaterInteractionBlockedBy
// 0x0010 (0x0010 - 0x0000)
struct SHFXWaterInteractionSubcomp_IsWaterInteractionBlockedBy final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFXWaterInteractionSubcomp_IsWaterInteractionBlockedBy) == 0x000008, "Wrong alignment on SHFXWaterInteractionSubcomp_IsWaterInteractionBlockedBy");
static_assert(sizeof(SHFXWaterInteractionSubcomp_IsWaterInteractionBlockedBy) == 0x000010, "Wrong size on SHFXWaterInteractionSubcomp_IsWaterInteractionBlockedBy");
static_assert(offsetof(SHFXWaterInteractionSubcomp_IsWaterInteractionBlockedBy, Object) == 0x000000, "Member 'SHFXWaterInteractionSubcomp_IsWaterInteractionBlockedBy::Object' has a wrong offset!");
static_assert(offsetof(SHFXWaterInteractionSubcomp_IsWaterInteractionBlockedBy, ReturnValue) == 0x000008, "Member 'SHFXWaterInteractionSubcomp_IsWaterInteractionBlockedBy::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyLyingComponent.AddAdditionalExtendingCapsule
// 0x0008 (0x0008 - 0x0000)
struct SHEnemyLyingComponent_AddAdditionalExtendingCapsule final
{
public:
	class USHCaterpillarCapsuleComponent*         InLyingCapsule;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyLyingComponent_AddAdditionalExtendingCapsule) == 0x000008, "Wrong alignment on SHEnemyLyingComponent_AddAdditionalExtendingCapsule");
static_assert(sizeof(SHEnemyLyingComponent_AddAdditionalExtendingCapsule) == 0x000008, "Wrong size on SHEnemyLyingComponent_AddAdditionalExtendingCapsule");
static_assert(offsetof(SHEnemyLyingComponent_AddAdditionalExtendingCapsule, InLyingCapsule) == 0x000000, "Member 'SHEnemyLyingComponent_AddAdditionalExtendingCapsule::InLyingCapsule' has a wrong offset!");

// Function SHProto.SHEnemyLyingComponent.AssignLyingCapsule
// 0x0008 (0x0008 - 0x0000)
struct SHEnemyLyingComponent_AssignLyingCapsule final
{
public:
	class USHCaterpillarCapsuleComponent*         InLyingCapsule;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyLyingComponent_AssignLyingCapsule) == 0x000008, "Wrong alignment on SHEnemyLyingComponent_AssignLyingCapsule");
static_assert(sizeof(SHEnemyLyingComponent_AssignLyingCapsule) == 0x000008, "Wrong size on SHEnemyLyingComponent_AssignLyingCapsule");
static_assert(offsetof(SHEnemyLyingComponent_AssignLyingCapsule, InLyingCapsule) == 0x000000, "Member 'SHEnemyLyingComponent_AssignLyingCapsule::InLyingCapsule' has a wrong offset!");

// Function SHProto.SHEnemyLyingComponent.PostTeleportUpdate
// 0x0001 (0x0001 - 0x0000)
struct SHEnemyLyingComponent_PostTeleportUpdate final
{
public:
	bool                                          InReExpandCapsules;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyLyingComponent_PostTeleportUpdate) == 0x000001, "Wrong alignment on SHEnemyLyingComponent_PostTeleportUpdate");
static_assert(sizeof(SHEnemyLyingComponent_PostTeleportUpdate) == 0x000001, "Wrong size on SHEnemyLyingComponent_PostTeleportUpdate");
static_assert(offsetof(SHEnemyLyingComponent_PostTeleportUpdate, InReExpandCapsules) == 0x000000, "Member 'SHEnemyLyingComponent_PostTeleportUpdate::InReExpandCapsules' has a wrong offset!");

// Function SHProto.SHEnemyLyingComponent.SetActorRotationAllowUsingCurrentVelocityHACK
// 0x0001 (0x0001 - 0x0000)
struct SHEnemyLyingComponent_SetActorRotationAllowUsingCurrentVelocityHACK final
{
public:
	bool                                          InAllowVelocityHack;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyLyingComponent_SetActorRotationAllowUsingCurrentVelocityHACK) == 0x000001, "Wrong alignment on SHEnemyLyingComponent_SetActorRotationAllowUsingCurrentVelocityHACK");
static_assert(sizeof(SHEnemyLyingComponent_SetActorRotationAllowUsingCurrentVelocityHACK) == 0x000001, "Wrong size on SHEnemyLyingComponent_SetActorRotationAllowUsingCurrentVelocityHACK");
static_assert(offsetof(SHEnemyLyingComponent_SetActorRotationAllowUsingCurrentVelocityHACK, InAllowVelocityHack) == 0x000000, "Member 'SHEnemyLyingComponent_SetActorRotationAllowUsingCurrentVelocityHACK::InAllowVelocityHack' has a wrong offset!");

// Function SHProto.SHEnemyLyingComponent.SetLyingCapsulePosition
// 0x0008 (0x0008 - 0x0000)
struct SHEnemyLyingComponent_SetLyingCapsulePosition final
{
public:
	float                                         InAnchorPosition;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMaximumExtension;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyLyingComponent_SetLyingCapsulePosition) == 0x000004, "Wrong alignment on SHEnemyLyingComponent_SetLyingCapsulePosition");
static_assert(sizeof(SHEnemyLyingComponent_SetLyingCapsulePosition) == 0x000008, "Wrong size on SHEnemyLyingComponent_SetLyingCapsulePosition");
static_assert(offsetof(SHEnemyLyingComponent_SetLyingCapsulePosition, InAnchorPosition) == 0x000000, "Member 'SHEnemyLyingComponent_SetLyingCapsulePosition::InAnchorPosition' has a wrong offset!");
static_assert(offsetof(SHEnemyLyingComponent_SetLyingCapsulePosition, InMaximumExtension) == 0x000004, "Member 'SHEnemyLyingComponent_SetLyingCapsulePosition::InMaximumExtension' has a wrong offset!");

// Function SHProto.SHEnemyLyingComponent.SetManuallyDisabledLyingCapsuleCollisions
// 0x0001 (0x0001 - 0x0000)
struct SHEnemyLyingComponent_SetManuallyDisabledLyingCapsuleCollisions final
{
public:
	bool                                          InDisableCollisions;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyLyingComponent_SetManuallyDisabledLyingCapsuleCollisions) == 0x000001, "Wrong alignment on SHEnemyLyingComponent_SetManuallyDisabledLyingCapsuleCollisions");
static_assert(sizeof(SHEnemyLyingComponent_SetManuallyDisabledLyingCapsuleCollisions) == 0x000001, "Wrong size on SHEnemyLyingComponent_SetManuallyDisabledLyingCapsuleCollisions");
static_assert(offsetof(SHEnemyLyingComponent_SetManuallyDisabledLyingCapsuleCollisions, InDisableCollisions) == 0x000000, "Member 'SHEnemyLyingComponent_SetManuallyDisabledLyingCapsuleCollisions::InDisableCollisions' has a wrong offset!");

// Function SHProto.SHEnemyLyingComponent.TransformToLying
// 0x0020 (0x0020 - 0x0000)
struct SHEnemyLyingComponent_TransformToLying final
{
public:
	class FName                                   InTransformationReason;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTransformationDuration;                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDelayedRootRotation;                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDisableAIDuringTransformation;                   // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPreventControllerRotation;                       // 0x000E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InRotateActorToDesiredVelocity;                    // 0x000F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InRotateOutOfCollisionsDuringTransformation;       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InRotateOutOfCollisionsAfterTransformation;        // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InCapsuleAnchorPosition;                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMaximumCapsuleExtensionAlpha;                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InAlignCapsulesToSurface;                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InForceRestart;                                    // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHEnemyLyingComponent_TransformToLying) == 0x000004, "Wrong alignment on SHEnemyLyingComponent_TransformToLying");
static_assert(sizeof(SHEnemyLyingComponent_TransformToLying) == 0x000020, "Wrong size on SHEnemyLyingComponent_TransformToLying");
static_assert(offsetof(SHEnemyLyingComponent_TransformToLying, InTransformationReason) == 0x000000, "Member 'SHEnemyLyingComponent_TransformToLying::InTransformationReason' has a wrong offset!");
static_assert(offsetof(SHEnemyLyingComponent_TransformToLying, InTransformationDuration) == 0x000008, "Member 'SHEnemyLyingComponent_TransformToLying::InTransformationDuration' has a wrong offset!");
static_assert(offsetof(SHEnemyLyingComponent_TransformToLying, InDelayedRootRotation) == 0x00000C, "Member 'SHEnemyLyingComponent_TransformToLying::InDelayedRootRotation' has a wrong offset!");
static_assert(offsetof(SHEnemyLyingComponent_TransformToLying, InDisableAIDuringTransformation) == 0x00000D, "Member 'SHEnemyLyingComponent_TransformToLying::InDisableAIDuringTransformation' has a wrong offset!");
static_assert(offsetof(SHEnemyLyingComponent_TransformToLying, InPreventControllerRotation) == 0x00000E, "Member 'SHEnemyLyingComponent_TransformToLying::InPreventControllerRotation' has a wrong offset!");
static_assert(offsetof(SHEnemyLyingComponent_TransformToLying, InRotateActorToDesiredVelocity) == 0x00000F, "Member 'SHEnemyLyingComponent_TransformToLying::InRotateActorToDesiredVelocity' has a wrong offset!");
static_assert(offsetof(SHEnemyLyingComponent_TransformToLying, InRotateOutOfCollisionsDuringTransformation) == 0x000010, "Member 'SHEnemyLyingComponent_TransformToLying::InRotateOutOfCollisionsDuringTransformation' has a wrong offset!");
static_assert(offsetof(SHEnemyLyingComponent_TransformToLying, InRotateOutOfCollisionsAfterTransformation) == 0x000011, "Member 'SHEnemyLyingComponent_TransformToLying::InRotateOutOfCollisionsAfterTransformation' has a wrong offset!");
static_assert(offsetof(SHEnemyLyingComponent_TransformToLying, InCapsuleAnchorPosition) == 0x000014, "Member 'SHEnemyLyingComponent_TransformToLying::InCapsuleAnchorPosition' has a wrong offset!");
static_assert(offsetof(SHEnemyLyingComponent_TransformToLying, InMaximumCapsuleExtensionAlpha) == 0x000018, "Member 'SHEnemyLyingComponent_TransformToLying::InMaximumCapsuleExtensionAlpha' has a wrong offset!");
static_assert(offsetof(SHEnemyLyingComponent_TransformToLying, InAlignCapsulesToSurface) == 0x00001C, "Member 'SHEnemyLyingComponent_TransformToLying::InAlignCapsulesToSurface' has a wrong offset!");
static_assert(offsetof(SHEnemyLyingComponent_TransformToLying, InForceRestart) == 0x00001D, "Member 'SHEnemyLyingComponent_TransformToLying::InForceRestart' has a wrong offset!");

// Function SHProto.SHEnemyLyingComponent.TransformToStanding
// 0x0014 (0x0014 - 0x0000)
struct SHEnemyLyingComponent_TransformToStanding final
{
public:
	class FName                                   InTransformationReason;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTransformationDuration;                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDisableAIDuringTransformation;                   // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPreventControllerRotation;                       // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InRotateActorToDesiredVelocity;                    // 0x000E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InRotateActorToLyingCapsule;                       // 0x000F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InForceRestart;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHEnemyLyingComponent_TransformToStanding) == 0x000004, "Wrong alignment on SHEnemyLyingComponent_TransformToStanding");
static_assert(sizeof(SHEnemyLyingComponent_TransformToStanding) == 0x000014, "Wrong size on SHEnemyLyingComponent_TransformToStanding");
static_assert(offsetof(SHEnemyLyingComponent_TransformToStanding, InTransformationReason) == 0x000000, "Member 'SHEnemyLyingComponent_TransformToStanding::InTransformationReason' has a wrong offset!");
static_assert(offsetof(SHEnemyLyingComponent_TransformToStanding, InTransformationDuration) == 0x000008, "Member 'SHEnemyLyingComponent_TransformToStanding::InTransformationDuration' has a wrong offset!");
static_assert(offsetof(SHEnemyLyingComponent_TransformToStanding, InDisableAIDuringTransformation) == 0x00000C, "Member 'SHEnemyLyingComponent_TransformToStanding::InDisableAIDuringTransformation' has a wrong offset!");
static_assert(offsetof(SHEnemyLyingComponent_TransformToStanding, InPreventControllerRotation) == 0x00000D, "Member 'SHEnemyLyingComponent_TransformToStanding::InPreventControllerRotation' has a wrong offset!");
static_assert(offsetof(SHEnemyLyingComponent_TransformToStanding, InRotateActorToDesiredVelocity) == 0x00000E, "Member 'SHEnemyLyingComponent_TransformToStanding::InRotateActorToDesiredVelocity' has a wrong offset!");
static_assert(offsetof(SHEnemyLyingComponent_TransformToStanding, InRotateActorToLyingCapsule) == 0x00000F, "Member 'SHEnemyLyingComponent_TransformToStanding::InRotateActorToLyingCapsule' has a wrong offset!");
static_assert(offsetof(SHEnemyLyingComponent_TransformToStanding, InForceRestart) == 0x000010, "Member 'SHEnemyLyingComponent_TransformToStanding::InForceRestart' has a wrong offset!");

// Function SHProto.SHEnemyLyingComponent.GetLyingExtensionScalars
// 0x000C (0x000C - 0x0000)
struct SHEnemyLyingComponent_GetLyingExtensionScalars final
{
public:
	float                                         OutTopScalar;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutBottomScalar;                                   // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InClamped;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHEnemyLyingComponent_GetLyingExtensionScalars) == 0x000004, "Wrong alignment on SHEnemyLyingComponent_GetLyingExtensionScalars");
static_assert(sizeof(SHEnemyLyingComponent_GetLyingExtensionScalars) == 0x00000C, "Wrong size on SHEnemyLyingComponent_GetLyingExtensionScalars");
static_assert(offsetof(SHEnemyLyingComponent_GetLyingExtensionScalars, OutTopScalar) == 0x000000, "Member 'SHEnemyLyingComponent_GetLyingExtensionScalars::OutTopScalar' has a wrong offset!");
static_assert(offsetof(SHEnemyLyingComponent_GetLyingExtensionScalars, OutBottomScalar) == 0x000004, "Member 'SHEnemyLyingComponent_GetLyingExtensionScalars::OutBottomScalar' has a wrong offset!");
static_assert(offsetof(SHEnemyLyingComponent_GetLyingExtensionScalars, InClamped) == 0x000008, "Member 'SHEnemyLyingComponent_GetLyingExtensionScalars::InClamped' has a wrong offset!");

// Function SHProto.SHEnemyLyingComponent.GetRemainingTransformationDuration
// 0x0004 (0x0004 - 0x0000)
struct SHEnemyLyingComponent_GetRemainingTransformationDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyLyingComponent_GetRemainingTransformationDuration) == 0x000004, "Wrong alignment on SHEnemyLyingComponent_GetRemainingTransformationDuration");
static_assert(sizeof(SHEnemyLyingComponent_GetRemainingTransformationDuration) == 0x000004, "Wrong size on SHEnemyLyingComponent_GetRemainingTransformationDuration");
static_assert(offsetof(SHEnemyLyingComponent_GetRemainingTransformationDuration, ReturnValue) == 0x000000, "Member 'SHEnemyLyingComponent_GetRemainingTransformationDuration::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyLyingComponent.GetTransformationAlpha
// 0x0004 (0x0004 - 0x0000)
struct SHEnemyLyingComponent_GetTransformationAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyLyingComponent_GetTransformationAlpha) == 0x000004, "Wrong alignment on SHEnemyLyingComponent_GetTransformationAlpha");
static_assert(sizeof(SHEnemyLyingComponent_GetTransformationAlpha) == 0x000004, "Wrong size on SHEnemyLyingComponent_GetTransformationAlpha");
static_assert(offsetof(SHEnemyLyingComponent_GetTransformationAlpha, ReturnValue) == 0x000000, "Member 'SHEnemyLyingComponent_GetTransformationAlpha::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyLyingComponent.GetTransformationProgress
// 0x0004 (0x0004 - 0x0000)
struct SHEnemyLyingComponent_GetTransformationProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyLyingComponent_GetTransformationProgress) == 0x000004, "Wrong alignment on SHEnemyLyingComponent_GetTransformationProgress");
static_assert(sizeof(SHEnemyLyingComponent_GetTransformationProgress) == 0x000004, "Wrong size on SHEnemyLyingComponent_GetTransformationProgress");
static_assert(offsetof(SHEnemyLyingComponent_GetTransformationProgress, ReturnValue) == 0x000000, "Member 'SHEnemyLyingComponent_GetTransformationProgress::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyLyingComponent.IsLying
// 0x0003 (0x0003 - 0x0000)
struct SHEnemyLyingComponent_IsLying final
{
public:
	bool                                          InIncludeTransformingInto;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIncludeTransformingOutOf;                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyLyingComponent_IsLying) == 0x000001, "Wrong alignment on SHEnemyLyingComponent_IsLying");
static_assert(sizeof(SHEnemyLyingComponent_IsLying) == 0x000003, "Wrong size on SHEnemyLyingComponent_IsLying");
static_assert(offsetof(SHEnemyLyingComponent_IsLying, InIncludeTransformingInto) == 0x000000, "Member 'SHEnemyLyingComponent_IsLying::InIncludeTransformingInto' has a wrong offset!");
static_assert(offsetof(SHEnemyLyingComponent_IsLying, InIncludeTransformingOutOf) == 0x000001, "Member 'SHEnemyLyingComponent_IsLying::InIncludeTransformingOutOf' has a wrong offset!");
static_assert(offsetof(SHEnemyLyingComponent_IsLying, ReturnValue) == 0x000002, "Member 'SHEnemyLyingComponent_IsLying::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyLyingComponent.IsStanding
// 0x0003 (0x0003 - 0x0000)
struct SHEnemyLyingComponent_IsStanding final
{
public:
	bool                                          InIncludeTransformingInto;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIncludeTransformingOutOf;                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyLyingComponent_IsStanding) == 0x000001, "Wrong alignment on SHEnemyLyingComponent_IsStanding");
static_assert(sizeof(SHEnemyLyingComponent_IsStanding) == 0x000003, "Wrong size on SHEnemyLyingComponent_IsStanding");
static_assert(offsetof(SHEnemyLyingComponent_IsStanding, InIncludeTransformingInto) == 0x000000, "Member 'SHEnemyLyingComponent_IsStanding::InIncludeTransformingInto' has a wrong offset!");
static_assert(offsetof(SHEnemyLyingComponent_IsStanding, InIncludeTransformingOutOf) == 0x000001, "Member 'SHEnemyLyingComponent_IsStanding::InIncludeTransformingOutOf' has a wrong offset!");
static_assert(offsetof(SHEnemyLyingComponent_IsStanding, ReturnValue) == 0x000002, "Member 'SHEnemyLyingComponent_IsStanding::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyLyingComponent.IsTransformationAwaitingDelayedRootRotation
// 0x0001 (0x0001 - 0x0000)
struct SHEnemyLyingComponent_IsTransformationAwaitingDelayedRootRotation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyLyingComponent_IsTransformationAwaitingDelayedRootRotation) == 0x000001, "Wrong alignment on SHEnemyLyingComponent_IsTransformationAwaitingDelayedRootRotation");
static_assert(sizeof(SHEnemyLyingComponent_IsTransformationAwaitingDelayedRootRotation) == 0x000001, "Wrong size on SHEnemyLyingComponent_IsTransformationAwaitingDelayedRootRotation");
static_assert(offsetof(SHEnemyLyingComponent_IsTransformationAwaitingDelayedRootRotation, ReturnValue) == 0x000000, "Member 'SHEnemyLyingComponent_IsTransformationAwaitingDelayedRootRotation::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyLyingComponent.IsTransformationWantingDisabledAI
// 0x0001 (0x0001 - 0x0000)
struct SHEnemyLyingComponent_IsTransformationWantingDisabledAI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyLyingComponent_IsTransformationWantingDisabledAI) == 0x000001, "Wrong alignment on SHEnemyLyingComponent_IsTransformationWantingDisabledAI");
static_assert(sizeof(SHEnemyLyingComponent_IsTransformationWantingDisabledAI) == 0x000001, "Wrong size on SHEnemyLyingComponent_IsTransformationWantingDisabledAI");
static_assert(offsetof(SHEnemyLyingComponent_IsTransformationWantingDisabledAI, ReturnValue) == 0x000000, "Member 'SHEnemyLyingComponent_IsTransformationWantingDisabledAI::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyLyingComponent.IsTransformationWantingToPreventControllerRotation
// 0x0001 (0x0001 - 0x0000)
struct SHEnemyLyingComponent_IsTransformationWantingToPreventControllerRotation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyLyingComponent_IsTransformationWantingToPreventControllerRotation) == 0x000001, "Wrong alignment on SHEnemyLyingComponent_IsTransformationWantingToPreventControllerRotation");
static_assert(sizeof(SHEnemyLyingComponent_IsTransformationWantingToPreventControllerRotation) == 0x000001, "Wrong size on SHEnemyLyingComponent_IsTransformationWantingToPreventControllerRotation");
static_assert(offsetof(SHEnemyLyingComponent_IsTransformationWantingToPreventControllerRotation, ReturnValue) == 0x000000, "Member 'SHEnemyLyingComponent_IsTransformationWantingToPreventControllerRotation::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyLyingComponent.IsTransforming
// 0x0001 (0x0001 - 0x0000)
struct SHEnemyLyingComponent_IsTransforming final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyLyingComponent_IsTransforming) == 0x000001, "Wrong alignment on SHEnemyLyingComponent_IsTransforming");
static_assert(sizeof(SHEnemyLyingComponent_IsTransforming) == 0x000001, "Wrong size on SHEnemyLyingComponent_IsTransforming");
static_assert(offsetof(SHEnemyLyingComponent_IsTransforming, ReturnValue) == 0x000000, "Member 'SHEnemyLyingComponent_IsTransforming::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyLyingComponent.IsTransformingIntoLying
// 0x0001 (0x0001 - 0x0000)
struct SHEnemyLyingComponent_IsTransformingIntoLying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyLyingComponent_IsTransformingIntoLying) == 0x000001, "Wrong alignment on SHEnemyLyingComponent_IsTransformingIntoLying");
static_assert(sizeof(SHEnemyLyingComponent_IsTransformingIntoLying) == 0x000001, "Wrong size on SHEnemyLyingComponent_IsTransformingIntoLying");
static_assert(offsetof(SHEnemyLyingComponent_IsTransformingIntoLying, ReturnValue) == 0x000000, "Member 'SHEnemyLyingComponent_IsTransformingIntoLying::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyLyingComponent.IsTransformingIntoStanding
// 0x0001 (0x0001 - 0x0000)
struct SHEnemyLyingComponent_IsTransformingIntoStanding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyLyingComponent_IsTransformingIntoStanding) == 0x000001, "Wrong alignment on SHEnemyLyingComponent_IsTransformingIntoStanding");
static_assert(sizeof(SHEnemyLyingComponent_IsTransformingIntoStanding) == 0x000001, "Wrong size on SHEnemyLyingComponent_IsTransformingIntoStanding");
static_assert(offsetof(SHEnemyLyingComponent_IsTransformingIntoStanding, ReturnValue) == 0x000000, "Member 'SHEnemyLyingComponent_IsTransformingIntoStanding::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyTransformationStateComponent.ApplyTransformationState
// 0x0018 (0x0018 - 0x0000)
struct SHEnemyTransformationStateComponent_ApplyTransformationState final
{
public:
	class USHEnemyTransformationState*            InTransformationState;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOverrideDuration;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOverrideHitReactionsChangeDelay;                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOverrideLyingChangeDelay;                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOverrideLyingChangeDuration;                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyTransformationStateComponent_ApplyTransformationState) == 0x000008, "Wrong alignment on SHEnemyTransformationStateComponent_ApplyTransformationState");
static_assert(sizeof(SHEnemyTransformationStateComponent_ApplyTransformationState) == 0x000018, "Wrong size on SHEnemyTransformationStateComponent_ApplyTransformationState");
static_assert(offsetof(SHEnemyTransformationStateComponent_ApplyTransformationState, InTransformationState) == 0x000000, "Member 'SHEnemyTransformationStateComponent_ApplyTransformationState::InTransformationState' has a wrong offset!");
static_assert(offsetof(SHEnemyTransformationStateComponent_ApplyTransformationState, InOverrideDuration) == 0x000008, "Member 'SHEnemyTransformationStateComponent_ApplyTransformationState::InOverrideDuration' has a wrong offset!");
static_assert(offsetof(SHEnemyTransformationStateComponent_ApplyTransformationState, InOverrideHitReactionsChangeDelay) == 0x00000C, "Member 'SHEnemyTransformationStateComponent_ApplyTransformationState::InOverrideHitReactionsChangeDelay' has a wrong offset!");
static_assert(offsetof(SHEnemyTransformationStateComponent_ApplyTransformationState, InOverrideLyingChangeDelay) == 0x000010, "Member 'SHEnemyTransformationStateComponent_ApplyTransformationState::InOverrideLyingChangeDelay' has a wrong offset!");
static_assert(offsetof(SHEnemyTransformationStateComponent_ApplyTransformationState, InOverrideLyingChangeDuration) == 0x000014, "Member 'SHEnemyTransformationStateComponent_ApplyTransformationState::InOverrideLyingChangeDuration' has a wrong offset!");

// Function SHProto.SHEnemyTransformationStateComponent.SetIsOtherWorldEnemy
// 0x0001 (0x0001 - 0x0000)
struct SHEnemyTransformationStateComponent_SetIsOtherWorldEnemy final
{
public:
	bool                                          InEnemyIsOW;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyTransformationStateComponent_SetIsOtherWorldEnemy) == 0x000001, "Wrong alignment on SHEnemyTransformationStateComponent_SetIsOtherWorldEnemy");
static_assert(sizeof(SHEnemyTransformationStateComponent_SetIsOtherWorldEnemy) == 0x000001, "Wrong size on SHEnemyTransformationStateComponent_SetIsOtherWorldEnemy");
static_assert(offsetof(SHEnemyTransformationStateComponent_SetIsOtherWorldEnemy, InEnemyIsOW) == 0x000000, "Member 'SHEnemyTransformationStateComponent_SetIsOtherWorldEnemy::InEnemyIsOW' has a wrong offset!");

// Function SHProto.SHEnemyTransformationStateComponent.GetActiveTransformationState
// 0x0008 (0x0008 - 0x0000)
struct SHEnemyTransformationStateComponent_GetActiveTransformationState final
{
public:
	class USHEnemyTransformationState*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyTransformationStateComponent_GetActiveTransformationState) == 0x000008, "Wrong alignment on SHEnemyTransformationStateComponent_GetActiveTransformationState");
static_assert(sizeof(SHEnemyTransformationStateComponent_GetActiveTransformationState) == 0x000008, "Wrong size on SHEnemyTransformationStateComponent_GetActiveTransformationState");
static_assert(offsetof(SHEnemyTransformationStateComponent_GetActiveTransformationState, ReturnValue) == 0x000000, "Member 'SHEnemyTransformationStateComponent_GetActiveTransformationState::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyTransformationStateComponent.GetRemainingTransformationDuration
// 0x0004 (0x0004 - 0x0000)
struct SHEnemyTransformationStateComponent_GetRemainingTransformationDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyTransformationStateComponent_GetRemainingTransformationDuration) == 0x000004, "Wrong alignment on SHEnemyTransformationStateComponent_GetRemainingTransformationDuration");
static_assert(sizeof(SHEnemyTransformationStateComponent_GetRemainingTransformationDuration) == 0x000004, "Wrong size on SHEnemyTransformationStateComponent_GetRemainingTransformationDuration");
static_assert(offsetof(SHEnemyTransformationStateComponent_GetRemainingTransformationDuration, ReturnValue) == 0x000000, "Member 'SHEnemyTransformationStateComponent_GetRemainingTransformationDuration::ReturnValue' has a wrong offset!");

// Function SHProto.SHEnemyTransformationStateComponent.GetTransformationIsInProgress
// 0x0001 (0x0001 - 0x0000)
struct SHEnemyTransformationStateComponent_GetTransformationIsInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHEnemyTransformationStateComponent_GetTransformationIsInProgress) == 0x000001, "Wrong alignment on SHEnemyTransformationStateComponent_GetTransformationIsInProgress");
static_assert(sizeof(SHEnemyTransformationStateComponent_GetTransformationIsInProgress) == 0x000001, "Wrong size on SHEnemyTransformationStateComponent_GetTransformationIsInProgress");
static_assert(offsetof(SHEnemyTransformationStateComponent_GetTransformationIsInProgress, ReturnValue) == 0x000000, "Member 'SHEnemyTransformationStateComponent_GetTransformationIsInProgress::ReturnValue' has a wrong offset!");

// Function SHProto.SHFakeMirrorComponent.GetRenderFactor
// 0x0004 (0x0004 - 0x0000)
struct SHFakeMirrorComponent_GetRenderFactor final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFakeMirrorComponent_GetRenderFactor) == 0x000004, "Wrong alignment on SHFakeMirrorComponent_GetRenderFactor");
static_assert(sizeof(SHFakeMirrorComponent_GetRenderFactor) == 0x000004, "Wrong size on SHFakeMirrorComponent_GetRenderFactor");
static_assert(offsetof(SHFakeMirrorComponent_GetRenderFactor, ReturnValue) == 0x000000, "Member 'SHFakeMirrorComponent_GetRenderFactor::ReturnValue' has a wrong offset!");

// Function SHProto.SHGameplayMenuSectionsButton.OnSetHighlight
// 0x0001 (0x0001 - 0x0000)
struct SHGameplayMenuSectionsButton_OnSetHighlight final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayMenuSectionsButton_OnSetHighlight) == 0x000001, "Wrong alignment on SHGameplayMenuSectionsButton_OnSetHighlight");
static_assert(sizeof(SHGameplayMenuSectionsButton_OnSetHighlight) == 0x000001, "Wrong size on SHGameplayMenuSectionsButton_OnSetHighlight");
static_assert(offsetof(SHGameplayMenuSectionsButton_OnSetHighlight, Enable) == 0x000000, "Member 'SHGameplayMenuSectionsButton_OnSetHighlight::Enable' has a wrong offset!");

// Function SHProto.SHFleshLipAnimComponent.SetFleshLipLeftArmIsReleased
// 0x0001 (0x0001 - 0x0000)
struct SHFleshLipAnimComponent_SetFleshLipLeftArmIsReleased final
{
public:
	bool                                          InIsReleased;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipAnimComponent_SetFleshLipLeftArmIsReleased) == 0x000001, "Wrong alignment on SHFleshLipAnimComponent_SetFleshLipLeftArmIsReleased");
static_assert(sizeof(SHFleshLipAnimComponent_SetFleshLipLeftArmIsReleased) == 0x000001, "Wrong size on SHFleshLipAnimComponent_SetFleshLipLeftArmIsReleased");
static_assert(offsetof(SHFleshLipAnimComponent_SetFleshLipLeftArmIsReleased, InIsReleased) == 0x000000, "Member 'SHFleshLipAnimComponent_SetFleshLipLeftArmIsReleased::InIsReleased' has a wrong offset!");

// Function SHProto.SHFleshLipAnimComponent.SetFleshLipLegsAreReleased
// 0x0001 (0x0001 - 0x0000)
struct SHFleshLipAnimComponent_SetFleshLipLegsAreReleased final
{
public:
	bool                                          InAreReleased;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipAnimComponent_SetFleshLipLegsAreReleased) == 0x000001, "Wrong alignment on SHFleshLipAnimComponent_SetFleshLipLegsAreReleased");
static_assert(sizeof(SHFleshLipAnimComponent_SetFleshLipLegsAreReleased) == 0x000001, "Wrong size on SHFleshLipAnimComponent_SetFleshLipLegsAreReleased");
static_assert(offsetof(SHFleshLipAnimComponent_SetFleshLipLegsAreReleased, InAreReleased) == 0x000000, "Member 'SHFleshLipAnimComponent_SetFleshLipLegsAreReleased::InAreReleased' has a wrong offset!");

// Function SHProto.SHFleshLipAnimComponent.SetFleshLipRightArmIsReleased
// 0x0001 (0x0001 - 0x0000)
struct SHFleshLipAnimComponent_SetFleshLipRightArmIsReleased final
{
public:
	bool                                          InIsReleased;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipAnimComponent_SetFleshLipRightArmIsReleased) == 0x000001, "Wrong alignment on SHFleshLipAnimComponent_SetFleshLipRightArmIsReleased");
static_assert(sizeof(SHFleshLipAnimComponent_SetFleshLipRightArmIsReleased) == 0x000001, "Wrong size on SHFleshLipAnimComponent_SetFleshLipRightArmIsReleased");
static_assert(offsetof(SHFleshLipAnimComponent_SetFleshLipRightArmIsReleased, InIsReleased) == 0x000000, "Member 'SHFleshLipAnimComponent_SetFleshLipRightArmIsReleased::InIsReleased' has a wrong offset!");

// Function SHProto.SHFleshLipAnimComponent.SetFleshLipTransformationState
// 0x0002 (0x0002 - 0x0000)
struct SHFleshLipAnimComponent_SetFleshLipTransformationState final
{
public:
	ESHFleshLipAnimInstanceTransformationState    InFleshLipTransformation;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsTransforming;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipAnimComponent_SetFleshLipTransformationState) == 0x000001, "Wrong alignment on SHFleshLipAnimComponent_SetFleshLipTransformationState");
static_assert(sizeof(SHFleshLipAnimComponent_SetFleshLipTransformationState) == 0x000002, "Wrong size on SHFleshLipAnimComponent_SetFleshLipTransformationState");
static_assert(offsetof(SHFleshLipAnimComponent_SetFleshLipTransformationState, InFleshLipTransformation) == 0x000000, "Member 'SHFleshLipAnimComponent_SetFleshLipTransformationState::InFleshLipTransformation' has a wrong offset!");
static_assert(offsetof(SHFleshLipAnimComponent_SetFleshLipTransformationState, InIsTransforming) == 0x000001, "Member 'SHFleshLipAnimComponent_SetFleshLipTransformationState::InIsTransforming' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingTileActor.DamageCeilingTile
// 0x0048 (0x0048 - 0x0000)
struct SHFleshLipCeilingTileActor_DamageCeilingTile final
{
public:
	struct FVector                                InHitLocation;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InDropVelocity;                                    // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InDropRotation;                                    // 0x0030(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipCeilingTileActor_DamageCeilingTile) == 0x000008, "Wrong alignment on SHFleshLipCeilingTileActor_DamageCeilingTile");
static_assert(sizeof(SHFleshLipCeilingTileActor_DamageCeilingTile) == 0x000048, "Wrong size on SHFleshLipCeilingTileActor_DamageCeilingTile");
static_assert(offsetof(SHFleshLipCeilingTileActor_DamageCeilingTile, InHitLocation) == 0x000000, "Member 'SHFleshLipCeilingTileActor_DamageCeilingTile::InHitLocation' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingTileActor_DamageCeilingTile, InDropVelocity) == 0x000018, "Member 'SHFleshLipCeilingTileActor_DamageCeilingTile::InDropVelocity' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingTileActor_DamageCeilingTile, InDropRotation) == 0x000030, "Member 'SHFleshLipCeilingTileActor_DamageCeilingTile::InDropRotation' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingTileActor.DisconnectCeilingTile
// 0x0030 (0x0030 - 0x0000)
struct SHFleshLipCeilingTileActor_DisconnectCeilingTile final
{
public:
	struct FVector                                InDropVelocity;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InDropRotation;                                    // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipCeilingTileActor_DisconnectCeilingTile) == 0x000008, "Wrong alignment on SHFleshLipCeilingTileActor_DisconnectCeilingTile");
static_assert(sizeof(SHFleshLipCeilingTileActor_DisconnectCeilingTile) == 0x000030, "Wrong size on SHFleshLipCeilingTileActor_DisconnectCeilingTile");
static_assert(offsetof(SHFleshLipCeilingTileActor_DisconnectCeilingTile, InDropVelocity) == 0x000000, "Member 'SHFleshLipCeilingTileActor_DisconnectCeilingTile::InDropVelocity' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingTileActor_DisconnectCeilingTile, InDropRotation) == 0x000018, "Member 'SHFleshLipCeilingTileActor_DisconnectCeilingTile::InDropRotation' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingTileActor.SetIgnoreCollisionsWithActor_Implementation
// 0x0010 (0x0010 - 0x0000)
struct SHFleshLipCeilingTileActor_SetIgnoreCollisionsWithActor_Implementation final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIgnoreCollision;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFleshLipCeilingTileActor_SetIgnoreCollisionsWithActor_Implementation) == 0x000008, "Wrong alignment on SHFleshLipCeilingTileActor_SetIgnoreCollisionsWithActor_Implementation");
static_assert(sizeof(SHFleshLipCeilingTileActor_SetIgnoreCollisionsWithActor_Implementation) == 0x000010, "Wrong size on SHFleshLipCeilingTileActor_SetIgnoreCollisionsWithActor_Implementation");
static_assert(offsetof(SHFleshLipCeilingTileActor_SetIgnoreCollisionsWithActor_Implementation, InActor) == 0x000000, "Member 'SHFleshLipCeilingTileActor_SetIgnoreCollisionsWithActor_Implementation::InActor' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingTileActor_SetIgnoreCollisionsWithActor_Implementation, InIgnoreCollision) == 0x000008, "Member 'SHFleshLipCeilingTileActor_SetIgnoreCollisionsWithActor_Implementation::InIgnoreCollision' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingTileActor.TileDamaged
// 0x0048 (0x0048 - 0x0000)
struct SHFleshLipCeilingTileActor_TileDamaged final
{
public:
	struct FVector                                InHitLocation;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InDropVelocity;                                    // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InDropRotation;                                    // 0x0030(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipCeilingTileActor_TileDamaged) == 0x000008, "Wrong alignment on SHFleshLipCeilingTileActor_TileDamaged");
static_assert(sizeof(SHFleshLipCeilingTileActor_TileDamaged) == 0x000048, "Wrong size on SHFleshLipCeilingTileActor_TileDamaged");
static_assert(offsetof(SHFleshLipCeilingTileActor_TileDamaged, InHitLocation) == 0x000000, "Member 'SHFleshLipCeilingTileActor_TileDamaged::InHitLocation' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingTileActor_TileDamaged, InDropVelocity) == 0x000018, "Member 'SHFleshLipCeilingTileActor_TileDamaged::InDropVelocity' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingTileActor_TileDamaged, InDropRotation) == 0x000030, "Member 'SHFleshLipCeilingTileActor_TileDamaged::InDropRotation' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingTileActor.TileDisconnected
// 0x0038 (0x0038 - 0x0000)
struct SHFleshLipCeilingTileActor_TileDisconnected final
{
public:
	bool                                          InAsHanging;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InDropVelocity;                                    // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InDropRotation;                                    // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipCeilingTileActor_TileDisconnected) == 0x000008, "Wrong alignment on SHFleshLipCeilingTileActor_TileDisconnected");
static_assert(sizeof(SHFleshLipCeilingTileActor_TileDisconnected) == 0x000038, "Wrong size on SHFleshLipCeilingTileActor_TileDisconnected");
static_assert(offsetof(SHFleshLipCeilingTileActor_TileDisconnected, InAsHanging) == 0x000000, "Member 'SHFleshLipCeilingTileActor_TileDisconnected::InAsHanging' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingTileActor_TileDisconnected, InDropVelocity) == 0x000008, "Member 'SHFleshLipCeilingTileActor_TileDisconnected::InDropVelocity' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingTileActor_TileDisconnected, InDropRotation) == 0x000020, "Member 'SHFleshLipCeilingTileActor_TileDisconnected::InDropRotation' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingTileActor.GetTileCoordinates
// 0x0008 (0x0008 - 0x0000)
struct SHFleshLipCeilingTileActor_GetTileCoordinates final
{
public:
	int32                                         OutTileX;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutTileY;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipCeilingTileActor_GetTileCoordinates) == 0x000004, "Wrong alignment on SHFleshLipCeilingTileActor_GetTileCoordinates");
static_assert(sizeof(SHFleshLipCeilingTileActor_GetTileCoordinates) == 0x000008, "Wrong size on SHFleshLipCeilingTileActor_GetTileCoordinates");
static_assert(offsetof(SHFleshLipCeilingTileActor_GetTileCoordinates, OutTileX) == 0x000000, "Member 'SHFleshLipCeilingTileActor_GetTileCoordinates::OutTileX' has a wrong offset!");
static_assert(offsetof(SHFleshLipCeilingTileActor_GetTileCoordinates, OutTileY) == 0x000004, "Member 'SHFleshLipCeilingTileActor_GetTileCoordinates::OutTileY' has a wrong offset!");

// Function SHProto.SHFleshLipCeilingTileActor.GetTileDamageLevel
// 0x0004 (0x0004 - 0x0000)
struct SHFleshLipCeilingTileActor_GetTileDamageLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipCeilingTileActor_GetTileDamageLevel) == 0x000004, "Wrong alignment on SHFleshLipCeilingTileActor_GetTileDamageLevel");
static_assert(sizeof(SHFleshLipCeilingTileActor_GetTileDamageLevel) == 0x000004, "Wrong size on SHFleshLipCeilingTileActor_GetTileDamageLevel");
static_assert(offsetof(SHFleshLipCeilingTileActor_GetTileDamageLevel, ReturnValue) == 0x000000, "Member 'SHFleshLipCeilingTileActor_GetTileDamageLevel::ReturnValue' has a wrong offset!");

// Function SHProto.SHFleshLipTransformationState.GetFleshLipTransformationState
// 0x0001 (0x0001 - 0x0000)
struct SHFleshLipTransformationState_GetFleshLipTransformationState final
{
public:
	ESHFleshLipTransformationState                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipTransformationState_GetFleshLipTransformationState) == 0x000001, "Wrong alignment on SHFleshLipTransformationState_GetFleshLipTransformationState");
static_assert(sizeof(SHFleshLipTransformationState_GetFleshLipTransformationState) == 0x000001, "Wrong size on SHFleshLipTransformationState_GetFleshLipTransformationState");
static_assert(offsetof(SHFleshLipTransformationState_GetFleshLipTransformationState, ReturnValue) == 0x000000, "Member 'SHFleshLipTransformationState_GetFleshLipTransformationState::ReturnValue' has a wrong offset!");

// Function SHProto.SHFleshLipTransformationState.GetGrabPointSearchOffset
// 0x0018 (0x0018 - 0x0000)
struct SHFleshLipTransformationState_GetGrabPointSearchOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipTransformationState_GetGrabPointSearchOffset) == 0x000008, "Wrong alignment on SHFleshLipTransformationState_GetGrabPointSearchOffset");
static_assert(sizeof(SHFleshLipTransformationState_GetGrabPointSearchOffset) == 0x000018, "Wrong size on SHFleshLipTransformationState_GetGrabPointSearchOffset");
static_assert(offsetof(SHFleshLipTransformationState_GetGrabPointSearchOffset, ReturnValue) == 0x000000, "Member 'SHFleshLipTransformationState_GetGrabPointSearchOffset::ReturnValue' has a wrong offset!");

// Function SHProto.SHFleshLipTransformationState.GetShouldRotationBeMaintained
// 0x0001 (0x0001 - 0x0000)
struct SHFleshLipTransformationState_GetShouldRotationBeMaintained final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipTransformationState_GetShouldRotationBeMaintained) == 0x000001, "Wrong alignment on SHFleshLipTransformationState_GetShouldRotationBeMaintained");
static_assert(sizeof(SHFleshLipTransformationState_GetShouldRotationBeMaintained) == 0x000001, "Wrong size on SHFleshLipTransformationState_GetShouldRotationBeMaintained");
static_assert(offsetof(SHFleshLipTransformationState_GetShouldRotationBeMaintained, ReturnValue) == 0x000000, "Member 'SHFleshLipTransformationState_GetShouldRotationBeMaintained::ReturnValue' has a wrong offset!");

// Function SHProto.SHFleshLipTransformationState.GetTransformationOverrides
// 0x0028 (0x0028 - 0x0000)
struct SHFleshLipTransformationState_GetTransformationOverrides final
{
public:
	bool                                          OutShouldBeUsed;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSHFleshLipTransformationStateCurves   OutCurves;                                         // 0x0004(0x0024)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFleshLipTransformationState_GetTransformationOverrides) == 0x000004, "Wrong alignment on SHFleshLipTransformationState_GetTransformationOverrides");
static_assert(sizeof(SHFleshLipTransformationState_GetTransformationOverrides) == 0x000028, "Wrong size on SHFleshLipTransformationState_GetTransformationOverrides");
static_assert(offsetof(SHFleshLipTransformationState_GetTransformationOverrides, OutShouldBeUsed) == 0x000000, "Member 'SHFleshLipTransformationState_GetTransformationOverrides::OutShouldBeUsed' has a wrong offset!");
static_assert(offsetof(SHFleshLipTransformationState_GetTransformationOverrides, OutCurves) == 0x000004, "Member 'SHFleshLipTransformationState_GetTransformationOverrides::OutCurves' has a wrong offset!");

// Function SHProto.SHFocusableComponent.ConsumeCurrentItem
// 0x0001 (0x0001 - 0x0000)
struct SHFocusableComponent_ConsumeCurrentItem final
{
public:
	bool                                          SetPuzzleAsSolved;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFocusableComponent_ConsumeCurrentItem) == 0x000001, "Wrong alignment on SHFocusableComponent_ConsumeCurrentItem");
static_assert(sizeof(SHFocusableComponent_ConsumeCurrentItem) == 0x000001, "Wrong size on SHFocusableComponent_ConsumeCurrentItem");
static_assert(offsetof(SHFocusableComponent_ConsumeCurrentItem, SetPuzzleAsSolved) == 0x000000, "Member 'SHFocusableComponent_ConsumeCurrentItem::SetPuzzleAsSolved' has a wrong offset!");

// DelegateFunction SHProto.SHFocusableComponent.FocusableExEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHFocusableComponent_FocusableExEvent__DelegateSignature final
{
public:
	class USHFocusableComponent*                  ComponentPtr;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFocusableComponent_FocusableExEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHFocusableComponent_FocusableExEvent__DelegateSignature");
static_assert(sizeof(SHFocusableComponent_FocusableExEvent__DelegateSignature) == 0x000008, "Wrong size on SHFocusableComponent_FocusableExEvent__DelegateSignature");
static_assert(offsetof(SHFocusableComponent_FocusableExEvent__DelegateSignature, ComponentPtr) == 0x000000, "Member 'SHFocusableComponent_FocusableExEvent__DelegateSignature::ComponentPtr' has a wrong offset!");

// DelegateFunction SHProto.SHFocusableComponent.FocusableInputAction__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHFocusableComponent_FocusableInputAction__DelegateSignature final
{
public:
	ESHFocusableInputActionTypeEnum               InputActionType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         KeyValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFocusableComponent_FocusableInputAction__DelegateSignature) == 0x000004, "Wrong alignment on SHFocusableComponent_FocusableInputAction__DelegateSignature");
static_assert(sizeof(SHFocusableComponent_FocusableInputAction__DelegateSignature) == 0x000008, "Wrong size on SHFocusableComponent_FocusableInputAction__DelegateSignature");
static_assert(offsetof(SHFocusableComponent_FocusableInputAction__DelegateSignature, InputActionType) == 0x000000, "Member 'SHFocusableComponent_FocusableInputAction__DelegateSignature::InputActionType' has a wrong offset!");
static_assert(offsetof(SHFocusableComponent_FocusableInputAction__DelegateSignature, KeyValue) == 0x000004, "Member 'SHFocusableComponent_FocusableInputAction__DelegateSignature::KeyValue' has a wrong offset!");

// DelegateFunction SHProto.SHFocusableComponent.FocusableItemEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHFocusableComponent_FocusableItemEvent__DelegateSignature final
{
public:
	class FName                                   ItemRowName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFocusableComponent_FocusableItemEvent__DelegateSignature) == 0x000004, "Wrong alignment on SHFocusableComponent_FocusableItemEvent__DelegateSignature");
static_assert(sizeof(SHFocusableComponent_FocusableItemEvent__DelegateSignature) == 0x000008, "Wrong size on SHFocusableComponent_FocusableItemEvent__DelegateSignature");
static_assert(offsetof(SHFocusableComponent_FocusableItemEvent__DelegateSignature, ItemRowName) == 0x000000, "Member 'SHFocusableComponent_FocusableItemEvent__DelegateSignature::ItemRowName' has a wrong offset!");

// Function SHProto.SHFocusableComponent.HideMiniInventoryRequest
// 0x0001 (0x0001 - 0x0000)
struct SHFocusableComponent_HideMiniInventoryRequest final
{
public:
	bool                                          bInstant;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFocusableComponent_HideMiniInventoryRequest) == 0x000001, "Wrong alignment on SHFocusableComponent_HideMiniInventoryRequest");
static_assert(sizeof(SHFocusableComponent_HideMiniInventoryRequest) == 0x000001, "Wrong size on SHFocusableComponent_HideMiniInventoryRequest");
static_assert(offsetof(SHFocusableComponent_HideMiniInventoryRequest, bInstant) == 0x000000, "Member 'SHFocusableComponent_HideMiniInventoryRequest::bInstant' has a wrong offset!");

// Function SHProto.SHFocusableComponent.Interact
// 0x0010 (0x0010 - 0x0000)
struct SHFocusableComponent_Interact final
{
public:
	class USHInteractionGenericComponent*         Generic;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHCharacterPlay*                       Character;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFocusableComponent_Interact) == 0x000008, "Wrong alignment on SHFocusableComponent_Interact");
static_assert(sizeof(SHFocusableComponent_Interact) == 0x000010, "Wrong size on SHFocusableComponent_Interact");
static_assert(offsetof(SHFocusableComponent_Interact, Generic) == 0x000000, "Member 'SHFocusableComponent_Interact::Generic' has a wrong offset!");
static_assert(offsetof(SHFocusableComponent_Interact, Character) == 0x000008, "Member 'SHFocusableComponent_Interact::Character' has a wrong offset!");

// Function SHProto.SHFocusableComponent.PlayItemSelectedAudio
// 0x0001 (0x0001 - 0x0000)
struct SHFocusableComponent_PlayItemSelectedAudio final
{
public:
	bool                                          IsCorrectItem;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFocusableComponent_PlayItemSelectedAudio) == 0x000001, "Wrong alignment on SHFocusableComponent_PlayItemSelectedAudio");
static_assert(sizeof(SHFocusableComponent_PlayItemSelectedAudio) == 0x000001, "Wrong size on SHFocusableComponent_PlayItemSelectedAudio");
static_assert(offsetof(SHFocusableComponent_PlayItemSelectedAudio, IsCorrectItem) == 0x000000, "Member 'SHFocusableComponent_PlayItemSelectedAudio::IsCorrectItem' has a wrong offset!");

// Function SHProto.SHFocusableComponent.ProcessCombatInputModeChangedEvent
// 0x0008 (0x0008 - 0x0000)
struct SHFocusableComponent_ProcessCombatInputModeChangedEvent final
{
public:
	class USHCharacterPlayCombatComponent*        CombatComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFocusableComponent_ProcessCombatInputModeChangedEvent) == 0x000008, "Wrong alignment on SHFocusableComponent_ProcessCombatInputModeChangedEvent");
static_assert(sizeof(SHFocusableComponent_ProcessCombatInputModeChangedEvent) == 0x000008, "Wrong size on SHFocusableComponent_ProcessCombatInputModeChangedEvent");
static_assert(offsetof(SHFocusableComponent_ProcessCombatInputModeChangedEvent, CombatComp) == 0x000000, "Member 'SHFocusableComponent_ProcessCombatInputModeChangedEvent::CombatComp' has a wrong offset!");

// Function SHProto.SHFocusableComponent.ProcessReceiveDamageEvent
// 0x0008 (0x0008 - 0x0000)
struct SHFocusableComponent_ProcessReceiveDamageEvent final
{
public:
	class USHCharacterPlayCombatComponent*        CombatComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFocusableComponent_ProcessReceiveDamageEvent) == 0x000008, "Wrong alignment on SHFocusableComponent_ProcessReceiveDamageEvent");
static_assert(sizeof(SHFocusableComponent_ProcessReceiveDamageEvent) == 0x000008, "Wrong size on SHFocusableComponent_ProcessReceiveDamageEvent");
static_assert(offsetof(SHFocusableComponent_ProcessReceiveDamageEvent, CombatComp) == 0x000000, "Member 'SHFocusableComponent_ProcessReceiveDamageEvent::CombatComp' has a wrong offset!");

// Function SHProto.SHFocusableComponent.RegisterComponents
// 0x0010 (0x0010 - 0x0000)
struct SHFocusableComponent_RegisterComponents final
{
public:
	class UCameraComponent*                       InCameraComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USHInteractionGenericComponent*         InInteractionGenericComponent;                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFocusableComponent_RegisterComponents) == 0x000008, "Wrong alignment on SHFocusableComponent_RegisterComponents");
static_assert(sizeof(SHFocusableComponent_RegisterComponents) == 0x000010, "Wrong size on SHFocusableComponent_RegisterComponents");
static_assert(offsetof(SHFocusableComponent_RegisterComponents, InCameraComponent) == 0x000000, "Member 'SHFocusableComponent_RegisterComponents::InCameraComponent' has a wrong offset!");
static_assert(offsetof(SHFocusableComponent_RegisterComponents, InInteractionGenericComponent) == 0x000008, "Member 'SHFocusableComponent_RegisterComponents::InInteractionGenericComponent' has a wrong offset!");

// Function SHProto.SHFocusableComponent.RegisterExtraLightsContainer
// 0x0008 (0x0008 - 0x0000)
struct SHFocusableComponent_RegisterExtraLightsContainer final
{
public:
	class USceneComponent*                        InFocusExtraLightsContainer;                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFocusableComponent_RegisterExtraLightsContainer) == 0x000008, "Wrong alignment on SHFocusableComponent_RegisterExtraLightsContainer");
static_assert(sizeof(SHFocusableComponent_RegisterExtraLightsContainer) == 0x000008, "Wrong size on SHFocusableComponent_RegisterExtraLightsContainer");
static_assert(offsetof(SHFocusableComponent_RegisterExtraLightsContainer, InFocusExtraLightsContainer) == 0x000000, "Member 'SHFocusableComponent_RegisterExtraLightsContainer::InFocusExtraLightsContainer' has a wrong offset!");

// Function SHProto.SHFocusableComponent.RegisterFlashlightFocusSpotComponent
// 0x0008 (0x0008 - 0x0000)
struct SHFocusableComponent_RegisterFlashlightFocusSpotComponent final
{
public:
	class USceneComponent*                        InSceneComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFocusableComponent_RegisterFlashlightFocusSpotComponent) == 0x000008, "Wrong alignment on SHFocusableComponent_RegisterFlashlightFocusSpotComponent");
static_assert(sizeof(SHFocusableComponent_RegisterFlashlightFocusSpotComponent) == 0x000008, "Wrong size on SHFocusableComponent_RegisterFlashlightFocusSpotComponent");
static_assert(offsetof(SHFocusableComponent_RegisterFlashlightFocusSpotComponent, InSceneComponent) == 0x000000, "Member 'SHFocusableComponent_RegisterFlashlightFocusSpotComponent::InSceneComponent' has a wrong offset!");

// Function SHProto.SHFocusableComponent.RegisterFlashlightSourceSpotComponent
// 0x0008 (0x0008 - 0x0000)
struct SHFocusableComponent_RegisterFlashlightSourceSpotComponent final
{
public:
	class USceneComponent*                        InSceneComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFocusableComponent_RegisterFlashlightSourceSpotComponent) == 0x000008, "Wrong alignment on SHFocusableComponent_RegisterFlashlightSourceSpotComponent");
static_assert(sizeof(SHFocusableComponent_RegisterFlashlightSourceSpotComponent) == 0x000008, "Wrong size on SHFocusableComponent_RegisterFlashlightSourceSpotComponent");
static_assert(offsetof(SHFocusableComponent_RegisterFlashlightSourceSpotComponent, InSceneComponent) == 0x000000, "Member 'SHFocusableComponent_RegisterFlashlightSourceSpotComponent::InSceneComponent' has a wrong offset!");

// Function SHProto.SHFocusableComponent.RegisterTeleportMariaCapsuleComponent
// 0x0008 (0x0008 - 0x0000)
struct SHFocusableComponent_RegisterTeleportMariaCapsuleComponent final
{
public:
	class UCapsuleComponent*                      InCapsuleComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFocusableComponent_RegisterTeleportMariaCapsuleComponent) == 0x000008, "Wrong alignment on SHFocusableComponent_RegisterTeleportMariaCapsuleComponent");
static_assert(sizeof(SHFocusableComponent_RegisterTeleportMariaCapsuleComponent) == 0x000008, "Wrong size on SHFocusableComponent_RegisterTeleportMariaCapsuleComponent");
static_assert(offsetof(SHFocusableComponent_RegisterTeleportMariaCapsuleComponent, InCapsuleComponent) == 0x000000, "Member 'SHFocusableComponent_RegisterTeleportMariaCapsuleComponent::InCapsuleComponent' has a wrong offset!");

// Function SHProto.SHFocusableComponent.RegisterTeleportPlayerCapsuleComponent
// 0x0008 (0x0008 - 0x0000)
struct SHFocusableComponent_RegisterTeleportPlayerCapsuleComponent final
{
public:
	class UCapsuleComponent*                      InCapsuleComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFocusableComponent_RegisterTeleportPlayerCapsuleComponent) == 0x000008, "Wrong alignment on SHFocusableComponent_RegisterTeleportPlayerCapsuleComponent");
static_assert(sizeof(SHFocusableComponent_RegisterTeleportPlayerCapsuleComponent) == 0x000008, "Wrong size on SHFocusableComponent_RegisterTeleportPlayerCapsuleComponent");
static_assert(offsetof(SHFocusableComponent_RegisterTeleportPlayerCapsuleComponent, InCapsuleComponent) == 0x000000, "Member 'SHFocusableComponent_RegisterTeleportPlayerCapsuleComponent::InCapsuleComponent' has a wrong offset!");

// Function SHProto.SHFocusableComponent.SetControlTips
// 0x0010 (0x0010 - 0x0000)
struct SHFocusableComponent_SetControlTips final
{
public:
	TArray<struct FDataTableRowHandle>            TipSet;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFocusableComponent_SetControlTips) == 0x000008, "Wrong alignment on SHFocusableComponent_SetControlTips");
static_assert(sizeof(SHFocusableComponent_SetControlTips) == 0x000010, "Wrong size on SHFocusableComponent_SetControlTips");
static_assert(offsetof(SHFocusableComponent_SetControlTips, TipSet) == 0x000000, "Member 'SHFocusableComponent_SetControlTips::TipSet' has a wrong offset!");

// Function SHProto.SHFocusableComponent.SetInputBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHFocusableComponent_SetInputBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFocusableComponent_SetInputBlocked) == 0x000008, "Wrong alignment on SHFocusableComponent_SetInputBlocked");
static_assert(sizeof(SHFocusableComponent_SetInputBlocked) == 0x000010, "Wrong size on SHFocusableComponent_SetInputBlocked");
static_assert(offsetof(SHFocusableComponent_SetInputBlocked, Blocked) == 0x000000, "Member 'SHFocusableComponent_SetInputBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHFocusableComponent_SetInputBlocked, Object) == 0x000008, "Member 'SHFocusableComponent_SetInputBlocked::Object' has a wrong offset!");

// Function SHProto.SHFocusableComponent.SetInteractBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHFocusableComponent_SetInteractBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFocusableComponent_SetInteractBlocked) == 0x000008, "Wrong alignment on SHFocusableComponent_SetInteractBlocked");
static_assert(sizeof(SHFocusableComponent_SetInteractBlocked) == 0x000010, "Wrong size on SHFocusableComponent_SetInteractBlocked");
static_assert(offsetof(SHFocusableComponent_SetInteractBlocked, Blocked) == 0x000000, "Member 'SHFocusableComponent_SetInteractBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHFocusableComponent_SetInteractBlocked, Object) == 0x000008, "Member 'SHFocusableComponent_SetInteractBlocked::Object' has a wrong offset!");

// Function SHProto.SHFocusableComponent.ShowCombinedTranscriptsRequest
// 0x0020 (0x0020 - 0x0000)
struct SHFocusableComponent_ShowCombinedTranscriptsRequest final
{
public:
	TArray<class USHTranscriptData*>              InTranscripts;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 InJoinDelimiter;                                   // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFocusableComponent_ShowCombinedTranscriptsRequest) == 0x000008, "Wrong alignment on SHFocusableComponent_ShowCombinedTranscriptsRequest");
static_assert(sizeof(SHFocusableComponent_ShowCombinedTranscriptsRequest) == 0x000020, "Wrong size on SHFocusableComponent_ShowCombinedTranscriptsRequest");
static_assert(offsetof(SHFocusableComponent_ShowCombinedTranscriptsRequest, InTranscripts) == 0x000000, "Member 'SHFocusableComponent_ShowCombinedTranscriptsRequest::InTranscripts' has a wrong offset!");
static_assert(offsetof(SHFocusableComponent_ShowCombinedTranscriptsRequest, InJoinDelimiter) == 0x000010, "Member 'SHFocusableComponent_ShowCombinedTranscriptsRequest::InJoinDelimiter' has a wrong offset!");

// Function SHProto.SHFocusableComponent.ShowMiniInventoryRequest
// 0x0001 (0x0001 - 0x0000)
struct SHFocusableComponent_ShowMiniInventoryRequest final
{
public:
	bool                                          bInstant;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFocusableComponent_ShowMiniInventoryRequest) == 0x000001, "Wrong alignment on SHFocusableComponent_ShowMiniInventoryRequest");
static_assert(sizeof(SHFocusableComponent_ShowMiniInventoryRequest) == 0x000001, "Wrong size on SHFocusableComponent_ShowMiniInventoryRequest");
static_assert(offsetof(SHFocusableComponent_ShowMiniInventoryRequest, bInstant) == 0x000000, "Member 'SHFocusableComponent_ShowMiniInventoryRequest::bInstant' has a wrong offset!");

// Function SHProto.SHFocusableComponent.ShowTranscriptRequest
// 0x0030 (0x0030 - 0x0000)
struct SHFocusableComponent_ShowTranscriptRequest final
{
public:
	TSoftObjectPtr<class USHTranscriptData>       InTranscriptData;                                  // 0x0000(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFocusableComponent_ShowTranscriptRequest) == 0x000008, "Wrong alignment on SHFocusableComponent_ShowTranscriptRequest");
static_assert(sizeof(SHFocusableComponent_ShowTranscriptRequest) == 0x000030, "Wrong size on SHFocusableComponent_ShowTranscriptRequest");
static_assert(offsetof(SHFocusableComponent_ShowTranscriptRequest, InTranscriptData) == 0x000000, "Member 'SHFocusableComponent_ShowTranscriptRequest::InTranscriptData' has a wrong offset!");

// Function SHProto.SHFocusableComponent.GenericNavigation_CalculateIndex
// 0x0028 (0x0028 - 0x0000)
struct SHFocusableComponent_GenericNavigation_CalculateIndex final
{
public:
	struct FVector2D                              InInput;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USceneComponent*>                InSlotArray;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         InCurrentSlotIndex;                                // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFocusableComponent_GenericNavigation_CalculateIndex) == 0x000008, "Wrong alignment on SHFocusableComponent_GenericNavigation_CalculateIndex");
static_assert(sizeof(SHFocusableComponent_GenericNavigation_CalculateIndex) == 0x000028, "Wrong size on SHFocusableComponent_GenericNavigation_CalculateIndex");
static_assert(offsetof(SHFocusableComponent_GenericNavigation_CalculateIndex, InInput) == 0x000000, "Member 'SHFocusableComponent_GenericNavigation_CalculateIndex::InInput' has a wrong offset!");
static_assert(offsetof(SHFocusableComponent_GenericNavigation_CalculateIndex, InSlotArray) == 0x000010, "Member 'SHFocusableComponent_GenericNavigation_CalculateIndex::InSlotArray' has a wrong offset!");
static_assert(offsetof(SHFocusableComponent_GenericNavigation_CalculateIndex, InCurrentSlotIndex) == 0x000020, "Member 'SHFocusableComponent_GenericNavigation_CalculateIndex::InCurrentSlotIndex' has a wrong offset!");
static_assert(offsetof(SHFocusableComponent_GenericNavigation_CalculateIndex, ReturnValue) == 0x000024, "Member 'SHFocusableComponent_GenericNavigation_CalculateIndex::ReturnValue' has a wrong offset!");

// Function SHProto.SHFocusableComponent.GenericNavigation_CalculateIndex_Impl
// 0x0028 (0x0028 - 0x0000)
struct SHFocusableComponent_GenericNavigation_CalculateIndex_Impl final
{
public:
	struct FVector2D                              InInput;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        InWorldLocationsArray;                             // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InCurrentSlotIndex;                                // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFocusableComponent_GenericNavigation_CalculateIndex_Impl) == 0x000008, "Wrong alignment on SHFocusableComponent_GenericNavigation_CalculateIndex_Impl");
static_assert(sizeof(SHFocusableComponent_GenericNavigation_CalculateIndex_Impl) == 0x000028, "Wrong size on SHFocusableComponent_GenericNavigation_CalculateIndex_Impl");
static_assert(offsetof(SHFocusableComponent_GenericNavigation_CalculateIndex_Impl, InInput) == 0x000000, "Member 'SHFocusableComponent_GenericNavigation_CalculateIndex_Impl::InInput' has a wrong offset!");
static_assert(offsetof(SHFocusableComponent_GenericNavigation_CalculateIndex_Impl, InWorldLocationsArray) == 0x000010, "Member 'SHFocusableComponent_GenericNavigation_CalculateIndex_Impl::InWorldLocationsArray' has a wrong offset!");
static_assert(offsetof(SHFocusableComponent_GenericNavigation_CalculateIndex_Impl, InCurrentSlotIndex) == 0x000020, "Member 'SHFocusableComponent_GenericNavigation_CalculateIndex_Impl::InCurrentSlotIndex' has a wrong offset!");
static_assert(offsetof(SHFocusableComponent_GenericNavigation_CalculateIndex_Impl, ReturnValue) == 0x000024, "Member 'SHFocusableComponent_GenericNavigation_CalculateIndex_Impl::ReturnValue' has a wrong offset!");

// Function SHProto.SHFocusableComponent.GenericNavigation_NavigateInputAction
// 0x0030 (0x0030 - 0x0000)
struct SHFocusableComponent_GenericNavigation_NavigateInputAction final
{
public:
	float                                         InputValue;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CurrentInput;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHFocusableInputActionTypeEnum               InputAction;                                       // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFocusableComponent_GenericNavigation_NavigateInputAction) == 0x000008, "Wrong alignment on SHFocusableComponent_GenericNavigation_NavigateInputAction");
static_assert(sizeof(SHFocusableComponent_GenericNavigation_NavigateInputAction) == 0x000030, "Wrong size on SHFocusableComponent_GenericNavigation_NavigateInputAction");
static_assert(offsetof(SHFocusableComponent_GenericNavigation_NavigateInputAction, InputValue) == 0x000000, "Member 'SHFocusableComponent_GenericNavigation_NavigateInputAction::InputValue' has a wrong offset!");
static_assert(offsetof(SHFocusableComponent_GenericNavigation_NavigateInputAction, CurrentInput) == 0x000008, "Member 'SHFocusableComponent_GenericNavigation_NavigateInputAction::CurrentInput' has a wrong offset!");
static_assert(offsetof(SHFocusableComponent_GenericNavigation_NavigateInputAction, InputAction) == 0x000018, "Member 'SHFocusableComponent_GenericNavigation_NavigateInputAction::InputAction' has a wrong offset!");
static_assert(offsetof(SHFocusableComponent_GenericNavigation_NavigateInputAction, ReturnValue) == 0x000020, "Member 'SHFocusableComponent_GenericNavigation_NavigateInputAction::ReturnValue' has a wrong offset!");

// Function SHProto.SHFocusableComponent.GetInteractingCharacter
// 0x0008 (0x0008 - 0x0000)
struct SHFocusableComponent_GetInteractingCharacter final
{
public:
	class ACharacter*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFocusableComponent_GetInteractingCharacter) == 0x000008, "Wrong alignment on SHFocusableComponent_GetInteractingCharacter");
static_assert(sizeof(SHFocusableComponent_GetInteractingCharacter) == 0x000008, "Wrong size on SHFocusableComponent_GetInteractingCharacter");
static_assert(offsetof(SHFocusableComponent_GetInteractingCharacter, ReturnValue) == 0x000000, "Member 'SHFocusableComponent_GetInteractingCharacter::ReturnValue' has a wrong offset!");

// Function SHProto.SHFocusableComponent.GetMiniInventoryTypesFilter
// 0x0010 (0x0010 - 0x0000)
struct SHFocusableComponent_GetMiniInventoryTypesFilter final
{
public:
	TArray<ESHItemTypeEnum>                       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFocusableComponent_GetMiniInventoryTypesFilter) == 0x000008, "Wrong alignment on SHFocusableComponent_GetMiniInventoryTypesFilter");
static_assert(sizeof(SHFocusableComponent_GetMiniInventoryTypesFilter) == 0x000010, "Wrong size on SHFocusableComponent_GetMiniInventoryTypesFilter");
static_assert(offsetof(SHFocusableComponent_GetMiniInventoryTypesFilter, ReturnValue) == 0x000000, "Member 'SHFocusableComponent_GetMiniInventoryTypesFilter::ReturnValue' has a wrong offset!");

// Function SHProto.SHFocusableComponent.IsCameraRotationAllowed
// 0x0001 (0x0001 - 0x0000)
struct SHFocusableComponent_IsCameraRotationAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFocusableComponent_IsCameraRotationAllowed) == 0x000001, "Wrong alignment on SHFocusableComponent_IsCameraRotationAllowed");
static_assert(sizeof(SHFocusableComponent_IsCameraRotationAllowed) == 0x000001, "Wrong size on SHFocusableComponent_IsCameraRotationAllowed");
static_assert(offsetof(SHFocusableComponent_IsCameraRotationAllowed, ReturnValue) == 0x000000, "Member 'SHFocusableComponent_IsCameraRotationAllowed::ReturnValue' has a wrong offset!");

// Function SHProto.SHFocusableComponent.IsInputBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHFocusableComponent_IsInputBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFocusableComponent_IsInputBlocked) == 0x000001, "Wrong alignment on SHFocusableComponent_IsInputBlocked");
static_assert(sizeof(SHFocusableComponent_IsInputBlocked) == 0x000001, "Wrong size on SHFocusableComponent_IsInputBlocked");
static_assert(offsetof(SHFocusableComponent_IsInputBlocked, ReturnValue) == 0x000000, "Member 'SHFocusableComponent_IsInputBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHFocusableComponent.IsInteractBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHFocusableComponent_IsInteractBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFocusableComponent_IsInteractBlocked) == 0x000001, "Wrong alignment on SHFocusableComponent_IsInteractBlocked");
static_assert(sizeof(SHFocusableComponent_IsInteractBlocked) == 0x000001, "Wrong size on SHFocusableComponent_IsInteractBlocked");
static_assert(offsetof(SHFocusableComponent_IsInteractBlocked, ReturnValue) == 0x000000, "Member 'SHFocusableComponent_IsInteractBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHFocusableComponent.IsMiniInventoryShown
// 0x0001 (0x0001 - 0x0000)
struct SHFocusableComponent_IsMiniInventoryShown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFocusableComponent_IsMiniInventoryShown) == 0x000001, "Wrong alignment on SHFocusableComponent_IsMiniInventoryShown");
static_assert(sizeof(SHFocusableComponent_IsMiniInventoryShown) == 0x000001, "Wrong size on SHFocusableComponent_IsMiniInventoryShown");
static_assert(offsetof(SHFocusableComponent_IsMiniInventoryShown, ReturnValue) == 0x000000, "Member 'SHFocusableComponent_IsMiniInventoryShown::ReturnValue' has a wrong offset!");

// Function SHProto.SHFocusableComponent.IsShown
// 0x0001 (0x0001 - 0x0000)
struct SHFocusableComponent_IsShown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFocusableComponent_IsShown) == 0x000001, "Wrong alignment on SHFocusableComponent_IsShown");
static_assert(sizeof(SHFocusableComponent_IsShown) == 0x000001, "Wrong size on SHFocusableComponent_IsShown");
static_assert(offsetof(SHFocusableComponent_IsShown, ReturnValue) == 0x000000, "Member 'SHFocusableComponent_IsShown::ReturnValue' has a wrong offset!");

// Function SHProto.SHFocusableComponent.IsSolved
// 0x0001 (0x0001 - 0x0000)
struct SHFocusableComponent_IsSolved final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFocusableComponent_IsSolved) == 0x000001, "Wrong alignment on SHFocusableComponent_IsSolved");
static_assert(sizeof(SHFocusableComponent_IsSolved) == 0x000001, "Wrong size on SHFocusableComponent_IsSolved");
static_assert(offsetof(SHFocusableComponent_IsSolved, ReturnValue) == 0x000000, "Member 'SHFocusableComponent_IsSolved::ReturnValue' has a wrong offset!");

// Function SHProto.SHFogManager.OnRestoreWorldDependentSettingsNative
// 0x0008 (0x0008 - 0x0000)
struct SHFogManager_OnRestoreWorldDependentSettingsNative final
{
public:
	class USHGameInstance*                        OutGameInstance;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFogManager_OnRestoreWorldDependentSettingsNative) == 0x000008, "Wrong alignment on SHFogManager_OnRestoreWorldDependentSettingsNative");
static_assert(sizeof(SHFogManager_OnRestoreWorldDependentSettingsNative) == 0x000008, "Wrong size on SHFogManager_OnRestoreWorldDependentSettingsNative");
static_assert(offsetof(SHFogManager_OnRestoreWorldDependentSettingsNative, OutGameInstance) == 0x000000, "Member 'SHFogManager_OnRestoreWorldDependentSettingsNative::OutGameInstance' has a wrong offset!");

// Function SHProto.SHFragileElevatorEngine.RequestBreakDoorAt
// 0x0004 (0x0004 - 0x0000)
struct SHFragileElevatorEngine_RequestBreakDoorAt final
{
public:
	float                                         InAlpha;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFragileElevatorEngine_RequestBreakDoorAt) == 0x000004, "Wrong alignment on SHFragileElevatorEngine_RequestBreakDoorAt");
static_assert(sizeof(SHFragileElevatorEngine_RequestBreakDoorAt) == 0x000004, "Wrong size on SHFragileElevatorEngine_RequestBreakDoorAt");
static_assert(offsetof(SHFragileElevatorEngine_RequestBreakDoorAt, InAlpha) == 0x000000, "Member 'SHFragileElevatorEngine_RequestBreakDoorAt::InAlpha' has a wrong offset!");

// Function SHProto.SHFreezingManagerComponent.GetEncompassedFreezingVolume
// 0x0020 (0x0020 - 0x0000)
struct SHFreezingManagerComponent_GetEncompassedFreezingVolume final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHFreezingVolume*                      ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFreezingManagerComponent_GetEncompassedFreezingVolume) == 0x000008, "Wrong alignment on SHFreezingManagerComponent_GetEncompassedFreezingVolume");
static_assert(sizeof(SHFreezingManagerComponent_GetEncompassedFreezingVolume) == 0x000020, "Wrong size on SHFreezingManagerComponent_GetEncompassedFreezingVolume");
static_assert(offsetof(SHFreezingManagerComponent_GetEncompassedFreezingVolume, InLocation) == 0x000000, "Member 'SHFreezingManagerComponent_GetEncompassedFreezingVolume::InLocation' has a wrong offset!");
static_assert(offsetof(SHFreezingManagerComponent_GetEncompassedFreezingVolume, ReturnValue) == 0x000018, "Member 'SHFreezingManagerComponent_GetEncompassedFreezingVolume::ReturnValue' has a wrong offset!");

// Function SHProto.SHFreezingManagerComponent.GetRegisteredFreezingVolumeCount
// 0x0004 (0x0004 - 0x0000)
struct SHFreezingManagerComponent_GetRegisteredFreezingVolumeCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFreezingManagerComponent_GetRegisteredFreezingVolumeCount) == 0x000004, "Wrong alignment on SHFreezingManagerComponent_GetRegisteredFreezingVolumeCount");
static_assert(sizeof(SHFreezingManagerComponent_GetRegisteredFreezingVolumeCount) == 0x000004, "Wrong size on SHFreezingManagerComponent_GetRegisteredFreezingVolumeCount");
static_assert(offsetof(SHFreezingManagerComponent_GetRegisteredFreezingVolumeCount, ReturnValue) == 0x000000, "Member 'SHFreezingManagerComponent_GetRegisteredFreezingVolumeCount::ReturnValue' has a wrong offset!");

// Function SHProto.SHFriendLocomotionAnimInstance.GetFriendAnimInstanceStateData
// 0x0008 (0x0008 - 0x0000)
struct SHFriendLocomotionAnimInstance_GetFriendAnimInstanceStateData final
{
public:
	class USHFriendAnimInstanceStateData*         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFriendLocomotionAnimInstance_GetFriendAnimInstanceStateData) == 0x000008, "Wrong alignment on SHFriendLocomotionAnimInstance_GetFriendAnimInstanceStateData");
static_assert(sizeof(SHFriendLocomotionAnimInstance_GetFriendAnimInstanceStateData) == 0x000008, "Wrong size on SHFriendLocomotionAnimInstance_GetFriendAnimInstanceStateData");
static_assert(offsetof(SHFriendLocomotionAnimInstance_GetFriendAnimInstanceStateData, ReturnValue) == 0x000000, "Member 'SHFriendLocomotionAnimInstance_GetFriendAnimInstanceStateData::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXMaterialModifierSubcomp.SetMaterialLayerBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHFXMaterialModifierSubcomp_SetMaterialLayerBlocked final
{
public:
	bool                                          IsBlock;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXMaterialModifierSubcomp_SetMaterialLayerBlocked) == 0x000008, "Wrong alignment on SHFXMaterialModifierSubcomp_SetMaterialLayerBlocked");
static_assert(sizeof(SHFXMaterialModifierSubcomp_SetMaterialLayerBlocked) == 0x000010, "Wrong size on SHFXMaterialModifierSubcomp_SetMaterialLayerBlocked");
static_assert(offsetof(SHFXMaterialModifierSubcomp_SetMaterialLayerBlocked, IsBlock) == 0x000000, "Member 'SHFXMaterialModifierSubcomp_SetMaterialLayerBlocked::IsBlock' has a wrong offset!");
static_assert(offsetof(SHFXMaterialModifierSubcomp_SetMaterialLayerBlocked, Object) == 0x000008, "Member 'SHFXMaterialModifierSubcomp_SetMaterialLayerBlocked::Object' has a wrong offset!");

// Function SHProto.SHFXMaterialModifierSubcomp.GetDynamicMaterialsCount
// 0x0004 (0x0004 - 0x0000)
struct SHFXMaterialModifierSubcomp_GetDynamicMaterialsCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXMaterialModifierSubcomp_GetDynamicMaterialsCount) == 0x000004, "Wrong alignment on SHFXMaterialModifierSubcomp_GetDynamicMaterialsCount");
static_assert(sizeof(SHFXMaterialModifierSubcomp_GetDynamicMaterialsCount) == 0x000004, "Wrong size on SHFXMaterialModifierSubcomp_GetDynamicMaterialsCount");
static_assert(offsetof(SHFXMaterialModifierSubcomp_GetDynamicMaterialsCount, ReturnValue) == 0x000000, "Member 'SHFXMaterialModifierSubcomp_GetDynamicMaterialsCount::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXMaterialModifierSubcomp.IsMaterialLayerBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHFXMaterialModifierSubcomp_IsMaterialLayerBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXMaterialModifierSubcomp_IsMaterialLayerBlocked) == 0x000001, "Wrong alignment on SHFXMaterialModifierSubcomp_IsMaterialLayerBlocked");
static_assert(sizeof(SHFXMaterialModifierSubcomp_IsMaterialLayerBlocked) == 0x000001, "Wrong size on SHFXMaterialModifierSubcomp_IsMaterialLayerBlocked");
static_assert(offsetof(SHFXMaterialModifierSubcomp_IsMaterialLayerBlocked, ReturnValue) == 0x000000, "Member 'SHFXMaterialModifierSubcomp_IsMaterialLayerBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXMaterialModifierSubcomp.IsMaterialLayerBlockedBy
// 0x0010 (0x0010 - 0x0000)
struct SHFXMaterialModifierSubcomp_IsMaterialLayerBlockedBy final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFXMaterialModifierSubcomp_IsMaterialLayerBlockedBy) == 0x000008, "Wrong alignment on SHFXMaterialModifierSubcomp_IsMaterialLayerBlockedBy");
static_assert(sizeof(SHFXMaterialModifierSubcomp_IsMaterialLayerBlockedBy) == 0x000010, "Wrong size on SHFXMaterialModifierSubcomp_IsMaterialLayerBlockedBy");
static_assert(offsetof(SHFXMaterialModifierSubcomp_IsMaterialLayerBlockedBy, Object) == 0x000000, "Member 'SHFXMaterialModifierSubcomp_IsMaterialLayerBlockedBy::Object' has a wrong offset!");
static_assert(offsetof(SHFXMaterialModifierSubcomp_IsMaterialLayerBlockedBy, ReturnValue) == 0x000008, "Member 'SHFXMaterialModifierSubcomp_IsMaterialLayerBlockedBy::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXAcidLayerSubcomp.GetCurrentEvaluateTimer
// 0x0004 (0x0004 - 0x0000)
struct SHFXAcidLayerSubcomp_GetCurrentEvaluateTimer final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXAcidLayerSubcomp_GetCurrentEvaluateTimer) == 0x000004, "Wrong alignment on SHFXAcidLayerSubcomp_GetCurrentEvaluateTimer");
static_assert(sizeof(SHFXAcidLayerSubcomp_GetCurrentEvaluateTimer) == 0x000004, "Wrong size on SHFXAcidLayerSubcomp_GetCurrentEvaluateTimer");
static_assert(offsetof(SHFXAcidLayerSubcomp_GetCurrentEvaluateTimer, ReturnValue) == 0x000000, "Member 'SHFXAcidLayerSubcomp_GetCurrentEvaluateTimer::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXBleedingSubcomp.SetBleedingBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHFXBleedingSubcomp_SetBleedingBlocked final
{
public:
	bool                                          IsBlock;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXBleedingSubcomp_SetBleedingBlocked) == 0x000008, "Wrong alignment on SHFXBleedingSubcomp_SetBleedingBlocked");
static_assert(sizeof(SHFXBleedingSubcomp_SetBleedingBlocked) == 0x000010, "Wrong size on SHFXBleedingSubcomp_SetBleedingBlocked");
static_assert(offsetof(SHFXBleedingSubcomp_SetBleedingBlocked, IsBlock) == 0x000000, "Member 'SHFXBleedingSubcomp_SetBleedingBlocked::IsBlock' has a wrong offset!");
static_assert(offsetof(SHFXBleedingSubcomp_SetBleedingBlocked, Object) == 0x000008, "Member 'SHFXBleedingSubcomp_SetBleedingBlocked::Object' has a wrong offset!");

// Function SHProto.SHFXBleedingSubcomp.IsBleedingBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHFXBleedingSubcomp_IsBleedingBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXBleedingSubcomp_IsBleedingBlocked) == 0x000001, "Wrong alignment on SHFXBleedingSubcomp_IsBleedingBlocked");
static_assert(sizeof(SHFXBleedingSubcomp_IsBleedingBlocked) == 0x000001, "Wrong size on SHFXBleedingSubcomp_IsBleedingBlocked");
static_assert(offsetof(SHFXBleedingSubcomp_IsBleedingBlocked, ReturnValue) == 0x000000, "Member 'SHFXBleedingSubcomp_IsBleedingBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXBleedingSubcomp.IsBleedingBlockedBy
// 0x0010 (0x0010 - 0x0000)
struct SHFXBleedingSubcomp_IsBleedingBlockedBy final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFXBleedingSubcomp_IsBleedingBlockedBy) == 0x000008, "Wrong alignment on SHFXBleedingSubcomp_IsBleedingBlockedBy");
static_assert(sizeof(SHFXBleedingSubcomp_IsBleedingBlockedBy) == 0x000010, "Wrong size on SHFXBleedingSubcomp_IsBleedingBlockedBy");
static_assert(offsetof(SHFXBleedingSubcomp_IsBleedingBlockedBy, Object) == 0x000000, "Member 'SHFXBleedingSubcomp_IsBleedingBlockedBy::Object' has a wrong offset!");
static_assert(offsetof(SHFXBleedingSubcomp_IsBleedingBlockedBy, ReturnValue) == 0x000008, "Member 'SHFXBleedingSubcomp_IsBleedingBlockedBy::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXDirtLayerSubcomp.ChangeDirtBlendLayerAmount
// 0x0004 (0x0004 - 0x0000)
struct SHFXDirtLayerSubcomp_ChangeDirtBlendLayerAmount final
{
public:
	float                                         DeltaValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXDirtLayerSubcomp_ChangeDirtBlendLayerAmount) == 0x000004, "Wrong alignment on SHFXDirtLayerSubcomp_ChangeDirtBlendLayerAmount");
static_assert(sizeof(SHFXDirtLayerSubcomp_ChangeDirtBlendLayerAmount) == 0x000004, "Wrong size on SHFXDirtLayerSubcomp_ChangeDirtBlendLayerAmount");
static_assert(offsetof(SHFXDirtLayerSubcomp_ChangeDirtBlendLayerAmount, DeltaValue) == 0x000000, "Member 'SHFXDirtLayerSubcomp_ChangeDirtBlendLayerAmount::DeltaValue' has a wrong offset!");

// Function SHProto.SHFXDirtLayerSubcomp.PreloadDirtState
// 0x0008 (0x0008 - 0x0000)
struct SHFXDirtLayerSubcomp_PreloadDirtState final
{
public:
	int32                                         DirtSetIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHFXDirtState                                InDirtState;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFXDirtLayerSubcomp_PreloadDirtState) == 0x000004, "Wrong alignment on SHFXDirtLayerSubcomp_PreloadDirtState");
static_assert(sizeof(SHFXDirtLayerSubcomp_PreloadDirtState) == 0x000008, "Wrong size on SHFXDirtLayerSubcomp_PreloadDirtState");
static_assert(offsetof(SHFXDirtLayerSubcomp_PreloadDirtState, DirtSetIndex) == 0x000000, "Member 'SHFXDirtLayerSubcomp_PreloadDirtState::DirtSetIndex' has a wrong offset!");
static_assert(offsetof(SHFXDirtLayerSubcomp_PreloadDirtState, InDirtState) == 0x000004, "Member 'SHFXDirtLayerSubcomp_PreloadDirtState::InDirtState' has a wrong offset!");
static_assert(offsetof(SHFXDirtLayerSubcomp_PreloadDirtState, ReturnValue) == 0x000005, "Member 'SHFXDirtLayerSubcomp_PreloadDirtState::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXDirtLayerSubcomp.SetDirtBlendLayerValue
// 0x0004 (0x0004 - 0x0000)
struct SHFXDirtLayerSubcomp_SetDirtBlendLayerValue final
{
public:
	float                                         InDirtValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXDirtLayerSubcomp_SetDirtBlendLayerValue) == 0x000004, "Wrong alignment on SHFXDirtLayerSubcomp_SetDirtBlendLayerValue");
static_assert(sizeof(SHFXDirtLayerSubcomp_SetDirtBlendLayerValue) == 0x000004, "Wrong size on SHFXDirtLayerSubcomp_SetDirtBlendLayerValue");
static_assert(offsetof(SHFXDirtLayerSubcomp_SetDirtBlendLayerValue, InDirtValue) == 0x000000, "Member 'SHFXDirtLayerSubcomp_SetDirtBlendLayerValue::InDirtValue' has a wrong offset!");

// Function SHProto.SHFXDirtLayerSubcomp.SetDirtState
// 0x0008 (0x0008 - 0x0000)
struct SHFXDirtLayerSubcomp_SetDirtState final
{
public:
	int32                                         DirtSetIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHFXDirtState                                InDirtState;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFXDirtLayerSubcomp_SetDirtState) == 0x000004, "Wrong alignment on SHFXDirtLayerSubcomp_SetDirtState");
static_assert(sizeof(SHFXDirtLayerSubcomp_SetDirtState) == 0x000008, "Wrong size on SHFXDirtLayerSubcomp_SetDirtState");
static_assert(offsetof(SHFXDirtLayerSubcomp_SetDirtState, DirtSetIndex) == 0x000000, "Member 'SHFXDirtLayerSubcomp_SetDirtState::DirtSetIndex' has a wrong offset!");
static_assert(offsetof(SHFXDirtLayerSubcomp_SetDirtState, InDirtState) == 0x000004, "Member 'SHFXDirtLayerSubcomp_SetDirtState::InDirtState' has a wrong offset!");
static_assert(offsetof(SHFXDirtLayerSubcomp_SetDirtState, ReturnValue) == 0x000005, "Member 'SHFXDirtLayerSubcomp_SetDirtState::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXDirtLayerSubcomp.CheckDynamicMaterialValid
// 0x0008 (0x0008 - 0x0000)
struct SHFXDirtLayerSubcomp_CheckDynamicMaterialValid final
{
public:
	int32                                         DirtSetIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFXDirtLayerSubcomp_CheckDynamicMaterialValid) == 0x000004, "Wrong alignment on SHFXDirtLayerSubcomp_CheckDynamicMaterialValid");
static_assert(sizeof(SHFXDirtLayerSubcomp_CheckDynamicMaterialValid) == 0x000008, "Wrong size on SHFXDirtLayerSubcomp_CheckDynamicMaterialValid");
static_assert(offsetof(SHFXDirtLayerSubcomp_CheckDynamicMaterialValid, DirtSetIndex) == 0x000000, "Member 'SHFXDirtLayerSubcomp_CheckDynamicMaterialValid::DirtSetIndex' has a wrong offset!");
static_assert(offsetof(SHFXDirtLayerSubcomp_CheckDynamicMaterialValid, ReturnValue) == 0x000004, "Member 'SHFXDirtLayerSubcomp_CheckDynamicMaterialValid::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXDirtLayerSubcomp.GetDirtBlendLayerValue
// 0x0004 (0x0004 - 0x0000)
struct SHFXDirtLayerSubcomp_GetDirtBlendLayerValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXDirtLayerSubcomp_GetDirtBlendLayerValue) == 0x000004, "Wrong alignment on SHFXDirtLayerSubcomp_GetDirtBlendLayerValue");
static_assert(sizeof(SHFXDirtLayerSubcomp_GetDirtBlendLayerValue) == 0x000004, "Wrong size on SHFXDirtLayerSubcomp_GetDirtBlendLayerValue");
static_assert(offsetof(SHFXDirtLayerSubcomp_GetDirtBlendLayerValue, ReturnValue) == 0x000000, "Member 'SHFXDirtLayerSubcomp_GetDirtBlendLayerValue::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXDirtLayerSubcomp.GetDirtSetCount
// 0x0004 (0x0004 - 0x0000)
struct SHFXDirtLayerSubcomp_GetDirtSetCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXDirtLayerSubcomp_GetDirtSetCount) == 0x000004, "Wrong alignment on SHFXDirtLayerSubcomp_GetDirtSetCount");
static_assert(sizeof(SHFXDirtLayerSubcomp_GetDirtSetCount) == 0x000004, "Wrong size on SHFXDirtLayerSubcomp_GetDirtSetCount");
static_assert(offsetof(SHFXDirtLayerSubcomp_GetDirtSetCount, ReturnValue) == 0x000000, "Member 'SHFXDirtLayerSubcomp_GetDirtSetCount::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXDirtLayerSubcomp.GetDirtState
// 0x0008 (0x0008 - 0x0000)
struct SHFXDirtLayerSubcomp_GetDirtState final
{
public:
	int32                                         DirtSetIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHFXDirtState                                ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFXDirtLayerSubcomp_GetDirtState) == 0x000004, "Wrong alignment on SHFXDirtLayerSubcomp_GetDirtState");
static_assert(sizeof(SHFXDirtLayerSubcomp_GetDirtState) == 0x000008, "Wrong size on SHFXDirtLayerSubcomp_GetDirtState");
static_assert(offsetof(SHFXDirtLayerSubcomp_GetDirtState, DirtSetIndex) == 0x000000, "Member 'SHFXDirtLayerSubcomp_GetDirtState::DirtSetIndex' has a wrong offset!");
static_assert(offsetof(SHFXDirtLayerSubcomp_GetDirtState, ReturnValue) == 0x000004, "Member 'SHFXDirtLayerSubcomp_GetDirtState::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXDirtLayerSubcomp.GetDirtStateMaterialName
// 0x0018 (0x0018 - 0x0000)
struct SHFXDirtLayerSubcomp_GetDirtStateMaterialName final
{
public:
	int32                                         DirtSetIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXDirtLayerSubcomp_GetDirtStateMaterialName) == 0x000008, "Wrong alignment on SHFXDirtLayerSubcomp_GetDirtStateMaterialName");
static_assert(sizeof(SHFXDirtLayerSubcomp_GetDirtStateMaterialName) == 0x000018, "Wrong size on SHFXDirtLayerSubcomp_GetDirtStateMaterialName");
static_assert(offsetof(SHFXDirtLayerSubcomp_GetDirtStateMaterialName, DirtSetIndex) == 0x000000, "Member 'SHFXDirtLayerSubcomp_GetDirtStateMaterialName::DirtSetIndex' has a wrong offset!");
static_assert(offsetof(SHFXDirtLayerSubcomp_GetDirtStateMaterialName, ReturnValue) == 0x000008, "Member 'SHFXDirtLayerSubcomp_GetDirtStateMaterialName::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXDirtLayerSubcomp.GetDirtStateMaterialStats
// 0x000C (0x000C - 0x0000)
struct SHFXDirtLayerSubcomp_GetDirtStateMaterialStats final
{
public:
	int32                                         DirtSetIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutOverridedTextureParameterCount;                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutOverridedScalarParameterCount;                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXDirtLayerSubcomp_GetDirtStateMaterialStats) == 0x000004, "Wrong alignment on SHFXDirtLayerSubcomp_GetDirtStateMaterialStats");
static_assert(sizeof(SHFXDirtLayerSubcomp_GetDirtStateMaterialStats) == 0x00000C, "Wrong size on SHFXDirtLayerSubcomp_GetDirtStateMaterialStats");
static_assert(offsetof(SHFXDirtLayerSubcomp_GetDirtStateMaterialStats, DirtSetIndex) == 0x000000, "Member 'SHFXDirtLayerSubcomp_GetDirtStateMaterialStats::DirtSetIndex' has a wrong offset!");
static_assert(offsetof(SHFXDirtLayerSubcomp_GetDirtStateMaterialStats, OutOverridedTextureParameterCount) == 0x000004, "Member 'SHFXDirtLayerSubcomp_GetDirtStateMaterialStats::OutOverridedTextureParameterCount' has a wrong offset!");
static_assert(offsetof(SHFXDirtLayerSubcomp_GetDirtStateMaterialStats, OutOverridedScalarParameterCount) == 0x000008, "Member 'SHFXDirtLayerSubcomp_GetDirtStateMaterialStats::OutOverridedScalarParameterCount' has a wrong offset!");

// Function SHProto.SHFXFrozenBreathSubcomp.SetFrozenBreathBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHFXFrozenBreathSubcomp_SetFrozenBreathBlocked final
{
public:
	bool                                          IsBlock;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXFrozenBreathSubcomp_SetFrozenBreathBlocked) == 0x000008, "Wrong alignment on SHFXFrozenBreathSubcomp_SetFrozenBreathBlocked");
static_assert(sizeof(SHFXFrozenBreathSubcomp_SetFrozenBreathBlocked) == 0x000010, "Wrong size on SHFXFrozenBreathSubcomp_SetFrozenBreathBlocked");
static_assert(offsetof(SHFXFrozenBreathSubcomp_SetFrozenBreathBlocked, IsBlock) == 0x000000, "Member 'SHFXFrozenBreathSubcomp_SetFrozenBreathBlocked::IsBlock' has a wrong offset!");
static_assert(offsetof(SHFXFrozenBreathSubcomp_SetFrozenBreathBlocked, Object) == 0x000008, "Member 'SHFXFrozenBreathSubcomp_SetFrozenBreathBlocked::Object' has a wrong offset!");

// Function SHProto.SHFXFrozenBreathSubcomp.GetFreezingVolumesCount
// 0x0004 (0x0004 - 0x0000)
struct SHFXFrozenBreathSubcomp_GetFreezingVolumesCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXFrozenBreathSubcomp_GetFreezingVolumesCount) == 0x000004, "Wrong alignment on SHFXFrozenBreathSubcomp_GetFreezingVolumesCount");
static_assert(sizeof(SHFXFrozenBreathSubcomp_GetFreezingVolumesCount) == 0x000004, "Wrong size on SHFXFrozenBreathSubcomp_GetFreezingVolumesCount");
static_assert(offsetof(SHFXFrozenBreathSubcomp_GetFreezingVolumesCount, ReturnValue) == 0x000000, "Member 'SHFXFrozenBreathSubcomp_GetFreezingVolumesCount::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXFrozenBreathSubcomp.IsFrozenBreathBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHFXFrozenBreathSubcomp_IsFrozenBreathBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXFrozenBreathSubcomp_IsFrozenBreathBlocked) == 0x000001, "Wrong alignment on SHFXFrozenBreathSubcomp_IsFrozenBreathBlocked");
static_assert(sizeof(SHFXFrozenBreathSubcomp_IsFrozenBreathBlocked) == 0x000001, "Wrong size on SHFXFrozenBreathSubcomp_IsFrozenBreathBlocked");
static_assert(offsetof(SHFXFrozenBreathSubcomp_IsFrozenBreathBlocked, ReturnValue) == 0x000000, "Member 'SHFXFrozenBreathSubcomp_IsFrozenBreathBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXFrozenBreathSubcomp.IsFrozenBreathBlockedBy
// 0x0010 (0x0010 - 0x0000)
struct SHFXFrozenBreathSubcomp_IsFrozenBreathBlockedBy final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFXFrozenBreathSubcomp_IsFrozenBreathBlockedBy) == 0x000008, "Wrong alignment on SHFXFrozenBreathSubcomp_IsFrozenBreathBlockedBy");
static_assert(sizeof(SHFXFrozenBreathSubcomp_IsFrozenBreathBlockedBy) == 0x000010, "Wrong size on SHFXFrozenBreathSubcomp_IsFrozenBreathBlockedBy");
static_assert(offsetof(SHFXFrozenBreathSubcomp_IsFrozenBreathBlockedBy, Object) == 0x000000, "Member 'SHFXFrozenBreathSubcomp_IsFrozenBreathBlockedBy::Object' has a wrong offset!");
static_assert(offsetof(SHFXFrozenBreathSubcomp_IsFrozenBreathBlockedBy, ReturnValue) == 0x000008, "Member 'SHFXFrozenBreathSubcomp_IsFrozenBreathBlockedBy::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXFrozenBreathSubcomp.IsInFreezingZone
// 0x0001 (0x0001 - 0x0000)
struct SHFXFrozenBreathSubcomp_IsInFreezingZone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXFrozenBreathSubcomp_IsInFreezingZone) == 0x000001, "Wrong alignment on SHFXFrozenBreathSubcomp_IsInFreezingZone");
static_assert(sizeof(SHFXFrozenBreathSubcomp_IsInFreezingZone) == 0x000001, "Wrong size on SHFXFrozenBreathSubcomp_IsInFreezingZone");
static_assert(offsetof(SHFXFrozenBreathSubcomp_IsInFreezingZone, ReturnValue) == 0x000000, "Member 'SHFXFrozenBreathSubcomp_IsInFreezingZone::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXPenetrateSplashSubcomp.ProcessOwnerDamage
// 0x0068 (0x0068 - 0x0000)
struct SHFXPenetrateSplashSubcomp_ProcessOwnerDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0030(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ShotFromDirection;                                 // 0x0040(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UDamageType*                      DamageType;                                        // 0x0058(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0060(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXPenetrateSplashSubcomp_ProcessOwnerDamage) == 0x000008, "Wrong alignment on SHFXPenetrateSplashSubcomp_ProcessOwnerDamage");
static_assert(sizeof(SHFXPenetrateSplashSubcomp_ProcessOwnerDamage) == 0x000068, "Wrong size on SHFXPenetrateSplashSubcomp_ProcessOwnerDamage");
static_assert(offsetof(SHFXPenetrateSplashSubcomp_ProcessOwnerDamage, DamagedActor) == 0x000000, "Member 'SHFXPenetrateSplashSubcomp_ProcessOwnerDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(SHFXPenetrateSplashSubcomp_ProcessOwnerDamage, Damage) == 0x000008, "Member 'SHFXPenetrateSplashSubcomp_ProcessOwnerDamage::Damage' has a wrong offset!");
static_assert(offsetof(SHFXPenetrateSplashSubcomp_ProcessOwnerDamage, InstigatedBy) == 0x000010, "Member 'SHFXPenetrateSplashSubcomp_ProcessOwnerDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(SHFXPenetrateSplashSubcomp_ProcessOwnerDamage, HitLocation) == 0x000018, "Member 'SHFXPenetrateSplashSubcomp_ProcessOwnerDamage::HitLocation' has a wrong offset!");
static_assert(offsetof(SHFXPenetrateSplashSubcomp_ProcessOwnerDamage, HitComponent) == 0x000030, "Member 'SHFXPenetrateSplashSubcomp_ProcessOwnerDamage::HitComponent' has a wrong offset!");
static_assert(offsetof(SHFXPenetrateSplashSubcomp_ProcessOwnerDamage, BoneName) == 0x000038, "Member 'SHFXPenetrateSplashSubcomp_ProcessOwnerDamage::BoneName' has a wrong offset!");
static_assert(offsetof(SHFXPenetrateSplashSubcomp_ProcessOwnerDamage, ShotFromDirection) == 0x000040, "Member 'SHFXPenetrateSplashSubcomp_ProcessOwnerDamage::ShotFromDirection' has a wrong offset!");
static_assert(offsetof(SHFXPenetrateSplashSubcomp_ProcessOwnerDamage, DamageType) == 0x000058, "Member 'SHFXPenetrateSplashSubcomp_ProcessOwnerDamage::DamageType' has a wrong offset!");
static_assert(offsetof(SHFXPenetrateSplashSubcomp_ProcessOwnerDamage, DamageCauser) == 0x000060, "Member 'SHFXPenetrateSplashSubcomp_ProcessOwnerDamage::DamageCauser' has a wrong offset!");

// Function SHProto.SHFXRaingWettingSubcomp.GetSpawnedRainDrippingNiagaraComponent
// 0x0008 (0x0008 - 0x0000)
struct SHFXRaingWettingSubcomp_GetSpawnedRainDrippingNiagaraComponent final
{
public:
	class UNiagaraComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXRaingWettingSubcomp_GetSpawnedRainDrippingNiagaraComponent) == 0x000008, "Wrong alignment on SHFXRaingWettingSubcomp_GetSpawnedRainDrippingNiagaraComponent");
static_assert(sizeof(SHFXRaingWettingSubcomp_GetSpawnedRainDrippingNiagaraComponent) == 0x000008, "Wrong size on SHFXRaingWettingSubcomp_GetSpawnedRainDrippingNiagaraComponent");
static_assert(offsetof(SHFXRaingWettingSubcomp_GetSpawnedRainDrippingNiagaraComponent, ReturnValue) == 0x000000, "Member 'SHFXRaingWettingSubcomp_GetSpawnedRainDrippingNiagaraComponent::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXRaingWettingSubcomp.IsRainDrippingActive
// 0x0001 (0x0001 - 0x0000)
struct SHFXRaingWettingSubcomp_IsRainDrippingActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXRaingWettingSubcomp_IsRainDrippingActive) == 0x000001, "Wrong alignment on SHFXRaingWettingSubcomp_IsRainDrippingActive");
static_assert(sizeof(SHFXRaingWettingSubcomp_IsRainDrippingActive) == 0x000001, "Wrong size on SHFXRaingWettingSubcomp_IsRainDrippingActive");
static_assert(offsetof(SHFXRaingWettingSubcomp_IsRainDrippingActive, ReturnValue) == 0x000000, "Member 'SHFXRaingWettingSubcomp_IsRainDrippingActive::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXRaingWettingSubcomp.SetRainDrippingBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHFXRaingWettingSubcomp_SetRainDrippingBlocked final
{
public:
	bool                                          IsBlock;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXRaingWettingSubcomp_SetRainDrippingBlocked) == 0x000008, "Wrong alignment on SHFXRaingWettingSubcomp_SetRainDrippingBlocked");
static_assert(sizeof(SHFXRaingWettingSubcomp_SetRainDrippingBlocked) == 0x000010, "Wrong size on SHFXRaingWettingSubcomp_SetRainDrippingBlocked");
static_assert(offsetof(SHFXRaingWettingSubcomp_SetRainDrippingBlocked, IsBlock) == 0x000000, "Member 'SHFXRaingWettingSubcomp_SetRainDrippingBlocked::IsBlock' has a wrong offset!");
static_assert(offsetof(SHFXRaingWettingSubcomp_SetRainDrippingBlocked, Object) == 0x000008, "Member 'SHFXRaingWettingSubcomp_SetRainDrippingBlocked::Object' has a wrong offset!");

// Function SHProto.SHFXRaingWettingSubcomp.SetRainDripSpawnRate
// 0x0004 (0x0004 - 0x0000)
struct SHFXRaingWettingSubcomp_SetRainDripSpawnRate final
{
public:
	float                                         InSpawnRate;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXRaingWettingSubcomp_SetRainDripSpawnRate) == 0x000004, "Wrong alignment on SHFXRaingWettingSubcomp_SetRainDripSpawnRate");
static_assert(sizeof(SHFXRaingWettingSubcomp_SetRainDripSpawnRate) == 0x000004, "Wrong size on SHFXRaingWettingSubcomp_SetRainDripSpawnRate");
static_assert(offsetof(SHFXRaingWettingSubcomp_SetRainDripSpawnRate, InSpawnRate) == 0x000000, "Member 'SHFXRaingWettingSubcomp_SetRainDripSpawnRate::InSpawnRate' has a wrong offset!");

// Function SHProto.SHFXRaingWettingSubcomp.SetRainingBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHFXRaingWettingSubcomp_SetRainingBlocked final
{
public:
	bool                                          IsBlock;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXRaingWettingSubcomp_SetRainingBlocked) == 0x000008, "Wrong alignment on SHFXRaingWettingSubcomp_SetRainingBlocked");
static_assert(sizeof(SHFXRaingWettingSubcomp_SetRainingBlocked) == 0x000010, "Wrong size on SHFXRaingWettingSubcomp_SetRainingBlocked");
static_assert(offsetof(SHFXRaingWettingSubcomp_SetRainingBlocked, IsBlock) == 0x000000, "Member 'SHFXRaingWettingSubcomp_SetRainingBlocked::IsBlock' has a wrong offset!");
static_assert(offsetof(SHFXRaingWettingSubcomp_SetRainingBlocked, Object) == 0x000008, "Member 'SHFXRaingWettingSubcomp_SetRainingBlocked::Object' has a wrong offset!");

// Function SHProto.SHFXRaingWettingSubcomp.SetRainSplashesBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHFXRaingWettingSubcomp_SetRainSplashesBlocked final
{
public:
	bool                                          IsBlock;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXRaingWettingSubcomp_SetRainSplashesBlocked) == 0x000008, "Wrong alignment on SHFXRaingWettingSubcomp_SetRainSplashesBlocked");
static_assert(sizeof(SHFXRaingWettingSubcomp_SetRainSplashesBlocked) == 0x000010, "Wrong size on SHFXRaingWettingSubcomp_SetRainSplashesBlocked");
static_assert(offsetof(SHFXRaingWettingSubcomp_SetRainSplashesBlocked, IsBlock) == 0x000000, "Member 'SHFXRaingWettingSubcomp_SetRainSplashesBlocked::IsBlock' has a wrong offset!");
static_assert(offsetof(SHFXRaingWettingSubcomp_SetRainSplashesBlocked, Object) == 0x000008, "Member 'SHFXRaingWettingSubcomp_SetRainSplashesBlocked::Object' has a wrong offset!");

// Function SHProto.SHFXRaingWettingSubcomp.SetWadingAltitudeRelative
// 0x0004 (0x0004 - 0x0000)
struct SHFXRaingWettingSubcomp_SetWadingAltitudeRelative final
{
public:
	float                                         WadingHeight;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXRaingWettingSubcomp_SetWadingAltitudeRelative) == 0x000004, "Wrong alignment on SHFXRaingWettingSubcomp_SetWadingAltitudeRelative");
static_assert(sizeof(SHFXRaingWettingSubcomp_SetWadingAltitudeRelative) == 0x000004, "Wrong size on SHFXRaingWettingSubcomp_SetWadingAltitudeRelative");
static_assert(offsetof(SHFXRaingWettingSubcomp_SetWadingAltitudeRelative, WadingHeight) == 0x000000, "Member 'SHFXRaingWettingSubcomp_SetWadingAltitudeRelative::WadingHeight' has a wrong offset!");

// Function SHProto.SHFXRaingWettingSubcomp.SetWadingAltitudeWorld
// 0x0004 (0x0004 - 0x0000)
struct SHFXRaingWettingSubcomp_SetWadingAltitudeWorld final
{
public:
	float                                         WadingHeight;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXRaingWettingSubcomp_SetWadingAltitudeWorld) == 0x000004, "Wrong alignment on SHFXRaingWettingSubcomp_SetWadingAltitudeWorld");
static_assert(sizeof(SHFXRaingWettingSubcomp_SetWadingAltitudeWorld) == 0x000004, "Wrong size on SHFXRaingWettingSubcomp_SetWadingAltitudeWorld");
static_assert(offsetof(SHFXRaingWettingSubcomp_SetWadingAltitudeWorld, WadingHeight) == 0x000000, "Member 'SHFXRaingWettingSubcomp_SetWadingAltitudeWorld::WadingHeight' has a wrong offset!");

// Function SHProto.SHFXRaingWettingSubcomp.SetWetDryFactor
// 0x0004 (0x0004 - 0x0000)
struct SHFXRaingWettingSubcomp_SetWetDryFactor final
{
public:
	float                                         InWetFactor;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXRaingWettingSubcomp_SetWetDryFactor) == 0x000004, "Wrong alignment on SHFXRaingWettingSubcomp_SetWetDryFactor");
static_assert(sizeof(SHFXRaingWettingSubcomp_SetWetDryFactor) == 0x000004, "Wrong size on SHFXRaingWettingSubcomp_SetWetDryFactor");
static_assert(offsetof(SHFXRaingWettingSubcomp_SetWetDryFactor, InWetFactor) == 0x000000, "Member 'SHFXRaingWettingSubcomp_SetWetDryFactor::InWetFactor' has a wrong offset!");

// DelegateFunction SHProto.SHFXRaingWettingSubcomp.SHRainWettingFXEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHFXRaingWettingSubcomp_SHRainWettingFXEvent__DelegateSignature final
{
public:
	class USHFXRaingWettingSubcomp*               Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXRaingWettingSubcomp_SHRainWettingFXEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHFXRaingWettingSubcomp_SHRainWettingFXEvent__DelegateSignature");
static_assert(sizeof(SHFXRaingWettingSubcomp_SHRainWettingFXEvent__DelegateSignature) == 0x000008, "Wrong size on SHFXRaingWettingSubcomp_SHRainWettingFXEvent__DelegateSignature");
static_assert(offsetof(SHFXRaingWettingSubcomp_SHRainWettingFXEvent__DelegateSignature, Component) == 0x000000, "Member 'SHFXRaingWettingSubcomp_SHRainWettingFXEvent__DelegateSignature::Component' has a wrong offset!");

// Function SHProto.SHFXRaingWettingSubcomp.GetCurvesEvaluateTimer
// 0x0004 (0x0004 - 0x0000)
struct SHFXRaingWettingSubcomp_GetCurvesEvaluateTimer final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXRaingWettingSubcomp_GetCurvesEvaluateTimer) == 0x000004, "Wrong alignment on SHFXRaingWettingSubcomp_GetCurvesEvaluateTimer");
static_assert(sizeof(SHFXRaingWettingSubcomp_GetCurvesEvaluateTimer) == 0x000004, "Wrong size on SHFXRaingWettingSubcomp_GetCurvesEvaluateTimer");
static_assert(offsetof(SHFXRaingWettingSubcomp_GetCurvesEvaluateTimer, ReturnValue) == 0x000000, "Member 'SHFXRaingWettingSubcomp_GetCurvesEvaluateTimer::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXRaingWettingSubcomp.GetDripIntensityValue
// 0x0004 (0x0004 - 0x0000)
struct SHFXRaingWettingSubcomp_GetDripIntensityValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXRaingWettingSubcomp_GetDripIntensityValue) == 0x000004, "Wrong alignment on SHFXRaingWettingSubcomp_GetDripIntensityValue");
static_assert(sizeof(SHFXRaingWettingSubcomp_GetDripIntensityValue) == 0x000004, "Wrong size on SHFXRaingWettingSubcomp_GetDripIntensityValue");
static_assert(offsetof(SHFXRaingWettingSubcomp_GetDripIntensityValue, ReturnValue) == 0x000000, "Member 'SHFXRaingWettingSubcomp_GetDripIntensityValue::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXRaingWettingSubcomp.GetWadingAltitude
// 0x0004 (0x0004 - 0x0000)
struct SHFXRaingWettingSubcomp_GetWadingAltitude final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXRaingWettingSubcomp_GetWadingAltitude) == 0x000004, "Wrong alignment on SHFXRaingWettingSubcomp_GetWadingAltitude");
static_assert(sizeof(SHFXRaingWettingSubcomp_GetWadingAltitude) == 0x000004, "Wrong size on SHFXRaingWettingSubcomp_GetWadingAltitude");
static_assert(offsetof(SHFXRaingWettingSubcomp_GetWadingAltitude, ReturnValue) == 0x000000, "Member 'SHFXRaingWettingSubcomp_GetWadingAltitude::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXRaingWettingSubcomp.GetWetDryFactor
// 0x0004 (0x0004 - 0x0000)
struct SHFXRaingWettingSubcomp_GetWetDryFactor final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXRaingWettingSubcomp_GetWetDryFactor) == 0x000004, "Wrong alignment on SHFXRaingWettingSubcomp_GetWetDryFactor");
static_assert(sizeof(SHFXRaingWettingSubcomp_GetWetDryFactor) == 0x000004, "Wrong size on SHFXRaingWettingSubcomp_GetWetDryFactor");
static_assert(offsetof(SHFXRaingWettingSubcomp_GetWetDryFactor, ReturnValue) == 0x000000, "Member 'SHFXRaingWettingSubcomp_GetWetDryFactor::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXRaingWettingSubcomp.IsInRainZone
// 0x0001 (0x0001 - 0x0000)
struct SHFXRaingWettingSubcomp_IsInRainZone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXRaingWettingSubcomp_IsInRainZone) == 0x000001, "Wrong alignment on SHFXRaingWettingSubcomp_IsInRainZone");
static_assert(sizeof(SHFXRaingWettingSubcomp_IsInRainZone) == 0x000001, "Wrong size on SHFXRaingWettingSubcomp_IsInRainZone");
static_assert(offsetof(SHFXRaingWettingSubcomp_IsInRainZone, ReturnValue) == 0x000000, "Member 'SHFXRaingWettingSubcomp_IsInRainZone::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXRaingWettingSubcomp.IsRainDrippingBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHFXRaingWettingSubcomp_IsRainDrippingBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXRaingWettingSubcomp_IsRainDrippingBlocked) == 0x000001, "Wrong alignment on SHFXRaingWettingSubcomp_IsRainDrippingBlocked");
static_assert(sizeof(SHFXRaingWettingSubcomp_IsRainDrippingBlocked) == 0x000001, "Wrong size on SHFXRaingWettingSubcomp_IsRainDrippingBlocked");
static_assert(offsetof(SHFXRaingWettingSubcomp_IsRainDrippingBlocked, ReturnValue) == 0x000000, "Member 'SHFXRaingWettingSubcomp_IsRainDrippingBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXRaingWettingSubcomp.IsRainDrippingBlockedBy
// 0x0010 (0x0010 - 0x0000)
struct SHFXRaingWettingSubcomp_IsRainDrippingBlockedBy final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFXRaingWettingSubcomp_IsRainDrippingBlockedBy) == 0x000008, "Wrong alignment on SHFXRaingWettingSubcomp_IsRainDrippingBlockedBy");
static_assert(sizeof(SHFXRaingWettingSubcomp_IsRainDrippingBlockedBy) == 0x000010, "Wrong size on SHFXRaingWettingSubcomp_IsRainDrippingBlockedBy");
static_assert(offsetof(SHFXRaingWettingSubcomp_IsRainDrippingBlockedBy, Object) == 0x000000, "Member 'SHFXRaingWettingSubcomp_IsRainDrippingBlockedBy::Object' has a wrong offset!");
static_assert(offsetof(SHFXRaingWettingSubcomp_IsRainDrippingBlockedBy, ReturnValue) == 0x000008, "Member 'SHFXRaingWettingSubcomp_IsRainDrippingBlockedBy::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXRaingWettingSubcomp.IsRainingBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHFXRaingWettingSubcomp_IsRainingBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXRaingWettingSubcomp_IsRainingBlocked) == 0x000001, "Wrong alignment on SHFXRaingWettingSubcomp_IsRainingBlocked");
static_assert(sizeof(SHFXRaingWettingSubcomp_IsRainingBlocked) == 0x000001, "Wrong size on SHFXRaingWettingSubcomp_IsRainingBlocked");
static_assert(offsetof(SHFXRaingWettingSubcomp_IsRainingBlocked, ReturnValue) == 0x000000, "Member 'SHFXRaingWettingSubcomp_IsRainingBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXRaingWettingSubcomp.IsRainingBlockedBy
// 0x0010 (0x0010 - 0x0000)
struct SHFXRaingWettingSubcomp_IsRainingBlockedBy final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFXRaingWettingSubcomp_IsRainingBlockedBy) == 0x000008, "Wrong alignment on SHFXRaingWettingSubcomp_IsRainingBlockedBy");
static_assert(sizeof(SHFXRaingWettingSubcomp_IsRainingBlockedBy) == 0x000010, "Wrong size on SHFXRaingWettingSubcomp_IsRainingBlockedBy");
static_assert(offsetof(SHFXRaingWettingSubcomp_IsRainingBlockedBy, Object) == 0x000000, "Member 'SHFXRaingWettingSubcomp_IsRainingBlockedBy::Object' has a wrong offset!");
static_assert(offsetof(SHFXRaingWettingSubcomp_IsRainingBlockedBy, ReturnValue) == 0x000008, "Member 'SHFXRaingWettingSubcomp_IsRainingBlockedBy::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXRaingWettingSubcomp.IsRainSplashesBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHFXRaingWettingSubcomp_IsRainSplashesBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXRaingWettingSubcomp_IsRainSplashesBlocked) == 0x000001, "Wrong alignment on SHFXRaingWettingSubcomp_IsRainSplashesBlocked");
static_assert(sizeof(SHFXRaingWettingSubcomp_IsRainSplashesBlocked) == 0x000001, "Wrong size on SHFXRaingWettingSubcomp_IsRainSplashesBlocked");
static_assert(offsetof(SHFXRaingWettingSubcomp_IsRainSplashesBlocked, ReturnValue) == 0x000000, "Member 'SHFXRaingWettingSubcomp_IsRainSplashesBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXRaingWettingSubcomp.IsRainSplashesBlockedBy
// 0x0010 (0x0010 - 0x0000)
struct SHFXRaingWettingSubcomp_IsRainSplashesBlockedBy final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHFXRaingWettingSubcomp_IsRainSplashesBlockedBy) == 0x000008, "Wrong alignment on SHFXRaingWettingSubcomp_IsRainSplashesBlockedBy");
static_assert(sizeof(SHFXRaingWettingSubcomp_IsRainSplashesBlockedBy) == 0x000010, "Wrong size on SHFXRaingWettingSubcomp_IsRainSplashesBlockedBy");
static_assert(offsetof(SHFXRaingWettingSubcomp_IsRainSplashesBlockedBy, Object) == 0x000000, "Member 'SHFXRaingWettingSubcomp_IsRainSplashesBlockedBy::Object' has a wrong offset!");
static_assert(offsetof(SHFXRaingWettingSubcomp_IsRainSplashesBlockedBy, ReturnValue) == 0x000008, "Member 'SHFXRaingWettingSubcomp_IsRainSplashesBlockedBy::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXSwarmSubcomp.GetCurrentZoneCount
// 0x0004 (0x0004 - 0x0000)
struct SHFXSwarmSubcomp_GetCurrentZoneCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXSwarmSubcomp_GetCurrentZoneCount) == 0x000004, "Wrong alignment on SHFXSwarmSubcomp_GetCurrentZoneCount");
static_assert(sizeof(SHFXSwarmSubcomp_GetCurrentZoneCount) == 0x000004, "Wrong size on SHFXSwarmSubcomp_GetCurrentZoneCount");
static_assert(offsetof(SHFXSwarmSubcomp_GetCurrentZoneCount, ReturnValue) == 0x000000, "Member 'SHFXSwarmSubcomp_GetCurrentZoneCount::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXSwarmSubcomp.GetRegisteredSwarmVolumeCount
// 0x0004 (0x0004 - 0x0000)
struct SHFXSwarmSubcomp_GetRegisteredSwarmVolumeCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXSwarmSubcomp_GetRegisteredSwarmVolumeCount) == 0x000004, "Wrong alignment on SHFXSwarmSubcomp_GetRegisteredSwarmVolumeCount");
static_assert(sizeof(SHFXSwarmSubcomp_GetRegisteredSwarmVolumeCount) == 0x000004, "Wrong size on SHFXSwarmSubcomp_GetRegisteredSwarmVolumeCount");
static_assert(offsetof(SHFXSwarmSubcomp_GetRegisteredSwarmVolumeCount, ReturnValue) == 0x000000, "Member 'SHFXSwarmSubcomp_GetRegisteredSwarmVolumeCount::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXSwarmSubcomp.GetRegisteredSwarmVolumes
// 0x0010 (0x0010 - 0x0000)
struct SHFXSwarmSubcomp_GetRegisteredSwarmVolumes final
{
public:
	TArray<class ASHSwarmVolume*>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXSwarmSubcomp_GetRegisteredSwarmVolumes) == 0x000008, "Wrong alignment on SHFXSwarmSubcomp_GetRegisteredSwarmVolumes");
static_assert(sizeof(SHFXSwarmSubcomp_GetRegisteredSwarmVolumes) == 0x000010, "Wrong size on SHFXSwarmSubcomp_GetRegisteredSwarmVolumes");
static_assert(offsetof(SHFXSwarmSubcomp_GetRegisteredSwarmVolumes, ReturnValue) == 0x000000, "Member 'SHFXSwarmSubcomp_GetRegisteredSwarmVolumes::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXSwarmSubcomp.IsInSwarmZone
// 0x0001 (0x0001 - 0x0000)
struct SHFXSwarmSubcomp_IsInSwarmZone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXSwarmSubcomp_IsInSwarmZone) == 0x000001, "Wrong alignment on SHFXSwarmSubcomp_IsInSwarmZone");
static_assert(sizeof(SHFXSwarmSubcomp_IsInSwarmZone) == 0x000001, "Wrong size on SHFXSwarmSubcomp_IsInSwarmZone");
static_assert(offsetof(SHFXSwarmSubcomp_IsInSwarmZone, ReturnValue) == 0x000000, "Member 'SHFXSwarmSubcomp_IsInSwarmZone::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXVisualHPSubcomp.ProcessHealthChangedAsAICharacter
// 0x0004 (0x0004 - 0x0000)
struct SHFXVisualHPSubcomp_ProcessHealthChangedAsAICharacter final
{
public:
	int32                                         PrevHealth;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXVisualHPSubcomp_ProcessHealthChangedAsAICharacter) == 0x000004, "Wrong alignment on SHFXVisualHPSubcomp_ProcessHealthChangedAsAICharacter");
static_assert(sizeof(SHFXVisualHPSubcomp_ProcessHealthChangedAsAICharacter) == 0x000004, "Wrong size on SHFXVisualHPSubcomp_ProcessHealthChangedAsAICharacter");
static_assert(offsetof(SHFXVisualHPSubcomp_ProcessHealthChangedAsAICharacter, PrevHealth) == 0x000000, "Member 'SHFXVisualHPSubcomp_ProcessHealthChangedAsAICharacter::PrevHealth' has a wrong offset!");

// Function SHProto.SHFXVisualHPSubcomp.ProcessHealthChangedAsPlayer
// 0x0008 (0x0008 - 0x0000)
struct SHFXVisualHPSubcomp_ProcessHealthChangedAsPlayer final
{
public:
	class USHCharacterPlayHealthComponent*        InHealthComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXVisualHPSubcomp_ProcessHealthChangedAsPlayer) == 0x000008, "Wrong alignment on SHFXVisualHPSubcomp_ProcessHealthChangedAsPlayer");
static_assert(sizeof(SHFXVisualHPSubcomp_ProcessHealthChangedAsPlayer) == 0x000008, "Wrong size on SHFXVisualHPSubcomp_ProcessHealthChangedAsPlayer");
static_assert(offsetof(SHFXVisualHPSubcomp_ProcessHealthChangedAsPlayer, InHealthComponent) == 0x000000, "Member 'SHFXVisualHPSubcomp_ProcessHealthChangedAsPlayer::InHealthComponent' has a wrong offset!");

// Function SHProto.SHFXVisualHPSubcomp.GetCurrentCurveEvaluationValue
// 0x0004 (0x0004 - 0x0000)
struct SHFXVisualHPSubcomp_GetCurrentCurveEvaluationValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXVisualHPSubcomp_GetCurrentCurveEvaluationValue) == 0x000004, "Wrong alignment on SHFXVisualHPSubcomp_GetCurrentCurveEvaluationValue");
static_assert(sizeof(SHFXVisualHPSubcomp_GetCurrentCurveEvaluationValue) == 0x000004, "Wrong size on SHFXVisualHPSubcomp_GetCurrentCurveEvaluationValue");
static_assert(offsetof(SHFXVisualHPSubcomp_GetCurrentCurveEvaluationValue, ReturnValue) == 0x000000, "Member 'SHFXVisualHPSubcomp_GetCurrentCurveEvaluationValue::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXVisualHPSubcomp.GetCurrentErodeParameterValue
// 0x0004 (0x0004 - 0x0000)
struct SHFXVisualHPSubcomp_GetCurrentErodeParameterValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXVisualHPSubcomp_GetCurrentErodeParameterValue) == 0x000004, "Wrong alignment on SHFXVisualHPSubcomp_GetCurrentErodeParameterValue");
static_assert(sizeof(SHFXVisualHPSubcomp_GetCurrentErodeParameterValue) == 0x000004, "Wrong size on SHFXVisualHPSubcomp_GetCurrentErodeParameterValue");
static_assert(offsetof(SHFXVisualHPSubcomp_GetCurrentErodeParameterValue, ReturnValue) == 0x000000, "Member 'SHFXVisualHPSubcomp_GetCurrentErodeParameterValue::ReturnValue' has a wrong offset!");

// Function SHProto.SHFXVisualHPSubcomp.GetOwnerHealthPercentage
// 0x0004 (0x0004 - 0x0000)
struct SHFXVisualHPSubcomp_GetOwnerHealthPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHFXVisualHPSubcomp_GetOwnerHealthPercentage) == 0x000004, "Wrong alignment on SHFXVisualHPSubcomp_GetOwnerHealthPercentage");
static_assert(sizeof(SHFXVisualHPSubcomp_GetOwnerHealthPercentage) == 0x000004, "Wrong size on SHFXVisualHPSubcomp_GetOwnerHealthPercentage");
static_assert(offsetof(SHFXVisualHPSubcomp_GetOwnerHealthPercentage, ReturnValue) == 0x000000, "Member 'SHFXVisualHPSubcomp_GetOwnerHealthPercentage::ReturnValue' has a wrong offset!");

// Function SHProto.SHGameInstance.BeginCustomLevel
// 0x0008 (0x0008 - 0x0000)
struct SHGameInstance_BeginCustomLevel final
{
public:
	struct FStreamableLevelHandle                 LevelHandle;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameInstance_BeginCustomLevel) == 0x000004, "Wrong alignment on SHGameInstance_BeginCustomLevel");
static_assert(sizeof(SHGameInstance_BeginCustomLevel) == 0x000008, "Wrong size on SHGameInstance_BeginCustomLevel");
static_assert(offsetof(SHGameInstance_BeginCustomLevel, LevelHandle) == 0x000000, "Member 'SHGameInstance_BeginCustomLevel::LevelHandle' has a wrong offset!");

// DelegateFunction SHProto.SHGameInstance.OnRestoreWorldDependentSettings__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHGameInstance_OnRestoreWorldDependentSettings__DelegateSignature final
{
public:
	class USHGameInstance*                        OutGameInstance;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameInstance_OnRestoreWorldDependentSettings__DelegateSignature) == 0x000008, "Wrong alignment on SHGameInstance_OnRestoreWorldDependentSettings__DelegateSignature");
static_assert(sizeof(SHGameInstance_OnRestoreWorldDependentSettings__DelegateSignature) == 0x000008, "Wrong size on SHGameInstance_OnRestoreWorldDependentSettings__DelegateSignature");
static_assert(offsetof(SHGameInstance_OnRestoreWorldDependentSettings__DelegateSignature, OutGameInstance) == 0x000000, "Member 'SHGameInstance_OnRestoreWorldDependentSettings__DelegateSignature::OutGameInstance' has a wrong offset!");

// Function SHProto.SHGameplayEndGameWidget.ActiveWidgetChanged
// 0x0010 (0x0010 - 0x0000)
struct SHGameplayEndGameWidget_ActiveWidgetChanged final
{
public:
	class UWidget*                                ActiveWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActiveWidgetIndex;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHGameplayEndGameWidget_ActiveWidgetChanged) == 0x000008, "Wrong alignment on SHGameplayEndGameWidget_ActiveWidgetChanged");
static_assert(sizeof(SHGameplayEndGameWidget_ActiveWidgetChanged) == 0x000010, "Wrong size on SHGameplayEndGameWidget_ActiveWidgetChanged");
static_assert(offsetof(SHGameplayEndGameWidget_ActiveWidgetChanged, ActiveWidget) == 0x000000, "Member 'SHGameplayEndGameWidget_ActiveWidgetChanged::ActiveWidget' has a wrong offset!");
static_assert(offsetof(SHGameplayEndGameWidget_ActiveWidgetChanged, ActiveWidgetIndex) == 0x000008, "Member 'SHGameplayEndGameWidget_ActiveWidgetChanged::ActiveWidgetIndex' has a wrong offset!");

// Function SHProto.SHGameplayFadeWidget.GetCurrentColor
// 0x0010 (0x0010 - 0x0000)
struct SHGameplayFadeWidget_GetCurrentColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayFadeWidget_GetCurrentColor) == 0x000004, "Wrong alignment on SHGameplayFadeWidget_GetCurrentColor");
static_assert(sizeof(SHGameplayFadeWidget_GetCurrentColor) == 0x000010, "Wrong size on SHGameplayFadeWidget_GetCurrentColor");
static_assert(offsetof(SHGameplayFadeWidget_GetCurrentColor, ReturnValue) == 0x000000, "Member 'SHGameplayFadeWidget_GetCurrentColor::ReturnValue' has a wrong offset!");

// Function SHProto.SHGameplayMapObjectComponent.SendDynamicObjectDataToGameplayMap
// 0x0020 (0x0020 - 0x0000)
struct SHGameplayMapObjectComponent_SendDynamicObjectDataToGameplayMap final
{
public:
	struct FVector                                WorldLoc;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DataValue;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHGameplayMapObjectComponent_SendDynamicObjectDataToGameplayMap) == 0x000008, "Wrong alignment on SHGameplayMapObjectComponent_SendDynamicObjectDataToGameplayMap");
static_assert(sizeof(SHGameplayMapObjectComponent_SendDynamicObjectDataToGameplayMap) == 0x000020, "Wrong size on SHGameplayMapObjectComponent_SendDynamicObjectDataToGameplayMap");
static_assert(offsetof(SHGameplayMapObjectComponent_SendDynamicObjectDataToGameplayMap, WorldLoc) == 0x000000, "Member 'SHGameplayMapObjectComponent_SendDynamicObjectDataToGameplayMap::WorldLoc' has a wrong offset!");
static_assert(offsetof(SHGameplayMapObjectComponent_SendDynamicObjectDataToGameplayMap, DataValue) == 0x000018, "Member 'SHGameplayMapObjectComponent_SendDynamicObjectDataToGameplayMap::DataValue' has a wrong offset!");

// Function SHProto.SHGameplayMapObjectComponent.SendObjectDataToGameplayMap
// 0x0004 (0x0004 - 0x0000)
struct SHGameplayMapObjectComponent_SendObjectDataToGameplayMap final
{
public:
	int32                                         DataValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayMapObjectComponent_SendObjectDataToGameplayMap) == 0x000004, "Wrong alignment on SHGameplayMapObjectComponent_SendObjectDataToGameplayMap");
static_assert(sizeof(SHGameplayMapObjectComponent_SendObjectDataToGameplayMap) == 0x000004, "Wrong size on SHGameplayMapObjectComponent_SendObjectDataToGameplayMap");
static_assert(offsetof(SHGameplayMapObjectComponent_SendObjectDataToGameplayMap, DataValue) == 0x000000, "Member 'SHGameplayMapObjectComponent_SendObjectDataToGameplayMap::DataValue' has a wrong offset!");

// Function SHProto.SHGameplayMapDoorAttachmentComponent.OnFocusableShown
// 0x0008 (0x0008 - 0x0000)
struct SHGameplayMapDoorAttachmentComponent_OnFocusableShown final
{
public:
	class USHFocusableComponent*                  FocusableComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayMapDoorAttachmentComponent_OnFocusableShown) == 0x000008, "Wrong alignment on SHGameplayMapDoorAttachmentComponent_OnFocusableShown");
static_assert(sizeof(SHGameplayMapDoorAttachmentComponent_OnFocusableShown) == 0x000008, "Wrong size on SHGameplayMapDoorAttachmentComponent_OnFocusableShown");
static_assert(offsetof(SHGameplayMapDoorAttachmentComponent_OnFocusableShown, FocusableComponent) == 0x000000, "Member 'SHGameplayMapDoorAttachmentComponent_OnFocusableShown::FocusableComponent' has a wrong offset!");

// Function SHProto.SHGameplayMapDoorAttachmentComponent.OnFocusableSolved
// 0x0008 (0x0008 - 0x0000)
struct SHGameplayMapDoorAttachmentComponent_OnFocusableSolved final
{
public:
	class USHFocusableComponent*                  FocusableComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayMapDoorAttachmentComponent_OnFocusableSolved) == 0x000008, "Wrong alignment on SHGameplayMapDoorAttachmentComponent_OnFocusableSolved");
static_assert(sizeof(SHGameplayMapDoorAttachmentComponent_OnFocusableSolved) == 0x000008, "Wrong size on SHGameplayMapDoorAttachmentComponent_OnFocusableSolved");
static_assert(offsetof(SHGameplayMapDoorAttachmentComponent_OnFocusableSolved, FocusableComponent) == 0x000000, "Member 'SHGameplayMapDoorAttachmentComponent_OnFocusableSolved::FocusableComponent' has a wrong offset!");

// Function SHProto.SHGameplayMapDoorComponent.OnAttachmentFocusableShown
// 0x0008 (0x0008 - 0x0000)
struct SHGameplayMapDoorComponent_OnAttachmentFocusableShown final
{
public:
	class USHFocusableComponent*                  FocusableComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayMapDoorComponent_OnAttachmentFocusableShown) == 0x000008, "Wrong alignment on SHGameplayMapDoorComponent_OnAttachmentFocusableShown");
static_assert(sizeof(SHGameplayMapDoorComponent_OnAttachmentFocusableShown) == 0x000008, "Wrong size on SHGameplayMapDoorComponent_OnAttachmentFocusableShown");
static_assert(offsetof(SHGameplayMapDoorComponent_OnAttachmentFocusableShown, FocusableComponent) == 0x000000, "Member 'SHGameplayMapDoorComponent_OnAttachmentFocusableShown::FocusableComponent' has a wrong offset!");

// Function SHProto.SHGameplayMapDoorComponent.OnAutoLockedAnimationPlayed
// 0x0008 (0x0008 - 0x0000)
struct SHGameplayMapDoorComponent_OnAutoLockedAnimationPlayed final
{
public:
	class USHDoorAnimationsComponent*             DoorAnimationsComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayMapDoorComponent_OnAutoLockedAnimationPlayed) == 0x000008, "Wrong alignment on SHGameplayMapDoorComponent_OnAutoLockedAnimationPlayed");
static_assert(sizeof(SHGameplayMapDoorComponent_OnAutoLockedAnimationPlayed) == 0x000008, "Wrong size on SHGameplayMapDoorComponent_OnAutoLockedAnimationPlayed");
static_assert(offsetof(SHGameplayMapDoorComponent_OnAutoLockedAnimationPlayed, DoorAnimationsComponent) == 0x000000, "Member 'SHGameplayMapDoorComponent_OnAutoLockedAnimationPlayed::DoorAnimationsComponent' has a wrong offset!");

// Function SHProto.SHGameplayMapDoorComponent.OnDoorLockStateChanged
// 0x0008 (0x0008 - 0x0000)
struct SHGameplayMapDoorComponent_OnDoorLockStateChanged final
{
public:
	class USHDoorLockBaseComponent*               DoorLockBaseComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayMapDoorComponent_OnDoorLockStateChanged) == 0x000008, "Wrong alignment on SHGameplayMapDoorComponent_OnDoorLockStateChanged");
static_assert(sizeof(SHGameplayMapDoorComponent_OnDoorLockStateChanged) == 0x000008, "Wrong size on SHGameplayMapDoorComponent_OnDoorLockStateChanged");
static_assert(offsetof(SHGameplayMapDoorComponent_OnDoorLockStateChanged, DoorLockBaseComponent) == 0x000000, "Member 'SHGameplayMapDoorComponent_OnDoorLockStateChanged::DoorLockBaseComponent' has a wrong offset!");

// Function SHProto.SHGameplayMapDoorComponent.OnLockedAnimationPlayed
// 0x0008 (0x0008 - 0x0000)
struct SHGameplayMapDoorComponent_OnLockedAnimationPlayed final
{
public:
	class USHSlidingDoorAnimationsComponent*      SlidingDoorAnimationsComponent;                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayMapDoorComponent_OnLockedAnimationPlayed) == 0x000008, "Wrong alignment on SHGameplayMapDoorComponent_OnLockedAnimationPlayed");
static_assert(sizeof(SHGameplayMapDoorComponent_OnLockedAnimationPlayed) == 0x000008, "Wrong size on SHGameplayMapDoorComponent_OnLockedAnimationPlayed");
static_assert(offsetof(SHGameplayMapDoorComponent_OnLockedAnimationPlayed, SlidingDoorAnimationsComponent) == 0x000000, "Member 'SHGameplayMapDoorComponent_OnLockedAnimationPlayed::SlidingDoorAnimationsComponent' has a wrong offset!");

// Function SHProto.SHGameplayMapDoorComponent.OnOpenAnimationPlayed
// 0x0008 (0x0008 - 0x0000)
struct SHGameplayMapDoorComponent_OnOpenAnimationPlayed final
{
public:
	class USHSlidingDoorAnimationsComponent*      SlidingDoorAnimationsComponent;                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayMapDoorComponent_OnOpenAnimationPlayed) == 0x000008, "Wrong alignment on SHGameplayMapDoorComponent_OnOpenAnimationPlayed");
static_assert(sizeof(SHGameplayMapDoorComponent_OnOpenAnimationPlayed) == 0x000008, "Wrong size on SHGameplayMapDoorComponent_OnOpenAnimationPlayed");
static_assert(offsetof(SHGameplayMapDoorComponent_OnOpenAnimationPlayed, SlidingDoorAnimationsComponent) == 0x000000, "Member 'SHGameplayMapDoorComponent_OnOpenAnimationPlayed::SlidingDoorAnimationsComponent' has a wrong offset!");

// Function SHProto.SHGameplayMapDoorComponent.OnPhysicMovementAppliedForceFromActor
// 0x0010 (0x0010 - 0x0000)
struct SHGameplayMapDoorComponent_OnPhysicMovementAppliedForceFromActor final
{
public:
	class USHDoorMovementComponent*               DoorMovementComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ActorContext;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayMapDoorComponent_OnPhysicMovementAppliedForceFromActor) == 0x000008, "Wrong alignment on SHGameplayMapDoorComponent_OnPhysicMovementAppliedForceFromActor");
static_assert(sizeof(SHGameplayMapDoorComponent_OnPhysicMovementAppliedForceFromActor) == 0x000010, "Wrong size on SHGameplayMapDoorComponent_OnPhysicMovementAppliedForceFromActor");
static_assert(offsetof(SHGameplayMapDoorComponent_OnPhysicMovementAppliedForceFromActor, DoorMovementComponent) == 0x000000, "Member 'SHGameplayMapDoorComponent_OnPhysicMovementAppliedForceFromActor::DoorMovementComponent' has a wrong offset!");
static_assert(offsetof(SHGameplayMapDoorComponent_OnPhysicMovementAppliedForceFromActor, ActorContext) == 0x000008, "Member 'SHGameplayMapDoorComponent_OnPhysicMovementAppliedForceFromActor::ActorContext' has a wrong offset!");

// Function SHProto.SHGameplayMapFocusableComponent.ProcessFocusableShownEvent
// 0x0008 (0x0008 - 0x0000)
struct SHGameplayMapFocusableComponent_ProcessFocusableShownEvent final
{
public:
	class USHFocusableComponent*                  FocusableComponentPtr;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayMapFocusableComponent_ProcessFocusableShownEvent) == 0x000008, "Wrong alignment on SHGameplayMapFocusableComponent_ProcessFocusableShownEvent");
static_assert(sizeof(SHGameplayMapFocusableComponent_ProcessFocusableShownEvent) == 0x000008, "Wrong size on SHGameplayMapFocusableComponent_ProcessFocusableShownEvent");
static_assert(offsetof(SHGameplayMapFocusableComponent_ProcessFocusableShownEvent, FocusableComponentPtr) == 0x000000, "Member 'SHGameplayMapFocusableComponent_ProcessFocusableShownEvent::FocusableComponentPtr' has a wrong offset!");

// Function SHProto.SHGameplayMapFocusableComponent.ProcessFocusableSolvedEvent
// 0x0008 (0x0008 - 0x0000)
struct SHGameplayMapFocusableComponent_ProcessFocusableSolvedEvent final
{
public:
	class USHFocusableComponent*                  FocusableComponentPtr;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayMapFocusableComponent_ProcessFocusableSolvedEvent) == 0x000008, "Wrong alignment on SHGameplayMapFocusableComponent_ProcessFocusableSolvedEvent");
static_assert(sizeof(SHGameplayMapFocusableComponent_ProcessFocusableSolvedEvent) == 0x000008, "Wrong size on SHGameplayMapFocusableComponent_ProcessFocusableSolvedEvent");
static_assert(offsetof(SHGameplayMapFocusableComponent_ProcessFocusableSolvedEvent, FocusableComponentPtr) == 0x000000, "Member 'SHGameplayMapFocusableComponent_ProcessFocusableSolvedEvent::FocusableComponentPtr' has a wrong offset!");

// Function SHProto.SHGameplayMapFocusableComponent.ProcessProximityBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct SHGameplayMapFocusableComponent_ProcessProximityBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FromSweep;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayMapFocusableComponent_ProcessProximityBeginOverlap) == 0x000008, "Wrong alignment on SHGameplayMapFocusableComponent_ProcessProximityBeginOverlap");
static_assert(sizeof(SHGameplayMapFocusableComponent_ProcessProximityBeginOverlap) == 0x000108, "Wrong size on SHGameplayMapFocusableComponent_ProcessProximityBeginOverlap");
static_assert(offsetof(SHGameplayMapFocusableComponent_ProcessProximityBeginOverlap, OverlappedComponent) == 0x000000, "Member 'SHGameplayMapFocusableComponent_ProcessProximityBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SHGameplayMapFocusableComponent_ProcessProximityBeginOverlap, OtherActor) == 0x000008, "Member 'SHGameplayMapFocusableComponent_ProcessProximityBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SHGameplayMapFocusableComponent_ProcessProximityBeginOverlap, OtherComponent) == 0x000010, "Member 'SHGameplayMapFocusableComponent_ProcessProximityBeginOverlap::OtherComponent' has a wrong offset!");
static_assert(offsetof(SHGameplayMapFocusableComponent_ProcessProximityBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'SHGameplayMapFocusableComponent_ProcessProximityBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SHGameplayMapFocusableComponent_ProcessProximityBeginOverlap, FromSweep) == 0x00001C, "Member 'SHGameplayMapFocusableComponent_ProcessProximityBeginOverlap::FromSweep' has a wrong offset!");
static_assert(offsetof(SHGameplayMapFocusableComponent_ProcessProximityBeginOverlap, SweepResult) == 0x000020, "Member 'SHGameplayMapFocusableComponent_ProcessProximityBeginOverlap::SweepResult' has a wrong offset!");

// Function SHProto.SHGameplayMapItemComponent.ProcessItemCollected
// 0x0008 (0x0008 - 0x0000)
struct SHGameplayMapItemComponent_ProcessItemCollected final
{
public:
	class ASHItem*                                ItemPtr;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayMapItemComponent_ProcessItemCollected) == 0x000008, "Wrong alignment on SHGameplayMapItemComponent_ProcessItemCollected");
static_assert(sizeof(SHGameplayMapItemComponent_ProcessItemCollected) == 0x000008, "Wrong size on SHGameplayMapItemComponent_ProcessItemCollected");
static_assert(offsetof(SHGameplayMapItemComponent_ProcessItemCollected, ItemPtr) == 0x000000, "Member 'SHGameplayMapItemComponent_ProcessItemCollected::ItemPtr' has a wrong offset!");

// Function SHProto.SHGameplayMapItemComponent.ProcessProximityBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct SHGameplayMapItemComponent_ProcessProximityBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FromSweep;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayMapItemComponent_ProcessProximityBeginOverlap) == 0x000008, "Wrong alignment on SHGameplayMapItemComponent_ProcessProximityBeginOverlap");
static_assert(sizeof(SHGameplayMapItemComponent_ProcessProximityBeginOverlap) == 0x000108, "Wrong size on SHGameplayMapItemComponent_ProcessProximityBeginOverlap");
static_assert(offsetof(SHGameplayMapItemComponent_ProcessProximityBeginOverlap, OverlappedComponent) == 0x000000, "Member 'SHGameplayMapItemComponent_ProcessProximityBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SHGameplayMapItemComponent_ProcessProximityBeginOverlap, OtherActor) == 0x000008, "Member 'SHGameplayMapItemComponent_ProcessProximityBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SHGameplayMapItemComponent_ProcessProximityBeginOverlap, OtherComponent) == 0x000010, "Member 'SHGameplayMapItemComponent_ProcessProximityBeginOverlap::OtherComponent' has a wrong offset!");
static_assert(offsetof(SHGameplayMapItemComponent_ProcessProximityBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'SHGameplayMapItemComponent_ProcessProximityBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SHGameplayMapItemComponent_ProcessProximityBeginOverlap, FromSweep) == 0x00001C, "Member 'SHGameplayMapItemComponent_ProcessProximityBeginOverlap::FromSweep' has a wrong offset!");
static_assert(offsetof(SHGameplayMapItemComponent_ProcessProximityBeginOverlap, SweepResult) == 0x000020, "Member 'SHGameplayMapItemComponent_ProcessProximityBeginOverlap::SweepResult' has a wrong offset!");

// Function SHProto.SHGameplayMapLadderComponent.ProcessProximityBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct SHGameplayMapLadderComponent_ProcessProximityBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FromSweep;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayMapLadderComponent_ProcessProximityBeginOverlap) == 0x000008, "Wrong alignment on SHGameplayMapLadderComponent_ProcessProximityBeginOverlap");
static_assert(sizeof(SHGameplayMapLadderComponent_ProcessProximityBeginOverlap) == 0x000108, "Wrong size on SHGameplayMapLadderComponent_ProcessProximityBeginOverlap");
static_assert(offsetof(SHGameplayMapLadderComponent_ProcessProximityBeginOverlap, OverlappedComponent) == 0x000000, "Member 'SHGameplayMapLadderComponent_ProcessProximityBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SHGameplayMapLadderComponent_ProcessProximityBeginOverlap, OtherActor) == 0x000008, "Member 'SHGameplayMapLadderComponent_ProcessProximityBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SHGameplayMapLadderComponent_ProcessProximityBeginOverlap, OtherComponent) == 0x000010, "Member 'SHGameplayMapLadderComponent_ProcessProximityBeginOverlap::OtherComponent' has a wrong offset!");
static_assert(offsetof(SHGameplayMapLadderComponent_ProcessProximityBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'SHGameplayMapLadderComponent_ProcessProximityBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SHGameplayMapLadderComponent_ProcessProximityBeginOverlap, FromSweep) == 0x00001C, "Member 'SHGameplayMapLadderComponent_ProcessProximityBeginOverlap::FromSweep' has a wrong offset!");
static_assert(offsetof(SHGameplayMapLadderComponent_ProcessProximityBeginOverlap, SweepResult) == 0x000020, "Member 'SHGameplayMapLadderComponent_ProcessProximityBeginOverlap::SweepResult' has a wrong offset!");

// Function SHProto.SHGameplayMapPushableComponent.ProcessComponentBlockedChangedEvent
// 0x0008 (0x0008 - 0x0000)
struct SHGameplayMapPushableComponent_ProcessComponentBlockedChangedEvent final
{
public:
	class USHPushableComponent*                   PushableComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayMapPushableComponent_ProcessComponentBlockedChangedEvent) == 0x000008, "Wrong alignment on SHGameplayMapPushableComponent_ProcessComponentBlockedChangedEvent");
static_assert(sizeof(SHGameplayMapPushableComponent_ProcessComponentBlockedChangedEvent) == 0x000008, "Wrong size on SHGameplayMapPushableComponent_ProcessComponentBlockedChangedEvent");
static_assert(offsetof(SHGameplayMapPushableComponent_ProcessComponentBlockedChangedEvent, PushableComponent) == 0x000000, "Member 'SHGameplayMapPushableComponent_ProcessComponentBlockedChangedEvent::PushableComponent' has a wrong offset!");

// Function SHProto.SHGameplayMapPushableComponent.ProcessComponentMovementEvent
// 0x0008 (0x0008 - 0x0000)
struct SHGameplayMapPushableComponent_ProcessComponentMovementEvent final
{
public:
	class USHPushableComponent*                   PushableComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayMapPushableComponent_ProcessComponentMovementEvent) == 0x000008, "Wrong alignment on SHGameplayMapPushableComponent_ProcessComponentMovementEvent");
static_assert(sizeof(SHGameplayMapPushableComponent_ProcessComponentMovementEvent) == 0x000008, "Wrong size on SHGameplayMapPushableComponent_ProcessComponentMovementEvent");
static_assert(offsetof(SHGameplayMapPushableComponent_ProcessComponentMovementEvent, PushableComponent) == 0x000000, "Member 'SHGameplayMapPushableComponent_ProcessComponentMovementEvent::PushableComponent' has a wrong offset!");

// Function SHProto.SHGameplayRadioIndicatorWidget.ProcessOwnerCharacterItemCollectedEvent
// 0x0010 (0x0010 - 0x0000)
struct SHGameplayRadioIndicatorWidget_ProcessOwnerCharacterItemCollectedEvent final
{
public:
	class USHCharacterPlayItemsComponent*         ComponentPtr;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemContext;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayRadioIndicatorWidget_ProcessOwnerCharacterItemCollectedEvent) == 0x000008, "Wrong alignment on SHGameplayRadioIndicatorWidget_ProcessOwnerCharacterItemCollectedEvent");
static_assert(sizeof(SHGameplayRadioIndicatorWidget_ProcessOwnerCharacterItemCollectedEvent) == 0x000010, "Wrong size on SHGameplayRadioIndicatorWidget_ProcessOwnerCharacterItemCollectedEvent");
static_assert(offsetof(SHGameplayRadioIndicatorWidget_ProcessOwnerCharacterItemCollectedEvent, ComponentPtr) == 0x000000, "Member 'SHGameplayRadioIndicatorWidget_ProcessOwnerCharacterItemCollectedEvent::ComponentPtr' has a wrong offset!");
static_assert(offsetof(SHGameplayRadioIndicatorWidget_ProcessOwnerCharacterItemCollectedEvent, ItemContext) == 0x000008, "Member 'SHGameplayRadioIndicatorWidget_ProcessOwnerCharacterItemCollectedEvent::ItemContext' has a wrong offset!");

// Function SHProto.SHGameplaySaveMenuWidget.HideInstant
// 0x0001 (0x0001 - 0x0000)
struct SHGameplaySaveMenuWidget_HideInstant final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplaySaveMenuWidget_HideInstant) == 0x000001, "Wrong alignment on SHGameplaySaveMenuWidget_HideInstant");
static_assert(sizeof(SHGameplaySaveMenuWidget_HideInstant) == 0x000001, "Wrong size on SHGameplaySaveMenuWidget_HideInstant");
static_assert(offsetof(SHGameplaySaveMenuWidget_HideInstant, ReturnValue) == 0x000000, "Member 'SHGameplaySaveMenuWidget_HideInstant::ReturnValue' has a wrong offset!");

// Function SHProto.SHGameplaySaveMenuWidget.PlayHide
// 0x0001 (0x0001 - 0x0000)
struct SHGameplaySaveMenuWidget_PlayHide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplaySaveMenuWidget_PlayHide) == 0x000001, "Wrong alignment on SHGameplaySaveMenuWidget_PlayHide");
static_assert(sizeof(SHGameplaySaveMenuWidget_PlayHide) == 0x000001, "Wrong size on SHGameplaySaveMenuWidget_PlayHide");
static_assert(offsetof(SHGameplaySaveMenuWidget_PlayHide, ReturnValue) == 0x000000, "Member 'SHGameplaySaveMenuWidget_PlayHide::ReturnValue' has a wrong offset!");

// Function SHProto.SHGameplaySaveMenuWidget.PlaySetup
// 0x0010 (0x0010 - 0x0000)
struct SHGameplaySaveMenuWidget_PlaySetup final
{
public:
	class ASHSavePoint*                           SavePoint;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHGameplaySaveMenuWidget_PlaySetup) == 0x000008, "Wrong alignment on SHGameplaySaveMenuWidget_PlaySetup");
static_assert(sizeof(SHGameplaySaveMenuWidget_PlaySetup) == 0x000010, "Wrong size on SHGameplaySaveMenuWidget_PlaySetup");
static_assert(offsetof(SHGameplaySaveMenuWidget_PlaySetup, SavePoint) == 0x000000, "Member 'SHGameplaySaveMenuWidget_PlaySetup::SavePoint' has a wrong offset!");
static_assert(offsetof(SHGameplaySaveMenuWidget_PlaySetup, ReturnValue) == 0x000008, "Member 'SHGameplaySaveMenuWidget_PlaySetup::ReturnValue' has a wrong offset!");

// Function SHProto.SHGameplaySaveMenuWidget.PlayShow
// 0x0001 (0x0001 - 0x0000)
struct SHGameplaySaveMenuWidget_PlayShow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplaySaveMenuWidget_PlayShow) == 0x000001, "Wrong alignment on SHGameplaySaveMenuWidget_PlayShow");
static_assert(sizeof(SHGameplaySaveMenuWidget_PlayShow) == 0x000001, "Wrong size on SHGameplaySaveMenuWidget_PlayShow");
static_assert(offsetof(SHGameplaySaveMenuWidget_PlayShow, ReturnValue) == 0x000000, "Member 'SHGameplaySaveMenuWidget_PlayShow::ReturnValue' has a wrong offset!");

// Function SHProto.SHGameplaySaveMenuWidget.IsAvailable
// 0x0001 (0x0001 - 0x0000)
struct SHGameplaySaveMenuWidget_IsAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplaySaveMenuWidget_IsAvailable) == 0x000001, "Wrong alignment on SHGameplaySaveMenuWidget_IsAvailable");
static_assert(sizeof(SHGameplaySaveMenuWidget_IsAvailable) == 0x000001, "Wrong size on SHGameplaySaveMenuWidget_IsAvailable");
static_assert(offsetof(SHGameplaySaveMenuWidget_IsAvailable, ReturnValue) == 0x000000, "Member 'SHGameplaySaveMenuWidget_IsAvailable::ReturnValue' has a wrong offset!");

// Function SHProto.SHGameplayStatics.AddFutureViewLocation
// 0x0018 (0x0018 - 0x0000)
struct SHGameplayStatics_AddFutureViewLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayStatics_AddFutureViewLocation) == 0x000008, "Wrong alignment on SHGameplayStatics_AddFutureViewLocation");
static_assert(sizeof(SHGameplayStatics_AddFutureViewLocation) == 0x000018, "Wrong size on SHGameplayStatics_AddFutureViewLocation");
static_assert(offsetof(SHGameplayStatics_AddFutureViewLocation, Location) == 0x000000, "Member 'SHGameplayStatics_AddFutureViewLocation::Location' has a wrong offset!");

// Function SHProto.SHGameplayStatics.CreateAutoSave
// 0x0010 (0x0010 - 0x0000)
struct SHGameplayStatics_CreateAutoSave final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAutoSaveName;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayStatics_CreateAutoSave) == 0x000008, "Wrong alignment on SHGameplayStatics_CreateAutoSave");
static_assert(sizeof(SHGameplayStatics_CreateAutoSave) == 0x000010, "Wrong size on SHGameplayStatics_CreateAutoSave");
static_assert(offsetof(SHGameplayStatics_CreateAutoSave, WorldContextObject) == 0x000000, "Member 'SHGameplayStatics_CreateAutoSave::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHGameplayStatics_CreateAutoSave, InAutoSaveName) == 0x000008, "Member 'SHGameplayStatics_CreateAutoSave::InAutoSaveName' has a wrong offset!");

// Function SHProto.SHGameplayStatics.DestroyChildActorChild
// 0x0008 (0x0008 - 0x0000)
struct SHGameplayStatics_DestroyChildActorChild final
{
public:
	class UChildActorComponent*                   ChildActorComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayStatics_DestroyChildActorChild) == 0x000008, "Wrong alignment on SHGameplayStatics_DestroyChildActorChild");
static_assert(sizeof(SHGameplayStatics_DestroyChildActorChild) == 0x000008, "Wrong size on SHGameplayStatics_DestroyChildActorChild");
static_assert(offsetof(SHGameplayStatics_DestroyChildActorChild, ChildActorComponent) == 0x000000, "Member 'SHGameplayStatics_DestroyChildActorChild::ChildActorComponent' has a wrong offset!");

// Function SHProto.SHGameplayStatics.EnsurePlayerHasFullHealth
// 0x0010 (0x0010 - 0x0000)
struct SHGameplayStatics_EnsurePlayerHasFullHealth final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInInvisibleHeal;                                  // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHGameplayStatics_EnsurePlayerHasFullHealth) == 0x000008, "Wrong alignment on SHGameplayStatics_EnsurePlayerHasFullHealth");
static_assert(sizeof(SHGameplayStatics_EnsurePlayerHasFullHealth) == 0x000010, "Wrong size on SHGameplayStatics_EnsurePlayerHasFullHealth");
static_assert(offsetof(SHGameplayStatics_EnsurePlayerHasFullHealth, WorldContextObject) == 0x000000, "Member 'SHGameplayStatics_EnsurePlayerHasFullHealth::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHGameplayStatics_EnsurePlayerHasFullHealth, bInInvisibleHeal) == 0x000008, "Member 'SHGameplayStatics_EnsurePlayerHasFullHealth::bInInvisibleHeal' has a wrong offset!");

// Function SHProto.SHGameplayStatics.GameEnded
// 0x0008 (0x0008 - 0x0000)
struct SHGameplayStatics_GameEnded final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayStatics_GameEnded) == 0x000008, "Wrong alignment on SHGameplayStatics_GameEnded");
static_assert(sizeof(SHGameplayStatics_GameEnded) == 0x000008, "Wrong size on SHGameplayStatics_GameEnded");
static_assert(offsetof(SHGameplayStatics_GameEnded, WorldContextObject) == 0x000000, "Member 'SHGameplayStatics_GameEnded::WorldContextObject' has a wrong offset!");

// Function SHProto.SHGameplayStatics.GameOver
// 0x0010 (0x0010 - 0x0000)
struct SHGameplayStatics_GameOver final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameOverCause                                Cause;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHGameplayStatics_GameOver) == 0x000008, "Wrong alignment on SHGameplayStatics_GameOver");
static_assert(sizeof(SHGameplayStatics_GameOver) == 0x000010, "Wrong size on SHGameplayStatics_GameOver");
static_assert(offsetof(SHGameplayStatics_GameOver, WorldContextObject) == 0x000000, "Member 'SHGameplayStatics_GameOver::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHGameplayStatics_GameOver, Cause) == 0x000008, "Member 'SHGameplayStatics_GameOver::Cause' has a wrong offset!");

// Function SHProto.SHGameplayStatics.GetCombatDifficulty
// 0x0010 (0x0010 - 0x0000)
struct SHGameplayStatics_GetCombatDifficulty final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECombatDifficulty                             ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHGameplayStatics_GetCombatDifficulty) == 0x000008, "Wrong alignment on SHGameplayStatics_GetCombatDifficulty");
static_assert(sizeof(SHGameplayStatics_GetCombatDifficulty) == 0x000010, "Wrong size on SHGameplayStatics_GetCombatDifficulty");
static_assert(offsetof(SHGameplayStatics_GetCombatDifficulty, WorldContextObject) == 0x000000, "Member 'SHGameplayStatics_GetCombatDifficulty::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHGameplayStatics_GetCombatDifficulty, ReturnValue) == 0x000008, "Member 'SHGameplayStatics_GetCombatDifficulty::ReturnValue' has a wrong offset!");

// Function SHProto.SHGameplayStatics.GetPuzzlesDifficulty
// 0x0010 (0x0010 - 0x0000)
struct SHGameplayStatics_GetPuzzlesDifficulty final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPuzzlesDifficulty                            ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHGameplayStatics_GetPuzzlesDifficulty) == 0x000008, "Wrong alignment on SHGameplayStatics_GetPuzzlesDifficulty");
static_assert(sizeof(SHGameplayStatics_GetPuzzlesDifficulty) == 0x000010, "Wrong size on SHGameplayStatics_GetPuzzlesDifficulty");
static_assert(offsetof(SHGameplayStatics_GetPuzzlesDifficulty, WorldContextObject) == 0x000000, "Member 'SHGameplayStatics_GetPuzzlesDifficulty::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHGameplayStatics_GetPuzzlesDifficulty, ReturnValue) == 0x000008, "Member 'SHGameplayStatics_GetPuzzlesDifficulty::ReturnValue' has a wrong offset!");

// Function SHProto.SHGameplayStatics.IsCharacterOverlappingProximitySphere
// 0x0018 (0x0018 - 0x0000)
struct SHGameplayStatics_IsCharacterOverlappingProximitySphere final
{
public:
	class ACharacter*                             InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USphereComponent*                       InProximitySphere;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHGameplayStatics_IsCharacterOverlappingProximitySphere) == 0x000008, "Wrong alignment on SHGameplayStatics_IsCharacterOverlappingProximitySphere");
static_assert(sizeof(SHGameplayStatics_IsCharacterOverlappingProximitySphere) == 0x000018, "Wrong size on SHGameplayStatics_IsCharacterOverlappingProximitySphere");
static_assert(offsetof(SHGameplayStatics_IsCharacterOverlappingProximitySphere, InCharacter) == 0x000000, "Member 'SHGameplayStatics_IsCharacterOverlappingProximitySphere::InCharacter' has a wrong offset!");
static_assert(offsetof(SHGameplayStatics_IsCharacterOverlappingProximitySphere, InProximitySphere) == 0x000008, "Member 'SHGameplayStatics_IsCharacterOverlappingProximitySphere::InProximitySphere' has a wrong offset!");
static_assert(offsetof(SHGameplayStatics_IsCharacterOverlappingProximitySphere, ReturnValue) == 0x000010, "Member 'SHGameplayStatics_IsCharacterOverlappingProximitySphere::ReturnValue' has a wrong offset!");

// Function SHProto.SHGameplayStatics.RecordCombatState
// 0x0018 (0x0018 - 0x0000)
struct SHGameplayStatics_RecordCombatState final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InContextString;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayStatics_RecordCombatState) == 0x000008, "Wrong alignment on SHGameplayStatics_RecordCombatState");
static_assert(sizeof(SHGameplayStatics_RecordCombatState) == 0x000018, "Wrong size on SHGameplayStatics_RecordCombatState");
static_assert(offsetof(SHGameplayStatics_RecordCombatState, WorldContextObject) == 0x000000, "Member 'SHGameplayStatics_RecordCombatState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHGameplayStatics_RecordCombatState, InContextString) == 0x000008, "Member 'SHGameplayStatics_RecordCombatState::InContextString' has a wrong offset!");

// Function SHProto.SHGameplayStatics.RecordEndingsFactorsState
// 0x0018 (0x0018 - 0x0000)
struct SHGameplayStatics_RecordEndingsFactorsState final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InContextString;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayStatics_RecordEndingsFactorsState) == 0x000008, "Wrong alignment on SHGameplayStatics_RecordEndingsFactorsState");
static_assert(sizeof(SHGameplayStatics_RecordEndingsFactorsState) == 0x000018, "Wrong size on SHGameplayStatics_RecordEndingsFactorsState");
static_assert(offsetof(SHGameplayStatics_RecordEndingsFactorsState, WorldContextObject) == 0x000000, "Member 'SHGameplayStatics_RecordEndingsFactorsState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHGameplayStatics_RecordEndingsFactorsState, InContextString) == 0x000008, "Member 'SHGameplayStatics_RecordEndingsFactorsState::InContextString' has a wrong offset!");

// Function SHProto.SHGameplayStatics.RecordInventoryState
// 0x0018 (0x0018 - 0x0000)
struct SHGameplayStatics_RecordInventoryState final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InContextString;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayStatics_RecordInventoryState) == 0x000008, "Wrong alignment on SHGameplayStatics_RecordInventoryState");
static_assert(sizeof(SHGameplayStatics_RecordInventoryState) == 0x000018, "Wrong size on SHGameplayStatics_RecordInventoryState");
static_assert(offsetof(SHGameplayStatics_RecordInventoryState, WorldContextObject) == 0x000000, "Member 'SHGameplayStatics_RecordInventoryState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHGameplayStatics_RecordInventoryState, InContextString) == 0x000008, "Member 'SHGameplayStatics_RecordInventoryState::InContextString' has a wrong offset!");

// Function SHProto.SHGameplayStatics.ReCreateChildActorChild
// 0x0010 (0x0010 - 0x0000)
struct SHGameplayStatics_ReCreateChildActorChild final
{
public:
	class UChildActorComponent*                   ChildActorComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Force;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHGameplayStatics_ReCreateChildActorChild) == 0x000008, "Wrong alignment on SHGameplayStatics_ReCreateChildActorChild");
static_assert(sizeof(SHGameplayStatics_ReCreateChildActorChild) == 0x000010, "Wrong size on SHGameplayStatics_ReCreateChildActorChild");
static_assert(offsetof(SHGameplayStatics_ReCreateChildActorChild, ChildActorComponent) == 0x000000, "Member 'SHGameplayStatics_ReCreateChildActorChild::ChildActorComponent' has a wrong offset!");
static_assert(offsetof(SHGameplayStatics_ReCreateChildActorChild, Force) == 0x000008, "Member 'SHGameplayStatics_ReCreateChildActorChild::Force' has a wrong offset!");

// Function SHProto.SHGameplayStatics.SaveAndReloadGame
// 0x0010 (0x0010 - 0x0000)
struct SHGameplayStatics_SaveAndReloadGame final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAutoSaveName;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayStatics_SaveAndReloadGame) == 0x000008, "Wrong alignment on SHGameplayStatics_SaveAndReloadGame");
static_assert(sizeof(SHGameplayStatics_SaveAndReloadGame) == 0x000010, "Wrong size on SHGameplayStatics_SaveAndReloadGame");
static_assert(offsetof(SHGameplayStatics_SaveAndReloadGame, WorldContextObject) == 0x000000, "Member 'SHGameplayStatics_SaveAndReloadGame::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHGameplayStatics_SaveAndReloadGame, InAutoSaveName) == 0x000008, "Member 'SHGameplayStatics_SaveAndReloadGame::InAutoSaveName' has a wrong offset!");

// Function SHProto.SHGameplayUIStatics.HideTips
// 0x0008 (0x0008 - 0x0000)
struct SHGameplayUIStatics_HideTips final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayUIStatics_HideTips) == 0x000008, "Wrong alignment on SHGameplayUIStatics_HideTips");
static_assert(sizeof(SHGameplayUIStatics_HideTips) == 0x000008, "Wrong size on SHGameplayUIStatics_HideTips");
static_assert(offsetof(SHGameplayUIStatics_HideTips, WorldContextObject) == 0x000000, "Member 'SHGameplayUIStatics_HideTips::WorldContextObject' has a wrong offset!");

// Function SHProto.SHGameplayUIStatics.LatentGameplayFadeIn
// 0x0020 (0x0020 - 0x0000)
struct SHGameplayUIStatics_LatentGameplayFadeIn final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayUIStatics_LatentGameplayFadeIn) == 0x000008, "Wrong alignment on SHGameplayUIStatics_LatentGameplayFadeIn");
static_assert(sizeof(SHGameplayUIStatics_LatentGameplayFadeIn) == 0x000020, "Wrong size on SHGameplayUIStatics_LatentGameplayFadeIn");
static_assert(offsetof(SHGameplayUIStatics_LatentGameplayFadeIn, WorldContextObject) == 0x000000, "Member 'SHGameplayUIStatics_LatentGameplayFadeIn::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHGameplayUIStatics_LatentGameplayFadeIn, LatentInfo) == 0x000008, "Member 'SHGameplayUIStatics_LatentGameplayFadeIn::LatentInfo' has a wrong offset!");

// Function SHProto.SHGameplayUIStatics.LatentGameplayFadeOut
// 0x0020 (0x0020 - 0x0000)
struct SHGameplayUIStatics_LatentGameplayFadeOut final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayUIStatics_LatentGameplayFadeOut) == 0x000008, "Wrong alignment on SHGameplayUIStatics_LatentGameplayFadeOut");
static_assert(sizeof(SHGameplayUIStatics_LatentGameplayFadeOut) == 0x000020, "Wrong size on SHGameplayUIStatics_LatentGameplayFadeOut");
static_assert(offsetof(SHGameplayUIStatics_LatentGameplayFadeOut, WorldContextObject) == 0x000000, "Member 'SHGameplayUIStatics_LatentGameplayFadeOut::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHGameplayUIStatics_LatentGameplayFadeOut, LatentInfo) == 0x000008, "Member 'SHGameplayUIStatics_LatentGameplayFadeOut::LatentInfo' has a wrong offset!");

// Function SHProto.SHGameplayUIStatics.RemoveGameplayFadeInstant
// 0x0008 (0x0008 - 0x0000)
struct SHGameplayUIStatics_RemoveGameplayFadeInstant final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayUIStatics_RemoveGameplayFadeInstant) == 0x000008, "Wrong alignment on SHGameplayUIStatics_RemoveGameplayFadeInstant");
static_assert(sizeof(SHGameplayUIStatics_RemoveGameplayFadeInstant) == 0x000008, "Wrong size on SHGameplayUIStatics_RemoveGameplayFadeInstant");
static_assert(offsetof(SHGameplayUIStatics_RemoveGameplayFadeInstant, WorldContextObject) == 0x000000, "Member 'SHGameplayUIStatics_RemoveGameplayFadeInstant::WorldContextObject' has a wrong offset!");

// Function SHProto.SHGameplayUIStatics.RequestCustomGameplayFadeIn
// 0x0010 (0x0010 - 0x0000)
struct SHGameplayUIStatics_RequestCustomGameplayFadeIn final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFadeTime;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayUIStatics_RequestCustomGameplayFadeIn) == 0x000008, "Wrong alignment on SHGameplayUIStatics_RequestCustomGameplayFadeIn");
static_assert(sizeof(SHGameplayUIStatics_RequestCustomGameplayFadeIn) == 0x000010, "Wrong size on SHGameplayUIStatics_RequestCustomGameplayFadeIn");
static_assert(offsetof(SHGameplayUIStatics_RequestCustomGameplayFadeIn, WorldContextObject) == 0x000000, "Member 'SHGameplayUIStatics_RequestCustomGameplayFadeIn::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHGameplayUIStatics_RequestCustomGameplayFadeIn, InFadeTime) == 0x000008, "Member 'SHGameplayUIStatics_RequestCustomGameplayFadeIn::InFadeTime' has a wrong offset!");
static_assert(offsetof(SHGameplayUIStatics_RequestCustomGameplayFadeIn, ReturnValue) == 0x00000C, "Member 'SHGameplayUIStatics_RequestCustomGameplayFadeIn::ReturnValue' has a wrong offset!");

// Function SHProto.SHGameplayUIStatics.RequestCustomGameplayFadeOut
// 0x0010 (0x0010 - 0x0000)
struct SHGameplayUIStatics_RequestCustomGameplayFadeOut final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFadeTime;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayUIStatics_RequestCustomGameplayFadeOut) == 0x000008, "Wrong alignment on SHGameplayUIStatics_RequestCustomGameplayFadeOut");
static_assert(sizeof(SHGameplayUIStatics_RequestCustomGameplayFadeOut) == 0x000010, "Wrong size on SHGameplayUIStatics_RequestCustomGameplayFadeOut");
static_assert(offsetof(SHGameplayUIStatics_RequestCustomGameplayFadeOut, WorldContextObject) == 0x000000, "Member 'SHGameplayUIStatics_RequestCustomGameplayFadeOut::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHGameplayUIStatics_RequestCustomGameplayFadeOut, InFadeTime) == 0x000008, "Member 'SHGameplayUIStatics_RequestCustomGameplayFadeOut::InFadeTime' has a wrong offset!");
static_assert(offsetof(SHGameplayUIStatics_RequestCustomGameplayFadeOut, ReturnValue) == 0x00000C, "Member 'SHGameplayUIStatics_RequestCustomGameplayFadeOut::ReturnValue' has a wrong offset!");

// Function SHProto.SHGameplayUIStatics.RequestGameplayFadeIn
// 0x0010 (0x0010 - 0x0000)
struct SHGameplayUIStatics_RequestGameplayFadeIn final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHGameplayUIStatics_RequestGameplayFadeIn) == 0x000008, "Wrong alignment on SHGameplayUIStatics_RequestGameplayFadeIn");
static_assert(sizeof(SHGameplayUIStatics_RequestGameplayFadeIn) == 0x000010, "Wrong size on SHGameplayUIStatics_RequestGameplayFadeIn");
static_assert(offsetof(SHGameplayUIStatics_RequestGameplayFadeIn, WorldContextObject) == 0x000000, "Member 'SHGameplayUIStatics_RequestGameplayFadeIn::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHGameplayUIStatics_RequestGameplayFadeIn, ReturnValue) == 0x000008, "Member 'SHGameplayUIStatics_RequestGameplayFadeIn::ReturnValue' has a wrong offset!");

// Function SHProto.SHGameplayUIStatics.RequestGameplayFadeOut
// 0x0010 (0x0010 - 0x0000)
struct SHGameplayUIStatics_RequestGameplayFadeOut final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHGameplayUIStatics_RequestGameplayFadeOut) == 0x000008, "Wrong alignment on SHGameplayUIStatics_RequestGameplayFadeOut");
static_assert(sizeof(SHGameplayUIStatics_RequestGameplayFadeOut) == 0x000010, "Wrong size on SHGameplayUIStatics_RequestGameplayFadeOut");
static_assert(offsetof(SHGameplayUIStatics_RequestGameplayFadeOut, WorldContextObject) == 0x000000, "Member 'SHGameplayUIStatics_RequestGameplayFadeOut::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHGameplayUIStatics_RequestGameplayFadeOut, ReturnValue) == 0x000008, "Member 'SHGameplayUIStatics_RequestGameplayFadeOut::ReturnValue' has a wrong offset!");

// Function SHProto.SHGameplayUIStatics.RequestItemNotification
// 0x0018 (0x0018 - 0x0000)
struct SHGameplayUIStatics_RequestItemNotification final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemDataRowName;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemQuantity;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHGameplayItemNotificationType               ItemNotificationType;                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHGameplayUIStatics_RequestItemNotification) == 0x000008, "Wrong alignment on SHGameplayUIStatics_RequestItemNotification");
static_assert(sizeof(SHGameplayUIStatics_RequestItemNotification) == 0x000018, "Wrong size on SHGameplayUIStatics_RequestItemNotification");
static_assert(offsetof(SHGameplayUIStatics_RequestItemNotification, WorldContextObject) == 0x000000, "Member 'SHGameplayUIStatics_RequestItemNotification::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHGameplayUIStatics_RequestItemNotification, ItemDataRowName) == 0x000008, "Member 'SHGameplayUIStatics_RequestItemNotification::ItemDataRowName' has a wrong offset!");
static_assert(offsetof(SHGameplayUIStatics_RequestItemNotification, ItemQuantity) == 0x000010, "Member 'SHGameplayUIStatics_RequestItemNotification::ItemQuantity' has a wrong offset!");
static_assert(offsetof(SHGameplayUIStatics_RequestItemNotification, ItemNotificationType) == 0x000014, "Member 'SHGameplayUIStatics_RequestItemNotification::ItemNotificationType' has a wrong offset!");

// Function SHProto.SHGameplayUIStatics.SetGameplayFadeColor
// 0x0018 (0x0018 - 0x0000)
struct SHGameplayUIStatics_SetGameplayFadeColor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InColor;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGameplayUIStatics_SetGameplayFadeColor) == 0x000008, "Wrong alignment on SHGameplayUIStatics_SetGameplayFadeColor");
static_assert(sizeof(SHGameplayUIStatics_SetGameplayFadeColor) == 0x000018, "Wrong size on SHGameplayUIStatics_SetGameplayFadeColor");
static_assert(offsetof(SHGameplayUIStatics_SetGameplayFadeColor, WorldContextObject) == 0x000000, "Member 'SHGameplayUIStatics_SetGameplayFadeColor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHGameplayUIStatics_SetGameplayFadeColor, InColor) == 0x000008, "Member 'SHGameplayUIStatics_SetGameplayFadeColor::InColor' has a wrong offset!");

// Function SHProto.SHGameplayUIStatics.ShowEnviromentalSubtitle
// 0x0038 (0x0038 - 0x0000)
struct SHGameplayUIStatics_ShowEnviromentalSubtitle final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDialogLine                            DialogLineID;                                      // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHGameplayUIStatics_ShowEnviromentalSubtitle) == 0x000008, "Wrong alignment on SHGameplayUIStatics_ShowEnviromentalSubtitle");
static_assert(sizeof(SHGameplayUIStatics_ShowEnviromentalSubtitle) == 0x000038, "Wrong size on SHGameplayUIStatics_ShowEnviromentalSubtitle");
static_assert(offsetof(SHGameplayUIStatics_ShowEnviromentalSubtitle, WorldContextObject) == 0x000000, "Member 'SHGameplayUIStatics_ShowEnviromentalSubtitle::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHGameplayUIStatics_ShowEnviromentalSubtitle, DialogLineID) == 0x000008, "Member 'SHGameplayUIStatics_ShowEnviromentalSubtitle::DialogLineID' has a wrong offset!");
static_assert(offsetof(SHGameplayUIStatics_ShowEnviromentalSubtitle, ReturnValue) == 0x000030, "Member 'SHGameplayUIStatics_ShowEnviromentalSubtitle::ReturnValue' has a wrong offset!");

// Function SHProto.SHGameplayUIStatics.ShowTips
// 0x0020 (0x0020 - 0x0000)
struct SHGameplayUIStatics_ShowTips final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Tips;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          WithBackground;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseVisibilitySettings;                             // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHGameplayUIStatics_ShowTips) == 0x000008, "Wrong alignment on SHGameplayUIStatics_ShowTips");
static_assert(sizeof(SHGameplayUIStatics_ShowTips) == 0x000020, "Wrong size on SHGameplayUIStatics_ShowTips");
static_assert(offsetof(SHGameplayUIStatics_ShowTips, WorldContextObject) == 0x000000, "Member 'SHGameplayUIStatics_ShowTips::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SHGameplayUIStatics_ShowTips, Tips) == 0x000008, "Member 'SHGameplayUIStatics_ShowTips::Tips' has a wrong offset!");
static_assert(offsetof(SHGameplayUIStatics_ShowTips, WithBackground) == 0x000018, "Member 'SHGameplayUIStatics_ShowTips::WithBackground' has a wrong offset!");
static_assert(offsetof(SHGameplayUIStatics_ShowTips, UseVisibilitySettings) == 0x000019, "Member 'SHGameplayUIStatics_ShowTips::UseVisibilitySettings' has a wrong offset!");

// Function SHProto.SHGeometryCollectionActor.GetNumElements
// 0x0004 (0x0004 - 0x0000)
struct SHGeometryCollectionActor_GetNumElements final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHGeometryCollectionActor_GetNumElements) == 0x000004, "Wrong alignment on SHGeometryCollectionActor_GetNumElements");
static_assert(sizeof(SHGeometryCollectionActor_GetNumElements) == 0x000004, "Wrong size on SHGeometryCollectionActor_GetNumElements");
static_assert(offsetof(SHGeometryCollectionActor_GetNumElements, ReturnValue) == 0x000000, "Member 'SHGeometryCollectionActor_GetNumElements::ReturnValue' has a wrong offset!");

// Function SHProto.SHHitReactionCooldownComponent.GetVariantsOnCooldown
// 0x0018 (0x0018 - 0x0000)
struct SHHitReactionCooldownComponent_GetVariantsOnCooldown final
{
public:
	ESHHitReactionResponseType                    Reaction;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionCooldownComponent_GetVariantsOnCooldown) == 0x000008, "Wrong alignment on SHHitReactionCooldownComponent_GetVariantsOnCooldown");
static_assert(sizeof(SHHitReactionCooldownComponent_GetVariantsOnCooldown) == 0x000018, "Wrong size on SHHitReactionCooldownComponent_GetVariantsOnCooldown");
static_assert(offsetof(SHHitReactionCooldownComponent_GetVariantsOnCooldown, Reaction) == 0x000000, "Member 'SHHitReactionCooldownComponent_GetVariantsOnCooldown::Reaction' has a wrong offset!");
static_assert(offsetof(SHHitReactionCooldownComponent_GetVariantsOnCooldown, ReturnValue) == 0x000008, "Member 'SHHitReactionCooldownComponent_GetVariantsOnCooldown::ReturnValue' has a wrong offset!");

// Function SHProto.SHHitReactionCooldownComponent.IsReactionOnCooldown
// 0x0010 (0x0010 - 0x0000)
struct SHHitReactionCooldownComponent_IsReactionOnCooldown final
{
public:
	ESHHitReactionResponseType                    Reaction;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Variant;                                           // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHHitReactionCooldownComponent_IsReactionOnCooldown) == 0x000004, "Wrong alignment on SHHitReactionCooldownComponent_IsReactionOnCooldown");
static_assert(sizeof(SHHitReactionCooldownComponent_IsReactionOnCooldown) == 0x000010, "Wrong size on SHHitReactionCooldownComponent_IsReactionOnCooldown");
static_assert(offsetof(SHHitReactionCooldownComponent_IsReactionOnCooldown, Reaction) == 0x000000, "Member 'SHHitReactionCooldownComponent_IsReactionOnCooldown::Reaction' has a wrong offset!");
static_assert(offsetof(SHHitReactionCooldownComponent_IsReactionOnCooldown, Variant) == 0x000004, "Member 'SHHitReactionCooldownComponent_IsReactionOnCooldown::Variant' has a wrong offset!");
static_assert(offsetof(SHHitReactionCooldownComponent_IsReactionOnCooldown, ReturnValue) == 0x00000C, "Member 'SHHitReactionCooldownComponent_IsReactionOnCooldown::ReturnValue' has a wrong offset!");

// Function SHProto.SHHitReactionCooldownComponent.SetCooldownTimerForHitReaction
// 0x000C (0x000C - 0x0000)
struct SHHitReactionCooldownComponent_SetCooldownTimerForHitReaction final
{
public:
	ESHHitReactionResponseType                    Reaction;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Variant;                                           // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionCooldownComponent_SetCooldownTimerForHitReaction) == 0x000004, "Wrong alignment on SHHitReactionCooldownComponent_SetCooldownTimerForHitReaction");
static_assert(sizeof(SHHitReactionCooldownComponent_SetCooldownTimerForHitReaction) == 0x00000C, "Wrong size on SHHitReactionCooldownComponent_SetCooldownTimerForHitReaction");
static_assert(offsetof(SHHitReactionCooldownComponent_SetCooldownTimerForHitReaction, Reaction) == 0x000000, "Member 'SHHitReactionCooldownComponent_SetCooldownTimerForHitReaction::Reaction' has a wrong offset!");
static_assert(offsetof(SHHitReactionCooldownComponent_SetCooldownTimerForHitReaction, Variant) == 0x000004, "Member 'SHHitReactionCooldownComponent_SetCooldownTimerForHitReaction::Variant' has a wrong offset!");

// Function SHProto.SHHitReactionState.BoundAnimationBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct SHHitReactionState_BoundAnimationBlendingOut final
{
public:
	class UAnimMontage*                           InMontage;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHAnimEndType                                InAnimEndType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHHitReactionState_BoundAnimationBlendingOut) == 0x000008, "Wrong alignment on SHHitReactionState_BoundAnimationBlendingOut");
static_assert(sizeof(SHHitReactionState_BoundAnimationBlendingOut) == 0x000010, "Wrong size on SHHitReactionState_BoundAnimationBlendingOut");
static_assert(offsetof(SHHitReactionState_BoundAnimationBlendingOut, InMontage) == 0x000000, "Member 'SHHitReactionState_BoundAnimationBlendingOut::InMontage' has a wrong offset!");
static_assert(offsetof(SHHitReactionState_BoundAnimationBlendingOut, InAnimEndType) == 0x000008, "Member 'SHHitReactionState_BoundAnimationBlendingOut::InAnimEndType' has a wrong offset!");

// Function SHProto.SHHitReactionState.BoundAnimationEnded
// 0x0010 (0x0010 - 0x0000)
struct SHHitReactionState_BoundAnimationEnded final
{
public:
	class UAnimMontage*                           InMontage;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHAnimEndType                                InAnimEndType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHHitReactionState_BoundAnimationEnded) == 0x000008, "Wrong alignment on SHHitReactionState_BoundAnimationEnded");
static_assert(sizeof(SHHitReactionState_BoundAnimationEnded) == 0x000010, "Wrong size on SHHitReactionState_BoundAnimationEnded");
static_assert(offsetof(SHHitReactionState_BoundAnimationEnded, InMontage) == 0x000000, "Member 'SHHitReactionState_BoundAnimationEnded::InMontage' has a wrong offset!");
static_assert(offsetof(SHHitReactionState_BoundAnimationEnded, InAnimEndType) == 0x000008, "Member 'SHHitReactionState_BoundAnimationEnded::InAnimEndType' has a wrong offset!");

// Function SHProto.SHHitReactionState.CancelState
// 0x0002 (0x0002 - 0x0000)
struct SHHitReactionState_CancelState final
{
public:
	bool                                          InInstant;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionState_CancelState) == 0x000001, "Wrong alignment on SHHitReactionState_CancelState");
static_assert(sizeof(SHHitReactionState_CancelState) == 0x000002, "Wrong size on SHHitReactionState_CancelState");
static_assert(offsetof(SHHitReactionState_CancelState, InInstant) == 0x000000, "Member 'SHHitReactionState_CancelState::InInstant' has a wrong offset!");
static_assert(offsetof(SHHitReactionState_CancelState, ReturnValue) == 0x000001, "Member 'SHHitReactionState_CancelState::ReturnValue' has a wrong offset!");

// Function SHProto.SHHitReactionState.StartFinishingState
// 0x0001 (0x0001 - 0x0000)
struct SHHitReactionState_StartFinishingState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionState_StartFinishingState) == 0x000001, "Wrong alignment on SHHitReactionState_StartFinishingState");
static_assert(sizeof(SHHitReactionState_StartFinishingState) == 0x000001, "Wrong size on SHHitReactionState_StartFinishingState");
static_assert(offsetof(SHHitReactionState_StartFinishingState, ReturnValue) == 0x000000, "Member 'SHHitReactionState_StartFinishingState::ReturnValue' has a wrong offset!");

// Function SHProto.SHHitReactionState.GetRemainingStateDuration
// 0x0004 (0x0004 - 0x0000)
struct SHHitReactionState_GetRemainingStateDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionState_GetRemainingStateDuration) == 0x000004, "Wrong alignment on SHHitReactionState_GetRemainingStateDuration");
static_assert(sizeof(SHHitReactionState_GetRemainingStateDuration) == 0x000004, "Wrong size on SHHitReactionState_GetRemainingStateDuration");
static_assert(offsetof(SHHitReactionState_GetRemainingStateDuration, ReturnValue) == 0x000000, "Member 'SHHitReactionState_GetRemainingStateDuration::ReturnValue' has a wrong offset!");

// Function SHProto.SHHitReactionState.GetStateHitReactionIdentifier
// 0x000C (0x000C - 0x0000)
struct SHHitReactionState_GetStateHitReactionIdentifier final
{
public:
	struct FSHHitReactionIdentifier               OutIdentifier;                                     // 0x0000(0x000C)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionState_GetStateHitReactionIdentifier) == 0x000004, "Wrong alignment on SHHitReactionState_GetStateHitReactionIdentifier");
static_assert(sizeof(SHHitReactionState_GetStateHitReactionIdentifier) == 0x00000C, "Wrong size on SHHitReactionState_GetStateHitReactionIdentifier");
static_assert(offsetof(SHHitReactionState_GetStateHitReactionIdentifier, OutIdentifier) == 0x000000, "Member 'SHHitReactionState_GetStateHitReactionIdentifier::OutIdentifier' has a wrong offset!");

// Function SHProto.SHHitReactionState.GetStateHitReactionType
// 0x0001 (0x0001 - 0x0000)
struct SHHitReactionState_GetStateHitReactionType final
{
public:
	ESHHitReactionResponseType                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionState_GetStateHitReactionType) == 0x000001, "Wrong alignment on SHHitReactionState_GetStateHitReactionType");
static_assert(sizeof(SHHitReactionState_GetStateHitReactionType) == 0x000001, "Wrong size on SHHitReactionState_GetStateHitReactionType");
static_assert(offsetof(SHHitReactionState_GetStateHitReactionType, ReturnValue) == 0x000000, "Member 'SHHitReactionState_GetStateHitReactionType::ReturnValue' has a wrong offset!");

// Function SHProto.SHHitReactionState.GetStateHitReactionVariant
// 0x0008 (0x0008 - 0x0000)
struct SHHitReactionState_GetStateHitReactionVariant final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionState_GetStateHitReactionVariant) == 0x000004, "Wrong alignment on SHHitReactionState_GetStateHitReactionVariant");
static_assert(sizeof(SHHitReactionState_GetStateHitReactionVariant) == 0x000008, "Wrong size on SHHitReactionState_GetStateHitReactionVariant");
static_assert(offsetof(SHHitReactionState_GetStateHitReactionVariant, ReturnValue) == 0x000000, "Member 'SHHitReactionState_GetStateHitReactionVariant::ReturnValue' has a wrong offset!");

// Function SHProto.SHHitReactionState.HasStateEnded
// 0x0001 (0x0001 - 0x0000)
struct SHHitReactionState_HasStateEnded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionState_HasStateEnded) == 0x000001, "Wrong alignment on SHHitReactionState_HasStateEnded");
static_assert(sizeof(SHHitReactionState_HasStateEnded) == 0x000001, "Wrong size on SHHitReactionState_HasStateEnded");
static_assert(offsetof(SHHitReactionState_HasStateEnded, ReturnValue) == 0x000000, "Member 'SHHitReactionState_HasStateEnded::ReturnValue' has a wrong offset!");

// Function SHProto.SHHitReactionState.HasStateStarted
// 0x0001 (0x0001 - 0x0000)
struct SHHitReactionState_HasStateStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionState_HasStateStarted) == 0x000001, "Wrong alignment on SHHitReactionState_HasStateStarted");
static_assert(sizeof(SHHitReactionState_HasStateStarted) == 0x000001, "Wrong size on SHHitReactionState_HasStateStarted");
static_assert(offsetof(SHHitReactionState_HasStateStarted, ReturnValue) == 0x000000, "Member 'SHHitReactionState_HasStateStarted::ReturnValue' has a wrong offset!");

// Function SHProto.SHHitReactionState.IsStateFinishing
// 0x0001 (0x0001 - 0x0000)
struct SHHitReactionState_IsStateFinishing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionState_IsStateFinishing) == 0x000001, "Wrong alignment on SHHitReactionState_IsStateFinishing");
static_assert(sizeof(SHHitReactionState_IsStateFinishing) == 0x000001, "Wrong size on SHHitReactionState_IsStateFinishing");
static_assert(offsetof(SHHitReactionState_IsStateFinishing, ReturnValue) == 0x000000, "Member 'SHHitReactionState_IsStateFinishing::ReturnValue' has a wrong offset!");

// Function SHProto.SHHitReactionState.IsStateInProgress
// 0x0002 (0x0002 - 0x0000)
struct SHHitReactionState_IsStateInProgress final
{
public:
	bool                                          InIncludeFinishing;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionState_IsStateInProgress) == 0x000001, "Wrong alignment on SHHitReactionState_IsStateInProgress");
static_assert(sizeof(SHHitReactionState_IsStateInProgress) == 0x000002, "Wrong size on SHHitReactionState_IsStateInProgress");
static_assert(offsetof(SHHitReactionState_IsStateInProgress, InIncludeFinishing) == 0x000000, "Member 'SHHitReactionState_IsStateInProgress::InIncludeFinishing' has a wrong offset!");
static_assert(offsetof(SHHitReactionState_IsStateInProgress, ReturnValue) == 0x000001, "Member 'SHHitReactionState_IsStateInProgress::ReturnValue' has a wrong offset!");

// Function SHProto.SHHitReactionStatesContext.MontagePlayerAnimationStopped
// 0x0010 (0x0010 - 0x0000)
struct SHHitReactionStatesContext_MontagePlayerAnimationStopped final
{
public:
	class UAnimMontage*                           InMontage;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHAnimEndType                                InAnimEndType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHHitReactionStatesContext_MontagePlayerAnimationStopped) == 0x000008, "Wrong alignment on SHHitReactionStatesContext_MontagePlayerAnimationStopped");
static_assert(sizeof(SHHitReactionStatesContext_MontagePlayerAnimationStopped) == 0x000010, "Wrong size on SHHitReactionStatesContext_MontagePlayerAnimationStopped");
static_assert(offsetof(SHHitReactionStatesContext_MontagePlayerAnimationStopped, InMontage) == 0x000000, "Member 'SHHitReactionStatesContext_MontagePlayerAnimationStopped::InMontage' has a wrong offset!");
static_assert(offsetof(SHHitReactionStatesContext_MontagePlayerAnimationStopped, InAnimEndType) == 0x000008, "Member 'SHHitReactionStatesContext_MontagePlayerAnimationStopped::InAnimEndType' has a wrong offset!");

// Function SHProto.SHHitReactionsSet.GetDeathSoftObjects
// 0x0010 (0x0010 - 0x0000)
struct SHHitReactionsSet_GetDeathSoftObjects final
{
public:
	TArray<TSoftObjectPtr<class UObject>>         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHitReactionsSet_GetDeathSoftObjects) == 0x000008, "Wrong alignment on SHHitReactionsSet_GetDeathSoftObjects");
static_assert(sizeof(SHHitReactionsSet_GetDeathSoftObjects) == 0x000010, "Wrong size on SHHitReactionsSet_GetDeathSoftObjects");
static_assert(offsetof(SHHitReactionsSet_GetDeathSoftObjects, ReturnValue) == 0x000000, "Member 'SHHitReactionsSet_GetDeathSoftObjects::ReturnValue' has a wrong offset!");

// Function SHProto.SHHospitalFWLyingMariaInteractionsEndingFactor.SHDebug_Character_Endings_HospitalFWLyingMariaInteractionsEndingFactor_SetDebugValue
// 0x0001 (0x0001 - 0x0000)
struct SHHospitalFWLyingMariaInteractionsEndingFactor_SHDebug_Character_Endings_HospitalFWLyingMariaInteractionsEndingFactor_SetDebugValue final
{
public:
	bool                                          InValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHospitalFWLyingMariaInteractionsEndingFactor_SHDebug_Character_Endings_HospitalFWLyingMariaInteractionsEndingFactor_SetDebugValue) == 0x000001, "Wrong alignment on SHHospitalFWLyingMariaInteractionsEndingFactor_SHDebug_Character_Endings_HospitalFWLyingMariaInteractionsEndingFactor_SetDebugValue");
static_assert(sizeof(SHHospitalFWLyingMariaInteractionsEndingFactor_SHDebug_Character_Endings_HospitalFWLyingMariaInteractionsEndingFactor_SetDebugValue) == 0x000001, "Wrong size on SHHospitalFWLyingMariaInteractionsEndingFactor_SHDebug_Character_Endings_HospitalFWLyingMariaInteractionsEndingFactor_SetDebugValue");
static_assert(offsetof(SHHospitalFWLyingMariaInteractionsEndingFactor_SHDebug_Character_Endings_HospitalFWLyingMariaInteractionsEndingFactor_SetDebugValue, InValue) == 0x000000, "Member 'SHHospitalFWLyingMariaInteractionsEndingFactor_SHDebug_Character_Endings_HospitalFWLyingMariaInteractionsEndingFactor_SetDebugValue::InValue' has a wrong offset!");

// Function SHProto.SHHotelFWListenedSickbedConversationEndingFactor.SHDebug_Character_Endings_HotelFWListenedSickbedConversationEndingFactor_SetDebugValue
// 0x0001 (0x0001 - 0x0000)
struct SHHotelFWListenedSickbedConversationEndingFactor_SHDebug_Character_Endings_HotelFWListenedSickbedConversationEndingFactor_SetDebugValue final
{
public:
	bool                                          InValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHotelFWListenedSickbedConversationEndingFactor_SHDebug_Character_Endings_HotelFWListenedSickbedConversationEndingFactor_SetDebugValue) == 0x000001, "Wrong alignment on SHHotelFWListenedSickbedConversationEndingFactor_SHDebug_Character_Endings_HotelFWListenedSickbedConversationEndingFactor_SetDebugValue");
static_assert(sizeof(SHHotelFWListenedSickbedConversationEndingFactor_SHDebug_Character_Endings_HotelFWListenedSickbedConversationEndingFactor_SetDebugValue) == 0x000001, "Wrong size on SHHotelFWListenedSickbedConversationEndingFactor_SHDebug_Character_Endings_HotelFWListenedSickbedConversationEndingFactor_SetDebugValue");
static_assert(offsetof(SHHotelFWListenedSickbedConversationEndingFactor_SHDebug_Character_Endings_HotelFWListenedSickbedConversationEndingFactor_SetDebugValue, InValue) == 0x000000, "Member 'SHHotelFWListenedSickbedConversationEndingFactor_SHDebug_Character_Endings_HotelFWListenedSickbedConversationEndingFactor_SetDebugValue::InValue' has a wrong offset!");

// Function SHProto.SHHotelFWPyramidHeadBossAftermathEndingFactor.SHDebug_Character_Endings_Factors_HotelFWPyramidHeadBossAftermath_SetDebugValue
// 0x0004 (0x0004 - 0x0000)
struct SHHotelFWPyramidHeadBossAftermathEndingFactor_SHDebug_Character_Endings_Factors_HotelFWPyramidHeadBossAftermath_SetDebugValue final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHotelFWPyramidHeadBossAftermathEndingFactor_SHDebug_Character_Endings_Factors_HotelFWPyramidHeadBossAftermath_SetDebugValue) == 0x000004, "Wrong alignment on SHHotelFWPyramidHeadBossAftermathEndingFactor_SHDebug_Character_Endings_Factors_HotelFWPyramidHeadBossAftermath_SetDebugValue");
static_assert(sizeof(SHHotelFWPyramidHeadBossAftermathEndingFactor_SHDebug_Character_Endings_Factors_HotelFWPyramidHeadBossAftermath_SetDebugValue) == 0x000004, "Wrong size on SHHotelFWPyramidHeadBossAftermathEndingFactor_SHDebug_Character_Endings_Factors_HotelFWPyramidHeadBossAftermath_SetDebugValue");
static_assert(offsetof(SHHotelFWPyramidHeadBossAftermathEndingFactor_SHDebug_Character_Endings_Factors_HotelFWPyramidHeadBossAftermath_SetDebugValue, InValue) == 0x000000, "Member 'SHHotelFWPyramidHeadBossAftermathEndingFactor_SHDebug_Character_Endings_Factors_HotelFWPyramidHeadBossAftermath_SetDebugValue::InValue' has a wrong offset!");

// Function SHProto.SHHotelOWMirrorPuzzleEndingFactor.SHDebug_Character_Endings_Factors_HotelOWMirrorPuzzle_SetDebugValue
// 0x0004 (0x0004 - 0x0000)
struct SHHotelOWMirrorPuzzleEndingFactor_SHDebug_Character_Endings_Factors_HotelOWMirrorPuzzle_SetDebugValue final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHHotelOWMirrorPuzzleEndingFactor_SHDebug_Character_Endings_Factors_HotelOWMirrorPuzzle_SetDebugValue) == 0x000004, "Wrong alignment on SHHotelOWMirrorPuzzleEndingFactor_SHDebug_Character_Endings_Factors_HotelOWMirrorPuzzle_SetDebugValue");
static_assert(sizeof(SHHotelOWMirrorPuzzleEndingFactor_SHDebug_Character_Endings_Factors_HotelOWMirrorPuzzle_SetDebugValue) == 0x000004, "Wrong size on SHHotelOWMirrorPuzzleEndingFactor_SHDebug_Character_Endings_Factors_HotelOWMirrorPuzzle_SetDebugValue");
static_assert(offsetof(SHHotelOWMirrorPuzzleEndingFactor_SHDebug_Character_Endings_Factors_HotelOWMirrorPuzzle_SetDebugValue, InValue) == 0x000000, "Member 'SHHotelOWMirrorPuzzleEndingFactor_SHDebug_Character_Endings_Factors_HotelOWMirrorPuzzle_SetDebugValue::InValue' has a wrong offset!");

// Function SHProto.SHInGameMenuWidget.AskQuit
// 0x0001 (0x0001 - 0x0000)
struct SHInGameMenuWidget_AskQuit final
{
public:
	EInGameQuitTarget                             _QuitTarget;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInGameMenuWidget_AskQuit) == 0x000001, "Wrong alignment on SHInGameMenuWidget_AskQuit");
static_assert(sizeof(SHInGameMenuWidget_AskQuit) == 0x000001, "Wrong size on SHInGameMenuWidget_AskQuit");
static_assert(offsetof(SHInGameMenuWidget_AskQuit, _QuitTarget) == 0x000000, "Member 'SHInGameMenuWidget_AskQuit::_QuitTarget' has a wrong offset!");

// Function SHProto.SHInGameMenuWidget.OnAskQuit
// 0x0001 (0x0001 - 0x0000)
struct SHInGameMenuWidget_OnAskQuit final
{
public:
	EInGameQuitTarget                             _QuitTarget;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInGameMenuWidget_OnAskQuit) == 0x000001, "Wrong alignment on SHInGameMenuWidget_OnAskQuit");
static_assert(sizeof(SHInGameMenuWidget_OnAskQuit) == 0x000001, "Wrong size on SHInGameMenuWidget_OnAskQuit");
static_assert(offsetof(SHInGameMenuWidget_OnAskQuit, _QuitTarget) == 0x000000, "Member 'SHInGameMenuWidget_OnAskQuit::_QuitTarget' has a wrong offset!");

// Function SHProto.SHInGameMenuWidget.OnResume
// 0x0001 (0x0001 - 0x0000)
struct SHInGameMenuWidget_OnResume final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInGameMenuWidget_OnResume) == 0x000001, "Wrong alignment on SHInGameMenuWidget_OnResume");
static_assert(sizeof(SHInGameMenuWidget_OnResume) == 0x000001, "Wrong size on SHInGameMenuWidget_OnResume");
static_assert(offsetof(SHInGameMenuWidget_OnResume, ReturnValue) == 0x000000, "Member 'SHInGameMenuWidget_OnResume::ReturnValue' has a wrong offset!");

// Function SHProto.SHInMenuCreditsWidget.ActiveWidgetChanged
// 0x0010 (0x0010 - 0x0000)
struct SHInMenuCreditsWidget_ActiveWidgetChanged final
{
public:
	class UWidget*                                ActiveWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActiveWidgetIndex;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHInMenuCreditsWidget_ActiveWidgetChanged) == 0x000008, "Wrong alignment on SHInMenuCreditsWidget_ActiveWidgetChanged");
static_assert(sizeof(SHInMenuCreditsWidget_ActiveWidgetChanged) == 0x000010, "Wrong size on SHInMenuCreditsWidget_ActiveWidgetChanged");
static_assert(offsetof(SHInMenuCreditsWidget_ActiveWidgetChanged, ActiveWidget) == 0x000000, "Member 'SHInMenuCreditsWidget_ActiveWidgetChanged::ActiveWidget' has a wrong offset!");
static_assert(offsetof(SHInMenuCreditsWidget_ActiveWidgetChanged, ActiveWidgetIndex) == 0x000008, "Member 'SHInMenuCreditsWidget_ActiveWidgetChanged::ActiveWidgetIndex' has a wrong offset!");

// Function SHProto.SHInputBufferCmbSubcomp.ProcessCombatInputModeChangedEvent
// 0x0008 (0x0008 - 0x0000)
struct SHInputBufferCmbSubcomp_ProcessCombatInputModeChangedEvent final
{
public:
	class USHCharacterPlayCombatComponent*        CombatComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInputBufferCmbSubcomp_ProcessCombatInputModeChangedEvent) == 0x000008, "Wrong alignment on SHInputBufferCmbSubcomp_ProcessCombatInputModeChangedEvent");
static_assert(sizeof(SHInputBufferCmbSubcomp_ProcessCombatInputModeChangedEvent) == 0x000008, "Wrong size on SHInputBufferCmbSubcomp_ProcessCombatInputModeChangedEvent");
static_assert(offsetof(SHInputBufferCmbSubcomp_ProcessCombatInputModeChangedEvent, CombatComp) == 0x000000, "Member 'SHInputBufferCmbSubcomp_ProcessCombatInputModeChangedEvent::CombatComp' has a wrong offset!");

// Function SHProto.SHInputReceiver.ProcessBoatForwardInputAction
// 0x0018 (0x0018 - 0x0000)
struct SHInputReceiver_ProcessBoatForwardInputAction final
{
public:
	class UBInputAction*                          InputSource;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputEventState*                       State;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBInputActionChangeType                       ChangeType;                                        // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHInputReceiver_ProcessBoatForwardInputAction) == 0x000008, "Wrong alignment on SHInputReceiver_ProcessBoatForwardInputAction");
static_assert(sizeof(SHInputReceiver_ProcessBoatForwardInputAction) == 0x000018, "Wrong size on SHInputReceiver_ProcessBoatForwardInputAction");
static_assert(offsetof(SHInputReceiver_ProcessBoatForwardInputAction, InputSource) == 0x000000, "Member 'SHInputReceiver_ProcessBoatForwardInputAction::InputSource' has a wrong offset!");
static_assert(offsetof(SHInputReceiver_ProcessBoatForwardInputAction, State) == 0x000008, "Member 'SHInputReceiver_ProcessBoatForwardInputAction::State' has a wrong offset!");
static_assert(offsetof(SHInputReceiver_ProcessBoatForwardInputAction, ChangeType) == 0x000010, "Member 'SHInputReceiver_ProcessBoatForwardInputAction::ChangeType' has a wrong offset!");

// Function SHProto.SHInputReceiver.ProcessBoatLeftInputAction
// 0x0018 (0x0018 - 0x0000)
struct SHInputReceiver_ProcessBoatLeftInputAction final
{
public:
	class UBInputAction*                          InputSource;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputEventState*                       State;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBInputActionChangeType                       ChangeType;                                        // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHInputReceiver_ProcessBoatLeftInputAction) == 0x000008, "Wrong alignment on SHInputReceiver_ProcessBoatLeftInputAction");
static_assert(sizeof(SHInputReceiver_ProcessBoatLeftInputAction) == 0x000018, "Wrong size on SHInputReceiver_ProcessBoatLeftInputAction");
static_assert(offsetof(SHInputReceiver_ProcessBoatLeftInputAction, InputSource) == 0x000000, "Member 'SHInputReceiver_ProcessBoatLeftInputAction::InputSource' has a wrong offset!");
static_assert(offsetof(SHInputReceiver_ProcessBoatLeftInputAction, State) == 0x000008, "Member 'SHInputReceiver_ProcessBoatLeftInputAction::State' has a wrong offset!");
static_assert(offsetof(SHInputReceiver_ProcessBoatLeftInputAction, ChangeType) == 0x000010, "Member 'SHInputReceiver_ProcessBoatLeftInputAction::ChangeType' has a wrong offset!");

// Function SHProto.SHInputReceiver.ProcessBoatRightInputAction
// 0x0018 (0x0018 - 0x0000)
struct SHInputReceiver_ProcessBoatRightInputAction final
{
public:
	class UBInputAction*                          InputSource;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputEventState*                       State;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBInputActionChangeType                       ChangeType;                                        // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHInputReceiver_ProcessBoatRightInputAction) == 0x000008, "Wrong alignment on SHInputReceiver_ProcessBoatRightInputAction");
static_assert(sizeof(SHInputReceiver_ProcessBoatRightInputAction) == 0x000018, "Wrong size on SHInputReceiver_ProcessBoatRightInputAction");
static_assert(offsetof(SHInputReceiver_ProcessBoatRightInputAction, InputSource) == 0x000000, "Member 'SHInputReceiver_ProcessBoatRightInputAction::InputSource' has a wrong offset!");
static_assert(offsetof(SHInputReceiver_ProcessBoatRightInputAction, State) == 0x000008, "Member 'SHInputReceiver_ProcessBoatRightInputAction::State' has a wrong offset!");
static_assert(offsetof(SHInputReceiver_ProcessBoatRightInputAction, ChangeType) == 0x000010, "Member 'SHInputReceiver_ProcessBoatRightInputAction::ChangeType' has a wrong offset!");

// Function SHProto.SHInputReceiver.ProcessDodgeInputAction
// 0x0018 (0x0018 - 0x0000)
struct SHInputReceiver_ProcessDodgeInputAction final
{
public:
	class UBInputAction*                          InputSource;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputEventState*                       State;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBInputActionChangeType                       ChangeType;                                        // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHInputReceiver_ProcessDodgeInputAction) == 0x000008, "Wrong alignment on SHInputReceiver_ProcessDodgeInputAction");
static_assert(sizeof(SHInputReceiver_ProcessDodgeInputAction) == 0x000018, "Wrong size on SHInputReceiver_ProcessDodgeInputAction");
static_assert(offsetof(SHInputReceiver_ProcessDodgeInputAction, InputSource) == 0x000000, "Member 'SHInputReceiver_ProcessDodgeInputAction::InputSource' has a wrong offset!");
static_assert(offsetof(SHInputReceiver_ProcessDodgeInputAction, State) == 0x000008, "Member 'SHInputReceiver_ProcessDodgeInputAction::State' has a wrong offset!");
static_assert(offsetof(SHInputReceiver_ProcessDodgeInputAction, ChangeType) == 0x000010, "Member 'SHInputReceiver_ProcessDodgeInputAction::ChangeType' has a wrong offset!");

// Function SHProto.SHInteractionGeneric.GetGeneric
// 0x0008 (0x0008 - 0x0000)
struct SHInteractionGeneric_GetGeneric final
{
public:
	class USHInteractionGenericComponent*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteractionGeneric_GetGeneric) == 0x000008, "Wrong alignment on SHInteractionGeneric_GetGeneric");
static_assert(sizeof(SHInteractionGeneric_GetGeneric) == 0x000008, "Wrong size on SHInteractionGeneric_GetGeneric");
static_assert(offsetof(SHInteractionGeneric_GetGeneric, ReturnValue) == 0x000000, "Member 'SHInteractionGeneric_GetGeneric::ReturnValue' has a wrong offset!");

// Function SHProto.SHInteractionGeneric.StopGenericInteraction
// 0x0001 (0x0001 - 0x0000)
struct SHInteractionGeneric_StopGenericInteraction final
{
public:
	struct FSHInteractionGenericStopData          StopData;                                          // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteractionGeneric_StopGenericInteraction) == 0x000001, "Wrong alignment on SHInteractionGeneric_StopGenericInteraction");
static_assert(sizeof(SHInteractionGeneric_StopGenericInteraction) == 0x000001, "Wrong size on SHInteractionGeneric_StopGenericInteraction");
static_assert(offsetof(SHInteractionGeneric_StopGenericInteraction, StopData) == 0x000000, "Member 'SHInteractionGeneric_StopGenericInteraction::StopData' has a wrong offset!");

// Function SHProto.SHInteractionGeneric.GetGenericConfig
// 0x0050 (0x0050 - 0x0000)
struct SHInteractionGeneric_GetGenericConfig final
{
public:
	struct FSHInteractionGenericConfig            ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteractionGeneric_GetGenericConfig) == 0x000008, "Wrong alignment on SHInteractionGeneric_GetGenericConfig");
static_assert(sizeof(SHInteractionGeneric_GetGenericConfig) == 0x000050, "Wrong size on SHInteractionGeneric_GetGenericConfig");
static_assert(offsetof(SHInteractionGeneric_GetGenericConfig, ReturnValue) == 0x000000, "Member 'SHInteractionGeneric_GetGenericConfig::ReturnValue' has a wrong offset!");

// DelegateFunction SHProto.SHInteractionGenericComponent.GrabbedByCharacterBP__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct SHInteractionGenericComponent_GrabbedByCharacterBP__DelegateSignature final
{
public:
	class USHInteractionGenericComponent*         Generic;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHCharacterPlay*                       Character;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteractionGenericComponent_GrabbedByCharacterBP__DelegateSignature) == 0x000008, "Wrong alignment on SHInteractionGenericComponent_GrabbedByCharacterBP__DelegateSignature");
static_assert(sizeof(SHInteractionGenericComponent_GrabbedByCharacterBP__DelegateSignature) == 0x000010, "Wrong size on SHInteractionGenericComponent_GrabbedByCharacterBP__DelegateSignature");
static_assert(offsetof(SHInteractionGenericComponent_GrabbedByCharacterBP__DelegateSignature, Generic) == 0x000000, "Member 'SHInteractionGenericComponent_GrabbedByCharacterBP__DelegateSignature::Generic' has a wrong offset!");
static_assert(offsetof(SHInteractionGenericComponent_GrabbedByCharacterBP__DelegateSignature, Character) == 0x000008, "Member 'SHInteractionGenericComponent_GrabbedByCharacterBP__DelegateSignature::Character' has a wrong offset!");

// DelegateFunction SHProto.SHInteractionGenericComponent.HeldByCharacterBP__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct SHInteractionGenericComponent_HeldByCharacterBP__DelegateSignature final
{
public:
	class USHInteractionGenericComponent*         Generic;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHCharacterPlay*                       Character;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHInteractionGenericComponent_HeldByCharacterBP__DelegateSignature) == 0x000008, "Wrong alignment on SHInteractionGenericComponent_HeldByCharacterBP__DelegateSignature");
static_assert(sizeof(SHInteractionGenericComponent_HeldByCharacterBP__DelegateSignature) == 0x000018, "Wrong size on SHInteractionGenericComponent_HeldByCharacterBP__DelegateSignature");
static_assert(offsetof(SHInteractionGenericComponent_HeldByCharacterBP__DelegateSignature, Generic) == 0x000000, "Member 'SHInteractionGenericComponent_HeldByCharacterBP__DelegateSignature::Generic' has a wrong offset!");
static_assert(offsetof(SHInteractionGenericComponent_HeldByCharacterBP__DelegateSignature, Character) == 0x000008, "Member 'SHInteractionGenericComponent_HeldByCharacterBP__DelegateSignature::Character' has a wrong offset!");
static_assert(offsetof(SHInteractionGenericComponent_HeldByCharacterBP__DelegateSignature, DeltaTime) == 0x000010, "Member 'SHInteractionGenericComponent_HeldByCharacterBP__DelegateSignature::DeltaTime' has a wrong offset!");

// DelegateFunction SHProto.SHInteractionGenericComponent.ProcessInputBP__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct SHInteractionGenericComponent_ProcessInputBP__DelegateSignature final
{
public:
	class USHInteractionGenericComponent*         Generic;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHCharacterPlay*                       Character;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Input;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameBaseInputDevice                          Device;                                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHInteractionGenericComponent_ProcessInputBP__DelegateSignature) == 0x000008, "Wrong alignment on SHInteractionGenericComponent_ProcessInputBP__DelegateSignature");
static_assert(sizeof(SHInteractionGenericComponent_ProcessInputBP__DelegateSignature) == 0x000028, "Wrong size on SHInteractionGenericComponent_ProcessInputBP__DelegateSignature");
static_assert(offsetof(SHInteractionGenericComponent_ProcessInputBP__DelegateSignature, Generic) == 0x000000, "Member 'SHInteractionGenericComponent_ProcessInputBP__DelegateSignature::Generic' has a wrong offset!");
static_assert(offsetof(SHInteractionGenericComponent_ProcessInputBP__DelegateSignature, Character) == 0x000008, "Member 'SHInteractionGenericComponent_ProcessInputBP__DelegateSignature::Character' has a wrong offset!");
static_assert(offsetof(SHInteractionGenericComponent_ProcessInputBP__DelegateSignature, Input) == 0x000010, "Member 'SHInteractionGenericComponent_ProcessInputBP__DelegateSignature::Input' has a wrong offset!");
static_assert(offsetof(SHInteractionGenericComponent_ProcessInputBP__DelegateSignature, Device) == 0x000020, "Member 'SHInteractionGenericComponent_ProcessInputBP__DelegateSignature::Device' has a wrong offset!");

// DelegateFunction SHProto.SHInteractionGenericComponent.ReleasedByCharacterBP__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct SHInteractionGenericComponent_ReleasedByCharacterBP__DelegateSignature final
{
public:
	class USHInteractionGenericComponent*         Generic;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHCharacterPlay*                       Character;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteractionGenericComponent_ReleasedByCharacterBP__DelegateSignature) == 0x000008, "Wrong alignment on SHInteractionGenericComponent_ReleasedByCharacterBP__DelegateSignature");
static_assert(sizeof(SHInteractionGenericComponent_ReleasedByCharacterBP__DelegateSignature) == 0x000010, "Wrong size on SHInteractionGenericComponent_ReleasedByCharacterBP__DelegateSignature");
static_assert(offsetof(SHInteractionGenericComponent_ReleasedByCharacterBP__DelegateSignature, Generic) == 0x000000, "Member 'SHInteractionGenericComponent_ReleasedByCharacterBP__DelegateSignature::Generic' has a wrong offset!");
static_assert(offsetof(SHInteractionGenericComponent_ReleasedByCharacterBP__DelegateSignature, Character) == 0x000008, "Member 'SHInteractionGenericComponent_ReleasedByCharacterBP__DelegateSignature::Character' has a wrong offset!");

// Function SHProto.SHInteractionGenericComponent.GetBehaviour
// 0x0001 (0x0001 - 0x0000)
struct SHInteractionGenericComponent_GetBehaviour final
{
public:
	ESHInteractionGenericBehaviour                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteractionGenericComponent_GetBehaviour) == 0x000001, "Wrong alignment on SHInteractionGenericComponent_GetBehaviour");
static_assert(sizeof(SHInteractionGenericComponent_GetBehaviour) == 0x000001, "Wrong size on SHInteractionGenericComponent_GetBehaviour");
static_assert(offsetof(SHInteractionGenericComponent_GetBehaviour, ReturnValue) == 0x000000, "Member 'SHInteractionGenericComponent_GetBehaviour::ReturnValue' has a wrong offset!");

// Function SHProto.SHInteractionGenericComponent.IsClickable
// 0x0001 (0x0001 - 0x0000)
struct SHInteractionGenericComponent_IsClickable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteractionGenericComponent_IsClickable) == 0x000001, "Wrong alignment on SHInteractionGenericComponent_IsClickable");
static_assert(sizeof(SHInteractionGenericComponent_IsClickable) == 0x000001, "Wrong size on SHInteractionGenericComponent_IsClickable");
static_assert(offsetof(SHInteractionGenericComponent_IsClickable, ReturnValue) == 0x000000, "Member 'SHInteractionGenericComponent_IsClickable::ReturnValue' has a wrong offset!");

// Function SHProto.SHInteractionGenericComponent.IsHeldByCharacter
// 0x0001 (0x0001 - 0x0000)
struct SHInteractionGenericComponent_IsHeldByCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteractionGenericComponent_IsHeldByCharacter) == 0x000001, "Wrong alignment on SHInteractionGenericComponent_IsHeldByCharacter");
static_assert(sizeof(SHInteractionGenericComponent_IsHeldByCharacter) == 0x000001, "Wrong size on SHInteractionGenericComponent_IsHeldByCharacter");
static_assert(offsetof(SHInteractionGenericComponent_IsHeldByCharacter, ReturnValue) == 0x000000, "Member 'SHInteractionGenericComponent_IsHeldByCharacter::ReturnValue' has a wrong offset!");

// Function SHProto.SHInteractionGenericComponent.IsHoldable
// 0x0001 (0x0001 - 0x0000)
struct SHInteractionGenericComponent_IsHoldable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteractionGenericComponent_IsHoldable) == 0x000001, "Wrong alignment on SHInteractionGenericComponent_IsHoldable");
static_assert(sizeof(SHInteractionGenericComponent_IsHoldable) == 0x000001, "Wrong size on SHInteractionGenericComponent_IsHoldable");
static_assert(offsetof(SHInteractionGenericComponent_IsHoldable, ReturnValue) == 0x000000, "Member 'SHInteractionGenericComponent_IsHoldable::ReturnValue' has a wrong offset!");

// Function SHProto.SHInteractionGenericComponent.IsUsed
// 0x0001 (0x0001 - 0x0000)
struct SHInteractionGenericComponent_IsUsed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteractionGenericComponent_IsUsed) == 0x000001, "Wrong alignment on SHInteractionGenericComponent_IsUsed");
static_assert(sizeof(SHInteractionGenericComponent_IsUsed) == 0x000001, "Wrong size on SHInteractionGenericComponent_IsUsed");
static_assert(offsetof(SHInteractionGenericComponent_IsUsed, ReturnValue) == 0x000000, "Member 'SHInteractionGenericComponent_IsUsed::ReturnValue' has a wrong offset!");

// Function SHProto.SHInteractionIconComponent.SetFriendActor
// 0x0008 (0x0008 - 0x0000)
struct SHInteractionIconComponent_SetFriendActor final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteractionIconComponent_SetFriendActor) == 0x000008, "Wrong alignment on SHInteractionIconComponent_SetFriendActor");
static_assert(sizeof(SHInteractionIconComponent_SetFriendActor) == 0x000008, "Wrong size on SHInteractionIconComponent_SetFriendActor");
static_assert(offsetof(SHInteractionIconComponent_SetFriendActor, Actor) == 0x000000, "Member 'SHInteractionIconComponent_SetFriendActor::Actor' has a wrong offset!");

// Function SHProto.SHInteractionIconComponent.SetState
// 0x0001 (0x0001 - 0x0000)
struct SHInteractionIconComponent_SetState final
{
public:
	ESHInteractionIconState                       NewState;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteractionIconComponent_SetState) == 0x000001, "Wrong alignment on SHInteractionIconComponent_SetState");
static_assert(sizeof(SHInteractionIconComponent_SetState) == 0x000001, "Wrong size on SHInteractionIconComponent_SetState");
static_assert(offsetof(SHInteractionIconComponent_SetState, NewState) == 0x000000, "Member 'SHInteractionIconComponent_SetState::NewState' has a wrong offset!");

// Function SHProto.SHInteractionIconComponent.CalculateDesiredScale
// 0x0004 (0x0004 - 0x0000)
struct SHInteractionIconComponent_CalculateDesiredScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteractionIconComponent_CalculateDesiredScale) == 0x000004, "Wrong alignment on SHInteractionIconComponent_CalculateDesiredScale");
static_assert(sizeof(SHInteractionIconComponent_CalculateDesiredScale) == 0x000004, "Wrong size on SHInteractionIconComponent_CalculateDesiredScale");
static_assert(offsetof(SHInteractionIconComponent_CalculateDesiredScale, ReturnValue) == 0x000000, "Member 'SHInteractionIconComponent_CalculateDesiredScale::ReturnValue' has a wrong offset!");

// Function SHProto.SHInteractionIconComponent.GetFriendActor
// 0x0008 (0x0008 - 0x0000)
struct SHInteractionIconComponent_GetFriendActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteractionIconComponent_GetFriendActor) == 0x000008, "Wrong alignment on SHInteractionIconComponent_GetFriendActor");
static_assert(sizeof(SHInteractionIconComponent_GetFriendActor) == 0x000008, "Wrong size on SHInteractionIconComponent_GetFriendActor");
static_assert(offsetof(SHInteractionIconComponent_GetFriendActor, ReturnValue) == 0x000000, "Member 'SHInteractionIconComponent_GetFriendActor::ReturnValue' has a wrong offset!");

// Function SHProto.SHInteractionIconComponent.GetObservedActor
// 0x0008 (0x0008 - 0x0000)
struct SHInteractionIconComponent_GetObservedActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteractionIconComponent_GetObservedActor) == 0x000008, "Wrong alignment on SHInteractionIconComponent_GetObservedActor");
static_assert(sizeof(SHInteractionIconComponent_GetObservedActor) == 0x000008, "Wrong size on SHInteractionIconComponent_GetObservedActor");
static_assert(offsetof(SHInteractionIconComponent_GetObservedActor, ReturnValue) == 0x000000, "Member 'SHInteractionIconComponent_GetObservedActor::ReturnValue' has a wrong offset!");

// Function SHProto.SHInteractionIconComponent.GetTargetOpacity
// 0x0004 (0x0004 - 0x0000)
struct SHInteractionIconComponent_GetTargetOpacity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteractionIconComponent_GetTargetOpacity) == 0x000004, "Wrong alignment on SHInteractionIconComponent_GetTargetOpacity");
static_assert(sizeof(SHInteractionIconComponent_GetTargetOpacity) == 0x000004, "Wrong size on SHInteractionIconComponent_GetTargetOpacity");
static_assert(offsetof(SHInteractionIconComponent_GetTargetOpacity, ReturnValue) == 0x000000, "Member 'SHInteractionIconComponent_GetTargetOpacity::ReturnValue' has a wrong offset!");

// Function SHProto.SHInteractionIconComponent.HasFriendActor
// 0x0001 (0x0001 - 0x0000)
struct SHInteractionIconComponent_HasFriendActor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteractionIconComponent_HasFriendActor) == 0x000001, "Wrong alignment on SHInteractionIconComponent_HasFriendActor");
static_assert(sizeof(SHInteractionIconComponent_HasFriendActor) == 0x000001, "Wrong size on SHInteractionIconComponent_HasFriendActor");
static_assert(offsetof(SHInteractionIconComponent_HasFriendActor, ReturnValue) == 0x000000, "Member 'SHInteractionIconComponent_HasFriendActor::ReturnValue' has a wrong offset!");

// Function SHProto.SHInteractionIconComponent.HasObservedActor
// 0x0001 (0x0001 - 0x0000)
struct SHInteractionIconComponent_HasObservedActor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteractionIconComponent_HasObservedActor) == 0x000001, "Wrong alignment on SHInteractionIconComponent_HasObservedActor");
static_assert(sizeof(SHInteractionIconComponent_HasObservedActor) == 0x000001, "Wrong size on SHInteractionIconComponent_HasObservedActor");
static_assert(offsetof(SHInteractionIconComponent_HasObservedActor, ReturnValue) == 0x000000, "Member 'SHInteractionIconComponent_HasObservedActor::ReturnValue' has a wrong offset!");

// Function SHProto.SHInteractionManagerComponent.BindProximityDetector
// 0x0008 (0x0008 - 0x0000)
struct SHInteractionManagerComponent_BindProximityDetector final
{
public:
	const class UShapeComponent*                  NewProximityDetector;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteractionManagerComponent_BindProximityDetector) == 0x000008, "Wrong alignment on SHInteractionManagerComponent_BindProximityDetector");
static_assert(sizeof(SHInteractionManagerComponent_BindProximityDetector) == 0x000008, "Wrong size on SHInteractionManagerComponent_BindProximityDetector");
static_assert(offsetof(SHInteractionManagerComponent_BindProximityDetector, NewProximityDetector) == 0x000000, "Member 'SHInteractionManagerComponent_BindProximityDetector::NewProximityDetector' has a wrong offset!");

// Function SHProto.SHInteractionManagerComponent.BindVisibilityDetector
// 0x0008 (0x0008 - 0x0000)
struct SHInteractionManagerComponent_BindVisibilityDetector final
{
public:
	const class USHRaycastDetectableComponent*    NewVisibilityDetector;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteractionManagerComponent_BindVisibilityDetector) == 0x000008, "Wrong alignment on SHInteractionManagerComponent_BindVisibilityDetector");
static_assert(sizeof(SHInteractionManagerComponent_BindVisibilityDetector) == 0x000008, "Wrong size on SHInteractionManagerComponent_BindVisibilityDetector");
static_assert(offsetof(SHInteractionManagerComponent_BindVisibilityDetector, NewVisibilityDetector) == 0x000000, "Member 'SHInteractionManagerComponent_BindVisibilityDetector::NewVisibilityDetector' has a wrong offset!");

// DelegateFunction SHProto.SHInteractionManagerComponent.InteractionManagerInitializeBP__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHInteractionManagerComponent_InteractionManagerInitializeBP__DelegateSignature final
{
public:
	class USHInteractionManagerComponent*         Manager;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteractionManagerComponent_InteractionManagerInitializeBP__DelegateSignature) == 0x000008, "Wrong alignment on SHInteractionManagerComponent_InteractionManagerInitializeBP__DelegateSignature");
static_assert(sizeof(SHInteractionManagerComponent_InteractionManagerInitializeBP__DelegateSignature) == 0x000008, "Wrong size on SHInteractionManagerComponent_InteractionManagerInitializeBP__DelegateSignature");
static_assert(offsetof(SHInteractionManagerComponent_InteractionManagerInitializeBP__DelegateSignature, Manager) == 0x000000, "Member 'SHInteractionManagerComponent_InteractionManagerInitializeBP__DelegateSignature::Manager' has a wrong offset!");

// Function SHProto.SHInteractionManagerComponent.ProcessProximityBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct SHInteractionManagerComponent_ProcessProximityBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FromSweep;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteractionManagerComponent_ProcessProximityBeginOverlap) == 0x000008, "Wrong alignment on SHInteractionManagerComponent_ProcessProximityBeginOverlap");
static_assert(sizeof(SHInteractionManagerComponent_ProcessProximityBeginOverlap) == 0x000108, "Wrong size on SHInteractionManagerComponent_ProcessProximityBeginOverlap");
static_assert(offsetof(SHInteractionManagerComponent_ProcessProximityBeginOverlap, OverlappedComponent) == 0x000000, "Member 'SHInteractionManagerComponent_ProcessProximityBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SHInteractionManagerComponent_ProcessProximityBeginOverlap, OtherActor) == 0x000008, "Member 'SHInteractionManagerComponent_ProcessProximityBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SHInteractionManagerComponent_ProcessProximityBeginOverlap, OtherComponent) == 0x000010, "Member 'SHInteractionManagerComponent_ProcessProximityBeginOverlap::OtherComponent' has a wrong offset!");
static_assert(offsetof(SHInteractionManagerComponent_ProcessProximityBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'SHInteractionManagerComponent_ProcessProximityBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SHInteractionManagerComponent_ProcessProximityBeginOverlap, FromSweep) == 0x00001C, "Member 'SHInteractionManagerComponent_ProcessProximityBeginOverlap::FromSweep' has a wrong offset!");
static_assert(offsetof(SHInteractionManagerComponent_ProcessProximityBeginOverlap, SweepResult) == 0x000020, "Member 'SHInteractionManagerComponent_ProcessProximityBeginOverlap::SweepResult' has a wrong offset!");

// Function SHProto.SHInteractionManagerComponent.ProcessProximityEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct SHInteractionManagerComponent_ProcessProximityEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHInteractionManagerComponent_ProcessProximityEndOverlap) == 0x000008, "Wrong alignment on SHInteractionManagerComponent_ProcessProximityEndOverlap");
static_assert(sizeof(SHInteractionManagerComponent_ProcessProximityEndOverlap) == 0x000020, "Wrong size on SHInteractionManagerComponent_ProcessProximityEndOverlap");
static_assert(offsetof(SHInteractionManagerComponent_ProcessProximityEndOverlap, OverlappedComponent) == 0x000000, "Member 'SHInteractionManagerComponent_ProcessProximityEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SHInteractionManagerComponent_ProcessProximityEndOverlap, OtherActor) == 0x000008, "Member 'SHInteractionManagerComponent_ProcessProximityEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SHInteractionManagerComponent_ProcessProximityEndOverlap, OtherComponent) == 0x000010, "Member 'SHInteractionManagerComponent_ProcessProximityEndOverlap::OtherComponent' has a wrong offset!");
static_assert(offsetof(SHInteractionManagerComponent_ProcessProximityEndOverlap, OtherBodyIndex) == 0x000018, "Member 'SHInteractionManagerComponent_ProcessProximityEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function SHProto.SHInteractionManagerComponent.RegisterGeneric
// 0x0030 (0x0030 - 0x0000)
struct SHInteractionManagerComponent_RegisterGeneric final
{
public:
	const class USHInteractionGenericComponent*   Generic;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USHRaycastDetectableComponent*    Detectable;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USHInteractionIconComponent*      Icon;                                              // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USHInteractionIconSlotComponent*> Slots;                                             // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHInteractionManagerComponent_RegisterGeneric) == 0x000008, "Wrong alignment on SHInteractionManagerComponent_RegisterGeneric");
static_assert(sizeof(SHInteractionManagerComponent_RegisterGeneric) == 0x000030, "Wrong size on SHInteractionManagerComponent_RegisterGeneric");
static_assert(offsetof(SHInteractionManagerComponent_RegisterGeneric, Generic) == 0x000000, "Member 'SHInteractionManagerComponent_RegisterGeneric::Generic' has a wrong offset!");
static_assert(offsetof(SHInteractionManagerComponent_RegisterGeneric, Detectable) == 0x000008, "Member 'SHInteractionManagerComponent_RegisterGeneric::Detectable' has a wrong offset!");
static_assert(offsetof(SHInteractionManagerComponent_RegisterGeneric, Icon) == 0x000010, "Member 'SHInteractionManagerComponent_RegisterGeneric::Icon' has a wrong offset!");
static_assert(offsetof(SHInteractionManagerComponent_RegisterGeneric, Slots) == 0x000018, "Member 'SHInteractionManagerComponent_RegisterGeneric::Slots' has a wrong offset!");
static_assert(offsetof(SHInteractionManagerComponent_RegisterGeneric, ReturnValue) == 0x000028, "Member 'SHInteractionManagerComponent_RegisterGeneric::ReturnValue' has a wrong offset!");

// Function SHProto.SHInteractionManagerComponent.SetDetectionEnabled
// 0x0010 (0x0010 - 0x0000)
struct SHInteractionManagerComponent_SetDetectionEnabled final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Enabler;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteractionManagerComponent_SetDetectionEnabled) == 0x000008, "Wrong alignment on SHInteractionManagerComponent_SetDetectionEnabled");
static_assert(sizeof(SHInteractionManagerComponent_SetDetectionEnabled) == 0x000010, "Wrong size on SHInteractionManagerComponent_SetDetectionEnabled");
static_assert(offsetof(SHInteractionManagerComponent_SetDetectionEnabled, Enable) == 0x000000, "Member 'SHInteractionManagerComponent_SetDetectionEnabled::Enable' has a wrong offset!");
static_assert(offsetof(SHInteractionManagerComponent_SetDetectionEnabled, Enabler) == 0x000008, "Member 'SHInteractionManagerComponent_SetDetectionEnabled::Enabler' has a wrong offset!");

// Function SHProto.SHInteractionManagerComponent.SetObjectDetectionEnabled
// 0x0018 (0x0018 - 0x0000)
struct SHInteractionManagerComponent_SetObjectDetectionEnabled final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Enabler;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteractionManagerComponent_SetObjectDetectionEnabled) == 0x000008, "Wrong alignment on SHInteractionManagerComponent_SetObjectDetectionEnabled");
static_assert(sizeof(SHInteractionManagerComponent_SetObjectDetectionEnabled) == 0x000018, "Wrong size on SHInteractionManagerComponent_SetObjectDetectionEnabled");
static_assert(offsetof(SHInteractionManagerComponent_SetObjectDetectionEnabled, Object) == 0x000000, "Member 'SHInteractionManagerComponent_SetObjectDetectionEnabled::Object' has a wrong offset!");
static_assert(offsetof(SHInteractionManagerComponent_SetObjectDetectionEnabled, Enable) == 0x000008, "Member 'SHInteractionManagerComponent_SetObjectDetectionEnabled::Enable' has a wrong offset!");
static_assert(offsetof(SHInteractionManagerComponent_SetObjectDetectionEnabled, Enabler) == 0x000010, "Member 'SHInteractionManagerComponent_SetObjectDetectionEnabled::Enabler' has a wrong offset!");

// Function SHProto.SHInteractionManagerComponent.HasActiveInteraction
// 0x0001 (0x0001 - 0x0000)
struct SHInteractionManagerComponent_HasActiveInteraction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteractionManagerComponent_HasActiveInteraction) == 0x000001, "Wrong alignment on SHInteractionManagerComponent_HasActiveInteraction");
static_assert(sizeof(SHInteractionManagerComponent_HasActiveInteraction) == 0x000001, "Wrong size on SHInteractionManagerComponent_HasActiveInteraction");
static_assert(offsetof(SHInteractionManagerComponent_HasActiveInteraction, ReturnValue) == 0x000000, "Member 'SHInteractionManagerComponent_HasActiveInteraction::ReturnValue' has a wrong offset!");

// Function SHProto.SHInteractionManagerComponent.HasUsableActorNearby
// 0x0001 (0x0001 - 0x0000)
struct SHInteractionManagerComponent_HasUsableActorNearby final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteractionManagerComponent_HasUsableActorNearby) == 0x000001, "Wrong alignment on SHInteractionManagerComponent_HasUsableActorNearby");
static_assert(sizeof(SHInteractionManagerComponent_HasUsableActorNearby) == 0x000001, "Wrong size on SHInteractionManagerComponent_HasUsableActorNearby");
static_assert(offsetof(SHInteractionManagerComponent_HasUsableActorNearby, ReturnValue) == 0x000000, "Member 'SHInteractionManagerComponent_HasUsableActorNearby::ReturnValue' has a wrong offset!");

// Function SHProto.SHInteractionManagerComponent.IsDetectionEnabled
// 0x0001 (0x0001 - 0x0000)
struct SHInteractionManagerComponent_IsDetectionEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteractionManagerComponent_IsDetectionEnabled) == 0x000001, "Wrong alignment on SHInteractionManagerComponent_IsDetectionEnabled");
static_assert(sizeof(SHInteractionManagerComponent_IsDetectionEnabled) == 0x000001, "Wrong size on SHInteractionManagerComponent_IsDetectionEnabled");
static_assert(offsetof(SHInteractionManagerComponent_IsDetectionEnabled, ReturnValue) == 0x000000, "Member 'SHInteractionManagerComponent_IsDetectionEnabled::ReturnValue' has a wrong offset!");

// Function SHProto.SHInteractionStarter.TryStartInteraction
// 0x0020 (0x0020 - 0x0000)
struct SHInteractionStarter_TryStartInteraction final
{
public:
	TScriptInterface<class ISHInteraction>        Interaction;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ISHInteractionSlot>    ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInteractionStarter_TryStartInteraction) == 0x000008, "Wrong alignment on SHInteractionStarter_TryStartInteraction");
static_assert(sizeof(SHInteractionStarter_TryStartInteraction) == 0x000020, "Wrong size on SHInteractionStarter_TryStartInteraction");
static_assert(offsetof(SHInteractionStarter_TryStartInteraction, Interaction) == 0x000000, "Member 'SHInteractionStarter_TryStartInteraction::Interaction' has a wrong offset!");
static_assert(offsetof(SHInteractionStarter_TryStartInteraction, ReturnValue) == 0x000010, "Member 'SHInteractionStarter_TryStartInteraction::ReturnValue' has a wrong offset!");

// Function SHProto.SHInventoryCategoryWidget.SetCategoryWithNewItems
// 0x0001 (0x0001 - 0x0000)
struct SHInventoryCategoryWidget_SetCategoryWithNewItems final
{
public:
	bool                                          InValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInventoryCategoryWidget_SetCategoryWithNewItems) == 0x000001, "Wrong alignment on SHInventoryCategoryWidget_SetCategoryWithNewItems");
static_assert(sizeof(SHInventoryCategoryWidget_SetCategoryWithNewItems) == 0x000001, "Wrong size on SHInventoryCategoryWidget_SetCategoryWithNewItems");
static_assert(offsetof(SHInventoryCategoryWidget_SetCategoryWithNewItems, InValue) == 0x000000, "Member 'SHInventoryCategoryWidget_SetCategoryWithNewItems::InValue' has a wrong offset!");

// Function SHProto.SHInventoryCategoryWidget.SetHoveredCategory
// 0x0001 (0x0001 - 0x0000)
struct SHInventoryCategoryWidget_SetHoveredCategory final
{
public:
	bool                                          IsHovered_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInventoryCategoryWidget_SetHoveredCategory) == 0x000001, "Wrong alignment on SHInventoryCategoryWidget_SetHoveredCategory");
static_assert(sizeof(SHInventoryCategoryWidget_SetHoveredCategory) == 0x000001, "Wrong size on SHInventoryCategoryWidget_SetHoveredCategory");
static_assert(offsetof(SHInventoryCategoryWidget_SetHoveredCategory, IsHovered_0) == 0x000000, "Member 'SHInventoryCategoryWidget_SetHoveredCategory::IsHovered_0' has a wrong offset!");

// Function SHProto.SHInventoryCategoryWidget.SetHoveredSubCategory
// 0x0001 (0x0001 - 0x0000)
struct SHInventoryCategoryWidget_SetHoveredSubCategory final
{
public:
	bool                                          IsHovered_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInventoryCategoryWidget_SetHoveredSubCategory) == 0x000001, "Wrong alignment on SHInventoryCategoryWidget_SetHoveredSubCategory");
static_assert(sizeof(SHInventoryCategoryWidget_SetHoveredSubCategory) == 0x000001, "Wrong size on SHInventoryCategoryWidget_SetHoveredSubCategory");
static_assert(offsetof(SHInventoryCategoryWidget_SetHoveredSubCategory, IsHovered_0) == 0x000000, "Member 'SHInventoryCategoryWidget_SetHoveredSubCategory::IsHovered_0' has a wrong offset!");

// Function SHProto.SHInventoryRenderer.GetRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct SHInventoryRenderer_GetRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInventoryRenderer_GetRenderTarget) == 0x000008, "Wrong alignment on SHInventoryRenderer_GetRenderTarget");
static_assert(sizeof(SHInventoryRenderer_GetRenderTarget) == 0x000008, "Wrong size on SHInventoryRenderer_GetRenderTarget");
static_assert(offsetof(SHInventoryRenderer_GetRenderTarget, ReturnValue) == 0x000000, "Member 'SHInventoryRenderer_GetRenderTarget::ReturnValue' has a wrong offset!");

// Function SHProto.SHInventoryRenderer.GetUserWidgetObject
// 0x0008 (0x0008 - 0x0000)
struct SHInventoryRenderer_GetUserWidgetObject final
{
public:
	class USHGameplaySectionBaseWidget*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHInventoryRenderer_GetUserWidgetObject) == 0x000008, "Wrong alignment on SHInventoryRenderer_GetUserWidgetObject");
static_assert(sizeof(SHInventoryRenderer_GetUserWidgetObject) == 0x000008, "Wrong size on SHInventoryRenderer_GetUserWidgetObject");
static_assert(offsetof(SHInventoryRenderer_GetUserWidgetObject, ReturnValue) == 0x000000, "Member 'SHInventoryRenderer_GetUserWidgetObject::ReturnValue' has a wrong offset!");

// Function SHProto.SHInWaterVolume.IsPointWithin
// 0x0020 (0x0020 - 0x0000)
struct SHInWaterVolume_IsPointWithin final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHInWaterVolume_IsPointWithin) == 0x000008, "Wrong alignment on SHInWaterVolume_IsPointWithin");
static_assert(sizeof(SHInWaterVolume_IsPointWithin) == 0x000020, "Wrong size on SHInWaterVolume_IsPointWithin");
static_assert(offsetof(SHInWaterVolume_IsPointWithin, Point) == 0x000000, "Member 'SHInWaterVolume_IsPointWithin::Point' has a wrong offset!");
static_assert(offsetof(SHInWaterVolume_IsPointWithin, ReturnValue) == 0x000018, "Member 'SHInWaterVolume_IsPointWithin::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemAnimInterface.InvestigationFlipSettingsChanged
// 0x0010 (0x0010 - 0x0000)
struct SHItemAnimInterface_InvestigationFlipSettingsChanged final
{
public:
	float                                         InvestigationFlipPlayRate;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InvestigationFlipStartTime;                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InvestigationFlipSide;                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InvestigationFlip;                                 // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHItemAnimInterface_InvestigationFlipSettingsChanged) == 0x000004, "Wrong alignment on SHItemAnimInterface_InvestigationFlipSettingsChanged");
static_assert(sizeof(SHItemAnimInterface_InvestigationFlipSettingsChanged) == 0x000010, "Wrong size on SHItemAnimInterface_InvestigationFlipSettingsChanged");
static_assert(offsetof(SHItemAnimInterface_InvestigationFlipSettingsChanged, InvestigationFlipPlayRate) == 0x000000, "Member 'SHItemAnimInterface_InvestigationFlipSettingsChanged::InvestigationFlipPlayRate' has a wrong offset!");
static_assert(offsetof(SHItemAnimInterface_InvestigationFlipSettingsChanged, InvestigationFlipStartTime) == 0x000004, "Member 'SHItemAnimInterface_InvestigationFlipSettingsChanged::InvestigationFlipStartTime' has a wrong offset!");
static_assert(offsetof(SHItemAnimInterface_InvestigationFlipSettingsChanged, InvestigationFlipSide) == 0x000008, "Member 'SHItemAnimInterface_InvestigationFlipSettingsChanged::InvestigationFlipSide' has a wrong offset!");
static_assert(offsetof(SHItemAnimInterface_InvestigationFlipSettingsChanged, InvestigationFlip) == 0x00000C, "Member 'SHItemAnimInterface_InvestigationFlipSettingsChanged::InvestigationFlip' has a wrong offset!");

// Function SHProto.SHItemAnimInterface.InvestigationInputChanged
// 0x0004 (0x0004 - 0x0000)
struct SHItemAnimInterface_InvestigationInputChanged final
{
public:
	float                                         InvestigationAnimationFrame;                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemAnimInterface_InvestigationInputChanged) == 0x000004, "Wrong alignment on SHItemAnimInterface_InvestigationInputChanged");
static_assert(sizeof(SHItemAnimInterface_InvestigationInputChanged) == 0x000004, "Wrong size on SHItemAnimInterface_InvestigationInputChanged");
static_assert(offsetof(SHItemAnimInterface_InvestigationInputChanged, InvestigationAnimationFrame) == 0x000000, "Member 'SHItemAnimInterface_InvestigationInputChanged::InvestigationAnimationFrame' has a wrong offset!");

// Function SHProto.SHItemAnimInterface.InvestigationTypeSettingChanged
// 0x0001 (0x0001 - 0x0000)
struct SHItemAnimInterface_InvestigationTypeSettingChanged final
{
public:
	EItemInvestigationType                        InvestigationType;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemAnimInterface_InvestigationTypeSettingChanged) == 0x000001, "Wrong alignment on SHItemAnimInterface_InvestigationTypeSettingChanged");
static_assert(sizeof(SHItemAnimInterface_InvestigationTypeSettingChanged) == 0x000001, "Wrong size on SHItemAnimInterface_InvestigationTypeSettingChanged");
static_assert(offsetof(SHItemAnimInterface_InvestigationTypeSettingChanged, InvestigationType) == 0x000000, "Member 'SHItemAnimInterface_InvestigationTypeSettingChanged::InvestigationType' has a wrong offset!");

// Function SHProto.SHItemAnimInterface.PlayMainInvestigation
// 0x0001 (0x0001 - 0x0000)
struct SHItemAnimInterface_PlayMainInvestigation final
{
public:
	EItemInvestigationType                        InvestigationType;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemAnimInterface_PlayMainInvestigation) == 0x000001, "Wrong alignment on SHItemAnimInterface_PlayMainInvestigation");
static_assert(sizeof(SHItemAnimInterface_PlayMainInvestigation) == 0x000001, "Wrong size on SHItemAnimInterface_PlayMainInvestigation");
static_assert(offsetof(SHItemAnimInterface_PlayMainInvestigation, InvestigationType) == 0x000000, "Member 'SHItemAnimInterface_PlayMainInvestigation::InvestigationType' has a wrong offset!");

// Function SHProto.SHItemExeCameraManagerComponent.SetCameraMovementBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHItemExeCameraManagerComponent_SetCameraMovementBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemExeCameraManagerComponent_SetCameraMovementBlocked) == 0x000008, "Wrong alignment on SHItemExeCameraManagerComponent_SetCameraMovementBlocked");
static_assert(sizeof(SHItemExeCameraManagerComponent_SetCameraMovementBlocked) == 0x000010, "Wrong size on SHItemExeCameraManagerComponent_SetCameraMovementBlocked");
static_assert(offsetof(SHItemExeCameraManagerComponent_SetCameraMovementBlocked, Blocked) == 0x000000, "Member 'SHItemExeCameraManagerComponent_SetCameraMovementBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHItemExeCameraManagerComponent_SetCameraMovementBlocked, Object) == 0x000008, "Member 'SHItemExeCameraManagerComponent_SetCameraMovementBlocked::Object' has a wrong offset!");

// Function SHProto.SHItemExeCameraManagerComponent.SetCameraZoomBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHItemExeCameraManagerComponent_SetCameraZoomBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemExeCameraManagerComponent_SetCameraZoomBlocked) == 0x000008, "Wrong alignment on SHItemExeCameraManagerComponent_SetCameraZoomBlocked");
static_assert(sizeof(SHItemExeCameraManagerComponent_SetCameraZoomBlocked) == 0x000010, "Wrong size on SHItemExeCameraManagerComponent_SetCameraZoomBlocked");
static_assert(offsetof(SHItemExeCameraManagerComponent_SetCameraZoomBlocked, Blocked) == 0x000000, "Member 'SHItemExeCameraManagerComponent_SetCameraZoomBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHItemExeCameraManagerComponent_SetCameraZoomBlocked, Object) == 0x000008, "Member 'SHItemExeCameraManagerComponent_SetCameraZoomBlocked::Object' has a wrong offset!");

// Function SHProto.SHItemExeCameraManagerComponent.IsCameraMovementBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHItemExeCameraManagerComponent_IsCameraMovementBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemExeCameraManagerComponent_IsCameraMovementBlocked) == 0x000001, "Wrong alignment on SHItemExeCameraManagerComponent_IsCameraMovementBlocked");
static_assert(sizeof(SHItemExeCameraManagerComponent_IsCameraMovementBlocked) == 0x000001, "Wrong size on SHItemExeCameraManagerComponent_IsCameraMovementBlocked");
static_assert(offsetof(SHItemExeCameraManagerComponent_IsCameraMovementBlocked, ReturnValue) == 0x000000, "Member 'SHItemExeCameraManagerComponent_IsCameraMovementBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemExeCameraManagerComponent.IsCameraZoomBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHItemExeCameraManagerComponent_IsCameraZoomBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemExeCameraManagerComponent_IsCameraZoomBlocked) == 0x000001, "Wrong alignment on SHItemExeCameraManagerComponent_IsCameraZoomBlocked");
static_assert(sizeof(SHItemExeCameraManagerComponent_IsCameraZoomBlocked) == 0x000001, "Wrong size on SHItemExeCameraManagerComponent_IsCameraZoomBlocked");
static_assert(offsetof(SHItemExeCameraManagerComponent_IsCameraZoomBlocked, ReturnValue) == 0x000000, "Member 'SHItemExeCameraManagerComponent_IsCameraZoomBlocked::ReturnValue' has a wrong offset!");

// DelegateFunction SHProto.SHItemExecutiveBase.SHItemExecutiveBlueprintEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHItemExecutiveBase_SHItemExecutiveBlueprintEvent__DelegateSignature final
{
public:
	class ASHItemExecutiveBase*                   ExecutivePtr;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemExecutiveBase_SHItemExecutiveBlueprintEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHItemExecutiveBase_SHItemExecutiveBlueprintEvent__DelegateSignature");
static_assert(sizeof(SHItemExecutiveBase_SHItemExecutiveBlueprintEvent__DelegateSignature) == 0x000008, "Wrong size on SHItemExecutiveBase_SHItemExecutiveBlueprintEvent__DelegateSignature");
static_assert(offsetof(SHItemExecutiveBase_SHItemExecutiveBlueprintEvent__DelegateSignature, ExecutivePtr) == 0x000000, "Member 'SHItemExecutiveBase_SHItemExecutiveBlueprintEvent__DelegateSignature::ExecutivePtr' has a wrong offset!");

// Function SHProto.SHItemExecutiveBase.GetItemContextActor
// 0x0008 (0x0008 - 0x0000)
struct SHItemExecutiveBase_GetItemContextActor final
{
public:
	class ASHItemBase*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemExecutiveBase_GetItemContextActor) == 0x000008, "Wrong alignment on SHItemExecutiveBase_GetItemContextActor");
static_assert(sizeof(SHItemExecutiveBase_GetItemContextActor) == 0x000008, "Wrong size on SHItemExecutiveBase_GetItemContextActor");
static_assert(offsetof(SHItemExecutiveBase_GetItemContextActor, ReturnValue) == 0x000000, "Member 'SHItemExecutiveBase_GetItemContextActor::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemInvestigationExecutive.SetAllActionsBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHItemInvestigationExecutive_SetAllActionsBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemInvestigationExecutive_SetAllActionsBlocked) == 0x000008, "Wrong alignment on SHItemInvestigationExecutive_SetAllActionsBlocked");
static_assert(sizeof(SHItemInvestigationExecutive_SetAllActionsBlocked) == 0x000010, "Wrong size on SHItemInvestigationExecutive_SetAllActionsBlocked");
static_assert(offsetof(SHItemInvestigationExecutive_SetAllActionsBlocked, Blocked) == 0x000000, "Member 'SHItemInvestigationExecutive_SetAllActionsBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHItemInvestigationExecutive_SetAllActionsBlocked, Object) == 0x000008, "Member 'SHItemInvestigationExecutive_SetAllActionsBlocked::Object' has a wrong offset!");

// Function SHProto.SHItemInvestigationExecutive.SetCustomTranscriptData
// 0x0030 (0x0030 - 0x0000)
struct SHItemInvestigationExecutive_SetCustomTranscriptData final
{
public:
	TSoftObjectPtr<class USHTranscriptData>       InCustomTranscriptData;                            // 0x0000(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemInvestigationExecutive_SetCustomTranscriptData) == 0x000008, "Wrong alignment on SHItemInvestigationExecutive_SetCustomTranscriptData");
static_assert(sizeof(SHItemInvestigationExecutive_SetCustomTranscriptData) == 0x000030, "Wrong size on SHItemInvestigationExecutive_SetCustomTranscriptData");
static_assert(offsetof(SHItemInvestigationExecutive_SetCustomTranscriptData, InCustomTranscriptData) == 0x000000, "Member 'SHItemInvestigationExecutive_SetCustomTranscriptData::InCustomTranscriptData' has a wrong offset!");

// Function SHProto.SHItemInvestigationExecutive.SetExitBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHItemInvestigationExecutive_SetExitBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemInvestigationExecutive_SetExitBlocked) == 0x000008, "Wrong alignment on SHItemInvestigationExecutive_SetExitBlocked");
static_assert(sizeof(SHItemInvestigationExecutive_SetExitBlocked) == 0x000010, "Wrong size on SHItemInvestigationExecutive_SetExitBlocked");
static_assert(offsetof(SHItemInvestigationExecutive_SetExitBlocked, Blocked) == 0x000000, "Member 'SHItemInvestigationExecutive_SetExitBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHItemInvestigationExecutive_SetExitBlocked, Object) == 0x000008, "Member 'SHItemInvestigationExecutive_SetExitBlocked::Object' has a wrong offset!");

// Function SHProto.SHItemInvestigationExecutive.SetRotateItemBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHItemInvestigationExecutive_SetRotateItemBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemInvestigationExecutive_SetRotateItemBlocked) == 0x000008, "Wrong alignment on SHItemInvestigationExecutive_SetRotateItemBlocked");
static_assert(sizeof(SHItemInvestigationExecutive_SetRotateItemBlocked) == 0x000010, "Wrong size on SHItemInvestigationExecutive_SetRotateItemBlocked");
static_assert(offsetof(SHItemInvestigationExecutive_SetRotateItemBlocked, Blocked) == 0x000000, "Member 'SHItemInvestigationExecutive_SetRotateItemBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHItemInvestigationExecutive_SetRotateItemBlocked, Object) == 0x000008, "Member 'SHItemInvestigationExecutive_SetRotateItemBlocked::Object' has a wrong offset!");

// Function SHProto.SHItemInvestigationExecutive.SetSwitchItemBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHItemInvestigationExecutive_SetSwitchItemBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemInvestigationExecutive_SetSwitchItemBlocked) == 0x000008, "Wrong alignment on SHItemInvestigationExecutive_SetSwitchItemBlocked");
static_assert(sizeof(SHItemInvestigationExecutive_SetSwitchItemBlocked) == 0x000010, "Wrong size on SHItemInvestigationExecutive_SetSwitchItemBlocked");
static_assert(offsetof(SHItemInvestigationExecutive_SetSwitchItemBlocked, Blocked) == 0x000000, "Member 'SHItemInvestigationExecutive_SetSwitchItemBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHItemInvestigationExecutive_SetSwitchItemBlocked, Object) == 0x000008, "Member 'SHItemInvestigationExecutive_SetSwitchItemBlocked::Object' has a wrong offset!");

// Function SHProto.SHItemInvestigationExecutive.SetTranscirptBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHItemInvestigationExecutive_SetTranscirptBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemInvestigationExecutive_SetTranscirptBlocked) == 0x000008, "Wrong alignment on SHItemInvestigationExecutive_SetTranscirptBlocked");
static_assert(sizeof(SHItemInvestigationExecutive_SetTranscirptBlocked) == 0x000010, "Wrong size on SHItemInvestigationExecutive_SetTranscirptBlocked");
static_assert(offsetof(SHItemInvestigationExecutive_SetTranscirptBlocked, Blocked) == 0x000000, "Member 'SHItemInvestigationExecutive_SetTranscirptBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHItemInvestigationExecutive_SetTranscirptBlocked, Object) == 0x000008, "Member 'SHItemInvestigationExecutive_SetTranscirptBlocked::Object' has a wrong offset!");

// DelegateFunction SHProto.SHItemInvestigationExecutive.SHItemInvestigationExeEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHItemInvestigationExecutive_SHItemInvestigationExeEvent__DelegateSignature final
{
public:
	class ASHItemInvestigationExecutive*          ExecutivePtr;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemInvestigationExecutive_SHItemInvestigationExeEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHItemInvestigationExecutive_SHItemInvestigationExeEvent__DelegateSignature");
static_assert(sizeof(SHItemInvestigationExecutive_SHItemInvestigationExeEvent__DelegateSignature) == 0x000008, "Wrong size on SHItemInvestigationExecutive_SHItemInvestigationExeEvent__DelegateSignature");
static_assert(offsetof(SHItemInvestigationExecutive_SHItemInvestigationExeEvent__DelegateSignature, ExecutivePtr) == 0x000000, "Member 'SHItemInvestigationExecutive_SHItemInvestigationExeEvent__DelegateSignature::ExecutivePtr' has a wrong offset!");

// Function SHProto.SHItemInvestigationExecutive.IsAllActionsBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHItemInvestigationExecutive_IsAllActionsBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemInvestigationExecutive_IsAllActionsBlocked) == 0x000001, "Wrong alignment on SHItemInvestigationExecutive_IsAllActionsBlocked");
static_assert(sizeof(SHItemInvestigationExecutive_IsAllActionsBlocked) == 0x000001, "Wrong size on SHItemInvestigationExecutive_IsAllActionsBlocked");
static_assert(offsetof(SHItemInvestigationExecutive_IsAllActionsBlocked, ReturnValue) == 0x000000, "Member 'SHItemInvestigationExecutive_IsAllActionsBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemInvestigationExecutive.IsExitBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHItemInvestigationExecutive_IsExitBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemInvestigationExecutive_IsExitBlocked) == 0x000001, "Wrong alignment on SHItemInvestigationExecutive_IsExitBlocked");
static_assert(sizeof(SHItemInvestigationExecutive_IsExitBlocked) == 0x000001, "Wrong size on SHItemInvestigationExecutive_IsExitBlocked");
static_assert(offsetof(SHItemInvestigationExecutive_IsExitBlocked, ReturnValue) == 0x000000, "Member 'SHItemInvestigationExecutive_IsExitBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemInvestigationExecutive.IsRotateItemBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHItemInvestigationExecutive_IsRotateItemBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemInvestigationExecutive_IsRotateItemBlocked) == 0x000001, "Wrong alignment on SHItemInvestigationExecutive_IsRotateItemBlocked");
static_assert(sizeof(SHItemInvestigationExecutive_IsRotateItemBlocked) == 0x000001, "Wrong size on SHItemInvestigationExecutive_IsRotateItemBlocked");
static_assert(offsetof(SHItemInvestigationExecutive_IsRotateItemBlocked, ReturnValue) == 0x000000, "Member 'SHItemInvestigationExecutive_IsRotateItemBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemInvestigationExecutive.IsSwitchItemBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHItemInvestigationExecutive_IsSwitchItemBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemInvestigationExecutive_IsSwitchItemBlocked) == 0x000001, "Wrong alignment on SHItemInvestigationExecutive_IsSwitchItemBlocked");
static_assert(sizeof(SHItemInvestigationExecutive_IsSwitchItemBlocked) == 0x000001, "Wrong size on SHItemInvestigationExecutive_IsSwitchItemBlocked");
static_assert(offsetof(SHItemInvestigationExecutive_IsSwitchItemBlocked, ReturnValue) == 0x000000, "Member 'SHItemInvestigationExecutive_IsSwitchItemBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemInvestigationExecutive.IsTranscirptBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHItemInvestigationExecutive_IsTranscirptBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemInvestigationExecutive_IsTranscirptBlocked) == 0x000001, "Wrong alignment on SHItemInvestigationExecutive_IsTranscirptBlocked");
static_assert(sizeof(SHItemInvestigationExecutive_IsTranscirptBlocked) == 0x000001, "Wrong size on SHItemInvestigationExecutive_IsTranscirptBlocked");
static_assert(offsetof(SHItemInvestigationExecutive_IsTranscirptBlocked, ReturnValue) == 0x000000, "Member 'SHItemInvestigationExecutive_IsTranscirptBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemsContainer.Interact
// 0x0010 (0x0010 - 0x0000)
struct SHItemsContainer_Interact final
{
public:
	class USHInteractionGenericComponent*         Generic;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHCharacterPlay*                       Character;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemsContainer_Interact) == 0x000008, "Wrong alignment on SHItemsContainer_Interact");
static_assert(sizeof(SHItemsContainer_Interact) == 0x000010, "Wrong size on SHItemsContainer_Interact");
static_assert(offsetof(SHItemsContainer_Interact, Generic) == 0x000000, "Member 'SHItemsContainer_Interact::Generic' has a wrong offset!");
static_assert(offsetof(SHItemsContainer_Interact, Character) == 0x000008, "Member 'SHItemsContainer_Interact::Character' has a wrong offset!");

// Function SHProto.SHItemsContainer.ProcessInteractionManagerInitialized
// 0x0008 (0x0008 - 0x0000)
struct SHItemsContainer_ProcessInteractionManagerInitialized final
{
public:
	class USHInteractionManagerComponent*         Manager;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemsContainer_ProcessInteractionManagerInitialized) == 0x000008, "Wrong alignment on SHItemsContainer_ProcessInteractionManagerInitialized");
static_assert(sizeof(SHItemsContainer_ProcessInteractionManagerInitialized) == 0x000008, "Wrong size on SHItemsContainer_ProcessInteractionManagerInitialized");
static_assert(offsetof(SHItemsContainer_ProcessInteractionManagerInitialized, Manager) == 0x000000, "Member 'SHItemsContainer_ProcessInteractionManagerInitialized::Manager' has a wrong offset!");

// Function SHProto.SHItemsContainer.SetDisabledState
// 0x0010 (0x0010 - 0x0000)
struct SHItemsContainer_SetDisabledState final
{
public:
	bool                                          bInDisabled;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          InObject;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemsContainer_SetDisabledState) == 0x000008, "Wrong alignment on SHItemsContainer_SetDisabledState");
static_assert(sizeof(SHItemsContainer_SetDisabledState) == 0x000010, "Wrong size on SHItemsContainer_SetDisabledState");
static_assert(offsetof(SHItemsContainer_SetDisabledState, bInDisabled) == 0x000000, "Member 'SHItemsContainer_SetDisabledState::bInDisabled' has a wrong offset!");
static_assert(offsetof(SHItemsContainer_SetDisabledState, InObject) == 0x000008, "Member 'SHItemsContainer_SetDisabledState::InObject' has a wrong offset!");

// Function SHProto.SHItemsContainer.IsInDisabledState
// 0x0001 (0x0001 - 0x0000)
struct SHItemsContainer_IsInDisabledState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemsContainer_IsInDisabledState) == 0x000001, "Wrong alignment on SHItemsContainer_IsInDisabledState");
static_assert(sizeof(SHItemsContainer_IsInDisabledState) == 0x000001, "Wrong size on SHItemsContainer_IsInDisabledState");
static_assert(offsetof(SHItemsContainer_IsInDisabledState, ReturnValue) == 0x000000, "Member 'SHItemsContainer_IsInDisabledState::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemsInvestigationStatisticsValueProcessor.ProcessCollectedOrLevelItemInvestigated
// 0x0010 (0x0010 - 0x0000)
struct SHItemsInvestigationStatisticsValueProcessor_ProcessCollectedOrLevelItemInvestigated final
{
public:
	class USHCharacterPlayItemsComponent*         ComponentPtr;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemContext;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemsInvestigationStatisticsValueProcessor_ProcessCollectedOrLevelItemInvestigated) == 0x000008, "Wrong alignment on SHItemsInvestigationStatisticsValueProcessor_ProcessCollectedOrLevelItemInvestigated");
static_assert(sizeof(SHItemsInvestigationStatisticsValueProcessor_ProcessCollectedOrLevelItemInvestigated) == 0x000010, "Wrong size on SHItemsInvestigationStatisticsValueProcessor_ProcessCollectedOrLevelItemInvestigated");
static_assert(offsetof(SHItemsInvestigationStatisticsValueProcessor_ProcessCollectedOrLevelItemInvestigated, ComponentPtr) == 0x000000, "Member 'SHItemsInvestigationStatisticsValueProcessor_ProcessCollectedOrLevelItemInvestigated::ComponentPtr' has a wrong offset!");
static_assert(offsetof(SHItemsInvestigationStatisticsValueProcessor_ProcessCollectedOrLevelItemInvestigated, ItemContext) == 0x000008, "Member 'SHItemsInvestigationStatisticsValueProcessor_ProcessCollectedOrLevelItemInvestigated::ItemContext' has a wrong offset!");

// Function SHProto.SHItemsInvestigationStatisticsValueProcessor.ProcessEquipmentItemSpawned
// 0x0010 (0x0010 - 0x0000)
struct SHItemsInvestigationStatisticsValueProcessor_ProcessEquipmentItemSpawned final
{
public:
	class USHCharacterPlayItemsComponent*         ComponentPtr;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemContext;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemsInvestigationStatisticsValueProcessor_ProcessEquipmentItemSpawned) == 0x000008, "Wrong alignment on SHItemsInvestigationStatisticsValueProcessor_ProcessEquipmentItemSpawned");
static_assert(sizeof(SHItemsInvestigationStatisticsValueProcessor_ProcessEquipmentItemSpawned) == 0x000010, "Wrong size on SHItemsInvestigationStatisticsValueProcessor_ProcessEquipmentItemSpawned");
static_assert(offsetof(SHItemsInvestigationStatisticsValueProcessor_ProcessEquipmentItemSpawned, ComponentPtr) == 0x000000, "Member 'SHItemsInvestigationStatisticsValueProcessor_ProcessEquipmentItemSpawned::ComponentPtr' has a wrong offset!");
static_assert(offsetof(SHItemsInvestigationStatisticsValueProcessor_ProcessEquipmentItemSpawned, ItemContext) == 0x000008, "Member 'SHItemsInvestigationStatisticsValueProcessor_ProcessEquipmentItemSpawned::ItemContext' has a wrong offset!");

// Function SHProto.SHItemSpawner.ProcessSpawnedItemCollected
// 0x0008 (0x0008 - 0x0000)
struct SHItemSpawner_ProcessSpawnedItemCollected final
{
public:
	class ASHItem*                                ItemRef;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemSpawner_ProcessSpawnedItemCollected) == 0x000008, "Wrong alignment on SHItemSpawner_ProcessSpawnedItemCollected");
static_assert(sizeof(SHItemSpawner_ProcessSpawnedItemCollected) == 0x000008, "Wrong size on SHItemSpawner_ProcessSpawnedItemCollected");
static_assert(offsetof(SHItemSpawner_ProcessSpawnedItemCollected, ItemRef) == 0x000000, "Member 'SHItemSpawner_ProcessSpawnedItemCollected::ItemRef' has a wrong offset!");

// DelegateFunction SHProto.SHItemSpawner.SHItemSpawnerEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHItemSpawner_SHItemSpawnerEvent__DelegateSignature final
{
public:
	class ASHItemSpawner*                         ItemSpawnerPtr;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemSpawner_SHItemSpawnerEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHItemSpawner_SHItemSpawnerEvent__DelegateSignature");
static_assert(sizeof(SHItemSpawner_SHItemSpawnerEvent__DelegateSignature) == 0x000008, "Wrong size on SHItemSpawner_SHItemSpawnerEvent__DelegateSignature");
static_assert(offsetof(SHItemSpawner_SHItemSpawnerEvent__DelegateSignature, ItemSpawnerPtr) == 0x000000, "Member 'SHItemSpawner_SHItemSpawnerEvent__DelegateSignature::ItemSpawnerPtr' has a wrong offset!");

// Function SHProto.SHItemSpawner.SpawnRuntimeItem
// 0x0008 (0x0008 - 0x0000)
struct SHItemSpawner_SpawnRuntimeItem final
{
public:
	class ASHItem*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemSpawner_SpawnRuntimeItem) == 0x000008, "Wrong alignment on SHItemSpawner_SpawnRuntimeItem");
static_assert(sizeof(SHItemSpawner_SpawnRuntimeItem) == 0x000008, "Wrong size on SHItemSpawner_SpawnRuntimeItem");
static_assert(offsetof(SHItemSpawner_SpawnRuntimeItem, ReturnValue) == 0x000000, "Member 'SHItemSpawner_SpawnRuntimeItem::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemSpawner.GetSpawnedItem
// 0x0008 (0x0008 - 0x0000)
struct SHItemSpawner_GetSpawnedItem final
{
public:
	class ASHItem*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemSpawner_GetSpawnedItem) == 0x000008, "Wrong alignment on SHItemSpawner_GetSpawnedItem");
static_assert(sizeof(SHItemSpawner_GetSpawnedItem) == 0x000008, "Wrong size on SHItemSpawner_GetSpawnedItem");
static_assert(offsetof(SHItemSpawner_GetSpawnedItem, ReturnValue) == 0x000000, "Member 'SHItemSpawner_GetSpawnedItem::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemsPickedUpStatisticsValueProcessor.ProcessItemCollected
// 0x0010 (0x0010 - 0x0000)
struct SHItemsPickedUpStatisticsValueProcessor_ProcessItemCollected final
{
public:
	class USHCharacterPlayItemsComponent*         ComponentPtr;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemContext;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemsPickedUpStatisticsValueProcessor_ProcessItemCollected) == 0x000008, "Wrong alignment on SHItemsPickedUpStatisticsValueProcessor_ProcessItemCollected");
static_assert(sizeof(SHItemsPickedUpStatisticsValueProcessor_ProcessItemCollected) == 0x000010, "Wrong size on SHItemsPickedUpStatisticsValueProcessor_ProcessItemCollected");
static_assert(offsetof(SHItemsPickedUpStatisticsValueProcessor_ProcessItemCollected, ComponentPtr) == 0x000000, "Member 'SHItemsPickedUpStatisticsValueProcessor_ProcessItemCollected::ComponentPtr' has a wrong offset!");
static_assert(offsetof(SHItemsPickedUpStatisticsValueProcessor_ProcessItemCollected, ItemContext) == 0x000008, "Member 'SHItemsPickedUpStatisticsValueProcessor_ProcessItemCollected::ItemContext' has a wrong offset!");

// Function SHProto.SHItemsPickedUpStatisticsValueProcessor.ProcessLevelItemGrabbedOrInvestigated
// 0x0010 (0x0010 - 0x0000)
struct SHItemsPickedUpStatisticsValueProcessor_ProcessLevelItemGrabbedOrInvestigated final
{
public:
	class USHCharacterPlayItemsComponent*         ComponentPtr;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemContext;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemsPickedUpStatisticsValueProcessor_ProcessLevelItemGrabbedOrInvestigated) == 0x000008, "Wrong alignment on SHItemsPickedUpStatisticsValueProcessor_ProcessLevelItemGrabbedOrInvestigated");
static_assert(sizeof(SHItemsPickedUpStatisticsValueProcessor_ProcessLevelItemGrabbedOrInvestigated) == 0x000010, "Wrong size on SHItemsPickedUpStatisticsValueProcessor_ProcessLevelItemGrabbedOrInvestigated");
static_assert(offsetof(SHItemsPickedUpStatisticsValueProcessor_ProcessLevelItemGrabbedOrInvestigated, ComponentPtr) == 0x000000, "Member 'SHItemsPickedUpStatisticsValueProcessor_ProcessLevelItemGrabbedOrInvestigated::ComponentPtr' has a wrong offset!");
static_assert(offsetof(SHItemsPickedUpStatisticsValueProcessor_ProcessLevelItemGrabbedOrInvestigated, ItemContext) == 0x000008, "Member 'SHItemsPickedUpStatisticsValueProcessor_ProcessLevelItemGrabbedOrInvestigated::ItemContext' has a wrong offset!");

// Function SHProto.SHItemsStorageStatics.HasItemByConfig
// 0x0048 (0x0048 - 0x0000)
struct SHItemsStorageStatics_HasItemByConfig final
{
public:
	TArray<struct FSHCollectedItemData>           InItems;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSHItemsStorageConfig                  ItemsStorageConfig;                                // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHItemsStorageStatics_HasItemByConfig) == 0x000008, "Wrong alignment on SHItemsStorageStatics_HasItemByConfig");
static_assert(sizeof(SHItemsStorageStatics_HasItemByConfig) == 0x000048, "Wrong size on SHItemsStorageStatics_HasItemByConfig");
static_assert(offsetof(SHItemsStorageStatics_HasItemByConfig, InItems) == 0x000000, "Member 'SHItemsStorageStatics_HasItemByConfig::InItems' has a wrong offset!");
static_assert(offsetof(SHItemsStorageStatics_HasItemByConfig, ItemsStorageConfig) == 0x000010, "Member 'SHItemsStorageStatics_HasItemByConfig::ItemsStorageConfig' has a wrong offset!");
static_assert(offsetof(SHItemsStorageStatics_HasItemByConfig, ReturnValue) == 0x000040, "Member 'SHItemsStorageStatics_HasItemByConfig::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemsStorageStatics.HasPlayerCollectedItemByConfig
// 0x0040 (0x0040 - 0x0000)
struct SHItemsStorageStatics_HasPlayerCollectedItemByConfig final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSHItemsStorageConfig                  ItemsStorageConfig;                                // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHItemsStorageStatics_HasPlayerCollectedItemByConfig) == 0x000008, "Wrong alignment on SHItemsStorageStatics_HasPlayerCollectedItemByConfig");
static_assert(sizeof(SHItemsStorageStatics_HasPlayerCollectedItemByConfig) == 0x000040, "Wrong size on SHItemsStorageStatics_HasPlayerCollectedItemByConfig");
static_assert(offsetof(SHItemsStorageStatics_HasPlayerCollectedItemByConfig, Context) == 0x000000, "Member 'SHItemsStorageStatics_HasPlayerCollectedItemByConfig::Context' has a wrong offset!");
static_assert(offsetof(SHItemsStorageStatics_HasPlayerCollectedItemByConfig, ItemsStorageConfig) == 0x000008, "Member 'SHItemsStorageStatics_HasPlayerCollectedItemByConfig::ItemsStorageConfig' has a wrong offset!");
static_assert(offsetof(SHItemsStorageStatics_HasPlayerCollectedItemByConfig, ReturnValue) == 0x000038, "Member 'SHItemsStorageStatics_HasPlayerCollectedItemByConfig::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemsStorageComponent.RetrieveAll
// 0x0008 (0x0008 - 0x0000)
struct SHItemsStorageComponent_RetrieveAll final
{
public:
	class ACharacter*                             InteractingCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemsStorageComponent_RetrieveAll) == 0x000008, "Wrong alignment on SHItemsStorageComponent_RetrieveAll");
static_assert(sizeof(SHItemsStorageComponent_RetrieveAll) == 0x000008, "Wrong size on SHItemsStorageComponent_RetrieveAll");
static_assert(offsetof(SHItemsStorageComponent_RetrieveAll, InteractingCharacter) == 0x000000, "Member 'SHItemsStorageComponent_RetrieveAll::InteractingCharacter' has a wrong offset!");

// Function SHProto.SHItemsStorageComponent.RetrieveAllByConfig
// 0x0038 (0x0038 - 0x0000)
struct SHItemsStorageComponent_RetrieveAllByConfig final
{
public:
	class ACharacter*                             InteractingCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSHItemsStorageConfig                  ItemsStorageConfig;                                // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemsStorageComponent_RetrieveAllByConfig) == 0x000008, "Wrong alignment on SHItemsStorageComponent_RetrieveAllByConfig");
static_assert(sizeof(SHItemsStorageComponent_RetrieveAllByConfig) == 0x000038, "Wrong size on SHItemsStorageComponent_RetrieveAllByConfig");
static_assert(offsetof(SHItemsStorageComponent_RetrieveAllByConfig, InteractingCharacter) == 0x000000, "Member 'SHItemsStorageComponent_RetrieveAllByConfig::InteractingCharacter' has a wrong offset!");
static_assert(offsetof(SHItemsStorageComponent_RetrieveAllByConfig, ItemsStorageConfig) == 0x000008, "Member 'SHItemsStorageComponent_RetrieveAllByConfig::ItemsStorageConfig' has a wrong offset!");

// Function SHProto.SHItemsStorageComponent.RetrieveSpecified
// 0x0018 (0x0018 - 0x0000)
struct SHItemsStorageComponent_RetrieveSpecified final
{
public:
	class ACharacter*                             InteractingCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSHCollectedItemData>           ItemsToRetrieve;                                   // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemsStorageComponent_RetrieveSpecified) == 0x000008, "Wrong alignment on SHItemsStorageComponent_RetrieveSpecified");
static_assert(sizeof(SHItemsStorageComponent_RetrieveSpecified) == 0x000018, "Wrong size on SHItemsStorageComponent_RetrieveSpecified");
static_assert(offsetof(SHItemsStorageComponent_RetrieveSpecified, InteractingCharacter) == 0x000000, "Member 'SHItemsStorageComponent_RetrieveSpecified::InteractingCharacter' has a wrong offset!");
static_assert(offsetof(SHItemsStorageComponent_RetrieveSpecified, ItemsToRetrieve) == 0x000008, "Member 'SHItemsStorageComponent_RetrieveSpecified::ItemsToRetrieve' has a wrong offset!");

// Function SHProto.SHItemsStorageComponent.StoreAll
// 0x0028 (0x0028 - 0x0000)
struct SHItemsStorageComponent_StoreAll final
{
public:
	class ACharacter*                             InteractingCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           SkipItems;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<ESHItemTypeEnum>                       SkipItemsCategories;                               // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemsStorageComponent_StoreAll) == 0x000008, "Wrong alignment on SHItemsStorageComponent_StoreAll");
static_assert(sizeof(SHItemsStorageComponent_StoreAll) == 0x000028, "Wrong size on SHItemsStorageComponent_StoreAll");
static_assert(offsetof(SHItemsStorageComponent_StoreAll, InteractingCharacter) == 0x000000, "Member 'SHItemsStorageComponent_StoreAll::InteractingCharacter' has a wrong offset!");
static_assert(offsetof(SHItemsStorageComponent_StoreAll, SkipItems) == 0x000008, "Member 'SHItemsStorageComponent_StoreAll::SkipItems' has a wrong offset!");
static_assert(offsetof(SHItemsStorageComponent_StoreAll, SkipItemsCategories) == 0x000018, "Member 'SHItemsStorageComponent_StoreAll::SkipItemsCategories' has a wrong offset!");

// Function SHProto.SHItemsStorageComponent.StoreAllByConfig
// 0x0038 (0x0038 - 0x0000)
struct SHItemsStorageComponent_StoreAllByConfig final
{
public:
	class ACharacter*                             InteractingCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSHItemsStorageConfig                  ItemsStorageConfig;                                // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemsStorageComponent_StoreAllByConfig) == 0x000008, "Wrong alignment on SHItemsStorageComponent_StoreAllByConfig");
static_assert(sizeof(SHItemsStorageComponent_StoreAllByConfig) == 0x000038, "Wrong size on SHItemsStorageComponent_StoreAllByConfig");
static_assert(offsetof(SHItemsStorageComponent_StoreAllByConfig, InteractingCharacter) == 0x000000, "Member 'SHItemsStorageComponent_StoreAllByConfig::InteractingCharacter' has a wrong offset!");
static_assert(offsetof(SHItemsStorageComponent_StoreAllByConfig, ItemsStorageConfig) == 0x000008, "Member 'SHItemsStorageComponent_StoreAllByConfig::ItemsStorageConfig' has a wrong offset!");

// Function SHProto.SHItemsStorageComponent.StoreSpecified
// 0x0018 (0x0018 - 0x0000)
struct SHItemsStorageComponent_StoreSpecified final
{
public:
	class ACharacter*                             InteractingCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSHCollectedItemData>           ItemsToStore;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemsStorageComponent_StoreSpecified) == 0x000008, "Wrong alignment on SHItemsStorageComponent_StoreSpecified");
static_assert(sizeof(SHItemsStorageComponent_StoreSpecified) == 0x000018, "Wrong size on SHItemsStorageComponent_StoreSpecified");
static_assert(offsetof(SHItemsStorageComponent_StoreSpecified, InteractingCharacter) == 0x000000, "Member 'SHItemsStorageComponent_StoreSpecified::InteractingCharacter' has a wrong offset!");
static_assert(offsetof(SHItemsStorageComponent_StoreSpecified, ItemsToStore) == 0x000008, "Member 'SHItemsStorageComponent_StoreSpecified::ItemsToStore' has a wrong offset!");

// Function SHProto.SHItemsStorageComponent.GetCurrentItems
// 0x0010 (0x0010 - 0x0000)
struct SHItemsStorageComponent_GetCurrentItems final
{
public:
	TArray<struct FSHCollectedItemData>           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemsStorageComponent_GetCurrentItems) == 0x000008, "Wrong alignment on SHItemsStorageComponent_GetCurrentItems");
static_assert(sizeof(SHItemsStorageComponent_GetCurrentItems) == 0x000010, "Wrong size on SHItemsStorageComponent_GetCurrentItems");
static_assert(offsetof(SHItemsStorageComponent_GetCurrentItems, ReturnValue) == 0x000000, "Member 'SHItemsStorageComponent_GetCurrentItems::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemsStorageComponent.IsStorageEmpty
// 0x0001 (0x0001 - 0x0000)
struct SHItemsStorageComponent_IsStorageEmpty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemsStorageComponent_IsStorageEmpty) == 0x000001, "Wrong alignment on SHItemsStorageComponent_IsStorageEmpty");
static_assert(sizeof(SHItemsStorageComponent_IsStorageEmpty) == 0x000001, "Wrong size on SHItemsStorageComponent_IsStorageEmpty");
static_assert(offsetof(SHItemsStorageComponent_IsStorageEmpty, ReturnValue) == 0x000000, "Member 'SHItemsStorageComponent_IsStorageEmpty::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemWeaponChainsawAnimsExtensionComponent.ProcessEquipWeaponMontageEndEvent
// 0x0010 (0x0010 - 0x0000)
struct SHItemWeaponChainsawAnimsExtensionComponent_ProcessEquipWeaponMontageEndEvent final
{
public:
	class UAnimMontage*                           InMontage;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHAnimEndType                                AnimEndType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHItemWeaponChainsawAnimsExtensionComponent_ProcessEquipWeaponMontageEndEvent) == 0x000008, "Wrong alignment on SHItemWeaponChainsawAnimsExtensionComponent_ProcessEquipWeaponMontageEndEvent");
static_assert(sizeof(SHItemWeaponChainsawAnimsExtensionComponent_ProcessEquipWeaponMontageEndEvent) == 0x000010, "Wrong size on SHItemWeaponChainsawAnimsExtensionComponent_ProcessEquipWeaponMontageEndEvent");
static_assert(offsetof(SHItemWeaponChainsawAnimsExtensionComponent_ProcessEquipWeaponMontageEndEvent, InMontage) == 0x000000, "Member 'SHItemWeaponChainsawAnimsExtensionComponent_ProcessEquipWeaponMontageEndEvent::InMontage' has a wrong offset!");
static_assert(offsetof(SHItemWeaponChainsawAnimsExtensionComponent_ProcessEquipWeaponMontageEndEvent, AnimEndType) == 0x000008, "Member 'SHItemWeaponChainsawAnimsExtensionComponent_ProcessEquipWeaponMontageEndEvent::AnimEndType' has a wrong offset!");

// Function SHProto.SHItemWeaponMelee.CalcAttackRowName
// 0x0018 (0x0018 - 0x0000)
struct SHItemWeaponMelee_CalcAttackRowName final
{
public:
	class ACharacter*                             AttackCandidate;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemWeaponMelee_CalcAttackRowName) == 0x000008, "Wrong alignment on SHItemWeaponMelee_CalcAttackRowName");
static_assert(sizeof(SHItemWeaponMelee_CalcAttackRowName) == 0x000018, "Wrong size on SHItemWeaponMelee_CalcAttackRowName");
static_assert(offsetof(SHItemWeaponMelee_CalcAttackRowName, AttackCandidate) == 0x000000, "Member 'SHItemWeaponMelee_CalcAttackRowName::AttackCandidate' has a wrong offset!");
static_assert(offsetof(SHItemWeaponMelee_CalcAttackRowName, ReturnValue) == 0x000008, "Member 'SHItemWeaponMelee_CalcAttackRowName::ReturnValue' has a wrong offset!");

// DelegateFunction SHProto.SHItemWeaponMelee.SHItemWeaponMeleeWithContextEvent__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct SHItemWeaponMelee_SHItemWeaponMeleeWithContextEvent__DelegateSignature final
{
public:
	class ASHItemWeaponMelee*                     WeaponPtr;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ActorContext;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemWeaponMelee_SHItemWeaponMeleeWithContextEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHItemWeaponMelee_SHItemWeaponMeleeWithContextEvent__DelegateSignature");
static_assert(sizeof(SHItemWeaponMelee_SHItemWeaponMeleeWithContextEvent__DelegateSignature) == 0x000010, "Wrong size on SHItemWeaponMelee_SHItemWeaponMeleeWithContextEvent__DelegateSignature");
static_assert(offsetof(SHItemWeaponMelee_SHItemWeaponMeleeWithContextEvent__DelegateSignature, WeaponPtr) == 0x000000, "Member 'SHItemWeaponMelee_SHItemWeaponMeleeWithContextEvent__DelegateSignature::WeaponPtr' has a wrong offset!");
static_assert(offsetof(SHItemWeaponMelee_SHItemWeaponMeleeWithContextEvent__DelegateSignature, ActorContext) == 0x000008, "Member 'SHItemWeaponMelee_SHItemWeaponMeleeWithContextEvent__DelegateSignature::ActorContext' has a wrong offset!");

// Function SHProto.SHItemWeaponMelee.GetAttackDataCopy
// 0x01D0 (0x01D0 - 0x0000)
struct SHItemWeaponMelee_GetAttackDataCopy final
{
public:
	class FName                                   AttackRowName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSHCharacterPlayAttackStruct           ReturnValue;                                       // 0x0008(0x01C8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemWeaponMelee_GetAttackDataCopy) == 0x000008, "Wrong alignment on SHItemWeaponMelee_GetAttackDataCopy");
static_assert(sizeof(SHItemWeaponMelee_GetAttackDataCopy) == 0x0001D0, "Wrong size on SHItemWeaponMelee_GetAttackDataCopy");
static_assert(offsetof(SHItemWeaponMelee_GetAttackDataCopy, AttackRowName) == 0x000000, "Member 'SHItemWeaponMelee_GetAttackDataCopy::AttackRowName' has a wrong offset!");
static_assert(offsetof(SHItemWeaponMelee_GetAttackDataCopy, ReturnValue) == 0x000008, "Member 'SHItemWeaponMelee_GetAttackDataCopy::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemWeaponMelee.GetCurrentMeleeAttackEnemyTarget
// 0x0008 (0x0008 - 0x0000)
struct SHItemWeaponMelee_GetCurrentMeleeAttackEnemyTarget final
{
public:
	class ACharacter*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemWeaponMelee_GetCurrentMeleeAttackEnemyTarget) == 0x000008, "Wrong alignment on SHItemWeaponMelee_GetCurrentMeleeAttackEnemyTarget");
static_assert(sizeof(SHItemWeaponMelee_GetCurrentMeleeAttackEnemyTarget) == 0x000008, "Wrong size on SHItemWeaponMelee_GetCurrentMeleeAttackEnemyTarget");
static_assert(offsetof(SHItemWeaponMelee_GetCurrentMeleeAttackEnemyTarget, ReturnValue) == 0x000000, "Member 'SHItemWeaponMelee_GetCurrentMeleeAttackEnemyTarget::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemWeaponMelee.GetLastUsedAttack
// 0x0010 (0x0010 - 0x0000)
struct SHItemWeaponMelee_GetLastUsedAttack final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemWeaponMelee_GetLastUsedAttack) == 0x000008, "Wrong alignment on SHItemWeaponMelee_GetLastUsedAttack");
static_assert(sizeof(SHItemWeaponMelee_GetLastUsedAttack) == 0x000010, "Wrong size on SHItemWeaponMelee_GetLastUsedAttack");
static_assert(offsetof(SHItemWeaponMelee_GetLastUsedAttack, ReturnValue) == 0x000000, "Member 'SHItemWeaponMelee_GetLastUsedAttack::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemWeaponMelee.IsOwnerStandingBehind
// 0x0010 (0x0010 - 0x0000)
struct SHItemWeaponMelee_IsOwnerStandingBehind final
{
public:
	class ACharacter*                             CheckedCharacter;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHItemWeaponMelee_IsOwnerStandingBehind) == 0x000008, "Wrong alignment on SHItemWeaponMelee_IsOwnerStandingBehind");
static_assert(sizeof(SHItemWeaponMelee_IsOwnerStandingBehind) == 0x000010, "Wrong size on SHItemWeaponMelee_IsOwnerStandingBehind");
static_assert(offsetof(SHItemWeaponMelee_IsOwnerStandingBehind, CheckedCharacter) == 0x000000, "Member 'SHItemWeaponMelee_IsOwnerStandingBehind::CheckedCharacter' has a wrong offset!");
static_assert(offsetof(SHItemWeaponMelee_IsOwnerStandingBehind, ReturnValue) == 0x000008, "Member 'SHItemWeaponMelee_IsOwnerStandingBehind::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemWeaponMelee.ShouldUseGroundAttack
// 0x0001 (0x0001 - 0x0000)
struct SHItemWeaponMelee_ShouldUseGroundAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHItemWeaponMelee_ShouldUseGroundAttack) == 0x000001, "Wrong alignment on SHItemWeaponMelee_ShouldUseGroundAttack");
static_assert(sizeof(SHItemWeaponMelee_ShouldUseGroundAttack) == 0x000001, "Wrong size on SHItemWeaponMelee_ShouldUseGroundAttack");
static_assert(offsetof(SHItemWeaponMelee_ShouldUseGroundAttack, ReturnValue) == 0x000000, "Member 'SHItemWeaponMelee_ShouldUseGroundAttack::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemWeaponMelee.SlideDistanceCheck
// 0x0010 (0x0010 - 0x0000)
struct SHItemWeaponMelee_SlideDistanceCheck final
{
public:
	class ACharacter*                             CheckedCharacter;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSlideDistance;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHItemWeaponMelee_SlideDistanceCheck) == 0x000008, "Wrong alignment on SHItemWeaponMelee_SlideDistanceCheck");
static_assert(sizeof(SHItemWeaponMelee_SlideDistanceCheck) == 0x000010, "Wrong size on SHItemWeaponMelee_SlideDistanceCheck");
static_assert(offsetof(SHItemWeaponMelee_SlideDistanceCheck, CheckedCharacter) == 0x000000, "Member 'SHItemWeaponMelee_SlideDistanceCheck::CheckedCharacter' has a wrong offset!");
static_assert(offsetof(SHItemWeaponMelee_SlideDistanceCheck, MaxSlideDistance) == 0x000008, "Member 'SHItemWeaponMelee_SlideDistanceCheck::MaxSlideDistance' has a wrong offset!");
static_assert(offsetof(SHItemWeaponMelee_SlideDistanceCheck, ReturnValue) == 0x00000C, "Member 'SHItemWeaponMelee_SlideDistanceCheck::ReturnValue' has a wrong offset!");

// Function SHProto.SHItemWeaponMelee.WillKillCharacter
// 0x0010 (0x0010 - 0x0000)
struct SHItemWeaponMelee_WillKillCharacter final
{
public:
	class ACharacter*                             CheckedCharacter;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHItemWeaponMelee_WillKillCharacter) == 0x000008, "Wrong alignment on SHItemWeaponMelee_WillKillCharacter");
static_assert(sizeof(SHItemWeaponMelee_WillKillCharacter) == 0x000010, "Wrong size on SHItemWeaponMelee_WillKillCharacter");
static_assert(offsetof(SHItemWeaponMelee_WillKillCharacter, CheckedCharacter) == 0x000000, "Member 'SHItemWeaponMelee_WillKillCharacter::CheckedCharacter' has a wrong offset!");
static_assert(offsetof(SHItemWeaponMelee_WillKillCharacter, ReturnValue) == 0x000008, "Member 'SHItemWeaponMelee_WillKillCharacter::ReturnValue' has a wrong offset!");

// Function SHProto.SHJumpIntoHole.ProcessAnimInstStageAdvanced
// 0x0008 (0x0008 - 0x0000)
struct SHJumpIntoHole_ProcessAnimInstStageAdvanced final
{
public:
	class USHJumpIntoHoleAnimInstance*            AnimInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHJumpIntoHole_ProcessAnimInstStageAdvanced) == 0x000008, "Wrong alignment on SHJumpIntoHole_ProcessAnimInstStageAdvanced");
static_assert(sizeof(SHJumpIntoHole_ProcessAnimInstStageAdvanced) == 0x000008, "Wrong size on SHJumpIntoHole_ProcessAnimInstStageAdvanced");
static_assert(offsetof(SHJumpIntoHole_ProcessAnimInstStageAdvanced, AnimInst) == 0x000000, "Member 'SHJumpIntoHole_ProcessAnimInstStageAdvanced::AnimInst' has a wrong offset!");

// Function SHProto.SHJumpIntoHole.ProcessAnimInstStartedInteraction
// 0x0008 (0x0008 - 0x0000)
struct SHJumpIntoHole_ProcessAnimInstStartedInteraction final
{
public:
	class USHJumpIntoHoleAnimInstance*            AnimInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHJumpIntoHole_ProcessAnimInstStartedInteraction) == 0x000008, "Wrong alignment on SHJumpIntoHole_ProcessAnimInstStartedInteraction");
static_assert(sizeof(SHJumpIntoHole_ProcessAnimInstStartedInteraction) == 0x000008, "Wrong size on SHJumpIntoHole_ProcessAnimInstStartedInteraction");
static_assert(offsetof(SHJumpIntoHole_ProcessAnimInstStartedInteraction, AnimInst) == 0x000000, "Member 'SHJumpIntoHole_ProcessAnimInstStartedInteraction::AnimInst' has a wrong offset!");

// Function SHProto.SHJumpIntoHole.ProcessFocusableInputActionEvent
// 0x0008 (0x0008 - 0x0000)
struct SHJumpIntoHole_ProcessFocusableInputActionEvent final
{
public:
	ESHFocusableInputActionTypeEnum               InputActionType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         KeyValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHJumpIntoHole_ProcessFocusableInputActionEvent) == 0x000004, "Wrong alignment on SHJumpIntoHole_ProcessFocusableInputActionEvent");
static_assert(sizeof(SHJumpIntoHole_ProcessFocusableInputActionEvent) == 0x000008, "Wrong size on SHJumpIntoHole_ProcessFocusableInputActionEvent");
static_assert(offsetof(SHJumpIntoHole_ProcessFocusableInputActionEvent, InputActionType) == 0x000000, "Member 'SHJumpIntoHole_ProcessFocusableInputActionEvent::InputActionType' has a wrong offset!");
static_assert(offsetof(SHJumpIntoHole_ProcessFocusableInputActionEvent, KeyValue) == 0x000004, "Member 'SHJumpIntoHole_ProcessFocusableInputActionEvent::KeyValue' has a wrong offset!");

// Function SHProto.SHJumpIntoHole.ProcessInteractingCharacterCombatInputModeChanged
// 0x0008 (0x0008 - 0x0000)
struct SHJumpIntoHole_ProcessInteractingCharacterCombatInputModeChanged final
{
public:
	class USHCharacterPlayCombatComponent*        CombatComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHJumpIntoHole_ProcessInteractingCharacterCombatInputModeChanged) == 0x000008, "Wrong alignment on SHJumpIntoHole_ProcessInteractingCharacterCombatInputModeChanged");
static_assert(sizeof(SHJumpIntoHole_ProcessInteractingCharacterCombatInputModeChanged) == 0x000008, "Wrong size on SHJumpIntoHole_ProcessInteractingCharacterCombatInputModeChanged");
static_assert(offsetof(SHJumpIntoHole_ProcessInteractingCharacterCombatInputModeChanged, CombatComp) == 0x000000, "Member 'SHJumpIntoHole_ProcessInteractingCharacterCombatInputModeChanged::CombatComp' has a wrong offset!");

// Function SHProto.SHJumpIntoHole.ProcessInteractingCharacterReceiveDamage
// 0x0008 (0x0008 - 0x0000)
struct SHJumpIntoHole_ProcessInteractingCharacterReceiveDamage final
{
public:
	class USHCharacterPlayCombatComponent*        CombatComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHJumpIntoHole_ProcessInteractingCharacterReceiveDamage) == 0x000008, "Wrong alignment on SHJumpIntoHole_ProcessInteractingCharacterReceiveDamage");
static_assert(sizeof(SHJumpIntoHole_ProcessInteractingCharacterReceiveDamage) == 0x000008, "Wrong size on SHJumpIntoHole_ProcessInteractingCharacterReceiveDamage");
static_assert(offsetof(SHJumpIntoHole_ProcessInteractingCharacterReceiveDamage, CombatComp) == 0x000000, "Member 'SHJumpIntoHole_ProcessInteractingCharacterReceiveDamage::CombatComp' has a wrong offset!");

// Function SHProto.SHJumpIntoHole.ProcessInteractionGenericGrabbed
// 0x0010 (0x0010 - 0x0000)
struct SHJumpIntoHole_ProcessInteractionGenericGrabbed final
{
public:
	class USHInteractionGenericComponent*         Generic;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHCharacterPlay*                       Character;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHJumpIntoHole_ProcessInteractionGenericGrabbed) == 0x000008, "Wrong alignment on SHJumpIntoHole_ProcessInteractionGenericGrabbed");
static_assert(sizeof(SHJumpIntoHole_ProcessInteractionGenericGrabbed) == 0x000010, "Wrong size on SHJumpIntoHole_ProcessInteractionGenericGrabbed");
static_assert(offsetof(SHJumpIntoHole_ProcessInteractionGenericGrabbed, Generic) == 0x000000, "Member 'SHJumpIntoHole_ProcessInteractionGenericGrabbed::Generic' has a wrong offset!");
static_assert(offsetof(SHJumpIntoHole_ProcessInteractionGenericGrabbed, Character) == 0x000008, "Member 'SHJumpIntoHole_ProcessInteractionGenericGrabbed::Character' has a wrong offset!");

// Function SHProto.SHJumpIntoHole.ProcessInteractionManagerInitialized
// 0x0008 (0x0008 - 0x0000)
struct SHJumpIntoHole_ProcessInteractionManagerInitialized final
{
public:
	class USHInteractionManagerComponent*         Manager;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHJumpIntoHole_ProcessInteractionManagerInitialized) == 0x000008, "Wrong alignment on SHJumpIntoHole_ProcessInteractionManagerInitialized");
static_assert(sizeof(SHJumpIntoHole_ProcessInteractionManagerInitialized) == 0x000008, "Wrong size on SHJumpIntoHole_ProcessInteractionManagerInitialized");
static_assert(offsetof(SHJumpIntoHole_ProcessInteractionManagerInitialized, Manager) == 0x000000, "Member 'SHJumpIntoHole_ProcessInteractionManagerInitialized::Manager' has a wrong offset!");

// Function SHProto.SHJumpIntoHole.ProcessJumpAnimEnd
// 0x0010 (0x0010 - 0x0000)
struct SHJumpIntoHole_ProcessJumpAnimEnd final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHAnimEndType                                AnimEndType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHJumpIntoHole_ProcessJumpAnimEnd) == 0x000008, "Wrong alignment on SHJumpIntoHole_ProcessJumpAnimEnd");
static_assert(sizeof(SHJumpIntoHole_ProcessJumpAnimEnd) == 0x000010, "Wrong size on SHJumpIntoHole_ProcessJumpAnimEnd");
static_assert(offsetof(SHJumpIntoHole_ProcessJumpAnimEnd, Montage) == 0x000000, "Member 'SHJumpIntoHole_ProcessJumpAnimEnd::Montage' has a wrong offset!");
static_assert(offsetof(SHJumpIntoHole_ProcessJumpAnimEnd, AnimEndType) == 0x000008, "Member 'SHJumpIntoHole_ProcessJumpAnimEnd::AnimEndType' has a wrong offset!");

// Function SHProto.SHJumpIntoHole.ProcessLandAnimEnd
// 0x0010 (0x0010 - 0x0000)
struct SHJumpIntoHole_ProcessLandAnimEnd final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHAnimEndType                                AnimEndType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHJumpIntoHole_ProcessLandAnimEnd) == 0x000008, "Wrong alignment on SHJumpIntoHole_ProcessLandAnimEnd");
static_assert(sizeof(SHJumpIntoHole_ProcessLandAnimEnd) == 0x000010, "Wrong size on SHJumpIntoHole_ProcessLandAnimEnd");
static_assert(offsetof(SHJumpIntoHole_ProcessLandAnimEnd, Montage) == 0x000000, "Member 'SHJumpIntoHole_ProcessLandAnimEnd::Montage' has a wrong offset!");
static_assert(offsetof(SHJumpIntoHole_ProcessLandAnimEnd, AnimEndType) == 0x000008, "Member 'SHJumpIntoHole_ProcessLandAnimEnd::AnimEndType' has a wrong offset!");

// Function SHProto.SHJumpIntoHole.ProcessMoveCharacterToSpotFinished
// 0x0001 (0x0001 - 0x0000)
struct SHJumpIntoHole_ProcessMoveCharacterToSpotFinished final
{
public:
	bool                                          WasCompleted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHJumpIntoHole_ProcessMoveCharacterToSpotFinished) == 0x000001, "Wrong alignment on SHJumpIntoHole_ProcessMoveCharacterToSpotFinished");
static_assert(sizeof(SHJumpIntoHole_ProcessMoveCharacterToSpotFinished) == 0x000001, "Wrong size on SHJumpIntoHole_ProcessMoveCharacterToSpotFinished");
static_assert(offsetof(SHJumpIntoHole_ProcessMoveCharacterToSpotFinished, WasCompleted) == 0x000000, "Member 'SHJumpIntoHole_ProcessMoveCharacterToSpotFinished::WasCompleted' has a wrong offset!");

// Function SHProto.SHJumpIntoHole.ProcessProximityBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct SHJumpIntoHole_ProcessProximityBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FromSweep;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHJumpIntoHole_ProcessProximityBeginOverlap) == 0x000008, "Wrong alignment on SHJumpIntoHole_ProcessProximityBeginOverlap");
static_assert(sizeof(SHJumpIntoHole_ProcessProximityBeginOverlap) == 0x000108, "Wrong size on SHJumpIntoHole_ProcessProximityBeginOverlap");
static_assert(offsetof(SHJumpIntoHole_ProcessProximityBeginOverlap, OverlappedComponent) == 0x000000, "Member 'SHJumpIntoHole_ProcessProximityBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SHJumpIntoHole_ProcessProximityBeginOverlap, OtherActor) == 0x000008, "Member 'SHJumpIntoHole_ProcessProximityBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SHJumpIntoHole_ProcessProximityBeginOverlap, OtherComponent) == 0x000010, "Member 'SHJumpIntoHole_ProcessProximityBeginOverlap::OtherComponent' has a wrong offset!");
static_assert(offsetof(SHJumpIntoHole_ProcessProximityBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'SHJumpIntoHole_ProcessProximityBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SHJumpIntoHole_ProcessProximityBeginOverlap, FromSweep) == 0x00001C, "Member 'SHJumpIntoHole_ProcessProximityBeginOverlap::FromSweep' has a wrong offset!");
static_assert(offsetof(SHJumpIntoHole_ProcessProximityBeginOverlap, SweepResult) == 0x000020, "Member 'SHJumpIntoHole_ProcessProximityBeginOverlap::SweepResult' has a wrong offset!");

// Function SHProto.SHJumpIntoHole.ProcessProximityEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct SHJumpIntoHole_ProcessProximityEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHJumpIntoHole_ProcessProximityEndOverlap) == 0x000008, "Wrong alignment on SHJumpIntoHole_ProcessProximityEndOverlap");
static_assert(sizeof(SHJumpIntoHole_ProcessProximityEndOverlap) == 0x000020, "Wrong size on SHJumpIntoHole_ProcessProximityEndOverlap");
static_assert(offsetof(SHJumpIntoHole_ProcessProximityEndOverlap, OverlappedComponent) == 0x000000, "Member 'SHJumpIntoHole_ProcessProximityEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SHJumpIntoHole_ProcessProximityEndOverlap, OtherActor) == 0x000008, "Member 'SHJumpIntoHole_ProcessProximityEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SHJumpIntoHole_ProcessProximityEndOverlap, OtherComponent) == 0x000010, "Member 'SHJumpIntoHole_ProcessProximityEndOverlap::OtherComponent' has a wrong offset!");
static_assert(offsetof(SHJumpIntoHole_ProcessProximityEndOverlap, OtherBodyIndex) == 0x000018, "Member 'SHJumpIntoHole_ProcessProximityEndOverlap::OtherBodyIndex' has a wrong offset!");

// DelegateFunction SHProto.SHJumpIntoHole.SHJumpIntoHoleEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHJumpIntoHole_SHJumpIntoHoleEvent__DelegateSignature final
{
public:
	class ASHJumpIntoHole*                        Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHJumpIntoHole_SHJumpIntoHoleEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHJumpIntoHole_SHJumpIntoHoleEvent__DelegateSignature");
static_assert(sizeof(SHJumpIntoHole_SHJumpIntoHoleEvent__DelegateSignature) == 0x000008, "Wrong size on SHJumpIntoHole_SHJumpIntoHoleEvent__DelegateSignature");
static_assert(offsetof(SHJumpIntoHole_SHJumpIntoHoleEvent__DelegateSignature, Actor) == 0x000000, "Member 'SHJumpIntoHole_SHJumpIntoHoleEvent__DelegateSignature::Actor' has a wrong offset!");

// Function SHProto.SHJumpIntoHole.GetCurrentFocusStageIndex
// 0x0004 (0x0004 - 0x0000)
struct SHJumpIntoHole_GetCurrentFocusStageIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHJumpIntoHole_GetCurrentFocusStageIndex) == 0x000004, "Wrong alignment on SHJumpIntoHole_GetCurrentFocusStageIndex");
static_assert(sizeof(SHJumpIntoHole_GetCurrentFocusStageIndex) == 0x000004, "Wrong size on SHJumpIntoHole_GetCurrentFocusStageIndex");
static_assert(offsetof(SHJumpIntoHole_GetCurrentFocusStageIndex, ReturnValue) == 0x000000, "Member 'SHJumpIntoHole_GetCurrentFocusStageIndex::ReturnValue' has a wrong offset!");

// Function SHProto.SHJumpIntoHole.IsInInteraction
// 0x0001 (0x0001 - 0x0000)
struct SHJumpIntoHole_IsInInteraction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHJumpIntoHole_IsInInteraction) == 0x000001, "Wrong alignment on SHJumpIntoHole_IsInInteraction");
static_assert(sizeof(SHJumpIntoHole_IsInInteraction) == 0x000001, "Wrong size on SHJumpIntoHole_IsInInteraction");
static_assert(offsetof(SHJumpIntoHole_IsInInteraction, ReturnValue) == 0x000000, "Member 'SHJumpIntoHole_IsInInteraction::ReturnValue' has a wrong offset!");

// DelegateFunction SHProto.SHJumpIntoHoleAnimInstance.SHJumpIntoHoleAnimInstanceEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHJumpIntoHoleAnimInstance_SHJumpIntoHoleAnimInstanceEvent__DelegateSignature final
{
public:
	class USHJumpIntoHoleAnimInstance*            AnimInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHJumpIntoHoleAnimInstance_SHJumpIntoHoleAnimInstanceEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHJumpIntoHoleAnimInstance_SHJumpIntoHoleAnimInstanceEvent__DelegateSignature");
static_assert(sizeof(SHJumpIntoHoleAnimInstance_SHJumpIntoHoleAnimInstanceEvent__DelegateSignature) == 0x000008, "Wrong size on SHJumpIntoHoleAnimInstance_SHJumpIntoHoleAnimInstanceEvent__DelegateSignature");
static_assert(offsetof(SHJumpIntoHoleAnimInstance_SHJumpIntoHoleAnimInstanceEvent__DelegateSignature, AnimInst) == 0x000000, "Member 'SHJumpIntoHoleAnimInstance_SHJumpIntoHoleAnimInstanceEvent__DelegateSignature::AnimInst' has a wrong offset!");

// Function SHProto.SHJumpIntoHoleAnimInstance.CanReceiveInput
// 0x0001 (0x0001 - 0x0000)
struct SHJumpIntoHoleAnimInstance_CanReceiveInput final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHJumpIntoHoleAnimInstance_CanReceiveInput) == 0x000001, "Wrong alignment on SHJumpIntoHoleAnimInstance_CanReceiveInput");
static_assert(sizeof(SHJumpIntoHoleAnimInstance_CanReceiveInput) == 0x000001, "Wrong size on SHJumpIntoHoleAnimInstance_CanReceiveInput");
static_assert(offsetof(SHJumpIntoHoleAnimInstance_CanReceiveInput, ReturnValue) == 0x000000, "Member 'SHJumpIntoHoleAnimInstance_CanReceiveInput::ReturnValue' has a wrong offset!");

// Function SHProto.SHLightingChannelsStatics.GetLightingChannelsPack
// 0x0004 (0x0004 - 0x0000)
struct SHLightingChannelsStatics_GetLightingChannelsPack final
{
public:
	ESHLightingChannelsProfile                    Profile;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSHLightingChannelsPack                ReturnValue;                                       // 0x0001(0x0003)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLightingChannelsStatics_GetLightingChannelsPack) == 0x000001, "Wrong alignment on SHLightingChannelsStatics_GetLightingChannelsPack");
static_assert(sizeof(SHLightingChannelsStatics_GetLightingChannelsPack) == 0x000004, "Wrong size on SHLightingChannelsStatics_GetLightingChannelsPack");
static_assert(offsetof(SHLightingChannelsStatics_GetLightingChannelsPack, Profile) == 0x000000, "Member 'SHLightingChannelsStatics_GetLightingChannelsPack::Profile' has a wrong offset!");
static_assert(offsetof(SHLightingChannelsStatics_GetLightingChannelsPack, ReturnValue) == 0x000001, "Member 'SHLightingChannelsStatics_GetLightingChannelsPack::ReturnValue' has a wrong offset!");

// Function SHProto.SHLoadingScreenWidget.OnShowHint
// 0x0001 (0x0001 - 0x0000)
struct SHLoadingScreenWidget_OnShowHint final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLoadingScreenWidget_OnShowHint) == 0x000001, "Wrong alignment on SHLoadingScreenWidget_OnShowHint");
static_assert(sizeof(SHLoadingScreenWidget_OnShowHint) == 0x000001, "Wrong size on SHLoadingScreenWidget_OnShowHint");
static_assert(offsetof(SHLoadingScreenWidget_OnShowHint, Show) == 0x000000, "Member 'SHLoadingScreenWidget_OnShowHint::Show' has a wrong offset!");

// Function SHProto.SHLoadingScreenWidget.GetDeathReason
// 0x0001 (0x0001 - 0x0000)
struct SHLoadingScreenWidget_GetDeathReason final
{
public:
	EGameOverCause                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLoadingScreenWidget_GetDeathReason) == 0x000001, "Wrong alignment on SHLoadingScreenWidget_GetDeathReason");
static_assert(sizeof(SHLoadingScreenWidget_GetDeathReason) == 0x000001, "Wrong size on SHLoadingScreenWidget_GetDeathReason");
static_assert(offsetof(SHLoadingScreenWidget_GetDeathReason, ReturnValue) == 0x000000, "Member 'SHLoadingScreenWidget_GetDeathReason::ReturnValue' has a wrong offset!");

// Function SHProto.SHLoadingScreenWidget.IsDeathReload
// 0x0001 (0x0001 - 0x0000)
struct SHLoadingScreenWidget_IsDeathReload final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLoadingScreenWidget_IsDeathReload) == 0x000001, "Wrong alignment on SHLoadingScreenWidget_IsDeathReload");
static_assert(sizeof(SHLoadingScreenWidget_IsDeathReload) == 0x000001, "Wrong size on SHLoadingScreenWidget_IsDeathReload");
static_assert(offsetof(SHLoadingScreenWidget_IsDeathReload, ReturnValue) == 0x000000, "Member 'SHLoadingScreenWidget_IsDeathReload::ReturnValue' has a wrong offset!");

// Function SHProto.SHLocalFogVolumetricActor.SetEnabled
// 0x0010 (0x0010 - 0x0000)
struct SHLocalFogVolumetricActor_SetEnabled final
{
public:
	bool                                          bInEnabled;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocalFogVolumetricActor_SetEnabled) == 0x000008, "Wrong alignment on SHLocalFogVolumetricActor_SetEnabled");
static_assert(sizeof(SHLocalFogVolumetricActor_SetEnabled) == 0x000010, "Wrong size on SHLocalFogVolumetricActor_SetEnabled");
static_assert(offsetof(SHLocalFogVolumetricActor_SetEnabled, bInEnabled) == 0x000000, "Member 'SHLocalFogVolumetricActor_SetEnabled::bInEnabled' has a wrong offset!");
static_assert(offsetof(SHLocalFogVolumetricActor_SetEnabled, Object) == 0x000008, "Member 'SHLocalFogVolumetricActor_SetEnabled::Object' has a wrong offset!");

// Function SHProto.SHLocalFogVolumetricActor.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct SHLocalFogVolumetricActor_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLocalFogVolumetricActor_IsEnabled) == 0x000001, "Wrong alignment on SHLocalFogVolumetricActor_IsEnabled");
static_assert(sizeof(SHLocalFogVolumetricActor_IsEnabled) == 0x000001, "Wrong size on SHLocalFogVolumetricActor_IsEnabled");
static_assert(offsetof(SHLocalFogVolumetricActor_IsEnabled, ReturnValue) == 0x000000, "Member 'SHLocalFogVolumetricActor_IsEnabled::ReturnValue' has a wrong offset!");

// Function SHProto.SHLookAtActorInterface.CanBeLookedAt
// 0x0001 (0x0001 - 0x0000)
struct SHLookAtActorInterface_CanBeLookedAt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLookAtActorInterface_CanBeLookedAt) == 0x000001, "Wrong alignment on SHLookAtActorInterface_CanBeLookedAt");
static_assert(sizeof(SHLookAtActorInterface_CanBeLookedAt) == 0x000001, "Wrong size on SHLookAtActorInterface_CanBeLookedAt");
static_assert(offsetof(SHLookAtActorInterface_CanBeLookedAt, ReturnValue) == 0x000000, "Member 'SHLookAtActorInterface_CanBeLookedAt::ReturnValue' has a wrong offset!");

// Function SHProto.SHLookAtActorInterface.GetLookAtTargetComponent
// 0x0008 (0x0008 - 0x0000)
struct SHLookAtActorInterface_GetLookAtTargetComponent final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLookAtActorInterface_GetLookAtTargetComponent) == 0x000008, "Wrong alignment on SHLookAtActorInterface_GetLookAtTargetComponent");
static_assert(sizeof(SHLookAtActorInterface_GetLookAtTargetComponent) == 0x000008, "Wrong size on SHLookAtActorInterface_GetLookAtTargetComponent");
static_assert(offsetof(SHLookAtActorInterface_GetLookAtTargetComponent, ReturnValue) == 0x000000, "Member 'SHLookAtActorInterface_GetLookAtTargetComponent::ReturnValue' has a wrong offset!");

// Function SHProto.SHLyingFigureAnimInstance.GetActiveLyingFigureLocomotionAnimInstance
// 0x0008 (0x0008 - 0x0000)
struct SHLyingFigureAnimInstance_GetActiveLyingFigureLocomotionAnimInstance final
{
public:
	class USHLyingFigureLocomotionAnimInstance*   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLyingFigureAnimInstance_GetActiveLyingFigureLocomotionAnimInstance) == 0x000008, "Wrong alignment on SHLyingFigureAnimInstance_GetActiveLyingFigureLocomotionAnimInstance");
static_assert(sizeof(SHLyingFigureAnimInstance_GetActiveLyingFigureLocomotionAnimInstance) == 0x000008, "Wrong size on SHLyingFigureAnimInstance_GetActiveLyingFigureLocomotionAnimInstance");
static_assert(offsetof(SHLyingFigureAnimInstance_GetActiveLyingFigureLocomotionAnimInstance, ReturnValue) == 0x000000, "Member 'SHLyingFigureAnimInstance_GetActiveLyingFigureLocomotionAnimInstance::ReturnValue' has a wrong offset!");

// Function SHProto.SHLyingFigureAnimInstance.GetLyingFigureAnimInstanceStateData
// 0x0008 (0x0008 - 0x0000)
struct SHLyingFigureAnimInstance_GetLyingFigureAnimInstanceStateData final
{
public:
	class USHLyingFigureAnimInstanceStateData*    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLyingFigureAnimInstance_GetLyingFigureAnimInstanceStateData) == 0x000008, "Wrong alignment on SHLyingFigureAnimInstance_GetLyingFigureAnimInstanceStateData");
static_assert(sizeof(SHLyingFigureAnimInstance_GetLyingFigureAnimInstanceStateData) == 0x000008, "Wrong size on SHLyingFigureAnimInstance_GetLyingFigureAnimInstanceStateData");
static_assert(offsetof(SHLyingFigureAnimInstance_GetLyingFigureAnimInstanceStateData, ReturnValue) == 0x000000, "Member 'SHLyingFigureAnimInstance_GetLyingFigureAnimInstanceStateData::ReturnValue' has a wrong offset!");

// Function SHProto.SHLyingFigureAnimInstance.GetLyingFigureCrawlingLocomotionAnimInstance
// 0x0008 (0x0008 - 0x0000)
struct SHLyingFigureAnimInstance_GetLyingFigureCrawlingLocomotionAnimInstance final
{
public:
	class USHLyingFigureCrawlingLocomotionAnimInstance* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLyingFigureAnimInstance_GetLyingFigureCrawlingLocomotionAnimInstance) == 0x000008, "Wrong alignment on SHLyingFigureAnimInstance_GetLyingFigureCrawlingLocomotionAnimInstance");
static_assert(sizeof(SHLyingFigureAnimInstance_GetLyingFigureCrawlingLocomotionAnimInstance) == 0x000008, "Wrong size on SHLyingFigureAnimInstance_GetLyingFigureCrawlingLocomotionAnimInstance");
static_assert(offsetof(SHLyingFigureAnimInstance_GetLyingFigureCrawlingLocomotionAnimInstance, ReturnValue) == 0x000000, "Member 'SHLyingFigureAnimInstance_GetLyingFigureCrawlingLocomotionAnimInstance::ReturnValue' has a wrong offset!");

// Function SHProto.SHLyingFigureAnimInstance.GetLyingFigureStandingLocomotionAnimInstance
// 0x0008 (0x0008 - 0x0000)
struct SHLyingFigureAnimInstance_GetLyingFigureStandingLocomotionAnimInstance final
{
public:
	class USHLyingFigureStandingLocomotionAnimInstance* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLyingFigureAnimInstance_GetLyingFigureStandingLocomotionAnimInstance) == 0x000008, "Wrong alignment on SHLyingFigureAnimInstance_GetLyingFigureStandingLocomotionAnimInstance");
static_assert(sizeof(SHLyingFigureAnimInstance_GetLyingFigureStandingLocomotionAnimInstance) == 0x000008, "Wrong size on SHLyingFigureAnimInstance_GetLyingFigureStandingLocomotionAnimInstance");
static_assert(offsetof(SHLyingFigureAnimInstance_GetLyingFigureStandingLocomotionAnimInstance, ReturnValue) == 0x000000, "Member 'SHLyingFigureAnimInstance_GetLyingFigureStandingLocomotionAnimInstance::ReturnValue' has a wrong offset!");

// Function SHProto.SHLyingFigureAnimInstanceStateData.GetAreAllowedInaccurateLocomotionAnimationsOfDistance
// 0x0008 (0x0008 - 0x0000)
struct SHLyingFigureAnimInstanceStateData_GetAreAllowedInaccurateLocomotionAnimationsOfDistance final
{
public:
	float                                         InAnimationDistance;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHLyingFigureAnimInstanceStateData_GetAreAllowedInaccurateLocomotionAnimationsOfDistance) == 0x000004, "Wrong alignment on SHLyingFigureAnimInstanceStateData_GetAreAllowedInaccurateLocomotionAnimationsOfDistance");
static_assert(sizeof(SHLyingFigureAnimInstanceStateData_GetAreAllowedInaccurateLocomotionAnimationsOfDistance) == 0x000008, "Wrong size on SHLyingFigureAnimInstanceStateData_GetAreAllowedInaccurateLocomotionAnimationsOfDistance");
static_assert(offsetof(SHLyingFigureAnimInstanceStateData_GetAreAllowedInaccurateLocomotionAnimationsOfDistance, InAnimationDistance) == 0x000000, "Member 'SHLyingFigureAnimInstanceStateData_GetAreAllowedInaccurateLocomotionAnimationsOfDistance::InAnimationDistance' has a wrong offset!");
static_assert(offsetof(SHLyingFigureAnimInstanceStateData_GetAreAllowedInaccurateLocomotionAnimationsOfDistance, ReturnValue) == 0x000004, "Member 'SHLyingFigureAnimInstanceStateData_GetAreAllowedInaccurateLocomotionAnimationsOfDistance::ReturnValue' has a wrong offset!");

// Function SHProto.SHLyingFigureAnimInstanceStateData.GetAreInaccurateLocomotionAnimationsAllowed
// 0x0001 (0x0001 - 0x0000)
struct SHLyingFigureAnimInstanceStateData_GetAreInaccurateLocomotionAnimationsAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLyingFigureAnimInstanceStateData_GetAreInaccurateLocomotionAnimationsAllowed) == 0x000001, "Wrong alignment on SHLyingFigureAnimInstanceStateData_GetAreInaccurateLocomotionAnimationsAllowed");
static_assert(sizeof(SHLyingFigureAnimInstanceStateData_GetAreInaccurateLocomotionAnimationsAllowed) == 0x000001, "Wrong size on SHLyingFigureAnimInstanceStateData_GetAreInaccurateLocomotionAnimationsAllowed");
static_assert(offsetof(SHLyingFigureAnimInstanceStateData_GetAreInaccurateLocomotionAnimationsAllowed, ReturnValue) == 0x000000, "Member 'SHLyingFigureAnimInstanceStateData_GetAreInaccurateLocomotionAnimationsAllowed::ReturnValue' has a wrong offset!");

// Function SHProto.SHLyingFigureAnimInstanceStateData.GetCrawlBendPitchAngle
// 0x0004 (0x0004 - 0x0000)
struct SHLyingFigureAnimInstanceStateData_GetCrawlBendPitchAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLyingFigureAnimInstanceStateData_GetCrawlBendPitchAngle) == 0x000004, "Wrong alignment on SHLyingFigureAnimInstanceStateData_GetCrawlBendPitchAngle");
static_assert(sizeof(SHLyingFigureAnimInstanceStateData_GetCrawlBendPitchAngle) == 0x000004, "Wrong size on SHLyingFigureAnimInstanceStateData_GetCrawlBendPitchAngle");
static_assert(offsetof(SHLyingFigureAnimInstanceStateData_GetCrawlBendPitchAngle, ReturnValue) == 0x000000, "Member 'SHLyingFigureAnimInstanceStateData_GetCrawlBendPitchAngle::ReturnValue' has a wrong offset!");

// Function SHProto.SHLyingFigureAnimInstanceStateData.GetCrawlBendYawAngle
// 0x0004 (0x0004 - 0x0000)
struct SHLyingFigureAnimInstanceStateData_GetCrawlBendYawAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLyingFigureAnimInstanceStateData_GetCrawlBendYawAngle) == 0x000004, "Wrong alignment on SHLyingFigureAnimInstanceStateData_GetCrawlBendYawAngle");
static_assert(sizeof(SHLyingFigureAnimInstanceStateData_GetCrawlBendYawAngle) == 0x000004, "Wrong size on SHLyingFigureAnimInstanceStateData_GetCrawlBendYawAngle");
static_assert(offsetof(SHLyingFigureAnimInstanceStateData_GetCrawlBendYawAngle, ReturnValue) == 0x000000, "Member 'SHLyingFigureAnimInstanceStateData_GetCrawlBendYawAngle::ReturnValue' has a wrong offset!");

// Function SHProto.SHLyingFigureAnimInstanceStateData.GetInaccurateLocomotionAnimationsDistanceAccuracy
// 0x0004 (0x0004 - 0x0000)
struct SHLyingFigureAnimInstanceStateData_GetInaccurateLocomotionAnimationsDistanceAccuracy final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLyingFigureAnimInstanceStateData_GetInaccurateLocomotionAnimationsDistanceAccuracy) == 0x000004, "Wrong alignment on SHLyingFigureAnimInstanceStateData_GetInaccurateLocomotionAnimationsDistanceAccuracy");
static_assert(sizeof(SHLyingFigureAnimInstanceStateData_GetInaccurateLocomotionAnimationsDistanceAccuracy) == 0x000004, "Wrong size on SHLyingFigureAnimInstanceStateData_GetInaccurateLocomotionAnimationsDistanceAccuracy");
static_assert(offsetof(SHLyingFigureAnimInstanceStateData_GetInaccurateLocomotionAnimationsDistanceAccuracy, ReturnValue) == 0x000000, "Member 'SHLyingFigureAnimInstanceStateData_GetInaccurateLocomotionAnimationsDistanceAccuracy::ReturnValue' has a wrong offset!");

// Function SHProto.SHLyingFigureStandingLocomotionAnimInstance.SetStruggle
// 0x0008 (0x0008 - 0x0000)
struct SHLyingFigureStandingLocomotionAnimInstance_SetStruggle final
{
public:
	float                                         ALPHA;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLyingFigureStandingLocomotionAnimInstance_SetStruggle) == 0x000004, "Wrong alignment on SHLyingFigureStandingLocomotionAnimInstance_SetStruggle");
static_assert(sizeof(SHLyingFigureStandingLocomotionAnimInstance_SetStruggle) == 0x000008, "Wrong size on SHLyingFigureStandingLocomotionAnimInstance_SetStruggle");
static_assert(offsetof(SHLyingFigureStandingLocomotionAnimInstance_SetStruggle, ALPHA) == 0x000000, "Member 'SHLyingFigureStandingLocomotionAnimInstance_SetStruggle::ALPHA' has a wrong offset!");
static_assert(offsetof(SHLyingFigureStandingLocomotionAnimInstance_SetStruggle, PlayRate) == 0x000004, "Member 'SHLyingFigureStandingLocomotionAnimInstance_SetStruggle::PlayRate' has a wrong offset!");

// Function SHProto.SHLyingFigureStandingLocomotionAnimInstance.GetSmoothedDesiredRotationYaw
// 0x0004 (0x0004 - 0x0000)
struct SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw final
{
public:
	float                                         OutYaw;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw) == 0x000004, "Wrong alignment on SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw");
static_assert(sizeof(SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw) == 0x000004, "Wrong size on SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw");
static_assert(offsetof(SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw, OutYaw) == 0x000000, "Member 'SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedDesiredRotationYaw::OutYaw' has a wrong offset!");

// Function SHProto.SHLyingFigureStandingLocomotionAnimInstance.GetSmoothedDesiredVelocity
// 0x0018 (0x0018 - 0x0000)
struct SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedDesiredVelocity final
{
public:
	struct FVector                                OutVelocity;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedDesiredVelocity) == 0x000008, "Wrong alignment on SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedDesiredVelocity");
static_assert(sizeof(SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedDesiredVelocity) == 0x000018, "Wrong size on SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedDesiredVelocity");
static_assert(offsetof(SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedDesiredVelocity, OutVelocity) == 0x000000, "Member 'SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedDesiredVelocity::OutVelocity' has a wrong offset!");

// Function SHProto.SHLyingFigureStandingLocomotionAnimInstance.GetSmoothedDesiredVelocitySizeAndYaw
// 0x0008 (0x0008 - 0x0000)
struct SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw final
{
public:
	float                                         OutVelocitySize;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVelocityYaw;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw) == 0x000004, "Wrong alignment on SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw");
static_assert(sizeof(SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw) == 0x000008, "Wrong size on SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw");
static_assert(offsetof(SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw, OutVelocitySize) == 0x000000, "Member 'SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw::OutVelocitySize' has a wrong offset!");
static_assert(offsetof(SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw, OutVelocityYaw) == 0x000004, "Member 'SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedDesiredVelocitySizeAndYaw::OutVelocityYaw' has a wrong offset!");

// Function SHProto.SHLyingFigureStandingLocomotionAnimInstance.GetSmoothedLookAt
// 0x0020 (0x0020 - 0x0000)
struct SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedLookAt final
{
public:
	struct FRotator                               OutRotation;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         OutAlpha;                                          // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedLookAt) == 0x000008, "Wrong alignment on SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedLookAt");
static_assert(sizeof(SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedLookAt) == 0x000020, "Wrong size on SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedLookAt");
static_assert(offsetof(SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedLookAt, OutRotation) == 0x000000, "Member 'SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedLookAt::OutRotation' has a wrong offset!");
static_assert(offsetof(SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedLookAt, OutAlpha) == 0x000018, "Member 'SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedLookAt::OutAlpha' has a wrong offset!");

// Function SHProto.SHLyingFigureStandingLocomotionAnimInstance.GetSmoothedStruggle
// 0x0008 (0x0008 - 0x0000)
struct SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedStruggle final
{
public:
	float                                         OutPlayRate;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutAlpha;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedStruggle) == 0x000004, "Wrong alignment on SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedStruggle");
static_assert(sizeof(SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedStruggle) == 0x000008, "Wrong size on SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedStruggle");
static_assert(offsetof(SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedStruggle, OutPlayRate) == 0x000000, "Member 'SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedStruggle::OutPlayRate' has a wrong offset!");
static_assert(offsetof(SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedStruggle, OutAlpha) == 0x000004, "Member 'SHLyingFigureStandingLocomotionAnimInstance_GetSmoothedStruggle::OutAlpha' has a wrong offset!");

// Function SHProto.SHLyingFigureStandingLocomotionAnimInstance.GetTargetDesiredRotationYaw
// 0x0004 (0x0004 - 0x0000)
struct SHLyingFigureStandingLocomotionAnimInstance_GetTargetDesiredRotationYaw final
{
public:
	float                                         OutYaw;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLyingFigureStandingLocomotionAnimInstance_GetTargetDesiredRotationYaw) == 0x000004, "Wrong alignment on SHLyingFigureStandingLocomotionAnimInstance_GetTargetDesiredRotationYaw");
static_assert(sizeof(SHLyingFigureStandingLocomotionAnimInstance_GetTargetDesiredRotationYaw) == 0x000004, "Wrong size on SHLyingFigureStandingLocomotionAnimInstance_GetTargetDesiredRotationYaw");
static_assert(offsetof(SHLyingFigureStandingLocomotionAnimInstance_GetTargetDesiredRotationYaw, OutYaw) == 0x000000, "Member 'SHLyingFigureStandingLocomotionAnimInstance_GetTargetDesiredRotationYaw::OutYaw' has a wrong offset!");

// Function SHProto.SHLyingFigureStandingLocomotionAnimInstance.GetTargetDesiredVelocity
// 0x0018 (0x0018 - 0x0000)
struct SHLyingFigureStandingLocomotionAnimInstance_GetTargetDesiredVelocity final
{
public:
	struct FVector                                OutVelocity;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLyingFigureStandingLocomotionAnimInstance_GetTargetDesiredVelocity) == 0x000008, "Wrong alignment on SHLyingFigureStandingLocomotionAnimInstance_GetTargetDesiredVelocity");
static_assert(sizeof(SHLyingFigureStandingLocomotionAnimInstance_GetTargetDesiredVelocity) == 0x000018, "Wrong size on SHLyingFigureStandingLocomotionAnimInstance_GetTargetDesiredVelocity");
static_assert(offsetof(SHLyingFigureStandingLocomotionAnimInstance_GetTargetDesiredVelocity, OutVelocity) == 0x000000, "Member 'SHLyingFigureStandingLocomotionAnimInstance_GetTargetDesiredVelocity::OutVelocity' has a wrong offset!");

// Function SHProto.SHLyingFigureStandingLocomotionAnimInstance.GetTargetDesiredVelocitySizeAndYaw
// 0x0008 (0x0008 - 0x0000)
struct SHLyingFigureStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw final
{
public:
	float                                         OutVelocitySize;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVelocityYaw;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLyingFigureStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw) == 0x000004, "Wrong alignment on SHLyingFigureStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw");
static_assert(sizeof(SHLyingFigureStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw) == 0x000008, "Wrong size on SHLyingFigureStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw");
static_assert(offsetof(SHLyingFigureStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw, OutVelocitySize) == 0x000000, "Member 'SHLyingFigureStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw::OutVelocitySize' has a wrong offset!");
static_assert(offsetof(SHLyingFigureStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw, OutVelocityYaw) == 0x000004, "Member 'SHLyingFigureStandingLocomotionAnimInstance_GetTargetDesiredVelocitySizeAndYaw::OutVelocityYaw' has a wrong offset!");

// Function SHProto.SHLyingFigureStandingLocomotionAnimInstance.GetTargetLookAtAlpha
// 0x0004 (0x0004 - 0x0000)
struct SHLyingFigureStandingLocomotionAnimInstance_GetTargetLookAtAlpha final
{
public:
	float                                         OutAlpha;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLyingFigureStandingLocomotionAnimInstance_GetTargetLookAtAlpha) == 0x000004, "Wrong alignment on SHLyingFigureStandingLocomotionAnimInstance_GetTargetLookAtAlpha");
static_assert(sizeof(SHLyingFigureStandingLocomotionAnimInstance_GetTargetLookAtAlpha) == 0x000004, "Wrong size on SHLyingFigureStandingLocomotionAnimInstance_GetTargetLookAtAlpha");
static_assert(offsetof(SHLyingFigureStandingLocomotionAnimInstance_GetTargetLookAtAlpha, OutAlpha) == 0x000000, "Member 'SHLyingFigureStandingLocomotionAnimInstance_GetTargetLookAtAlpha::OutAlpha' has a wrong offset!");

// Function SHProto.SHLyingFigureStandingLocomotionAnimInstance.GetTargetStruggleAlpha
// 0x0004 (0x0004 - 0x0000)
struct SHLyingFigureStandingLocomotionAnimInstance_GetTargetStruggleAlpha final
{
public:
	float                                         OutAlpha;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHLyingFigureStandingLocomotionAnimInstance_GetTargetStruggleAlpha) == 0x000004, "Wrong alignment on SHLyingFigureStandingLocomotionAnimInstance_GetTargetStruggleAlpha");
static_assert(sizeof(SHLyingFigureStandingLocomotionAnimInstance_GetTargetStruggleAlpha) == 0x000004, "Wrong size on SHLyingFigureStandingLocomotionAnimInstance_GetTargetStruggleAlpha");
static_assert(offsetof(SHLyingFigureStandingLocomotionAnimInstance_GetTargetStruggleAlpha, OutAlpha) == 0x000000, "Member 'SHLyingFigureStandingLocomotionAnimInstance_GetTargetStruggleAlpha::OutAlpha' has a wrong offset!");

// Function SHProto.SHLyingFigureStandingLocomotionAnimInstance.GetTransformationToCrawlingAnimation
// 0x0068 (0x0068 - 0x0000)
struct SHLyingFigureStandingLocomotionAnimInstance_GetTransformationToCrawlingAnimation final
{
public:
	struct FRotator                               InLocalRotation;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      OutAnimation;                                      // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutPlayRate;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutBlendInDuration;                                // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutBlendOutDuration;                               // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               OutAnimaitonRotation;                              // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               OutRemainderRotation;                              // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          OutUsesDelayedRootRotation;                        // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHLyingFigureStandingLocomotionAnimInstance_GetTransformationToCrawlingAnimation) == 0x000008, "Wrong alignment on SHLyingFigureStandingLocomotionAnimInstance_GetTransformationToCrawlingAnimation");
static_assert(sizeof(SHLyingFigureStandingLocomotionAnimInstance_GetTransformationToCrawlingAnimation) == 0x000068, "Wrong size on SHLyingFigureStandingLocomotionAnimInstance_GetTransformationToCrawlingAnimation");
static_assert(offsetof(SHLyingFigureStandingLocomotionAnimInstance_GetTransformationToCrawlingAnimation, InLocalRotation) == 0x000000, "Member 'SHLyingFigureStandingLocomotionAnimInstance_GetTransformationToCrawlingAnimation::InLocalRotation' has a wrong offset!");
static_assert(offsetof(SHLyingFigureStandingLocomotionAnimInstance_GetTransformationToCrawlingAnimation, OutAnimation) == 0x000018, "Member 'SHLyingFigureStandingLocomotionAnimInstance_GetTransformationToCrawlingAnimation::OutAnimation' has a wrong offset!");
static_assert(offsetof(SHLyingFigureStandingLocomotionAnimInstance_GetTransformationToCrawlingAnimation, OutPlayRate) == 0x000020, "Member 'SHLyingFigureStandingLocomotionAnimInstance_GetTransformationToCrawlingAnimation::OutPlayRate' has a wrong offset!");
static_assert(offsetof(SHLyingFigureStandingLocomotionAnimInstance_GetTransformationToCrawlingAnimation, OutBlendInDuration) == 0x000024, "Member 'SHLyingFigureStandingLocomotionAnimInstance_GetTransformationToCrawlingAnimation::OutBlendInDuration' has a wrong offset!");
static_assert(offsetof(SHLyingFigureStandingLocomotionAnimInstance_GetTransformationToCrawlingAnimation, OutBlendOutDuration) == 0x000028, "Member 'SHLyingFigureStandingLocomotionAnimInstance_GetTransformationToCrawlingAnimation::OutBlendOutDuration' has a wrong offset!");
static_assert(offsetof(SHLyingFigureStandingLocomotionAnimInstance_GetTransformationToCrawlingAnimation, OutAnimaitonRotation) == 0x000030, "Member 'SHLyingFigureStandingLocomotionAnimInstance_GetTransformationToCrawlingAnimation::OutAnimaitonRotation' has a wrong offset!");
static_assert(offsetof(SHLyingFigureStandingLocomotionAnimInstance_GetTransformationToCrawlingAnimation, OutRemainderRotation) == 0x000048, "Member 'SHLyingFigureStandingLocomotionAnimInstance_GetTransformationToCrawlingAnimation::OutRemainderRotation' has a wrong offset!");
static_assert(offsetof(SHLyingFigureStandingLocomotionAnimInstance_GetTransformationToCrawlingAnimation, OutUsesDelayedRootRotation) == 0x000060, "Member 'SHLyingFigureStandingLocomotionAnimInstance_GetTransformationToCrawlingAnimation::OutUsesDelayedRootRotation' has a wrong offset!");

// Function SHProto.SHMainMenuWidget.BeginCustomLevel
// 0x0008 (0x0008 - 0x0000)
struct SHMainMenuWidget_BeginCustomLevel final
{
public:
	struct FStreamableLevelHandle                 LevelHandle;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMainMenuWidget_BeginCustomLevel) == 0x000004, "Wrong alignment on SHMainMenuWidget_BeginCustomLevel");
static_assert(sizeof(SHMainMenuWidget_BeginCustomLevel) == 0x000008, "Wrong size on SHMainMenuWidget_BeginCustomLevel");
static_assert(offsetof(SHMainMenuWidget_BeginCustomLevel, LevelHandle) == 0x000000, "Member 'SHMainMenuWidget_BeginCustomLevel::LevelHandle' has a wrong offset!");

// Function SHProto.SHMainMenuWidget.BeginGameFromSpawnPoint
// 0x0130 (0x0130 - 0x0000)
struct SHMainMenuWidget_BeginGameFromSpawnPoint final
{
public:
	struct FSpawnPointData                        SpawnPointData;                                    // 0x0000(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UMovieConfig*                           Movie;                                             // 0x0120(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NonSkippableLen;                                   // 0x0128(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNewGame;                                         // 0x012C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHMainMenuWidget_BeginGameFromSpawnPoint) == 0x000010, "Wrong alignment on SHMainMenuWidget_BeginGameFromSpawnPoint");
static_assert(sizeof(SHMainMenuWidget_BeginGameFromSpawnPoint) == 0x000130, "Wrong size on SHMainMenuWidget_BeginGameFromSpawnPoint");
static_assert(offsetof(SHMainMenuWidget_BeginGameFromSpawnPoint, SpawnPointData) == 0x000000, "Member 'SHMainMenuWidget_BeginGameFromSpawnPoint::SpawnPointData' has a wrong offset!");
static_assert(offsetof(SHMainMenuWidget_BeginGameFromSpawnPoint, Movie) == 0x000120, "Member 'SHMainMenuWidget_BeginGameFromSpawnPoint::Movie' has a wrong offset!");
static_assert(offsetof(SHMainMenuWidget_BeginGameFromSpawnPoint, NonSkippableLen) == 0x000128, "Member 'SHMainMenuWidget_BeginGameFromSpawnPoint::NonSkippableLen' has a wrong offset!");
static_assert(offsetof(SHMainMenuWidget_BeginGameFromSpawnPoint, IsNewGame) == 0x00012C, "Member 'SHMainMenuWidget_BeginGameFromSpawnPoint::IsNewGame' has a wrong offset!");

// Function SHProto.SHMainMenuWidget.BeginGameFromSpawnPointHandle
// 0x0030 (0x0030 - 0x0000)
struct SHMainMenuWidget_BeginGameFromSpawnPointHandle final
{
public:
	struct FSpawnPointHandle                      SpawnPointHandle;                                  // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UMovieConfig*                           Movie;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NonSkippableLen;                                   // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNewGame;                                         // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHMainMenuWidget_BeginGameFromSpawnPointHandle) == 0x000008, "Wrong alignment on SHMainMenuWidget_BeginGameFromSpawnPointHandle");
static_assert(sizeof(SHMainMenuWidget_BeginGameFromSpawnPointHandle) == 0x000030, "Wrong size on SHMainMenuWidget_BeginGameFromSpawnPointHandle");
static_assert(offsetof(SHMainMenuWidget_BeginGameFromSpawnPointHandle, SpawnPointHandle) == 0x000000, "Member 'SHMainMenuWidget_BeginGameFromSpawnPointHandle::SpawnPointHandle' has a wrong offset!");
static_assert(offsetof(SHMainMenuWidget_BeginGameFromSpawnPointHandle, Movie) == 0x000020, "Member 'SHMainMenuWidget_BeginGameFromSpawnPointHandle::Movie' has a wrong offset!");
static_assert(offsetof(SHMainMenuWidget_BeginGameFromSpawnPointHandle, NonSkippableLen) == 0x000028, "Member 'SHMainMenuWidget_BeginGameFromSpawnPointHandle::NonSkippableLen' has a wrong offset!");
static_assert(offsetof(SHMainMenuWidget_BeginGameFromSpawnPointHandle, IsNewGame) == 0x00002C, "Member 'SHMainMenuWidget_BeginGameFromSpawnPointHandle::IsNewGame' has a wrong offset!");
static_assert(offsetof(SHMainMenuWidget_BeginGameFromSpawnPointHandle, ReturnValue) == 0x00002D, "Member 'SHMainMenuWidget_BeginGameFromSpawnPointHandle::ReturnValue' has a wrong offset!");

// Function SHProto.SHMainMenuWidget.BeginNewGameFromSpawnPoint
// 0x0010 (0x0010 - 0x0000)
struct SHMainMenuWidget_BeginNewGameFromSpawnPoint final
{
public:
	class UMovieConfig*                           Movie;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NonSkippableLen;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHMainMenuWidget_BeginNewGameFromSpawnPoint) == 0x000008, "Wrong alignment on SHMainMenuWidget_BeginNewGameFromSpawnPoint");
static_assert(sizeof(SHMainMenuWidget_BeginNewGameFromSpawnPoint) == 0x000010, "Wrong size on SHMainMenuWidget_BeginNewGameFromSpawnPoint");
static_assert(offsetof(SHMainMenuWidget_BeginNewGameFromSpawnPoint, Movie) == 0x000000, "Member 'SHMainMenuWidget_BeginNewGameFromSpawnPoint::Movie' has a wrong offset!");
static_assert(offsetof(SHMainMenuWidget_BeginNewGameFromSpawnPoint, NonSkippableLen) == 0x000008, "Member 'SHMainMenuWidget_BeginNewGameFromSpawnPoint::NonSkippableLen' has a wrong offset!");
static_assert(offsetof(SHMainMenuWidget_BeginNewGameFromSpawnPoint, ReturnValue) == 0x00000C, "Member 'SHMainMenuWidget_BeginNewGameFromSpawnPoint::ReturnValue' has a wrong offset!");

// Function SHProto.SHMandarinAnimComponent.ChangeLocomotion
// 0x0001 (0x0001 - 0x0000)
struct SHMandarinAnimComponent_ChangeLocomotion final
{
public:
	bool                                          ToAggressive;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMandarinAnimComponent_ChangeLocomotion) == 0x000001, "Wrong alignment on SHMandarinAnimComponent_ChangeLocomotion");
static_assert(sizeof(SHMandarinAnimComponent_ChangeLocomotion) == 0x000001, "Wrong size on SHMandarinAnimComponent_ChangeLocomotion");
static_assert(offsetof(SHMandarinAnimComponent_ChangeLocomotion, ToAggressive) == 0x000000, "Member 'SHMandarinAnimComponent_ChangeLocomotion::ToAggressive' has a wrong offset!");

// Function SHProto.SHMandarinAnimComponent.SetHanging
// 0x0001 (0x0001 - 0x0000)
struct SHMandarinAnimComponent_SetHanging final
{
public:
	bool                                          IsHanging;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMandarinAnimComponent_SetHanging) == 0x000001, "Wrong alignment on SHMandarinAnimComponent_SetHanging");
static_assert(sizeof(SHMandarinAnimComponent_SetHanging) == 0x000001, "Wrong size on SHMandarinAnimComponent_SetHanging");
static_assert(offsetof(SHMandarinAnimComponent_SetHanging, IsHanging) == 0x000000, "Member 'SHMandarinAnimComponent_SetHanging::IsHanging' has a wrong offset!");

// Function SHProto.SHMandarinAnimComponent.SetLastStep
// 0x0001 (0x0001 - 0x0000)
struct SHMandarinAnimComponent_SetLastStep final
{
public:
	bool                                          WasRight;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMandarinAnimComponent_SetLastStep) == 0x000001, "Wrong alignment on SHMandarinAnimComponent_SetLastStep");
static_assert(sizeof(SHMandarinAnimComponent_SetLastStep) == 0x000001, "Wrong size on SHMandarinAnimComponent_SetLastStep");
static_assert(offsetof(SHMandarinAnimComponent_SetLastStep, WasRight) == 0x000000, "Member 'SHMandarinAnimComponent_SetLastStep::WasRight' has a wrong offset!");

// Function SHProto.SHMandarinAnimComponent.SetTongueSnapLocation
// 0x0018 (0x0018 - 0x0000)
struct SHMandarinAnimComponent_SetTongueSnapLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMandarinAnimComponent_SetTongueSnapLocation) == 0x000008, "Wrong alignment on SHMandarinAnimComponent_SetTongueSnapLocation");
static_assert(sizeof(SHMandarinAnimComponent_SetTongueSnapLocation) == 0x000018, "Wrong size on SHMandarinAnimComponent_SetTongueSnapLocation");
static_assert(offsetof(SHMandarinAnimComponent_SetTongueSnapLocation, Location) == 0x000000, "Member 'SHMandarinAnimComponent_SetTongueSnapLocation::Location' has a wrong offset!");

// Function SHProto.SHMandarinAnimComponent.SetTongueSnapRotation
// 0x0018 (0x0018 - 0x0000)
struct SHMandarinAnimComponent_SetTongueSnapRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMandarinAnimComponent_SetTongueSnapRotation) == 0x000008, "Wrong alignment on SHMandarinAnimComponent_SetTongueSnapRotation");
static_assert(sizeof(SHMandarinAnimComponent_SetTongueSnapRotation) == 0x000018, "Wrong size on SHMandarinAnimComponent_SetTongueSnapRotation");
static_assert(offsetof(SHMandarinAnimComponent_SetTongueSnapRotation, Rotation) == 0x000000, "Member 'SHMandarinAnimComponent_SetTongueSnapRotation::Rotation' has a wrong offset!");

// Function SHProto.SHMandarinAnimComponent.SetTongueTransformationAlpha
// 0x0001 (0x0001 - 0x0000)
struct SHMandarinAnimComponent_SetTongueTransformationAlpha final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMandarinAnimComponent_SetTongueTransformationAlpha) == 0x000001, "Wrong alignment on SHMandarinAnimComponent_SetTongueTransformationAlpha");
static_assert(sizeof(SHMandarinAnimComponent_SetTongueTransformationAlpha) == 0x000001, "Wrong size on SHMandarinAnimComponent_SetTongueTransformationAlpha");
static_assert(offsetof(SHMandarinAnimComponent_SetTongueTransformationAlpha, Enable) == 0x000000, "Member 'SHMandarinAnimComponent_SetTongueTransformationAlpha::Enable' has a wrong offset!");

// Function SHProto.SHMandarinAnimComponent.ToggleLegsRagdoll
// 0x0001 (0x0001 - 0x0000)
struct SHMandarinAnimComponent_ToggleLegsRagdoll final
{
public:
	bool                                          Activate_0;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMandarinAnimComponent_ToggleLegsRagdoll) == 0x000001, "Wrong alignment on SHMandarinAnimComponent_ToggleLegsRagdoll");
static_assert(sizeof(SHMandarinAnimComponent_ToggleLegsRagdoll) == 0x000001, "Wrong size on SHMandarinAnimComponent_ToggleLegsRagdoll");
static_assert(offsetof(SHMandarinAnimComponent_ToggleLegsRagdoll, Activate_0) == 0x000000, "Member 'SHMandarinAnimComponent_ToggleLegsRagdoll::Activate_0' has a wrong offset!");

// Function SHProto.SHMandarinAnimInstanceStateData.IsMovementCanceled
// 0x0001 (0x0001 - 0x0000)
struct SHMandarinAnimInstanceStateData_IsMovementCanceled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMandarinAnimInstanceStateData_IsMovementCanceled) == 0x000001, "Wrong alignment on SHMandarinAnimInstanceStateData_IsMovementCanceled");
static_assert(sizeof(SHMandarinAnimInstanceStateData_IsMovementCanceled) == 0x000001, "Wrong size on SHMandarinAnimInstanceStateData_IsMovementCanceled");
static_assert(offsetof(SHMandarinAnimInstanceStateData_IsMovementCanceled, ReturnValue) == 0x000000, "Member 'SHMandarinAnimInstanceStateData_IsMovementCanceled::ReturnValue' has a wrong offset!");

// Function SHProto.SHMandarinTransformationState.GetMandarinTransformationState
// 0x0001 (0x0001 - 0x0000)
struct SHMandarinTransformationState_GetMandarinTransformationState final
{
public:
	ESHMandarinTransformationState                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMandarinTransformationState_GetMandarinTransformationState) == 0x000001, "Wrong alignment on SHMandarinTransformationState_GetMandarinTransformationState");
static_assert(sizeof(SHMandarinTransformationState_GetMandarinTransformationState) == 0x000001, "Wrong size on SHMandarinTransformationState_GetMandarinTransformationState");
static_assert(offsetof(SHMandarinTransformationState_GetMandarinTransformationState, ReturnValue) == 0x000000, "Member 'SHMandarinTransformationState_GetMandarinTransformationState::ReturnValue' has a wrong offset!");

// Function SHProto.SHMandarinTransformationState.GetTransformationStateHeightOffset
// 0x0018 (0x0018 - 0x0000)
struct SHMandarinTransformationState_GetTransformationStateHeightOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMandarinTransformationState_GetTransformationStateHeightOffset) == 0x000008, "Wrong alignment on SHMandarinTransformationState_GetTransformationStateHeightOffset");
static_assert(sizeof(SHMandarinTransformationState_GetTransformationStateHeightOffset) == 0x000018, "Wrong size on SHMandarinTransformationState_GetTransformationStateHeightOffset");
static_assert(offsetof(SHMandarinTransformationState_GetTransformationStateHeightOffset, ReturnValue) == 0x000000, "Member 'SHMandarinTransformationState_GetTransformationStateHeightOffset::ReturnValue' has a wrong offset!");

// Function SHProto.SHMannequinAnimInstance.GetMannequinAnimInstanceStateData
// 0x0008 (0x0008 - 0x0000)
struct SHMannequinAnimInstance_GetMannequinAnimInstanceStateData final
{
public:
	class USHMannequinAnimInstanceStateData*      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMannequinAnimInstance_GetMannequinAnimInstanceStateData) == 0x000008, "Wrong alignment on SHMannequinAnimInstance_GetMannequinAnimInstanceStateData");
static_assert(sizeof(SHMannequinAnimInstance_GetMannequinAnimInstanceStateData) == 0x000008, "Wrong size on SHMannequinAnimInstance_GetMannequinAnimInstanceStateData");
static_assert(offsetof(SHMannequinAnimInstance_GetMannequinAnimInstanceStateData, ReturnValue) == 0x000000, "Member 'SHMannequinAnimInstance_GetMannequinAnimInstanceStateData::ReturnValue' has a wrong offset!");

// Function SHProto.SHMannequinAnimInstance.GetMannequinLocomotionAnimInstance
// 0x0010 (0x0010 - 0x0000)
struct SHMannequinAnimInstance_GetMannequinLocomotionAnimInstance final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USHMannequinLocomotionAnimInstance*     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMannequinAnimInstance_GetMannequinLocomotionAnimInstance) == 0x000008, "Wrong alignment on SHMannequinAnimInstance_GetMannequinLocomotionAnimInstance");
static_assert(sizeof(SHMannequinAnimInstance_GetMannequinLocomotionAnimInstance) == 0x000010, "Wrong size on SHMannequinAnimInstance_GetMannequinLocomotionAnimInstance");
static_assert(offsetof(SHMannequinAnimInstance_GetMannequinLocomotionAnimInstance, SlotIndex) == 0x000000, "Member 'SHMannequinAnimInstance_GetMannequinLocomotionAnimInstance::SlotIndex' has a wrong offset!");
static_assert(offsetof(SHMannequinAnimInstance_GetMannequinLocomotionAnimInstance, ReturnValue) == 0x000008, "Member 'SHMannequinAnimInstance_GetMannequinLocomotionAnimInstance::ReturnValue' has a wrong offset!");

// DelegateFunction SHProto.SHMapRenderer.SHMapRendererEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHMapRenderer_SHMapRendererEvent__DelegateSignature final
{
public:
	class ASHMapRenderer*                         RendererPtr;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMapRenderer_SHMapRendererEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHMapRenderer_SHMapRendererEvent__DelegateSignature");
static_assert(sizeof(SHMapRenderer_SHMapRendererEvent__DelegateSignature) == 0x000008, "Wrong size on SHMapRenderer_SHMapRendererEvent__DelegateSignature");
static_assert(offsetof(SHMapRenderer_SHMapRendererEvent__DelegateSignature, RendererPtr) == 0x000000, "Member 'SHMapRenderer_SHMapRendererEvent__DelegateSignature::RendererPtr' has a wrong offset!");

// Function SHProto.SHMapRenderer.GetRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct SHMapRenderer_GetRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMapRenderer_GetRenderTarget) == 0x000008, "Wrong alignment on SHMapRenderer_GetRenderTarget");
static_assert(sizeof(SHMapRenderer_GetRenderTarget) == 0x000008, "Wrong size on SHMapRenderer_GetRenderTarget");
static_assert(offsetof(SHMapRenderer_GetRenderTarget, ReturnValue) == 0x000000, "Member 'SHMapRenderer_GetRenderTarget::ReturnValue' has a wrong offset!");

// Function SHProto.SHMapRenderer.GetUserWidgetObject
// 0x0008 (0x0008 - 0x0000)
struct SHMapRenderer_GetUserWidgetObject final
{
public:
	class USHGameplayMapRenderWidget*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMapRenderer_GetUserWidgetObject) == 0x000008, "Wrong alignment on SHMapRenderer_GetUserWidgetObject");
static_assert(sizeof(SHMapRenderer_GetUserWidgetObject) == 0x000008, "Wrong size on SHMapRenderer_GetUserWidgetObject");
static_assert(offsetof(SHMapRenderer_GetUserWidgetObject, ReturnValue) == 0x000000, "Member 'SHMapRenderer_GetUserWidgetObject::ReturnValue' has a wrong offset!");

// Function SHProto.SHMariaFlashlightReactionAnimSubcomp.BlockAndInterruptFlashlightReactions
// 0x0008 (0x0008 - 0x0000)
struct SHMariaFlashlightReactionAnimSubcomp_BlockAndInterruptFlashlightReactions final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMariaFlashlightReactionAnimSubcomp_BlockAndInterruptFlashlightReactions) == 0x000008, "Wrong alignment on SHMariaFlashlightReactionAnimSubcomp_BlockAndInterruptFlashlightReactions");
static_assert(sizeof(SHMariaFlashlightReactionAnimSubcomp_BlockAndInterruptFlashlightReactions) == 0x000008, "Wrong size on SHMariaFlashlightReactionAnimSubcomp_BlockAndInterruptFlashlightReactions");
static_assert(offsetof(SHMariaFlashlightReactionAnimSubcomp_BlockAndInterruptFlashlightReactions, Object) == 0x000000, "Member 'SHMariaFlashlightReactionAnimSubcomp_BlockAndInterruptFlashlightReactions::Object' has a wrong offset!");

// Function SHProto.SHMariaFlashlightReactionAnimSubcomp.BlockFlashlightReactions
// 0x0010 (0x0010 - 0x0000)
struct SHMariaFlashlightReactionAnimSubcomp_BlockFlashlightReactions final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMariaFlashlightReactionAnimSubcomp_BlockFlashlightReactions) == 0x000008, "Wrong alignment on SHMariaFlashlightReactionAnimSubcomp_BlockFlashlightReactions");
static_assert(sizeof(SHMariaFlashlightReactionAnimSubcomp_BlockFlashlightReactions) == 0x000010, "Wrong size on SHMariaFlashlightReactionAnimSubcomp_BlockFlashlightReactions");
static_assert(offsetof(SHMariaFlashlightReactionAnimSubcomp_BlockFlashlightReactions, Blocked) == 0x000000, "Member 'SHMariaFlashlightReactionAnimSubcomp_BlockFlashlightReactions::Blocked' has a wrong offset!");
static_assert(offsetof(SHMariaFlashlightReactionAnimSubcomp_BlockFlashlightReactions, Object) == 0x000008, "Member 'SHMariaFlashlightReactionAnimSubcomp_BlockFlashlightReactions::Object' has a wrong offset!");

// Function SHProto.SHMariaFlashlightReactionAnimSubcomp.GetEyesCoverAlpha
// 0x0004 (0x0004 - 0x0000)
struct SHMariaFlashlightReactionAnimSubcomp_GetEyesCoverAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMariaFlashlightReactionAnimSubcomp_GetEyesCoverAlpha) == 0x000004, "Wrong alignment on SHMariaFlashlightReactionAnimSubcomp_GetEyesCoverAlpha");
static_assert(sizeof(SHMariaFlashlightReactionAnimSubcomp_GetEyesCoverAlpha) == 0x000004, "Wrong size on SHMariaFlashlightReactionAnimSubcomp_GetEyesCoverAlpha");
static_assert(offsetof(SHMariaFlashlightReactionAnimSubcomp_GetEyesCoverAlpha, ReturnValue) == 0x000000, "Member 'SHMariaFlashlightReactionAnimSubcomp_GetEyesCoverAlpha::ReturnValue' has a wrong offset!");

// Function SHProto.SHMariaInterface.ChangeBlockingAiming
// 0x0001 (0x0001 - 0x0000)
struct SHMariaInterface_ChangeBlockingAiming final
{
public:
	bool                                          bShouldAimAt;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMariaInterface_ChangeBlockingAiming) == 0x000001, "Wrong alignment on SHMariaInterface_ChangeBlockingAiming");
static_assert(sizeof(SHMariaInterface_ChangeBlockingAiming) == 0x000001, "Wrong size on SHMariaInterface_ChangeBlockingAiming");
static_assert(offsetof(SHMariaInterface_ChangeBlockingAiming, bShouldAimAt) == 0x000000, "Member 'SHMariaInterface_ChangeBlockingAiming::bShouldAimAt' has a wrong offset!");

// Function SHProto.SHMariaLocomotionAnimInstance.GetFlashlightCoverEyesAnimBlendWeigth
// 0x0004 (0x0004 - 0x0000)
struct SHMariaLocomotionAnimInstance_GetFlashlightCoverEyesAnimBlendWeigth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMariaLocomotionAnimInstance_GetFlashlightCoverEyesAnimBlendWeigth) == 0x000004, "Wrong alignment on SHMariaLocomotionAnimInstance_GetFlashlightCoverEyesAnimBlendWeigth");
static_assert(sizeof(SHMariaLocomotionAnimInstance_GetFlashlightCoverEyesAnimBlendWeigth) == 0x000004, "Wrong size on SHMariaLocomotionAnimInstance_GetFlashlightCoverEyesAnimBlendWeigth");
static_assert(offsetof(SHMariaLocomotionAnimInstance_GetFlashlightCoverEyesAnimBlendWeigth, ReturnValue) == 0x000000, "Member 'SHMariaLocomotionAnimInstance_GetFlashlightCoverEyesAnimBlendWeigth::ReturnValue' has a wrong offset!");

// Function SHProto.SHMariaLookAtAnimInstance.GetFlashlightCoverEyesAnimBlendWeigth
// 0x0004 (0x0004 - 0x0000)
struct SHMariaLookAtAnimInstance_GetFlashlightCoverEyesAnimBlendWeigth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMariaLookAtAnimInstance_GetFlashlightCoverEyesAnimBlendWeigth) == 0x000004, "Wrong alignment on SHMariaLookAtAnimInstance_GetFlashlightCoverEyesAnimBlendWeigth");
static_assert(sizeof(SHMariaLookAtAnimInstance_GetFlashlightCoverEyesAnimBlendWeigth) == 0x000004, "Wrong size on SHMariaLookAtAnimInstance_GetFlashlightCoverEyesAnimBlendWeigth");
static_assert(offsetof(SHMariaLookAtAnimInstance_GetFlashlightCoverEyesAnimBlendWeigth, ReturnValue) == 0x000000, "Member 'SHMariaLookAtAnimInstance_GetFlashlightCoverEyesAnimBlendWeigth::ReturnValue' has a wrong offset!");

// Function SHProto.SHMariaReceivedDamageEndingValueProcessor.ProcessMariaHealthChanged
// 0x0010 (0x0010 - 0x0000)
struct SHMariaReceivedDamageEndingValueProcessor_ProcessMariaHealthChanged final
{
public:
	class UMaiHealth*                             HealthComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviousHealthValue;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHMariaReceivedDamageEndingValueProcessor_ProcessMariaHealthChanged) == 0x000008, "Wrong alignment on SHMariaReceivedDamageEndingValueProcessor_ProcessMariaHealthChanged");
static_assert(sizeof(SHMariaReceivedDamageEndingValueProcessor_ProcessMariaHealthChanged) == 0x000010, "Wrong size on SHMariaReceivedDamageEndingValueProcessor_ProcessMariaHealthChanged");
static_assert(offsetof(SHMariaReceivedDamageEndingValueProcessor_ProcessMariaHealthChanged, HealthComponent) == 0x000000, "Member 'SHMariaReceivedDamageEndingValueProcessor_ProcessMariaHealthChanged::HealthComponent' has a wrong offset!");
static_assert(offsetof(SHMariaReceivedDamageEndingValueProcessor_ProcessMariaHealthChanged, PreviousHealthValue) == 0x000008, "Member 'SHMariaReceivedDamageEndingValueProcessor_ProcessMariaHealthChanged::PreviousHealthValue' has a wrong offset!");

// Function SHProto.SHMariaVerbalReactionsComponent.GenerateCustomValuesDebug
// 0x0010 (0x0010 - 0x0000)
struct SHMariaVerbalReactionsComponent_GenerateCustomValuesDebug final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMariaVerbalReactionsComponent_GenerateCustomValuesDebug) == 0x000008, "Wrong alignment on SHMariaVerbalReactionsComponent_GenerateCustomValuesDebug");
static_assert(sizeof(SHMariaVerbalReactionsComponent_GenerateCustomValuesDebug) == 0x000010, "Wrong size on SHMariaVerbalReactionsComponent_GenerateCustomValuesDebug");
static_assert(offsetof(SHMariaVerbalReactionsComponent_GenerateCustomValuesDebug, ReturnValue) == 0x000000, "Member 'SHMariaVerbalReactionsComponent_GenerateCustomValuesDebug::ReturnValue' has a wrong offset!");

// Function SHProto.SHMariaVerbalReactionsComponent.GetDialogsToPreload
// 0x0010 (0x0010 - 0x0000)
struct SHMariaVerbalReactionsComponent_GetDialogsToPreload final
{
public:
	TArray<struct FDialogTalkID>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMariaVerbalReactionsComponent_GetDialogsToPreload) == 0x000008, "Wrong alignment on SHMariaVerbalReactionsComponent_GetDialogsToPreload");
static_assert(sizeof(SHMariaVerbalReactionsComponent_GetDialogsToPreload) == 0x000010, "Wrong size on SHMariaVerbalReactionsComponent_GetDialogsToPreload");
static_assert(offsetof(SHMariaVerbalReactionsComponent_GetDialogsToPreload, ReturnValue) == 0x000000, "Member 'SHMariaVerbalReactionsComponent_GetDialogsToPreload::ReturnValue' has a wrong offset!");

// Function SHProto.SHMariaVerbalReactionsComponent.HandleMariaInDangerModeChanged
// 0x0008 (0x0008 - 0x0000)
struct SHMariaVerbalReactionsComponent_HandleMariaInDangerModeChanged final
{
public:
	class USHMariaCombatComponent*                CombatComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMariaVerbalReactionsComponent_HandleMariaInDangerModeChanged) == 0x000008, "Wrong alignment on SHMariaVerbalReactionsComponent_HandleMariaInDangerModeChanged");
static_assert(sizeof(SHMariaVerbalReactionsComponent_HandleMariaInDangerModeChanged) == 0x000008, "Wrong size on SHMariaVerbalReactionsComponent_HandleMariaInDangerModeChanged");
static_assert(offsetof(SHMariaVerbalReactionsComponent_HandleMariaInDangerModeChanged, CombatComponent) == 0x000000, "Member 'SHMariaVerbalReactionsComponent_HandleMariaInDangerModeChanged::CombatComponent' has a wrong offset!");

// Function SHProto.SHMariaVerbalReactionsComponent.HandlePlayerMeleePrimaryAttackStarted
// 0x0010 (0x0010 - 0x0000)
struct SHMariaVerbalReactionsComponent_HandlePlayerMeleePrimaryAttackStarted final
{
public:
	class USHMeleeCmbSubcomp*                     MeleeCombatSubcomponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHItemWeapon*                          ItemWeaponContext;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMariaVerbalReactionsComponent_HandlePlayerMeleePrimaryAttackStarted) == 0x000008, "Wrong alignment on SHMariaVerbalReactionsComponent_HandlePlayerMeleePrimaryAttackStarted");
static_assert(sizeof(SHMariaVerbalReactionsComponent_HandlePlayerMeleePrimaryAttackStarted) == 0x000010, "Wrong size on SHMariaVerbalReactionsComponent_HandlePlayerMeleePrimaryAttackStarted");
static_assert(offsetof(SHMariaVerbalReactionsComponent_HandlePlayerMeleePrimaryAttackStarted, MeleeCombatSubcomponent) == 0x000000, "Member 'SHMariaVerbalReactionsComponent_HandlePlayerMeleePrimaryAttackStarted::MeleeCombatSubcomponent' has a wrong offset!");
static_assert(offsetof(SHMariaVerbalReactionsComponent_HandlePlayerMeleePrimaryAttackStarted, ItemWeaponContext) == 0x000008, "Member 'SHMariaVerbalReactionsComponent_HandlePlayerMeleePrimaryAttackStarted::ItemWeaponContext' has a wrong offset!");

// Function SHProto.SHMariaVerbalReactionsComponent.HandlePlayerMeleeSecondaryAttackStarted
// 0x0010 (0x0010 - 0x0000)
struct SHMariaVerbalReactionsComponent_HandlePlayerMeleeSecondaryAttackStarted final
{
public:
	class USHMeleeCmbSubcomp*                     MeleeCombatSubcomponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHItemWeapon*                          ItemWeaponContext;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMariaVerbalReactionsComponent_HandlePlayerMeleeSecondaryAttackStarted) == 0x000008, "Wrong alignment on SHMariaVerbalReactionsComponent_HandlePlayerMeleeSecondaryAttackStarted");
static_assert(sizeof(SHMariaVerbalReactionsComponent_HandlePlayerMeleeSecondaryAttackStarted) == 0x000010, "Wrong size on SHMariaVerbalReactionsComponent_HandlePlayerMeleeSecondaryAttackStarted");
static_assert(offsetof(SHMariaVerbalReactionsComponent_HandlePlayerMeleeSecondaryAttackStarted, MeleeCombatSubcomponent) == 0x000000, "Member 'SHMariaVerbalReactionsComponent_HandlePlayerMeleeSecondaryAttackStarted::MeleeCombatSubcomponent' has a wrong offset!");
static_assert(offsetof(SHMariaVerbalReactionsComponent_HandlePlayerMeleeSecondaryAttackStarted, ItemWeaponContext) == 0x000008, "Member 'SHMariaVerbalReactionsComponent_HandlePlayerMeleeSecondaryAttackStarted::ItemWeaponContext' has a wrong offset!");

// Function SHProto.SHMariaVerbalReactionsComponent.HandlePlayerRangedFireSuccess
// 0x0010 (0x0010 - 0x0000)
struct SHMariaVerbalReactionsComponent_HandlePlayerRangedFireSuccess final
{
public:
	class USHRangedCmbSubcomp*                    RangedCombatSubcomponent;                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHItemWeapon*                          ItemWeaponContext;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMariaVerbalReactionsComponent_HandlePlayerRangedFireSuccess) == 0x000008, "Wrong alignment on SHMariaVerbalReactionsComponent_HandlePlayerRangedFireSuccess");
static_assert(sizeof(SHMariaVerbalReactionsComponent_HandlePlayerRangedFireSuccess) == 0x000010, "Wrong size on SHMariaVerbalReactionsComponent_HandlePlayerRangedFireSuccess");
static_assert(offsetof(SHMariaVerbalReactionsComponent_HandlePlayerRangedFireSuccess, RangedCombatSubcomponent) == 0x000000, "Member 'SHMariaVerbalReactionsComponent_HandlePlayerRangedFireSuccess::RangedCombatSubcomponent' has a wrong offset!");
static_assert(offsetof(SHMariaVerbalReactionsComponent_HandlePlayerRangedFireSuccess, ItemWeaponContext) == 0x000008, "Member 'SHMariaVerbalReactionsComponent_HandlePlayerRangedFireSuccess::ItemWeaponContext' has a wrong offset!");

// Function SHProto.SHMariaVerbalReactionsComponent.ProcessPlayerMeleePrimaryAttackStarted
// 0x0010 (0x0010 - 0x0000)
struct SHMariaVerbalReactionsComponent_ProcessPlayerMeleePrimaryAttackStarted final
{
public:
	class USHMeleeCmbSubcomp*                     MeleeCombatSubcomponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHItemWeapon*                          ItemWeaponContext;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMariaVerbalReactionsComponent_ProcessPlayerMeleePrimaryAttackStarted) == 0x000008, "Wrong alignment on SHMariaVerbalReactionsComponent_ProcessPlayerMeleePrimaryAttackStarted");
static_assert(sizeof(SHMariaVerbalReactionsComponent_ProcessPlayerMeleePrimaryAttackStarted) == 0x000010, "Wrong size on SHMariaVerbalReactionsComponent_ProcessPlayerMeleePrimaryAttackStarted");
static_assert(offsetof(SHMariaVerbalReactionsComponent_ProcessPlayerMeleePrimaryAttackStarted, MeleeCombatSubcomponent) == 0x000000, "Member 'SHMariaVerbalReactionsComponent_ProcessPlayerMeleePrimaryAttackStarted::MeleeCombatSubcomponent' has a wrong offset!");
static_assert(offsetof(SHMariaVerbalReactionsComponent_ProcessPlayerMeleePrimaryAttackStarted, ItemWeaponContext) == 0x000008, "Member 'SHMariaVerbalReactionsComponent_ProcessPlayerMeleePrimaryAttackStarted::ItemWeaponContext' has a wrong offset!");

// Function SHProto.SHMariaVerbalReactionsComponent.ProcessPlayerMeleeSecondaryAttackStarted
// 0x0010 (0x0010 - 0x0000)
struct SHMariaVerbalReactionsComponent_ProcessPlayerMeleeSecondaryAttackStarted final
{
public:
	class USHMeleeCmbSubcomp*                     MeleeCombatSubcomponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHItemWeapon*                          ItemWeaponContext;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMariaVerbalReactionsComponent_ProcessPlayerMeleeSecondaryAttackStarted) == 0x000008, "Wrong alignment on SHMariaVerbalReactionsComponent_ProcessPlayerMeleeSecondaryAttackStarted");
static_assert(sizeof(SHMariaVerbalReactionsComponent_ProcessPlayerMeleeSecondaryAttackStarted) == 0x000010, "Wrong size on SHMariaVerbalReactionsComponent_ProcessPlayerMeleeSecondaryAttackStarted");
static_assert(offsetof(SHMariaVerbalReactionsComponent_ProcessPlayerMeleeSecondaryAttackStarted, MeleeCombatSubcomponent) == 0x000000, "Member 'SHMariaVerbalReactionsComponent_ProcessPlayerMeleeSecondaryAttackStarted::MeleeCombatSubcomponent' has a wrong offset!");
static_assert(offsetof(SHMariaVerbalReactionsComponent_ProcessPlayerMeleeSecondaryAttackStarted, ItemWeaponContext) == 0x000008, "Member 'SHMariaVerbalReactionsComponent_ProcessPlayerMeleeSecondaryAttackStarted::ItemWeaponContext' has a wrong offset!");

// Function SHProto.SHMariaVerbalReactionsComponent.ProcessPlayerRangedAimPointingActorChanged
// 0x0008 (0x0008 - 0x0000)
struct SHMariaVerbalReactionsComponent_ProcessPlayerRangedAimPointingActorChanged final
{
public:
	class USHRangedCmbSubcomp*                    RangedCombatSubcomponent;                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMariaVerbalReactionsComponent_ProcessPlayerRangedAimPointingActorChanged) == 0x000008, "Wrong alignment on SHMariaVerbalReactionsComponent_ProcessPlayerRangedAimPointingActorChanged");
static_assert(sizeof(SHMariaVerbalReactionsComponent_ProcessPlayerRangedAimPointingActorChanged) == 0x000008, "Wrong size on SHMariaVerbalReactionsComponent_ProcessPlayerRangedAimPointingActorChanged");
static_assert(offsetof(SHMariaVerbalReactionsComponent_ProcessPlayerRangedAimPointingActorChanged, RangedCombatSubcomponent) == 0x000000, "Member 'SHMariaVerbalReactionsComponent_ProcessPlayerRangedAimPointingActorChanged::RangedCombatSubcomponent' has a wrong offset!");

// Function SHProto.SHMariaVerbalReactionsComponent.ProcessPlayerRangedFireSuccess
// 0x0010 (0x0010 - 0x0000)
struct SHMariaVerbalReactionsComponent_ProcessPlayerRangedFireSuccess final
{
public:
	class USHRangedCmbSubcomp*                    RangedCombatSubcomponent;                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHItemWeapon*                          ItemWeaponContext;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMariaVerbalReactionsComponent_ProcessPlayerRangedFireSuccess) == 0x000008, "Wrong alignment on SHMariaVerbalReactionsComponent_ProcessPlayerRangedFireSuccess");
static_assert(sizeof(SHMariaVerbalReactionsComponent_ProcessPlayerRangedFireSuccess) == 0x000010, "Wrong size on SHMariaVerbalReactionsComponent_ProcessPlayerRangedFireSuccess");
static_assert(offsetof(SHMariaVerbalReactionsComponent_ProcessPlayerRangedFireSuccess, RangedCombatSubcomponent) == 0x000000, "Member 'SHMariaVerbalReactionsComponent_ProcessPlayerRangedFireSuccess::RangedCombatSubcomponent' has a wrong offset!");
static_assert(offsetof(SHMariaVerbalReactionsComponent_ProcessPlayerRangedFireSuccess, ItemWeaponContext) == 0x000008, "Member 'SHMariaVerbalReactionsComponent_ProcessPlayerRangedFireSuccess::ItemWeaponContext' has a wrong offset!");

// Function SHProto.SHMariaVerbalReactionsComponent.SetDangerModeChangedCommentBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHMariaVerbalReactionsComponent_SetDangerModeChangedCommentBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMariaVerbalReactionsComponent_SetDangerModeChangedCommentBlocked) == 0x000008, "Wrong alignment on SHMariaVerbalReactionsComponent_SetDangerModeChangedCommentBlocked");
static_assert(sizeof(SHMariaVerbalReactionsComponent_SetDangerModeChangedCommentBlocked) == 0x000010, "Wrong size on SHMariaVerbalReactionsComponent_SetDangerModeChangedCommentBlocked");
static_assert(offsetof(SHMariaVerbalReactionsComponent_SetDangerModeChangedCommentBlocked, Blocked) == 0x000000, "Member 'SHMariaVerbalReactionsComponent_SetDangerModeChangedCommentBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHMariaVerbalReactionsComponent_SetDangerModeChangedCommentBlocked, Object) == 0x000008, "Member 'SHMariaVerbalReactionsComponent_SetDangerModeChangedCommentBlocked::Object' has a wrong offset!");

// Function SHProto.SHMariaVerbalReactionsComponent.SetGeneralBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHMariaVerbalReactionsComponent_SetGeneralBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMariaVerbalReactionsComponent_SetGeneralBlocked) == 0x000008, "Wrong alignment on SHMariaVerbalReactionsComponent_SetGeneralBlocked");
static_assert(sizeof(SHMariaVerbalReactionsComponent_SetGeneralBlocked) == 0x000010, "Wrong size on SHMariaVerbalReactionsComponent_SetGeneralBlocked");
static_assert(offsetof(SHMariaVerbalReactionsComponent_SetGeneralBlocked, Blocked) == 0x000000, "Member 'SHMariaVerbalReactionsComponent_SetGeneralBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHMariaVerbalReactionsComponent_SetGeneralBlocked, Object) == 0x000008, "Member 'SHMariaVerbalReactionsComponent_SetGeneralBlocked::Object' has a wrong offset!");

// Function SHProto.SHMariaVerbalReactionsComponent.AreAllConditionsMeet
// 0x0001 (0x0001 - 0x0000)
struct SHMariaVerbalReactionsComponent_AreAllConditionsMeet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMariaVerbalReactionsComponent_AreAllConditionsMeet) == 0x000001, "Wrong alignment on SHMariaVerbalReactionsComponent_AreAllConditionsMeet");
static_assert(sizeof(SHMariaVerbalReactionsComponent_AreAllConditionsMeet) == 0x000001, "Wrong size on SHMariaVerbalReactionsComponent_AreAllConditionsMeet");
static_assert(offsetof(SHMariaVerbalReactionsComponent_AreAllConditionsMeet, ReturnValue) == 0x000000, "Member 'SHMariaVerbalReactionsComponent_AreAllConditionsMeet::ReturnValue' has a wrong offset!");

// Function SHProto.SHMariaVerbalReactionsComponent.AreCustomConditionsMeet
// 0x0001 (0x0001 - 0x0000)
struct SHMariaVerbalReactionsComponent_AreCustomConditionsMeet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMariaVerbalReactionsComponent_AreCustomConditionsMeet) == 0x000001, "Wrong alignment on SHMariaVerbalReactionsComponent_AreCustomConditionsMeet");
static_assert(sizeof(SHMariaVerbalReactionsComponent_AreCustomConditionsMeet) == 0x000001, "Wrong size on SHMariaVerbalReactionsComponent_AreCustomConditionsMeet");
static_assert(offsetof(SHMariaVerbalReactionsComponent_AreCustomConditionsMeet, ReturnValue) == 0x000000, "Member 'SHMariaVerbalReactionsComponent_AreCustomConditionsMeet::ReturnValue' has a wrong offset!");

// Function SHProto.SHMariaVerbalReactionsComponent.IsBehaviourStateConditionsMeet
// 0x0001 (0x0001 - 0x0000)
struct SHMariaVerbalReactionsComponent_IsBehaviourStateConditionsMeet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMariaVerbalReactionsComponent_IsBehaviourStateConditionsMeet) == 0x000001, "Wrong alignment on SHMariaVerbalReactionsComponent_IsBehaviourStateConditionsMeet");
static_assert(sizeof(SHMariaVerbalReactionsComponent_IsBehaviourStateConditionsMeet) == 0x000001, "Wrong size on SHMariaVerbalReactionsComponent_IsBehaviourStateConditionsMeet");
static_assert(offsetof(SHMariaVerbalReactionsComponent_IsBehaviourStateConditionsMeet, ReturnValue) == 0x000000, "Member 'SHMariaVerbalReactionsComponent_IsBehaviourStateConditionsMeet::ReturnValue' has a wrong offset!");

// Function SHProto.SHMariaVerbalReactionsComponent.IsCompleted
// 0x0001 (0x0001 - 0x0000)
struct SHMariaVerbalReactionsComponent_IsCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMariaVerbalReactionsComponent_IsCompleted) == 0x000001, "Wrong alignment on SHMariaVerbalReactionsComponent_IsCompleted");
static_assert(sizeof(SHMariaVerbalReactionsComponent_IsCompleted) == 0x000001, "Wrong size on SHMariaVerbalReactionsComponent_IsCompleted");
static_assert(offsetof(SHMariaVerbalReactionsComponent_IsCompleted, ReturnValue) == 0x000000, "Member 'SHMariaVerbalReactionsComponent_IsCompleted::ReturnValue' has a wrong offset!");

// Function SHProto.SHMariaVerbalReactionsComponent.IsCoreDistance2DConditionsMeet
// 0x0001 (0x0001 - 0x0000)
struct SHMariaVerbalReactionsComponent_IsCoreDistance2DConditionsMeet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMariaVerbalReactionsComponent_IsCoreDistance2DConditionsMeet) == 0x000001, "Wrong alignment on SHMariaVerbalReactionsComponent_IsCoreDistance2DConditionsMeet");
static_assert(sizeof(SHMariaVerbalReactionsComponent_IsCoreDistance2DConditionsMeet) == 0x000001, "Wrong size on SHMariaVerbalReactionsComponent_IsCoreDistance2DConditionsMeet");
static_assert(offsetof(SHMariaVerbalReactionsComponent_IsCoreDistance2DConditionsMeet, ReturnValue) == 0x000000, "Member 'SHMariaVerbalReactionsComponent_IsCoreDistance2DConditionsMeet::ReturnValue' has a wrong offset!");

// Function SHProto.SHMariaVerbalReactionsComponent.IsCutsceneStateConditionsMeet
// 0x0001 (0x0001 - 0x0000)
struct SHMariaVerbalReactionsComponent_IsCutsceneStateConditionsMeet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMariaVerbalReactionsComponent_IsCutsceneStateConditionsMeet) == 0x000001, "Wrong alignment on SHMariaVerbalReactionsComponent_IsCutsceneStateConditionsMeet");
static_assert(sizeof(SHMariaVerbalReactionsComponent_IsCutsceneStateConditionsMeet) == 0x000001, "Wrong size on SHMariaVerbalReactionsComponent_IsCutsceneStateConditionsMeet");
static_assert(offsetof(SHMariaVerbalReactionsComponent_IsCutsceneStateConditionsMeet, ReturnValue) == 0x000000, "Member 'SHMariaVerbalReactionsComponent_IsCutsceneStateConditionsMeet::ReturnValue' has a wrong offset!");

// Function SHProto.SHMariaVerbalReactionsComponent.IsDangerModeChangedCommentBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHMariaVerbalReactionsComponent_IsDangerModeChangedCommentBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMariaVerbalReactionsComponent_IsDangerModeChangedCommentBlocked) == 0x000001, "Wrong alignment on SHMariaVerbalReactionsComponent_IsDangerModeChangedCommentBlocked");
static_assert(sizeof(SHMariaVerbalReactionsComponent_IsDangerModeChangedCommentBlocked) == 0x000001, "Wrong size on SHMariaVerbalReactionsComponent_IsDangerModeChangedCommentBlocked");
static_assert(offsetof(SHMariaVerbalReactionsComponent_IsDangerModeChangedCommentBlocked, ReturnValue) == 0x000000, "Member 'SHMariaVerbalReactionsComponent_IsDangerModeChangedCommentBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHMariaVerbalReactionsComponent.IsGeneralBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHMariaVerbalReactionsComponent_IsGeneralBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMariaVerbalReactionsComponent_IsGeneralBlocked) == 0x000001, "Wrong alignment on SHMariaVerbalReactionsComponent_IsGeneralBlocked");
static_assert(sizeof(SHMariaVerbalReactionsComponent_IsGeneralBlocked) == 0x000001, "Wrong size on SHMariaVerbalReactionsComponent_IsGeneralBlocked");
static_assert(offsetof(SHMariaVerbalReactionsComponent_IsGeneralBlocked, ReturnValue) == 0x000000, "Member 'SHMariaVerbalReactionsComponent_IsGeneralBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHMariaVerbalReactionsComponent.IsPlayerCombatStateConditionsMeet
// 0x0001 (0x0001 - 0x0000)
struct SHMariaVerbalReactionsComponent_IsPlayerCombatStateConditionsMeet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMariaVerbalReactionsComponent_IsPlayerCombatStateConditionsMeet) == 0x000001, "Wrong alignment on SHMariaVerbalReactionsComponent_IsPlayerCombatStateConditionsMeet");
static_assert(sizeof(SHMariaVerbalReactionsComponent_IsPlayerCombatStateConditionsMeet) == 0x000001, "Wrong size on SHMariaVerbalReactionsComponent_IsPlayerCombatStateConditionsMeet");
static_assert(offsetof(SHMariaVerbalReactionsComponent_IsPlayerCombatStateConditionsMeet, ReturnValue) == 0x000000, "Member 'SHMariaVerbalReactionsComponent_IsPlayerCombatStateConditionsMeet::ReturnValue' has a wrong offset!");

// Function SHProto.SHMaryAnimInstance.K2_OnMaryMovementStateChanged
// 0x0001 (0x0001 - 0x0000)
struct SHMaryAnimInstance_K2_OnMaryMovementStateChanged final
{
public:
	ESHMaryAnimInstanceMovementState              InMovementState;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMaryAnimInstance_K2_OnMaryMovementStateChanged) == 0x000001, "Wrong alignment on SHMaryAnimInstance_K2_OnMaryMovementStateChanged");
static_assert(sizeof(SHMaryAnimInstance_K2_OnMaryMovementStateChanged) == 0x000001, "Wrong size on SHMaryAnimInstance_K2_OnMaryMovementStateChanged");
static_assert(offsetof(SHMaryAnimInstance_K2_OnMaryMovementStateChanged, InMovementState) == 0x000000, "Member 'SHMaryAnimInstance_K2_OnMaryMovementStateChanged::InMovementState' has a wrong offset!");

// Function SHProto.SHMaryAnimInstance.SetFaceExpression
// 0x0008 (0x0008 - 0x0000)
struct SHMaryAnimInstance_SetFaceExpression final
{
public:
	ESHMariaBossFaceExpression                    Expression;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMaryAnimInstance_SetFaceExpression) == 0x000004, "Wrong alignment on SHMaryAnimInstance_SetFaceExpression");
static_assert(sizeof(SHMaryAnimInstance_SetFaceExpression) == 0x000008, "Wrong size on SHMaryAnimInstance_SetFaceExpression");
static_assert(offsetof(SHMaryAnimInstance_SetFaceExpression, Expression) == 0x000000, "Member 'SHMaryAnimInstance_SetFaceExpression::Expression' has a wrong offset!");
static_assert(offsetof(SHMaryAnimInstance_SetFaceExpression, Duration) == 0x000004, "Member 'SHMaryAnimInstance_SetFaceExpression::Duration' has a wrong offset!");

// Function SHProto.SHMaryAnimInstance.GetActiveMaryLocomotionAnimInstance
// 0x0008 (0x0008 - 0x0000)
struct SHMaryAnimInstance_GetActiveMaryLocomotionAnimInstance final
{
public:
	class USHMaryLocomotionAnimInstance*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMaryAnimInstance_GetActiveMaryLocomotionAnimInstance) == 0x000008, "Wrong alignment on SHMaryAnimInstance_GetActiveMaryLocomotionAnimInstance");
static_assert(sizeof(SHMaryAnimInstance_GetActiveMaryLocomotionAnimInstance) == 0x000008, "Wrong size on SHMaryAnimInstance_GetActiveMaryLocomotionAnimInstance");
static_assert(offsetof(SHMaryAnimInstance_GetActiveMaryLocomotionAnimInstance, ReturnValue) == 0x000000, "Member 'SHMaryAnimInstance_GetActiveMaryLocomotionAnimInstance::ReturnValue' has a wrong offset!");

// Function SHProto.SHMaryAnimInstance.GetMaryAnimInstanceStateData
// 0x0008 (0x0008 - 0x0000)
struct SHMaryAnimInstance_GetMaryAnimInstanceStateData final
{
public:
	class USHMaryAnimInstanceStateData*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMaryAnimInstance_GetMaryAnimInstanceStateData) == 0x000008, "Wrong alignment on SHMaryAnimInstance_GetMaryAnimInstanceStateData");
static_assert(sizeof(SHMaryAnimInstance_GetMaryAnimInstanceStateData) == 0x000008, "Wrong size on SHMaryAnimInstance_GetMaryAnimInstanceStateData");
static_assert(offsetof(SHMaryAnimInstance_GetMaryAnimInstanceStateData, ReturnValue) == 0x000000, "Member 'SHMaryAnimInstance_GetMaryAnimInstanceStateData::ReturnValue' has a wrong offset!");

// Function SHProto.SHMaryAnimInstance.GetMaryLocomotionAnimInstance
// 0x0010 (0x0010 - 0x0000)
struct SHMaryAnimInstance_GetMaryLocomotionAnimInstance final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USHMaryLocomotionAnimInstance*          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMaryAnimInstance_GetMaryLocomotionAnimInstance) == 0x000008, "Wrong alignment on SHMaryAnimInstance_GetMaryLocomotionAnimInstance");
static_assert(sizeof(SHMaryAnimInstance_GetMaryLocomotionAnimInstance) == 0x000010, "Wrong size on SHMaryAnimInstance_GetMaryLocomotionAnimInstance");
static_assert(offsetof(SHMaryAnimInstance_GetMaryLocomotionAnimInstance, SlotIndex) == 0x000000, "Member 'SHMaryAnimInstance_GetMaryLocomotionAnimInstance::SlotIndex' has a wrong offset!");
static_assert(offsetof(SHMaryAnimInstance_GetMaryLocomotionAnimInstance, ReturnValue) == 0x000008, "Member 'SHMaryAnimInstance_GetMaryLocomotionAnimInstance::ReturnValue' has a wrong offset!");

// Function SHProto.SHMaryAnimInstance.GetMarySpiderLocomotionAnimInstance
// 0x0010 (0x0010 - 0x0000)
struct SHMaryAnimInstance_GetMarySpiderLocomotionAnimInstance final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USHMarySpiderLocomotionAnimInstance*    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMaryAnimInstance_GetMarySpiderLocomotionAnimInstance) == 0x000008, "Wrong alignment on SHMaryAnimInstance_GetMarySpiderLocomotionAnimInstance");
static_assert(sizeof(SHMaryAnimInstance_GetMarySpiderLocomotionAnimInstance) == 0x000010, "Wrong size on SHMaryAnimInstance_GetMarySpiderLocomotionAnimInstance");
static_assert(offsetof(SHMaryAnimInstance_GetMarySpiderLocomotionAnimInstance, SlotIndex) == 0x000000, "Member 'SHMaryAnimInstance_GetMarySpiderLocomotionAnimInstance::SlotIndex' has a wrong offset!");
static_assert(offsetof(SHMaryAnimInstance_GetMarySpiderLocomotionAnimInstance, ReturnValue) == 0x000008, "Member 'SHMaryAnimInstance_GetMarySpiderLocomotionAnimInstance::ReturnValue' has a wrong offset!");

// Function SHProto.SHMaryItemsInvestigationEndingFactor.SHDebug_Character_Endings_MaryItemsInvestigationEndingFactor_SetDebugValue
// 0x0004 (0x0004 - 0x0000)
struct SHMaryItemsInvestigationEndingFactor_SHDebug_Character_Endings_MaryItemsInvestigationEndingFactor_SetDebugValue final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMaryItemsInvestigationEndingFactor_SHDebug_Character_Endings_MaryItemsInvestigationEndingFactor_SetDebugValue) == 0x000004, "Wrong alignment on SHMaryItemsInvestigationEndingFactor_SHDebug_Character_Endings_MaryItemsInvestigationEndingFactor_SetDebugValue");
static_assert(sizeof(SHMaryItemsInvestigationEndingFactor_SHDebug_Character_Endings_MaryItemsInvestigationEndingFactor_SetDebugValue) == 0x000004, "Wrong size on SHMaryItemsInvestigationEndingFactor_SHDebug_Character_Endings_MaryItemsInvestigationEndingFactor_SetDebugValue");
static_assert(offsetof(SHMaryItemsInvestigationEndingFactor_SHDebug_Character_Endings_MaryItemsInvestigationEndingFactor_SetDebugValue, InValue) == 0x000000, "Member 'SHMaryItemsInvestigationEndingFactor_SHDebug_Character_Endings_MaryItemsInvestigationEndingFactor_SetDebugValue::InValue' has a wrong offset!");

// Function SHProto.SHMaryTransformationState.GetGrabPointSearchOffset
// 0x0018 (0x0018 - 0x0000)
struct SHMaryTransformationState_GetGrabPointSearchOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMaryTransformationState_GetGrabPointSearchOffset) == 0x000008, "Wrong alignment on SHMaryTransformationState_GetGrabPointSearchOffset");
static_assert(sizeof(SHMaryTransformationState_GetGrabPointSearchOffset) == 0x000018, "Wrong size on SHMaryTransformationState_GetGrabPointSearchOffset");
static_assert(offsetof(SHMaryTransformationState_GetGrabPointSearchOffset, ReturnValue) == 0x000000, "Member 'SHMaryTransformationState_GetGrabPointSearchOffset::ReturnValue' has a wrong offset!");

// Function SHProto.SHMaryTransformationState.GetMaryTransformationState
// 0x0001 (0x0001 - 0x0000)
struct SHMaryTransformationState_GetMaryTransformationState final
{
public:
	ESHMaryTransformationState                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMaryTransformationState_GetMaryTransformationState) == 0x000001, "Wrong alignment on SHMaryTransformationState_GetMaryTransformationState");
static_assert(sizeof(SHMaryTransformationState_GetMaryTransformationState) == 0x000001, "Wrong size on SHMaryTransformationState_GetMaryTransformationState");
static_assert(offsetof(SHMaryTransformationState_GetMaryTransformationState, ReturnValue) == 0x000000, "Member 'SHMaryTransformationState_GetMaryTransformationState::ReturnValue' has a wrong offset!");

// Function SHProto.SHMaryTransformationState.GetShouldRotationBeMaintained
// 0x0001 (0x0001 - 0x0000)
struct SHMaryTransformationState_GetShouldRotationBeMaintained final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMaryTransformationState_GetShouldRotationBeMaintained) == 0x000001, "Wrong alignment on SHMaryTransformationState_GetShouldRotationBeMaintained");
static_assert(sizeof(SHMaryTransformationState_GetShouldRotationBeMaintained) == 0x000001, "Wrong size on SHMaryTransformationState_GetShouldRotationBeMaintained");
static_assert(offsetof(SHMaryTransformationState_GetShouldRotationBeMaintained, ReturnValue) == 0x000000, "Member 'SHMaryTransformationState_GetShouldRotationBeMaintained::ReturnValue' has a wrong offset!");

// Function SHProto.SHMaryTransformationState.GetTransformationOverrides
// 0x0028 (0x0028 - 0x0000)
struct SHMaryTransformationState_GetTransformationOverrides final
{
public:
	bool                                          OutShouldBeUsed;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSHMaryTransformationStateCurves       OutCurves;                                         // 0x0004(0x0024)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMaryTransformationState_GetTransformationOverrides) == 0x000004, "Wrong alignment on SHMaryTransformationState_GetTransformationOverrides");
static_assert(sizeof(SHMaryTransformationState_GetTransformationOverrides) == 0x000028, "Wrong size on SHMaryTransformationState_GetTransformationOverrides");
static_assert(offsetof(SHMaryTransformationState_GetTransformationOverrides, OutShouldBeUsed) == 0x000000, "Member 'SHMaryTransformationState_GetTransformationOverrides::OutShouldBeUsed' has a wrong offset!");
static_assert(offsetof(SHMaryTransformationState_GetTransformationOverrides, OutCurves) == 0x000004, "Member 'SHMaryTransformationState_GetTransformationOverrides::OutCurves' has a wrong offset!");

// Function SHProto.SHMeatConveyorBase.BindToBossDispatch
// 0x0008 (0x0008 - 0x0000)
struct SHMeatConveyorBase_BindToBossDispatch final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMeatConveyorBase_BindToBossDispatch) == 0x000008, "Wrong alignment on SHMeatConveyorBase_BindToBossDispatch");
static_assert(sizeof(SHMeatConveyorBase_BindToBossDispatch) == 0x000008, "Wrong size on SHMeatConveyorBase_BindToBossDispatch");
static_assert(offsetof(SHMeatConveyorBase_BindToBossDispatch, Target) == 0x000000, "Member 'SHMeatConveyorBase_BindToBossDispatch::Target' has a wrong offset!");

// Function SHProto.SHMeatConveyorBase.FinishMovementRoutine
// 0x0001 (0x0001 - 0x0000)
struct SHMeatConveyorBase_FinishMovementRoutine final
{
public:
	bool                                          bInstant;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMeatConveyorBase_FinishMovementRoutine) == 0x000001, "Wrong alignment on SHMeatConveyorBase_FinishMovementRoutine");
static_assert(sizeof(SHMeatConveyorBase_FinishMovementRoutine) == 0x000001, "Wrong size on SHMeatConveyorBase_FinishMovementRoutine");
static_assert(offsetof(SHMeatConveyorBase_FinishMovementRoutine, bInstant) == 0x000000, "Member 'SHMeatConveyorBase_FinishMovementRoutine::bInstant' has a wrong offset!");

// DelegateFunction SHProto.SHMeatConveyorBase.SHMeatConveyorBaseBoolContextEvent__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct SHMeatConveyorBase_SHMeatConveyorBaseBoolContextEvent__DelegateSignature final
{
public:
	class ASHMeatConveyorBase*                    Conveyor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHMeatConveyorBase_SHMeatConveyorBaseBoolContextEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHMeatConveyorBase_SHMeatConveyorBaseBoolContextEvent__DelegateSignature");
static_assert(sizeof(SHMeatConveyorBase_SHMeatConveyorBaseBoolContextEvent__DelegateSignature) == 0x000010, "Wrong size on SHMeatConveyorBase_SHMeatConveyorBaseBoolContextEvent__DelegateSignature");
static_assert(offsetof(SHMeatConveyorBase_SHMeatConveyorBaseBoolContextEvent__DelegateSignature, Conveyor) == 0x000000, "Member 'SHMeatConveyorBase_SHMeatConveyorBaseBoolContextEvent__DelegateSignature::Conveyor' has a wrong offset!");
static_assert(offsetof(SHMeatConveyorBase_SHMeatConveyorBaseBoolContextEvent__DelegateSignature, Value) == 0x000008, "Member 'SHMeatConveyorBase_SHMeatConveyorBaseBoolContextEvent__DelegateSignature::Value' has a wrong offset!");

// DelegateFunction SHProto.SHMeatConveyorBase.SHMeatConveyorBaseEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHMeatConveyorBase_SHMeatConveyorBaseEvent__DelegateSignature final
{
public:
	class ASHMeatConveyorBase*                    Conveyor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMeatConveyorBase_SHMeatConveyorBaseEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHMeatConveyorBase_SHMeatConveyorBaseEvent__DelegateSignature");
static_assert(sizeof(SHMeatConveyorBase_SHMeatConveyorBaseEvent__DelegateSignature) == 0x000008, "Wrong size on SHMeatConveyorBase_SHMeatConveyorBaseEvent__DelegateSignature");
static_assert(offsetof(SHMeatConveyorBase_SHMeatConveyorBaseEvent__DelegateSignature, Conveyor) == 0x000000, "Member 'SHMeatConveyorBase_SHMeatConveyorBaseEvent__DelegateSignature::Conveyor' has a wrong offset!");

// Function SHProto.SHMeatConveyorBase.UnbindFromBossDispatch
// 0x0008 (0x0008 - 0x0000)
struct SHMeatConveyorBase_UnbindFromBossDispatch final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMeatConveyorBase_UnbindFromBossDispatch) == 0x000008, "Wrong alignment on SHMeatConveyorBase_UnbindFromBossDispatch");
static_assert(sizeof(SHMeatConveyorBase_UnbindFromBossDispatch) == 0x000008, "Wrong size on SHMeatConveyorBase_UnbindFromBossDispatch");
static_assert(offsetof(SHMeatConveyorBase_UnbindFromBossDispatch, Target) == 0x000000, "Member 'SHMeatConveyorBase_UnbindFromBossDispatch::Target' has a wrong offset!");

// Function SHProto.SHMeatConveyorBase.IsCharacterInWorkArea
// 0x0010 (0x0010 - 0x0000)
struct SHMeatConveyorBase_IsCharacterInWorkArea final
{
public:
	class ACharacter*                             InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowCapsuleTouch;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHMeatConveyorBase_IsCharacterInWorkArea) == 0x000008, "Wrong alignment on SHMeatConveyorBase_IsCharacterInWorkArea");
static_assert(sizeof(SHMeatConveyorBase_IsCharacterInWorkArea) == 0x000010, "Wrong size on SHMeatConveyorBase_IsCharacterInWorkArea");
static_assert(offsetof(SHMeatConveyorBase_IsCharacterInWorkArea, InCharacter) == 0x000000, "Member 'SHMeatConveyorBase_IsCharacterInWorkArea::InCharacter' has a wrong offset!");
static_assert(offsetof(SHMeatConveyorBase_IsCharacterInWorkArea, AllowCapsuleTouch) == 0x000008, "Member 'SHMeatConveyorBase_IsCharacterInWorkArea::AllowCapsuleTouch' has a wrong offset!");
static_assert(offsetof(SHMeatConveyorBase_IsCharacterInWorkArea, ReturnValue) == 0x000009, "Member 'SHMeatConveyorBase_IsCharacterInWorkArea::ReturnValue' has a wrong offset!");

// Function SHProto.SHMeatConveyorBase.IsInMotion
// 0x0001 (0x0001 - 0x0000)
struct SHMeatConveyorBase_IsInMotion final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMeatConveyorBase_IsInMotion) == 0x000001, "Wrong alignment on SHMeatConveyorBase_IsInMotion");
static_assert(sizeof(SHMeatConveyorBase_IsInMotion) == 0x000001, "Wrong size on SHMeatConveyorBase_IsInMotion");
static_assert(offsetof(SHMeatConveyorBase_IsInMotion, ReturnValue) == 0x000000, "Member 'SHMeatConveyorBase_IsInMotion::ReturnValue' has a wrong offset!");

// Function SHProto.SHMeatConveyorBase.IsMovementRoutineRequested
// 0x0001 (0x0001 - 0x0000)
struct SHMeatConveyorBase_IsMovementRoutineRequested final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMeatConveyorBase_IsMovementRoutineRequested) == 0x000001, "Wrong alignment on SHMeatConveyorBase_IsMovementRoutineRequested");
static_assert(sizeof(SHMeatConveyorBase_IsMovementRoutineRequested) == 0x000001, "Wrong size on SHMeatConveyorBase_IsMovementRoutineRequested");
static_assert(offsetof(SHMeatConveyorBase_IsMovementRoutineRequested, ReturnValue) == 0x000000, "Member 'SHMeatConveyorBase_IsMovementRoutineRequested::ReturnValue' has a wrong offset!");

// Function SHProto.SHMeleeCmbSubcomp.OnMeleeAttackBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct SHMeleeCmbSubcomp_OnMeleeAttackBlendingOut final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHAnimEndType                                AnimEndType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHMeleeCmbSubcomp_OnMeleeAttackBlendingOut) == 0x000008, "Wrong alignment on SHMeleeCmbSubcomp_OnMeleeAttackBlendingOut");
static_assert(sizeof(SHMeleeCmbSubcomp_OnMeleeAttackBlendingOut) == 0x000010, "Wrong size on SHMeleeCmbSubcomp_OnMeleeAttackBlendingOut");
static_assert(offsetof(SHMeleeCmbSubcomp_OnMeleeAttackBlendingOut, Montage) == 0x000000, "Member 'SHMeleeCmbSubcomp_OnMeleeAttackBlendingOut::Montage' has a wrong offset!");
static_assert(offsetof(SHMeleeCmbSubcomp_OnMeleeAttackBlendingOut, AnimEndType) == 0x000008, "Member 'SHMeleeCmbSubcomp_OnMeleeAttackBlendingOut::AnimEndType' has a wrong offset!");

// Function SHProto.SHMeleeCmbSubcomp.OnMeleeAttackEnd
// 0x0010 (0x0010 - 0x0000)
struct SHMeleeCmbSubcomp_OnMeleeAttackEnd final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHAnimEndType                                AnimEndType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHMeleeCmbSubcomp_OnMeleeAttackEnd) == 0x000008, "Wrong alignment on SHMeleeCmbSubcomp_OnMeleeAttackEnd");
static_assert(sizeof(SHMeleeCmbSubcomp_OnMeleeAttackEnd) == 0x000010, "Wrong size on SHMeleeCmbSubcomp_OnMeleeAttackEnd");
static_assert(offsetof(SHMeleeCmbSubcomp_OnMeleeAttackEnd, Montage) == 0x000000, "Member 'SHMeleeCmbSubcomp_OnMeleeAttackEnd::Montage' has a wrong offset!");
static_assert(offsetof(SHMeleeCmbSubcomp_OnMeleeAttackEnd, AnimEndType) == 0x000008, "Member 'SHMeleeCmbSubcomp_OnMeleeAttackEnd::AnimEndType' has a wrong offset!");

// Function SHProto.SHMeleeCmbSubcomp.ProcessEquippedWeaponModifiedEvent
// 0x0008 (0x0008 - 0x0000)
struct SHMeleeCmbSubcomp_ProcessEquippedWeaponModifiedEvent final
{
public:
	class USHWeaponManageCmbSubcomp*              WeaponManager;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMeleeCmbSubcomp_ProcessEquippedWeaponModifiedEvent) == 0x000008, "Wrong alignment on SHMeleeCmbSubcomp_ProcessEquippedWeaponModifiedEvent");
static_assert(sizeof(SHMeleeCmbSubcomp_ProcessEquippedWeaponModifiedEvent) == 0x000008, "Wrong size on SHMeleeCmbSubcomp_ProcessEquippedWeaponModifiedEvent");
static_assert(offsetof(SHMeleeCmbSubcomp_ProcessEquippedWeaponModifiedEvent, WeaponManager) == 0x000000, "Member 'SHMeleeCmbSubcomp_ProcessEquippedWeaponModifiedEvent::WeaponManager' has a wrong offset!");

// DelegateFunction SHProto.SHMeleeCmbSubcomp.SHMeleeCombatWeaponContextEvent__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct SHMeleeCmbSubcomp_SHMeleeCombatWeaponContextEvent__DelegateSignature final
{
public:
	class USHMeleeCmbSubcomp*                     MeleeCombatSubcomponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHItemWeapon*                          ItemWeaponContext;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMeleeCmbSubcomp_SHMeleeCombatWeaponContextEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHMeleeCmbSubcomp_SHMeleeCombatWeaponContextEvent__DelegateSignature");
static_assert(sizeof(SHMeleeCmbSubcomp_SHMeleeCombatWeaponContextEvent__DelegateSignature) == 0x000010, "Wrong size on SHMeleeCmbSubcomp_SHMeleeCombatWeaponContextEvent__DelegateSignature");
static_assert(offsetof(SHMeleeCmbSubcomp_SHMeleeCombatWeaponContextEvent__DelegateSignature, MeleeCombatSubcomponent) == 0x000000, "Member 'SHMeleeCmbSubcomp_SHMeleeCombatWeaponContextEvent__DelegateSignature::MeleeCombatSubcomponent' has a wrong offset!");
static_assert(offsetof(SHMeleeCmbSubcomp_SHMeleeCombatWeaponContextEvent__DelegateSignature, ItemWeaponContext) == 0x000008, "Member 'SHMeleeCmbSubcomp_SHMeleeCombatWeaponContextEvent__DelegateSignature::ItemWeaponContext' has a wrong offset!");

// Function SHProto.SHMovementObstacleDetection.SHDebug_Character_MovementObstacleDetection_Enabled
// 0x0001 (0x0001 - 0x0000)
struct SHMovementObstacleDetection_SHDebug_Character_MovementObstacleDetection_Enabled final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMovementObstacleDetection_SHDebug_Character_MovementObstacleDetection_Enabled) == 0x000001, "Wrong alignment on SHMovementObstacleDetection_SHDebug_Character_MovementObstacleDetection_Enabled");
static_assert(sizeof(SHMovementObstacleDetection_SHDebug_Character_MovementObstacleDetection_Enabled) == 0x000001, "Wrong size on SHMovementObstacleDetection_SHDebug_Character_MovementObstacleDetection_Enabled");
static_assert(offsetof(SHMovementObstacleDetection_SHDebug_Character_MovementObstacleDetection_Enabled, Enable) == 0x000000, "Member 'SHMovementObstacleDetection_SHDebug_Character_MovementObstacleDetection_Enabled::Enable' has a wrong offset!");

// Function SHProto.SHMovingWheelStaticMeshComponent.ProcessPushingFinishedOrInterupted
// 0x0008 (0x0008 - 0x0000)
struct SHMovingWheelStaticMeshComponent_ProcessPushingFinishedOrInterupted final
{
public:
	class USHPushableComponent*                   InComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMovingWheelStaticMeshComponent_ProcessPushingFinishedOrInterupted) == 0x000008, "Wrong alignment on SHMovingWheelStaticMeshComponent_ProcessPushingFinishedOrInterupted");
static_assert(sizeof(SHMovingWheelStaticMeshComponent_ProcessPushingFinishedOrInterupted) == 0x000008, "Wrong size on SHMovingWheelStaticMeshComponent_ProcessPushingFinishedOrInterupted");
static_assert(offsetof(SHMovingWheelStaticMeshComponent_ProcessPushingFinishedOrInterupted, InComponent) == 0x000000, "Member 'SHMovingWheelStaticMeshComponent_ProcessPushingFinishedOrInterupted::InComponent' has a wrong offset!");

// Function SHProto.SHMovingWheelStaticMeshComponent.ProcessPushingStarted
// 0x0008 (0x0008 - 0x0000)
struct SHMovingWheelStaticMeshComponent_ProcessPushingStarted final
{
public:
	class USHPushableComponent*                   InComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHMovingWheelStaticMeshComponent_ProcessPushingStarted) == 0x000008, "Wrong alignment on SHMovingWheelStaticMeshComponent_ProcessPushingStarted");
static_assert(sizeof(SHMovingWheelStaticMeshComponent_ProcessPushingStarted) == 0x000008, "Wrong size on SHMovingWheelStaticMeshComponent_ProcessPushingStarted");
static_assert(offsetof(SHMovingWheelStaticMeshComponent_ProcessPushingStarted, InComponent) == 0x000000, "Member 'SHMovingWheelStaticMeshComponent_ProcessPushingStarted::InComponent' has a wrong offset!");

// Function SHProto.SHMusicRTPCVolume.SetEnabled
// 0x0010 (0x0010 - 0x0000)
struct SHMusicRTPCVolume_SetEnabled final
{
public:
	const class UObject*                          Enabler;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InEnabled;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHMusicRTPCVolume_SetEnabled) == 0x000008, "Wrong alignment on SHMusicRTPCVolume_SetEnabled");
static_assert(sizeof(SHMusicRTPCVolume_SetEnabled) == 0x000010, "Wrong size on SHMusicRTPCVolume_SetEnabled");
static_assert(offsetof(SHMusicRTPCVolume_SetEnabled, Enabler) == 0x000000, "Member 'SHMusicRTPCVolume_SetEnabled::Enabler' has a wrong offset!");
static_assert(offsetof(SHMusicRTPCVolume_SetEnabled, InEnabled) == 0x000008, "Member 'SHMusicRTPCVolume_SetEnabled::InEnabled' has a wrong offset!");

// Function SHProto.SHNiagaraVolumeCutoutComponent.SetCutOutDisabled
// 0x0010 (0x0010 - 0x0000)
struct SHNiagaraVolumeCutoutComponent_SetCutOutDisabled final
{
public:
	bool                                          IsDisable;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHNiagaraVolumeCutoutComponent_SetCutOutDisabled) == 0x000008, "Wrong alignment on SHNiagaraVolumeCutoutComponent_SetCutOutDisabled");
static_assert(sizeof(SHNiagaraVolumeCutoutComponent_SetCutOutDisabled) == 0x000010, "Wrong size on SHNiagaraVolumeCutoutComponent_SetCutOutDisabled");
static_assert(offsetof(SHNiagaraVolumeCutoutComponent_SetCutOutDisabled, IsDisable) == 0x000000, "Member 'SHNiagaraVolumeCutoutComponent_SetCutOutDisabled::IsDisable' has a wrong offset!");
static_assert(offsetof(SHNiagaraVolumeCutoutComponent_SetCutOutDisabled, Object) == 0x000008, "Member 'SHNiagaraVolumeCutoutComponent_SetCutOutDisabled::Object' has a wrong offset!");

// Function SHProto.SHNiagaraVolumeCutoutComponent.IsCutOutDisabled
// 0x0001 (0x0001 - 0x0000)
struct SHNiagaraVolumeCutoutComponent_IsCutOutDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHNiagaraVolumeCutoutComponent_IsCutOutDisabled) == 0x000001, "Wrong alignment on SHNiagaraVolumeCutoutComponent_IsCutOutDisabled");
static_assert(sizeof(SHNiagaraVolumeCutoutComponent_IsCutOutDisabled) == 0x000001, "Wrong size on SHNiagaraVolumeCutoutComponent_IsCutOutDisabled");
static_assert(offsetof(SHNiagaraVolumeCutoutComponent_IsCutOutDisabled, ReturnValue) == 0x000000, "Member 'SHNiagaraVolumeCutoutComponent_IsCutOutDisabled::ReturnValue' has a wrong offset!");

// Function SHProto.SHNiagaraVolumeCutoutComponent.IsCutOutDisabledBy
// 0x0010 (0x0010 - 0x0000)
struct SHNiagaraVolumeCutoutComponent_IsCutOutDisabledBy final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHNiagaraVolumeCutoutComponent_IsCutOutDisabledBy) == 0x000008, "Wrong alignment on SHNiagaraVolumeCutoutComponent_IsCutOutDisabledBy");
static_assert(sizeof(SHNiagaraVolumeCutoutComponent_IsCutOutDisabledBy) == 0x000010, "Wrong size on SHNiagaraVolumeCutoutComponent_IsCutOutDisabledBy");
static_assert(offsetof(SHNiagaraVolumeCutoutComponent_IsCutOutDisabledBy, Object) == 0x000000, "Member 'SHNiagaraVolumeCutoutComponent_IsCutOutDisabledBy::Object' has a wrong offset!");
static_assert(offsetof(SHNiagaraVolumeCutoutComponent_IsCutOutDisabledBy, ReturnValue) == 0x000008, "Member 'SHNiagaraVolumeCutoutComponent_IsCutOutDisabledBy::ReturnValue' has a wrong offset!");

// Function SHProto.SHNurseAnimInstance.GetNurseAnimInstanceStateData
// 0x0008 (0x0008 - 0x0000)
struct SHNurseAnimInstance_GetNurseAnimInstanceStateData final
{
public:
	class USHNurseAnimInstanceStateData*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHNurseAnimInstance_GetNurseAnimInstanceStateData) == 0x000008, "Wrong alignment on SHNurseAnimInstance_GetNurseAnimInstanceStateData");
static_assert(sizeof(SHNurseAnimInstance_GetNurseAnimInstanceStateData) == 0x000008, "Wrong size on SHNurseAnimInstance_GetNurseAnimInstanceStateData");
static_assert(offsetof(SHNurseAnimInstance_GetNurseAnimInstanceStateData, ReturnValue) == 0x000000, "Member 'SHNurseAnimInstance_GetNurseAnimInstanceStateData::ReturnValue' has a wrong offset!");

// Function SHProto.SHNurseAnimInstance.GetNurseLocomotionAnimInstance
// 0x0010 (0x0010 - 0x0000)
struct SHNurseAnimInstance_GetNurseLocomotionAnimInstance final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USHNurseLocomotionAnimInstance*         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHNurseAnimInstance_GetNurseLocomotionAnimInstance) == 0x000008, "Wrong alignment on SHNurseAnimInstance_GetNurseLocomotionAnimInstance");
static_assert(sizeof(SHNurseAnimInstance_GetNurseLocomotionAnimInstance) == 0x000010, "Wrong size on SHNurseAnimInstance_GetNurseLocomotionAnimInstance");
static_assert(offsetof(SHNurseAnimInstance_GetNurseLocomotionAnimInstance, SlotIndex) == 0x000000, "Member 'SHNurseAnimInstance_GetNurseLocomotionAnimInstance::SlotIndex' has a wrong offset!");
static_assert(offsetof(SHNurseAnimInstance_GetNurseLocomotionAnimInstance, ReturnValue) == 0x000008, "Member 'SHNurseAnimInstance_GetNurseLocomotionAnimInstance::ReturnValue' has a wrong offset!");

// Function SHProto.SHNurseLocomotionAnimInstance.GetNurseAnimInstanceStateData
// 0x0008 (0x0008 - 0x0000)
struct SHNurseLocomotionAnimInstance_GetNurseAnimInstanceStateData final
{
public:
	class USHNurseAnimInstanceStateData*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHNurseLocomotionAnimInstance_GetNurseAnimInstanceStateData) == 0x000008, "Wrong alignment on SHNurseLocomotionAnimInstance_GetNurseAnimInstanceStateData");
static_assert(sizeof(SHNurseLocomotionAnimInstance_GetNurseAnimInstanceStateData) == 0x000008, "Wrong size on SHNurseLocomotionAnimInstance_GetNurseAnimInstanceStateData");
static_assert(offsetof(SHNurseLocomotionAnimInstance_GetNurseAnimInstanceStateData, ReturnValue) == 0x000000, "Member 'SHNurseLocomotionAnimInstance_GetNurseAnimInstanceStateData::ReturnValue' has a wrong offset!");

// Function SHProto.SHPHAnimInstance.SetLookAtEnable
// 0x0001 (0x0001 - 0x0000)
struct SHPHAnimInstance_SetLookAtEnable final
{
public:
	bool                                          NewLookAtEnable;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPHAnimInstance_SetLookAtEnable) == 0x000001, "Wrong alignment on SHPHAnimInstance_SetLookAtEnable");
static_assert(sizeof(SHPHAnimInstance_SetLookAtEnable) == 0x000001, "Wrong size on SHPHAnimInstance_SetLookAtEnable");
static_assert(offsetof(SHPHAnimInstance_SetLookAtEnable, NewLookAtEnable) == 0x000000, "Member 'SHPHAnimInstance_SetLookAtEnable::NewLookAtEnable' has a wrong offset!");

// Function SHProto.SHPHAnimInstance.SetMovementSpeedMultiplier
// 0x0010 (0x0010 - 0x0000)
struct SHPHAnimInstance_SetMovementSpeedMultiplier final
{
public:
	float                                         NewSpeed;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPHAnimInstance_SetMovementSpeedMultiplier) == 0x000004, "Wrong alignment on SHPHAnimInstance_SetMovementSpeedMultiplier");
static_assert(sizeof(SHPHAnimInstance_SetMovementSpeedMultiplier) == 0x000010, "Wrong size on SHPHAnimInstance_SetMovementSpeedMultiplier");
static_assert(offsetof(SHPHAnimInstance_SetMovementSpeedMultiplier, NewSpeed) == 0x000000, "Member 'SHPHAnimInstance_SetMovementSpeedMultiplier::NewSpeed' has a wrong offset!");
static_assert(offsetof(SHPHAnimInstance_SetMovementSpeedMultiplier, Time) == 0x000004, "Member 'SHPHAnimInstance_SetMovementSpeedMultiplier::Time' has a wrong offset!");
static_assert(offsetof(SHPHAnimInstance_SetMovementSpeedMultiplier, BlendInTime) == 0x000008, "Member 'SHPHAnimInstance_SetMovementSpeedMultiplier::BlendInTime' has a wrong offset!");
static_assert(offsetof(SHPHAnimInstance_SetMovementSpeedMultiplier, BlendOutTime) == 0x00000C, "Member 'SHPHAnimInstance_SetMovementSpeedMultiplier::BlendOutTime' has a wrong offset!");

// Function SHProto.SHPHAnimInstance.GetPHAnimInstanceStateData
// 0x0008 (0x0008 - 0x0000)
struct SHPHAnimInstance_GetPHAnimInstanceStateData final
{
public:
	class USHPHAnimInstanceStateData*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPHAnimInstance_GetPHAnimInstanceStateData) == 0x000008, "Wrong alignment on SHPHAnimInstance_GetPHAnimInstanceStateData");
static_assert(sizeof(SHPHAnimInstance_GetPHAnimInstanceStateData) == 0x000008, "Wrong size on SHPHAnimInstance_GetPHAnimInstanceStateData");
static_assert(offsetof(SHPHAnimInstance_GetPHAnimInstanceStateData, ReturnValue) == 0x000000, "Member 'SHPHAnimInstance_GetPHAnimInstanceStateData::ReturnValue' has a wrong offset!");

// Function SHProto.SHPHLocomotionAnimInstance.SetLookAtAngle
// 0x0018 (0x0018 - 0x0000)
struct SHPHLocomotionAnimInstance_SetLookAtAngle final
{
public:
	struct FVector                                LookAtTargetLocation;                              // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPHLocomotionAnimInstance_SetLookAtAngle) == 0x000008, "Wrong alignment on SHPHLocomotionAnimInstance_SetLookAtAngle");
static_assert(sizeof(SHPHLocomotionAnimInstance_SetLookAtAngle) == 0x000018, "Wrong size on SHPHLocomotionAnimInstance_SetLookAtAngle");
static_assert(offsetof(SHPHLocomotionAnimInstance_SetLookAtAngle, LookAtTargetLocation) == 0x000000, "Member 'SHPHLocomotionAnimInstance_SetLookAtAngle::LookAtTargetLocation' has a wrong offset!");

// Function SHProto.SHPHLocomotionAnimInstance.SetLookAtEnable
// 0x0001 (0x0001 - 0x0000)
struct SHPHLocomotionAnimInstance_SetLookAtEnable final
{
public:
	bool                                          NewLookAtEnable;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPHLocomotionAnimInstance_SetLookAtEnable) == 0x000001, "Wrong alignment on SHPHLocomotionAnimInstance_SetLookAtEnable");
static_assert(sizeof(SHPHLocomotionAnimInstance_SetLookAtEnable) == 0x000001, "Wrong size on SHPHLocomotionAnimInstance_SetLookAtEnable");
static_assert(offsetof(SHPHLocomotionAnimInstance_SetLookAtEnable, NewLookAtEnable) == 0x000000, "Member 'SHPHLocomotionAnimInstance_SetLookAtEnable::NewLookAtEnable' has a wrong offset!");

// Function SHProto.SHPHLocomotionAnimInstance.SetMovementSpeedMultiplier
// 0x0010 (0x0010 - 0x0000)
struct SHPHLocomotionAnimInstance_SetMovementSpeedMultiplier final
{
public:
	float                                         NewMovementSpeed;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPHLocomotionAnimInstance_SetMovementSpeedMultiplier) == 0x000004, "Wrong alignment on SHPHLocomotionAnimInstance_SetMovementSpeedMultiplier");
static_assert(sizeof(SHPHLocomotionAnimInstance_SetMovementSpeedMultiplier) == 0x000010, "Wrong size on SHPHLocomotionAnimInstance_SetMovementSpeedMultiplier");
static_assert(offsetof(SHPHLocomotionAnimInstance_SetMovementSpeedMultiplier, NewMovementSpeed) == 0x000000, "Member 'SHPHLocomotionAnimInstance_SetMovementSpeedMultiplier::NewMovementSpeed' has a wrong offset!");
static_assert(offsetof(SHPHLocomotionAnimInstance_SetMovementSpeedMultiplier, Time) == 0x000004, "Member 'SHPHLocomotionAnimInstance_SetMovementSpeedMultiplier::Time' has a wrong offset!");
static_assert(offsetof(SHPHLocomotionAnimInstance_SetMovementSpeedMultiplier, BlendInTime) == 0x000008, "Member 'SHPHLocomotionAnimInstance_SetMovementSpeedMultiplier::BlendInTime' has a wrong offset!");
static_assert(offsetof(SHPHLocomotionAnimInstance_SetMovementSpeedMultiplier, BlendOutTime) == 0x00000C, "Member 'SHPHLocomotionAnimInstance_SetMovementSpeedMultiplier::BlendOutTime' has a wrong offset!");

// Function SHProto.SHPHLocomotionAnimInstance.GetPHAnimInstanceStateData
// 0x0008 (0x0008 - 0x0000)
struct SHPHLocomotionAnimInstance_GetPHAnimInstanceStateData final
{
public:
	class USHPHAnimInstanceStateData*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPHLocomotionAnimInstance_GetPHAnimInstanceStateData) == 0x000008, "Wrong alignment on SHPHLocomotionAnimInstance_GetPHAnimInstanceStateData");
static_assert(sizeof(SHPHLocomotionAnimInstance_GetPHAnimInstanceStateData) == 0x000008, "Wrong size on SHPHLocomotionAnimInstance_GetPHAnimInstanceStateData");
static_assert(offsetof(SHPHLocomotionAnimInstance_GetPHAnimInstanceStateData, ReturnValue) == 0x000000, "Member 'SHPHLocomotionAnimInstance_GetPHAnimInstanceStateData::ReturnValue' has a wrong offset!");

// Function SHProto.SHPlayerHealingExcessEndingValueProcessor.ProcessHealthValueChangedDetailed
// 0x0018 (0x0018 - 0x0000)
struct SHPlayerHealingExcessEndingValueProcessor_ProcessHealthValueChangedDetailed final
{
public:
	class USHCharacterPlayHealthComponent*        HealthComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeDelta;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldValue;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewValue;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHPlayerHealingExcessEndingValueProcessor_ProcessHealthValueChangedDetailed) == 0x000008, "Wrong alignment on SHPlayerHealingExcessEndingValueProcessor_ProcessHealthValueChangedDetailed");
static_assert(sizeof(SHPlayerHealingExcessEndingValueProcessor_ProcessHealthValueChangedDetailed) == 0x000018, "Wrong size on SHPlayerHealingExcessEndingValueProcessor_ProcessHealthValueChangedDetailed");
static_assert(offsetof(SHPlayerHealingExcessEndingValueProcessor_ProcessHealthValueChangedDetailed, HealthComponent) == 0x000000, "Member 'SHPlayerHealingExcessEndingValueProcessor_ProcessHealthValueChangedDetailed::HealthComponent' has a wrong offset!");
static_assert(offsetof(SHPlayerHealingExcessEndingValueProcessor_ProcessHealthValueChangedDetailed, ChangeDelta) == 0x000008, "Member 'SHPlayerHealingExcessEndingValueProcessor_ProcessHealthValueChangedDetailed::ChangeDelta' has a wrong offset!");
static_assert(offsetof(SHPlayerHealingExcessEndingValueProcessor_ProcessHealthValueChangedDetailed, OldValue) == 0x00000C, "Member 'SHPlayerHealingExcessEndingValueProcessor_ProcessHealthValueChangedDetailed::OldValue' has a wrong offset!");
static_assert(offsetof(SHPlayerHealingExcessEndingValueProcessor_ProcessHealthValueChangedDetailed, NewValue) == 0x000010, "Member 'SHPlayerHealingExcessEndingValueProcessor_ProcessHealthValueChangedDetailed::NewValue' has a wrong offset!");

// Function SHProto.SHPlaythroughHealingExcessEndingFactor.SHDebug_Character_Endings_PlaythroughHealingExcessEndingFactor_SetDebugValue
// 0x0004 (0x0004 - 0x0000)
struct SHPlaythroughHealingExcessEndingFactor_SHDebug_Character_Endings_PlaythroughHealingExcessEndingFactor_SetDebugValue final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPlaythroughHealingExcessEndingFactor_SHDebug_Character_Endings_PlaythroughHealingExcessEndingFactor_SetDebugValue) == 0x000004, "Wrong alignment on SHPlaythroughHealingExcessEndingFactor_SHDebug_Character_Endings_PlaythroughHealingExcessEndingFactor_SetDebugValue");
static_assert(sizeof(SHPlaythroughHealingExcessEndingFactor_SHDebug_Character_Endings_PlaythroughHealingExcessEndingFactor_SetDebugValue) == 0x000004, "Wrong size on SHPlaythroughHealingExcessEndingFactor_SHDebug_Character_Endings_PlaythroughHealingExcessEndingFactor_SetDebugValue");
static_assert(offsetof(SHPlaythroughHealingExcessEndingFactor_SHDebug_Character_Endings_PlaythroughHealingExcessEndingFactor_SetDebugValue, InValue) == 0x000000, "Member 'SHPlaythroughHealingExcessEndingFactor_SHDebug_Character_Endings_PlaythroughHealingExcessEndingFactor_SetDebugValue::InValue' has a wrong offset!");

// Function SHProto.SHPostprocessingCtrl.ApplyHDRPreview
// 0x0018 (0x0018 - 0x0000)
struct SHPostprocessingCtrl_ApplyHDRPreview final
{
public:
	float                                         MinLuminance;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MidLuminance;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLuminance;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Brightness;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UIBrightness;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UIContrast;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPostprocessingCtrl_ApplyHDRPreview) == 0x000004, "Wrong alignment on SHPostprocessingCtrl_ApplyHDRPreview");
static_assert(sizeof(SHPostprocessingCtrl_ApplyHDRPreview) == 0x000018, "Wrong size on SHPostprocessingCtrl_ApplyHDRPreview");
static_assert(offsetof(SHPostprocessingCtrl_ApplyHDRPreview, MinLuminance) == 0x000000, "Member 'SHPostprocessingCtrl_ApplyHDRPreview::MinLuminance' has a wrong offset!");
static_assert(offsetof(SHPostprocessingCtrl_ApplyHDRPreview, MidLuminance) == 0x000004, "Member 'SHPostprocessingCtrl_ApplyHDRPreview::MidLuminance' has a wrong offset!");
static_assert(offsetof(SHPostprocessingCtrl_ApplyHDRPreview, MaxLuminance) == 0x000008, "Member 'SHPostprocessingCtrl_ApplyHDRPreview::MaxLuminance' has a wrong offset!");
static_assert(offsetof(SHPostprocessingCtrl_ApplyHDRPreview, Brightness) == 0x00000C, "Member 'SHPostprocessingCtrl_ApplyHDRPreview::Brightness' has a wrong offset!");
static_assert(offsetof(SHPostprocessingCtrl_ApplyHDRPreview, UIBrightness) == 0x000010, "Member 'SHPostprocessingCtrl_ApplyHDRPreview::UIBrightness' has a wrong offset!");
static_assert(offsetof(SHPostprocessingCtrl_ApplyHDRPreview, UIContrast) == 0x000014, "Member 'SHPostprocessingCtrl_ApplyHDRPreview::UIContrast' has a wrong offset!");

// Function SHProto.SHPostprocessingCtrl.ShowHDRSettingsPP
// 0x0001 (0x0001 - 0x0000)
struct SHPostprocessingCtrl_ShowHDRSettingsPP final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPostprocessingCtrl_ShowHDRSettingsPP) == 0x000001, "Wrong alignment on SHPostprocessingCtrl_ShowHDRSettingsPP");
static_assert(sizeof(SHPostprocessingCtrl_ShowHDRSettingsPP) == 0x000001, "Wrong size on SHPostprocessingCtrl_ShowHDRSettingsPP");
static_assert(offsetof(SHPostprocessingCtrl_ShowHDRSettingsPP, State) == 0x000000, "Member 'SHPostprocessingCtrl_ShowHDRSettingsPP::State' has a wrong offset!");

// Function SHProto.SHPrisonGallowPuzzleEndingFactor.SHDebug_Character_Endings_Factors_PrisonGallowPuzzle_SetDebugValue
// 0x0004 (0x0004 - 0x0000)
struct SHPrisonGallowPuzzleEndingFactor_SHDebug_Character_Endings_Factors_PrisonGallowPuzzle_SetDebugValue final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPrisonGallowPuzzleEndingFactor_SHDebug_Character_Endings_Factors_PrisonGallowPuzzle_SetDebugValue) == 0x000004, "Wrong alignment on SHPrisonGallowPuzzleEndingFactor_SHDebug_Character_Endings_Factors_PrisonGallowPuzzle_SetDebugValue");
static_assert(sizeof(SHPrisonGallowPuzzleEndingFactor_SHDebug_Character_Endings_Factors_PrisonGallowPuzzle_SetDebugValue) == 0x000004, "Wrong size on SHPrisonGallowPuzzleEndingFactor_SHDebug_Character_Endings_Factors_PrisonGallowPuzzle_SetDebugValue");
static_assert(offsetof(SHPrisonGallowPuzzleEndingFactor_SHDebug_Character_Endings_Factors_PrisonGallowPuzzle_SetDebugValue, InValue) == 0x000000, "Member 'SHPrisonGallowPuzzleEndingFactor_SHDebug_Character_Endings_Factors_PrisonGallowPuzzle_SetDebugValue::InValue' has a wrong offset!");

// Function SHProto.SHProtoCurveUtils.AddCurveValue
// 0x0010 (0x0010 - 0x0000)
struct SHProtoCurveUtils_AddCurveValue final
{
public:
	class UCurveFloat*                            Curve;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHProtoCurveUtils_AddCurveValue) == 0x000008, "Wrong alignment on SHProtoCurveUtils_AddCurveValue");
static_assert(sizeof(SHProtoCurveUtils_AddCurveValue) == 0x000010, "Wrong size on SHProtoCurveUtils_AddCurveValue");
static_assert(offsetof(SHProtoCurveUtils_AddCurveValue, Curve) == 0x000000, "Member 'SHProtoCurveUtils_AddCurveValue::Curve' has a wrong offset!");
static_assert(offsetof(SHProtoCurveUtils_AddCurveValue, Value) == 0x000008, "Member 'SHProtoCurveUtils_AddCurveValue::Value' has a wrong offset!");
static_assert(offsetof(SHProtoCurveUtils_AddCurveValue, Time) == 0x00000C, "Member 'SHProtoCurveUtils_AddCurveValue::Time' has a wrong offset!");

// Function SHProto.SHProtoCurveUtils.AddVectorCurveValue
// 0x0028 (0x0028 - 0x0000)
struct SHProtoCurveUtils_AddVectorCurveValue final
{
public:
	class UCurveVector*                           Curve;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Value;                                             // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHProtoCurveUtils_AddVectorCurveValue) == 0x000008, "Wrong alignment on SHProtoCurveUtils_AddVectorCurveValue");
static_assert(sizeof(SHProtoCurveUtils_AddVectorCurveValue) == 0x000028, "Wrong size on SHProtoCurveUtils_AddVectorCurveValue");
static_assert(offsetof(SHProtoCurveUtils_AddVectorCurveValue, Curve) == 0x000000, "Member 'SHProtoCurveUtils_AddVectorCurveValue::Curve' has a wrong offset!");
static_assert(offsetof(SHProtoCurveUtils_AddVectorCurveValue, Value) == 0x000008, "Member 'SHProtoCurveUtils_AddVectorCurveValue::Value' has a wrong offset!");
static_assert(offsetof(SHProtoCurveUtils_AddVectorCurveValue, Time) == 0x000020, "Member 'SHProtoCurveUtils_AddVectorCurveValue::Time' has a wrong offset!");

// Function SHProto.SHProtoCurveUtils.ClearCurveValues
// 0x0008 (0x0008 - 0x0000)
struct SHProtoCurveUtils_ClearCurveValues final
{
public:
	class UCurveBase*                             Curve;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHProtoCurveUtils_ClearCurveValues) == 0x000008, "Wrong alignment on SHProtoCurveUtils_ClearCurveValues");
static_assert(sizeof(SHProtoCurveUtils_ClearCurveValues) == 0x000008, "Wrong size on SHProtoCurveUtils_ClearCurveValues");
static_assert(offsetof(SHProtoCurveUtils_ClearCurveValues, Curve) == 0x000000, "Member 'SHProtoCurveUtils_ClearCurveValues::Curve' has a wrong offset!");

// Function SHProto.SHProtoCurveUtils.GetMaxTime
// 0x0010 (0x0010 - 0x0000)
struct SHProtoCurveUtils_GetMaxTime final
{
public:
	class UCurveFloat*                            Curve;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHProtoCurveUtils_GetMaxTime) == 0x000008, "Wrong alignment on SHProtoCurveUtils_GetMaxTime");
static_assert(sizeof(SHProtoCurveUtils_GetMaxTime) == 0x000010, "Wrong size on SHProtoCurveUtils_GetMaxTime");
static_assert(offsetof(SHProtoCurveUtils_GetMaxTime, Curve) == 0x000000, "Member 'SHProtoCurveUtils_GetMaxTime::Curve' has a wrong offset!");
static_assert(offsetof(SHProtoCurveUtils_GetMaxTime, ReturnValue) == 0x000008, "Member 'SHProtoCurveUtils_GetMaxTime::ReturnValue' has a wrong offset!");

// Function SHProto.SHProtoCurveUtils.GetMinTime
// 0x0010 (0x0010 - 0x0000)
struct SHProtoCurveUtils_GetMinTime final
{
public:
	class UCurveFloat*                            Curve;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHProtoCurveUtils_GetMinTime) == 0x000008, "Wrong alignment on SHProtoCurveUtils_GetMinTime");
static_assert(sizeof(SHProtoCurveUtils_GetMinTime) == 0x000010, "Wrong size on SHProtoCurveUtils_GetMinTime");
static_assert(offsetof(SHProtoCurveUtils_GetMinTime, Curve) == 0x000000, "Member 'SHProtoCurveUtils_GetMinTime::Curve' has a wrong offset!");
static_assert(offsetof(SHProtoCurveUtils_GetMinTime, ReturnValue) == 0x000008, "Member 'SHProtoCurveUtils_GetMinTime::ReturnValue' has a wrong offset!");

// Function SHProto.SHPukePuddle.HandleApplyDamage
// 0x0008 (0x0008 - 0x0000)
struct SHPukePuddle_HandleApplyDamage final
{
public:
	class ACharacter*                             DamagedCharacter;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPukePuddle_HandleApplyDamage) == 0x000008, "Wrong alignment on SHPukePuddle_HandleApplyDamage");
static_assert(sizeof(SHPukePuddle_HandleApplyDamage) == 0x000008, "Wrong size on SHPukePuddle_HandleApplyDamage");
static_assert(offsetof(SHPukePuddle_HandleApplyDamage, DamagedCharacter) == 0x000000, "Member 'SHPukePuddle_HandleApplyDamage::DamagedCharacter' has a wrong offset!");

// Function SHProto.SHPukePuddle.IsPuddleDamageActive
// 0x0001 (0x0001 - 0x0000)
struct SHPukePuddle_IsPuddleDamageActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPukePuddle_IsPuddleDamageActive) == 0x000001, "Wrong alignment on SHPukePuddle_IsPuddleDamageActive");
static_assert(sizeof(SHPukePuddle_IsPuddleDamageActive) == 0x000001, "Wrong size on SHPukePuddle_IsPuddleDamageActive");
static_assert(offsetof(SHPukePuddle_IsPuddleDamageActive, ReturnValue) == 0x000000, "Member 'SHPukePuddle_IsPuddleDamageActive::ReturnValue' has a wrong offset!");

// Function SHProto.SHPushableComponent.Initialize
// 0x0010 (0x0010 - 0x0000)
struct SHPushableComponent_Initialize final
{
public:
	class USphereComponent*                       InProximitySphere;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshComponent*                         InMainMesh;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushableComponent_Initialize) == 0x000008, "Wrong alignment on SHPushableComponent_Initialize");
static_assert(sizeof(SHPushableComponent_Initialize) == 0x000010, "Wrong size on SHPushableComponent_Initialize");
static_assert(offsetof(SHPushableComponent_Initialize, InProximitySphere) == 0x000000, "Member 'SHPushableComponent_Initialize::InProximitySphere' has a wrong offset!");
static_assert(offsetof(SHPushableComponent_Initialize, InMainMesh) == 0x000008, "Member 'SHPushableComponent_Initialize::InMainMesh' has a wrong offset!");

// Function SHProto.SHPushableComponent.Interact
// 0x0008 (0x0008 - 0x0000)
struct SHPushableComponent_Interact final
{
public:
	class ASHCharacterPlay*                       InInteractingCharacter;                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushableComponent_Interact) == 0x000008, "Wrong alignment on SHPushableComponent_Interact");
static_assert(sizeof(SHPushableComponent_Interact) == 0x000008, "Wrong size on SHPushableComponent_Interact");
static_assert(offsetof(SHPushableComponent_Interact, InInteractingCharacter) == 0x000000, "Member 'SHPushableComponent_Interact::InInteractingCharacter' has a wrong offset!");

// Function SHProto.SHPushableComponent.ProcessAnimInstFinishedInteraction
// 0x0008 (0x0008 - 0x0000)
struct SHPushableComponent_ProcessAnimInstFinishedInteraction final
{
public:
	class USHPushingObjectAnimInstance*           AnimInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushableComponent_ProcessAnimInstFinishedInteraction) == 0x000008, "Wrong alignment on SHPushableComponent_ProcessAnimInstFinishedInteraction");
static_assert(sizeof(SHPushableComponent_ProcessAnimInstFinishedInteraction) == 0x000008, "Wrong size on SHPushableComponent_ProcessAnimInstFinishedInteraction");
static_assert(offsetof(SHPushableComponent_ProcessAnimInstFinishedInteraction, AnimInst) == 0x000000, "Member 'SHPushableComponent_ProcessAnimInstFinishedInteraction::AnimInst' has a wrong offset!");

// Function SHProto.SHPushableComponent.ProcessAnimInstFiredFinishInteraction
// 0x0008 (0x0008 - 0x0000)
struct SHPushableComponent_ProcessAnimInstFiredFinishInteraction final
{
public:
	class USHPushingObjectAnimInstance*           AnimInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushableComponent_ProcessAnimInstFiredFinishInteraction) == 0x000008, "Wrong alignment on SHPushableComponent_ProcessAnimInstFiredFinishInteraction");
static_assert(sizeof(SHPushableComponent_ProcessAnimInstFiredFinishInteraction) == 0x000008, "Wrong size on SHPushableComponent_ProcessAnimInstFiredFinishInteraction");
static_assert(offsetof(SHPushableComponent_ProcessAnimInstFiredFinishInteraction, AnimInst) == 0x000000, "Member 'SHPushableComponent_ProcessAnimInstFiredFinishInteraction::AnimInst' has a wrong offset!");

// Function SHProto.SHPushableComponent.ProcessAnimInstStartedInteraction
// 0x0008 (0x0008 - 0x0000)
struct SHPushableComponent_ProcessAnimInstStartedInteraction final
{
public:
	class USHPushingObjectAnimInstance*           AnimInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushableComponent_ProcessAnimInstStartedInteraction) == 0x000008, "Wrong alignment on SHPushableComponent_ProcessAnimInstStartedInteraction");
static_assert(sizeof(SHPushableComponent_ProcessAnimInstStartedInteraction) == 0x000008, "Wrong size on SHPushableComponent_ProcessAnimInstStartedInteraction");
static_assert(offsetof(SHPushableComponent_ProcessAnimInstStartedInteraction, AnimInst) == 0x000000, "Member 'SHPushableComponent_ProcessAnimInstStartedInteraction::AnimInst' has a wrong offset!");

// Function SHProto.SHPushableComponent.ProcessAnimInstStartedMovement
// 0x0008 (0x0008 - 0x0000)
struct SHPushableComponent_ProcessAnimInstStartedMovement final
{
public:
	class USHPushingObjectAnimInstance*           AnimInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushableComponent_ProcessAnimInstStartedMovement) == 0x000008, "Wrong alignment on SHPushableComponent_ProcessAnimInstStartedMovement");
static_assert(sizeof(SHPushableComponent_ProcessAnimInstStartedMovement) == 0x000008, "Wrong size on SHPushableComponent_ProcessAnimInstStartedMovement");
static_assert(offsetof(SHPushableComponent_ProcessAnimInstStartedMovement, AnimInst) == 0x000000, "Member 'SHPushableComponent_ProcessAnimInstStartedMovement::AnimInst' has a wrong offset!");

// Function SHProto.SHPushableComponent.ProcessAnimInstStoppedMovement
// 0x0008 (0x0008 - 0x0000)
struct SHPushableComponent_ProcessAnimInstStoppedMovement final
{
public:
	class USHPushingObjectAnimInstance*           AnimInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushableComponent_ProcessAnimInstStoppedMovement) == 0x000008, "Wrong alignment on SHPushableComponent_ProcessAnimInstStoppedMovement");
static_assert(sizeof(SHPushableComponent_ProcessAnimInstStoppedMovement) == 0x000008, "Wrong size on SHPushableComponent_ProcessAnimInstStoppedMovement");
static_assert(offsetof(SHPushableComponent_ProcessAnimInstStoppedMovement, AnimInst) == 0x000000, "Member 'SHPushableComponent_ProcessAnimInstStoppedMovement::AnimInst' has a wrong offset!");

// Function SHProto.SHPushableComponent.ProcessInteractingCharacterCombatInputModeChanged
// 0x0008 (0x0008 - 0x0000)
struct SHPushableComponent_ProcessInteractingCharacterCombatInputModeChanged final
{
public:
	class USHCharacterPlayCombatComponent*        CombatComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushableComponent_ProcessInteractingCharacterCombatInputModeChanged) == 0x000008, "Wrong alignment on SHPushableComponent_ProcessInteractingCharacterCombatInputModeChanged");
static_assert(sizeof(SHPushableComponent_ProcessInteractingCharacterCombatInputModeChanged) == 0x000008, "Wrong size on SHPushableComponent_ProcessInteractingCharacterCombatInputModeChanged");
static_assert(offsetof(SHPushableComponent_ProcessInteractingCharacterCombatInputModeChanged, CombatComp) == 0x000000, "Member 'SHPushableComponent_ProcessInteractingCharacterCombatInputModeChanged::CombatComp' has a wrong offset!");

// Function SHProto.SHPushableComponent.ProcessInteractingCharacterReceiveDamage
// 0x0008 (0x0008 - 0x0000)
struct SHPushableComponent_ProcessInteractingCharacterReceiveDamage final
{
public:
	class USHCharacterPlayCombatComponent*        CombatComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushableComponent_ProcessInteractingCharacterReceiveDamage) == 0x000008, "Wrong alignment on SHPushableComponent_ProcessInteractingCharacterReceiveDamage");
static_assert(sizeof(SHPushableComponent_ProcessInteractingCharacterReceiveDamage) == 0x000008, "Wrong size on SHPushableComponent_ProcessInteractingCharacterReceiveDamage");
static_assert(offsetof(SHPushableComponent_ProcessInteractingCharacterReceiveDamage, CombatComp) == 0x000000, "Member 'SHPushableComponent_ProcessInteractingCharacterReceiveDamage::CombatComp' has a wrong offset!");

// Function SHProto.SHPushableComponent.ProcessLookAtRotationAbsoluteEnd
// 0x0001 (0x0001 - 0x0000)
struct SHPushableComponent_ProcessLookAtRotationAbsoluteEnd final
{
public:
	bool                                          WasCompleted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushableComponent_ProcessLookAtRotationAbsoluteEnd) == 0x000001, "Wrong alignment on SHPushableComponent_ProcessLookAtRotationAbsoluteEnd");
static_assert(sizeof(SHPushableComponent_ProcessLookAtRotationAbsoluteEnd) == 0x000001, "Wrong size on SHPushableComponent_ProcessLookAtRotationAbsoluteEnd");
static_assert(offsetof(SHPushableComponent_ProcessLookAtRotationAbsoluteEnd, WasCompleted) == 0x000000, "Member 'SHPushableComponent_ProcessLookAtRotationAbsoluteEnd::WasCompleted' has a wrong offset!");

// Function SHProto.SHPushableComponent.ProcessMovementSnapEnd
// 0x0001 (0x0001 - 0x0000)
struct SHPushableComponent_ProcessMovementSnapEnd final
{
public:
	bool                                          WasCompleted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushableComponent_ProcessMovementSnapEnd) == 0x000001, "Wrong alignment on SHPushableComponent_ProcessMovementSnapEnd");
static_assert(sizeof(SHPushableComponent_ProcessMovementSnapEnd) == 0x000001, "Wrong size on SHPushableComponent_ProcessMovementSnapEnd");
static_assert(offsetof(SHPushableComponent_ProcessMovementSnapEnd, WasCompleted) == 0x000000, "Member 'SHPushableComponent_ProcessMovementSnapEnd::WasCompleted' has a wrong offset!");

// Function SHProto.SHPushableComponent.ProcessProximityBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct SHPushableComponent_ProcessProximityBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FromSweep;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushableComponent_ProcessProximityBeginOverlap) == 0x000008, "Wrong alignment on SHPushableComponent_ProcessProximityBeginOverlap");
static_assert(sizeof(SHPushableComponent_ProcessProximityBeginOverlap) == 0x000108, "Wrong size on SHPushableComponent_ProcessProximityBeginOverlap");
static_assert(offsetof(SHPushableComponent_ProcessProximityBeginOverlap, OverlappedComponent) == 0x000000, "Member 'SHPushableComponent_ProcessProximityBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SHPushableComponent_ProcessProximityBeginOverlap, OtherActor) == 0x000008, "Member 'SHPushableComponent_ProcessProximityBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SHPushableComponent_ProcessProximityBeginOverlap, OtherComponent) == 0x000010, "Member 'SHPushableComponent_ProcessProximityBeginOverlap::OtherComponent' has a wrong offset!");
static_assert(offsetof(SHPushableComponent_ProcessProximityBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'SHPushableComponent_ProcessProximityBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SHPushableComponent_ProcessProximityBeginOverlap, FromSweep) == 0x00001C, "Member 'SHPushableComponent_ProcessProximityBeginOverlap::FromSweep' has a wrong offset!");
static_assert(offsetof(SHPushableComponent_ProcessProximityBeginOverlap, SweepResult) == 0x000020, "Member 'SHPushableComponent_ProcessProximityBeginOverlap::SweepResult' has a wrong offset!");

// Function SHProto.SHPushableComponent.ProcessProximityEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct SHPushableComponent_ProcessProximityEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHPushableComponent_ProcessProximityEndOverlap) == 0x000008, "Wrong alignment on SHPushableComponent_ProcessProximityEndOverlap");
static_assert(sizeof(SHPushableComponent_ProcessProximityEndOverlap) == 0x000020, "Wrong size on SHPushableComponent_ProcessProximityEndOverlap");
static_assert(offsetof(SHPushableComponent_ProcessProximityEndOverlap, OverlappedComponent) == 0x000000, "Member 'SHPushableComponent_ProcessProximityEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SHPushableComponent_ProcessProximityEndOverlap, OtherActor) == 0x000008, "Member 'SHPushableComponent_ProcessProximityEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SHPushableComponent_ProcessProximityEndOverlap, OtherComponent) == 0x000010, "Member 'SHPushableComponent_ProcessProximityEndOverlap::OtherComponent' has a wrong offset!");
static_assert(offsetof(SHPushableComponent_ProcessProximityEndOverlap, OtherBodyIndex) == 0x000018, "Member 'SHPushableComponent_ProcessProximityEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function SHProto.SHPushableComponent.ProcessSlideSnapEnd
// 0x0001 (0x0001 - 0x0000)
struct SHPushableComponent_ProcessSlideSnapEnd final
{
public:
	bool                                          WasCompleted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushableComponent_ProcessSlideSnapEnd) == 0x000001, "Wrong alignment on SHPushableComponent_ProcessSlideSnapEnd");
static_assert(sizeof(SHPushableComponent_ProcessSlideSnapEnd) == 0x000001, "Wrong size on SHPushableComponent_ProcessSlideSnapEnd");
static_assert(offsetof(SHPushableComponent_ProcessSlideSnapEnd, WasCompleted) == 0x000000, "Member 'SHPushableComponent_ProcessSlideSnapEnd::WasCompleted' has a wrong offset!");

// Function SHProto.SHPushableComponent.SetComponentBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHPushableComponent_SetComponentBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushableComponent_SetComponentBlocked) == 0x000008, "Wrong alignment on SHPushableComponent_SetComponentBlocked");
static_assert(sizeof(SHPushableComponent_SetComponentBlocked) == 0x000010, "Wrong size on SHPushableComponent_SetComponentBlocked");
static_assert(offsetof(SHPushableComponent_SetComponentBlocked, Blocked) == 0x000000, "Member 'SHPushableComponent_SetComponentBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHPushableComponent_SetComponentBlocked, Object) == 0x000008, "Member 'SHPushableComponent_SetComponentBlocked::Object' has a wrong offset!");

// DelegateFunction SHProto.SHPushableComponent.SHPushableComponentEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHPushableComponent_SHPushableComponentEvent__DelegateSignature final
{
public:
	class USHPushableComponent*                   Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushableComponent_SHPushableComponentEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHPushableComponent_SHPushableComponentEvent__DelegateSignature");
static_assert(sizeof(SHPushableComponent_SHPushableComponentEvent__DelegateSignature) == 0x000008, "Wrong size on SHPushableComponent_SHPushableComponentEvent__DelegateSignature");
static_assert(offsetof(SHPushableComponent_SHPushableComponentEvent__DelegateSignature, Component) == 0x000000, "Member 'SHPushableComponent_SHPushableComponentEvent__DelegateSignature::Component' has a wrong offset!");

// Function SHProto.SHPushableComponent.TeleportAbsolute
// 0x0018 (0x0018 - 0x0000)
struct SHPushableComponent_TeleportAbsolute final
{
public:
	struct FVector                                InWorldLoc;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushableComponent_TeleportAbsolute) == 0x000008, "Wrong alignment on SHPushableComponent_TeleportAbsolute");
static_assert(sizeof(SHPushableComponent_TeleportAbsolute) == 0x000018, "Wrong size on SHPushableComponent_TeleportAbsolute");
static_assert(offsetof(SHPushableComponent_TeleportAbsolute, InWorldLoc) == 0x000000, "Member 'SHPushableComponent_TeleportAbsolute::InWorldLoc' has a wrong offset!");

// Function SHProto.SHPushableComponent.GetInteractingCharacter
// 0x0008 (0x0008 - 0x0000)
struct SHPushableComponent_GetInteractingCharacter final
{
public:
	class ASHCharacterPlay*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushableComponent_GetInteractingCharacter) == 0x000008, "Wrong alignment on SHPushableComponent_GetInteractingCharacter");
static_assert(sizeof(SHPushableComponent_GetInteractingCharacter) == 0x000008, "Wrong size on SHPushableComponent_GetInteractingCharacter");
static_assert(offsetof(SHPushableComponent_GetInteractingCharacter, ReturnValue) == 0x000000, "Member 'SHPushableComponent_GetInteractingCharacter::ReturnValue' has a wrong offset!");

// Function SHProto.SHPushableComponent.GetLinkedAnimGraphInstance
// 0x0008 (0x0008 - 0x0000)
struct SHPushableComponent_GetLinkedAnimGraphInstance final
{
public:
	class USHPushingObjectAnimInstance*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushableComponent_GetLinkedAnimGraphInstance) == 0x000008, "Wrong alignment on SHPushableComponent_GetLinkedAnimGraphInstance");
static_assert(sizeof(SHPushableComponent_GetLinkedAnimGraphInstance) == 0x000008, "Wrong size on SHPushableComponent_GetLinkedAnimGraphInstance");
static_assert(offsetof(SHPushableComponent_GetLinkedAnimGraphInstance, ReturnValue) == 0x000000, "Member 'SHPushableComponent_GetLinkedAnimGraphInstance::ReturnValue' has a wrong offset!");

// Function SHProto.SHPushableComponent.GetOwnerMesh
// 0x0008 (0x0008 - 0x0000)
struct SHPushableComponent_GetOwnerMesh final
{
public:
	class UMeshComponent*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushableComponent_GetOwnerMesh) == 0x000008, "Wrong alignment on SHPushableComponent_GetOwnerMesh");
static_assert(sizeof(SHPushableComponent_GetOwnerMesh) == 0x000008, "Wrong size on SHPushableComponent_GetOwnerMesh");
static_assert(offsetof(SHPushableComponent_GetOwnerMesh, ReturnValue) == 0x000000, "Member 'SHPushableComponent_GetOwnerMesh::ReturnValue' has a wrong offset!");

// Function SHProto.SHPushableComponent.IsComponentBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHPushableComponent_IsComponentBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushableComponent_IsComponentBlocked) == 0x000001, "Wrong alignment on SHPushableComponent_IsComponentBlocked");
static_assert(sizeof(SHPushableComponent_IsComponentBlocked) == 0x000001, "Wrong size on SHPushableComponent_IsComponentBlocked");
static_assert(offsetof(SHPushableComponent_IsComponentBlocked, ReturnValue) == 0x000000, "Member 'SHPushableComponent_IsComponentBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHPushableComponent.IsInInteraction
// 0x0001 (0x0001 - 0x0000)
struct SHPushableComponent_IsInInteraction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushableComponent_IsInInteraction) == 0x000001, "Wrong alignment on SHPushableComponent_IsInInteraction");
static_assert(sizeof(SHPushableComponent_IsInInteraction) == 0x000001, "Wrong size on SHPushableComponent_IsInInteraction");
static_assert(offsetof(SHPushableComponent_IsInInteraction, ReturnValue) == 0x000000, "Member 'SHPushableComponent_IsInInteraction::ReturnValue' has a wrong offset!");

// Function SHProto.SHPushableComponent.IsInteractingCharacterStandingOnOwnerMesh
// 0x0001 (0x0001 - 0x0000)
struct SHPushableComponent_IsInteractingCharacterStandingOnOwnerMesh final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushableComponent_IsInteractingCharacterStandingOnOwnerMesh) == 0x000001, "Wrong alignment on SHPushableComponent_IsInteractingCharacterStandingOnOwnerMesh");
static_assert(sizeof(SHPushableComponent_IsInteractingCharacterStandingOnOwnerMesh) == 0x000001, "Wrong size on SHPushableComponent_IsInteractingCharacterStandingOnOwnerMesh");
static_assert(offsetof(SHPushableComponent_IsInteractingCharacterStandingOnOwnerMesh, ReturnValue) == 0x000000, "Member 'SHPushableComponent_IsInteractingCharacterStandingOnOwnerMesh::ReturnValue' has a wrong offset!");

// Function SHProto.SHPushableObjectDragComponent.ProcessMovementStartedEvent
// 0x0008 (0x0008 - 0x0000)
struct SHPushableObjectDragComponent_ProcessMovementStartedEvent final
{
public:
	class USHPushingObjectAnimInstance*           AnimInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushableObjectDragComponent_ProcessMovementStartedEvent) == 0x000008, "Wrong alignment on SHPushableObjectDragComponent_ProcessMovementStartedEvent");
static_assert(sizeof(SHPushableObjectDragComponent_ProcessMovementStartedEvent) == 0x000008, "Wrong size on SHPushableObjectDragComponent_ProcessMovementStartedEvent");
static_assert(offsetof(SHPushableObjectDragComponent_ProcessMovementStartedEvent, AnimInst) == 0x000000, "Member 'SHPushableObjectDragComponent_ProcessMovementStartedEvent::AnimInst' has a wrong offset!");

// Function SHProto.SHPushableObjectDragComponent.ProcessMovementStoppedEvent
// 0x0008 (0x0008 - 0x0000)
struct SHPushableObjectDragComponent_ProcessMovementStoppedEvent final
{
public:
	class USHPushingObjectAnimInstance*           AnimInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushableObjectDragComponent_ProcessMovementStoppedEvent) == 0x000008, "Wrong alignment on SHPushableObjectDragComponent_ProcessMovementStoppedEvent");
static_assert(sizeof(SHPushableObjectDragComponent_ProcessMovementStoppedEvent) == 0x000008, "Wrong size on SHPushableObjectDragComponent_ProcessMovementStoppedEvent");
static_assert(offsetof(SHPushableObjectDragComponent_ProcessMovementStoppedEvent, AnimInst) == 0x000000, "Member 'SHPushableObjectDragComponent_ProcessMovementStoppedEvent::AnimInst' has a wrong offset!");

// DelegateFunction SHProto.SHPushableObjectDragComponent.SHPushableObjectDragComponentEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHPushableObjectDragComponent_SHPushableObjectDragComponentEvent__DelegateSignature final
{
public:
	class USHPushableObjectDragComponent*         Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushableObjectDragComponent_SHPushableObjectDragComponentEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHPushableObjectDragComponent_SHPushableObjectDragComponentEvent__DelegateSignature");
static_assert(sizeof(SHPushableObjectDragComponent_SHPushableObjectDragComponentEvent__DelegateSignature) == 0x000008, "Wrong size on SHPushableObjectDragComponent_SHPushableObjectDragComponentEvent__DelegateSignature");
static_assert(offsetof(SHPushableObjectDragComponent_SHPushableObjectDragComponentEvent__DelegateSignature, Component) == 0x000000, "Member 'SHPushableObjectDragComponent_SHPushableObjectDragComponentEvent__DelegateSignature::Component' has a wrong offset!");

// Function SHProto.SHPushableRangeClampActor.RelayAppliedManagedActorState
// 0x0002 (0x0002 - 0x0000)
struct SHPushableRangeClampActor_RelayAppliedManagedActorState final
{
public:
	bool                                          bIsInDesiredSpotState;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstantApply;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushableRangeClampActor_RelayAppliedManagedActorState) == 0x000001, "Wrong alignment on SHPushableRangeClampActor_RelayAppliedManagedActorState");
static_assert(sizeof(SHPushableRangeClampActor_RelayAppliedManagedActorState) == 0x000002, "Wrong size on SHPushableRangeClampActor_RelayAppliedManagedActorState");
static_assert(offsetof(SHPushableRangeClampActor_RelayAppliedManagedActorState, bIsInDesiredSpotState) == 0x000000, "Member 'SHPushableRangeClampActor_RelayAppliedManagedActorState::bIsInDesiredSpotState' has a wrong offset!");
static_assert(offsetof(SHPushableRangeClampActor_RelayAppliedManagedActorState, bInstantApply) == 0x000001, "Member 'SHPushableRangeClampActor_RelayAppliedManagedActorState::bInstantApply' has a wrong offset!");

// DelegateFunction SHProto.SHPushableRangeClampActor.SHPushableRangeClampEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHPushableRangeClampActor_SHPushableRangeClampEvent__DelegateSignature final
{
public:
	class ASHPushableRangeClampActor*             ActorPtr;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushableRangeClampActor_SHPushableRangeClampEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHPushableRangeClampActor_SHPushableRangeClampEvent__DelegateSignature");
static_assert(sizeof(SHPushableRangeClampActor_SHPushableRangeClampEvent__DelegateSignature) == 0x000008, "Wrong size on SHPushableRangeClampActor_SHPushableRangeClampEvent__DelegateSignature");
static_assert(offsetof(SHPushableRangeClampActor_SHPushableRangeClampEvent__DelegateSignature, ActorPtr) == 0x000000, "Member 'SHPushableRangeClampActor_SHPushableRangeClampEvent__DelegateSignature::ActorPtr' has a wrong offset!");

// Function SHProto.SHPushableRangeClampActor.IsManagedActorOutOfRange
// 0x0001 (0x0001 - 0x0000)
struct SHPushableRangeClampActor_IsManagedActorOutOfRange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushableRangeClampActor_IsManagedActorOutOfRange) == 0x000001, "Wrong alignment on SHPushableRangeClampActor_IsManagedActorOutOfRange");
static_assert(sizeof(SHPushableRangeClampActor_IsManagedActorOutOfRange) == 0x000001, "Wrong size on SHPushableRangeClampActor_IsManagedActorOutOfRange");
static_assert(offsetof(SHPushableRangeClampActor_IsManagedActorOutOfRange, ReturnValue) == 0x000000, "Member 'SHPushableRangeClampActor_IsManagedActorOutOfRange::ReturnValue' has a wrong offset!");

// Function SHProto.SHPushingObjectAnimInstance.ApplyMovementStopped
// 0x0018 (0x0018 - 0x0000)
struct SHPushingObjectAnimInstance_ApplyMovementStopped final
{
public:
	struct FVector                                StoppedMovementInput;                              // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushingObjectAnimInstance_ApplyMovementStopped) == 0x000008, "Wrong alignment on SHPushingObjectAnimInstance_ApplyMovementStopped");
static_assert(sizeof(SHPushingObjectAnimInstance_ApplyMovementStopped) == 0x000018, "Wrong size on SHPushingObjectAnimInstance_ApplyMovementStopped");
static_assert(offsetof(SHPushingObjectAnimInstance_ApplyMovementStopped, StoppedMovementInput) == 0x000000, "Member 'SHPushingObjectAnimInstance_ApplyMovementStopped::StoppedMovementInput' has a wrong offset!");

// Function SHProto.SHPushingObjectAnimInstance.GetBlockedInputValue
// 0x0018 (0x0018 - 0x0000)
struct SHPushingObjectAnimInstance_GetBlockedInputValue final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPushingObjectAnimInstance_GetBlockedInputValue) == 0x000008, "Wrong alignment on SHPushingObjectAnimInstance_GetBlockedInputValue");
static_assert(sizeof(SHPushingObjectAnimInstance_GetBlockedInputValue) == 0x000018, "Wrong size on SHPushingObjectAnimInstance_GetBlockedInputValue");
static_assert(offsetof(SHPushingObjectAnimInstance_GetBlockedInputValue, ReturnValue) == 0x000000, "Member 'SHPushingObjectAnimInstance_GetBlockedInputValue::ReturnValue' has a wrong offset!");

// Function SHProto.SHPuzzleStatics.GetLadyJusticePuzzlePossibleVariations
// 0x0068 (0x0068 - 0x0000)
struct SHPuzzleStatics_GetLadyJusticePuzzlePossibleVariations final
{
public:
	float                                         StartValue;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<float, class FString>                    SolutionValueToName;                               // 0x0008(0x0050)(ConstParm, Parm, NativeAccessSpecifierPublic)
	TArray<float>                                 Weights;                                           // 0x0058(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPuzzleStatics_GetLadyJusticePuzzlePossibleVariations) == 0x000008, "Wrong alignment on SHPuzzleStatics_GetLadyJusticePuzzlePossibleVariations");
static_assert(sizeof(SHPuzzleStatics_GetLadyJusticePuzzlePossibleVariations) == 0x000068, "Wrong size on SHPuzzleStatics_GetLadyJusticePuzzlePossibleVariations");
static_assert(offsetof(SHPuzzleStatics_GetLadyJusticePuzzlePossibleVariations, StartValue) == 0x000000, "Member 'SHPuzzleStatics_GetLadyJusticePuzzlePossibleVariations::StartValue' has a wrong offset!");
static_assert(offsetof(SHPuzzleStatics_GetLadyJusticePuzzlePossibleVariations, SolutionValueToName) == 0x000008, "Member 'SHPuzzleStatics_GetLadyJusticePuzzlePossibleVariations::SolutionValueToName' has a wrong offset!");
static_assert(offsetof(SHPuzzleStatics_GetLadyJusticePuzzlePossibleVariations, Weights) == 0x000058, "Member 'SHPuzzleStatics_GetLadyJusticePuzzlePossibleVariations::Weights' has a wrong offset!");

// Function SHProto.SHPyramidHeadBossFightOutcomeEndingFactor.SHDebug_Character_Endings_Factors_PyramidHeadBossFightOutcome_SetDebugValue
// 0x0004 (0x0004 - 0x0000)
struct SHPyramidHeadBossFightOutcomeEndingFactor_SHDebug_Character_Endings_Factors_PyramidHeadBossFightOutcome_SetDebugValue final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHPyramidHeadBossFightOutcomeEndingFactor_SHDebug_Character_Endings_Factors_PyramidHeadBossFightOutcome_SetDebugValue) == 0x000004, "Wrong alignment on SHPyramidHeadBossFightOutcomeEndingFactor_SHDebug_Character_Endings_Factors_PyramidHeadBossFightOutcome_SetDebugValue");
static_assert(sizeof(SHPyramidHeadBossFightOutcomeEndingFactor_SHDebug_Character_Endings_Factors_PyramidHeadBossFightOutcome_SetDebugValue) == 0x000004, "Wrong size on SHPyramidHeadBossFightOutcomeEndingFactor_SHDebug_Character_Endings_Factors_PyramidHeadBossFightOutcome_SetDebugValue");
static_assert(offsetof(SHPyramidHeadBossFightOutcomeEndingFactor_SHDebug_Character_Endings_Factors_PyramidHeadBossFightOutcome_SetDebugValue, InValue) == 0x000000, "Member 'SHPyramidHeadBossFightOutcomeEndingFactor_SHDebug_Character_Endings_Factors_PyramidHeadBossFightOutcome_SetDebugValue::InValue' has a wrong offset!");

// Function SHProto.SHRadio.SetEnemyIgnored
// 0x0010 (0x0010 - 0x0000)
struct SHRadio_SetEnemyIgnored final
{
public:
	class APawn*                                  InEnemyPawn;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInShouldBeIgnored;                                // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHRadio_SetEnemyIgnored) == 0x000008, "Wrong alignment on SHRadio_SetEnemyIgnored");
static_assert(sizeof(SHRadio_SetEnemyIgnored) == 0x000010, "Wrong size on SHRadio_SetEnemyIgnored");
static_assert(offsetof(SHRadio_SetEnemyIgnored, InEnemyPawn) == 0x000000, "Member 'SHRadio_SetEnemyIgnored::InEnemyPawn' has a wrong offset!");
static_assert(offsetof(SHRadio_SetEnemyIgnored, bInShouldBeIgnored) == 0x000008, "Member 'SHRadio_SetEnemyIgnored::bInShouldBeIgnored' has a wrong offset!");

// Function SHProto.SHRangedCmbSubcomp.OnRangedFireEnd
// 0x0010 (0x0010 - 0x0000)
struct SHRangedCmbSubcomp_OnRangedFireEnd final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHAnimEndType                                AnimEndType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHRangedCmbSubcomp_OnRangedFireEnd) == 0x000008, "Wrong alignment on SHRangedCmbSubcomp_OnRangedFireEnd");
static_assert(sizeof(SHRangedCmbSubcomp_OnRangedFireEnd) == 0x000010, "Wrong size on SHRangedCmbSubcomp_OnRangedFireEnd");
static_assert(offsetof(SHRangedCmbSubcomp_OnRangedFireEnd, Montage) == 0x000000, "Member 'SHRangedCmbSubcomp_OnRangedFireEnd::Montage' has a wrong offset!");
static_assert(offsetof(SHRangedCmbSubcomp_OnRangedFireEnd, AnimEndType) == 0x000008, "Member 'SHRangedCmbSubcomp_OnRangedFireEnd::AnimEndType' has a wrong offset!");

// Function SHProto.SHRangedCmbSubcomp.OnRangedReloadEnd
// 0x0010 (0x0010 - 0x0000)
struct SHRangedCmbSubcomp_OnRangedReloadEnd final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHAnimEndType                                AnimEndType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHRangedCmbSubcomp_OnRangedReloadEnd) == 0x000008, "Wrong alignment on SHRangedCmbSubcomp_OnRangedReloadEnd");
static_assert(sizeof(SHRangedCmbSubcomp_OnRangedReloadEnd) == 0x000010, "Wrong size on SHRangedCmbSubcomp_OnRangedReloadEnd");
static_assert(offsetof(SHRangedCmbSubcomp_OnRangedReloadEnd, Montage) == 0x000000, "Member 'SHRangedCmbSubcomp_OnRangedReloadEnd::Montage' has a wrong offset!");
static_assert(offsetof(SHRangedCmbSubcomp_OnRangedReloadEnd, AnimEndType) == 0x000008, "Member 'SHRangedCmbSubcomp_OnRangedReloadEnd::AnimEndType' has a wrong offset!");

// Function SHProto.SHRangedCmbSubcomp.OnRangedSingleActionPrepareEnd
// 0x0010 (0x0010 - 0x0000)
struct SHRangedCmbSubcomp_OnRangedSingleActionPrepareEnd final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHAnimEndType                                AnimEndType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHRangedCmbSubcomp_OnRangedSingleActionPrepareEnd) == 0x000008, "Wrong alignment on SHRangedCmbSubcomp_OnRangedSingleActionPrepareEnd");
static_assert(sizeof(SHRangedCmbSubcomp_OnRangedSingleActionPrepareEnd) == 0x000010, "Wrong size on SHRangedCmbSubcomp_OnRangedSingleActionPrepareEnd");
static_assert(offsetof(SHRangedCmbSubcomp_OnRangedSingleActionPrepareEnd, Montage) == 0x000000, "Member 'SHRangedCmbSubcomp_OnRangedSingleActionPrepareEnd::Montage' has a wrong offset!");
static_assert(offsetof(SHRangedCmbSubcomp_OnRangedSingleActionPrepareEnd, AnimEndType) == 0x000008, "Member 'SHRangedCmbSubcomp_OnRangedSingleActionPrepareEnd::AnimEndType' has a wrong offset!");

// Function SHProto.SHRangedCmbSubcomp.ProcessEquippedWeaponModifiedEvent
// 0x0008 (0x0008 - 0x0000)
struct SHRangedCmbSubcomp_ProcessEquippedWeaponModifiedEvent final
{
public:
	class USHWeaponManageCmbSubcomp*              WeaponManager;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHRangedCmbSubcomp_ProcessEquippedWeaponModifiedEvent) == 0x000008, "Wrong alignment on SHRangedCmbSubcomp_ProcessEquippedWeaponModifiedEvent");
static_assert(sizeof(SHRangedCmbSubcomp_ProcessEquippedWeaponModifiedEvent) == 0x000008, "Wrong size on SHRangedCmbSubcomp_ProcessEquippedWeaponModifiedEvent");
static_assert(offsetof(SHRangedCmbSubcomp_ProcessEquippedWeaponModifiedEvent, WeaponManager) == 0x000000, "Member 'SHRangedCmbSubcomp_ProcessEquippedWeaponModifiedEvent::WeaponManager' has a wrong offset!");

// Function SHProto.SHRangedCmbSubcomp.ProcessIsInSprintChangeEvent
// 0x0008 (0x0008 - 0x0000)
struct SHRangedCmbSubcomp_ProcessIsInSprintChangeEvent final
{
public:
	class USHCharacterPlayMovementComponent*      ComponentRef;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHRangedCmbSubcomp_ProcessIsInSprintChangeEvent) == 0x000008, "Wrong alignment on SHRangedCmbSubcomp_ProcessIsInSprintChangeEvent");
static_assert(sizeof(SHRangedCmbSubcomp_ProcessIsInSprintChangeEvent) == 0x000008, "Wrong size on SHRangedCmbSubcomp_ProcessIsInSprintChangeEvent");
static_assert(offsetof(SHRangedCmbSubcomp_ProcessIsInSprintChangeEvent, ComponentRef) == 0x000000, "Member 'SHRangedCmbSubcomp_ProcessIsInSprintChangeEvent::ComponentRef' has a wrong offset!");

// Function SHProto.SHRangedCmbSubcomp.ProcessSprintRequestedChangeEvent
// 0x0008 (0x0008 - 0x0000)
struct SHRangedCmbSubcomp_ProcessSprintRequestedChangeEvent final
{
public:
	class USHCharacterPlayMovementComponent*      ComponentRef;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHRangedCmbSubcomp_ProcessSprintRequestedChangeEvent) == 0x000008, "Wrong alignment on SHRangedCmbSubcomp_ProcessSprintRequestedChangeEvent");
static_assert(sizeof(SHRangedCmbSubcomp_ProcessSprintRequestedChangeEvent) == 0x000008, "Wrong size on SHRangedCmbSubcomp_ProcessSprintRequestedChangeEvent");
static_assert(offsetof(SHRangedCmbSubcomp_ProcessSprintRequestedChangeEvent, ComponentRef) == 0x000000, "Member 'SHRangedCmbSubcomp_ProcessSprintRequestedChangeEvent::ComponentRef' has a wrong offset!");

// Function SHProto.SHRangedCmbSubcomp.RequestManualFire
// 0x0008 (0x0008 - 0x0000)
struct SHRangedCmbSubcomp_RequestManualFire final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHRangedCmbSubcomp_RequestManualFire) == 0x000008, "Wrong alignment on SHRangedCmbSubcomp_RequestManualFire");
static_assert(sizeof(SHRangedCmbSubcomp_RequestManualFire) == 0x000008, "Wrong size on SHRangedCmbSubcomp_RequestManualFire");
static_assert(offsetof(SHRangedCmbSubcomp_RequestManualFire, Object) == 0x000000, "Member 'SHRangedCmbSubcomp_RequestManualFire::Object' has a wrong offset!");

// DelegateFunction SHProto.SHRangedCmbSubcomp.SHRangedCombatEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHRangedCmbSubcomp_SHRangedCombatEvent__DelegateSignature final
{
public:
	class USHRangedCmbSubcomp*                    RangedCombatSubcomponent;                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHRangedCmbSubcomp_SHRangedCombatEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHRangedCmbSubcomp_SHRangedCombatEvent__DelegateSignature");
static_assert(sizeof(SHRangedCmbSubcomp_SHRangedCombatEvent__DelegateSignature) == 0x000008, "Wrong size on SHRangedCmbSubcomp_SHRangedCombatEvent__DelegateSignature");
static_assert(offsetof(SHRangedCmbSubcomp_SHRangedCombatEvent__DelegateSignature, RangedCombatSubcomponent) == 0x000000, "Member 'SHRangedCmbSubcomp_SHRangedCombatEvent__DelegateSignature::RangedCombatSubcomponent' has a wrong offset!");

// DelegateFunction SHProto.SHRangedCmbSubcomp.SHRangedCombatWeaponContextEvent__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct SHRangedCmbSubcomp_SHRangedCombatWeaponContextEvent__DelegateSignature final
{
public:
	class USHRangedCmbSubcomp*                    RangedCombatSubcomponent;                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHItemWeapon*                          ItemWeaponContext;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHRangedCmbSubcomp_SHRangedCombatWeaponContextEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHRangedCmbSubcomp_SHRangedCombatWeaponContextEvent__DelegateSignature");
static_assert(sizeof(SHRangedCmbSubcomp_SHRangedCombatWeaponContextEvent__DelegateSignature) == 0x000010, "Wrong size on SHRangedCmbSubcomp_SHRangedCombatWeaponContextEvent__DelegateSignature");
static_assert(offsetof(SHRangedCmbSubcomp_SHRangedCombatWeaponContextEvent__DelegateSignature, RangedCombatSubcomponent) == 0x000000, "Member 'SHRangedCmbSubcomp_SHRangedCombatWeaponContextEvent__DelegateSignature::RangedCombatSubcomponent' has a wrong offset!");
static_assert(offsetof(SHRangedCmbSubcomp_SHRangedCombatWeaponContextEvent__DelegateSignature, ItemWeaponContext) == 0x000008, "Member 'SHRangedCmbSubcomp_SHRangedCombatWeaponContextEvent__DelegateSignature::ItemWeaponContext' has a wrong offset!");

// Function SHProto.SHRangedCmbSubcomp.GetEquippedRangedWeapon
// 0x0008 (0x0008 - 0x0000)
struct SHRangedCmbSubcomp_GetEquippedRangedWeapon final
{
public:
	class ASHItemWeaponRanged*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHRangedCmbSubcomp_GetEquippedRangedWeapon) == 0x000008, "Wrong alignment on SHRangedCmbSubcomp_GetEquippedRangedWeapon");
static_assert(sizeof(SHRangedCmbSubcomp_GetEquippedRangedWeapon) == 0x000008, "Wrong size on SHRangedCmbSubcomp_GetEquippedRangedWeapon");
static_assert(offsetof(SHRangedCmbSubcomp_GetEquippedRangedWeapon, ReturnValue) == 0x000000, "Member 'SHRangedCmbSubcomp_GetEquippedRangedWeapon::ReturnValue' has a wrong offset!");

// Function SHProto.SHRangedCmbSubcomp.IsInRangedAim
// 0x0001 (0x0001 - 0x0000)
struct SHRangedCmbSubcomp_IsInRangedAim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHRangedCmbSubcomp_IsInRangedAim) == 0x000001, "Wrong alignment on SHRangedCmbSubcomp_IsInRangedAim");
static_assert(sizeof(SHRangedCmbSubcomp_IsInRangedAim) == 0x000001, "Wrong size on SHRangedCmbSubcomp_IsInRangedAim");
static_assert(offsetof(SHRangedCmbSubcomp_IsInRangedAim, ReturnValue) == 0x000000, "Member 'SHRangedCmbSubcomp_IsInRangedAim::ReturnValue' has a wrong offset!");

// Function SHProto.SHRollinWheelStaticMeshComponent.SetDisabled
// 0x0008 (0x0008 - 0x0000)
struct SHRollinWheelStaticMeshComponent_SetDisabled final
{
public:
	class USHPushableComponent*                   DummyComp;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHRollinWheelStaticMeshComponent_SetDisabled) == 0x000008, "Wrong alignment on SHRollinWheelStaticMeshComponent_SetDisabled");
static_assert(sizeof(SHRollinWheelStaticMeshComponent_SetDisabled) == 0x000008, "Wrong size on SHRollinWheelStaticMeshComponent_SetDisabled");
static_assert(offsetof(SHRollinWheelStaticMeshComponent_SetDisabled, DummyComp) == 0x000000, "Member 'SHRollinWheelStaticMeshComponent_SetDisabled::DummyComp' has a wrong offset!");

// Function SHProto.SHRollinWheelStaticMeshComponent.SetEnabled
// 0x0008 (0x0008 - 0x0000)
struct SHRollinWheelStaticMeshComponent_SetEnabled final
{
public:
	class USHPushableComponent*                   DummyComp;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHRollinWheelStaticMeshComponent_SetEnabled) == 0x000008, "Wrong alignment on SHRollinWheelStaticMeshComponent_SetEnabled");
static_assert(sizeof(SHRollinWheelStaticMeshComponent_SetEnabled) == 0x000008, "Wrong size on SHRollinWheelStaticMeshComponent_SetEnabled");
static_assert(offsetof(SHRollinWheelStaticMeshComponent_SetEnabled, DummyComp) == 0x000000, "Member 'SHRollinWheelStaticMeshComponent_SetEnabled::DummyComp' has a wrong offset!");

// Function SHProto.SHRotateableComponent.OnActorHitApplyRotate
// 0x0110 (0x0110 - 0x0000)
struct SHRotateableComponent_OnActorHitApplyRotate final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0028(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHRotateableComponent_OnActorHitApplyRotate) == 0x000008, "Wrong alignment on SHRotateableComponent_OnActorHitApplyRotate");
static_assert(sizeof(SHRotateableComponent_OnActorHitApplyRotate) == 0x000110, "Wrong size on SHRotateableComponent_OnActorHitApplyRotate");
static_assert(offsetof(SHRotateableComponent_OnActorHitApplyRotate, SelfActor) == 0x000000, "Member 'SHRotateableComponent_OnActorHitApplyRotate::SelfActor' has a wrong offset!");
static_assert(offsetof(SHRotateableComponent_OnActorHitApplyRotate, OtherActor) == 0x000008, "Member 'SHRotateableComponent_OnActorHitApplyRotate::OtherActor' has a wrong offset!");
static_assert(offsetof(SHRotateableComponent_OnActorHitApplyRotate, NormalImpulse) == 0x000010, "Member 'SHRotateableComponent_OnActorHitApplyRotate::NormalImpulse' has a wrong offset!");
static_assert(offsetof(SHRotateableComponent_OnActorHitApplyRotate, Hit) == 0x000028, "Member 'SHRotateableComponent_OnActorHitApplyRotate::Hit' has a wrong offset!");

// Function SHProto.SHRotateableComponent.RegisterComponents
// 0x0010 (0x0010 - 0x0000)
struct SHRotateableComponent_RegisterComponents final
{
public:
	class UStaticMeshComponent*                   InRotateableMeshComponent;                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlaneSideDetectionComponent*           InSHPlaneSideDetectionComponent;                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHRotateableComponent_RegisterComponents) == 0x000008, "Wrong alignment on SHRotateableComponent_RegisterComponents");
static_assert(sizeof(SHRotateableComponent_RegisterComponents) == 0x000010, "Wrong size on SHRotateableComponent_RegisterComponents");
static_assert(offsetof(SHRotateableComponent_RegisterComponents, InRotateableMeshComponent) == 0x000000, "Member 'SHRotateableComponent_RegisterComponents::InRotateableMeshComponent' has a wrong offset!");
static_assert(offsetof(SHRotateableComponent_RegisterComponents, InSHPlaneSideDetectionComponent) == 0x000008, "Member 'SHRotateableComponent_RegisterComponents::InSHPlaneSideDetectionComponent' has a wrong offset!");

// Function SHProto.SHRotateInPlaceAnimInstance.SetUseControllerRotationYaw
// 0x0001 (0x0001 - 0x0000)
struct SHRotateInPlaceAnimInstance_SetUseControllerRotationYaw final
{
public:
	bool                                          Use;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHRotateInPlaceAnimInstance_SetUseControllerRotationYaw) == 0x000001, "Wrong alignment on SHRotateInPlaceAnimInstance_SetUseControllerRotationYaw");
static_assert(sizeof(SHRotateInPlaceAnimInstance_SetUseControllerRotationYaw) == 0x000001, "Wrong size on SHRotateInPlaceAnimInstance_SetUseControllerRotationYaw");
static_assert(offsetof(SHRotateInPlaceAnimInstance_SetUseControllerRotationYaw, Use) == 0x000000, "Member 'SHRotateInPlaceAnimInstance_SetUseControllerRotationYaw::Use' has a wrong offset!");

// Function SHProto.SHRotateInPlaceAnimInstance.CanBeUsed
// 0x0001 (0x0001 - 0x0000)
struct SHRotateInPlaceAnimInstance_CanBeUsed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHRotateInPlaceAnimInstance_CanBeUsed) == 0x000001, "Wrong alignment on SHRotateInPlaceAnimInstance_CanBeUsed");
static_assert(sizeof(SHRotateInPlaceAnimInstance_CanBeUsed) == 0x000001, "Wrong size on SHRotateInPlaceAnimInstance_CanBeUsed");
static_assert(offsetof(SHRotateInPlaceAnimInstance_CanBeUsed, ReturnValue) == 0x000000, "Member 'SHRotateInPlaceAnimInstance_CanBeUsed::ReturnValue' has a wrong offset!");

// Function SHProto.SHRotateInPlaceAnimInstance.IsBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHRotateInPlaceAnimInstance_IsBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHRotateInPlaceAnimInstance_IsBlocked) == 0x000001, "Wrong alignment on SHRotateInPlaceAnimInstance_IsBlocked");
static_assert(sizeof(SHRotateInPlaceAnimInstance_IsBlocked) == 0x000001, "Wrong size on SHRotateInPlaceAnimInstance_IsBlocked");
static_assert(offsetof(SHRotateInPlaceAnimInstance_IsBlocked, ReturnValue) == 0x000000, "Member 'SHRotateInPlaceAnimInstance_IsBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHRotateInPlaceAnimInstance.IsCutscenePlaying
// 0x0001 (0x0001 - 0x0000)
struct SHRotateInPlaceAnimInstance_IsCutscenePlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHRotateInPlaceAnimInstance_IsCutscenePlaying) == 0x000001, "Wrong alignment on SHRotateInPlaceAnimInstance_IsCutscenePlaying");
static_assert(sizeof(SHRotateInPlaceAnimInstance_IsCutscenePlaying) == 0x000001, "Wrong size on SHRotateInPlaceAnimInstance_IsCutscenePlaying");
static_assert(offsetof(SHRotateInPlaceAnimInstance_IsCutscenePlaying, ReturnValue) == 0x000000, "Member 'SHRotateInPlaceAnimInstance_IsCutscenePlaying::ReturnValue' has a wrong offset!");

// Function SHProto.SHRotateInPlaceAnimInstance.IsStopImmediatelyRequested
// 0x0001 (0x0001 - 0x0000)
struct SHRotateInPlaceAnimInstance_IsStopImmediatelyRequested final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHRotateInPlaceAnimInstance_IsStopImmediatelyRequested) == 0x000001, "Wrong alignment on SHRotateInPlaceAnimInstance_IsStopImmediatelyRequested");
static_assert(sizeof(SHRotateInPlaceAnimInstance_IsStopImmediatelyRequested) == 0x000001, "Wrong size on SHRotateInPlaceAnimInstance_IsStopImmediatelyRequested");
static_assert(offsetof(SHRotateInPlaceAnimInstance_IsStopImmediatelyRequested, ReturnValue) == 0x000000, "Member 'SHRotateInPlaceAnimInstance_IsStopImmediatelyRequested::ReturnValue' has a wrong offset!");

// Function SHProto.SHSavePoint.ManualInteractRequest
// 0x0010 (0x0010 - 0x0000)
struct SHSavePoint_ManualInteractRequest final
{
public:
	class ASHCharacterPlay*                       Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkipMoveToSpot;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHSavePoint_ManualInteractRequest) == 0x000008, "Wrong alignment on SHSavePoint_ManualInteractRequest");
static_assert(sizeof(SHSavePoint_ManualInteractRequest) == 0x000010, "Wrong size on SHSavePoint_ManualInteractRequest");
static_assert(offsetof(SHSavePoint_ManualInteractRequest, Character) == 0x000000, "Member 'SHSavePoint_ManualInteractRequest::Character' has a wrong offset!");
static_assert(offsetof(SHSavePoint_ManualInteractRequest, SkipMoveToSpot) == 0x000008, "Member 'SHSavePoint_ManualInteractRequest::SkipMoveToSpot' has a wrong offset!");

// Function SHProto.SHSavePoint.OnInteractionEnded
// 0x0001 (0x0001 - 0x0000)
struct SHSavePoint_OnInteractionEnded final
{
public:
	bool                                          WasAborted;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSavePoint_OnInteractionEnded) == 0x000001, "Wrong alignment on SHSavePoint_OnInteractionEnded");
static_assert(sizeof(SHSavePoint_OnInteractionEnded) == 0x000001, "Wrong size on SHSavePoint_OnInteractionEnded");
static_assert(offsetof(SHSavePoint_OnInteractionEnded, WasAborted) == 0x000000, "Member 'SHSavePoint_OnInteractionEnded::WasAborted' has a wrong offset!");

// Function SHProto.SHSavePoint.ProcessCombatInputModeChangedEvent
// 0x0008 (0x0008 - 0x0000)
struct SHSavePoint_ProcessCombatInputModeChangedEvent final
{
public:
	class USHCharacterPlayCombatComponent*        CombatComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSavePoint_ProcessCombatInputModeChangedEvent) == 0x000008, "Wrong alignment on SHSavePoint_ProcessCombatInputModeChangedEvent");
static_assert(sizeof(SHSavePoint_ProcessCombatInputModeChangedEvent) == 0x000008, "Wrong size on SHSavePoint_ProcessCombatInputModeChangedEvent");
static_assert(offsetof(SHSavePoint_ProcessCombatInputModeChangedEvent, CombatComp) == 0x000000, "Member 'SHSavePoint_ProcessCombatInputModeChangedEvent::CombatComp' has a wrong offset!");

// Function SHProto.SHSavePoint.ProcessInteractionManagerInitialized
// 0x0008 (0x0008 - 0x0000)
struct SHSavePoint_ProcessInteractionManagerInitialized final
{
public:
	class USHInteractionManagerComponent*         Manager;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSavePoint_ProcessInteractionManagerInitialized) == 0x000008, "Wrong alignment on SHSavePoint_ProcessInteractionManagerInitialized");
static_assert(sizeof(SHSavePoint_ProcessInteractionManagerInitialized) == 0x000008, "Wrong size on SHSavePoint_ProcessInteractionManagerInitialized");
static_assert(offsetof(SHSavePoint_ProcessInteractionManagerInitialized, Manager) == 0x000000, "Member 'SHSavePoint_ProcessInteractionManagerInitialized::Manager' has a wrong offset!");

// Function SHProto.SHSavePoint.ProcessMovementSnapFinish
// 0x0001 (0x0001 - 0x0000)
struct SHSavePoint_ProcessMovementSnapFinish final
{
public:
	bool                                          WasCompleted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSavePoint_ProcessMovementSnapFinish) == 0x000001, "Wrong alignment on SHSavePoint_ProcessMovementSnapFinish");
static_assert(sizeof(SHSavePoint_ProcessMovementSnapFinish) == 0x000001, "Wrong size on SHSavePoint_ProcessMovementSnapFinish");
static_assert(offsetof(SHSavePoint_ProcessMovementSnapFinish, WasCompleted) == 0x000000, "Member 'SHSavePoint_ProcessMovementSnapFinish::WasCompleted' has a wrong offset!");

// Function SHProto.SHSavePoint.ProcessProximityBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct SHSavePoint_ProcessProximityBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FromSweep;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSavePoint_ProcessProximityBeginOverlap) == 0x000008, "Wrong alignment on SHSavePoint_ProcessProximityBeginOverlap");
static_assert(sizeof(SHSavePoint_ProcessProximityBeginOverlap) == 0x000108, "Wrong size on SHSavePoint_ProcessProximityBeginOverlap");
static_assert(offsetof(SHSavePoint_ProcessProximityBeginOverlap, OverlappedComponent) == 0x000000, "Member 'SHSavePoint_ProcessProximityBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SHSavePoint_ProcessProximityBeginOverlap, OtherActor) == 0x000008, "Member 'SHSavePoint_ProcessProximityBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SHSavePoint_ProcessProximityBeginOverlap, OtherComponent) == 0x000010, "Member 'SHSavePoint_ProcessProximityBeginOverlap::OtherComponent' has a wrong offset!");
static_assert(offsetof(SHSavePoint_ProcessProximityBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'SHSavePoint_ProcessProximityBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SHSavePoint_ProcessProximityBeginOverlap, FromSweep) == 0x00001C, "Member 'SHSavePoint_ProcessProximityBeginOverlap::FromSweep' has a wrong offset!");
static_assert(offsetof(SHSavePoint_ProcessProximityBeginOverlap, SweepResult) == 0x000020, "Member 'SHSavePoint_ProcessProximityBeginOverlap::SweepResult' has a wrong offset!");

// Function SHProto.SHSavePoint.ProcessReceiveDamageEvent
// 0x0008 (0x0008 - 0x0000)
struct SHSavePoint_ProcessReceiveDamageEvent final
{
public:
	class USHCharacterPlayCombatComponent*        CombatComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSavePoint_ProcessReceiveDamageEvent) == 0x000008, "Wrong alignment on SHSavePoint_ProcessReceiveDamageEvent");
static_assert(sizeof(SHSavePoint_ProcessReceiveDamageEvent) == 0x000008, "Wrong size on SHSavePoint_ProcessReceiveDamageEvent");
static_assert(offsetof(SHSavePoint_ProcessReceiveDamageEvent, CombatComp) == 0x000000, "Member 'SHSavePoint_ProcessReceiveDamageEvent::CombatComp' has a wrong offset!");

// DelegateFunction SHProto.SHSavePoint.SHSavePointActorEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHSavePoint_SHSavePointActorEvent__DelegateSignature final
{
public:
	class ASHSavePoint*                           Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSavePoint_SHSavePointActorEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHSavePoint_SHSavePointActorEvent__DelegateSignature");
static_assert(sizeof(SHSavePoint_SHSavePointActorEvent__DelegateSignature) == 0x000008, "Wrong size on SHSavePoint_SHSavePointActorEvent__DelegateSignature");
static_assert(offsetof(SHSavePoint_SHSavePointActorEvent__DelegateSignature, Actor) == 0x000000, "Member 'SHSavePoint_SHSavePointActorEvent__DelegateSignature::Actor' has a wrong offset!");

// Function SHProto.SHSaveSlotWidget.GetGameSlotInfo
// 0x0080 (0x0080 - 0x0000)
struct SHSaveSlotWidget_GetGameSlotInfo final
{
public:
	struct FGameSaveSlotInfo                      ReturnValue;                                       // 0x0000(0x0080)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSaveSlotWidget_GetGameSlotInfo) == 0x000008, "Wrong alignment on SHSaveSlotWidget_GetGameSlotInfo");
static_assert(sizeof(SHSaveSlotWidget_GetGameSlotInfo) == 0x000080, "Wrong size on SHSaveSlotWidget_GetGameSlotInfo");
static_assert(offsetof(SHSaveSlotWidget_GetGameSlotInfo, ReturnValue) == 0x000000, "Member 'SHSaveSlotWidget_GetGameSlotInfo::ReturnValue' has a wrong offset!");

// Function SHProto.SHSearchFocus.ProcessAnimInstStageAdvanced
// 0x0008 (0x0008 - 0x0000)
struct SHSearchFocus_ProcessAnimInstStageAdvanced final
{
public:
	class USHSearchFocusAnimInstance*             AnimInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSearchFocus_ProcessAnimInstStageAdvanced) == 0x000008, "Wrong alignment on SHSearchFocus_ProcessAnimInstStageAdvanced");
static_assert(sizeof(SHSearchFocus_ProcessAnimInstStageAdvanced) == 0x000008, "Wrong size on SHSearchFocus_ProcessAnimInstStageAdvanced");
static_assert(offsetof(SHSearchFocus_ProcessAnimInstStageAdvanced, AnimInst) == 0x000000, "Member 'SHSearchFocus_ProcessAnimInstStageAdvanced::AnimInst' has a wrong offset!");

// Function SHProto.SHSearchFocus.ProcessAnimInstStartedInteraction
// 0x0008 (0x0008 - 0x0000)
struct SHSearchFocus_ProcessAnimInstStartedInteraction final
{
public:
	class USHSearchFocusAnimInstance*             AnimInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSearchFocus_ProcessAnimInstStartedInteraction) == 0x000008, "Wrong alignment on SHSearchFocus_ProcessAnimInstStartedInteraction");
static_assert(sizeof(SHSearchFocus_ProcessAnimInstStartedInteraction) == 0x000008, "Wrong size on SHSearchFocus_ProcessAnimInstStartedInteraction");
static_assert(offsetof(SHSearchFocus_ProcessAnimInstStartedInteraction, AnimInst) == 0x000000, "Member 'SHSearchFocus_ProcessAnimInstStartedInteraction::AnimInst' has a wrong offset!");

// Function SHProto.SHSearchFocus.ProcessFocusableInputActionEvent
// 0x0008 (0x0008 - 0x0000)
struct SHSearchFocus_ProcessFocusableInputActionEvent final
{
public:
	ESHFocusableInputActionTypeEnum               InputActionType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         KeyValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSearchFocus_ProcessFocusableInputActionEvent) == 0x000004, "Wrong alignment on SHSearchFocus_ProcessFocusableInputActionEvent");
static_assert(sizeof(SHSearchFocus_ProcessFocusableInputActionEvent) == 0x000008, "Wrong size on SHSearchFocus_ProcessFocusableInputActionEvent");
static_assert(offsetof(SHSearchFocus_ProcessFocusableInputActionEvent, InputActionType) == 0x000000, "Member 'SHSearchFocus_ProcessFocusableInputActionEvent::InputActionType' has a wrong offset!");
static_assert(offsetof(SHSearchFocus_ProcessFocusableInputActionEvent, KeyValue) == 0x000004, "Member 'SHSearchFocus_ProcessFocusableInputActionEvent::KeyValue' has a wrong offset!");

// Function SHProto.SHSearchFocus.ProcessInteractingCharacterCombatInputModeChanged
// 0x0008 (0x0008 - 0x0000)
struct SHSearchFocus_ProcessInteractingCharacterCombatInputModeChanged final
{
public:
	class USHCharacterPlayCombatComponent*        CombatComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSearchFocus_ProcessInteractingCharacterCombatInputModeChanged) == 0x000008, "Wrong alignment on SHSearchFocus_ProcessInteractingCharacterCombatInputModeChanged");
static_assert(sizeof(SHSearchFocus_ProcessInteractingCharacterCombatInputModeChanged) == 0x000008, "Wrong size on SHSearchFocus_ProcessInteractingCharacterCombatInputModeChanged");
static_assert(offsetof(SHSearchFocus_ProcessInteractingCharacterCombatInputModeChanged, CombatComp) == 0x000000, "Member 'SHSearchFocus_ProcessInteractingCharacterCombatInputModeChanged::CombatComp' has a wrong offset!");

// Function SHProto.SHSearchFocus.ProcessInteractingCharacterReceiveDamage
// 0x0008 (0x0008 - 0x0000)
struct SHSearchFocus_ProcessInteractingCharacterReceiveDamage final
{
public:
	class USHCharacterPlayCombatComponent*        CombatComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSearchFocus_ProcessInteractingCharacterReceiveDamage) == 0x000008, "Wrong alignment on SHSearchFocus_ProcessInteractingCharacterReceiveDamage");
static_assert(sizeof(SHSearchFocus_ProcessInteractingCharacterReceiveDamage) == 0x000008, "Wrong size on SHSearchFocus_ProcessInteractingCharacterReceiveDamage");
static_assert(offsetof(SHSearchFocus_ProcessInteractingCharacterReceiveDamage, CombatComp) == 0x000000, "Member 'SHSearchFocus_ProcessInteractingCharacterReceiveDamage::CombatComp' has a wrong offset!");

// Function SHProto.SHSearchFocus.ProcessInteractionGenericGrabbed
// 0x0010 (0x0010 - 0x0000)
struct SHSearchFocus_ProcessInteractionGenericGrabbed final
{
public:
	class USHInteractionGenericComponent*         Generic;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHCharacterPlay*                       Character;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSearchFocus_ProcessInteractionGenericGrabbed) == 0x000008, "Wrong alignment on SHSearchFocus_ProcessInteractionGenericGrabbed");
static_assert(sizeof(SHSearchFocus_ProcessInteractionGenericGrabbed) == 0x000010, "Wrong size on SHSearchFocus_ProcessInteractionGenericGrabbed");
static_assert(offsetof(SHSearchFocus_ProcessInteractionGenericGrabbed, Generic) == 0x000000, "Member 'SHSearchFocus_ProcessInteractionGenericGrabbed::Generic' has a wrong offset!");
static_assert(offsetof(SHSearchFocus_ProcessInteractionGenericGrabbed, Character) == 0x000008, "Member 'SHSearchFocus_ProcessInteractionGenericGrabbed::Character' has a wrong offset!");

// Function SHProto.SHSearchFocus.ProcessInteractionManagerInitialized
// 0x0008 (0x0008 - 0x0000)
struct SHSearchFocus_ProcessInteractionManagerInitialized final
{
public:
	class USHInteractionManagerComponent*         Manager;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSearchFocus_ProcessInteractionManagerInitialized) == 0x000008, "Wrong alignment on SHSearchFocus_ProcessInteractionManagerInitialized");
static_assert(sizeof(SHSearchFocus_ProcessInteractionManagerInitialized) == 0x000008, "Wrong size on SHSearchFocus_ProcessInteractionManagerInitialized");
static_assert(offsetof(SHSearchFocus_ProcessInteractionManagerInitialized, Manager) == 0x000000, "Member 'SHSearchFocus_ProcessInteractionManagerInitialized::Manager' has a wrong offset!");

// Function SHProto.SHSearchFocus.ProcessMoveCharacterToSpotFinished
// 0x0001 (0x0001 - 0x0000)
struct SHSearchFocus_ProcessMoveCharacterToSpotFinished final
{
public:
	bool                                          WasCompleted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSearchFocus_ProcessMoveCharacterToSpotFinished) == 0x000001, "Wrong alignment on SHSearchFocus_ProcessMoveCharacterToSpotFinished");
static_assert(sizeof(SHSearchFocus_ProcessMoveCharacterToSpotFinished) == 0x000001, "Wrong size on SHSearchFocus_ProcessMoveCharacterToSpotFinished");
static_assert(offsetof(SHSearchFocus_ProcessMoveCharacterToSpotFinished, WasCompleted) == 0x000000, "Member 'SHSearchFocus_ProcessMoveCharacterToSpotFinished::WasCompleted' has a wrong offset!");

// Function SHProto.SHSearchFocus.ProcessProximityBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct SHSearchFocus_ProcessProximityBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FromSweep;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSearchFocus_ProcessProximityBeginOverlap) == 0x000008, "Wrong alignment on SHSearchFocus_ProcessProximityBeginOverlap");
static_assert(sizeof(SHSearchFocus_ProcessProximityBeginOverlap) == 0x000108, "Wrong size on SHSearchFocus_ProcessProximityBeginOverlap");
static_assert(offsetof(SHSearchFocus_ProcessProximityBeginOverlap, OverlappedComponent) == 0x000000, "Member 'SHSearchFocus_ProcessProximityBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SHSearchFocus_ProcessProximityBeginOverlap, OtherActor) == 0x000008, "Member 'SHSearchFocus_ProcessProximityBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SHSearchFocus_ProcessProximityBeginOverlap, OtherComponent) == 0x000010, "Member 'SHSearchFocus_ProcessProximityBeginOverlap::OtherComponent' has a wrong offset!");
static_assert(offsetof(SHSearchFocus_ProcessProximityBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'SHSearchFocus_ProcessProximityBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SHSearchFocus_ProcessProximityBeginOverlap, FromSweep) == 0x00001C, "Member 'SHSearchFocus_ProcessProximityBeginOverlap::FromSweep' has a wrong offset!");
static_assert(offsetof(SHSearchFocus_ProcessProximityBeginOverlap, SweepResult) == 0x000020, "Member 'SHSearchFocus_ProcessProximityBeginOverlap::SweepResult' has a wrong offset!");

// Function SHProto.SHSearchFocus.ProcessProximityEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct SHSearchFocus_ProcessProximityEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHSearchFocus_ProcessProximityEndOverlap) == 0x000008, "Wrong alignment on SHSearchFocus_ProcessProximityEndOverlap");
static_assert(sizeof(SHSearchFocus_ProcessProximityEndOverlap) == 0x000020, "Wrong size on SHSearchFocus_ProcessProximityEndOverlap");
static_assert(offsetof(SHSearchFocus_ProcessProximityEndOverlap, OverlappedComponent) == 0x000000, "Member 'SHSearchFocus_ProcessProximityEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SHSearchFocus_ProcessProximityEndOverlap, OtherActor) == 0x000008, "Member 'SHSearchFocus_ProcessProximityEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SHSearchFocus_ProcessProximityEndOverlap, OtherComponent) == 0x000010, "Member 'SHSearchFocus_ProcessProximityEndOverlap::OtherComponent' has a wrong offset!");
static_assert(offsetof(SHSearchFocus_ProcessProximityEndOverlap, OtherBodyIndex) == 0x000018, "Member 'SHSearchFocus_ProcessProximityEndOverlap::OtherBodyIndex' has a wrong offset!");

// DelegateFunction SHProto.SHSearchFocus.SHSearchFocusBlueprintEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHSearchFocus_SHSearchFocusBlueprintEvent__DelegateSignature final
{
public:
	class ASHSearchFocus*                         ActorPtr;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSearchFocus_SHSearchFocusBlueprintEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHSearchFocus_SHSearchFocusBlueprintEvent__DelegateSignature");
static_assert(sizeof(SHSearchFocus_SHSearchFocusBlueprintEvent__DelegateSignature) == 0x000008, "Wrong size on SHSearchFocus_SHSearchFocusBlueprintEvent__DelegateSignature");
static_assert(offsetof(SHSearchFocus_SHSearchFocusBlueprintEvent__DelegateSignature, ActorPtr) == 0x000000, "Member 'SHSearchFocus_SHSearchFocusBlueprintEvent__DelegateSignature::ActorPtr' has a wrong offset!");

// Function SHProto.SHSearchFocus.GetCurrentFocusStageIndex
// 0x0004 (0x0004 - 0x0000)
struct SHSearchFocus_GetCurrentFocusStageIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSearchFocus_GetCurrentFocusStageIndex) == 0x000004, "Wrong alignment on SHSearchFocus_GetCurrentFocusStageIndex");
static_assert(sizeof(SHSearchFocus_GetCurrentFocusStageIndex) == 0x000004, "Wrong size on SHSearchFocus_GetCurrentFocusStageIndex");
static_assert(offsetof(SHSearchFocus_GetCurrentFocusStageIndex, ReturnValue) == 0x000000, "Member 'SHSearchFocus_GetCurrentFocusStageIndex::ReturnValue' has a wrong offset!");

// Function SHProto.SHSearchFocus.IsInInteraction
// 0x0001 (0x0001 - 0x0000)
struct SHSearchFocus_IsInInteraction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSearchFocus_IsInInteraction) == 0x000001, "Wrong alignment on SHSearchFocus_IsInInteraction");
static_assert(sizeof(SHSearchFocus_IsInInteraction) == 0x000001, "Wrong size on SHSearchFocus_IsInInteraction");
static_assert(offsetof(SHSearchFocus_IsInInteraction, ReturnValue) == 0x000000, "Member 'SHSearchFocus_IsInInteraction::ReturnValue' has a wrong offset!");

// Function SHProto.SHSecondaryTargetComponent.AssignRuntimeSecondaryAttackRowName
// 0x0008 (0x0008 - 0x0000)
struct SHSecondaryTargetComponent_AssignRuntimeSecondaryAttackRowName final
{
public:
	class FName                                   InRowName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSecondaryTargetComponent_AssignRuntimeSecondaryAttackRowName) == 0x000004, "Wrong alignment on SHSecondaryTargetComponent_AssignRuntimeSecondaryAttackRowName");
static_assert(sizeof(SHSecondaryTargetComponent_AssignRuntimeSecondaryAttackRowName) == 0x000008, "Wrong size on SHSecondaryTargetComponent_AssignRuntimeSecondaryAttackRowName");
static_assert(offsetof(SHSecondaryTargetComponent_AssignRuntimeSecondaryAttackRowName, InRowName) == 0x000000, "Member 'SHSecondaryTargetComponent_AssignRuntimeSecondaryAttackRowName::InRowName' has a wrong offset!");

// Function SHProto.SHSecondaryTargetComponent.SetDisabled
// 0x0010 (0x0010 - 0x0000)
struct SHSecondaryTargetComponent_SetDisabled final
{
public:
	bool                                          InDisabled;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSecondaryTargetComponent_SetDisabled) == 0x000008, "Wrong alignment on SHSecondaryTargetComponent_SetDisabled");
static_assert(sizeof(SHSecondaryTargetComponent_SetDisabled) == 0x000010, "Wrong size on SHSecondaryTargetComponent_SetDisabled");
static_assert(offsetof(SHSecondaryTargetComponent_SetDisabled, InDisabled) == 0x000000, "Member 'SHSecondaryTargetComponent_SetDisabled::InDisabled' has a wrong offset!");
static_assert(offsetof(SHSecondaryTargetComponent_SetDisabled, Object) == 0x000008, "Member 'SHSecondaryTargetComponent_SetDisabled::Object' has a wrong offset!");

// Function SHProto.SHSecondaryTargetComponent.IsCompleted
// 0x0001 (0x0001 - 0x0000)
struct SHSecondaryTargetComponent_IsCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSecondaryTargetComponent_IsCompleted) == 0x000001, "Wrong alignment on SHSecondaryTargetComponent_IsCompleted");
static_assert(sizeof(SHSecondaryTargetComponent_IsCompleted) == 0x000001, "Wrong size on SHSecondaryTargetComponent_IsCompleted");
static_assert(offsetof(SHSecondaryTargetComponent_IsCompleted, ReturnValue) == 0x000000, "Member 'SHSecondaryTargetComponent_IsCompleted::ReturnValue' has a wrong offset!");

// Function SHProto.SHSecondaryTargetComponent.IsDisabled
// 0x0001 (0x0001 - 0x0000)
struct SHSecondaryTargetComponent_IsDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSecondaryTargetComponent_IsDisabled) == 0x000001, "Wrong alignment on SHSecondaryTargetComponent_IsDisabled");
static_assert(sizeof(SHSecondaryTargetComponent_IsDisabled) == 0x000001, "Wrong size on SHSecondaryTargetComponent_IsDisabled");
static_assert(offsetof(SHSecondaryTargetComponent_IsDisabled, ReturnValue) == 0x000000, "Member 'SHSecondaryTargetComponent_IsDisabled::ReturnValue' has a wrong offset!");

// Function SHProto.ItemsNotificationsVisualizationWidget.Update
// 0x0001 (0x0001 - 0x0000)
struct ItemsNotificationsVisualizationWidget_Update final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemsNotificationsVisualizationWidget_Update) == 0x000001, "Wrong alignment on ItemsNotificationsVisualizationWidget_Update");
static_assert(sizeof(ItemsNotificationsVisualizationWidget_Update) == 0x000001, "Wrong size on ItemsNotificationsVisualizationWidget_Update");
static_assert(offsetof(ItemsNotificationsVisualizationWidget_Update, bShow) == 0x000000, "Member 'ItemsNotificationsVisualizationWidget_Update::bShow' has a wrong offset!");

// Function SHProto.SHSettingOptionsPanel.OnShowInteractionIconVisualization
// 0x0001 (0x0001 - 0x0000)
struct SHSettingOptionsPanel_OnShowInteractionIconVisualization final
{
public:
	bool                                          Show_0;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSettingOptionsPanel_OnShowInteractionIconVisualization) == 0x000001, "Wrong alignment on SHSettingOptionsPanel_OnShowInteractionIconVisualization");
static_assert(sizeof(SHSettingOptionsPanel_OnShowInteractionIconVisualization) == 0x000001, "Wrong size on SHSettingOptionsPanel_OnShowInteractionIconVisualization");
static_assert(offsetof(SHSettingOptionsPanel_OnShowInteractionIconVisualization, Show_0) == 0x000000, "Member 'SHSettingOptionsPanel_OnShowInteractionIconVisualization::Show_0' has a wrong offset!");

// Function SHProto.SHSettingOptionsPanel.OnShowItemsNotificationsVisualization
// 0x0001 (0x0001 - 0x0000)
struct SHSettingOptionsPanel_OnShowItemsNotificationsVisualization final
{
public:
	bool                                          Show_0;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSettingOptionsPanel_OnShowItemsNotificationsVisualization) == 0x000001, "Wrong alignment on SHSettingOptionsPanel_OnShowItemsNotificationsVisualization");
static_assert(sizeof(SHSettingOptionsPanel_OnShowItemsNotificationsVisualization) == 0x000001, "Wrong size on SHSettingOptionsPanel_OnShowItemsNotificationsVisualization");
static_assert(offsetof(SHSettingOptionsPanel_OnShowItemsNotificationsVisualization, Show_0) == 0x000000, "Member 'SHSettingOptionsPanel_OnShowItemsNotificationsVisualization::Show_0' has a wrong offset!");

// Function SHProto.SHSettingOptionsPanel.OnShowReticleVisualization
// 0x0001 (0x0001 - 0x0000)
struct SHSettingOptionsPanel_OnShowReticleVisualization final
{
public:
	bool                                          Show_0;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSettingOptionsPanel_OnShowReticleVisualization) == 0x000001, "Wrong alignment on SHSettingOptionsPanel_OnShowReticleVisualization");
static_assert(sizeof(SHSettingOptionsPanel_OnShowReticleVisualization) == 0x000001, "Wrong size on SHSettingOptionsPanel_OnShowReticleVisualization");
static_assert(offsetof(SHSettingOptionsPanel_OnShowReticleVisualization, Show_0) == 0x000000, "Member 'SHSettingOptionsPanel_OnShowReticleVisualization::Show_0' has a wrong offset!");

// Function SHProto.SHSettingOptionsPanel.OnShowStruggleIconVisualization
// 0x0001 (0x0001 - 0x0000)
struct SHSettingOptionsPanel_OnShowStruggleIconVisualization final
{
public:
	bool                                          Show_0;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSettingOptionsPanel_OnShowStruggleIconVisualization) == 0x000001, "Wrong alignment on SHSettingOptionsPanel_OnShowStruggleIconVisualization");
static_assert(sizeof(SHSettingOptionsPanel_OnShowStruggleIconVisualization) == 0x000001, "Wrong size on SHSettingOptionsPanel_OnShowStruggleIconVisualization");
static_assert(offsetof(SHSettingOptionsPanel_OnShowStruggleIconVisualization, Show_0) == 0x000000, "Member 'SHSettingOptionsPanel_OnShowStruggleIconVisualization::Show_0' has a wrong offset!");

// Function SHProto.SHSettingOptionsPanel.OnShowTranscriptionVisualization
// 0x0001 (0x0001 - 0x0000)
struct SHSettingOptionsPanel_OnShowTranscriptionVisualization final
{
public:
	bool                                          Show_0;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSettingOptionsPanel_OnShowTranscriptionVisualization) == 0x000001, "Wrong alignment on SHSettingOptionsPanel_OnShowTranscriptionVisualization");
static_assert(sizeof(SHSettingOptionsPanel_OnShowTranscriptionVisualization) == 0x000001, "Wrong size on SHSettingOptionsPanel_OnShowTranscriptionVisualization");
static_assert(offsetof(SHSettingOptionsPanel_OnShowTranscriptionVisualization, Show_0) == 0x000000, "Member 'SHSettingOptionsPanel_OnShowTranscriptionVisualization::Show_0' has a wrong offset!");

// Function SHProto.SHSettingOptionsPanel.OnShowTraversalIconVisualization
// 0x0001 (0x0001 - 0x0000)
struct SHSettingOptionsPanel_OnShowTraversalIconVisualization final
{
public:
	bool                                          Show_0;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSettingOptionsPanel_OnShowTraversalIconVisualization) == 0x000001, "Wrong alignment on SHSettingOptionsPanel_OnShowTraversalIconVisualization");
static_assert(sizeof(SHSettingOptionsPanel_OnShowTraversalIconVisualization) == 0x000001, "Wrong size on SHSettingOptionsPanel_OnShowTraversalIconVisualization");
static_assert(offsetof(SHSettingOptionsPanel_OnShowTraversalIconVisualization, Show_0) == 0x000000, "Member 'SHSettingOptionsPanel_OnShowTraversalIconVisualization::Show_0' has a wrong offset!");

// Function SHProto.SHSettingOptionsPanel.OnShowTutorialsVisualization
// 0x0001 (0x0001 - 0x0000)
struct SHSettingOptionsPanel_OnShowTutorialsVisualization final
{
public:
	bool                                          Show_0;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSettingOptionsPanel_OnShowTutorialsVisualization) == 0x000001, "Wrong alignment on SHSettingOptionsPanel_OnShowTutorialsVisualization");
static_assert(sizeof(SHSettingOptionsPanel_OnShowTutorialsVisualization) == 0x000001, "Wrong size on SHSettingOptionsPanel_OnShowTutorialsVisualization");
static_assert(offsetof(SHSettingOptionsPanel_OnShowTutorialsVisualization, Show_0) == 0x000000, "Member 'SHSettingOptionsPanel_OnShowTutorialsVisualization::Show_0' has a wrong offset!");

// Function SHProto.SHSettingOptionsPanel.ShowItemsNotificationsVisualization
// 0x0001 (0x0001 - 0x0000)
struct SHSettingOptionsPanel_ShowItemsNotificationsVisualization final
{
public:
	bool                                          Show_0;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSettingOptionsPanel_ShowItemsNotificationsVisualization) == 0x000001, "Wrong alignment on SHSettingOptionsPanel_ShowItemsNotificationsVisualization");
static_assert(sizeof(SHSettingOptionsPanel_ShowItemsNotificationsVisualization) == 0x000001, "Wrong size on SHSettingOptionsPanel_ShowItemsNotificationsVisualization");
static_assert(offsetof(SHSettingOptionsPanel_ShowItemsNotificationsVisualization, Show_0) == 0x000000, "Member 'SHSettingOptionsPanel_ShowItemsNotificationsVisualization::Show_0' has a wrong offset!");

// Function SHProto.SHSettingOptionsPanel.GetInteractionIconData
// 0x00C8 (0x00C8 - 0x0000)
struct SHSettingOptionsPanel_GetInteractionIconData final
{
public:
	struct FInteractionIconData                   ReturnValue;                                       // 0x0000(0x00C8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSettingOptionsPanel_GetInteractionIconData) == 0x000008, "Wrong alignment on SHSettingOptionsPanel_GetInteractionIconData");
static_assert(sizeof(SHSettingOptionsPanel_GetInteractionIconData) == 0x0000C8, "Wrong size on SHSettingOptionsPanel_GetInteractionIconData");
static_assert(offsetof(SHSettingOptionsPanel_GetInteractionIconData, ReturnValue) == 0x000000, "Member 'SHSettingOptionsPanel_GetInteractionIconData::ReturnValue' has a wrong offset!");

// Function SHProto.SHSettingOptionsPanel.GetItemsNotificationsData
// 0x0001 (0x0001 - 0x0000)
struct SHSettingOptionsPanel_GetItemsNotificationsData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSettingOptionsPanel_GetItemsNotificationsData) == 0x000001, "Wrong alignment on SHSettingOptionsPanel_GetItemsNotificationsData");
static_assert(sizeof(SHSettingOptionsPanel_GetItemsNotificationsData) == 0x000001, "Wrong size on SHSettingOptionsPanel_GetItemsNotificationsData");
static_assert(offsetof(SHSettingOptionsPanel_GetItemsNotificationsData, ReturnValue) == 0x000000, "Member 'SHSettingOptionsPanel_GetItemsNotificationsData::ReturnValue' has a wrong offset!");

// Function SHProto.SHSettingOptionsPanel.GetReticleData
// 0x000C (0x000C - 0x0000)
struct SHSettingOptionsPanel_GetReticleData final
{
public:
	struct FReticleData                           ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSettingOptionsPanel_GetReticleData) == 0x000004, "Wrong alignment on SHSettingOptionsPanel_GetReticleData");
static_assert(sizeof(SHSettingOptionsPanel_GetReticleData) == 0x00000C, "Wrong size on SHSettingOptionsPanel_GetReticleData");
static_assert(offsetof(SHSettingOptionsPanel_GetReticleData, ReturnValue) == 0x000000, "Member 'SHSettingOptionsPanel_GetReticleData::ReturnValue' has a wrong offset!");

// Function SHProto.SHSettingOptionsPanel.GetStruggleIconData
// 0x0002 (0x0002 - 0x0000)
struct SHSettingOptionsPanel_GetStruggleIconData final
{
public:
	struct FStruggleInputData                     ReturnValue;                                       // 0x0000(0x0002)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSettingOptionsPanel_GetStruggleIconData) == 0x000001, "Wrong alignment on SHSettingOptionsPanel_GetStruggleIconData");
static_assert(sizeof(SHSettingOptionsPanel_GetStruggleIconData) == 0x000002, "Wrong size on SHSettingOptionsPanel_GetStruggleIconData");
static_assert(offsetof(SHSettingOptionsPanel_GetStruggleIconData, ReturnValue) == 0x000000, "Member 'SHSettingOptionsPanel_GetStruggleIconData::ReturnValue' has a wrong offset!");

// Function SHProto.SHSettingOptionsPanel.GetTranscriptionFontInfo
// 0x0058 (0x0058 - 0x0000)
struct SHSettingOptionsPanel_GetTranscriptionFontInfo final
{
public:
	struct FSlateFontInfo                         ReturnValue;                                       // 0x0000(0x0058)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSettingOptionsPanel_GetTranscriptionFontInfo) == 0x000008, "Wrong alignment on SHSettingOptionsPanel_GetTranscriptionFontInfo");
static_assert(sizeof(SHSettingOptionsPanel_GetTranscriptionFontInfo) == 0x000058, "Wrong size on SHSettingOptionsPanel_GetTranscriptionFontInfo");
static_assert(offsetof(SHSettingOptionsPanel_GetTranscriptionFontInfo, ReturnValue) == 0x000000, "Member 'SHSettingOptionsPanel_GetTranscriptionFontInfo::ReturnValue' has a wrong offset!");

// Function SHProto.SHSettingOptionsPanel.GetTraversalIconData
// 0x00C8 (0x00C8 - 0x0000)
struct SHSettingOptionsPanel_GetTraversalIconData final
{
public:
	struct FTraversalIconData                     ReturnValue;                                       // 0x0000(0x00C8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSettingOptionsPanel_GetTraversalIconData) == 0x000008, "Wrong alignment on SHSettingOptionsPanel_GetTraversalIconData");
static_assert(sizeof(SHSettingOptionsPanel_GetTraversalIconData) == 0x0000C8, "Wrong size on SHSettingOptionsPanel_GetTraversalIconData");
static_assert(offsetof(SHSettingOptionsPanel_GetTraversalIconData, ReturnValue) == 0x000000, "Member 'SHSettingOptionsPanel_GetTraversalIconData::ReturnValue' has a wrong offset!");

// Function SHProto.SHSettingOptionsPanel.GetTutorialsData
// 0x0060 (0x0060 - 0x0000)
struct SHSettingOptionsPanel_GetTutorialsData final
{
public:
	struct FTutorialsData                         ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSettingOptionsPanel_GetTutorialsData) == 0x000008, "Wrong alignment on SHSettingOptionsPanel_GetTutorialsData");
static_assert(sizeof(SHSettingOptionsPanel_GetTutorialsData) == 0x000060, "Wrong size on SHSettingOptionsPanel_GetTutorialsData");
static_assert(offsetof(SHSettingOptionsPanel_GetTutorialsData, ReturnValue) == 0x000000, "Member 'SHSettingOptionsPanel_GetTutorialsData::ReturnValue' has a wrong offset!");

// Function SHProto.SHSimulatedWaterActor.AddEffect
// 0x0048 (0x0048 - 0x0000)
struct SHSimulatedWaterActor_AddEffect final
{
public:
	ESimulatedWaterEffectType                     InType;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InPosition;                                        // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRadius;                                          // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InVeclocity;                                       // 0x0028(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHSimulatedWaterActor_AddEffect) == 0x000008, "Wrong alignment on SHSimulatedWaterActor_AddEffect");
static_assert(sizeof(SHSimulatedWaterActor_AddEffect) == 0x000048, "Wrong size on SHSimulatedWaterActor_AddEffect");
static_assert(offsetof(SHSimulatedWaterActor_AddEffect, InType) == 0x000000, "Member 'SHSimulatedWaterActor_AddEffect::InType' has a wrong offset!");
static_assert(offsetof(SHSimulatedWaterActor_AddEffect, InPosition) == 0x000008, "Member 'SHSimulatedWaterActor_AddEffect::InPosition' has a wrong offset!");
static_assert(offsetof(SHSimulatedWaterActor_AddEffect, InRadius) == 0x000020, "Member 'SHSimulatedWaterActor_AddEffect::InRadius' has a wrong offset!");
static_assert(offsetof(SHSimulatedWaterActor_AddEffect, InVeclocity) == 0x000028, "Member 'SHSimulatedWaterActor_AddEffect::InVeclocity' has a wrong offset!");
static_assert(offsetof(SHSimulatedWaterActor_AddEffect, ReturnValue) == 0x000040, "Member 'SHSimulatedWaterActor_AddEffect::ReturnValue' has a wrong offset!");

// Function SHProto.SHSimulatedWaterActor.SetWaterSimulationEnabled
// 0x0001 (0x0001 - 0x0000)
struct SHSimulatedWaterActor_SetWaterSimulationEnabled final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSimulatedWaterActor_SetWaterSimulationEnabled) == 0x000001, "Wrong alignment on SHSimulatedWaterActor_SetWaterSimulationEnabled");
static_assert(sizeof(SHSimulatedWaterActor_SetWaterSimulationEnabled) == 0x000001, "Wrong size on SHSimulatedWaterActor_SetWaterSimulationEnabled");
static_assert(offsetof(SHSimulatedWaterActor_SetWaterSimulationEnabled, IsEnable) == 0x000000, "Member 'SHSimulatedWaterActor_SetWaterSimulationEnabled::IsEnable' has a wrong offset!");

// Function SHProto.SHSimulatedWaterActor.GetDynamicInstanceMaterial
// 0x0008 (0x0008 - 0x0000)
struct SHSimulatedWaterActor_GetDynamicInstanceMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSimulatedWaterActor_GetDynamicInstanceMaterial) == 0x000008, "Wrong alignment on SHSimulatedWaterActor_GetDynamicInstanceMaterial");
static_assert(sizeof(SHSimulatedWaterActor_GetDynamicInstanceMaterial) == 0x000008, "Wrong size on SHSimulatedWaterActor_GetDynamicInstanceMaterial");
static_assert(offsetof(SHSimulatedWaterActor_GetDynamicInstanceMaterial, ReturnValue) == 0x000000, "Member 'SHSimulatedWaterActor_GetDynamicInstanceMaterial::ReturnValue' has a wrong offset!");

// Function SHProto.SHSimulatedWaterActor.GetWaterDepthByCharacter
// 0x0010 (0x0010 - 0x0000)
struct SHSimulatedWaterActor_GetWaterDepthByCharacter final
{
public:
	const class ACharacter*                       InCharacter;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHSimulatedWaterActor_GetWaterDepthByCharacter) == 0x000008, "Wrong alignment on SHSimulatedWaterActor_GetWaterDepthByCharacter");
static_assert(sizeof(SHSimulatedWaterActor_GetWaterDepthByCharacter) == 0x000010, "Wrong size on SHSimulatedWaterActor_GetWaterDepthByCharacter");
static_assert(offsetof(SHSimulatedWaterActor_GetWaterDepthByCharacter, InCharacter) == 0x000000, "Member 'SHSimulatedWaterActor_GetWaterDepthByCharacter::InCharacter' has a wrong offset!");
static_assert(offsetof(SHSimulatedWaterActor_GetWaterDepthByCharacter, ReturnValue) == 0x000008, "Member 'SHSimulatedWaterActor_GetWaterDepthByCharacter::ReturnValue' has a wrong offset!");

// Function SHProto.SHSimulatedWaterActor.GetWaterDepthByLocation
// 0x0020 (0x0020 - 0x0000)
struct SHSimulatedWaterActor_GetWaterDepthByLocation final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHSimulatedWaterActor_GetWaterDepthByLocation) == 0x000008, "Wrong alignment on SHSimulatedWaterActor_GetWaterDepthByLocation");
static_assert(sizeof(SHSimulatedWaterActor_GetWaterDepthByLocation) == 0x000020, "Wrong size on SHSimulatedWaterActor_GetWaterDepthByLocation");
static_assert(offsetof(SHSimulatedWaterActor_GetWaterDepthByLocation, InLocation) == 0x000000, "Member 'SHSimulatedWaterActor_GetWaterDepthByLocation::InLocation' has a wrong offset!");
static_assert(offsetof(SHSimulatedWaterActor_GetWaterDepthByLocation, ReturnValue) == 0x000018, "Member 'SHSimulatedWaterActor_GetWaterDepthByLocation::ReturnValue' has a wrong offset!");

// Function SHProto.SHSimulatedWaterActor.GetWaterSimulationEnabled
// 0x0001 (0x0001 - 0x0000)
struct SHSimulatedWaterActor_GetWaterSimulationEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSimulatedWaterActor_GetWaterSimulationEnabled) == 0x000001, "Wrong alignment on SHSimulatedWaterActor_GetWaterSimulationEnabled");
static_assert(sizeof(SHSimulatedWaterActor_GetWaterSimulationEnabled) == 0x000001, "Wrong size on SHSimulatedWaterActor_GetWaterSimulationEnabled");
static_assert(offsetof(SHSimulatedWaterActor_GetWaterSimulationEnabled, ReturnValue) == 0x000000, "Member 'SHSimulatedWaterActor_GetWaterSimulationEnabled::ReturnValue' has a wrong offset!");

// Function SHProto.SHSimulatedWaterActor.GetWaterWorldAltitude
// 0x0004 (0x0004 - 0x0000)
struct SHSimulatedWaterActor_GetWaterWorldAltitude final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSimulatedWaterActor_GetWaterWorldAltitude) == 0x000004, "Wrong alignment on SHSimulatedWaterActor_GetWaterWorldAltitude");
static_assert(sizeof(SHSimulatedWaterActor_GetWaterWorldAltitude) == 0x000004, "Wrong size on SHSimulatedWaterActor_GetWaterWorldAltitude");
static_assert(offsetof(SHSimulatedWaterActor_GetWaterWorldAltitude, ReturnValue) == 0x000000, "Member 'SHSimulatedWaterActor_GetWaterWorldAltitude::ReturnValue' has a wrong offset!");

// Function SHProto.SHSlidingDoor.ProcessDoorAlphaChanged
// 0x0008 (0x0008 - 0x0000)
struct SHSlidingDoor_ProcessDoorAlphaChanged final
{
public:
	class USHDoorMovementBaseComponent*           MovementComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSlidingDoor_ProcessDoorAlphaChanged) == 0x000008, "Wrong alignment on SHSlidingDoor_ProcessDoorAlphaChanged");
static_assert(sizeof(SHSlidingDoor_ProcessDoorAlphaChanged) == 0x000008, "Wrong size on SHSlidingDoor_ProcessDoorAlphaChanged");
static_assert(offsetof(SHSlidingDoor_ProcessDoorAlphaChanged, MovementComponent) == 0x000000, "Member 'SHSlidingDoor_ProcessDoorAlphaChanged::MovementComponent' has a wrong offset!");

// Function SHProto.SHSlidingDoor.ProcessInteractionManagerInitialized
// 0x0008 (0x0008 - 0x0000)
struct SHSlidingDoor_ProcessInteractionManagerInitialized final
{
public:
	class USHInteractionManagerComponent*         Manager;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSlidingDoor_ProcessInteractionManagerInitialized) == 0x000008, "Wrong alignment on SHSlidingDoor_ProcessInteractionManagerInitialized");
static_assert(sizeof(SHSlidingDoor_ProcessInteractionManagerInitialized) == 0x000008, "Wrong size on SHSlidingDoor_ProcessInteractionManagerInitialized");
static_assert(offsetof(SHSlidingDoor_ProcessInteractionManagerInitialized, Manager) == 0x000000, "Member 'SHSlidingDoor_ProcessInteractionManagerInitialized::Manager' has a wrong offset!");

// Function SHProto.SHSlidingDoorAnimationsComponent.MovementSnapFinished
// 0x0001 (0x0001 - 0x0000)
struct SHSlidingDoorAnimationsComponent_MovementSnapFinished final
{
public:
	bool                                          WasCompleted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSlidingDoorAnimationsComponent_MovementSnapFinished) == 0x000001, "Wrong alignment on SHSlidingDoorAnimationsComponent_MovementSnapFinished");
static_assert(sizeof(SHSlidingDoorAnimationsComponent_MovementSnapFinished) == 0x000001, "Wrong size on SHSlidingDoorAnimationsComponent_MovementSnapFinished");
static_assert(offsetof(SHSlidingDoorAnimationsComponent_MovementSnapFinished, WasCompleted) == 0x000000, "Member 'SHSlidingDoorAnimationsComponent_MovementSnapFinished::WasCompleted' has a wrong offset!");

// Function SHProto.SHSlidingDoorAnimationsComponent.OnLockedAnimEnd
// 0x0010 (0x0010 - 0x0000)
struct SHSlidingDoorAnimationsComponent_OnLockedAnimEnd final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHAnimEndType                                AnimEndType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHSlidingDoorAnimationsComponent_OnLockedAnimEnd) == 0x000008, "Wrong alignment on SHSlidingDoorAnimationsComponent_OnLockedAnimEnd");
static_assert(sizeof(SHSlidingDoorAnimationsComponent_OnLockedAnimEnd) == 0x000010, "Wrong size on SHSlidingDoorAnimationsComponent_OnLockedAnimEnd");
static_assert(offsetof(SHSlidingDoorAnimationsComponent_OnLockedAnimEnd, Montage) == 0x000000, "Member 'SHSlidingDoorAnimationsComponent_OnLockedAnimEnd::Montage' has a wrong offset!");
static_assert(offsetof(SHSlidingDoorAnimationsComponent_OnLockedAnimEnd, AnimEndType) == 0x000008, "Member 'SHSlidingDoorAnimationsComponent_OnLockedAnimEnd::AnimEndType' has a wrong offset!");

// Function SHProto.SHSlidingDoorAnimationsComponent.OnOpenAnimEnd
// 0x0010 (0x0010 - 0x0000)
struct SHSlidingDoorAnimationsComponent_OnOpenAnimEnd final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHAnimEndType                                AnimEndType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHSlidingDoorAnimationsComponent_OnOpenAnimEnd) == 0x000008, "Wrong alignment on SHSlidingDoorAnimationsComponent_OnOpenAnimEnd");
static_assert(sizeof(SHSlidingDoorAnimationsComponent_OnOpenAnimEnd) == 0x000010, "Wrong size on SHSlidingDoorAnimationsComponent_OnOpenAnimEnd");
static_assert(offsetof(SHSlidingDoorAnimationsComponent_OnOpenAnimEnd, Montage) == 0x000000, "Member 'SHSlidingDoorAnimationsComponent_OnOpenAnimEnd::Montage' has a wrong offset!");
static_assert(offsetof(SHSlidingDoorAnimationsComponent_OnOpenAnimEnd, AnimEndType) == 0x000008, "Member 'SHSlidingDoorAnimationsComponent_OnOpenAnimEnd::AnimEndType' has a wrong offset!");

// Function SHProto.SHSlidingDoorAnimationsComponent.PutCharacterOnSpotFinished
// 0x0001 (0x0001 - 0x0000)
struct SHSlidingDoorAnimationsComponent_PutCharacterOnSpotFinished final
{
public:
	bool                                          WasCompleted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSlidingDoorAnimationsComponent_PutCharacterOnSpotFinished) == 0x000001, "Wrong alignment on SHSlidingDoorAnimationsComponent_PutCharacterOnSpotFinished");
static_assert(sizeof(SHSlidingDoorAnimationsComponent_PutCharacterOnSpotFinished) == 0x000001, "Wrong size on SHSlidingDoorAnimationsComponent_PutCharacterOnSpotFinished");
static_assert(offsetof(SHSlidingDoorAnimationsComponent_PutCharacterOnSpotFinished, WasCompleted) == 0x000000, "Member 'SHSlidingDoorAnimationsComponent_PutCharacterOnSpotFinished::WasCompleted' has a wrong offset!");

// DelegateFunction SHProto.SHSlidingDoorAnimationsComponent.SHSlidingDoorAnimationEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHSlidingDoorAnimationsComponent_SHSlidingDoorAnimationEvent__DelegateSignature final
{
public:
	class USHSlidingDoorAnimationsComponent*      Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSlidingDoorAnimationsComponent_SHSlidingDoorAnimationEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHSlidingDoorAnimationsComponent_SHSlidingDoorAnimationEvent__DelegateSignature");
static_assert(sizeof(SHSlidingDoorAnimationsComponent_SHSlidingDoorAnimationEvent__DelegateSignature) == 0x000008, "Wrong size on SHSlidingDoorAnimationsComponent_SHSlidingDoorAnimationEvent__DelegateSignature");
static_assert(offsetof(SHSlidingDoorAnimationsComponent_SHSlidingDoorAnimationEvent__DelegateSignature, Component) == 0x000000, "Member 'SHSlidingDoorAnimationsComponent_SHSlidingDoorAnimationEvent__DelegateSignature::Component' has a wrong offset!");

// DelegateFunction SHProto.SHSlidingDoorAnimationsComponent.SHSlidingDoorAnimationEventBP__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHSlidingDoorAnimationsComponent_SHSlidingDoorAnimationEventBP__DelegateSignature final
{
public:
	class USHSlidingDoorAnimationsComponent*      Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSlidingDoorAnimationsComponent_SHSlidingDoorAnimationEventBP__DelegateSignature) == 0x000008, "Wrong alignment on SHSlidingDoorAnimationsComponent_SHSlidingDoorAnimationEventBP__DelegateSignature");
static_assert(sizeof(SHSlidingDoorAnimationsComponent_SHSlidingDoorAnimationEventBP__DelegateSignature) == 0x000008, "Wrong size on SHSlidingDoorAnimationsComponent_SHSlidingDoorAnimationEventBP__DelegateSignature");
static_assert(offsetof(SHSlidingDoorAnimationsComponent_SHSlidingDoorAnimationEventBP__DelegateSignature, Component) == 0x000000, "Member 'SHSlidingDoorAnimationsComponent_SHSlidingDoorAnimationEventBP__DelegateSignature::Component' has a wrong offset!");

// Function SHProto.SHSlidingDoorMovementComponent.OverrideDoorAlpha
// 0x0004 (0x0004 - 0x0000)
struct SHSlidingDoorMovementComponent_OverrideDoorAlpha final
{
public:
	float                                         InDoorAlpha;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSlidingDoorMovementComponent_OverrideDoorAlpha) == 0x000004, "Wrong alignment on SHSlidingDoorMovementComponent_OverrideDoorAlpha");
static_assert(sizeof(SHSlidingDoorMovementComponent_OverrideDoorAlpha) == 0x000004, "Wrong size on SHSlidingDoorMovementComponent_OverrideDoorAlpha");
static_assert(offsetof(SHSlidingDoorMovementComponent_OverrideDoorAlpha, InDoorAlpha) == 0x000000, "Member 'SHSlidingDoorMovementComponent_OverrideDoorAlpha::InDoorAlpha' has a wrong offset!");

// Function SHProto.SHSlidingDoorMovementComponent.RequestPlayCurveMovement
// 0x0010 (0x0010 - 0x0000)
struct SHSlidingDoorMovementComponent_RequestPlayCurveMovement final
{
public:
	class UCurveFloat*                            InCurve;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHSlidingDoorMovementComponent_RequestPlayCurveMovement) == 0x000008, "Wrong alignment on SHSlidingDoorMovementComponent_RequestPlayCurveMovement");
static_assert(sizeof(SHSlidingDoorMovementComponent_RequestPlayCurveMovement) == 0x000010, "Wrong size on SHSlidingDoorMovementComponent_RequestPlayCurveMovement");
static_assert(offsetof(SHSlidingDoorMovementComponent_RequestPlayCurveMovement, InCurve) == 0x000000, "Member 'SHSlidingDoorMovementComponent_RequestPlayCurveMovement::InCurve' has a wrong offset!");
static_assert(offsetof(SHSlidingDoorMovementComponent_RequestPlayCurveMovement, ReturnValue) == 0x000008, "Member 'SHSlidingDoorMovementComponent_RequestPlayCurveMovement::ReturnValue' has a wrong offset!");

// Function SHProto.SHSlidingDoorMovementComponent.RequestPlayDefaultOpenMovement
// 0x0001 (0x0001 - 0x0000)
struct SHSlidingDoorMovementComponent_RequestPlayDefaultOpenMovement final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSlidingDoorMovementComponent_RequestPlayDefaultOpenMovement) == 0x000001, "Wrong alignment on SHSlidingDoorMovementComponent_RequestPlayDefaultOpenMovement");
static_assert(sizeof(SHSlidingDoorMovementComponent_RequestPlayDefaultOpenMovement) == 0x000001, "Wrong size on SHSlidingDoorMovementComponent_RequestPlayDefaultOpenMovement");
static_assert(offsetof(SHSlidingDoorMovementComponent_RequestPlayDefaultOpenMovement, ReturnValue) == 0x000000, "Member 'SHSlidingDoorMovementComponent_RequestPlayDefaultOpenMovement::ReturnValue' has a wrong offset!");

// DelegateFunction SHProto.SHSlidingDoorMovementComponent.SHSlidingDoorMovementEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHSlidingDoorMovementComponent_SHSlidingDoorMovementEvent__DelegateSignature final
{
public:
	class USHSlidingDoorMovementComponent*        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSlidingDoorMovementComponent_SHSlidingDoorMovementEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHSlidingDoorMovementComponent_SHSlidingDoorMovementEvent__DelegateSignature");
static_assert(sizeof(SHSlidingDoorMovementComponent_SHSlidingDoorMovementEvent__DelegateSignature) == 0x000008, "Wrong size on SHSlidingDoorMovementComponent_SHSlidingDoorMovementEvent__DelegateSignature");
static_assert(offsetof(SHSlidingDoorMovementComponent_SHSlidingDoorMovementEvent__DelegateSignature, Component) == 0x000000, "Member 'SHSlidingDoorMovementComponent_SHSlidingDoorMovementEvent__DelegateSignature::Component' has a wrong offset!");

// DelegateFunction SHProto.SHSlidingDoorMovementComponent.SHSlidingDoorMovementEventBP__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHSlidingDoorMovementComponent_SHSlidingDoorMovementEventBP__DelegateSignature final
{
public:
	class USHSlidingDoorMovementComponent*        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHSlidingDoorMovementComponent_SHSlidingDoorMovementEventBP__DelegateSignature) == 0x000008, "Wrong alignment on SHSlidingDoorMovementComponent_SHSlidingDoorMovementEventBP__DelegateSignature");
static_assert(sizeof(SHSlidingDoorMovementComponent_SHSlidingDoorMovementEventBP__DelegateSignature) == 0x000008, "Wrong size on SHSlidingDoorMovementComponent_SHSlidingDoorMovementEventBP__DelegateSignature");
static_assert(offsetof(SHSlidingDoorMovementComponent_SHSlidingDoorMovementEventBP__DelegateSignature, Component) == 0x000000, "Member 'SHSlidingDoorMovementComponent_SHSlidingDoorMovementEventBP__DelegateSignature::Component' has a wrong offset!");

// Function SHProto.SHStealthModeCmbSubcomp.SetAllowStealthModeWhenBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHStealthModeCmbSubcomp_SetAllowStealthModeWhenBlocked final
{
public:
	bool                                          Allow;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHStealthModeCmbSubcomp_SetAllowStealthModeWhenBlocked) == 0x000008, "Wrong alignment on SHStealthModeCmbSubcomp_SetAllowStealthModeWhenBlocked");
static_assert(sizeof(SHStealthModeCmbSubcomp_SetAllowStealthModeWhenBlocked) == 0x000010, "Wrong size on SHStealthModeCmbSubcomp_SetAllowStealthModeWhenBlocked");
static_assert(offsetof(SHStealthModeCmbSubcomp_SetAllowStealthModeWhenBlocked, Allow) == 0x000000, "Member 'SHStealthModeCmbSubcomp_SetAllowStealthModeWhenBlocked::Allow' has a wrong offset!");
static_assert(offsetof(SHStealthModeCmbSubcomp_SetAllowStealthModeWhenBlocked, Object) == 0x000008, "Member 'SHStealthModeCmbSubcomp_SetAllowStealthModeWhenBlocked::Object' has a wrong offset!");

// Function SHProto.SHStealthModeCmbSubcomp.SetStealthModeBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHStealthModeCmbSubcomp_SetStealthModeBlocked final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHStealthModeCmbSubcomp_SetStealthModeBlocked) == 0x000008, "Wrong alignment on SHStealthModeCmbSubcomp_SetStealthModeBlocked");
static_assert(sizeof(SHStealthModeCmbSubcomp_SetStealthModeBlocked) == 0x000010, "Wrong size on SHStealthModeCmbSubcomp_SetStealthModeBlocked");
static_assert(offsetof(SHStealthModeCmbSubcomp_SetStealthModeBlocked, Blocked) == 0x000000, "Member 'SHStealthModeCmbSubcomp_SetStealthModeBlocked::Blocked' has a wrong offset!");
static_assert(offsetof(SHStealthModeCmbSubcomp_SetStealthModeBlocked, Object) == 0x000008, "Member 'SHStealthModeCmbSubcomp_SetStealthModeBlocked::Object' has a wrong offset!");

// Function SHProto.SHStealthModeCmbSubcomp.IsInStealthMode
// 0x0001 (0x0001 - 0x0000)
struct SHStealthModeCmbSubcomp_IsInStealthMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHStealthModeCmbSubcomp_IsInStealthMode) == 0x000001, "Wrong alignment on SHStealthModeCmbSubcomp_IsInStealthMode");
static_assert(sizeof(SHStealthModeCmbSubcomp_IsInStealthMode) == 0x000001, "Wrong size on SHStealthModeCmbSubcomp_IsInStealthMode");
static_assert(offsetof(SHStealthModeCmbSubcomp_IsInStealthMode, ReturnValue) == 0x000000, "Member 'SHStealthModeCmbSubcomp_IsInStealthMode::ReturnValue' has a wrong offset!");

// Function SHProto.SHStealthModeCmbSubcomp.IsStealthModeBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHStealthModeCmbSubcomp_IsStealthModeBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHStealthModeCmbSubcomp_IsStealthModeBlocked) == 0x000001, "Wrong alignment on SHStealthModeCmbSubcomp_IsStealthModeBlocked");
static_assert(sizeof(SHStealthModeCmbSubcomp_IsStealthModeBlocked) == 0x000001, "Wrong size on SHStealthModeCmbSubcomp_IsStealthModeBlocked");
static_assert(offsetof(SHStealthModeCmbSubcomp_IsStealthModeBlocked, ReturnValue) == 0x000000, "Member 'SHStealthModeCmbSubcomp_IsStealthModeBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHStealthModeCmbSubcomp.IsStealthModeWhenBlockedAllowed
// 0x0001 (0x0001 - 0x0000)
struct SHStealthModeCmbSubcomp_IsStealthModeWhenBlockedAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHStealthModeCmbSubcomp_IsStealthModeWhenBlockedAllowed) == 0x000001, "Wrong alignment on SHStealthModeCmbSubcomp_IsStealthModeWhenBlockedAllowed");
static_assert(sizeof(SHStealthModeCmbSubcomp_IsStealthModeWhenBlockedAllowed) == 0x000001, "Wrong size on SHStealthModeCmbSubcomp_IsStealthModeWhenBlockedAllowed");
static_assert(offsetof(SHStealthModeCmbSubcomp_IsStealthModeWhenBlockedAllowed, ReturnValue) == 0x000000, "Member 'SHStealthModeCmbSubcomp_IsStealthModeWhenBlockedAllowed::ReturnValue' has a wrong offset!");

// Function SHProto.SHStompedDeadEnemiesEndingValueProcessor.ProcessDeadEnemyDamaged
// 0x0010 (0x0010 - 0x0000)
struct SHStompedDeadEnemiesEndingValueProcessor_ProcessDeadEnemyDamaged final
{
public:
	class ASHItemWeaponMelee*                     MeleeWeapon;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamagedActorContext;                               // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHStompedDeadEnemiesEndingValueProcessor_ProcessDeadEnemyDamaged) == 0x000008, "Wrong alignment on SHStompedDeadEnemiesEndingValueProcessor_ProcessDeadEnemyDamaged");
static_assert(sizeof(SHStompedDeadEnemiesEndingValueProcessor_ProcessDeadEnemyDamaged) == 0x000010, "Wrong size on SHStompedDeadEnemiesEndingValueProcessor_ProcessDeadEnemyDamaged");
static_assert(offsetof(SHStompedDeadEnemiesEndingValueProcessor_ProcessDeadEnemyDamaged, MeleeWeapon) == 0x000000, "Member 'SHStompedDeadEnemiesEndingValueProcessor_ProcessDeadEnemyDamaged::MeleeWeapon' has a wrong offset!");
static_assert(offsetof(SHStompedDeadEnemiesEndingValueProcessor_ProcessDeadEnemyDamaged, DamagedActorContext) == 0x000008, "Member 'SHStompedDeadEnemiesEndingValueProcessor_ProcessDeadEnemyDamaged::DamagedActorContext' has a wrong offset!");

// Function SHProto.SHStompedDeadEnemiesEndingValueProcessor.ProcessPrimaryAttackStarted
// 0x0010 (0x0010 - 0x0000)
struct SHStompedDeadEnemiesEndingValueProcessor_ProcessPrimaryAttackStarted final
{
public:
	class USHMeleeCmbSubcomp*                     MeleeCombat;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHItemWeapon*                          ItemWeaponContext;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHStompedDeadEnemiesEndingValueProcessor_ProcessPrimaryAttackStarted) == 0x000008, "Wrong alignment on SHStompedDeadEnemiesEndingValueProcessor_ProcessPrimaryAttackStarted");
static_assert(sizeof(SHStompedDeadEnemiesEndingValueProcessor_ProcessPrimaryAttackStarted) == 0x000010, "Wrong size on SHStompedDeadEnemiesEndingValueProcessor_ProcessPrimaryAttackStarted");
static_assert(offsetof(SHStompedDeadEnemiesEndingValueProcessor_ProcessPrimaryAttackStarted, MeleeCombat) == 0x000000, "Member 'SHStompedDeadEnemiesEndingValueProcessor_ProcessPrimaryAttackStarted::MeleeCombat' has a wrong offset!");
static_assert(offsetof(SHStompedDeadEnemiesEndingValueProcessor_ProcessPrimaryAttackStarted, ItemWeaponContext) == 0x000008, "Member 'SHStompedDeadEnemiesEndingValueProcessor_ProcessPrimaryAttackStarted::ItemWeaponContext' has a wrong offset!");

// Function SHProto.SHStressCmbSubcomp.ProcessRangedFireSuccess
// 0x0010 (0x0010 - 0x0000)
struct SHStressCmbSubcomp_ProcessRangedFireSuccess final
{
public:
	class USHRangedCmbSubcomp*                    RangedCombatSubcomponent;                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHItemWeapon*                          ItemWeaponContext;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHStressCmbSubcomp_ProcessRangedFireSuccess) == 0x000008, "Wrong alignment on SHStressCmbSubcomp_ProcessRangedFireSuccess");
static_assert(sizeof(SHStressCmbSubcomp_ProcessRangedFireSuccess) == 0x000010, "Wrong size on SHStressCmbSubcomp_ProcessRangedFireSuccess");
static_assert(offsetof(SHStressCmbSubcomp_ProcessRangedFireSuccess, RangedCombatSubcomponent) == 0x000000, "Member 'SHStressCmbSubcomp_ProcessRangedFireSuccess::RangedCombatSubcomponent' has a wrong offset!");
static_assert(offsetof(SHStressCmbSubcomp_ProcessRangedFireSuccess, ItemWeaponContext) == 0x000008, "Member 'SHStressCmbSubcomp_ProcessRangedFireSuccess::ItemWeaponContext' has a wrong offset!");

// Function SHProto.SHSwarmVolume.SetColorShape
// 0x000C (0x000C - 0x0000)
struct SHSwarmVolume_SetColorShape final
{
public:
	struct FColor                                 ShapeColor;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Opacity;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisplayShadedVolume;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHSwarmVolume_SetColorShape) == 0x000004, "Wrong alignment on SHSwarmVolume_SetColorShape");
static_assert(sizeof(SHSwarmVolume_SetColorShape) == 0x00000C, "Wrong size on SHSwarmVolume_SetColorShape");
static_assert(offsetof(SHSwarmVolume_SetColorShape, ShapeColor) == 0x000000, "Member 'SHSwarmVolume_SetColorShape::ShapeColor' has a wrong offset!");
static_assert(offsetof(SHSwarmVolume_SetColorShape, Opacity) == 0x000004, "Member 'SHSwarmVolume_SetColorShape::Opacity' has a wrong offset!");
static_assert(offsetof(SHSwarmVolume_SetColorShape, DisplayShadedVolume) == 0x000008, "Member 'SHSwarmVolume_SetColorShape::DisplayShadedVolume' has a wrong offset!");

// Function SHProto.SHSwarmVolume.IsPointWithin
// 0x0020 (0x0020 - 0x0000)
struct SHSwarmVolume_IsPointWithin final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHSwarmVolume_IsPointWithin) == 0x000008, "Wrong alignment on SHSwarmVolume_IsPointWithin");
static_assert(sizeof(SHSwarmVolume_IsPointWithin) == 0x000020, "Wrong size on SHSwarmVolume_IsPointWithin");
static_assert(offsetof(SHSwarmVolume_IsPointWithin, Point) == 0x000000, "Member 'SHSwarmVolume_IsPointWithin::Point' has a wrong offset!");
static_assert(offsetof(SHSwarmVolume_IsPointWithin, ReturnValue) == 0x000018, "Member 'SHSwarmVolume_IsPointWithin::ReturnValue' has a wrong offset!");

// Function SHProto.SHTraceHelperStatics.K2_ComplexCapsuleTraceByChannel
// 0x01B0 (0x01B0 - 0x0000)
struct SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel final
{
public:
	struct FHitResult                             OutHitResult;                                      // 0x0000(0x00E8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRotator                               OutHitRotation;                                    // 0x00E8(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         OutHitCapsuleHalfHeight;                           // 0x0100(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutHitCapsuleHeightScalar;                         // 0x0104(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                InWorldContext;                                    // 0x0108(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCapsuleRadius;                                   // 0x0110(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCapsuleFromHalfHeight;                           // 0x0114(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCapsuleToHalfHeight;                             // 0x0118(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InFromLocation;                                    // 0x0120(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InToLocation;                                      // 0x0138(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InFromRotation;                                    // 0x0150(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               InDeltaRotation;                                   // 0x0168(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InRotationPrecisionAngle;                          // 0x0180(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTraceDensity;                                    // 0x0184(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTopTraceHeightScalar;                            // 0x0188(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBottomTraceHeightScalar;                         // 0x018C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCollisionPullbackTime;                           // 0x0190(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               InTraceChannel;                                    // 0x0194(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InTraceComplex;                                    // 0x0195(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_196[0x2];                                      // 0x0196(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         InActorsToIgnore;                                  // 0x0198(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         InDrawDebugDuration;                               // 0x01A8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01AC(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AD[0x3];                                      // 0x01AD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel) == 0x000008, "Wrong alignment on SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel");
static_assert(sizeof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel) == 0x0001B0, "Wrong size on SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel, OutHitResult) == 0x000000, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel::OutHitResult' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel, OutHitRotation) == 0x0000E8, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel::OutHitRotation' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel, OutHitCapsuleHalfHeight) == 0x000100, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel::OutHitCapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel, OutHitCapsuleHeightScalar) == 0x000104, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel::OutHitCapsuleHeightScalar' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel, InWorldContext) == 0x000108, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel::InWorldContext' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel, InCapsuleRadius) == 0x000110, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel::InCapsuleRadius' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel, InCapsuleFromHalfHeight) == 0x000114, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel::InCapsuleFromHalfHeight' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel, InCapsuleToHalfHeight) == 0x000118, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel::InCapsuleToHalfHeight' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel, InFromLocation) == 0x000120, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel::InFromLocation' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel, InToLocation) == 0x000138, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel::InToLocation' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel, InFromRotation) == 0x000150, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel::InFromRotation' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel, InDeltaRotation) == 0x000168, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel::InDeltaRotation' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel, InRotationPrecisionAngle) == 0x000180, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel::InRotationPrecisionAngle' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel, InTraceDensity) == 0x000184, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel::InTraceDensity' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel, InTopTraceHeightScalar) == 0x000188, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel::InTopTraceHeightScalar' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel, InBottomTraceHeightScalar) == 0x00018C, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel::InBottomTraceHeightScalar' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel, InCollisionPullbackTime) == 0x000190, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel::InCollisionPullbackTime' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel, InTraceChannel) == 0x000194, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel::InTraceChannel' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel, InTraceComplex) == 0x000195, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel::InTraceComplex' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel, InActorsToIgnore) == 0x000198, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel::InActorsToIgnore' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel, InDrawDebugDuration) == 0x0001A8, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel::InDrawDebugDuration' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel, ReturnValue) == 0x0001AC, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByChannel::ReturnValue' has a wrong offset!");

// Function SHProto.SHTraceHelperStatics.K2_ComplexCapsuleTraceByComponent
// 0x0180 (0x0180 - 0x0000)
struct SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent final
{
public:
	struct FHitResult                             OutHitResult;                                      // 0x0000(0x00E8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRotator                               OutHitRotation;                                    // 0x00E8(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         OutHitCapsuleHalfHeight;                           // 0x0100(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutHitCapsuleHeightScalar;                         // 0x0104(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCapsuleComponent*                      InCapsuleComponent;                                // 0x0108(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCapsuleRadiusIncrease;                           // 0x0110(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCapsuleHalfHeightIncrease;                       // 0x0114(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCapsuleToHalfHeight;                             // 0x0118(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InToLocation;                                      // 0x0120(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InToDeltaRotation;                                 // 0x0138(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InRotationPrecisionAngle;                          // 0x0150(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTraceDensity;                                    // 0x0154(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTopTraceHeightScalar;                            // 0x0158(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBottomTraceHeightScalar;                         // 0x015C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCollisionPullbackTime;                           // 0x0160(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InTraceComplex;                                    // 0x0164(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_165[0x3];                                      // 0x0165(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         InActorsToIgnore;                                  // 0x0168(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         InDrawDebugDuration;                               // 0x0178(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x017C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17D[0x3];                                      // 0x017D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent) == 0x000008, "Wrong alignment on SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent");
static_assert(sizeof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent) == 0x000180, "Wrong size on SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent, OutHitResult) == 0x000000, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent::OutHitResult' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent, OutHitRotation) == 0x0000E8, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent::OutHitRotation' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent, OutHitCapsuleHalfHeight) == 0x000100, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent::OutHitCapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent, OutHitCapsuleHeightScalar) == 0x000104, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent::OutHitCapsuleHeightScalar' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent, InCapsuleComponent) == 0x000108, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent::InCapsuleComponent' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent, InCapsuleRadiusIncrease) == 0x000110, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent::InCapsuleRadiusIncrease' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent, InCapsuleHalfHeightIncrease) == 0x000114, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent::InCapsuleHalfHeightIncrease' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent, InCapsuleToHalfHeight) == 0x000118, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent::InCapsuleToHalfHeight' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent, InToLocation) == 0x000120, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent::InToLocation' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent, InToDeltaRotation) == 0x000138, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent::InToDeltaRotation' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent, InRotationPrecisionAngle) == 0x000150, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent::InRotationPrecisionAngle' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent, InTraceDensity) == 0x000154, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent::InTraceDensity' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent, InTopTraceHeightScalar) == 0x000158, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent::InTopTraceHeightScalar' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent, InBottomTraceHeightScalar) == 0x00015C, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent::InBottomTraceHeightScalar' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent, InCollisionPullbackTime) == 0x000160, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent::InCollisionPullbackTime' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent, InTraceComplex) == 0x000164, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent::InTraceComplex' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent, InActorsToIgnore) == 0x000168, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent::InActorsToIgnore' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent, InDrawDebugDuration) == 0x000178, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent::InDrawDebugDuration' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent, ReturnValue) == 0x00017C, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByComponent::ReturnValue' has a wrong offset!");

// Function SHProto.SHTraceHelperStatics.K2_ComplexCapsuleTraceByProfile
// 0x01B8 (0x01B8 - 0x0000)
struct SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile final
{
public:
	struct FHitResult                             OutHitResult;                                      // 0x0000(0x00E8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRotator                               OutHitRotation;                                    // 0x00E8(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         OutHitCapsuleHalfHeight;                           // 0x0100(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutHitCapsuleHeightScalar;                         // 0x0104(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                InWorldContext;                                    // 0x0108(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCapsuleRadius;                                   // 0x0110(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCapsuleFromHalfHeight;                           // 0x0114(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCapsuleToHalfHeight;                             // 0x0118(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InFromLocation;                                    // 0x0120(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InToLocation;                                      // 0x0138(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InFromRotation;                                    // 0x0150(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               InDeltaRotation;                                   // 0x0168(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InRotationPrecisionAngle;                          // 0x0180(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTraceDensity;                                    // 0x0184(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTopTraceHeightScalar;                            // 0x0188(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBottomTraceHeightScalar;                         // 0x018C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCollisionPullbackTime;                           // 0x0190(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InCollisionProfileName;                            // 0x0194(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InTraceComplex;                                    // 0x019C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D[0x3];                                      // 0x019D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         InActorsToIgnore;                                  // 0x01A0(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         InDrawDebugDuration;                               // 0x01B0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01B4(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B5[0x3];                                      // 0x01B5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile) == 0x000008, "Wrong alignment on SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile");
static_assert(sizeof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile) == 0x0001B8, "Wrong size on SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile, OutHitResult) == 0x000000, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile::OutHitResult' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile, OutHitRotation) == 0x0000E8, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile::OutHitRotation' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile, OutHitCapsuleHalfHeight) == 0x000100, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile::OutHitCapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile, OutHitCapsuleHeightScalar) == 0x000104, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile::OutHitCapsuleHeightScalar' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile, InWorldContext) == 0x000108, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile::InWorldContext' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile, InCapsuleRadius) == 0x000110, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile::InCapsuleRadius' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile, InCapsuleFromHalfHeight) == 0x000114, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile::InCapsuleFromHalfHeight' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile, InCapsuleToHalfHeight) == 0x000118, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile::InCapsuleToHalfHeight' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile, InFromLocation) == 0x000120, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile::InFromLocation' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile, InToLocation) == 0x000138, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile::InToLocation' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile, InFromRotation) == 0x000150, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile::InFromRotation' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile, InDeltaRotation) == 0x000168, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile::InDeltaRotation' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile, InRotationPrecisionAngle) == 0x000180, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile::InRotationPrecisionAngle' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile, InTraceDensity) == 0x000184, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile::InTraceDensity' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile, InTopTraceHeightScalar) == 0x000188, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile::InTopTraceHeightScalar' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile, InBottomTraceHeightScalar) == 0x00018C, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile::InBottomTraceHeightScalar' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile, InCollisionPullbackTime) == 0x000190, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile::InCollisionPullbackTime' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile, InCollisionProfileName) == 0x000194, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile::InCollisionProfileName' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile, InTraceComplex) == 0x00019C, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile::InTraceComplex' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile, InActorsToIgnore) == 0x0001A0, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile::InActorsToIgnore' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile, InDrawDebugDuration) == 0x0001B0, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile::InDrawDebugDuration' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile, ReturnValue) == 0x0001B4, "Member 'SHTraceHelperStatics_K2_ComplexCapsuleTraceByProfile::ReturnValue' has a wrong offset!");

// Function SHProto.SHTraceHelperStatics.K2_RotateCapsuleOutOfCollisionByChannel
// 0x01B0 (0x01B0 - 0x0000)
struct SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel final
{
public:
	struct FHitResult                             OutHitResult;                                      // 0x0000(0x00E8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                OutLocation;                                       // 0x00E8(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OutRotation;                                       // 0x0100(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                InWorldContext;                                    // 0x0118(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCapsuleRadius;                                   // 0x0120(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCapsuleHalfHeight;                               // 0x0124(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRotationAnchorHeightScalar;                      // 0x0128(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InLocation;                                        // 0x0130(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x0148(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              InPullbackRotationMinimumAngles;                   // 0x0160(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InPullbackRotationMaximumAngles;                   // 0x0170(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRotationPrecisionAngle;                          // 0x0180(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InSnapBackToCollision;                             // 0x0184(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_185[0x3];                                      // 0x0185(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InTraceDensity;                                    // 0x0188(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTopTraceHeightScalar;                            // 0x018C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBottomTraceHeightScalar;                         // 0x0190(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               InTraceChannel;                                    // 0x0194(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InTraceComplex;                                    // 0x0195(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_196[0x2];                                      // 0x0196(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         InActorsToIgnore;                                  // 0x0198(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         InDrawDebugDuration;                               // 0x01A8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01AC(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AD[0x3];                                      // 0x01AD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel) == 0x000008, "Wrong alignment on SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel");
static_assert(sizeof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel) == 0x0001B0, "Wrong size on SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel, OutHitResult) == 0x000000, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel::OutHitResult' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel, OutLocation) == 0x0000E8, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel::OutLocation' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel, OutRotation) == 0x000100, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel::OutRotation' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel, InWorldContext) == 0x000118, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel::InWorldContext' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel, InCapsuleRadius) == 0x000120, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel::InCapsuleRadius' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel, InCapsuleHalfHeight) == 0x000124, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel::InCapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel, InRotationAnchorHeightScalar) == 0x000128, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel::InRotationAnchorHeightScalar' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel, InLocation) == 0x000130, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel::InLocation' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel, InRotation) == 0x000148, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel::InRotation' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel, InPullbackRotationMinimumAngles) == 0x000160, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel::InPullbackRotationMinimumAngles' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel, InPullbackRotationMaximumAngles) == 0x000170, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel::InPullbackRotationMaximumAngles' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel, InRotationPrecisionAngle) == 0x000180, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel::InRotationPrecisionAngle' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel, InSnapBackToCollision) == 0x000184, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel::InSnapBackToCollision' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel, InTraceDensity) == 0x000188, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel::InTraceDensity' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel, InTopTraceHeightScalar) == 0x00018C, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel::InTopTraceHeightScalar' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel, InBottomTraceHeightScalar) == 0x000190, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel::InBottomTraceHeightScalar' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel, InTraceChannel) == 0x000194, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel::InTraceChannel' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel, InTraceComplex) == 0x000195, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel::InTraceComplex' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel, InActorsToIgnore) == 0x000198, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel::InActorsToIgnore' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel, InDrawDebugDuration) == 0x0001A8, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel::InDrawDebugDuration' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel, ReturnValue) == 0x0001AC, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByChannel::ReturnValue' has a wrong offset!");

// Function SHProto.SHTraceHelperStatics.K2_RotateCapsuleOutOfCollisionByComponent
// 0x0180 (0x0180 - 0x0000)
struct SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent final
{
public:
	struct FHitResult                             OutHitResult;                                      // 0x0000(0x00E8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                OutLocation;                                       // 0x00E8(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OutRotation;                                       // 0x0100(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UCapsuleComponent*                      InCapsuleComponent;                                // 0x0118(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCapsuleRadiusIncrease;                           // 0x0120(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCapsuleHalfHeightIncrease;                       // 0x0124(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRotationAnchorHeightScalar;                      // 0x0128(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              InPullbackRotationMinimumAngles;                   // 0x0130(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InPullbackRotationMaximumAngles;                   // 0x0140(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRotationPrecisionAngle;                          // 0x0150(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InSnapBackToCollision;                             // 0x0154(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_155[0x3];                                      // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InTraceDensity;                                    // 0x0158(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTopTraceHeightScalar;                            // 0x015C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBottomTraceHeightScalar;                         // 0x0160(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InTraceComplex;                                    // 0x0164(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_165[0x3];                                      // 0x0165(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         InActorsToIgnore;                                  // 0x0168(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         InDrawDebugDuration;                               // 0x0178(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x017C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17D[0x3];                                      // 0x017D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent) == 0x000008, "Wrong alignment on SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent");
static_assert(sizeof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent) == 0x000180, "Wrong size on SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent, OutHitResult) == 0x000000, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent::OutHitResult' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent, OutLocation) == 0x0000E8, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent::OutLocation' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent, OutRotation) == 0x000100, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent::OutRotation' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent, InCapsuleComponent) == 0x000118, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent::InCapsuleComponent' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent, InCapsuleRadiusIncrease) == 0x000120, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent::InCapsuleRadiusIncrease' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent, InCapsuleHalfHeightIncrease) == 0x000124, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent::InCapsuleHalfHeightIncrease' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent, InRotationAnchorHeightScalar) == 0x000128, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent::InRotationAnchorHeightScalar' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent, InPullbackRotationMinimumAngles) == 0x000130, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent::InPullbackRotationMinimumAngles' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent, InPullbackRotationMaximumAngles) == 0x000140, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent::InPullbackRotationMaximumAngles' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent, InRotationPrecisionAngle) == 0x000150, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent::InRotationPrecisionAngle' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent, InSnapBackToCollision) == 0x000154, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent::InSnapBackToCollision' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent, InTraceDensity) == 0x000158, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent::InTraceDensity' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent, InTopTraceHeightScalar) == 0x00015C, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent::InTopTraceHeightScalar' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent, InBottomTraceHeightScalar) == 0x000160, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent::InBottomTraceHeightScalar' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent, InTraceComplex) == 0x000164, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent::InTraceComplex' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent, InActorsToIgnore) == 0x000168, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent::InActorsToIgnore' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent, InDrawDebugDuration) == 0x000178, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent::InDrawDebugDuration' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent, ReturnValue) == 0x00017C, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByComponent::ReturnValue' has a wrong offset!");

// Function SHProto.SHTraceHelperStatics.K2_RotateCapsuleOutOfCollisionByProfile
// 0x01B8 (0x01B8 - 0x0000)
struct SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile final
{
public:
	struct FHitResult                             OutHitResult;                                      // 0x0000(0x00E8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                OutLocation;                                       // 0x00E8(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OutRotation;                                       // 0x0100(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                InWorldContext;                                    // 0x0118(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCapsuleRadius;                                   // 0x0120(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCapsuleHalfHeight;                               // 0x0124(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRotationAnchorHeightScalar;                      // 0x0128(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InLocation;                                        // 0x0130(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x0148(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              InPullbackRotationMinimumAngles;                   // 0x0160(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InPullbackRotationMaximumAngles;                   // 0x0170(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRotationPrecisionAngle;                          // 0x0180(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InSnapBackToCollision;                             // 0x0184(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_185[0x3];                                      // 0x0185(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InTraceDensity;                                    // 0x0188(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTopTraceHeightScalar;                            // 0x018C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBottomTraceHeightScalar;                         // 0x0190(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InCollisionProfileName;                            // 0x0194(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InTraceComplex;                                    // 0x019C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D[0x3];                                      // 0x019D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         InActorsToIgnore;                                  // 0x01A0(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         InDrawDebugDuration;                               // 0x01B0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01B4(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B5[0x3];                                      // 0x01B5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile) == 0x000008, "Wrong alignment on SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile");
static_assert(sizeof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile) == 0x0001B8, "Wrong size on SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile, OutHitResult) == 0x000000, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile::OutHitResult' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile, OutLocation) == 0x0000E8, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile::OutLocation' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile, OutRotation) == 0x000100, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile::OutRotation' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile, InWorldContext) == 0x000118, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile::InWorldContext' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile, InCapsuleRadius) == 0x000120, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile::InCapsuleRadius' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile, InCapsuleHalfHeight) == 0x000124, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile::InCapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile, InRotationAnchorHeightScalar) == 0x000128, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile::InRotationAnchorHeightScalar' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile, InLocation) == 0x000130, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile::InLocation' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile, InRotation) == 0x000148, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile::InRotation' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile, InPullbackRotationMinimumAngles) == 0x000160, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile::InPullbackRotationMinimumAngles' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile, InPullbackRotationMaximumAngles) == 0x000170, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile::InPullbackRotationMaximumAngles' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile, InRotationPrecisionAngle) == 0x000180, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile::InRotationPrecisionAngle' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile, InSnapBackToCollision) == 0x000184, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile::InSnapBackToCollision' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile, InTraceDensity) == 0x000188, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile::InTraceDensity' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile, InTopTraceHeightScalar) == 0x00018C, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile::InTopTraceHeightScalar' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile, InBottomTraceHeightScalar) == 0x000190, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile::InBottomTraceHeightScalar' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile, InCollisionProfileName) == 0x000194, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile::InCollisionProfileName' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile, InTraceComplex) == 0x00019C, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile::InTraceComplex' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile, InActorsToIgnore) == 0x0001A0, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile::InActorsToIgnore' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile, InDrawDebugDuration) == 0x0001B0, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile::InDrawDebugDuration' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile, ReturnValue) == 0x0001B4, "Member 'SHTraceHelperStatics_K2_RotateCapsuleOutOfCollisionByProfile::ReturnValue' has a wrong offset!");

// Function SHProto.SHTraceHelperStatics.K2_TraceSphereAlongCapsuleByChannel
// 0x0160 (0x0160 - 0x0000)
struct SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel final
{
public:
	struct FHitResult                             OutHitResult;                                      // 0x0000(0x00E8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         OutSignedCollisionDistanceScalar;                  // 0x00E8(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                InWorldContext;                                    // 0x00F0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x00F8(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  InRotation;                                        // 0x0110(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCapsuleRadius;                                   // 0x0130(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCapsuleHalfHeight;                               // 0x0134(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCapsuleAnchorHeightScalar;                       // 0x0138(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTopTraceHeightScalar;                            // 0x013C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBottomTraceHeightScalar;                         // 0x0140(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               InTraceChannel;                                    // 0x0144(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InTraceComplex;                                    // 0x0145(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_146[0x2];                                      // 0x0146(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         InActorsToIgnore;                                  // 0x0148(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         InDrawDebugDuration;                               // 0x0158(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x015C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15D[0x3];                                      // 0x015D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel) == 0x000010, "Wrong alignment on SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel");
static_assert(sizeof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel) == 0x000160, "Wrong size on SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel, OutHitResult) == 0x000000, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel::OutHitResult' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel, OutSignedCollisionDistanceScalar) == 0x0000E8, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel::OutSignedCollisionDistanceScalar' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel, InWorldContext) == 0x0000F0, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel::InWorldContext' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel, InLocation) == 0x0000F8, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel::InLocation' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel, InRotation) == 0x000110, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel::InRotation' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel, InCapsuleRadius) == 0x000130, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel::InCapsuleRadius' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel, InCapsuleHalfHeight) == 0x000134, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel::InCapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel, InCapsuleAnchorHeightScalar) == 0x000138, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel::InCapsuleAnchorHeightScalar' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel, InTopTraceHeightScalar) == 0x00013C, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel::InTopTraceHeightScalar' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel, InBottomTraceHeightScalar) == 0x000140, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel::InBottomTraceHeightScalar' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel, InTraceChannel) == 0x000144, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel::InTraceChannel' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel, InTraceComplex) == 0x000145, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel::InTraceComplex' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel, InActorsToIgnore) == 0x000148, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel::InActorsToIgnore' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel, InDrawDebugDuration) == 0x000158, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel::InDrawDebugDuration' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel, ReturnValue) == 0x00015C, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByChannel::ReturnValue' has a wrong offset!");

// Function SHProto.SHTraceHelperStatics.K2_TraceSphereAlongCapsuleByComponent
// 0x0128 (0x0128 - 0x0000)
struct SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByComponent final
{
public:
	struct FHitResult                             OutHitResult;                                      // 0x0000(0x00E8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         OutSignedCollisionDistanceScalar;                  // 0x00E8(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCapsuleComponent*                      InCapsuleComponent;                                // 0x00F0(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCapsuleRadiusIncrease;                           // 0x00F8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCapsuleHalfHeightIncrease;                       // 0x00FC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCapsuleAnchorHeightScalar;                       // 0x0100(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTopTraceHeightScalar;                            // 0x0104(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBottomTraceHeightScalar;                         // 0x0108(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               InTraceChannel;                                    // 0x010C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InTraceComplex;                                    // 0x010D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10E[0x2];                                      // 0x010E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         InActorsToIgnore;                                  // 0x0110(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         InDrawDebugDuration;                               // 0x0120(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0124(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByComponent) == 0x000008, "Wrong alignment on SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByComponent");
static_assert(sizeof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByComponent) == 0x000128, "Wrong size on SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByComponent");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByComponent, OutHitResult) == 0x000000, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByComponent::OutHitResult' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByComponent, OutSignedCollisionDistanceScalar) == 0x0000E8, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByComponent::OutSignedCollisionDistanceScalar' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByComponent, InCapsuleComponent) == 0x0000F0, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByComponent::InCapsuleComponent' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByComponent, InCapsuleRadiusIncrease) == 0x0000F8, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByComponent::InCapsuleRadiusIncrease' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByComponent, InCapsuleHalfHeightIncrease) == 0x0000FC, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByComponent::InCapsuleHalfHeightIncrease' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByComponent, InCapsuleAnchorHeightScalar) == 0x000100, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByComponent::InCapsuleAnchorHeightScalar' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByComponent, InTopTraceHeightScalar) == 0x000104, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByComponent::InTopTraceHeightScalar' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByComponent, InBottomTraceHeightScalar) == 0x000108, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByComponent::InBottomTraceHeightScalar' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByComponent, InTraceChannel) == 0x00010C, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByComponent::InTraceChannel' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByComponent, InTraceComplex) == 0x00010D, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByComponent::InTraceComplex' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByComponent, InActorsToIgnore) == 0x000110, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByComponent::InActorsToIgnore' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByComponent, InDrawDebugDuration) == 0x000120, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByComponent::InDrawDebugDuration' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByComponent, ReturnValue) == 0x000124, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByComponent::ReturnValue' has a wrong offset!");

// Function SHProto.SHTraceHelperStatics.K2_TraceSphereAlongCapsuleByProfile
// 0x0170 (0x0170 - 0x0000)
struct SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile final
{
public:
	struct FHitResult                             OutHitResult;                                      // 0x0000(0x00E8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         OutSignedCollisionDistanceScalar;                  // 0x00E8(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                InWorldContext;                                    // 0x00F0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x00F8(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  InRotation;                                        // 0x0110(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCapsuleRadius;                                   // 0x0130(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCapsuleHalfHeight;                               // 0x0134(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCapsuleAnchorHeightScalar;                       // 0x0138(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTopTraceHeightScalar;                            // 0x013C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBottomTraceHeightScalar;                         // 0x0140(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InCollisionProfileName;                            // 0x0144(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InTraceComplex;                                    // 0x014C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14D[0x3];                                      // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         InActorsToIgnore;                                  // 0x0150(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         InDrawDebugDuration;                               // 0x0160(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0164(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_165[0xB];                                      // 0x0165(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile) == 0x000010, "Wrong alignment on SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile");
static_assert(sizeof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile) == 0x000170, "Wrong size on SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile, OutHitResult) == 0x000000, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile::OutHitResult' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile, OutSignedCollisionDistanceScalar) == 0x0000E8, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile::OutSignedCollisionDistanceScalar' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile, InWorldContext) == 0x0000F0, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile::InWorldContext' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile, InLocation) == 0x0000F8, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile::InLocation' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile, InRotation) == 0x000110, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile::InRotation' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile, InCapsuleRadius) == 0x000130, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile::InCapsuleRadius' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile, InCapsuleHalfHeight) == 0x000134, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile::InCapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile, InCapsuleAnchorHeightScalar) == 0x000138, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile::InCapsuleAnchorHeightScalar' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile, InTopTraceHeightScalar) == 0x00013C, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile::InTopTraceHeightScalar' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile, InBottomTraceHeightScalar) == 0x000140, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile::InBottomTraceHeightScalar' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile, InCollisionProfileName) == 0x000144, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile::InCollisionProfileName' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile, InTraceComplex) == 0x00014C, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile::InTraceComplex' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile, InActorsToIgnore) == 0x000150, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile::InActorsToIgnore' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile, InDrawDebugDuration) == 0x000160, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile::InDrawDebugDuration' has a wrong offset!");
static_assert(offsetof(SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile, ReturnValue) == 0x000164, "Member 'SHTraceHelperStatics_K2_TraceSphereAlongCapsuleByProfile::ReturnValue' has a wrong offset!");

// Function SHProto.SHTraversalClimbAnimInstance.IsOnLowerFloor
// 0x0001 (0x0001 - 0x0000)
struct SHTraversalClimbAnimInstance_IsOnLowerFloor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalClimbAnimInstance_IsOnLowerFloor) == 0x000001, "Wrong alignment on SHTraversalClimbAnimInstance_IsOnLowerFloor");
static_assert(sizeof(SHTraversalClimbAnimInstance_IsOnLowerFloor) == 0x000001, "Wrong size on SHTraversalClimbAnimInstance_IsOnLowerFloor");
static_assert(offsetof(SHTraversalClimbAnimInstance_IsOnLowerFloor, ReturnValue) == 0x000000, "Member 'SHTraversalClimbAnimInstance_IsOnLowerFloor::ReturnValue' has a wrong offset!");

// Function SHProto.SHTraversalIconBaseManager.ProcessObstacleProximityFoundCharacterEvent
// 0x0008 (0x0008 - 0x0000)
struct SHTraversalIconBaseManager_ProcessObstacleProximityFoundCharacterEvent final
{
public:
	class USHTraversalBaseComponent*              InTraversalComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalIconBaseManager_ProcessObstacleProximityFoundCharacterEvent) == 0x000008, "Wrong alignment on SHTraversalIconBaseManager_ProcessObstacleProximityFoundCharacterEvent");
static_assert(sizeof(SHTraversalIconBaseManager_ProcessObstacleProximityFoundCharacterEvent) == 0x000008, "Wrong size on SHTraversalIconBaseManager_ProcessObstacleProximityFoundCharacterEvent");
static_assert(offsetof(SHTraversalIconBaseManager_ProcessObstacleProximityFoundCharacterEvent, InTraversalComponent) == 0x000000, "Member 'SHTraversalIconBaseManager_ProcessObstacleProximityFoundCharacterEvent::InTraversalComponent' has a wrong offset!");

// Function SHProto.SHTraversalIconBaseManager.ProcessObstacleProximityLostCharacterEvent
// 0x0008 (0x0008 - 0x0000)
struct SHTraversalIconBaseManager_ProcessObstacleProximityLostCharacterEvent final
{
public:
	class USHTraversalBaseComponent*              InTraversalComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalIconBaseManager_ProcessObstacleProximityLostCharacterEvent) == 0x000008, "Wrong alignment on SHTraversalIconBaseManager_ProcessObstacleProximityLostCharacterEvent");
static_assert(sizeof(SHTraversalIconBaseManager_ProcessObstacleProximityLostCharacterEvent) == 0x000008, "Wrong size on SHTraversalIconBaseManager_ProcessObstacleProximityLostCharacterEvent");
static_assert(offsetof(SHTraversalIconBaseManager_ProcessObstacleProximityLostCharacterEvent, InTraversalComponent) == 0x000000, "Member 'SHTraversalIconBaseManager_ProcessObstacleProximityLostCharacterEvent::InTraversalComponent' has a wrong offset!");

// Function SHProto.SHTraversalIconBaseManager.ProcessObstacleTraversalUnavailableChangedEvent
// 0x0008 (0x0008 - 0x0000)
struct SHTraversalIconBaseManager_ProcessObstacleTraversalUnavailableChangedEvent final
{
public:
	class USHTraversalBaseComponent*              InTraversalComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalIconBaseManager_ProcessObstacleTraversalUnavailableChangedEvent) == 0x000008, "Wrong alignment on SHTraversalIconBaseManager_ProcessObstacleTraversalUnavailableChangedEvent");
static_assert(sizeof(SHTraversalIconBaseManager_ProcessObstacleTraversalUnavailableChangedEvent) == 0x000008, "Wrong size on SHTraversalIconBaseManager_ProcessObstacleTraversalUnavailableChangedEvent");
static_assert(offsetof(SHTraversalIconBaseManager_ProcessObstacleTraversalUnavailableChangedEvent, InTraversalComponent) == 0x000000, "Member 'SHTraversalIconBaseManager_ProcessObstacleTraversalUnavailableChangedEvent::InTraversalComponent' has a wrong offset!");

// Function SHProto.SHTraversalIconBaseManager.RegisterRequisites
// 0x0010 (0x0010 - 0x0000)
struct SHTraversalIconBaseManager_RegisterRequisites final
{
public:
	class USHTraversalBaseComponent*              InTraversalComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USHInteractionIconComponent*            InIconComponent;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalIconBaseManager_RegisterRequisites) == 0x000008, "Wrong alignment on SHTraversalIconBaseManager_RegisterRequisites");
static_assert(sizeof(SHTraversalIconBaseManager_RegisterRequisites) == 0x000010, "Wrong size on SHTraversalIconBaseManager_RegisterRequisites");
static_assert(offsetof(SHTraversalIconBaseManager_RegisterRequisites, InTraversalComponent) == 0x000000, "Member 'SHTraversalIconBaseManager_RegisterRequisites::InTraversalComponent' has a wrong offset!");
static_assert(offsetof(SHTraversalIconBaseManager_RegisterRequisites, InIconComponent) == 0x000008, "Member 'SHTraversalIconBaseManager_RegisterRequisites::InIconComponent' has a wrong offset!");

// Function SHProto.SHTraversalIconBaseManager.SetForcedIconState
// 0x0001 (0x0001 - 0x0000)
struct SHTraversalIconBaseManager_SetForcedIconState final
{
public:
	ESHInteractionIconState                       InForcedState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalIconBaseManager_SetForcedIconState) == 0x000001, "Wrong alignment on SHTraversalIconBaseManager_SetForcedIconState");
static_assert(sizeof(SHTraversalIconBaseManager_SetForcedIconState) == 0x000001, "Wrong size on SHTraversalIconBaseManager_SetForcedIconState");
static_assert(offsetof(SHTraversalIconBaseManager_SetForcedIconState, InForcedState) == 0x000000, "Member 'SHTraversalIconBaseManager_SetForcedIconState::InForcedState' has a wrong offset!");

// Function SHProto.SHTraversalCustomObstacle.Initialize
// 0x0010 (0x0010 - 0x0000)
struct SHTraversalCustomObstacle_Initialize final
{
public:
	TArray<class USplineComponent*>               InEdgeSplines;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalCustomObstacle_Initialize) == 0x000008, "Wrong alignment on SHTraversalCustomObstacle_Initialize");
static_assert(sizeof(SHTraversalCustomObstacle_Initialize) == 0x000010, "Wrong size on SHTraversalCustomObstacle_Initialize");
static_assert(offsetof(SHTraversalCustomObstacle_Initialize, InEdgeSplines) == 0x000000, "Member 'SHTraversalCustomObstacle_Initialize::InEdgeSplines' has a wrong offset!");

// Function SHProto.SHTraversalObstacleComponent.AddFriendActor
// 0x0008 (0x0008 - 0x0000)
struct SHTraversalObstacleComponent_AddFriendActor final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalObstacleComponent_AddFriendActor) == 0x000008, "Wrong alignment on SHTraversalObstacleComponent_AddFriendActor");
static_assert(sizeof(SHTraversalObstacleComponent_AddFriendActor) == 0x000008, "Wrong size on SHTraversalObstacleComponent_AddFriendActor");
static_assert(offsetof(SHTraversalObstacleComponent_AddFriendActor, InActor) == 0x000000, "Member 'SHTraversalObstacleComponent_AddFriendActor::InActor' has a wrong offset!");

// Function SHProto.SHTraversalObstacleComponent.ProcessTraversalAnimBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct SHTraversalObstacleComponent_ProcessTraversalAnimBlendingOut final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHAnimEndType                                AnimEndType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHTraversalObstacleComponent_ProcessTraversalAnimBlendingOut) == 0x000008, "Wrong alignment on SHTraversalObstacleComponent_ProcessTraversalAnimBlendingOut");
static_assert(sizeof(SHTraversalObstacleComponent_ProcessTraversalAnimBlendingOut) == 0x000010, "Wrong size on SHTraversalObstacleComponent_ProcessTraversalAnimBlendingOut");
static_assert(offsetof(SHTraversalObstacleComponent_ProcessTraversalAnimBlendingOut, Montage) == 0x000000, "Member 'SHTraversalObstacleComponent_ProcessTraversalAnimBlendingOut::Montage' has a wrong offset!");
static_assert(offsetof(SHTraversalObstacleComponent_ProcessTraversalAnimBlendingOut, AnimEndType) == 0x000008, "Member 'SHTraversalObstacleComponent_ProcessTraversalAnimBlendingOut::AnimEndType' has a wrong offset!");

// Function SHProto.SHTraversalObstacleComponent.ProcessTraversalAnimEnd
// 0x0010 (0x0010 - 0x0000)
struct SHTraversalObstacleComponent_ProcessTraversalAnimEnd final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHAnimEndType                                AnimEndType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHTraversalObstacleComponent_ProcessTraversalAnimEnd) == 0x000008, "Wrong alignment on SHTraversalObstacleComponent_ProcessTraversalAnimEnd");
static_assert(sizeof(SHTraversalObstacleComponent_ProcessTraversalAnimEnd) == 0x000010, "Wrong size on SHTraversalObstacleComponent_ProcessTraversalAnimEnd");
static_assert(offsetof(SHTraversalObstacleComponent_ProcessTraversalAnimEnd, Montage) == 0x000000, "Member 'SHTraversalObstacleComponent_ProcessTraversalAnimEnd::Montage' has a wrong offset!");
static_assert(offsetof(SHTraversalObstacleComponent_ProcessTraversalAnimEnd, AnimEndType) == 0x000008, "Member 'SHTraversalObstacleComponent_ProcessTraversalAnimEnd::AnimEndType' has a wrong offset!");

// Function SHProto.SHTraversalObstacleComponent.RegisterAboveFlashlightLookAtComponent
// 0x0008 (0x0008 - 0x0000)
struct SHTraversalObstacleComponent_RegisterAboveFlashlightLookAtComponent final
{
public:
	class USceneComponent*                        InLookAtComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalObstacleComponent_RegisterAboveFlashlightLookAtComponent) == 0x000008, "Wrong alignment on SHTraversalObstacleComponent_RegisterAboveFlashlightLookAtComponent");
static_assert(sizeof(SHTraversalObstacleComponent_RegisterAboveFlashlightLookAtComponent) == 0x000008, "Wrong size on SHTraversalObstacleComponent_RegisterAboveFlashlightLookAtComponent");
static_assert(offsetof(SHTraversalObstacleComponent_RegisterAboveFlashlightLookAtComponent, InLookAtComponent) == 0x000000, "Member 'SHTraversalObstacleComponent_RegisterAboveFlashlightLookAtComponent::InLookAtComponent' has a wrong offset!");

// Function SHProto.SHTraversalObstacleComponent.RegisterBelowFlashlightLookAtComponent
// 0x0008 (0x0008 - 0x0000)
struct SHTraversalObstacleComponent_RegisterBelowFlashlightLookAtComponent final
{
public:
	class USceneComponent*                        InLookAtComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalObstacleComponent_RegisterBelowFlashlightLookAtComponent) == 0x000008, "Wrong alignment on SHTraversalObstacleComponent_RegisterBelowFlashlightLookAtComponent");
static_assert(sizeof(SHTraversalObstacleComponent_RegisterBelowFlashlightLookAtComponent) == 0x000008, "Wrong size on SHTraversalObstacleComponent_RegisterBelowFlashlightLookAtComponent");
static_assert(offsetof(SHTraversalObstacleComponent_RegisterBelowFlashlightLookAtComponent, InLookAtComponent) == 0x000000, "Member 'SHTraversalObstacleComponent_RegisterBelowFlashlightLookAtComponent::InLookAtComponent' has a wrong offset!");

// Function SHProto.SHTraversalObstacleComponent.RemoveFriendActor
// 0x0008 (0x0008 - 0x0000)
struct SHTraversalObstacleComponent_RemoveFriendActor final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalObstacleComponent_RemoveFriendActor) == 0x000008, "Wrong alignment on SHTraversalObstacleComponent_RemoveFriendActor");
static_assert(sizeof(SHTraversalObstacleComponent_RemoveFriendActor) == 0x000008, "Wrong size on SHTraversalObstacleComponent_RemoveFriendActor");
static_assert(offsetof(SHTraversalObstacleComponent_RemoveFriendActor, InActor) == 0x000000, "Member 'SHTraversalObstacleComponent_RemoveFriendActor::InActor' has a wrong offset!");

// DelegateFunction SHProto.SHTraversalObstacleComponent.SHObstacleComponentEvent__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct SHTraversalObstacleComponent_SHObstacleComponentEvent__DelegateSignature final
{
public:
	ESHDetectionSide                              DetectionSide;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalObstacleComponent_SHObstacleComponentEvent__DelegateSignature) == 0x000001, "Wrong alignment on SHTraversalObstacleComponent_SHObstacleComponentEvent__DelegateSignature");
static_assert(sizeof(SHTraversalObstacleComponent_SHObstacleComponentEvent__DelegateSignature) == 0x000001, "Wrong size on SHTraversalObstacleComponent_SHObstacleComponentEvent__DelegateSignature");
static_assert(offsetof(SHTraversalObstacleComponent_SHObstacleComponentEvent__DelegateSignature, DetectionSide) == 0x000000, "Member 'SHTraversalObstacleComponent_SHObstacleComponentEvent__DelegateSignature::DetectionSide' has a wrong offset!");

// DelegateFunction SHProto.SHTraversalObstacleComponent.SHObstacleEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHTraversalObstacleComponent_SHObstacleEvent__DelegateSignature final
{
public:
	class USHTraversalObstacleComponent*          ComponentPtr;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalObstacleComponent_SHObstacleEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHTraversalObstacleComponent_SHObstacleEvent__DelegateSignature");
static_assert(sizeof(SHTraversalObstacleComponent_SHObstacleEvent__DelegateSignature) == 0x000008, "Wrong size on SHTraversalObstacleComponent_SHObstacleEvent__DelegateSignature");
static_assert(offsetof(SHTraversalObstacleComponent_SHObstacleEvent__DelegateSignature, ComponentPtr) == 0x000000, "Member 'SHTraversalObstacleComponent_SHObstacleEvent__DelegateSignature::ComponentPtr' has a wrong offset!");

// DelegateFunction SHProto.SHTraversalObstacleComponent.SHObstacleWithCameraAnimExeEvent__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct SHTraversalObstacleComponent_SHObstacleWithCameraAnimExeEvent__DelegateSignature final
{
public:
	class USHTraversalObstacleComponent*          ComponentPtr;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASHCameraAnimationExecutive*            CameraAnimExe;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalObstacleComponent_SHObstacleWithCameraAnimExeEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHTraversalObstacleComponent_SHObstacleWithCameraAnimExeEvent__DelegateSignature");
static_assert(sizeof(SHTraversalObstacleComponent_SHObstacleWithCameraAnimExeEvent__DelegateSignature) == 0x000010, "Wrong size on SHTraversalObstacleComponent_SHObstacleWithCameraAnimExeEvent__DelegateSignature");
static_assert(offsetof(SHTraversalObstacleComponent_SHObstacleWithCameraAnimExeEvent__DelegateSignature, ComponentPtr) == 0x000000, "Member 'SHTraversalObstacleComponent_SHObstacleWithCameraAnimExeEvent__DelegateSignature::ComponentPtr' has a wrong offset!");
static_assert(offsetof(SHTraversalObstacleComponent_SHObstacleWithCameraAnimExeEvent__DelegateSignature, CameraAnimExe) == 0x000008, "Member 'SHTraversalObstacleComponent_SHObstacleWithCameraAnimExeEvent__DelegateSignature::CameraAnimExe' has a wrong offset!");

// DelegateFunction SHProto.SHTraversalObstacleComponent.SHObstacleWithSideEvent__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct SHTraversalObstacleComponent_SHObstacleWithSideEvent__DelegateSignature final
{
public:
	class USHTraversalObstacleComponent*          ComponentPtr;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHDetectionSide                              DetectionSide;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHTraversalObstacleComponent_SHObstacleWithSideEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHTraversalObstacleComponent_SHObstacleWithSideEvent__DelegateSignature");
static_assert(sizeof(SHTraversalObstacleComponent_SHObstacleWithSideEvent__DelegateSignature) == 0x000010, "Wrong size on SHTraversalObstacleComponent_SHObstacleWithSideEvent__DelegateSignature");
static_assert(offsetof(SHTraversalObstacleComponent_SHObstacleWithSideEvent__DelegateSignature, ComponentPtr) == 0x000000, "Member 'SHTraversalObstacleComponent_SHObstacleWithSideEvent__DelegateSignature::ComponentPtr' has a wrong offset!");
static_assert(offsetof(SHTraversalObstacleComponent_SHObstacleWithSideEvent__DelegateSignature, DetectionSide) == 0x000008, "Member 'SHTraversalObstacleComponent_SHObstacleWithSideEvent__DelegateSignature::DetectionSide' has a wrong offset!");

// Function SHProto.SHTraversalObstacleExtendedComponent.ProcessMovementSnapFinish
// 0x0001 (0x0001 - 0x0000)
struct SHTraversalObstacleExtendedComponent_ProcessMovementSnapFinish final
{
public:
	bool                                          bWasCompleted;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalObstacleExtendedComponent_ProcessMovementSnapFinish) == 0x000001, "Wrong alignment on SHTraversalObstacleExtendedComponent_ProcessMovementSnapFinish");
static_assert(sizeof(SHTraversalObstacleExtendedComponent_ProcessMovementSnapFinish) == 0x000001, "Wrong size on SHTraversalObstacleExtendedComponent_ProcessMovementSnapFinish");
static_assert(offsetof(SHTraversalObstacleExtendedComponent_ProcessMovementSnapFinish, bWasCompleted) == 0x000000, "Member 'SHTraversalObstacleExtendedComponent_ProcessMovementSnapFinish::bWasCompleted' has a wrong offset!");

// Function SHProto.SHTraversalObstacleExtendedComponent.ProcessTraversalAnimBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct SHTraversalObstacleExtendedComponent_ProcessTraversalAnimBlendingOut final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHAnimEndType                                AnimEndType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHTraversalObstacleExtendedComponent_ProcessTraversalAnimBlendingOut) == 0x000008, "Wrong alignment on SHTraversalObstacleExtendedComponent_ProcessTraversalAnimBlendingOut");
static_assert(sizeof(SHTraversalObstacleExtendedComponent_ProcessTraversalAnimBlendingOut) == 0x000010, "Wrong size on SHTraversalObstacleExtendedComponent_ProcessTraversalAnimBlendingOut");
static_assert(offsetof(SHTraversalObstacleExtendedComponent_ProcessTraversalAnimBlendingOut, Montage) == 0x000000, "Member 'SHTraversalObstacleExtendedComponent_ProcessTraversalAnimBlendingOut::Montage' has a wrong offset!");
static_assert(offsetof(SHTraversalObstacleExtendedComponent_ProcessTraversalAnimBlendingOut, AnimEndType) == 0x000008, "Member 'SHTraversalObstacleExtendedComponent_ProcessTraversalAnimBlendingOut::AnimEndType' has a wrong offset!");

// Function SHProto.SHTraversalObstacleExtendedComponent.ProcesTraversalAnimEnd
// 0x0010 (0x0010 - 0x0000)
struct SHTraversalObstacleExtendedComponent_ProcesTraversalAnimEnd final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESHAnimEndType                                AnimEndType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHTraversalObstacleExtendedComponent_ProcesTraversalAnimEnd) == 0x000008, "Wrong alignment on SHTraversalObstacleExtendedComponent_ProcesTraversalAnimEnd");
static_assert(sizeof(SHTraversalObstacleExtendedComponent_ProcesTraversalAnimEnd) == 0x000010, "Wrong size on SHTraversalObstacleExtendedComponent_ProcesTraversalAnimEnd");
static_assert(offsetof(SHTraversalObstacleExtendedComponent_ProcesTraversalAnimEnd, Montage) == 0x000000, "Member 'SHTraversalObstacleExtendedComponent_ProcesTraversalAnimEnd::Montage' has a wrong offset!");
static_assert(offsetof(SHTraversalObstacleExtendedComponent_ProcesTraversalAnimEnd, AnimEndType) == 0x000008, "Member 'SHTraversalObstacleExtendedComponent_ProcesTraversalAnimEnd::AnimEndType' has a wrong offset!");

// DelegateFunction SHProto.SHTraversalObstacleExtendedComponent.SHObstacleExtendedEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHTraversalObstacleExtendedComponent_SHObstacleExtendedEvent__DelegateSignature final
{
public:
	class USHTraversalObstacleExtendedComponent*  ComponentPtr;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalObstacleExtendedComponent_SHObstacleExtendedEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHTraversalObstacleExtendedComponent_SHObstacleExtendedEvent__DelegateSignature");
static_assert(sizeof(SHTraversalObstacleExtendedComponent_SHObstacleExtendedEvent__DelegateSignature) == 0x000008, "Wrong size on SHTraversalObstacleExtendedComponent_SHObstacleExtendedEvent__DelegateSignature");
static_assert(offsetof(SHTraversalObstacleExtendedComponent_SHObstacleExtendedEvent__DelegateSignature, ComponentPtr) == 0x000000, "Member 'SHTraversalObstacleExtendedComponent_SHObstacleExtendedEvent__DelegateSignature::ComponentPtr' has a wrong offset!");

// Function SHProto.SHTraversalObstacleExtendedComponent.GetCurrentStage
// 0x0001 (0x0001 - 0x0000)
struct SHTraversalObstacleExtendedComponent_GetCurrentStage final
{
public:
	ESHTraversalObstacleExtendedStage             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHTraversalObstacleExtendedComponent_GetCurrentStage) == 0x000001, "Wrong alignment on SHTraversalObstacleExtendedComponent_GetCurrentStage");
static_assert(sizeof(SHTraversalObstacleExtendedComponent_GetCurrentStage) == 0x000001, "Wrong size on SHTraversalObstacleExtendedComponent_GetCurrentStage");
static_assert(offsetof(SHTraversalObstacleExtendedComponent_GetCurrentStage, ReturnValue) == 0x000000, "Member 'SHTraversalObstacleExtendedComponent_GetCurrentStage::ReturnValue' has a wrong offset!");

// Function SHProto.SHUfoEndingFactor.SHDebug_Character_Endings_Factors_UFOEnding_SetDebugValue
// 0x0004 (0x0004 - 0x0000)
struct SHUfoEndingFactor_SHDebug_Character_Endings_Factors_UFOEnding_SetDebugValue final
{
public:
	int32                                         InInteractionIndex;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHUfoEndingFactor_SHDebug_Character_Endings_Factors_UFOEnding_SetDebugValue) == 0x000004, "Wrong alignment on SHUfoEndingFactor_SHDebug_Character_Endings_Factors_UFOEnding_SetDebugValue");
static_assert(sizeof(SHUfoEndingFactor_SHDebug_Character_Endings_Factors_UFOEnding_SetDebugValue) == 0x000004, "Wrong size on SHUfoEndingFactor_SHDebug_Character_Endings_Factors_UFOEnding_SetDebugValue");
static_assert(offsetof(SHUfoEndingFactor_SHDebug_Character_Endings_Factors_UFOEnding_SetDebugValue, InInteractionIndex) == 0x000000, "Member 'SHUfoEndingFactor_SHDebug_Character_Endings_Factors_UFOEnding_SetDebugValue::InInteractionIndex' has a wrong offset!");

// Function SHProto.SHUfoEndingInteractionArea.IsCompleted
// 0x0001 (0x0001 - 0x0000)
struct SHUfoEndingInteractionArea_IsCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHUfoEndingInteractionArea_IsCompleted) == 0x000001, "Wrong alignment on SHUfoEndingInteractionArea_IsCompleted");
static_assert(sizeof(SHUfoEndingInteractionArea_IsCompleted) == 0x000001, "Wrong size on SHUfoEndingInteractionArea_IsCompleted");
static_assert(offsetof(SHUfoEndingInteractionArea_IsCompleted, ReturnValue) == 0x000000, "Member 'SHUfoEndingInteractionArea_IsCompleted::ReturnValue' has a wrong offset!");

// Function SHProto.SHUfoEndingInteractionArea.SetEnabled
// 0x0010 (0x0010 - 0x0000)
struct SHUfoEndingInteractionArea_SetEnabled final
{
public:
	const class UObject*                          Enabler;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InEnabled;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHUfoEndingInteractionArea_SetEnabled) == 0x000008, "Wrong alignment on SHUfoEndingInteractionArea_SetEnabled");
static_assert(sizeof(SHUfoEndingInteractionArea_SetEnabled) == 0x000010, "Wrong size on SHUfoEndingInteractionArea_SetEnabled");
static_assert(offsetof(SHUfoEndingInteractionArea_SetEnabled, Enabler) == 0x000000, "Member 'SHUfoEndingInteractionArea_SetEnabled::Enabler' has a wrong offset!");
static_assert(offsetof(SHUfoEndingInteractionArea_SetEnabled, InEnabled) == 0x000008, "Member 'SHUfoEndingInteractionArea_SetEnabled::InEnabled' has a wrong offset!");

// Function SHProto.SHUserButton.BP_OnLockedChanged
// 0x0001 (0x0001 - 0x0000)
struct SHUserButton_BP_OnLockedChanged final
{
public:
	bool                                          bIsLocked;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHUserButton_BP_OnLockedChanged) == 0x000001, "Wrong alignment on SHUserButton_BP_OnLockedChanged");
static_assert(sizeof(SHUserButton_BP_OnLockedChanged) == 0x000001, "Wrong size on SHUserButton_BP_OnLockedChanged");
static_assert(offsetof(SHUserButton_BP_OnLockedChanged, bIsLocked) == 0x000000, "Member 'SHUserButton_BP_OnLockedChanged::bIsLocked' has a wrong offset!");

// Function SHProto.SHUserButton.SetDisplayName
// 0x0018 (0x0018 - 0x0000)
struct SHUserButton_SetDisplayName final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHUserButton_SetDisplayName) == 0x000008, "Wrong alignment on SHUserButton_SetDisplayName");
static_assert(sizeof(SHUserButton_SetDisplayName) == 0x000018, "Wrong size on SHUserButton_SetDisplayName");
static_assert(offsetof(SHUserButton_SetDisplayName, Text) == 0x000000, "Member 'SHUserButton_SetDisplayName::Text' has a wrong offset!");

// Function SHProto.SHUserButton.SetLocked
// 0x0001 (0x0001 - 0x0000)
struct SHUserButton_SetLocked final
{
public:
	bool                                          bInIsLocked;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHUserButton_SetLocked) == 0x000001, "Wrong alignment on SHUserButton_SetLocked");
static_assert(sizeof(SHUserButton_SetLocked) == 0x000001, "Wrong size on SHUserButton_SetLocked");
static_assert(offsetof(SHUserButton_SetLocked, bInIsLocked) == 0x000000, "Member 'SHUserButton_SetLocked::bInIsLocked' has a wrong offset!");

// Function SHProto.SHUserButton.IsLocked
// 0x0001 (0x0001 - 0x0000)
struct SHUserButton_IsLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHUserButton_IsLocked) == 0x000001, "Wrong alignment on SHUserButton_IsLocked");
static_assert(sizeof(SHUserButton_IsLocked) == 0x000001, "Wrong size on SHUserButton_IsLocked");
static_assert(offsetof(SHUserButton_IsLocked, ReturnValue) == 0x000000, "Member 'SHUserButton_IsLocked::ReturnValue' has a wrong offset!");

// DelegateFunction SHProto.SHValveAnimInstance.SHValveAnimInstanceEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHValveAnimInstance_SHValveAnimInstanceEvent__DelegateSignature final
{
public:
	class USHValveAnimInstance*                   AnimInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHValveAnimInstance_SHValveAnimInstanceEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHValveAnimInstance_SHValveAnimInstanceEvent__DelegateSignature");
static_assert(sizeof(SHValveAnimInstance_SHValveAnimInstanceEvent__DelegateSignature) == 0x000008, "Wrong size on SHValveAnimInstance_SHValveAnimInstanceEvent__DelegateSignature");
static_assert(offsetof(SHValveAnimInstance_SHValveAnimInstanceEvent__DelegateSignature, AnimInst) == 0x000000, "Member 'SHValveAnimInstance_SHValveAnimInstanceEvent__DelegateSignature::AnimInst' has a wrong offset!");

// DelegateFunction SHProto.SHValveAnimInstance.SHValveAnimInstanceProgressPhaseChangeEvent__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct SHValveAnimInstance_SHValveAnimInstanceProgressPhaseChangeEvent__DelegateSignature final
{
public:
	class USHValveAnimInstance*                   AnimInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhaseNumber;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasStarted;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHValveAnimInstance_SHValveAnimInstanceProgressPhaseChangeEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHValveAnimInstance_SHValveAnimInstanceProgressPhaseChangeEvent__DelegateSignature");
static_assert(sizeof(SHValveAnimInstance_SHValveAnimInstanceProgressPhaseChangeEvent__DelegateSignature) == 0x000010, "Wrong size on SHValveAnimInstance_SHValveAnimInstanceProgressPhaseChangeEvent__DelegateSignature");
static_assert(offsetof(SHValveAnimInstance_SHValveAnimInstanceProgressPhaseChangeEvent__DelegateSignature, AnimInst) == 0x000000, "Member 'SHValveAnimInstance_SHValveAnimInstanceProgressPhaseChangeEvent__DelegateSignature::AnimInst' has a wrong offset!");
static_assert(offsetof(SHValveAnimInstance_SHValveAnimInstanceProgressPhaseChangeEvent__DelegateSignature, PhaseNumber) == 0x000008, "Member 'SHValveAnimInstance_SHValveAnimInstanceProgressPhaseChangeEvent__DelegateSignature::PhaseNumber' has a wrong offset!");
static_assert(offsetof(SHValveAnimInstance_SHValveAnimInstanceProgressPhaseChangeEvent__DelegateSignature, bHasStarted) == 0x00000C, "Member 'SHValveAnimInstance_SHValveAnimInstanceProgressPhaseChangeEvent__DelegateSignature::bHasStarted' has a wrong offset!");

// Function SHProto.SHValveAnimInstance.CanReceiveInput
// 0x0001 (0x0001 - 0x0000)
struct SHValveAnimInstance_CanReceiveInput final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHValveAnimInstance_CanReceiveInput) == 0x000001, "Wrong alignment on SHValveAnimInstance_CanReceiveInput");
static_assert(sizeof(SHValveAnimInstance_CanReceiveInput) == 0x000001, "Wrong size on SHValveAnimInstance_CanReceiveInput");
static_assert(offsetof(SHValveAnimInstance_CanReceiveInput, ReturnValue) == 0x000000, "Member 'SHValveAnimInstance_CanReceiveInput::ReturnValue' has a wrong offset!");

// Function SHProto.SHValveWithRequiredItem.ProcessFocusableItemSelectedEvent
// 0x0008 (0x0008 - 0x0000)
struct SHValveWithRequiredItem_ProcessFocusableItemSelectedEvent final
{
public:
	class FName                                   InItemName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHValveWithRequiredItem_ProcessFocusableItemSelectedEvent) == 0x000004, "Wrong alignment on SHValveWithRequiredItem_ProcessFocusableItemSelectedEvent");
static_assert(sizeof(SHValveWithRequiredItem_ProcessFocusableItemSelectedEvent) == 0x000008, "Wrong size on SHValveWithRequiredItem_ProcessFocusableItemSelectedEvent");
static_assert(offsetof(SHValveWithRequiredItem_ProcessFocusableItemSelectedEvent, InItemName) == 0x000000, "Member 'SHValveWithRequiredItem_ProcessFocusableItemSelectedEvent::InItemName' has a wrong offset!");

// DelegateFunction SHProto.SHValveWithRequiredItem.ValveRequiredItemEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHValveWithRequiredItem_ValveRequiredItemEvent__DelegateSignature final
{
public:
	class ASHValveWithRequiredItem*               ValveWithRequiredItem;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHValveWithRequiredItem_ValveRequiredItemEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHValveWithRequiredItem_ValveRequiredItemEvent__DelegateSignature");
static_assert(sizeof(SHValveWithRequiredItem_ValveRequiredItemEvent__DelegateSignature) == 0x000008, "Wrong size on SHValveWithRequiredItem_ValveRequiredItemEvent__DelegateSignature");
static_assert(offsetof(SHValveWithRequiredItem_ValveRequiredItemEvent__DelegateSignature, ValveWithRequiredItem) == 0x000000, "Member 'SHValveWithRequiredItem_ValveRequiredItemEvent__DelegateSignature::ValveWithRequiredItem' has a wrong offset!");

// Function SHProto.SHValveWithRequiredItem.HasAddedRequiredItem
// 0x0001 (0x0001 - 0x0000)
struct SHValveWithRequiredItem_HasAddedRequiredItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHValveWithRequiredItem_HasAddedRequiredItem) == 0x000001, "Wrong alignment on SHValveWithRequiredItem_HasAddedRequiredItem");
static_assert(sizeof(SHValveWithRequiredItem_HasAddedRequiredItem) == 0x000001, "Wrong size on SHValveWithRequiredItem_HasAddedRequiredItem");
static_assert(offsetof(SHValveWithRequiredItem_HasAddedRequiredItem, ReturnValue) == 0x000000, "Member 'SHValveWithRequiredItem_HasAddedRequiredItem::ReturnValue' has a wrong offset!");

// Function SHProto.SHVehicleComponent.GetInInstant
// 0x0010 (0x0010 - 0x0000)
struct SHVehicleComponent_GetInInstant final
{
public:
	class ACharacter*                             InteractingCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USHVehicleSpotComponent*                PassengerSpot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHVehicleComponent_GetInInstant) == 0x000008, "Wrong alignment on SHVehicleComponent_GetInInstant");
static_assert(sizeof(SHVehicleComponent_GetInInstant) == 0x000010, "Wrong size on SHVehicleComponent_GetInInstant");
static_assert(offsetof(SHVehicleComponent_GetInInstant, InteractingCharacter) == 0x000000, "Member 'SHVehicleComponent_GetInInstant::InteractingCharacter' has a wrong offset!");
static_assert(offsetof(SHVehicleComponent_GetInInstant, PassengerSpot) == 0x000008, "Member 'SHVehicleComponent_GetInInstant::PassengerSpot' has a wrong offset!");

// Function SHProto.SHVehicleComponent.GetOutInstant
// 0x0008 (0x0008 - 0x0000)
struct SHVehicleComponent_GetOutInstant final
{
public:
	class ACharacter*                             InteractingCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHVehicleComponent_GetOutInstant) == 0x000008, "Wrong alignment on SHVehicleComponent_GetOutInstant");
static_assert(sizeof(SHVehicleComponent_GetOutInstant) == 0x000008, "Wrong size on SHVehicleComponent_GetOutInstant");
static_assert(offsetof(SHVehicleComponent_GetOutInstant, InteractingCharacter) == 0x000000, "Member 'SHVehicleComponent_GetOutInstant::InteractingCharacter' has a wrong offset!");

// DelegateFunction SHProto.SHVehicleComponent.SHVehicleEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SHVehicleComponent_SHVehicleEvent__DelegateSignature final
{
public:
	class USHVehicleComponent*                    VehiclePtr;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHVehicleComponent_SHVehicleEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHVehicleComponent_SHVehicleEvent__DelegateSignature");
static_assert(sizeof(SHVehicleComponent_SHVehicleEvent__DelegateSignature) == 0x000008, "Wrong size on SHVehicleComponent_SHVehicleEvent__DelegateSignature");
static_assert(offsetof(SHVehicleComponent_SHVehicleEvent__DelegateSignature, VehiclePtr) == 0x000000, "Member 'SHVehicleComponent_SHVehicleEvent__DelegateSignature::VehiclePtr' has a wrong offset!");

// DelegateFunction SHProto.SHVehicleComponent.SHVehicleSpotEvent__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct SHVehicleComponent_SHVehicleSpotEvent__DelegateSignature final
{
public:
	class USHVehicleComponent*                    VehiclePtr;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USHVehicleSpotComponent*                VehicleSpotPtr;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHVehicleComponent_SHVehicleSpotEvent__DelegateSignature) == 0x000008, "Wrong alignment on SHVehicleComponent_SHVehicleSpotEvent__DelegateSignature");
static_assert(sizeof(SHVehicleComponent_SHVehicleSpotEvent__DelegateSignature) == 0x000010, "Wrong size on SHVehicleComponent_SHVehicleSpotEvent__DelegateSignature");
static_assert(offsetof(SHVehicleComponent_SHVehicleSpotEvent__DelegateSignature, VehiclePtr) == 0x000000, "Member 'SHVehicleComponent_SHVehicleSpotEvent__DelegateSignature::VehiclePtr' has a wrong offset!");
static_assert(offsetof(SHVehicleComponent_SHVehicleSpotEvent__DelegateSignature, VehicleSpotPtr) == 0x000008, "Member 'SHVehicleComponent_SHVehicleSpotEvent__DelegateSignature::VehicleSpotPtr' has a wrong offset!");

// Function SHProto.SHVehicleComponent.TeleportVehicle
// 0x0030 (0x0030 - 0x0000)
struct SHVehicleComponent_TeleportVehicle final
{
public:
	struct FVector                                InWorldLoc;                                        // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InWorldRot;                                        // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHVehicleComponent_TeleportVehicle) == 0x000008, "Wrong alignment on SHVehicleComponent_TeleportVehicle");
static_assert(sizeof(SHVehicleComponent_TeleportVehicle) == 0x000030, "Wrong size on SHVehicleComponent_TeleportVehicle");
static_assert(offsetof(SHVehicleComponent_TeleportVehicle, InWorldLoc) == 0x000000, "Member 'SHVehicleComponent_TeleportVehicle::InWorldLoc' has a wrong offset!");
static_assert(offsetof(SHVehicleComponent_TeleportVehicle, InWorldRot) == 0x000018, "Member 'SHVehicleComponent_TeleportVehicle::InWorldRot' has a wrong offset!");

// Function SHProto.SHVehicleComponent.GetMovementProcessor
// 0x0008 (0x0008 - 0x0000)
struct SHVehicleComponent_GetMovementProcessor final
{
public:
	class USHVehicleMovementProcessor*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHVehicleComponent_GetMovementProcessor) == 0x000008, "Wrong alignment on SHVehicleComponent_GetMovementProcessor");
static_assert(sizeof(SHVehicleComponent_GetMovementProcessor) == 0x000008, "Wrong size on SHVehicleComponent_GetMovementProcessor");
static_assert(offsetof(SHVehicleComponent_GetMovementProcessor, ReturnValue) == 0x000000, "Member 'SHVehicleComponent_GetMovementProcessor::ReturnValue' has a wrong offset!");

// Function SHProto.SHVehicleSpotComponent.GetInteractingCharacter
// 0x0008 (0x0008 - 0x0000)
struct SHVehicleSpotComponent_GetInteractingCharacter final
{
public:
	class ACharacter*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHVehicleSpotComponent_GetInteractingCharacter) == 0x000008, "Wrong alignment on SHVehicleSpotComponent_GetInteractingCharacter");
static_assert(sizeof(SHVehicleSpotComponent_GetInteractingCharacter) == 0x000008, "Wrong size on SHVehicleSpotComponent_GetInteractingCharacter");
static_assert(offsetof(SHVehicleSpotComponent_GetInteractingCharacter, ReturnValue) == 0x000000, "Member 'SHVehicleSpotComponent_GetInteractingCharacter::ReturnValue' has a wrong offset!");

// Function SHProto.SHWaterInteractionComponent.AddSimpleWaterInteraction
// 0x0048 (0x0048 - 0x0000)
struct SHWaterInteractionComponent_AddSimpleWaterInteraction final
{
public:
	const class UObject*                          Requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSHXWaterIntersection                  InWaterIntersection;                               // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHWaterInteractionComponent_AddSimpleWaterInteraction) == 0x000008, "Wrong alignment on SHWaterInteractionComponent_AddSimpleWaterInteraction");
static_assert(sizeof(SHWaterInteractionComponent_AddSimpleWaterInteraction) == 0x000048, "Wrong size on SHWaterInteractionComponent_AddSimpleWaterInteraction");
static_assert(offsetof(SHWaterInteractionComponent_AddSimpleWaterInteraction, Requester) == 0x000000, "Member 'SHWaterInteractionComponent_AddSimpleWaterInteraction::Requester' has a wrong offset!");
static_assert(offsetof(SHWaterInteractionComponent_AddSimpleWaterInteraction, InWaterIntersection) == 0x000008, "Member 'SHWaterInteractionComponent_AddSimpleWaterInteraction::InWaterIntersection' has a wrong offset!");

// Function SHProto.SHWaterInteractionComponent.AddWaterInteraction
// 0x0040 (0x0040 - 0x0000)
struct SHWaterInteractionComponent_AddWaterInteraction final
{
public:
	struct FSHXWaterIntersection                  InWaterIntersection;                               // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHWaterInteractionComponent_AddWaterInteraction) == 0x000008, "Wrong alignment on SHWaterInteractionComponent_AddWaterInteraction");
static_assert(sizeof(SHWaterInteractionComponent_AddWaterInteraction) == 0x000040, "Wrong size on SHWaterInteractionComponent_AddWaterInteraction");
static_assert(offsetof(SHWaterInteractionComponent_AddWaterInteraction, InWaterIntersection) == 0x000000, "Member 'SHWaterInteractionComponent_AddWaterInteraction::InWaterIntersection' has a wrong offset!");

// Function SHProto.SHWaterInteractionComponent.SetWaterInteractionBlocked
// 0x0010 (0x0010 - 0x0000)
struct SHWaterInteractionComponent_SetWaterInteractionBlocked final
{
public:
	bool                                          IsBlock;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHWaterInteractionComponent_SetWaterInteractionBlocked) == 0x000008, "Wrong alignment on SHWaterInteractionComponent_SetWaterInteractionBlocked");
static_assert(sizeof(SHWaterInteractionComponent_SetWaterInteractionBlocked) == 0x000010, "Wrong size on SHWaterInteractionComponent_SetWaterInteractionBlocked");
static_assert(offsetof(SHWaterInteractionComponent_SetWaterInteractionBlocked, IsBlock) == 0x000000, "Member 'SHWaterInteractionComponent_SetWaterInteractionBlocked::IsBlock' has a wrong offset!");
static_assert(offsetof(SHWaterInteractionComponent_SetWaterInteractionBlocked, Object) == 0x000008, "Member 'SHWaterInteractionComponent_SetWaterInteractionBlocked::Object' has a wrong offset!");

// Function SHProto.SHWaterInteractionComponent.GetCurrentIntersections
// 0x0010 (0x0010 - 0x0000)
struct SHWaterInteractionComponent_GetCurrentIntersections final
{
public:
	TArray<struct FSHXWaterIntersection>          ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHWaterInteractionComponent_GetCurrentIntersections) == 0x000008, "Wrong alignment on SHWaterInteractionComponent_GetCurrentIntersections");
static_assert(sizeof(SHWaterInteractionComponent_GetCurrentIntersections) == 0x000010, "Wrong size on SHWaterInteractionComponent_GetCurrentIntersections");
static_assert(offsetof(SHWaterInteractionComponent_GetCurrentIntersections, ReturnValue) == 0x000000, "Member 'SHWaterInteractionComponent_GetCurrentIntersections::ReturnValue' has a wrong offset!");

// Function SHProto.SHWaterInteractionComponent.IsWaterInteractionBlocked
// 0x0001 (0x0001 - 0x0000)
struct SHWaterInteractionComponent_IsWaterInteractionBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHWaterInteractionComponent_IsWaterInteractionBlocked) == 0x000001, "Wrong alignment on SHWaterInteractionComponent_IsWaterInteractionBlocked");
static_assert(sizeof(SHWaterInteractionComponent_IsWaterInteractionBlocked) == 0x000001, "Wrong size on SHWaterInteractionComponent_IsWaterInteractionBlocked");
static_assert(offsetof(SHWaterInteractionComponent_IsWaterInteractionBlocked, ReturnValue) == 0x000000, "Member 'SHWaterInteractionComponent_IsWaterInteractionBlocked::ReturnValue' has a wrong offset!");

// Function SHProto.SHWaterInteractionComponent.IsWaterInteractionBlockedBy
// 0x0010 (0x0010 - 0x0000)
struct SHWaterInteractionComponent_IsWaterInteractionBlockedBy final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHWaterInteractionComponent_IsWaterInteractionBlockedBy) == 0x000008, "Wrong alignment on SHWaterInteractionComponent_IsWaterInteractionBlockedBy");
static_assert(sizeof(SHWaterInteractionComponent_IsWaterInteractionBlockedBy) == 0x000010, "Wrong size on SHWaterInteractionComponent_IsWaterInteractionBlockedBy");
static_assert(offsetof(SHWaterInteractionComponent_IsWaterInteractionBlockedBy, Object) == 0x000000, "Member 'SHWaterInteractionComponent_IsWaterInteractionBlockedBy::Object' has a wrong offset!");
static_assert(offsetof(SHWaterInteractionComponent_IsWaterInteractionBlockedBy, ReturnValue) == 0x000008, "Member 'SHWaterInteractionComponent_IsWaterInteractionBlockedBy::ReturnValue' has a wrong offset!");

// Function SHProto.SHWaterManagerComponent.GetSimulatingWaterVolume
// 0x0008 (0x0008 - 0x0000)
struct SHWaterManagerComponent_GetSimulatingWaterVolume final
{
public:
	class ASHWaterVolume*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHWaterManagerComponent_GetSimulatingWaterVolume) == 0x000008, "Wrong alignment on SHWaterManagerComponent_GetSimulatingWaterVolume");
static_assert(sizeof(SHWaterManagerComponent_GetSimulatingWaterVolume) == 0x000008, "Wrong size on SHWaterManagerComponent_GetSimulatingWaterVolume");
static_assert(offsetof(SHWaterManagerComponent_GetSimulatingWaterVolume, ReturnValue) == 0x000000, "Member 'SHWaterManagerComponent_GetSimulatingWaterVolume::ReturnValue' has a wrong offset!");

// Function SHProto.SHWaterVolume.DisableRuntimeSimulation
// 0x0010 (0x0010 - 0x0000)
struct SHWaterVolume_DisableRuntimeSimulation final
{
public:
	bool                                          IsDisable;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Object;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHWaterVolume_DisableRuntimeSimulation) == 0x000008, "Wrong alignment on SHWaterVolume_DisableRuntimeSimulation");
static_assert(sizeof(SHWaterVolume_DisableRuntimeSimulation) == 0x000010, "Wrong size on SHWaterVolume_DisableRuntimeSimulation");
static_assert(offsetof(SHWaterVolume_DisableRuntimeSimulation, IsDisable) == 0x000000, "Member 'SHWaterVolume_DisableRuntimeSimulation::IsDisable' has a wrong offset!");
static_assert(offsetof(SHWaterVolume_DisableRuntimeSimulation, Object) == 0x000008, "Member 'SHWaterVolume_DisableRuntimeSimulation::Object' has a wrong offset!");

// Function SHProto.SHWaterVolume.IsPointWithin
// 0x0020 (0x0020 - 0x0000)
struct SHWaterVolume_IsPointWithin final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHWaterVolume_IsPointWithin) == 0x000008, "Wrong alignment on SHWaterVolume_IsPointWithin");
static_assert(sizeof(SHWaterVolume_IsPointWithin) == 0x000020, "Wrong size on SHWaterVolume_IsPointWithin");
static_assert(offsetof(SHWaterVolume_IsPointWithin, Point) == 0x000000, "Member 'SHWaterVolume_IsPointWithin::Point' has a wrong offset!");
static_assert(offsetof(SHWaterVolume_IsPointWithin, ReturnValue) == 0x000018, "Member 'SHWaterVolume_IsPointWithin::ReturnValue' has a wrong offset!");

// Function SHProto.SHWaterVolume.IsRuntimeSimulationDisabled
// 0x0001 (0x0001 - 0x0000)
struct SHWaterVolume_IsRuntimeSimulationDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHWaterVolume_IsRuntimeSimulationDisabled) == 0x000001, "Wrong alignment on SHWaterVolume_IsRuntimeSimulationDisabled");
static_assert(sizeof(SHWaterVolume_IsRuntimeSimulationDisabled) == 0x000001, "Wrong size on SHWaterVolume_IsRuntimeSimulationDisabled");
static_assert(offsetof(SHWaterVolume_IsRuntimeSimulationDisabled, ReturnValue) == 0x000000, "Member 'SHWaterVolume_IsRuntimeSimulationDisabled::ReturnValue' has a wrong offset!");

// Function SHProto.SHWaterVolume.IsRuntimeSimulationDisabledBy
// 0x0010 (0x0010 - 0x0000)
struct SHWaterVolume_IsRuntimeSimulationDisabledBy final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SHWaterVolume_IsRuntimeSimulationDisabledBy) == 0x000008, "Wrong alignment on SHWaterVolume_IsRuntimeSimulationDisabledBy");
static_assert(sizeof(SHWaterVolume_IsRuntimeSimulationDisabledBy) == 0x000010, "Wrong size on SHWaterVolume_IsRuntimeSimulationDisabledBy");
static_assert(offsetof(SHWaterVolume_IsRuntimeSimulationDisabledBy, Object) == 0x000000, "Member 'SHWaterVolume_IsRuntimeSimulationDisabledBy::Object' has a wrong offset!");
static_assert(offsetof(SHWaterVolume_IsRuntimeSimulationDisabledBy, ReturnValue) == 0x000008, "Member 'SHWaterVolume_IsRuntimeSimulationDisabledBy::ReturnValue' has a wrong offset!");

// Function SHProto.SHWeaponAnimInstance.IsAiming
// 0x0001 (0x0001 - 0x0000)
struct SHWeaponAnimInstance_IsAiming final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHWeaponAnimInstance_IsAiming) == 0x000001, "Wrong alignment on SHWeaponAnimInstance_IsAiming");
static_assert(sizeof(SHWeaponAnimInstance_IsAiming) == 0x000001, "Wrong size on SHWeaponAnimInstance_IsAiming");
static_assert(offsetof(SHWeaponAnimInstance_IsAiming, ReturnValue) == 0x000000, "Member 'SHWeaponAnimInstance_IsAiming::ReturnValue' has a wrong offset!");

// Function SHProto.SHRangedWeaponAnimInterface.SetOutOfAmmo
// 0x0001 (0x0001 - 0x0000)
struct SHRangedWeaponAnimInterface_SetOutOfAmmo final
{
public:
	bool                                          InNewValue;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHRangedWeaponAnimInterface_SetOutOfAmmo) == 0x000001, "Wrong alignment on SHRangedWeaponAnimInterface_SetOutOfAmmo");
static_assert(sizeof(SHRangedWeaponAnimInterface_SetOutOfAmmo) == 0x000001, "Wrong size on SHRangedWeaponAnimInterface_SetOutOfAmmo");
static_assert(offsetof(SHRangedWeaponAnimInterface_SetOutOfAmmo, InNewValue) == 0x000000, "Member 'SHRangedWeaponAnimInterface_SetOutOfAmmo::InNewValue' has a wrong offset!");

// Function SHProto.SHWestCityFWInteractedAllAtHeavensNightEndingFactor.SHDebug_Character_Endings_WestCityFWInteractedAllAtHeavensNightEndingFactor_SetDebugValue
// 0x0001 (0x0001 - 0x0000)
struct SHWestCityFWInteractedAllAtHeavensNightEndingFactor_SHDebug_Character_Endings_WestCityFWInteractedAllAtHeavensNightEndingFactor_SetDebugValue final
{
public:
	bool                                          InValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHWestCityFWInteractedAllAtHeavensNightEndingFactor_SHDebug_Character_Endings_WestCityFWInteractedAllAtHeavensNightEndingFactor_SetDebugValue) == 0x000001, "Wrong alignment on SHWestCityFWInteractedAllAtHeavensNightEndingFactor_SHDebug_Character_Endings_WestCityFWInteractedAllAtHeavensNightEndingFactor_SetDebugValue");
static_assert(sizeof(SHWestCityFWInteractedAllAtHeavensNightEndingFactor_SHDebug_Character_Endings_WestCityFWInteractedAllAtHeavensNightEndingFactor_SetDebugValue) == 0x000001, "Wrong size on SHWestCityFWInteractedAllAtHeavensNightEndingFactor_SHDebug_Character_Endings_WestCityFWInteractedAllAtHeavensNightEndingFactor_SetDebugValue");
static_assert(offsetof(SHWestCityFWInteractedAllAtHeavensNightEndingFactor_SHDebug_Character_Endings_WestCityFWInteractedAllAtHeavensNightEndingFactor_SetDebugValue, InValue) == 0x000000, "Member 'SHWestCityFWInteractedAllAtHeavensNightEndingFactor_SHDebug_Character_Endings_WestCityFWInteractedAllAtHeavensNightEndingFactor_SetDebugValue::InValue' has a wrong offset!");

// Function SHProto.SHWestCityFWMariaInteractionsEndingFactor.SHDebug_Character_Endings_WestCityFWMariaInteractionsEndingFactor_SetDebugValue
// 0x0001 (0x0001 - 0x0000)
struct SHWestCityFWMariaInteractionsEndingFactor_SHDebug_Character_Endings_WestCityFWMariaInteractionsEndingFactor_SetDebugValue final
{
public:
	bool                                          InValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHWestCityFWMariaInteractionsEndingFactor_SHDebug_Character_Endings_WestCityFWMariaInteractionsEndingFactor_SetDebugValue) == 0x000001, "Wrong alignment on SHWestCityFWMariaInteractionsEndingFactor_SHDebug_Character_Endings_WestCityFWMariaInteractionsEndingFactor_SetDebugValue");
static_assert(sizeof(SHWestCityFWMariaInteractionsEndingFactor_SHDebug_Character_Endings_WestCityFWMariaInteractionsEndingFactor_SetDebugValue) == 0x000001, "Wrong size on SHWestCityFWMariaInteractionsEndingFactor_SHDebug_Character_Endings_WestCityFWMariaInteractionsEndingFactor_SetDebugValue");
static_assert(offsetof(SHWestCityFWMariaInteractionsEndingFactor_SHDebug_Character_Endings_WestCityFWMariaInteractionsEndingFactor_SetDebugValue, InValue) == 0x000000, "Member 'SHWestCityFWMariaInteractionsEndingFactor_SHDebug_Character_Endings_WestCityFWMariaInteractionsEndingFactor_SetDebugValue::InValue' has a wrong offset!");

// Function SHProto.SHWoodsideCoinPuzzleEndingFactor.SHDebug_Character_Endings_Factors_WoodsideCoinPuzzle_SetDebugValue
// 0x0004 (0x0004 - 0x0000)
struct SHWoodsideCoinPuzzleEndingFactor_SHDebug_Character_Endings_Factors_WoodsideCoinPuzzle_SetDebugValue final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SHWoodsideCoinPuzzleEndingFactor_SHDebug_Character_Endings_Factors_WoodsideCoinPuzzle_SetDebugValue) == 0x000004, "Wrong alignment on SHWoodsideCoinPuzzleEndingFactor_SHDebug_Character_Endings_Factors_WoodsideCoinPuzzle_SetDebugValue");
static_assert(sizeof(SHWoodsideCoinPuzzleEndingFactor_SHDebug_Character_Endings_Factors_WoodsideCoinPuzzle_SetDebugValue) == 0x000004, "Wrong size on SHWoodsideCoinPuzzleEndingFactor_SHDebug_Character_Endings_Factors_WoodsideCoinPuzzle_SetDebugValue");
static_assert(offsetof(SHWoodsideCoinPuzzleEndingFactor_SHDebug_Character_Endings_Factors_WoodsideCoinPuzzle_SetDebugValue, InValue) == 0x000000, "Member 'SHWoodsideCoinPuzzleEndingFactor_SHDebug_Character_Endings_Factors_WoodsideCoinPuzzle_SetDebugValue::InValue' has a wrong offset!");

}

