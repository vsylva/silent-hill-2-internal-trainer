#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Dialog

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "MovieScene_structs.hpp"
#include "Dai_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum Dialog.EQuestStatus
// NumValues: 0x0007
enum class EQuestStatus : uint8
{
	UNKNOWN                                  = 0,
	ACTIVE                                   = 1,
	SUCCESS                                  = 2,
	FAILURE                                  = 3,
	CLOSED                                   = 4,
	COUNT                                    = 5,
	EQuestStatus_MAX                         = 6,
};

// Enum Dialog.EQuestResult
// NumValues: 0x0005
enum class EQuestResult : uint8
{
	CLOSED                                   = 0,
	PASSED                                   = 1,
	FAILED                                   = 2,
	COUNT                                    = 3,
	EQuestResult_MAX                         = 4,
};

// Enum Dialog.ERange
// NumValues: 0x0005
enum class ERange : uint8
{
	DEFAULT                                  = 0,
	IGNORED                                  = 1,
	OVERRIDEN                                = 2,
	COUNT                                    = 3,
	ERange_MAX                               = 4,
};

// Enum Dialog.EHubType
// NumValues: 0x0006
enum class EHubType : uint8
{
	MANUAL                                   = 0,
	RANDOM                                   = 1,
	SELECTOR                                 = 2,
	SEQUENCE                                 = 3,
	LOOP                                     = 4,
	EHubType_MAX                             = 5,
};

// Enum Dialog.EActionStopReason
// NumValues: 0x0004
enum class EActionStopReason : uint8
{
	ABORT                                    = 0,
	EXIT                                     = 1,
	SKIP                                     = 2,
	EActionStopReason_MAX                    = 3,
};

// Enum Dialog.EDialogMemberType
// NumValues: 0x0006
enum class EDialogMemberType : uint8
{
	UNKNOWN                                  = 0,
	STRING                                   = 1,
	OBJECT_ID                                = 2,
	OBJECT_LIST                              = 3,
	CONNECTION_LIST                          = 4,
	EDialogMemberType_MAX                    = 5,
};

// Enum Dialog.ETalkState
// NumValues: 0x0008
enum class ETalkState : uint8
{
	INVALID                                  = 0,
	RUNNING                                  = 1,
	COMPLETED                                = 2,
	BREAKED                                  = 3,
	PAUSED                                   = 4,
	PREPARED                                 = 5,
	SUSPENDED                                = 6,
	ETalkState_MAX                           = 7,
};

// Enum Dialog.EVoiceState
// NumValues: 0x0007
enum class EVoiceState : uint8
{
	NONE                                     = 0,
	INVALID                                  = 1,
	LOADING                                  = 2,
	READY                                    = 3,
	PLAYING                                  = 4,
	FINISHED                                 = 5,
	EVoiceState_MAX                          = 6,
};

// Enum Dialog.EBooleanFlowOperation2
// NumValues: 0x0003
enum class EBooleanFlowOperation2 : uint8
{
	Set                                      = 0,
	Negate                                   = 1,
	EBooleanFlowOperation2_MAX               = 2,
};

// Enum Dialog.EIntegerFlowOperation2
// NumValues: 0x0004
enum class EIntegerFlowOperation2 : uint8
{
	Set                                      = 0,
	Increment                                = 1,
	Decrement                                = 2,
	EIntegerFlowOperation2_MAX               = 3,
};

// Enum Dialog.ETagOperation2
// NumValues: 0x0004
enum class ETagOperation2 : uint8
{
	Add                                      = 0,
	Remove                                   = 1,
	Scope                                    = 2,
	ETagOperation2_MAX                       = 3,
};

// Enum Dialog.EBooleanFlowOperation
// NumValues: 0x0003
enum class EBooleanFlowOperation : uint8
{
	IsNotSet                                 = 0,
	IsSet                                    = 1,
	EBooleanFlowOperation_MAX                = 2,
};

// Enum Dialog.EIntegerFlowOperation
// NumValues: 0x0007
enum class EIntegerFlowOperation : uint8
{
	IsEqual                                  = 0,
	IsNotEqual                               = 1,
	IsGreater                                = 2,
	IsGreaterOrEqual                         = 3,
	IsLess                                   = 4,
	IsLessOrEqual                            = 5,
	EIntegerFlowOperation_MAX                = 6,
};

// ScriptStruct Dialog.FlowID
// 0x0008 (0x0008 - 0x0000)
struct FFlowID
{
public:
	int32                                         _ObjectID;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _Type;                                             // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFlowID) == 0x000004, "Wrong alignment on FFlowID");
static_assert(sizeof(FFlowID) == 0x000008, "Wrong size on FFlowID");
static_assert(offsetof(FFlowID, _ObjectID) == 0x000000, "Member 'FFlowID::_ObjectID' has a wrong offset!");
static_assert(offsetof(FFlowID, _Type) == 0x000004, "Member 'FFlowID::_Type' has a wrong offset!");

// ScriptStruct Dialog.FlowObjectID
// 0x0020 (0x0028 - 0x0008)
struct FFlowObjectID : public FFlowID
{
public:
	class UDialogData*                            _DialogData;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _Name;                                             // 0x0010(0x0008)(Edit, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _TypeID;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFlowItem*                              _FlowItem;                                         // 0x0020(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFlowObjectID) == 0x000008, "Wrong alignment on FFlowObjectID");
static_assert(sizeof(FFlowObjectID) == 0x000028, "Wrong size on FFlowObjectID");
static_assert(offsetof(FFlowObjectID, _DialogData) == 0x000008, "Member 'FFlowObjectID::_DialogData' has a wrong offset!");
static_assert(offsetof(FFlowObjectID, _Name) == 0x000010, "Member 'FFlowObjectID::_Name' has a wrong offset!");
static_assert(offsetof(FFlowObjectID, _TypeID) == 0x000018, "Member 'FFlowObjectID::_TypeID' has a wrong offset!");
static_assert(offsetof(FFlowObjectID, _FlowItem) == 0x000020, "Member 'FFlowObjectID::_FlowItem' has a wrong offset!");

// ScriptStruct Dialog.DialogObjectID
// 0x0000 (0x0028 - 0x0028)
struct FDialogObjectID : public FFlowObjectID
{
};
static_assert(alignof(FDialogObjectID) == 0x000008, "Wrong alignment on FDialogObjectID");
static_assert(sizeof(FDialogObjectID) == 0x000028, "Wrong size on FDialogObjectID");

// ScriptStruct Dialog.DialogChoiceSequence
// 0x0050 (0x0050 - 0x0000)
struct FDialogChoiceSequence final
{
public:
	struct FDialogObjectID                        _LineID;                                           // 0x0000(0x0028)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         _Sequence;                                         // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDaiActorName                          _MasterPlayerName;                                 // 0x0030(0x0010)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDaiActorName                          _PlayerName;                                       // 0x0040(0x0010)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogChoiceSequence) == 0x000008, "Wrong alignment on FDialogChoiceSequence");
static_assert(sizeof(FDialogChoiceSequence) == 0x000050, "Wrong size on FDialogChoiceSequence");
static_assert(offsetof(FDialogChoiceSequence, _LineID) == 0x000000, "Member 'FDialogChoiceSequence::_LineID' has a wrong offset!");
static_assert(offsetof(FDialogChoiceSequence, _Sequence) == 0x000028, "Member 'FDialogChoiceSequence::_Sequence' has a wrong offset!");
static_assert(offsetof(FDialogChoiceSequence, _MasterPlayerName) == 0x000030, "Member 'FDialogChoiceSequence::_MasterPlayerName' has a wrong offset!");
static_assert(offsetof(FDialogChoiceSequence, _PlayerName) == 0x000040, "Member 'FDialogChoiceSequence::_PlayerName' has a wrong offset!");

// ScriptStruct Dialog.DialogEntity
// 0x0000 (0x0028 - 0x0028)
struct FDialogEntity final : public FDialogObjectID
{
};
static_assert(alignof(FDialogEntity) == 0x000008, "Wrong alignment on FDialogEntity");
static_assert(sizeof(FDialogEntity) == 0x000028, "Wrong size on FDialogEntity");

// ScriptStruct Dialog.DialogLineLocalization
// 0x00A8 (0x00A8 - 0x0000)
struct FDialogLineLocalization final
{
public:
	TSoftObjectPtr<class UObject>                 _VoiceOver;                                        // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   _Text;                                             // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NativeAccessSpecifierPublic)
	class FText                                   _MenuText;                                         // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NativeAccessSpecifierPublic)
	class FText                                   _SpeakerName;                                      // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NativeAccessSpecifierPublic)
	struct FColor                                 _TextColor;                                        // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDialogEntity                          _Speaker;                                          // 0x0080(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogLineLocalization) == 0x000008, "Wrong alignment on FDialogLineLocalization");
static_assert(sizeof(FDialogLineLocalization) == 0x0000A8, "Wrong size on FDialogLineLocalization");
static_assert(offsetof(FDialogLineLocalization, _VoiceOver) == 0x000000, "Member 'FDialogLineLocalization::_VoiceOver' has a wrong offset!");
static_assert(offsetof(FDialogLineLocalization, _Text) == 0x000030, "Member 'FDialogLineLocalization::_Text' has a wrong offset!");
static_assert(offsetof(FDialogLineLocalization, _MenuText) == 0x000048, "Member 'FDialogLineLocalization::_MenuText' has a wrong offset!");
static_assert(offsetof(FDialogLineLocalization, _SpeakerName) == 0x000060, "Member 'FDialogLineLocalization::_SpeakerName' has a wrong offset!");
static_assert(offsetof(FDialogLineLocalization, _TextColor) == 0x000078, "Member 'FDialogLineLocalization::_TextColor' has a wrong offset!");
static_assert(offsetof(FDialogLineLocalization, _Speaker) == 0x000080, "Member 'FDialogLineLocalization::_Speaker' has a wrong offset!");

// ScriptStruct Dialog.DialogTalkID
// 0x0000 (0x0028 - 0x0028)
struct FDialogTalkID : public FDialogObjectID
{
};
static_assert(alignof(FDialogTalkID) == 0x000008, "Wrong alignment on FDialogTalkID");
static_assert(sizeof(FDialogTalkID) == 0x000028, "Wrong size on FDialogTalkID");

// ScriptStruct Dialog.DialogLine
// 0x0000 (0x0028 - 0x0028)
struct FDialogLine final : public FDialogTalkID
{
};
static_assert(alignof(FDialogLine) == 0x000008, "Wrong alignment on FDialogLine");
static_assert(sizeof(FDialogLine) == 0x000028, "Wrong size on FDialogLine");

// ScriptStruct Dialog.QuestObjective
// 0x0040 (0x0040 - 0x0000)
struct FQuestObjective final
{
public:
	int32                                         _ObjectiveID;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestStatus                                  _Status;                                           // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   _Name;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	class FText                                   _Description;                                      // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	bool                                          _IsHidden;                                         // 0x0038(0x0001)(Edit, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuestObjective) == 0x000008, "Wrong alignment on FQuestObjective");
static_assert(sizeof(FQuestObjective) == 0x000040, "Wrong size on FQuestObjective");
static_assert(offsetof(FQuestObjective, _ObjectiveID) == 0x000000, "Member 'FQuestObjective::_ObjectiveID' has a wrong offset!");
static_assert(offsetof(FQuestObjective, _Status) == 0x000004, "Member 'FQuestObjective::_Status' has a wrong offset!");
static_assert(offsetof(FQuestObjective, _Name) == 0x000008, "Member 'FQuestObjective::_Name' has a wrong offset!");
static_assert(offsetof(FQuestObjective, _Description) == 0x000020, "Member 'FQuestObjective::_Description' has a wrong offset!");
static_assert(offsetof(FQuestObjective, _IsHidden) == 0x000038, "Member 'FQuestObjective::_IsHidden' has a wrong offset!");

// ScriptStruct Dialog.QuestData
// 0x0048 (0x0048 - 0x0000)
struct FQuestData final
{
public:
	struct FDialogObjectID                        _QuestID;                                          // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestStatus                                  _Status;                                           // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FQuestObjective>                _Objectives;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, NativeAccessSpecifierPublic)
	int32                                         _StoryRecap;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuestData) == 0x000008, "Wrong alignment on FQuestData");
static_assert(sizeof(FQuestData) == 0x000048, "Wrong size on FQuestData");
static_assert(offsetof(FQuestData, _QuestID) == 0x000000, "Member 'FQuestData::_QuestID' has a wrong offset!");
static_assert(offsetof(FQuestData, _Status) == 0x000028, "Member 'FQuestData::_Status' has a wrong offset!");
static_assert(offsetof(FQuestData, _Objectives) == 0x000030, "Member 'FQuestData::_Objectives' has a wrong offset!");
static_assert(offsetof(FQuestData, _StoryRecap) == 0x000040, "Member 'FQuestData::_StoryRecap' has a wrong offset!");

// ScriptStruct Dialog.FlowGlobal
// 0x0018 (0x0018 - 0x0000)
struct FFlowGlobal
{
public:
	class UDialogData*                            _DialogData;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _Name;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _TypeID;                                           // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFlowGlobal) == 0x000008, "Wrong alignment on FFlowGlobal");
static_assert(sizeof(FFlowGlobal) == 0x000018, "Wrong size on FFlowGlobal");
static_assert(offsetof(FFlowGlobal, _DialogData) == 0x000000, "Member 'FFlowGlobal::_DialogData' has a wrong offset!");
static_assert(offsetof(FFlowGlobal, _Name) == 0x000008, "Member 'FFlowGlobal::_Name' has a wrong offset!");
static_assert(offsetof(FFlowGlobal, _TypeID) == 0x000010, "Member 'FFlowGlobal::_TypeID' has a wrong offset!");

// ScriptStruct Dialog.FlowEntityCSV
// 0x0040 (0x0048 - 0x0008)
struct FFlowEntityCSV final : public FTableRowBase
{
public:
	class FString                                 ID;                                                // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Template;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFlowEntityCSV) == 0x000008, "Wrong alignment on FFlowEntityCSV");
static_assert(sizeof(FFlowEntityCSV) == 0x000048, "Wrong size on FFlowEntityCSV");
static_assert(offsetof(FFlowEntityCSV, ID) == 0x000008, "Member 'FFlowEntityCSV::ID' has a wrong offset!");
static_assert(offsetof(FFlowEntityCSV, Name) == 0x000018, "Member 'FFlowEntityCSV::Name' has a wrong offset!");
static_assert(offsetof(FFlowEntityCSV, Description) == 0x000028, "Member 'FFlowEntityCSV::Description' has a wrong offset!");
static_assert(offsetof(FFlowEntityCSV, Template) == 0x000038, "Member 'FFlowEntityCSV::Template' has a wrong offset!");

// ScriptStruct Dialog.DialogHub
// 0x0000 (0x0028 - 0x0028)
struct FDialogHub final : public FDialogTalkID
{
};
static_assert(alignof(FDialogHub) == 0x000008, "Wrong alignment on FDialogHub");
static_assert(sizeof(FDialogHub) == 0x000028, "Wrong size on FDialogHub");

// ScriptStruct Dialog.DialogChoiceMovieSceneParams
// 0x0038 (0x0038 - 0x0000)
struct FDialogChoiceMovieSceneParams
{
public:
	struct FDialogHub                             _ChoiceID;                                         // 0x0000(0x0028)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDialogChoiceSequence>          _Choices;                                          // 0x0028(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogChoiceMovieSceneParams) == 0x000008, "Wrong alignment on FDialogChoiceMovieSceneParams");
static_assert(sizeof(FDialogChoiceMovieSceneParams) == 0x000038, "Wrong size on FDialogChoiceMovieSceneParams");
static_assert(offsetof(FDialogChoiceMovieSceneParams, _ChoiceID) == 0x000000, "Member 'FDialogChoiceMovieSceneParams::_ChoiceID' has a wrong offset!");
static_assert(offsetof(FDialogChoiceMovieSceneParams, _Choices) == 0x000028, "Member 'FDialogChoiceMovieSceneParams::_Choices' has a wrong offset!");

// ScriptStruct Dialog.DialogChoiceMovieSceneSectionTemplateParameters
// 0x0008 (0x0040 - 0x0038)
struct FDialogChoiceMovieSceneSectionTemplateParameters final : public FDialogChoiceMovieSceneParams
{
public:
	float                                         SectionStartTime;                                  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SectionEndTime;                                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogChoiceMovieSceneSectionTemplateParameters) == 0x000008, "Wrong alignment on FDialogChoiceMovieSceneSectionTemplateParameters");
static_assert(sizeof(FDialogChoiceMovieSceneSectionTemplateParameters) == 0x000040, "Wrong size on FDialogChoiceMovieSceneSectionTemplateParameters");
static_assert(offsetof(FDialogChoiceMovieSceneSectionTemplateParameters, SectionStartTime) == 0x000038, "Member 'FDialogChoiceMovieSceneSectionTemplateParameters::SectionStartTime' has a wrong offset!");
static_assert(offsetof(FDialogChoiceMovieSceneSectionTemplateParameters, SectionEndTime) == 0x00003C, "Member 'FDialogChoiceMovieSceneSectionTemplateParameters::SectionEndTime' has a wrong offset!");

// ScriptStruct Dialog.DialogChoiceMovieSceneSectionTemplate
// 0x0040 (0x0060 - 0x0020)
struct FDialogChoiceMovieSceneSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FDialogChoiceMovieSceneSectionTemplateParameters Params;                                            // 0x0020(0x0040)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogChoiceMovieSceneSectionTemplate) == 0x000008, "Wrong alignment on FDialogChoiceMovieSceneSectionTemplate");
static_assert(sizeof(FDialogChoiceMovieSceneSectionTemplate) == 0x000060, "Wrong size on FDialogChoiceMovieSceneSectionTemplate");
static_assert(offsetof(FDialogChoiceMovieSceneSectionTemplate, Params) == 0x000020, "Member 'FDialogChoiceMovieSceneSectionTemplate::Params' has a wrong offset!");

// ScriptStruct Dialog.DialogChoiceMovieSceneSharedTrack
// 0x0000 (0x0020 - 0x0020)
struct FDialogChoiceMovieSceneSharedTrack final : public FMovieSceneEvalTemplate
{
};
static_assert(alignof(FDialogChoiceMovieSceneSharedTrack) == 0x000008, "Wrong alignment on FDialogChoiceMovieSceneSharedTrack");
static_assert(sizeof(FDialogChoiceMovieSceneSharedTrack) == 0x000020, "Wrong size on FDialogChoiceMovieSceneSharedTrack");

// ScriptStruct Dialog.JSonText
// 0x0010 (0x0010 - 0x0000)
struct FJSonText final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJSonText) == 0x000008, "Wrong alignment on FJSonText");
static_assert(sizeof(FJSonText) == 0x000010, "Wrong size on FJSonText");
static_assert(offsetof(FJSonText, Text) == 0x000000, "Member 'FJSonText::Text' has a wrong offset!");

// ScriptStruct Dialog.JSonLocalization
// 0x0020 (0x0028 - 0x0008)
struct FJSonLocalization final : public FTableRowBase
{
public:
	struct FJSonText                              Source;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FJSonText                              Translation;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJSonLocalization) == 0x000008, "Wrong alignment on FJSonLocalization");
static_assert(sizeof(FJSonLocalization) == 0x000028, "Wrong size on FJSonLocalization");
static_assert(offsetof(FJSonLocalization, Source) == 0x000008, "Member 'FJSonLocalization::Source' has a wrong offset!");
static_assert(offsetof(FJSonLocalization, Translation) == 0x000018, "Member 'FJSonLocalization::Translation' has a wrong offset!");

// ScriptStruct Dialog.CsvLocalization
// 0x0048 (0x0050 - 0x0008)
struct FCsvLocalization final : public FTableRowBase
{
public:
	class FString                                 Comment;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Source;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Translation;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Changed;                                           // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OldSource;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCsvLocalization) == 0x000008, "Wrong alignment on FCsvLocalization");
static_assert(sizeof(FCsvLocalization) == 0x000050, "Wrong size on FCsvLocalization");
static_assert(offsetof(FCsvLocalization, Comment) == 0x000008, "Member 'FCsvLocalization::Comment' has a wrong offset!");
static_assert(offsetof(FCsvLocalization, Source) == 0x000018, "Member 'FCsvLocalization::Source' has a wrong offset!");
static_assert(offsetof(FCsvLocalization, Translation) == 0x000028, "Member 'FCsvLocalization::Translation' has a wrong offset!");
static_assert(offsetof(FCsvLocalization, Changed) == 0x000038, "Member 'FCsvLocalization::Changed' has a wrong offset!");
static_assert(offsetof(FCsvLocalization, OldSource) == 0x000040, "Member 'FCsvLocalization::OldSource' has a wrong offset!");

// ScriptStruct Dialog.FlowLineCSV
// 0x0120 (0x0128 - 0x0008)
struct FFlowLineCSV final : public FTableRowBase
{
public:
	class FString                                 ID;                                                // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dir0;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dir1;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dir2;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialog;                                            // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Template;                                          // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Tags;                                              // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Speaker;                                           // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplaySpeaker;                                    // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Order;                                             // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeleteMe;                                          // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HasVO;                                             // 0x00D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HasValidVO;                                        // 0x00E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VOName;                                            // 0x00F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WavePath;                                          // 0x0108(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CuePath;                                           // 0x0118(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFlowLineCSV) == 0x000008, "Wrong alignment on FFlowLineCSV");
static_assert(sizeof(FFlowLineCSV) == 0x000128, "Wrong size on FFlowLineCSV");
static_assert(offsetof(FFlowLineCSV, ID) == 0x000008, "Member 'FFlowLineCSV::ID' has a wrong offset!");
static_assert(offsetof(FFlowLineCSV, Dir0) == 0x000018, "Member 'FFlowLineCSV::Dir0' has a wrong offset!");
static_assert(offsetof(FFlowLineCSV, Dir1) == 0x000028, "Member 'FFlowLineCSV::Dir1' has a wrong offset!");
static_assert(offsetof(FFlowLineCSV, Dir2) == 0x000038, "Member 'FFlowLineCSV::Dir2' has a wrong offset!");
static_assert(offsetof(FFlowLineCSV, Dialog) == 0x000048, "Member 'FFlowLineCSV::Dialog' has a wrong offset!");
static_assert(offsetof(FFlowLineCSV, Template) == 0x000058, "Member 'FFlowLineCSV::Template' has a wrong offset!");
static_assert(offsetof(FFlowLineCSV, Tags) == 0x000068, "Member 'FFlowLineCSV::Tags' has a wrong offset!");
static_assert(offsetof(FFlowLineCSV, Speaker) == 0x000078, "Member 'FFlowLineCSV::Speaker' has a wrong offset!");
static_assert(offsetof(FFlowLineCSV, DisplaySpeaker) == 0x000088, "Member 'FFlowLineCSV::DisplaySpeaker' has a wrong offset!");
static_assert(offsetof(FFlowLineCSV, Text) == 0x000098, "Member 'FFlowLineCSV::Text' has a wrong offset!");
static_assert(offsetof(FFlowLineCSV, Description) == 0x0000A8, "Member 'FFlowLineCSV::Description' has a wrong offset!");
static_assert(offsetof(FFlowLineCSV, Order) == 0x0000B8, "Member 'FFlowLineCSV::Order' has a wrong offset!");
static_assert(offsetof(FFlowLineCSV, DeleteMe) == 0x0000C8, "Member 'FFlowLineCSV::DeleteMe' has a wrong offset!");
static_assert(offsetof(FFlowLineCSV, HasVO) == 0x0000D8, "Member 'FFlowLineCSV::HasVO' has a wrong offset!");
static_assert(offsetof(FFlowLineCSV, HasValidVO) == 0x0000E8, "Member 'FFlowLineCSV::HasValidVO' has a wrong offset!");
static_assert(offsetof(FFlowLineCSV, VOName) == 0x0000F8, "Member 'FFlowLineCSV::VOName' has a wrong offset!");
static_assert(offsetof(FFlowLineCSV, WavePath) == 0x000108, "Member 'FFlowLineCSV::WavePath' has a wrong offset!");
static_assert(offsetof(FFlowLineCSV, CuePath) == 0x000118, "Member 'FFlowLineCSV::CuePath' has a wrong offset!");

// ScriptStruct Dialog.FlowBoolean
// 0x0000 (0x0018 - 0x0018)
struct FFlowBoolean final : public FFlowGlobal
{
};
static_assert(alignof(FFlowBoolean) == 0x000008, "Wrong alignment on FFlowBoolean");
static_assert(sizeof(FFlowBoolean) == 0x000018, "Wrong size on FFlowBoolean");

// ScriptStruct Dialog.FlowInteger
// 0x0000 (0x0018 - 0x0018)
struct FFlowInteger final : public FFlowGlobal
{
};
static_assert(alignof(FFlowInteger) == 0x000008, "Wrong alignment on FFlowInteger");
static_assert(sizeof(FFlowInteger) == 0x000018, "Wrong size on FFlowInteger");

// ScriptStruct Dialog.DialogVariable
// 0x0010 (0x0010 - 0x0000)
struct FDialogVariable final
{
public:
	class FName                                   _Name;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDialogVariableData*                    _Data;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogVariable) == 0x000008, "Wrong alignment on FDialogVariable");
static_assert(sizeof(FDialogVariable) == 0x000010, "Wrong size on FDialogVariable");
static_assert(offsetof(FDialogVariable, _Name) == 0x000000, "Member 'FDialogVariable::_Name' has a wrong offset!");
static_assert(offsetof(FDialogVariable, _Data) == 0x000008, "Member 'FDialogVariable::_Data' has a wrong offset!");

// ScriptStruct Dialog.DialogNamespace
// 0x0018 (0x0018 - 0x0000)
struct FDialogNamespace final
{
public:
	class FName                                   _Name;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDialogVariable>                _Variables;                                        // 0x0008(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogNamespace) == 0x000008, "Wrong alignment on FDialogNamespace");
static_assert(sizeof(FDialogNamespace) == 0x000018, "Wrong size on FDialogNamespace");
static_assert(offsetof(FDialogNamespace, _Name) == 0x000000, "Member 'FDialogNamespace::_Name' has a wrong offset!");
static_assert(offsetof(FDialogNamespace, _Variables) == 0x000008, "Member 'FDialogNamespace::_Variables' has a wrong offset!");

// ScriptStruct Dialog.DialogGlobals
// 0x0010 (0x0010 - 0x0000)
struct FDialogGlobals final
{
public:
	TArray<struct FDialogNamespace>               _Namespaces;                                       // 0x0000(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogGlobals) == 0x000008, "Wrong alignment on FDialogGlobals");
static_assert(sizeof(FDialogGlobals) == 0x000010, "Wrong size on FDialogGlobals");
static_assert(offsetof(FDialogGlobals, _Namespaces) == 0x000000, "Member 'FDialogGlobals::_Namespaces' has a wrong offset!");

// ScriptStruct Dialog.FlowItemCSV
// 0x0090 (0x0098 - 0x0008)
struct FFlowItemCSV final : public FTableRowBase
{
public:
	class FString                                 Parent;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Speaker;                                           // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Param0;                                            // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Inputs;                                            // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Outputs;                                           // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFlowItemCSV) == 0x000008, "Wrong alignment on FFlowItemCSV");
static_assert(sizeof(FFlowItemCSV) == 0x000098, "Wrong size on FFlowItemCSV");
static_assert(offsetof(FFlowItemCSV, Parent) == 0x000008, "Member 'FFlowItemCSV::Parent' has a wrong offset!");
static_assert(offsetof(FFlowItemCSV, Type) == 0x000018, "Member 'FFlowItemCSV::Type' has a wrong offset!");
static_assert(offsetof(FFlowItemCSV, Name) == 0x000028, "Member 'FFlowItemCSV::Name' has a wrong offset!");
static_assert(offsetof(FFlowItemCSV, Description) == 0x000038, "Member 'FFlowItemCSV::Description' has a wrong offset!");
static_assert(offsetof(FFlowItemCSV, Speaker) == 0x000048, "Member 'FFlowItemCSV::Speaker' has a wrong offset!");
static_assert(offsetof(FFlowItemCSV, Text) == 0x000058, "Member 'FFlowItemCSV::Text' has a wrong offset!");
static_assert(offsetof(FFlowItemCSV, Param0) == 0x000068, "Member 'FFlowItemCSV::Param0' has a wrong offset!");
static_assert(offsetof(FFlowItemCSV, Inputs) == 0x000078, "Member 'FFlowItemCSV::Inputs' has a wrong offset!");
static_assert(offsetof(FFlowItemCSV, Outputs) == 0x000088, "Member 'FFlowItemCSV::Outputs' has a wrong offset!");

// ScriptStruct Dialog.FlowTraveller
// 0x0060 (0x0060 - 0x0000)
struct FFlowTraveller final
{
public:
	struct FFlowObjectID                          _CurrentRef;                                       // 0x0000(0x0028)(SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FFlowObjectID>                  _Connections;                                      // 0x0028(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate)
	TArray<struct FFlowObjectID>                  _History;                                          // 0x0038(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate)
	TArray<struct FFlowObjectID>                  _Hubs;                                             // 0x0048(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate)
	class UObject*                                _Context;                                          // 0x0058(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFlowTraveller) == 0x000008, "Wrong alignment on FFlowTraveller");
static_assert(sizeof(FFlowTraveller) == 0x000060, "Wrong size on FFlowTraveller");
static_assert(offsetof(FFlowTraveller, _CurrentRef) == 0x000000, "Member 'FFlowTraveller::_CurrentRef' has a wrong offset!");
static_assert(offsetof(FFlowTraveller, _Connections) == 0x000028, "Member 'FFlowTraveller::_Connections' has a wrong offset!");
static_assert(offsetof(FFlowTraveller, _History) == 0x000038, "Member 'FFlowTraveller::_History' has a wrong offset!");
static_assert(offsetof(FFlowTraveller, _Hubs) == 0x000048, "Member 'FFlowTraveller::_Hubs' has a wrong offset!");
static_assert(offsetof(FFlowTraveller, _Context) == 0x000058, "Member 'FFlowTraveller::_Context' has a wrong offset!");

// ScriptStruct Dialog.DialogLineMovieSceneParams
// 0x0030 (0x0030 - 0x0000)
struct FDialogLineMovieSceneParams
{
public:
	struct FDialogLine                            _LineID;                                           // 0x0000(0x0028)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _LineDuration;                                     // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _OverrideLineDuration;                             // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _FireAndForget;                                    // 0x002D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _Unmanaged;                                        // 0x002E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _CheckMarkers;                                     // 0x002F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogLineMovieSceneParams) == 0x000008, "Wrong alignment on FDialogLineMovieSceneParams");
static_assert(sizeof(FDialogLineMovieSceneParams) == 0x000030, "Wrong size on FDialogLineMovieSceneParams");
static_assert(offsetof(FDialogLineMovieSceneParams, _LineID) == 0x000000, "Member 'FDialogLineMovieSceneParams::_LineID' has a wrong offset!");
static_assert(offsetof(FDialogLineMovieSceneParams, _LineDuration) == 0x000028, "Member 'FDialogLineMovieSceneParams::_LineDuration' has a wrong offset!");
static_assert(offsetof(FDialogLineMovieSceneParams, _OverrideLineDuration) == 0x00002C, "Member 'FDialogLineMovieSceneParams::_OverrideLineDuration' has a wrong offset!");
static_assert(offsetof(FDialogLineMovieSceneParams, _FireAndForget) == 0x00002D, "Member 'FDialogLineMovieSceneParams::_FireAndForget' has a wrong offset!");
static_assert(offsetof(FDialogLineMovieSceneParams, _Unmanaged) == 0x00002E, "Member 'FDialogLineMovieSceneParams::_Unmanaged' has a wrong offset!");
static_assert(offsetof(FDialogLineMovieSceneParams, _CheckMarkers) == 0x00002F, "Member 'FDialogLineMovieSceneParams::_CheckMarkers' has a wrong offset!");

// ScriptStruct Dialog.DialogLineMovieSceneSectionTemplateParameters
// 0x0010 (0x0040 - 0x0030)
struct FDialogLineMovieSceneSectionTemplateParameters final : public FDialogLineMovieSceneParams
{
public:
	float                                         _SectionStartTime;                                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _SectionEndTime;                                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _TickResolution;                                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDialogLineMovieSceneSectionTemplateParameters) == 0x000008, "Wrong alignment on FDialogLineMovieSceneSectionTemplateParameters");
static_assert(sizeof(FDialogLineMovieSceneSectionTemplateParameters) == 0x000040, "Wrong size on FDialogLineMovieSceneSectionTemplateParameters");
static_assert(offsetof(FDialogLineMovieSceneSectionTemplateParameters, _SectionStartTime) == 0x000030, "Member 'FDialogLineMovieSceneSectionTemplateParameters::_SectionStartTime' has a wrong offset!");
static_assert(offsetof(FDialogLineMovieSceneSectionTemplateParameters, _SectionEndTime) == 0x000034, "Member 'FDialogLineMovieSceneSectionTemplateParameters::_SectionEndTime' has a wrong offset!");
static_assert(offsetof(FDialogLineMovieSceneSectionTemplateParameters, _TickResolution) == 0x000038, "Member 'FDialogLineMovieSceneSectionTemplateParameters::_TickResolution' has a wrong offset!");

// ScriptStruct Dialog.DialogLineMovieSceneSectionTemplate
// 0x0040 (0x0060 - 0x0020)
struct FDialogLineMovieSceneSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FDialogLineMovieSceneSectionTemplateParameters Params;                                            // 0x0020(0x0040)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogLineMovieSceneSectionTemplate) == 0x000008, "Wrong alignment on FDialogLineMovieSceneSectionTemplate");
static_assert(sizeof(FDialogLineMovieSceneSectionTemplate) == 0x000060, "Wrong size on FDialogLineMovieSceneSectionTemplate");
static_assert(offsetof(FDialogLineMovieSceneSectionTemplate, Params) == 0x000020, "Member 'FDialogLineMovieSceneSectionTemplate::Params' has a wrong offset!");

// ScriptStruct Dialog.DialogLineMovieSceneSharedTrack
// 0x0000 (0x0020 - 0x0020)
struct FDialogLineMovieSceneSharedTrack final : public FMovieSceneEvalTemplate
{
};
static_assert(alignof(FDialogLineMovieSceneSharedTrack) == 0x000008, "Wrong alignment on FDialogLineMovieSceneSharedTrack");
static_assert(sizeof(FDialogLineMovieSceneSharedTrack) == 0x000020, "Wrong size on FDialogLineMovieSceneSharedTrack");

// ScriptStruct Dialog.FlowPrototypeID
// 0x0000 (0x0008 - 0x0008)
struct FFlowPrototypeID final : public FFlowID
{
};
static_assert(alignof(FFlowPrototypeID) == 0x000004, "Wrong alignment on FFlowPrototypeID");
static_assert(sizeof(FFlowPrototypeID) == 0x000008, "Wrong size on FFlowPrototypeID");

// ScriptStruct Dialog.FlowInstanceID
// 0x0000 (0x0008 - 0x0008)
struct FFlowInstanceID final : public FFlowID
{
};
static_assert(alignof(FFlowInstanceID) == 0x000004, "Wrong alignment on FFlowInstanceID");
static_assert(sizeof(FFlowInstanceID) == 0x000008, "Wrong size on FFlowInstanceID");

// ScriptStruct Dialog.DialogDialog
// 0x0000 (0x0028 - 0x0028)
struct FDialogDialog final : public FDialogTalkID
{
};
static_assert(alignof(FDialogDialog) == 0x000008, "Wrong alignment on FDialogDialog");
static_assert(sizeof(FDialogDialog) == 0x000028, "Wrong size on FDialogDialog");

// ScriptStruct Dialog.DialogEntryID
// 0x0000 (0x0028 - 0x0028)
struct FDialogEntryID final : public FDialogTalkID
{
};
static_assert(alignof(FDialogEntryID) == 0x000008, "Wrong alignment on FDialogEntryID");
static_assert(sizeof(FDialogEntryID) == 0x000028, "Wrong size on FDialogEntryID");

// ScriptStruct Dialog.ConditionID
// 0x0000 (0x0028 - 0x0028)
struct FConditionID final : public FDialogObjectID
{
};
static_assert(alignof(FConditionID) == 0x000008, "Wrong alignment on FConditionID");
static_assert(sizeof(FConditionID) == 0x000028, "Wrong size on FConditionID");

// ScriptStruct Dialog.JumpID
// 0x0000 (0x0028 - 0x0028)
struct FJumpID final : public FDialogObjectID
{
};
static_assert(alignof(FJumpID) == 0x000008, "Wrong alignment on FJumpID");
static_assert(sizeof(FJumpID) == 0x000028, "Wrong size on FJumpID");

// ScriptStruct Dialog.ReferenceID
// 0x0000 (0x0028 - 0x0028)
struct FReferenceID final : public FDialogObjectID
{
};
static_assert(alignof(FReferenceID) == 0x000008, "Wrong alignment on FReferenceID");
static_assert(sizeof(FReferenceID) == 0x000028, "Wrong size on FReferenceID");

// ScriptStruct Dialog.QuestID
// 0x0000 (0x0028 - 0x0028)
struct FQuestID final : public FDialogObjectID
{
};
static_assert(alignof(FQuestID) == 0x000008, "Wrong alignment on FQuestID");
static_assert(sizeof(FQuestID) == 0x000028, "Wrong size on FQuestID");

// ScriptStruct Dialog.QuestObjectiveID
// 0x0000 (0x0028 - 0x0028)
struct FQuestObjectiveID final : public FDialogObjectID
{
};
static_assert(alignof(FQuestObjectiveID) == 0x000008, "Wrong alignment on FQuestObjectiveID");
static_assert(sizeof(FQuestObjectiveID) == 0x000028, "Wrong size on FQuestObjectiveID");

// ScriptStruct Dialog.StoryRecapID
// 0x0000 (0x0028 - 0x0028)
struct FStoryRecapID final : public FDialogObjectID
{
};
static_assert(alignof(FStoryRecapID) == 0x000008, "Wrong alignment on FStoryRecapID");
static_assert(sizeof(FStoryRecapID) == 0x000028, "Wrong size on FStoryRecapID");

// ScriptStruct Dialog.DialogConnection
// 0x0060 (0x0060 - 0x0000)
struct FDialogConnection final
{
public:
	int32                                         _PinIndex;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _Outcome;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _Label;                                            // 0x0018(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _Condition;                                        // 0x0028(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDialogObjectID                        _Target;                                           // 0x0038(0x0028)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogConnection) == 0x000008, "Wrong alignment on FDialogConnection");
static_assert(sizeof(FDialogConnection) == 0x000060, "Wrong size on FDialogConnection");
static_assert(offsetof(FDialogConnection, _PinIndex) == 0x000000, "Member 'FDialogConnection::_PinIndex' has a wrong offset!");
static_assert(offsetof(FDialogConnection, _Outcome) == 0x000008, "Member 'FDialogConnection::_Outcome' has a wrong offset!");
static_assert(offsetof(FDialogConnection, _Label) == 0x000018, "Member 'FDialogConnection::_Label' has a wrong offset!");
static_assert(offsetof(FDialogConnection, _Condition) == 0x000028, "Member 'FDialogConnection::_Condition' has a wrong offset!");
static_assert(offsetof(FDialogConnection, _Target) == 0x000038, "Member 'FDialogConnection::_Target' has a wrong offset!");

// ScriptStruct Dialog.DialogConnectionGroup
// 0x0010 (0x0010 - 0x0000)
struct FDialogConnectionGroup final
{
public:
	TArray<struct FDialogConnection>              _Connections;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogConnectionGroup) == 0x000008, "Wrong alignment on FDialogConnectionGroup");
static_assert(sizeof(FDialogConnectionGroup) == 0x000010, "Wrong size on FDialogConnectionGroup");
static_assert(offsetof(FDialogConnectionGroup, _Connections) == 0x000000, "Member 'FDialogConnectionGroup::_Connections' has a wrong offset!");

// ScriptStruct Dialog.DialogMember
// 0x0070 (0x0070 - 0x0000)
struct FDialogMember final
{
public:
	int32                                         _Type;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _MemberName;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _StringValue;                                      // 0x0018(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDialogObjectID                        _ObjectValue;                                      // 0x0028(0x0028)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDialogObjectID>                _ListValue;                                        // 0x0050(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FDialogConnectionGroup>         _ConnectionList;                                   // 0x0060(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogMember) == 0x000008, "Wrong alignment on FDialogMember");
static_assert(sizeof(FDialogMember) == 0x000070, "Wrong size on FDialogMember");
static_assert(offsetof(FDialogMember, _Type) == 0x000000, "Member 'FDialogMember::_Type' has a wrong offset!");
static_assert(offsetof(FDialogMember, _MemberName) == 0x000008, "Member 'FDialogMember::_MemberName' has a wrong offset!");
static_assert(offsetof(FDialogMember, _StringValue) == 0x000018, "Member 'FDialogMember::_StringValue' has a wrong offset!");
static_assert(offsetof(FDialogMember, _ObjectValue) == 0x000028, "Member 'FDialogMember::_ObjectValue' has a wrong offset!");
static_assert(offsetof(FDialogMember, _ListValue) == 0x000050, "Member 'FDialogMember::_ListValue' has a wrong offset!");
static_assert(offsetof(FDialogMember, _ConnectionList) == 0x000060, "Member 'FDialogMember::_ConnectionList' has a wrong offset!");

// ScriptStruct Dialog.DialogMembers
// 0x0020 (0x0020 - 0x0000)
struct FDialogMembers final
{
public:
	class FString                                 _Name;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDialogMember>                  _Members;                                          // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogMembers) == 0x000008, "Wrong alignment on FDialogMembers");
static_assert(sizeof(FDialogMembers) == 0x000020, "Wrong size on FDialogMembers");
static_assert(offsetof(FDialogMembers, _Name) == 0x000000, "Member 'FDialogMembers::_Name' has a wrong offset!");
static_assert(offsetof(FDialogMembers, _Members) == 0x000010, "Member 'FDialogMembers::_Members' has a wrong offset!");

// ScriptStruct Dialog.FlowPin
// 0x0030 (0x0030 - 0x0000)
struct FFlowPin final
{
public:
	uint8                                         _Index;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDialogObjectID                        _Reference;                                        // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFlowPin) == 0x000008, "Wrong alignment on FFlowPin");
static_assert(sizeof(FFlowPin) == 0x000030, "Wrong size on FFlowPin");
static_assert(offsetof(FFlowPin, _Index) == 0x000000, "Member 'FFlowPin::_Index' has a wrong offset!");
static_assert(offsetof(FFlowPin, _Reference) == 0x000008, "Member 'FFlowPin::_Reference' has a wrong offset!");

// ScriptStruct Dialog.DialogInfo
// 0x00C8 (0x00C8 - 0x0000)
struct FDialogInfo
{
public:
	bool                                          _IgnoreRange;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _IgnoreSubtitleRange;                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _SingleLine;                                       // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _Interactive;                                      // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _Unmanaged;                                        // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _Priotrity;                                        // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _InterruptPriority;                                // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _SubtitleRange;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _DialogRange;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDaiContext                            _Owner;                                            // 0x0010(0x0080)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FDaiContext>                    _Speakers;                                         // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_A0[0x20];                                      // 0x00A0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _OnlyManualSkip;                                   // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDialogInfo) == 0x000008, "Wrong alignment on FDialogInfo");
static_assert(sizeof(FDialogInfo) == 0x0000C8, "Wrong size on FDialogInfo");
static_assert(offsetof(FDialogInfo, _IgnoreRange) == 0x000000, "Member 'FDialogInfo::_IgnoreRange' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _IgnoreSubtitleRange) == 0x000001, "Member 'FDialogInfo::_IgnoreSubtitleRange' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _SingleLine) == 0x000002, "Member 'FDialogInfo::_SingleLine' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _Interactive) == 0x000003, "Member 'FDialogInfo::_Interactive' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _Unmanaged) == 0x000004, "Member 'FDialogInfo::_Unmanaged' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _Priotrity) == 0x000005, "Member 'FDialogInfo::_Priotrity' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _InterruptPriority) == 0x000006, "Member 'FDialogInfo::_InterruptPriority' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _SubtitleRange) == 0x000008, "Member 'FDialogInfo::_SubtitleRange' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _DialogRange) == 0x00000C, "Member 'FDialogInfo::_DialogRange' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _Owner) == 0x000010, "Member 'FDialogInfo::_Owner' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _Speakers) == 0x000090, "Member 'FDialogInfo::_Speakers' has a wrong offset!");
static_assert(offsetof(FDialogInfo, _OnlyManualSkip) == 0x0000C0, "Member 'FDialogInfo::_OnlyManualSkip' has a wrong offset!");

// ScriptStruct Dialog.DialogFullInfo
// 0x00B0 (0x0178 - 0x00C8)
struct FDialogFullInfo final : public FDialogInfo
{
public:
	struct FDaiConditions                         _Conditions;                                       // 0x00C8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FDialogEntryID                         _EntryID;                                          // 0x00F8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDialogDialog                          _DialogID;                                         // 0x0120(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDialogLine                            _LineID;                                           // 0x0148(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _MaxPlayCount;                                     // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _PlayCounter;                                      // 0x0174(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogFullInfo) == 0x000008, "Wrong alignment on FDialogFullInfo");
static_assert(sizeof(FDialogFullInfo) == 0x000178, "Wrong size on FDialogFullInfo");
static_assert(offsetof(FDialogFullInfo, _Conditions) == 0x0000C8, "Member 'FDialogFullInfo::_Conditions' has a wrong offset!");
static_assert(offsetof(FDialogFullInfo, _EntryID) == 0x0000F8, "Member 'FDialogFullInfo::_EntryID' has a wrong offset!");
static_assert(offsetof(FDialogFullInfo, _DialogID) == 0x000120, "Member 'FDialogFullInfo::_DialogID' has a wrong offset!");
static_assert(offsetof(FDialogFullInfo, _LineID) == 0x000148, "Member 'FDialogFullInfo::_LineID' has a wrong offset!");
static_assert(offsetof(FDialogFullInfo, _MaxPlayCount) == 0x000170, "Member 'FDialogFullInfo::_MaxPlayCount' has a wrong offset!");
static_assert(offsetof(FDialogFullInfo, _PlayCounter) == 0x000174, "Member 'FDialogFullInfo::_PlayCounter' has a wrong offset!");

// ScriptStruct Dialog.DialogTextLocalization
// 0x0070 (0x0078 - 0x0008)
struct FDialogTextLocalization final : public FTableRowBase
{
public:
	class FString                                 _Dialog;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _Speaker;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _Text;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _Translate;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _Directions;                                       // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        _VO;                                               // 0x0058(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogTextLocalization) == 0x000008, "Wrong alignment on FDialogTextLocalization");
static_assert(sizeof(FDialogTextLocalization) == 0x000078, "Wrong size on FDialogTextLocalization");
static_assert(offsetof(FDialogTextLocalization, _Dialog) == 0x000008, "Member 'FDialogTextLocalization::_Dialog' has a wrong offset!");
static_assert(offsetof(FDialogTextLocalization, _Speaker) == 0x000018, "Member 'FDialogTextLocalization::_Speaker' has a wrong offset!");
static_assert(offsetof(FDialogTextLocalization, _Text) == 0x000028, "Member 'FDialogTextLocalization::_Text' has a wrong offset!");
static_assert(offsetof(FDialogTextLocalization, _Translate) == 0x000038, "Member 'FDialogTextLocalization::_Translate' has a wrong offset!");
static_assert(offsetof(FDialogTextLocalization, _Directions) == 0x000048, "Member 'FDialogTextLocalization::_Directions' has a wrong offset!");
static_assert(offsetof(FDialogTextLocalization, _VO) == 0x000058, "Member 'FDialogTextLocalization::_VO' has a wrong offset!");

// ScriptStruct Dialog.BlairwitchDialogLineRow
// 0x00B8 (0x00C0 - 0x0008)
struct FBlairwitchDialogLineRow final : public FTableRowBase
{
public:
	class FString                                 _Speaker;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _Text;                                             // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _Directions;                                       // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _Loudness;                                         // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _Mastering;                                        // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _Note1;                                            // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _Note2;                                            // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _Note3;                                            // 0x0070(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _WaveName;                                         // 0x0080(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _WavePath;                                         // 0x0090(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        _WavePreview;                                      // 0x00A0(0x0020)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlairwitchDialogLineRow) == 0x000008, "Wrong alignment on FBlairwitchDialogLineRow");
static_assert(sizeof(FBlairwitchDialogLineRow) == 0x0000C0, "Wrong size on FBlairwitchDialogLineRow");
static_assert(offsetof(FBlairwitchDialogLineRow, _Speaker) == 0x000008, "Member 'FBlairwitchDialogLineRow::_Speaker' has a wrong offset!");
static_assert(offsetof(FBlairwitchDialogLineRow, _Text) == 0x000018, "Member 'FBlairwitchDialogLineRow::_Text' has a wrong offset!");
static_assert(offsetof(FBlairwitchDialogLineRow, _Directions) == 0x000028, "Member 'FBlairwitchDialogLineRow::_Directions' has a wrong offset!");
static_assert(offsetof(FBlairwitchDialogLineRow, _Loudness) == 0x000038, "Member 'FBlairwitchDialogLineRow::_Loudness' has a wrong offset!");
static_assert(offsetof(FBlairwitchDialogLineRow, _Mastering) == 0x000040, "Member 'FBlairwitchDialogLineRow::_Mastering' has a wrong offset!");
static_assert(offsetof(FBlairwitchDialogLineRow, _Note1) == 0x000050, "Member 'FBlairwitchDialogLineRow::_Note1' has a wrong offset!");
static_assert(offsetof(FBlairwitchDialogLineRow, _Note2) == 0x000060, "Member 'FBlairwitchDialogLineRow::_Note2' has a wrong offset!");
static_assert(offsetof(FBlairwitchDialogLineRow, _Note3) == 0x000070, "Member 'FBlairwitchDialogLineRow::_Note3' has a wrong offset!");
static_assert(offsetof(FBlairwitchDialogLineRow, _WaveName) == 0x000080, "Member 'FBlairwitchDialogLineRow::_WaveName' has a wrong offset!");
static_assert(offsetof(FBlairwitchDialogLineRow, _WavePath) == 0x000090, "Member 'FBlairwitchDialogLineRow::_WavePath' has a wrong offset!");
static_assert(offsetof(FBlairwitchDialogLineRow, _WavePreview) == 0x0000A0, "Member 'FBlairwitchDialogLineRow::_WavePreview' has a wrong offset!");

// ScriptStruct Dialog.WwiseDialogLineRow
// 0x00C0 (0x00C8 - 0x0008)
struct FWwiseDialogLineRow final : public FTableRowBase
{
public:
	class FString                                 _AudioFile;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _ObjectPath;                                       // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _Event;                                            // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _Notes;                                            // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _UsedEvent;                                        // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _IsWwise;                                          // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _Dialog;                                           // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _Speaker;                                          // 0x0070(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _Text;                                             // 0x0080(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _Directions;                                       // 0x0090(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _Loudness;                                         // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _Mastering;                                        // 0x00A8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _Note;                                             // 0x00B8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWwiseDialogLineRow) == 0x000008, "Wrong alignment on FWwiseDialogLineRow");
static_assert(sizeof(FWwiseDialogLineRow) == 0x0000C8, "Wrong size on FWwiseDialogLineRow");
static_assert(offsetof(FWwiseDialogLineRow, _AudioFile) == 0x000008, "Member 'FWwiseDialogLineRow::_AudioFile' has a wrong offset!");
static_assert(offsetof(FWwiseDialogLineRow, _ObjectPath) == 0x000018, "Member 'FWwiseDialogLineRow::_ObjectPath' has a wrong offset!");
static_assert(offsetof(FWwiseDialogLineRow, _Event) == 0x000028, "Member 'FWwiseDialogLineRow::_Event' has a wrong offset!");
static_assert(offsetof(FWwiseDialogLineRow, _Notes) == 0x000038, "Member 'FWwiseDialogLineRow::_Notes' has a wrong offset!");
static_assert(offsetof(FWwiseDialogLineRow, _UsedEvent) == 0x000048, "Member 'FWwiseDialogLineRow::_UsedEvent' has a wrong offset!");
static_assert(offsetof(FWwiseDialogLineRow, _IsWwise) == 0x000058, "Member 'FWwiseDialogLineRow::_IsWwise' has a wrong offset!");
static_assert(offsetof(FWwiseDialogLineRow, _Dialog) == 0x000060, "Member 'FWwiseDialogLineRow::_Dialog' has a wrong offset!");
static_assert(offsetof(FWwiseDialogLineRow, _Speaker) == 0x000070, "Member 'FWwiseDialogLineRow::_Speaker' has a wrong offset!");
static_assert(offsetof(FWwiseDialogLineRow, _Text) == 0x000080, "Member 'FWwiseDialogLineRow::_Text' has a wrong offset!");
static_assert(offsetof(FWwiseDialogLineRow, _Directions) == 0x000090, "Member 'FWwiseDialogLineRow::_Directions' has a wrong offset!");
static_assert(offsetof(FWwiseDialogLineRow, _Loudness) == 0x0000A0, "Member 'FWwiseDialogLineRow::_Loudness' has a wrong offset!");
static_assert(offsetof(FWwiseDialogLineRow, _Mastering) == 0x0000A8, "Member 'FWwiseDialogLineRow::_Mastering' has a wrong offset!");
static_assert(offsetof(FWwiseDialogLineRow, _Note) == 0x0000B8, "Member 'FWwiseDialogLineRow::_Note' has a wrong offset!");

// ScriptStruct Dialog.NameSelector
// 0x0020 (0x0020 - 0x0000)
struct FNameSelector final
{
public:
	class FName                                   _Name;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           _List;                                             // 0x0008(0x0010)(Edit, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	int32                                         _Index;                                            // 0x0018(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNameSelector) == 0x000008, "Wrong alignment on FNameSelector");
static_assert(sizeof(FNameSelector) == 0x000020, "Wrong size on FNameSelector");
static_assert(offsetof(FNameSelector, _Name) == 0x000000, "Member 'FNameSelector::_Name' has a wrong offset!");
static_assert(offsetof(FNameSelector, _List) == 0x000008, "Member 'FNameSelector::_List' has a wrong offset!");
static_assert(offsetof(FNameSelector, _Index) == 0x000018, "Member 'FNameSelector::_Index' has a wrong offset!");

// ScriptStruct Dialog.DelayedFlowAction
// 0x0018 (0x0018 - 0x0000)
struct FDelayedFlowAction final
{
public:
	class UFlowAction*                            _Action;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _WaitForCall;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorComponent*                        _Caller;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelayedFlowAction) == 0x000008, "Wrong alignment on FDelayedFlowAction");
static_assert(sizeof(FDelayedFlowAction) == 0x000018, "Wrong size on FDelayedFlowAction");
static_assert(offsetof(FDelayedFlowAction, _Action) == 0x000000, "Member 'FDelayedFlowAction::_Action' has a wrong offset!");
static_assert(offsetof(FDelayedFlowAction, _WaitForCall) == 0x000008, "Member 'FDelayedFlowAction::_WaitForCall' has a wrong offset!");
static_assert(offsetof(FDelayedFlowAction, _Caller) == 0x000010, "Member 'FDelayedFlowAction::_Caller' has a wrong offset!");

// ScriptStruct Dialog.RunningFlowAction
// 0x0010 (0x0010 - 0x0000)
struct FRunningFlowAction final
{
public:
	class UFlowAction*                            _Action;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        _Caller;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRunningFlowAction) == 0x000008, "Wrong alignment on FRunningFlowAction");
static_assert(sizeof(FRunningFlowAction) == 0x000010, "Wrong size on FRunningFlowAction");
static_assert(offsetof(FRunningFlowAction, _Action) == 0x000000, "Member 'FRunningFlowAction::_Action' has a wrong offset!");
static_assert(offsetof(FRunningFlowAction, _Caller) == 0x000008, "Member 'FRunningFlowAction::_Caller' has a wrong offset!");

// ScriptStruct Dialog.DialogVoiceAttenuation
// 0x000C (0x000C - 0x0000)
struct FDialogVoiceAttenuation final
{
public:
	bool                                          _EnableAttenuation;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _FalloffRadius;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _FalloffDistance;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogVoiceAttenuation) == 0x000004, "Wrong alignment on FDialogVoiceAttenuation");
static_assert(sizeof(FDialogVoiceAttenuation) == 0x00000C, "Wrong size on FDialogVoiceAttenuation");
static_assert(offsetof(FDialogVoiceAttenuation, _EnableAttenuation) == 0x000000, "Member 'FDialogVoiceAttenuation::_EnableAttenuation' has a wrong offset!");
static_assert(offsetof(FDialogVoiceAttenuation, _FalloffRadius) == 0x000004, "Member 'FDialogVoiceAttenuation::_FalloffRadius' has a wrong offset!");
static_assert(offsetof(FDialogVoiceAttenuation, _FalloffDistance) == 0x000008, "Member 'FDialogVoiceAttenuation::_FalloffDistance' has a wrong offset!");

// ScriptStruct Dialog.ItemState
// 0x0050 (0x0050 - 0x0000)
struct FItemState final
{
public:
	TMap<class FName, int32>                      _Fields;                                           // 0x0000(0x0050)(SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemState) == 0x000008, "Wrong alignment on FItemState");
static_assert(sizeof(FItemState) == 0x000050, "Wrong size on FItemState");
static_assert(offsetof(FItemState, _Fields) == 0x000000, "Member 'FItemState::_Fields' has a wrong offset!");

// ScriptStruct Dialog.DataState
// 0x0060 (0x0060 - 0x0000)
struct FDataState final
{
public:
	TArray<uint8>                                 _Blob;                                             // 0x0000(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	TMap<int32, struct FItemState>                _ItemStates;                                       // 0x0010(0x0050)(SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataState) == 0x000008, "Wrong alignment on FDataState");
static_assert(sizeof(FDataState) == 0x000060, "Wrong size on FDataState");
static_assert(offsetof(FDataState, _Blob) == 0x000000, "Member 'FDataState::_Blob' has a wrong offset!");
static_assert(offsetof(FDataState, _ItemStates) == 0x000010, "Member 'FDataState::_ItemStates' has a wrong offset!");

// ScriptStruct Dialog.FlowText
// 0x0038 (0x0038 - 0x0000)
struct FFlowText final
{
public:
	class FString                                 _Text;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _Localizable;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _Key;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _ShortID;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFlowText) == 0x000008, "Wrong alignment on FFlowText");
static_assert(sizeof(FFlowText) == 0x000038, "Wrong size on FFlowText");
static_assert(offsetof(FFlowText, _Text) == 0x000000, "Member 'FFlowText::_Text' has a wrong offset!");
static_assert(offsetof(FFlowText, _Localizable) == 0x000010, "Member 'FFlowText::_Localizable' has a wrong offset!");
static_assert(offsetof(FFlowText, _Key) == 0x000018, "Member 'FFlowText::_Key' has a wrong offset!");
static_assert(offsetof(FFlowText, _ShortID) == 0x000028, "Member 'FFlowText::_ShortID' has a wrong offset!");

// ScriptStruct Dialog.ReplicaVoice
// 0x0010 (0x0018 - 0x0008)
struct FReplicaVoice final : public FTableRowBase
{
public:
	class FString                                 UUID;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReplicaVoice) == 0x000008, "Wrong alignment on FReplicaVoice");
static_assert(sizeof(FReplicaVoice) == 0x000018, "Wrong size on FReplicaVoice");
static_assert(offsetof(FReplicaVoice, UUID) == 0x000008, "Member 'FReplicaVoice::UUID' has a wrong offset!");

}

