#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Being

#include "Basic.hpp"

#include "Being_structs.hpp"
#include "AIModule_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK::Params
{

// Function Being.BeingSteering.ClearFlag_DontStop
// 0x0001 (0x0001 - 0x0000)
struct BeingSteering_ClearFlag_DontStop final
{
public:
	uint8                                         Priority;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingSteering_ClearFlag_DontStop) == 0x000001, "Wrong alignment on BeingSteering_ClearFlag_DontStop");
static_assert(sizeof(BeingSteering_ClearFlag_DontStop) == 0x000001, "Wrong size on BeingSteering_ClearFlag_DontStop");
static_assert(offsetof(BeingSteering_ClearFlag_DontStop, Priority) == 0x000000, "Member 'BeingSteering_ClearFlag_DontStop::Priority' has a wrong offset!");

// Function Being.BeingSteering.ClearForcedVelocity
// 0x0002 (0x0002 - 0x0000)
struct BeingSteering_ClearForcedVelocity final
{
public:
	bool                                          Speed;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Yaw;                                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingSteering_ClearForcedVelocity) == 0x000001, "Wrong alignment on BeingSteering_ClearForcedVelocity");
static_assert(sizeof(BeingSteering_ClearForcedVelocity) == 0x000002, "Wrong size on BeingSteering_ClearForcedVelocity");
static_assert(offsetof(BeingSteering_ClearForcedVelocity, Speed) == 0x000000, "Member 'BeingSteering_ClearForcedVelocity::Speed' has a wrong offset!");
static_assert(offsetof(BeingSteering_ClearForcedVelocity, Yaw) == 0x000001, "Member 'BeingSteering_ClearForcedVelocity::Yaw' has a wrong offset!");

// Function Being.BeingSteering.ForceSpeed
// 0x000C (0x000C - 0x0000)
struct BeingSteering_ForceSpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Deceleration;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstantMove;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingSteering_ForceSpeed) == 0x000004, "Wrong alignment on BeingSteering_ForceSpeed");
static_assert(sizeof(BeingSteering_ForceSpeed) == 0x00000C, "Wrong size on BeingSteering_ForceSpeed");
static_assert(offsetof(BeingSteering_ForceSpeed, Speed) == 0x000000, "Member 'BeingSteering_ForceSpeed::Speed' has a wrong offset!");
static_assert(offsetof(BeingSteering_ForceSpeed, Deceleration) == 0x000004, "Member 'BeingSteering_ForceSpeed::Deceleration' has a wrong offset!");
static_assert(offsetof(BeingSteering_ForceSpeed, InstantMove) == 0x000008, "Member 'BeingSteering_ForceSpeed::InstantMove' has a wrong offset!");

// Function Being.BeingSteering.ForceYaw
// 0x0008 (0x0008 - 0x0000)
struct BeingSteering_ForceYaw final
{
public:
	float                                         Yaw;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingSteering_ForceYaw) == 0x000004, "Wrong alignment on BeingSteering_ForceYaw");
static_assert(sizeof(BeingSteering_ForceYaw) == 0x000008, "Wrong size on BeingSteering_ForceYaw");
static_assert(offsetof(BeingSteering_ForceYaw, Yaw) == 0x000000, "Member 'BeingSteering_ForceYaw::Yaw' has a wrong offset!");
static_assert(offsetof(BeingSteering_ForceYaw, Tolerance) == 0x000004, "Member 'BeingSteering_ForceYaw::Tolerance' has a wrong offset!");

// Function Being.BeingSteering.SetFlag_DontStop
// 0x0002 (0x0002 - 0x0000)
struct BeingSteering_SetFlag_DontStop final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingSteering_SetFlag_DontStop) == 0x000001, "Wrong alignment on BeingSteering_SetFlag_DontStop");
static_assert(sizeof(BeingSteering_SetFlag_DontStop) == 0x000002, "Wrong size on BeingSteering_SetFlag_DontStop");
static_assert(offsetof(BeingSteering_SetFlag_DontStop, Flag) == 0x000000, "Member 'BeingSteering_SetFlag_DontStop::Flag' has a wrong offset!");
static_assert(offsetof(BeingSteering_SetFlag_DontStop, Priority) == 0x000001, "Member 'BeingSteering_SetFlag_DontStop::Priority' has a wrong offset!");

// Function Being.BeingSteering.SetFlag_ForceStop
// 0x0001 (0x0001 - 0x0000)
struct BeingSteering_SetFlag_ForceStop final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingSteering_SetFlag_ForceStop) == 0x000001, "Wrong alignment on BeingSteering_SetFlag_ForceStop");
static_assert(sizeof(BeingSteering_SetFlag_ForceStop) == 0x000001, "Wrong size on BeingSteering_SetFlag_ForceStop");
static_assert(offsetof(BeingSteering_SetFlag_ForceStop, Flag) == 0x000000, "Member 'BeingSteering_SetFlag_ForceStop::Flag' has a wrong offset!");

// Function Being.BeingSteering.UpdateSteering
// 0x0004 (0x0004 - 0x0000)
struct BeingSteering_UpdateSteering final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingSteering_UpdateSteering) == 0x000004, "Wrong alignment on BeingSteering_UpdateSteering");
static_assert(sizeof(BeingSteering_UpdateSteering) == 0x000004, "Wrong size on BeingSteering_UpdateSteering");
static_assert(offsetof(BeingSteering_UpdateSteering, DeltaTime) == 0x000000, "Member 'BeingSteering_UpdateSteering::DeltaTime' has a wrong offset!");

// Function Being.BeingStat.NeedsUpdateModifier
// 0x0010 (0x0010 - 0x0000)
struct BeingStat_NeedsUpdateModifier final
{
public:
	TSubclassOf<class UDaiFloatModifier>          Modclass;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingStat_NeedsUpdateModifier) == 0x000008, "Wrong alignment on BeingStat_NeedsUpdateModifier");
static_assert(sizeof(BeingStat_NeedsUpdateModifier) == 0x000010, "Wrong size on BeingStat_NeedsUpdateModifier");
static_assert(offsetof(BeingStat_NeedsUpdateModifier, Modclass) == 0x000000, "Member 'BeingStat_NeedsUpdateModifier::Modclass' has a wrong offset!");
static_assert(offsetof(BeingStat_NeedsUpdateModifier, Name_0) == 0x000008, "Member 'BeingStat_NeedsUpdateModifier::Name_0' has a wrong offset!");

// Function Being.BeingStat.FindFloatModifier
// 0x0018 (0x0018 - 0x0000)
struct BeingStat_FindFloatModifier final
{
public:
	TSubclassOf<class UDaiFloatModifier>          Modclass;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDaiFloatModifier*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingStat_FindFloatModifier) == 0x000008, "Wrong alignment on BeingStat_FindFloatModifier");
static_assert(sizeof(BeingStat_FindFloatModifier) == 0x000018, "Wrong size on BeingStat_FindFloatModifier");
static_assert(offsetof(BeingStat_FindFloatModifier, Modclass) == 0x000000, "Member 'BeingStat_FindFloatModifier::Modclass' has a wrong offset!");
static_assert(offsetof(BeingStat_FindFloatModifier, Name_0) == 0x000008, "Member 'BeingStat_FindFloatModifier::Name_0' has a wrong offset!");
static_assert(offsetof(BeingStat_FindFloatModifier, ReturnValue) == 0x000010, "Member 'BeingStat_FindFloatModifier::ReturnValue' has a wrong offset!");

// Function Being.BeingStat.IsUpToDate
// 0x0001 (0x0001 - 0x0000)
struct BeingStat_IsUpToDate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingStat_IsUpToDate) == 0x000001, "Wrong alignment on BeingStat_IsUpToDate");
static_assert(sizeof(BeingStat_IsUpToDate) == 0x000001, "Wrong size on BeingStat_IsUpToDate");
static_assert(offsetof(BeingStat_IsUpToDate, ReturnValue) == 0x000000, "Member 'BeingStat_IsUpToDate::ReturnValue' has a wrong offset!");

// Function Being.BeingVisibilityLevelStat.SetVisibilityLevel
// 0x0004 (0x0004 - 0x0000)
struct BeingVisibilityLevelStat_SetVisibilityLevel final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingVisibilityLevelStat_SetVisibilityLevel) == 0x000004, "Wrong alignment on BeingVisibilityLevelStat_SetVisibilityLevel");
static_assert(sizeof(BeingVisibilityLevelStat_SetVisibilityLevel) == 0x000004, "Wrong size on BeingVisibilityLevelStat_SetVisibilityLevel");
static_assert(offsetof(BeingVisibilityLevelStat_SetVisibilityLevel, Value) == 0x000000, "Member 'BeingVisibilityLevelStat_SetVisibilityLevel::Value' has a wrong offset!");

// Function Being.BeingVisibilityLevelStat.GetVisibilityLevel
// 0x0004 (0x0004 - 0x0000)
struct BeingVisibilityLevelStat_GetVisibilityLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingVisibilityLevelStat_GetVisibilityLevel) == 0x000004, "Wrong alignment on BeingVisibilityLevelStat_GetVisibilityLevel");
static_assert(sizeof(BeingVisibilityLevelStat_GetVisibilityLevel) == 0x000004, "Wrong size on BeingVisibilityLevelStat_GetVisibilityLevel");
static_assert(offsetof(BeingVisibilityLevelStat_GetVisibilityLevel, ReturnValue) == 0x000000, "Member 'BeingVisibilityLevelStat_GetVisibilityLevel::ReturnValue' has a wrong offset!");

// Function Being.BeingVisionLevelStat.SetVisionLevel
// 0x0004 (0x0004 - 0x0000)
struct BeingVisionLevelStat_SetVisionLevel final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingVisionLevelStat_SetVisionLevel) == 0x000004, "Wrong alignment on BeingVisionLevelStat_SetVisionLevel");
static_assert(sizeof(BeingVisionLevelStat_SetVisionLevel) == 0x000004, "Wrong size on BeingVisionLevelStat_SetVisionLevel");
static_assert(offsetof(BeingVisionLevelStat_SetVisionLevel, Value) == 0x000000, "Member 'BeingVisionLevelStat_SetVisionLevel::Value' has a wrong offset!");

// Function Being.BeingVisionLevelStat.GetLevelOfVisionTheActor
// 0x0010 (0x0010 - 0x0000)
struct BeingVisionLevelStat_GetLevelOfVisionTheActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingVisionLevelStat_GetLevelOfVisionTheActor) == 0x000008, "Wrong alignment on BeingVisionLevelStat_GetLevelOfVisionTheActor");
static_assert(sizeof(BeingVisionLevelStat_GetLevelOfVisionTheActor) == 0x000010, "Wrong size on BeingVisionLevelStat_GetLevelOfVisionTheActor");
static_assert(offsetof(BeingVisionLevelStat_GetLevelOfVisionTheActor, Actor) == 0x000000, "Member 'BeingVisionLevelStat_GetLevelOfVisionTheActor::Actor' has a wrong offset!");
static_assert(offsetof(BeingVisionLevelStat_GetLevelOfVisionTheActor, ReturnValue) == 0x000008, "Member 'BeingVisionLevelStat_GetLevelOfVisionTheActor::ReturnValue' has a wrong offset!");

// Function Being.BeingVisionLevelStat.GetVisionLevel
// 0x0004 (0x0004 - 0x0000)
struct BeingVisionLevelStat_GetVisionLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingVisionLevelStat_GetVisionLevel) == 0x000004, "Wrong alignment on BeingVisionLevelStat_GetVisionLevel");
static_assert(sizeof(BeingVisionLevelStat_GetVisionLevel) == 0x000004, "Wrong size on BeingVisionLevelStat_GetVisionLevel");
static_assert(offsetof(BeingVisionLevelStat_GetVisionLevel, ReturnValue) == 0x000000, "Member 'BeingVisionLevelStat_GetVisionLevel::ReturnValue' has a wrong offset!");

// Function Being.BeingVisionLevelStat.GetVisionLevelTheActor
// 0x0010 (0x0010 - 0x0000)
struct BeingVisionLevelStat_GetVisionLevelTheActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingVisionLevelStat_GetVisionLevelTheActor) == 0x000008, "Wrong alignment on BeingVisionLevelStat_GetVisionLevelTheActor");
static_assert(sizeof(BeingVisionLevelStat_GetVisionLevelTheActor) == 0x000010, "Wrong size on BeingVisionLevelStat_GetVisionLevelTheActor");
static_assert(offsetof(BeingVisionLevelStat_GetVisionLevelTheActor, Actor) == 0x000000, "Member 'BeingVisionLevelStat_GetVisionLevelTheActor::Actor' has a wrong offset!");
static_assert(offsetof(BeingVisionLevelStat_GetVisionLevelTheActor, ReturnValue) == 0x000008, "Member 'BeingVisionLevelStat_GetVisionLevelTheActor::ReturnValue' has a wrong offset!");

// Function Being.BeingVisionModStat.SetModLevel
// 0x0004 (0x0004 - 0x0000)
struct BeingVisionModStat_SetModLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingVisionModStat_SetModLevel) == 0x000004, "Wrong alignment on BeingVisionModStat_SetModLevel");
static_assert(sizeof(BeingVisionModStat_SetModLevel) == 0x000004, "Wrong size on BeingVisionModStat_SetModLevel");
static_assert(offsetof(BeingVisionModStat_SetModLevel, Level) == 0x000000, "Member 'BeingVisionModStat_SetModLevel::Level' has a wrong offset!");

// Function Being.BeingAction.CreateActionInstance
// 0x0018 (0x0018 - 0x0000)
struct BeingAction_CreateActionInstance final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UBeingAction>               ActionClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBeingAction*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingAction_CreateActionInstance) == 0x000008, "Wrong alignment on BeingAction_CreateActionInstance");
static_assert(sizeof(BeingAction_CreateActionInstance) == 0x000018, "Wrong size on BeingAction_CreateActionInstance");
static_assert(offsetof(BeingAction_CreateActionInstance, WorldContextObject) == 0x000000, "Member 'BeingAction_CreateActionInstance::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BeingAction_CreateActionInstance, ActionClass) == 0x000008, "Member 'BeingAction_CreateActionInstance::ActionClass' has a wrong offset!");
static_assert(offsetof(BeingAction_CreateActionInstance, ReturnValue) == 0x000010, "Member 'BeingAction_CreateActionInstance::ReturnValue' has a wrong offset!");

// Function Being.BeingAction.Abort
// 0x0002 (0x0002 - 0x0000)
struct BeingAction_Abort final
{
public:
	bool                                          Force;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPawnActionAbortState                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingAction_Abort) == 0x000001, "Wrong alignment on BeingAction_Abort");
static_assert(sizeof(BeingAction_Abort) == 0x000002, "Wrong size on BeingAction_Abort");
static_assert(offsetof(BeingAction_Abort, Force) == 0x000000, "Member 'BeingAction_Abort::Force' has a wrong offset!");
static_assert(offsetof(BeingAction_Abort, ReturnValue) == 0x000001, "Member 'BeingAction_Abort::ReturnValue' has a wrong offset!");

// Function Being.BeingAction.ActionFinished
// 0x0010 (0x0010 - 0x0000)
struct BeingAction_ActionFinished final
{
public:
	class APawn*                                  ControlledPawn;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPawnActionResult                             WithResult;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingAction_ActionFinished) == 0x000008, "Wrong alignment on BeingAction_ActionFinished");
static_assert(sizeof(BeingAction_ActionFinished) == 0x000010, "Wrong size on BeingAction_ActionFinished");
static_assert(offsetof(BeingAction_ActionFinished, ControlledPawn) == 0x000000, "Member 'BeingAction_ActionFinished::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BeingAction_ActionFinished, WithResult) == 0x000008, "Member 'BeingAction_ActionFinished::WithResult' has a wrong offset!");

// Function Being.BeingAction.ActionInit
// 0x0008 (0x0008 - 0x0000)
struct BeingAction_ActionInit final
{
public:
	class APawn*                                  ControlledPawn;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingAction_ActionInit) == 0x000008, "Wrong alignment on BeingAction_ActionInit");
static_assert(sizeof(BeingAction_ActionInit) == 0x000008, "Wrong size on BeingAction_ActionInit");
static_assert(offsetof(BeingAction_ActionInit, ControlledPawn) == 0x000000, "Member 'BeingAction_ActionInit::ControlledPawn' has a wrong offset!");

// Function Being.BeingAction.ActionStart
// 0x0008 (0x0008 - 0x0000)
struct BeingAction_ActionStart final
{
public:
	class APawn*                                  ControlledPawn;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingAction_ActionStart) == 0x000008, "Wrong alignment on BeingAction_ActionStart");
static_assert(sizeof(BeingAction_ActionStart) == 0x000008, "Wrong size on BeingAction_ActionStart");
static_assert(offsetof(BeingAction_ActionStart, ControlledPawn) == 0x000000, "Member 'BeingAction_ActionStart::ControlledPawn' has a wrong offset!");

// Function Being.BeingAction.ActionTick
// 0x0010 (0x0010 - 0x0000)
struct BeingAction_ActionTick final
{
public:
	class APawn*                                  ControlledPawn;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaSeconds;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingAction_ActionTick) == 0x000008, "Wrong alignment on BeingAction_ActionTick");
static_assert(sizeof(BeingAction_ActionTick) == 0x000010, "Wrong size on BeingAction_ActionTick");
static_assert(offsetof(BeingAction_ActionTick, ControlledPawn) == 0x000000, "Member 'BeingAction_ActionTick::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BeingAction_ActionTick, DeltaSeconds) == 0x000008, "Member 'BeingAction_ActionTick::DeltaSeconds' has a wrong offset!");

// Function Being.BeingAction.Finish
// 0x0001 (0x0001 - 0x0000)
struct BeingAction_Finish final
{
public:
	EPawnActionResult                             WithResult;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingAction_Finish) == 0x000001, "Wrong alignment on BeingAction_Finish");
static_assert(sizeof(BeingAction_Finish) == 0x000001, "Wrong size on BeingAction_Finish");
static_assert(offsetof(BeingAction_Finish, WithResult) == 0x000000, "Member 'BeingAction_Finish::WithResult' has a wrong offset!");

// Function Being.BeingAction.IsActive
// 0x0001 (0x0001 - 0x0000)
struct BeingAction_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingAction_IsActive) == 0x000001, "Wrong alignment on BeingAction_IsActive");
static_assert(sizeof(BeingAction_IsActive) == 0x000001, "Wrong size on BeingAction_IsActive");
static_assert(offsetof(BeingAction_IsActive, ReturnValue) == 0x000000, "Member 'BeingAction_IsActive::ReturnValue' has a wrong offset!");

// Function Being.BeingAction.IsBeingAborted
// 0x0001 (0x0001 - 0x0000)
struct BeingAction_IsBeingAborted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingAction_IsBeingAborted) == 0x000001, "Wrong alignment on BeingAction_IsBeingAborted");
static_assert(sizeof(BeingAction_IsBeingAborted) == 0x000001, "Wrong size on BeingAction_IsBeingAborted");
static_assert(offsetof(BeingAction_IsBeingAborted, ReturnValue) == 0x000000, "Member 'BeingAction_IsBeingAborted::ReturnValue' has a wrong offset!");

// Function Being.BeingAction.IsFinished
// 0x0001 (0x0001 - 0x0000)
struct BeingAction_IsFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingAction_IsFinished) == 0x000001, "Wrong alignment on BeingAction_IsFinished");
static_assert(sizeof(BeingAction_IsFinished) == 0x000001, "Wrong size on BeingAction_IsFinished");
static_assert(offsetof(BeingAction_IsFinished, ReturnValue) == 0x000000, "Member 'BeingAction_IsFinished::ReturnValue' has a wrong offset!");

// Function Being.BeingActionsComponent.AbortActionsByClass
// 0x0010 (0x0010 - 0x0000)
struct BeingActionsComponent_AbortActionsByClass final
{
public:
	TSubclassOf<class UBeingAction>               ActionClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Exact;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingActionsComponent_AbortActionsByClass) == 0x000008, "Wrong alignment on BeingActionsComponent_AbortActionsByClass");
static_assert(sizeof(BeingActionsComponent_AbortActionsByClass) == 0x000010, "Wrong size on BeingActionsComponent_AbortActionsByClass");
static_assert(offsetof(BeingActionsComponent_AbortActionsByClass, ActionClass) == 0x000000, "Member 'BeingActionsComponent_AbortActionsByClass::ActionClass' has a wrong offset!");
static_assert(offsetof(BeingActionsComponent_AbortActionsByClass, Exact) == 0x000008, "Member 'BeingActionsComponent_AbortActionsByClass::Exact' has a wrong offset!");
static_assert(offsetof(BeingActionsComponent_AbortActionsByClass, ReturnValue) == 0x00000C, "Member 'BeingActionsComponent_AbortActionsByClass::ReturnValue' has a wrong offset!");

// Function Being.BeingActionsComponent.AbortActionsByPriority
// 0x0008 (0x0008 - 0x0000)
struct BeingActionsComponent_AbortActionsByPriority final
{
public:
	EAIRequestPriority                            Priority;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Exact;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingActionsComponent_AbortActionsByPriority) == 0x000004, "Wrong alignment on BeingActionsComponent_AbortActionsByPriority");
static_assert(sizeof(BeingActionsComponent_AbortActionsByPriority) == 0x000008, "Wrong size on BeingActionsComponent_AbortActionsByPriority");
static_assert(offsetof(BeingActionsComponent_AbortActionsByPriority, Priority) == 0x000000, "Member 'BeingActionsComponent_AbortActionsByPriority::Priority' has a wrong offset!");
static_assert(offsetof(BeingActionsComponent_AbortActionsByPriority, Exact) == 0x000001, "Member 'BeingActionsComponent_AbortActionsByPriority::Exact' has a wrong offset!");
static_assert(offsetof(BeingActionsComponent_AbortActionsByPriority, ReturnValue) == 0x000004, "Member 'BeingActionsComponent_AbortActionsByPriority::ReturnValue' has a wrong offset!");

// Function Being.BeingActionsComponent.AbortActionsInstigatedBy
// 0x0010 (0x0010 - 0x0000)
struct BeingActionsComponent_AbortActionsInstigatedBy final
{
public:
	const class UObject*                          Instigator;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingActionsComponent_AbortActionsInstigatedBy) == 0x000008, "Wrong alignment on BeingActionsComponent_AbortActionsInstigatedBy");
static_assert(sizeof(BeingActionsComponent_AbortActionsInstigatedBy) == 0x000010, "Wrong size on BeingActionsComponent_AbortActionsInstigatedBy");
static_assert(offsetof(BeingActionsComponent_AbortActionsInstigatedBy, Instigator) == 0x000000, "Member 'BeingActionsComponent_AbortActionsInstigatedBy::Instigator' has a wrong offset!");
static_assert(offsetof(BeingActionsComponent_AbortActionsInstigatedBy, ReturnValue) == 0x000008, "Member 'BeingActionsComponent_AbortActionsInstigatedBy::ReturnValue' has a wrong offset!");

// Function Being.BeingActionsComponent.AddAction
// 0x0020 (0x0020 - 0x0000)
struct BeingActionsComponent_AddAction final
{
public:
	class UBeingAction*                           Action;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIRequestPriority                            Priority;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Instigator;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingActionsComponent_AddAction) == 0x000008, "Wrong alignment on BeingActionsComponent_AddAction");
static_assert(sizeof(BeingActionsComponent_AddAction) == 0x000020, "Wrong size on BeingActionsComponent_AddAction");
static_assert(offsetof(BeingActionsComponent_AddAction, Action) == 0x000000, "Member 'BeingActionsComponent_AddAction::Action' has a wrong offset!");
static_assert(offsetof(BeingActionsComponent_AddAction, Priority) == 0x000008, "Member 'BeingActionsComponent_AddAction::Priority' has a wrong offset!");
static_assert(offsetof(BeingActionsComponent_AddAction, Instigator) == 0x000010, "Member 'BeingActionsComponent_AddAction::Instigator' has a wrong offset!");
static_assert(offsetof(BeingActionsComponent_AddAction, ReturnValue) == 0x000018, "Member 'BeingActionsComponent_AddAction::ReturnValue' has a wrong offset!");

// Function Being.BeingActionsComponent.OnCurrentActionEvent
// 0x0010 (0x0010 - 0x0000)
struct BeingActionsComponent_OnCurrentActionEvent final
{
public:
	class UBeingAction*                           Action;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBeingActionEventType                         EventType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingActionsComponent_OnCurrentActionEvent) == 0x000008, "Wrong alignment on BeingActionsComponent_OnCurrentActionEvent");
static_assert(sizeof(BeingActionsComponent_OnCurrentActionEvent) == 0x000010, "Wrong size on BeingActionsComponent_OnCurrentActionEvent");
static_assert(offsetof(BeingActionsComponent_OnCurrentActionEvent, Action) == 0x000000, "Member 'BeingActionsComponent_OnCurrentActionEvent::Action' has a wrong offset!");
static_assert(offsetof(BeingActionsComponent_OnCurrentActionEvent, EventType) == 0x000008, "Member 'BeingActionsComponent_OnCurrentActionEvent::EventType' has a wrong offset!");

// Function Being.BeingActionsComponent.GetCurrentAction
// 0x0008 (0x0008 - 0x0000)
struct BeingActionsComponent_GetCurrentAction final
{
public:
	class UBeingAction*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingActionsComponent_GetCurrentAction) == 0x000008, "Wrong alignment on BeingActionsComponent_GetCurrentAction");
static_assert(sizeof(BeingActionsComponent_GetCurrentAction) == 0x000008, "Wrong size on BeingActionsComponent_GetCurrentAction");
static_assert(offsetof(BeingActionsComponent_GetCurrentAction, ReturnValue) == 0x000000, "Member 'BeingActionsComponent_GetCurrentAction::ReturnValue' has a wrong offset!");

// Function Being.BeingActionsComponent.HasAction
// 0x0010 (0x0010 - 0x0000)
struct BeingActionsComponent_HasAction final
{
public:
	TSubclassOf<class UBeingAction>               ActionClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingActionsComponent_HasAction) == 0x000008, "Wrong alignment on BeingActionsComponent_HasAction");
static_assert(sizeof(BeingActionsComponent_HasAction) == 0x000010, "Wrong size on BeingActionsComponent_HasAction");
static_assert(offsetof(BeingActionsComponent_HasAction, ActionClass) == 0x000000, "Member 'BeingActionsComponent_HasAction::ActionClass' has a wrong offset!");
static_assert(offsetof(BeingActionsComponent_HasAction, ReturnValue) == 0x000008, "Member 'BeingActionsComponent_HasAction::ReturnValue' has a wrong offset!");

// Function Being.BeingActionsComponent.HasAnyAction
// 0x0001 (0x0001 - 0x0000)
struct BeingActionsComponent_HasAnyAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingActionsComponent_HasAnyAction) == 0x000001, "Wrong alignment on BeingActionsComponent_HasAnyAction");
static_assert(sizeof(BeingActionsComponent_HasAnyAction) == 0x000001, "Wrong size on BeingActionsComponent_HasAnyAction");
static_assert(offsetof(BeingActionsComponent_HasAnyAction, ReturnValue) == 0x000000, "Member 'BeingActionsComponent_HasAnyAction::ReturnValue' has a wrong offset!");

// Function Being.BeingActionsComponent.IsActionActive
// 0x0010 (0x0010 - 0x0000)
struct BeingActionsComponent_IsActionActive final
{
public:
	TSubclassOf<class UBeingAction>               ActionClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingActionsComponent_IsActionActive) == 0x000008, "Wrong alignment on BeingActionsComponent_IsActionActive");
static_assert(sizeof(BeingActionsComponent_IsActionActive) == 0x000010, "Wrong size on BeingActionsComponent_IsActionActive");
static_assert(offsetof(BeingActionsComponent_IsActionActive, ActionClass) == 0x000000, "Member 'BeingActionsComponent_IsActionActive::ActionClass' has a wrong offset!");
static_assert(offsetof(BeingActionsComponent_IsActionActive, ReturnValue) == 0x000008, "Member 'BeingActionsComponent_IsActionActive::ReturnValue' has a wrong offset!");

// Function Being.BeingAggroLevelStat.SetAggroLevel
// 0x0004 (0x0004 - 0x0000)
struct BeingAggroLevelStat_SetAggroLevel final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingAggroLevelStat_SetAggroLevel) == 0x000004, "Wrong alignment on BeingAggroLevelStat_SetAggroLevel");
static_assert(sizeof(BeingAggroLevelStat_SetAggroLevel) == 0x000004, "Wrong size on BeingAggroLevelStat_SetAggroLevel");
static_assert(offsetof(BeingAggroLevelStat_SetAggroLevel, Value) == 0x000000, "Member 'BeingAggroLevelStat_SetAggroLevel::Value' has a wrong offset!");

// Function Being.BeingAggroLevelStat.GetAggroLevel
// 0x0004 (0x0004 - 0x0000)
struct BeingAggroLevelStat_GetAggroLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingAggroLevelStat_GetAggroLevel) == 0x000004, "Wrong alignment on BeingAggroLevelStat_GetAggroLevel");
static_assert(sizeof(BeingAggroLevelStat_GetAggroLevel) == 0x000004, "Wrong size on BeingAggroLevelStat_GetAggroLevel");
static_assert(offsetof(BeingAggroLevelStat_GetAggroLevel, ReturnValue) == 0x000000, "Member 'BeingAggroLevelStat_GetAggroLevel::ReturnValue' has a wrong offset!");

// Function Being.BeingAggroLevelStat.GetLevelOfPersonalizedAggro
// 0x0010 (0x0010 - 0x0000)
struct BeingAggroLevelStat_GetLevelOfPersonalizedAggro final
{
public:
	class AActor*                                 Other;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingAggroLevelStat_GetLevelOfPersonalizedAggro) == 0x000008, "Wrong alignment on BeingAggroLevelStat_GetLevelOfPersonalizedAggro");
static_assert(sizeof(BeingAggroLevelStat_GetLevelOfPersonalizedAggro) == 0x000010, "Wrong size on BeingAggroLevelStat_GetLevelOfPersonalizedAggro");
static_assert(offsetof(BeingAggroLevelStat_GetLevelOfPersonalizedAggro, Other) == 0x000000, "Member 'BeingAggroLevelStat_GetLevelOfPersonalizedAggro::Other' has a wrong offset!");
static_assert(offsetof(BeingAggroLevelStat_GetLevelOfPersonalizedAggro, ReturnValue) == 0x000008, "Member 'BeingAggroLevelStat_GetLevelOfPersonalizedAggro::ReturnValue' has a wrong offset!");

// Function Being.BeingAggroLevelStat.GetPersonalizedAggroLevel
// 0x0010 (0x0010 - 0x0000)
struct BeingAggroLevelStat_GetPersonalizedAggroLevel final
{
public:
	class AActor*                                 Other;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingAggroLevelStat_GetPersonalizedAggroLevel) == 0x000008, "Wrong alignment on BeingAggroLevelStat_GetPersonalizedAggroLevel");
static_assert(sizeof(BeingAggroLevelStat_GetPersonalizedAggroLevel) == 0x000010, "Wrong size on BeingAggroLevelStat_GetPersonalizedAggroLevel");
static_assert(offsetof(BeingAggroLevelStat_GetPersonalizedAggroLevel, Other) == 0x000000, "Member 'BeingAggroLevelStat_GetPersonalizedAggroLevel::Other' has a wrong offset!");
static_assert(offsetof(BeingAggroLevelStat_GetPersonalizedAggroLevel, ReturnValue) == 0x000008, "Member 'BeingAggroLevelStat_GetPersonalizedAggroLevel::ReturnValue' has a wrong offset!");

// Function Being.BeingFighterInterface.EndBlow
// 0x0018 (0x0018 - 0x0000)
struct BeingFighterInterface_EndBlow final
{
public:
	int32                                         ImpactID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ColliderTags;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingFighterInterface_EndBlow) == 0x000008, "Wrong alignment on BeingFighterInterface_EndBlow");
static_assert(sizeof(BeingFighterInterface_EndBlow) == 0x000018, "Wrong size on BeingFighterInterface_EndBlow");
static_assert(offsetof(BeingFighterInterface_EndBlow, ImpactID) == 0x000000, "Member 'BeingFighterInterface_EndBlow::ImpactID' has a wrong offset!");
static_assert(offsetof(BeingFighterInterface_EndBlow, ColliderTags) == 0x000008, "Member 'BeingFighterInterface_EndBlow::ColliderTags' has a wrong offset!");

// Function Being.BeingFighterInterface.HitEnemy
// 0x0008 (0x0008 - 0x0000)
struct BeingFighterInterface_HitEnemy final
{
public:
	int32                                         ImpactID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingFighterInterface_HitEnemy) == 0x000004, "Wrong alignment on BeingFighterInterface_HitEnemy");
static_assert(sizeof(BeingFighterInterface_HitEnemy) == 0x000008, "Wrong size on BeingFighterInterface_HitEnemy");
static_assert(offsetof(BeingFighterInterface_HitEnemy, ImpactID) == 0x000000, "Member 'BeingFighterInterface_HitEnemy::ImpactID' has a wrong offset!");
static_assert(offsetof(BeingFighterInterface_HitEnemy, Damage) == 0x000004, "Member 'BeingFighterInterface_HitEnemy::Damage' has a wrong offset!");

// Function Being.BeingFighterInterface.SetAttackStage
// 0x0001 (0x0001 - 0x0000)
struct BeingFighterInterface_SetAttackStage final
{
public:
	EBeingAttackStage                             AttackStage;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingFighterInterface_SetAttackStage) == 0x000001, "Wrong alignment on BeingFighterInterface_SetAttackStage");
static_assert(sizeof(BeingFighterInterface_SetAttackStage) == 0x000001, "Wrong size on BeingFighterInterface_SetAttackStage");
static_assert(offsetof(BeingFighterInterface_SetAttackStage, AttackStage) == 0x000000, "Member 'BeingFighterInterface_SetAttackStage::AttackStage' has a wrong offset!");

// Function Being.BeingFighterInterface.StartBlow
// 0x0018 (0x0018 - 0x0000)
struct BeingFighterInterface_StartBlow final
{
public:
	int32                                         ImpactID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ColliderTags;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingFighterInterface_StartBlow) == 0x000008, "Wrong alignment on BeingFighterInterface_StartBlow");
static_assert(sizeof(BeingFighterInterface_StartBlow) == 0x000018, "Wrong size on BeingFighterInterface_StartBlow");
static_assert(offsetof(BeingFighterInterface_StartBlow, ImpactID) == 0x000000, "Member 'BeingFighterInterface_StartBlow::ImpactID' has a wrong offset!");
static_assert(offsetof(BeingFighterInterface_StartBlow, ColliderTags) == 0x000008, "Member 'BeingFighterInterface_StartBlow::ColliderTags' has a wrong offset!");

// Function Being.BeingWandererInterface.GetRequestedVelocity
// 0x0018 (0x0018 - 0x0000)
struct BeingWandererInterface_GetRequestedVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingWandererInterface_GetRequestedVelocity) == 0x000008, "Wrong alignment on BeingWandererInterface_GetRequestedVelocity");
static_assert(sizeof(BeingWandererInterface_GetRequestedVelocity) == 0x000018, "Wrong size on BeingWandererInterface_GetRequestedVelocity");
static_assert(offsetof(BeingWandererInterface_GetRequestedVelocity, ReturnValue) == 0x000000, "Member 'BeingWandererInterface_GetRequestedVelocity::ReturnValue' has a wrong offset!");

// Function Being.BeingWandererInterface.HasRequestedVelocity
// 0x0001 (0x0001 - 0x0000)
struct BeingWandererInterface_HasRequestedVelocity final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingWandererInterface_HasRequestedVelocity) == 0x000001, "Wrong alignment on BeingWandererInterface_HasRequestedVelocity");
static_assert(sizeof(BeingWandererInterface_HasRequestedVelocity) == 0x000001, "Wrong size on BeingWandererInterface_HasRequestedVelocity");
static_assert(offsetof(BeingWandererInterface_HasRequestedVelocity, ReturnValue) == 0x000000, "Member 'BeingWandererInterface_HasRequestedVelocity::ReturnValue' has a wrong offset!");

// Function Being.FootmarksSubsystem.EnableFootmarkTracing
// 0x0001 (0x0001 - 0x0000)
struct FootmarksSubsystem_EnableFootmarkTracing final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FootmarksSubsystem_EnableFootmarkTracing) == 0x000001, "Wrong alignment on FootmarksSubsystem_EnableFootmarkTracing");
static_assert(sizeof(FootmarksSubsystem_EnableFootmarkTracing) == 0x000001, "Wrong size on FootmarksSubsystem_EnableFootmarkTracing");
static_assert(offsetof(FootmarksSubsystem_EnableFootmarkTracing, State) == 0x000000, "Member 'FootmarksSubsystem_EnableFootmarkTracing::State' has a wrong offset!");

// Function Being.FootmarksSubsystem.InitializeFootmarkTracker
// 0x0018 (0x0018 - 0x0000)
struct FootmarksSubsystem_InitializeFootmarkTracker final
{
public:
	class UMaterialInterface*                     ClearMaterial;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasRenderTarget2D*                  Canvas;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Density;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FootmarksSubsystem_InitializeFootmarkTracker) == 0x000008, "Wrong alignment on FootmarksSubsystem_InitializeFootmarkTracker");
static_assert(sizeof(FootmarksSubsystem_InitializeFootmarkTracker) == 0x000018, "Wrong size on FootmarksSubsystem_InitializeFootmarkTracker");
static_assert(offsetof(FootmarksSubsystem_InitializeFootmarkTracker, ClearMaterial) == 0x000000, "Member 'FootmarksSubsystem_InitializeFootmarkTracker::ClearMaterial' has a wrong offset!");
static_assert(offsetof(FootmarksSubsystem_InitializeFootmarkTracker, Canvas) == 0x000008, "Member 'FootmarksSubsystem_InitializeFootmarkTracker::Canvas' has a wrong offset!");
static_assert(offsetof(FootmarksSubsystem_InitializeFootmarkTracker, Density) == 0x000010, "Member 'FootmarksSubsystem_InitializeFootmarkTracker::Density' has a wrong offset!");

// Function Being.FootmarksSubsystem.SetCenterPosition
// 0x0018 (0x0018 - 0x0000)
struct FootmarksSubsystem_SetCenterPosition final
{
public:
	struct FVector                                OwnerPosition;                                     // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FootmarksSubsystem_SetCenterPosition) == 0x000008, "Wrong alignment on FootmarksSubsystem_SetCenterPosition");
static_assert(sizeof(FootmarksSubsystem_SetCenterPosition) == 0x000018, "Wrong size on FootmarksSubsystem_SetCenterPosition");
static_assert(offsetof(FootmarksSubsystem_SetCenterPosition, OwnerPosition) == 0x000000, "Member 'FootmarksSubsystem_SetCenterPosition::OwnerPosition' has a wrong offset!");

// Function Being.BeingFootsIKComponent.PutFoot
// 0x0001 (0x0001 - 0x0000)
struct BeingFootsIKComponent_PutFoot final
{
public:
	EFoot                                         Foot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingFootsIKComponent_PutFoot) == 0x000001, "Wrong alignment on BeingFootsIKComponent_PutFoot");
static_assert(sizeof(BeingFootsIKComponent_PutFoot) == 0x000001, "Wrong size on BeingFootsIKComponent_PutFoot");
static_assert(offsetof(BeingFootsIKComponent_PutFoot, Foot) == 0x000000, "Member 'BeingFootsIKComponent_PutFoot::Foot' has a wrong offset!");

// Function Being.BeingFootsIKComponent.RaiseFoot
// 0x0001 (0x0001 - 0x0000)
struct BeingFootsIKComponent_RaiseFoot final
{
public:
	EFoot                                         Foot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingFootsIKComponent_RaiseFoot) == 0x000001, "Wrong alignment on BeingFootsIKComponent_RaiseFoot");
static_assert(sizeof(BeingFootsIKComponent_RaiseFoot) == 0x000001, "Wrong size on BeingFootsIKComponent_RaiseFoot");
static_assert(offsetof(BeingFootsIKComponent_RaiseFoot, Foot) == 0x000000, "Member 'BeingFootsIKComponent_RaiseFoot::Foot' has a wrong offset!");

// Function Being.BeingFootsIKComponent.Update
// 0x0004 (0x0004 - 0x0000)
struct BeingFootsIKComponent_Update final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingFootsIKComponent_Update) == 0x000004, "Wrong alignment on BeingFootsIKComponent_Update");
static_assert(sizeof(BeingFootsIKComponent_Update) == 0x000004, "Wrong size on BeingFootsIKComponent_Update");
static_assert(offsetof(BeingFootsIKComponent_Update, DeltaSeconds) == 0x000000, "Member 'BeingFootsIKComponent_Update::DeltaSeconds' has a wrong offset!");

// Function Being.Being2FootsIKComponent.EnterSlope
// 0x0004 (0x0004 - 0x0000)
struct Being2FootsIKComponent_EnterSlope final
{
public:
	float                                         StepHeight;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Being2FootsIKComponent_EnterSlope) == 0x000004, "Wrong alignment on Being2FootsIKComponent_EnterSlope");
static_assert(sizeof(Being2FootsIKComponent_EnterSlope) == 0x000004, "Wrong size on Being2FootsIKComponent_EnterSlope");
static_assert(offsetof(Being2FootsIKComponent_EnterSlope, StepHeight) == 0x000000, "Member 'Being2FootsIKComponent_EnterSlope::StepHeight' has a wrong offset!");

// Function Being.Being2FootsIKComponent.EnterStairs
// 0x0004 (0x0004 - 0x0000)
struct Being2FootsIKComponent_EnterStairs final
{
public:
	float                                         StepHeight;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Being2FootsIKComponent_EnterStairs) == 0x000004, "Wrong alignment on Being2FootsIKComponent_EnterStairs");
static_assert(sizeof(Being2FootsIKComponent_EnterStairs) == 0x000004, "Wrong size on Being2FootsIKComponent_EnterStairs");
static_assert(offsetof(Being2FootsIKComponent_EnterStairs, StepHeight) == 0x000000, "Member 'Being2FootsIKComponent_EnterStairs::StepHeight' has a wrong offset!");

// Function Being.Being2FootsIKComponent.GetAnimMods
// 0x0008 (0x0008 - 0x0000)
struct Being2FootsIKComponent_GetAnimMods final
{
public:
	float                                         PlayRate;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedWarping;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Being2FootsIKComponent_GetAnimMods) == 0x000004, "Wrong alignment on Being2FootsIKComponent_GetAnimMods");
static_assert(sizeof(Being2FootsIKComponent_GetAnimMods) == 0x000008, "Wrong size on Being2FootsIKComponent_GetAnimMods");
static_assert(offsetof(Being2FootsIKComponent_GetAnimMods, PlayRate) == 0x000000, "Member 'Being2FootsIKComponent_GetAnimMods::PlayRate' has a wrong offset!");
static_assert(offsetof(Being2FootsIKComponent_GetAnimMods, SpeedWarping) == 0x000004, "Member 'Being2FootsIKComponent_GetAnimMods::SpeedWarping' has a wrong offset!");

// Function Being.Being2FootsIKComponent.GetLeftFootData
// 0x0420 (0x0420 - 0x0000)
struct Being2FootsIKComponent_GetLeftFootData final
{
public:
	struct FFootData                              ReturnValue;                                       // 0x0000(0x0420)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Being2FootsIKComponent_GetLeftFootData) == 0x000008, "Wrong alignment on Being2FootsIKComponent_GetLeftFootData");
static_assert(sizeof(Being2FootsIKComponent_GetLeftFootData) == 0x000420, "Wrong size on Being2FootsIKComponent_GetLeftFootData");
static_assert(offsetof(Being2FootsIKComponent_GetLeftFootData, ReturnValue) == 0x000000, "Member 'Being2FootsIKComponent_GetLeftFootData::ReturnValue' has a wrong offset!");

// Function Being.Being2FootsIKComponent.GetRightFootData
// 0x0420 (0x0420 - 0x0000)
struct Being2FootsIKComponent_GetRightFootData final
{
public:
	struct FFootData                              ReturnValue;                                       // 0x0000(0x0420)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Being2FootsIKComponent_GetRightFootData) == 0x000008, "Wrong alignment on Being2FootsIKComponent_GetRightFootData");
static_assert(sizeof(Being2FootsIKComponent_GetRightFootData) == 0x000420, "Wrong size on Being2FootsIKComponent_GetRightFootData");
static_assert(offsetof(Being2FootsIKComponent_GetRightFootData, ReturnValue) == 0x000000, "Member 'Being2FootsIKComponent_GetRightFootData::ReturnValue' has a wrong offset!");

// Function Being.Being2FootsIKComponent.GetSpeedWarping
// 0x0004 (0x0004 - 0x0000)
struct Being2FootsIKComponent_GetSpeedWarping final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Being2FootsIKComponent_GetSpeedWarping) == 0x000004, "Wrong alignment on Being2FootsIKComponent_GetSpeedWarping");
static_assert(sizeof(Being2FootsIKComponent_GetSpeedWarping) == 0x000004, "Wrong size on Being2FootsIKComponent_GetSpeedWarping");
static_assert(offsetof(Being2FootsIKComponent_GetSpeedWarping, ReturnValue) == 0x000000, "Member 'Being2FootsIKComponent_GetSpeedWarping::ReturnValue' has a wrong offset!");

// Function Being.Being2FootsIKComponent.IsOnDownStairs
// 0x0001 (0x0001 - 0x0000)
struct Being2FootsIKComponent_IsOnDownStairs final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Being2FootsIKComponent_IsOnDownStairs) == 0x000001, "Wrong alignment on Being2FootsIKComponent_IsOnDownStairs");
static_assert(sizeof(Being2FootsIKComponent_IsOnDownStairs) == 0x000001, "Wrong size on Being2FootsIKComponent_IsOnDownStairs");
static_assert(offsetof(Being2FootsIKComponent_IsOnDownStairs, ReturnValue) == 0x000000, "Member 'Being2FootsIKComponent_IsOnDownStairs::ReturnValue' has a wrong offset!");

// Function Being.Being2FootsIKComponent.IsOnSlope
// 0x0001 (0x0001 - 0x0000)
struct Being2FootsIKComponent_IsOnSlope final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Being2FootsIKComponent_IsOnSlope) == 0x000001, "Wrong alignment on Being2FootsIKComponent_IsOnSlope");
static_assert(sizeof(Being2FootsIKComponent_IsOnSlope) == 0x000001, "Wrong size on Being2FootsIKComponent_IsOnSlope");
static_assert(offsetof(Being2FootsIKComponent_IsOnSlope, ReturnValue) == 0x000000, "Member 'Being2FootsIKComponent_IsOnSlope::ReturnValue' has a wrong offset!");

// Function Being.Being2FootsIKComponent.IsOnStairs
// 0x0001 (0x0001 - 0x0000)
struct Being2FootsIKComponent_IsOnStairs final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Being2FootsIKComponent_IsOnStairs) == 0x000001, "Wrong alignment on Being2FootsIKComponent_IsOnStairs");
static_assert(sizeof(Being2FootsIKComponent_IsOnStairs) == 0x000001, "Wrong size on Being2FootsIKComponent_IsOnStairs");
static_assert(offsetof(Being2FootsIKComponent_IsOnStairs, ReturnValue) == 0x000000, "Member 'Being2FootsIKComponent_IsOnStairs::ReturnValue' has a wrong offset!");

// Function Being.Being2FootsIKComponent.IsOnUpStairs
// 0x0001 (0x0001 - 0x0000)
struct Being2FootsIKComponent_IsOnUpStairs final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Being2FootsIKComponent_IsOnUpStairs) == 0x000001, "Wrong alignment on Being2FootsIKComponent_IsOnUpStairs");
static_assert(sizeof(Being2FootsIKComponent_IsOnUpStairs) == 0x000001, "Wrong size on Being2FootsIKComponent_IsOnUpStairs");
static_assert(offsetof(Being2FootsIKComponent_IsOnUpStairs, ReturnValue) == 0x000000, "Member 'Being2FootsIKComponent_IsOnUpStairs::ReturnValue' has a wrong offset!");

// Function Being.Being4FootsIKComponent.GetLeftBackFoot
// 0x0420 (0x0420 - 0x0000)
struct Being4FootsIKComponent_GetLeftBackFoot final
{
public:
	struct FFootData                              ReturnValue;                                       // 0x0000(0x0420)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Being4FootsIKComponent_GetLeftBackFoot) == 0x000008, "Wrong alignment on Being4FootsIKComponent_GetLeftBackFoot");
static_assert(sizeof(Being4FootsIKComponent_GetLeftBackFoot) == 0x000420, "Wrong size on Being4FootsIKComponent_GetLeftBackFoot");
static_assert(offsetof(Being4FootsIKComponent_GetLeftBackFoot, ReturnValue) == 0x000000, "Member 'Being4FootsIKComponent_GetLeftBackFoot::ReturnValue' has a wrong offset!");

// Function Being.Being4FootsIKComponent.GetLeftFrontFoot
// 0x0420 (0x0420 - 0x0000)
struct Being4FootsIKComponent_GetLeftFrontFoot final
{
public:
	struct FFootData                              ReturnValue;                                       // 0x0000(0x0420)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Being4FootsIKComponent_GetLeftFrontFoot) == 0x000008, "Wrong alignment on Being4FootsIKComponent_GetLeftFrontFoot");
static_assert(sizeof(Being4FootsIKComponent_GetLeftFrontFoot) == 0x000420, "Wrong size on Being4FootsIKComponent_GetLeftFrontFoot");
static_assert(offsetof(Being4FootsIKComponent_GetLeftFrontFoot, ReturnValue) == 0x000000, "Member 'Being4FootsIKComponent_GetLeftFrontFoot::ReturnValue' has a wrong offset!");

// Function Being.Being4FootsIKComponent.GetRightBackFoot
// 0x0420 (0x0420 - 0x0000)
struct Being4FootsIKComponent_GetRightBackFoot final
{
public:
	struct FFootData                              ReturnValue;                                       // 0x0000(0x0420)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Being4FootsIKComponent_GetRightBackFoot) == 0x000008, "Wrong alignment on Being4FootsIKComponent_GetRightBackFoot");
static_assert(sizeof(Being4FootsIKComponent_GetRightBackFoot) == 0x000420, "Wrong size on Being4FootsIKComponent_GetRightBackFoot");
static_assert(offsetof(Being4FootsIKComponent_GetRightBackFoot, ReturnValue) == 0x000000, "Member 'Being4FootsIKComponent_GetRightBackFoot::ReturnValue' has a wrong offset!");

// Function Being.Being4FootsIKComponent.GetRightFrontFoot
// 0x0420 (0x0420 - 0x0000)
struct Being4FootsIKComponent_GetRightFrontFoot final
{
public:
	struct FFootData                              ReturnValue;                                       // 0x0000(0x0420)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Being4FootsIKComponent_GetRightFrontFoot) == 0x000008, "Wrong alignment on Being4FootsIKComponent_GetRightFrontFoot");
static_assert(sizeof(Being4FootsIKComponent_GetRightFrontFoot) == 0x000420, "Wrong size on Being4FootsIKComponent_GetRightFrontFoot");
static_assert(offsetof(Being4FootsIKComponent_GetRightFrontFoot, ReturnValue) == 0x000000, "Member 'Being4FootsIKComponent_GetRightFrontFoot::ReturnValue' has a wrong offset!");

// Function Being.Being4FootsIKComponent.IsOnSlope
// 0x0008 (0x0008 - 0x0000)
struct Being4FootsIKComponent_IsOnSlope final
{
public:
	float                                         ToleranceAngle;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Being4FootsIKComponent_IsOnSlope) == 0x000004, "Wrong alignment on Being4FootsIKComponent_IsOnSlope");
static_assert(sizeof(Being4FootsIKComponent_IsOnSlope) == 0x000008, "Wrong size on Being4FootsIKComponent_IsOnSlope");
static_assert(offsetof(Being4FootsIKComponent_IsOnSlope, ToleranceAngle) == 0x000000, "Member 'Being4FootsIKComponent_IsOnSlope::ToleranceAngle' has a wrong offset!");
static_assert(offsetof(Being4FootsIKComponent_IsOnSlope, ReturnValue) == 0x000004, "Member 'Being4FootsIKComponent_IsOnSlope::ReturnValue' has a wrong offset!");

// Function Being.BeingFootstep.StartEffect
// 0x0048 (0x0048 - 0x0000)
struct BeingFootstep_StartEffect final
{
public:
	struct FFootstepEffect                        Effect;                                            // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingFootstep_StartEffect) == 0x000008, "Wrong alignment on BeingFootstep_StartEffect");
static_assert(sizeof(BeingFootstep_StartEffect) == 0x000048, "Wrong size on BeingFootstep_StartEffect");
static_assert(offsetof(BeingFootstep_StartEffect, Effect) == 0x000000, "Member 'BeingFootstep_StartEffect::Effect' has a wrong offset!");

// Function Being.BeingFootstep.GetFootstepAINoise
// 0x0004 (0x0004 - 0x0000)
struct BeingFootstep_GetFootstepAINoise final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingFootstep_GetFootstepAINoise) == 0x000004, "Wrong alignment on BeingFootstep_GetFootstepAINoise");
static_assert(sizeof(BeingFootstep_GetFootstepAINoise) == 0x000004, "Wrong size on BeingFootstep_GetFootstepAINoise");
static_assert(offsetof(BeingFootstep_GetFootstepAINoise, ReturnValue) == 0x000000, "Member 'BeingFootstep_GetFootstepAINoise::ReturnValue' has a wrong offset!");

// Function Being.BeingFootstepTracer.GetWadingDepth
// 0x0004 (0x0004 - 0x0000)
struct BeingFootstepTracer_GetWadingDepth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingFootstepTracer_GetWadingDepth) == 0x000004, "Wrong alignment on BeingFootstepTracer_GetWadingDepth");
static_assert(sizeof(BeingFootstepTracer_GetWadingDepth) == 0x000004, "Wrong size on BeingFootstepTracer_GetWadingDepth");
static_assert(offsetof(BeingFootstepTracer_GetWadingDepth, ReturnValue) == 0x000000, "Member 'BeingFootstepTracer_GetWadingDepth::ReturnValue' has a wrong offset!");

// Function Being.BeingFootstepTracer.GetWadingSurface
// 0x0001 (0x0001 - 0x0000)
struct BeingFootstepTracer_GetWadingSurface final
{
public:
	EPhysicalSurface                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingFootstepTracer_GetWadingSurface) == 0x000001, "Wrong alignment on BeingFootstepTracer_GetWadingSurface");
static_assert(sizeof(BeingFootstepTracer_GetWadingSurface) == 0x000001, "Wrong size on BeingFootstepTracer_GetWadingSurface");
static_assert(offsetof(BeingFootstepTracer_GetWadingSurface, ReturnValue) == 0x000000, "Member 'BeingFootstepTracer_GetWadingSurface::ReturnValue' has a wrong offset!");

// Function Being.BeingFootstepTracer.IsOnSurface
// 0x0002 (0x0002 - 0x0000)
struct BeingFootstepTracer_IsOnSurface final
{
public:
	EPhysicalSurface                              Surface;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingFootstepTracer_IsOnSurface) == 0x000001, "Wrong alignment on BeingFootstepTracer_IsOnSurface");
static_assert(sizeof(BeingFootstepTracer_IsOnSurface) == 0x000002, "Wrong size on BeingFootstepTracer_IsOnSurface");
static_assert(offsetof(BeingFootstepTracer_IsOnSurface, Surface) == 0x000000, "Member 'BeingFootstepTracer_IsOnSurface::Surface' has a wrong offset!");
static_assert(offsetof(BeingFootstepTracer_IsOnSurface, ReturnValue) == 0x000001, "Member 'BeingFootstepTracer_IsOnSurface::ReturnValue' has a wrong offset!");

// Function Being.BeingFootstepPersonalization.FootstepCreated
// 0x0008 (0x0008 - 0x0000)
struct BeingFootstepPersonalization_FootstepCreated final
{
public:
	class ABeingFootstep*                         Footstep;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingFootstepPersonalization_FootstepCreated) == 0x000008, "Wrong alignment on BeingFootstepPersonalization_FootstepCreated");
static_assert(sizeof(BeingFootstepPersonalization_FootstepCreated) == 0x000008, "Wrong size on BeingFootstepPersonalization_FootstepCreated");
static_assert(offsetof(BeingFootstepPersonalization_FootstepCreated, Footstep) == 0x000000, "Member 'BeingFootstepPersonalization_FootstepCreated::Footstep' has a wrong offset!");

// Function Being.BeingFootstepPersonalization.GetSoundMovement
// 0x0001 (0x0001 - 0x0000)
struct BeingFootstepPersonalization_GetSoundMovement final
{
public:
	ESoundMovement                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingFootstepPersonalization_GetSoundMovement) == 0x000001, "Wrong alignment on BeingFootstepPersonalization_GetSoundMovement");
static_assert(sizeof(BeingFootstepPersonalization_GetSoundMovement) == 0x000001, "Wrong size on BeingFootstepPersonalization_GetSoundMovement");
static_assert(offsetof(BeingFootstepPersonalization_GetSoundMovement, ReturnValue) == 0x000000, "Member 'BeingFootstepPersonalization_GetSoundMovement::ReturnValue' has a wrong offset!");

// Function Being.BeingFootstepPersonalization.GetVerticalStance
// 0x0001 (0x0001 - 0x0000)
struct BeingFootstepPersonalization_GetVerticalStance final
{
public:
	EVerticalStance                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingFootstepPersonalization_GetVerticalStance) == 0x000001, "Wrong alignment on BeingFootstepPersonalization_GetVerticalStance");
static_assert(sizeof(BeingFootstepPersonalization_GetVerticalStance) == 0x000001, "Wrong size on BeingFootstepPersonalization_GetVerticalStance");
static_assert(offsetof(BeingFootstepPersonalization_GetVerticalStance, ReturnValue) == 0x000000, "Member 'BeingFootstepPersonalization_GetVerticalStance::ReturnValue' has a wrong offset!");

// Function Being.BeingFunctions.changeDirectionSpace
// 0x0078 (0x0078 - 0x0000)
struct BeingFunctions_ChangeDirectionSpace final
{
public:
	struct FVector                                Forward;                                           // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Right;                                             // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Up;                                                // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0060(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingFunctions_ChangeDirectionSpace) == 0x000008, "Wrong alignment on BeingFunctions_ChangeDirectionSpace");
static_assert(sizeof(BeingFunctions_ChangeDirectionSpace) == 0x000078, "Wrong size on BeingFunctions_ChangeDirectionSpace");
static_assert(offsetof(BeingFunctions_ChangeDirectionSpace, Forward) == 0x000000, "Member 'BeingFunctions_ChangeDirectionSpace::Forward' has a wrong offset!");
static_assert(offsetof(BeingFunctions_ChangeDirectionSpace, Right) == 0x000018, "Member 'BeingFunctions_ChangeDirectionSpace::Right' has a wrong offset!");
static_assert(offsetof(BeingFunctions_ChangeDirectionSpace, Up) == 0x000030, "Member 'BeingFunctions_ChangeDirectionSpace::Up' has a wrong offset!");
static_assert(offsetof(BeingFunctions_ChangeDirectionSpace, Direction) == 0x000048, "Member 'BeingFunctions_ChangeDirectionSpace::Direction' has a wrong offset!");
static_assert(offsetof(BeingFunctions_ChangeDirectionSpace, ReturnValue) == 0x000060, "Member 'BeingFunctions_ChangeDirectionSpace::ReturnValue' has a wrong offset!");

// Function Being.BeingFunctions.changeRotationSpace
// 0x0078 (0x0078 - 0x0000)
struct BeingFunctions_ChangeRotationSpace final
{
public:
	struct FVector                                Forward;                                           // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Right;                                             // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Up;                                                // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0060(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingFunctions_ChangeRotationSpace) == 0x000008, "Wrong alignment on BeingFunctions_ChangeRotationSpace");
static_assert(sizeof(BeingFunctions_ChangeRotationSpace) == 0x000078, "Wrong size on BeingFunctions_ChangeRotationSpace");
static_assert(offsetof(BeingFunctions_ChangeRotationSpace, Forward) == 0x000000, "Member 'BeingFunctions_ChangeRotationSpace::Forward' has a wrong offset!");
static_assert(offsetof(BeingFunctions_ChangeRotationSpace, Right) == 0x000018, "Member 'BeingFunctions_ChangeRotationSpace::Right' has a wrong offset!");
static_assert(offsetof(BeingFunctions_ChangeRotationSpace, Up) == 0x000030, "Member 'BeingFunctions_ChangeRotationSpace::Up' has a wrong offset!");
static_assert(offsetof(BeingFunctions_ChangeRotationSpace, Rotation) == 0x000048, "Member 'BeingFunctions_ChangeRotationSpace::Rotation' has a wrong offset!");
static_assert(offsetof(BeingFunctions_ChangeRotationSpace, ReturnValue) == 0x000060, "Member 'BeingFunctions_ChangeRotationSpace::ReturnValue' has a wrong offset!");

// Function Being.BeingFunctions.changeWalkingStanceEnum
// 0x0010 (0x0010 - 0x0000)
struct BeingFunctions_ChangeWalkingStanceEnum final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBeingWalkingStance                           Stance;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingFunctions_ChangeWalkingStanceEnum) == 0x000008, "Wrong alignment on BeingFunctions_ChangeWalkingStanceEnum");
static_assert(sizeof(BeingFunctions_ChangeWalkingStanceEnum) == 0x000010, "Wrong size on BeingFunctions_ChangeWalkingStanceEnum");
static_assert(offsetof(BeingFunctions_ChangeWalkingStanceEnum, Being) == 0x000000, "Member 'BeingFunctions_ChangeWalkingStanceEnum::Being' has a wrong offset!");
static_assert(offsetof(BeingFunctions_ChangeWalkingStanceEnum, Stance) == 0x000008, "Member 'BeingFunctions_ChangeWalkingStanceEnum::Stance' has a wrong offset!");
static_assert(offsetof(BeingFunctions_ChangeWalkingStanceEnum, Priority) == 0x000009, "Member 'BeingFunctions_ChangeWalkingStanceEnum::Priority' has a wrong offset!");
static_assert(offsetof(BeingFunctions_ChangeWalkingStanceEnum, ReturnValue) == 0x00000A, "Member 'BeingFunctions_ChangeWalkingStanceEnum::ReturnValue' has a wrong offset!");

// Function Being.BeingFunctions.clearWalkingStanceEnum
// 0x0010 (0x0010 - 0x0000)
struct BeingFunctions_ClearWalkingStanceEnum final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingFunctions_ClearWalkingStanceEnum) == 0x000008, "Wrong alignment on BeingFunctions_ClearWalkingStanceEnum");
static_assert(sizeof(BeingFunctions_ClearWalkingStanceEnum) == 0x000010, "Wrong size on BeingFunctions_ClearWalkingStanceEnum");
static_assert(offsetof(BeingFunctions_ClearWalkingStanceEnum, Being) == 0x000000, "Member 'BeingFunctions_ClearWalkingStanceEnum::Being' has a wrong offset!");
static_assert(offsetof(BeingFunctions_ClearWalkingStanceEnum, Priority) == 0x000008, "Member 'BeingFunctions_ClearWalkingStanceEnum::Priority' has a wrong offset!");

// Function Being.BeingFunctions.fastRotate
// 0x0020 (0x0020 - 0x0000)
struct BeingFunctions_FastRotate final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaSeconds;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalYaw;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinYaw;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxYaw;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingFunctions_FastRotate) == 0x000008, "Wrong alignment on BeingFunctions_FastRotate");
static_assert(sizeof(BeingFunctions_FastRotate) == 0x000020, "Wrong size on BeingFunctions_FastRotate");
static_assert(offsetof(BeingFunctions_FastRotate, Being) == 0x000000, "Member 'BeingFunctions_FastRotate::Being' has a wrong offset!");
static_assert(offsetof(BeingFunctions_FastRotate, DeltaSeconds) == 0x000008, "Member 'BeingFunctions_FastRotate::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BeingFunctions_FastRotate, LocalYaw) == 0x00000C, "Member 'BeingFunctions_FastRotate::LocalYaw' has a wrong offset!");
static_assert(offsetof(BeingFunctions_FastRotate, MinYaw) == 0x000010, "Member 'BeingFunctions_FastRotate::MinYaw' has a wrong offset!");
static_assert(offsetof(BeingFunctions_FastRotate, MaxYaw) == 0x000014, "Member 'BeingFunctions_FastRotate::MaxYaw' has a wrong offset!");
static_assert(offsetof(BeingFunctions_FastRotate, InterpSpeed) == 0x000018, "Member 'BeingFunctions_FastRotate::InterpSpeed' has a wrong offset!");

// Function Being.BeingFunctions.findDistanceToWall
// 0x0040 (0x0040 - 0x0000)
struct BeingFunctions_FindDistanceToWall final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NearestPoint;                                      // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingFunctions_FindDistanceToWall) == 0x000008, "Wrong alignment on BeingFunctions_FindDistanceToWall");
static_assert(sizeof(BeingFunctions_FindDistanceToWall) == 0x000040, "Wrong size on BeingFunctions_FindDistanceToWall");
static_assert(offsetof(BeingFunctions_FindDistanceToWall, Being) == 0x000000, "Member 'BeingFunctions_FindDistanceToWall::Being' has a wrong offset!");
static_assert(offsetof(BeingFunctions_FindDistanceToWall, InLocation) == 0x000008, "Member 'BeingFunctions_FindDistanceToWall::InLocation' has a wrong offset!");
static_assert(offsetof(BeingFunctions_FindDistanceToWall, NearestPoint) == 0x000020, "Member 'BeingFunctions_FindDistanceToWall::NearestPoint' has a wrong offset!");
static_assert(offsetof(BeingFunctions_FindDistanceToWall, ReturnValue) == 0x000038, "Member 'BeingFunctions_FindDistanceToWall::ReturnValue' has a wrong offset!");

// Function Being.BeingFunctions.findLocationNearWall
// 0x0030 (0x0030 - 0x0000)
struct BeingFunctions_FindLocationNearWall final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistance;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingFunctions_FindLocationNearWall) == 0x000008, "Wrong alignment on BeingFunctions_FindLocationNearWall");
static_assert(sizeof(BeingFunctions_FindLocationNearWall) == 0x000030, "Wrong size on BeingFunctions_FindLocationNearWall");
static_assert(offsetof(BeingFunctions_FindLocationNearWall, Being) == 0x000000, "Member 'BeingFunctions_FindLocationNearWall::Being' has a wrong offset!");
static_assert(offsetof(BeingFunctions_FindLocationNearWall, MinDistance) == 0x000008, "Member 'BeingFunctions_FindLocationNearWall::MinDistance' has a wrong offset!");
static_assert(offsetof(BeingFunctions_FindLocationNearWall, Location) == 0x000010, "Member 'BeingFunctions_FindLocationNearWall::Location' has a wrong offset!");
static_assert(offsetof(BeingFunctions_FindLocationNearWall, ReturnValue) == 0x000028, "Member 'BeingFunctions_FindLocationNearWall::ReturnValue' has a wrong offset!");

// Function Being.BeingFunctions.forceRollRotation
// 0x0018 (0x0018 - 0x0000)
struct BeingFunctions_ForceRollRotation final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaSeconds;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalYaw;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawMul;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingFunctions_ForceRollRotation) == 0x000008, "Wrong alignment on BeingFunctions_ForceRollRotation");
static_assert(sizeof(BeingFunctions_ForceRollRotation) == 0x000018, "Wrong size on BeingFunctions_ForceRollRotation");
static_assert(offsetof(BeingFunctions_ForceRollRotation, Being) == 0x000000, "Member 'BeingFunctions_ForceRollRotation::Being' has a wrong offset!");
static_assert(offsetof(BeingFunctions_ForceRollRotation, DeltaSeconds) == 0x000008, "Member 'BeingFunctions_ForceRollRotation::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BeingFunctions_ForceRollRotation, LocalYaw) == 0x00000C, "Member 'BeingFunctions_ForceRollRotation::LocalYaw' has a wrong offset!");
static_assert(offsetof(BeingFunctions_ForceRollRotation, YawMul) == 0x000010, "Member 'BeingFunctions_ForceRollRotation::YawMul' has a wrong offset!");
static_assert(offsetof(BeingFunctions_ForceRollRotation, InterpSpeed) == 0x000014, "Member 'BeingFunctions_ForceRollRotation::InterpSpeed' has a wrong offset!");

// Function Being.BeingFunctions.forceYawRotation
// 0x0018 (0x0018 - 0x0000)
struct BeingFunctions_ForceYawRotation final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaSeconds;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalYaw;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampYaw;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingFunctions_ForceYawRotation) == 0x000008, "Wrong alignment on BeingFunctions_ForceYawRotation");
static_assert(sizeof(BeingFunctions_ForceYawRotation) == 0x000018, "Wrong size on BeingFunctions_ForceYawRotation");
static_assert(offsetof(BeingFunctions_ForceYawRotation, Being) == 0x000000, "Member 'BeingFunctions_ForceYawRotation::Being' has a wrong offset!");
static_assert(offsetof(BeingFunctions_ForceYawRotation, DeltaSeconds) == 0x000008, "Member 'BeingFunctions_ForceYawRotation::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BeingFunctions_ForceYawRotation, LocalYaw) == 0x00000C, "Member 'BeingFunctions_ForceYawRotation::LocalYaw' has a wrong offset!");
static_assert(offsetof(BeingFunctions_ForceYawRotation, ClampYaw) == 0x000010, "Member 'BeingFunctions_ForceYawRotation::ClampYaw' has a wrong offset!");
static_assert(offsetof(BeingFunctions_ForceYawRotation, InterpSpeed) == 0x000014, "Member 'BeingFunctions_ForceYawRotation::InterpSpeed' has a wrong offset!");

// Function Being.BeingFunctions.GetController
// 0x0010 (0x0010 - 0x0000)
struct BeingFunctions_GetController final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingFunctions_GetController) == 0x000008, "Wrong alignment on BeingFunctions_GetController");
static_assert(sizeof(BeingFunctions_GetController) == 0x000010, "Wrong size on BeingFunctions_GetController");
static_assert(offsetof(BeingFunctions_GetController, Actor) == 0x000000, "Member 'BeingFunctions_GetController::Actor' has a wrong offset!");
static_assert(offsetof(BeingFunctions_GetController, ReturnValue) == 0x000008, "Member 'BeingFunctions_GetController::ReturnValue' has a wrong offset!");

// Function Being.BeingFunctions.getDesiredVelocity
// 0x0020 (0x0020 - 0x0000)
struct BeingFunctions_GetDesiredVelocity final
{
public:
	const class APawn*                            Being;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingFunctions_GetDesiredVelocity) == 0x000008, "Wrong alignment on BeingFunctions_GetDesiredVelocity");
static_assert(sizeof(BeingFunctions_GetDesiredVelocity) == 0x000020, "Wrong size on BeingFunctions_GetDesiredVelocity");
static_assert(offsetof(BeingFunctions_GetDesiredVelocity, Being) == 0x000000, "Member 'BeingFunctions_GetDesiredVelocity::Being' has a wrong offset!");
static_assert(offsetof(BeingFunctions_GetDesiredVelocity, ReturnValue) == 0x000008, "Member 'BeingFunctions_GetDesiredVelocity::ReturnValue' has a wrong offset!");

// Function Being.BeingFunctions.getGroundLocation
// 0x0020 (0x0020 - 0x0000)
struct BeingFunctions_GetGroundLocation final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingFunctions_GetGroundLocation) == 0x000008, "Wrong alignment on BeingFunctions_GetGroundLocation");
static_assert(sizeof(BeingFunctions_GetGroundLocation) == 0x000020, "Wrong size on BeingFunctions_GetGroundLocation");
static_assert(offsetof(BeingFunctions_GetGroundLocation, Actor) == 0x000000, "Member 'BeingFunctions_GetGroundLocation::Actor' has a wrong offset!");
static_assert(offsetof(BeingFunctions_GetGroundLocation, ReturnValue) == 0x000008, "Member 'BeingFunctions_GetGroundLocation::ReturnValue' has a wrong offset!");

// Function Being.BeingFunctions.getPawn
// 0x0010 (0x0010 - 0x0000)
struct BeingFunctions_GetPawn final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingFunctions_GetPawn) == 0x000008, "Wrong alignment on BeingFunctions_GetPawn");
static_assert(sizeof(BeingFunctions_GetPawn) == 0x000010, "Wrong size on BeingFunctions_GetPawn");
static_assert(offsetof(BeingFunctions_GetPawn, Actor) == 0x000000, "Member 'BeingFunctions_GetPawn::Actor' has a wrong offset!");
static_assert(offsetof(BeingFunctions_GetPawn, ReturnValue) == 0x000008, "Member 'BeingFunctions_GetPawn::ReturnValue' has a wrong offset!");

// Function Being.BeingFunctions.GetRequestedVelocity
// 0x0020 (0x0020 - 0x0000)
struct BeingFunctions_GetRequestedVelocity final
{
public:
	const class APawn*                            Being;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingFunctions_GetRequestedVelocity) == 0x000008, "Wrong alignment on BeingFunctions_GetRequestedVelocity");
static_assert(sizeof(BeingFunctions_GetRequestedVelocity) == 0x000020, "Wrong size on BeingFunctions_GetRequestedVelocity");
static_assert(offsetof(BeingFunctions_GetRequestedVelocity, Being) == 0x000000, "Member 'BeingFunctions_GetRequestedVelocity::Being' has a wrong offset!");
static_assert(offsetof(BeingFunctions_GetRequestedVelocity, ReturnValue) == 0x000008, "Member 'BeingFunctions_GetRequestedVelocity::ReturnValue' has a wrong offset!");

// Function Being.BeingFunctions.getWalkingStanceEnum
// 0x0010 (0x0010 - 0x0000)
struct BeingFunctions_GetWalkingStanceEnum final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBeingWalkingStance                           ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingFunctions_GetWalkingStanceEnum) == 0x000008, "Wrong alignment on BeingFunctions_GetWalkingStanceEnum");
static_assert(sizeof(BeingFunctions_GetWalkingStanceEnum) == 0x000010, "Wrong size on BeingFunctions_GetWalkingStanceEnum");
static_assert(offsetof(BeingFunctions_GetWalkingStanceEnum, Being) == 0x000000, "Member 'BeingFunctions_GetWalkingStanceEnum::Being' has a wrong offset!");
static_assert(offsetof(BeingFunctions_GetWalkingStanceEnum, ReturnValue) == 0x000008, "Member 'BeingFunctions_GetWalkingStanceEnum::ReturnValue' has a wrong offset!");

// Function Being.BeingFunctions.getWalkingStanceType
// 0x0002 (0x0002 - 0x0000)
struct BeingFunctions_GetWalkingStanceType final
{
public:
	EBeingWalkingStance                           Stance;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBeingWalkType                                ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingFunctions_GetWalkingStanceType) == 0x000001, "Wrong alignment on BeingFunctions_GetWalkingStanceType");
static_assert(sizeof(BeingFunctions_GetWalkingStanceType) == 0x000002, "Wrong size on BeingFunctions_GetWalkingStanceType");
static_assert(offsetof(BeingFunctions_GetWalkingStanceType, Stance) == 0x000000, "Member 'BeingFunctions_GetWalkingStanceType::Stance' has a wrong offset!");
static_assert(offsetof(BeingFunctions_GetWalkingStanceType, ReturnValue) == 0x000001, "Member 'BeingFunctions_GetWalkingStanceType::ReturnValue' has a wrong offset!");

// Function Being.BeingFunctions.IgnoreNextFalling
// 0x0008 (0x0008 - 0x0000)
struct BeingFunctions_IgnoreNextFalling final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingFunctions_IgnoreNextFalling) == 0x000008, "Wrong alignment on BeingFunctions_IgnoreNextFalling");
static_assert(sizeof(BeingFunctions_IgnoreNextFalling) == 0x000008, "Wrong size on BeingFunctions_IgnoreNextFalling");
static_assert(offsetof(BeingFunctions_IgnoreNextFalling, Being) == 0x000000, "Member 'BeingFunctions_IgnoreNextFalling::Being' has a wrong offset!");

// Function Being.BeingFunctions.isFollowingAPath
// 0x0010 (0x0010 - 0x0000)
struct BeingFunctions_IsFollowingAPath final
{
public:
	const class APawn*                            Being;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingFunctions_IsFollowingAPath) == 0x000008, "Wrong alignment on BeingFunctions_IsFollowingAPath");
static_assert(sizeof(BeingFunctions_IsFollowingAPath) == 0x000010, "Wrong size on BeingFunctions_IsFollowingAPath");
static_assert(offsetof(BeingFunctions_IsFollowingAPath, Being) == 0x000000, "Member 'BeingFunctions_IsFollowingAPath::Being' has a wrong offset!");
static_assert(offsetof(BeingFunctions_IsFollowingAPath, ReturnValue) == 0x000008, "Member 'BeingFunctions_IsFollowingAPath::ReturnValue' has a wrong offset!");

// Function Being.BeingFunctions.makeQuatFromAxes
// 0x0070 (0x0070 - 0x0000)
struct BeingFunctions_MakeQuatFromAxes final
{
public:
	struct FVector                                Forward;                                           // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Right;                                             // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Up;                                                // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  ReturnValue;                                       // 0x0050(0x0020)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingFunctions_MakeQuatFromAxes) == 0x000010, "Wrong alignment on BeingFunctions_MakeQuatFromAxes");
static_assert(sizeof(BeingFunctions_MakeQuatFromAxes) == 0x000070, "Wrong size on BeingFunctions_MakeQuatFromAxes");
static_assert(offsetof(BeingFunctions_MakeQuatFromAxes, Forward) == 0x000000, "Member 'BeingFunctions_MakeQuatFromAxes::Forward' has a wrong offset!");
static_assert(offsetof(BeingFunctions_MakeQuatFromAxes, Right) == 0x000018, "Member 'BeingFunctions_MakeQuatFromAxes::Right' has a wrong offset!");
static_assert(offsetof(BeingFunctions_MakeQuatFromAxes, Up) == 0x000030, "Member 'BeingFunctions_MakeQuatFromAxes::Up' has a wrong offset!");
static_assert(offsetof(BeingFunctions_MakeQuatFromAxes, ReturnValue) == 0x000050, "Member 'BeingFunctions_MakeQuatFromAxes::ReturnValue' has a wrong offset!");

// Function Being.BeingFunctions.MuteFootsteps
// 0x0010 (0x0010 - 0x0000)
struct BeingFunctions_MuteFootsteps final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Mute;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingFunctions_MuteFootsteps) == 0x000008, "Wrong alignment on BeingFunctions_MuteFootsteps");
static_assert(sizeof(BeingFunctions_MuteFootsteps) == 0x000010, "Wrong size on BeingFunctions_MuteFootsteps");
static_assert(offsetof(BeingFunctions_MuteFootsteps, Being) == 0x000000, "Member 'BeingFunctions_MuteFootsteps::Being' has a wrong offset!");
static_assert(offsetof(BeingFunctions_MuteFootsteps, Mute) == 0x000008, "Member 'BeingFunctions_MuteFootsteps::Mute' has a wrong offset!");

// Function Being.BeingFunctions.putOnGround
// 0x0010 (0x0010 - 0x0000)
struct BeingFunctions_PutOnGround final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingFunctions_PutOnGround) == 0x000008, "Wrong alignment on BeingFunctions_PutOnGround");
static_assert(sizeof(BeingFunctions_PutOnGround) == 0x000010, "Wrong size on BeingFunctions_PutOnGround");
static_assert(offsetof(BeingFunctions_PutOnGround, Being) == 0x000000, "Member 'BeingFunctions_PutOnGround::Being' has a wrong offset!");
static_assert(offsetof(BeingFunctions_PutOnGround, Time) == 0x000008, "Member 'BeingFunctions_PutOnGround::Time' has a wrong offset!");

// Function Being.BeingFunctions.setComponentMaskFilter
// 0x0010 (0x0010 - 0x0000)
struct BeingFunctions_SetComponentMaskFilter final
{
public:
	class UPrimitiveComponent*                    Primitive;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MaskFilter;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingFunctions_SetComponentMaskFilter) == 0x000008, "Wrong alignment on BeingFunctions_SetComponentMaskFilter");
static_assert(sizeof(BeingFunctions_SetComponentMaskFilter) == 0x000010, "Wrong size on BeingFunctions_SetComponentMaskFilter");
static_assert(offsetof(BeingFunctions_SetComponentMaskFilter, Primitive) == 0x000000, "Member 'BeingFunctions_SetComponentMaskFilter::Primitive' has a wrong offset!");
static_assert(offsetof(BeingFunctions_SetComponentMaskFilter, MaskFilter) == 0x000008, "Member 'BeingFunctions_SetComponentMaskFilter::MaskFilter' has a wrong offset!");

// Function Being.BeingFunctions.setComponentMoveIgnoreMask
// 0x0010 (0x0010 - 0x0000)
struct BeingFunctions_SetComponentMoveIgnoreMask final
{
public:
	class UPrimitiveComponent*                    Primitive;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Mask;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingFunctions_SetComponentMoveIgnoreMask) == 0x000008, "Wrong alignment on BeingFunctions_SetComponentMoveIgnoreMask");
static_assert(sizeof(BeingFunctions_SetComponentMoveIgnoreMask) == 0x000010, "Wrong size on BeingFunctions_SetComponentMoveIgnoreMask");
static_assert(offsetof(BeingFunctions_SetComponentMoveIgnoreMask, Primitive) == 0x000000, "Member 'BeingFunctions_SetComponentMoveIgnoreMask::Primitive' has a wrong offset!");
static_assert(offsetof(BeingFunctions_SetComponentMoveIgnoreMask, Mask) == 0x000008, "Member 'BeingFunctions_SetComponentMoveIgnoreMask::Mask' has a wrong offset!");

// Function Being.BeingFunctions.setMaskFilter
// 0x0010 (0x0010 - 0x0000)
struct BeingFunctions_SetMaskFilter final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MaskFilter;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingFunctions_SetMaskFilter) == 0x000008, "Wrong alignment on BeingFunctions_SetMaskFilter");
static_assert(sizeof(BeingFunctions_SetMaskFilter) == 0x000010, "Wrong size on BeingFunctions_SetMaskFilter");
static_assert(offsetof(BeingFunctions_SetMaskFilter, Actor) == 0x000000, "Member 'BeingFunctions_SetMaskFilter::Actor' has a wrong offset!");
static_assert(offsetof(BeingFunctions_SetMaskFilter, MaskFilter) == 0x000008, "Member 'BeingFunctions_SetMaskFilter::MaskFilter' has a wrong offset!");

// Function Being.BeingFunctions.setMoveIgnoreMask
// 0x0010 (0x0010 - 0x0000)
struct BeingFunctions_SetMoveIgnoreMask final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Mask;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingFunctions_SetMoveIgnoreMask) == 0x000008, "Wrong alignment on BeingFunctions_SetMoveIgnoreMask");
static_assert(sizeof(BeingFunctions_SetMoveIgnoreMask) == 0x000010, "Wrong size on BeingFunctions_SetMoveIgnoreMask");
static_assert(offsetof(BeingFunctions_SetMoveIgnoreMask, Actor) == 0x000000, "Member 'BeingFunctions_SetMoveIgnoreMask::Actor' has a wrong offset!");
static_assert(offsetof(BeingFunctions_SetMoveIgnoreMask, Mask) == 0x000008, "Member 'BeingFunctions_SetMoveIgnoreMask::Mask' has a wrong offset!");

// Function Being.BeingFunctions.setRootMotionTranslationScale
// 0x0010 (0x0010 - 0x0000)
struct BeingFunctions_SetRootMotionTranslationScale final
{
public:
	class APawn*                                  Being;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingFunctions_SetRootMotionTranslationScale) == 0x000008, "Wrong alignment on BeingFunctions_SetRootMotionTranslationScale");
static_assert(sizeof(BeingFunctions_SetRootMotionTranslationScale) == 0x000010, "Wrong size on BeingFunctions_SetRootMotionTranslationScale");
static_assert(offsetof(BeingFunctions_SetRootMotionTranslationScale, Being) == 0x000000, "Member 'BeingFunctions_SetRootMotionTranslationScale::Being' has a wrong offset!");
static_assert(offsetof(BeingFunctions_SetRootMotionTranslationScale, Scale) == 0x000008, "Member 'BeingFunctions_SetRootMotionTranslationScale::Scale' has a wrong offset!");

// Function Being.BeingFunctions.tickableFloatGet
// 0x0010 (0x0010 - 0x0000)
struct BeingFunctions_TickableFloatGet final
{
public:
	struct FTickableFloat                         Tfloat;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingFunctions_TickableFloatGet) == 0x000004, "Wrong alignment on BeingFunctions_TickableFloatGet");
static_assert(sizeof(BeingFunctions_TickableFloatGet) == 0x000010, "Wrong size on BeingFunctions_TickableFloatGet");
static_assert(offsetof(BeingFunctions_TickableFloatGet, Tfloat) == 0x000000, "Member 'BeingFunctions_TickableFloatGet::Tfloat' has a wrong offset!");
static_assert(offsetof(BeingFunctions_TickableFloatGet, ReturnValue) == 0x00000C, "Member 'BeingFunctions_TickableFloatGet::ReturnValue' has a wrong offset!");

// Function Being.BeingFunctions.tickableFloatSet
// 0x0010 (0x0010 - 0x0000)
struct BeingFunctions_TickableFloatSet final
{
public:
	struct FTickableFloat                         Tfloat;                                            // 0x0000(0x000C)(Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingFunctions_TickableFloatSet) == 0x000004, "Wrong alignment on BeingFunctions_TickableFloatSet");
static_assert(sizeof(BeingFunctions_TickableFloatSet) == 0x000010, "Wrong size on BeingFunctions_TickableFloatSet");
static_assert(offsetof(BeingFunctions_TickableFloatSet, Tfloat) == 0x000000, "Member 'BeingFunctions_TickableFloatSet::Tfloat' has a wrong offset!");
static_assert(offsetof(BeingFunctions_TickableFloatSet, Value) == 0x00000C, "Member 'BeingFunctions_TickableFloatSet::Value' has a wrong offset!");

// Function Being.BeingFunctions.tickableFloatSetInTime
// 0x0014 (0x0014 - 0x0000)
struct BeingFunctions_TickableFloatSetInTime final
{
public:
	struct FTickableFloat                         Tfloat;                                            // 0x0000(0x000C)(Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingFunctions_TickableFloatSetInTime) == 0x000004, "Wrong alignment on BeingFunctions_TickableFloatSetInTime");
static_assert(sizeof(BeingFunctions_TickableFloatSetInTime) == 0x000014, "Wrong size on BeingFunctions_TickableFloatSetInTime");
static_assert(offsetof(BeingFunctions_TickableFloatSetInTime, Tfloat) == 0x000000, "Member 'BeingFunctions_TickableFloatSetInTime::Tfloat' has a wrong offset!");
static_assert(offsetof(BeingFunctions_TickableFloatSetInTime, Value) == 0x00000C, "Member 'BeingFunctions_TickableFloatSetInTime::Value' has a wrong offset!");
static_assert(offsetof(BeingFunctions_TickableFloatSetInTime, Duration) == 0x000010, "Member 'BeingFunctions_TickableFloatSetInTime::Duration' has a wrong offset!");

// Function Being.BeingFunctions.tickableFloatSetWithStep
// 0x0014 (0x0014 - 0x0000)
struct BeingFunctions_TickableFloatSetWithStep final
{
public:
	struct FTickableFloat                         Tfloat;                                            // 0x0000(0x000C)(Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Step;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingFunctions_TickableFloatSetWithStep) == 0x000004, "Wrong alignment on BeingFunctions_TickableFloatSetWithStep");
static_assert(sizeof(BeingFunctions_TickableFloatSetWithStep) == 0x000014, "Wrong size on BeingFunctions_TickableFloatSetWithStep");
static_assert(offsetof(BeingFunctions_TickableFloatSetWithStep, Tfloat) == 0x000000, "Member 'BeingFunctions_TickableFloatSetWithStep::Tfloat' has a wrong offset!");
static_assert(offsetof(BeingFunctions_TickableFloatSetWithStep, Value) == 0x00000C, "Member 'BeingFunctions_TickableFloatSetWithStep::Value' has a wrong offset!");
static_assert(offsetof(BeingFunctions_TickableFloatSetWithStep, Step) == 0x000010, "Member 'BeingFunctions_TickableFloatSetWithStep::Step' has a wrong offset!");

// Function Being.BeingFunctions.tickableFloatTick
// 0x0010 (0x0010 - 0x0000)
struct BeingFunctions_TickableFloatTick final
{
public:
	struct FTickableFloat                         Tfloat;                                            // 0x0000(0x000C)(Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Deltasec;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingFunctions_TickableFloatTick) == 0x000004, "Wrong alignment on BeingFunctions_TickableFloatTick");
static_assert(sizeof(BeingFunctions_TickableFloatTick) == 0x000010, "Wrong size on BeingFunctions_TickableFloatTick");
static_assert(offsetof(BeingFunctions_TickableFloatTick, Tfloat) == 0x000000, "Member 'BeingFunctions_TickableFloatTick::Tfloat' has a wrong offset!");
static_assert(offsetof(BeingFunctions_TickableFloatTick, Deltasec) == 0x00000C, "Member 'BeingFunctions_TickableFloatTick::Deltasec' has a wrong offset!");

// Function Being.BeingHearingLevelStat.SetHearableNoiseLevel
// 0x0004 (0x0004 - 0x0000)
struct BeingHearingLevelStat_SetHearableNoiseLevel final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingHearingLevelStat_SetHearableNoiseLevel) == 0x000004, "Wrong alignment on BeingHearingLevelStat_SetHearableNoiseLevel");
static_assert(sizeof(BeingHearingLevelStat_SetHearableNoiseLevel) == 0x000004, "Wrong size on BeingHearingLevelStat_SetHearableNoiseLevel");
static_assert(offsetof(BeingHearingLevelStat_SetHearableNoiseLevel, Value) == 0x000000, "Member 'BeingHearingLevelStat_SetHearableNoiseLevel::Value' has a wrong offset!");

// Function Being.BeingHearingLevelStat.SetHearingLevel
// 0x0004 (0x0004 - 0x0000)
struct BeingHearingLevelStat_SetHearingLevel final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingHearingLevelStat_SetHearingLevel) == 0x000004, "Wrong alignment on BeingHearingLevelStat_SetHearingLevel");
static_assert(sizeof(BeingHearingLevelStat_SetHearingLevel) == 0x000004, "Wrong size on BeingHearingLevelStat_SetHearingLevel");
static_assert(offsetof(BeingHearingLevelStat_SetHearingLevel, Value) == 0x000000, "Member 'BeingHearingLevelStat_SetHearingLevel::Value' has a wrong offset!");

// Function Being.BeingHearingLevelStat.GetHearableNoiseLevel
// 0x0004 (0x0004 - 0x0000)
struct BeingHearingLevelStat_GetHearableNoiseLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingHearingLevelStat_GetHearableNoiseLevel) == 0x000004, "Wrong alignment on BeingHearingLevelStat_GetHearableNoiseLevel");
static_assert(sizeof(BeingHearingLevelStat_GetHearableNoiseLevel) == 0x000004, "Wrong size on BeingHearingLevelStat_GetHearableNoiseLevel");
static_assert(offsetof(BeingHearingLevelStat_GetHearableNoiseLevel, ReturnValue) == 0x000000, "Member 'BeingHearingLevelStat_GetHearableNoiseLevel::ReturnValue' has a wrong offset!");

// Function Being.BeingHearingLevelStat.GetHearingLevel
// 0x0004 (0x0004 - 0x0000)
struct BeingHearingLevelStat_GetHearingLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingHearingLevelStat_GetHearingLevel) == 0x000004, "Wrong alignment on BeingHearingLevelStat_GetHearingLevel");
static_assert(sizeof(BeingHearingLevelStat_GetHearingLevel) == 0x000004, "Wrong size on BeingHearingLevelStat_GetHearingLevel");
static_assert(offsetof(BeingHearingLevelStat_GetHearingLevel, ReturnValue) == 0x000000, "Member 'BeingHearingLevelStat_GetHearingLevel::ReturnValue' has a wrong offset!");

// Function Being.BeingHearingLevelStat.GetHearingLevelTheActor
// 0x0010 (0x0010 - 0x0000)
struct BeingHearingLevelStat_GetHearingLevelTheActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingHearingLevelStat_GetHearingLevelTheActor) == 0x000008, "Wrong alignment on BeingHearingLevelStat_GetHearingLevelTheActor");
static_assert(sizeof(BeingHearingLevelStat_GetHearingLevelTheActor) == 0x000010, "Wrong size on BeingHearingLevelStat_GetHearingLevelTheActor");
static_assert(offsetof(BeingHearingLevelStat_GetHearingLevelTheActor, Actor) == 0x000000, "Member 'BeingHearingLevelStat_GetHearingLevelTheActor::Actor' has a wrong offset!");
static_assert(offsetof(BeingHearingLevelStat_GetHearingLevelTheActor, ReturnValue) == 0x000008, "Member 'BeingHearingLevelStat_GetHearingLevelTheActor::ReturnValue' has a wrong offset!");

// Function Being.BeingHearingModStat.SetModLevel
// 0x0004 (0x0004 - 0x0000)
struct BeingHearingModStat_SetModLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingHearingModStat_SetModLevel) == 0x000004, "Wrong alignment on BeingHearingModStat_SetModLevel");
static_assert(sizeof(BeingHearingModStat_SetModLevel) == 0x000004, "Wrong size on BeingHearingModStat_SetModLevel");
static_assert(offsetof(BeingHearingModStat_SetModLevel, Level) == 0x000000, "Member 'BeingHearingModStat_SetModLevel::Level' has a wrong offset!");

// Function Being.BeingIgnoreMeStat.ClearIgnoreMeReason
// 0x0008 (0x0008 - 0x0000)
struct BeingIgnoreMeStat_ClearIgnoreMeReason final
{
public:
	class FName                                   Reason;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingIgnoreMeStat_ClearIgnoreMeReason) == 0x000004, "Wrong alignment on BeingIgnoreMeStat_ClearIgnoreMeReason");
static_assert(sizeof(BeingIgnoreMeStat_ClearIgnoreMeReason) == 0x000008, "Wrong size on BeingIgnoreMeStat_ClearIgnoreMeReason");
static_assert(offsetof(BeingIgnoreMeStat_ClearIgnoreMeReason, Reason) == 0x000000, "Member 'BeingIgnoreMeStat_ClearIgnoreMeReason::Reason' has a wrong offset!");

// Function Being.BeingIgnoreMeStat.SetAlwaysMissMe
// 0x0001 (0x0001 - 0x0000)
struct BeingIgnoreMeStat_SetAlwaysMissMe final
{
public:
	bool                                          MissMe;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingIgnoreMeStat_SetAlwaysMissMe) == 0x000001, "Wrong alignment on BeingIgnoreMeStat_SetAlwaysMissMe");
static_assert(sizeof(BeingIgnoreMeStat_SetAlwaysMissMe) == 0x000001, "Wrong size on BeingIgnoreMeStat_SetAlwaysMissMe");
static_assert(offsetof(BeingIgnoreMeStat_SetAlwaysMissMe, MissMe) == 0x000000, "Member 'BeingIgnoreMeStat_SetAlwaysMissMe::MissMe' has a wrong offset!");

// Function Being.BeingIgnoreMeStat.SetIgnoreMeReason
// 0x0008 (0x0008 - 0x0000)
struct BeingIgnoreMeStat_SetIgnoreMeReason final
{
public:
	class FName                                   Reason;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingIgnoreMeStat_SetIgnoreMeReason) == 0x000004, "Wrong alignment on BeingIgnoreMeStat_SetIgnoreMeReason");
static_assert(sizeof(BeingIgnoreMeStat_SetIgnoreMeReason) == 0x000008, "Wrong size on BeingIgnoreMeStat_SetIgnoreMeReason");
static_assert(offsetof(BeingIgnoreMeStat_SetIgnoreMeReason, Reason) == 0x000000, "Member 'BeingIgnoreMeStat_SetIgnoreMeReason::Reason' has a wrong offset!");

// Function Being.BeingIgnoreMeStat.SetIsDead
// 0x0001 (0x0001 - 0x0000)
struct BeingIgnoreMeStat_SetIsDead final
{
public:
	bool                                          IsDead;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingIgnoreMeStat_SetIsDead) == 0x000001, "Wrong alignment on BeingIgnoreMeStat_SetIsDead");
static_assert(sizeof(BeingIgnoreMeStat_SetIsDead) == 0x000001, "Wrong size on BeingIgnoreMeStat_SetIsDead");
static_assert(offsetof(BeingIgnoreMeStat_SetIsDead, IsDead) == 0x000000, "Member 'BeingIgnoreMeStat_SetIsDead::IsDead' has a wrong offset!");

// Function Being.BeingIgnoreMeStat.GetAlwaysMissMe
// 0x0001 (0x0001 - 0x0000)
struct BeingIgnoreMeStat_GetAlwaysMissMe final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingIgnoreMeStat_GetAlwaysMissMe) == 0x000001, "Wrong alignment on BeingIgnoreMeStat_GetAlwaysMissMe");
static_assert(sizeof(BeingIgnoreMeStat_GetAlwaysMissMe) == 0x000001, "Wrong size on BeingIgnoreMeStat_GetAlwaysMissMe");
static_assert(offsetof(BeingIgnoreMeStat_GetAlwaysMissMe, ReturnValue) == 0x000000, "Member 'BeingIgnoreMeStat_GetAlwaysMissMe::ReturnValue' has a wrong offset!");

// Function Being.BeingIgnoreMeStat.GetIgnoreMe
// 0x0001 (0x0001 - 0x0000)
struct BeingIgnoreMeStat_GetIgnoreMe final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingIgnoreMeStat_GetIgnoreMe) == 0x000001, "Wrong alignment on BeingIgnoreMeStat_GetIgnoreMe");
static_assert(sizeof(BeingIgnoreMeStat_GetIgnoreMe) == 0x000001, "Wrong size on BeingIgnoreMeStat_GetIgnoreMe");
static_assert(offsetof(BeingIgnoreMeStat_GetIgnoreMe, ReturnValue) == 0x000000, "Member 'BeingIgnoreMeStat_GetIgnoreMe::ReturnValue' has a wrong offset!");

// Function Being.BeingIgnoreMeStat.GetIsDead
// 0x0001 (0x0001 - 0x0000)
struct BeingIgnoreMeStat_GetIsDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingIgnoreMeStat_GetIsDead) == 0x000001, "Wrong alignment on BeingIgnoreMeStat_GetIsDead");
static_assert(sizeof(BeingIgnoreMeStat_GetIsDead) == 0x000001, "Wrong size on BeingIgnoreMeStat_GetIsDead");
static_assert(offsetof(BeingIgnoreMeStat_GetIsDead, ReturnValue) == 0x000000, "Member 'BeingIgnoreMeStat_GetIsDead::ReturnValue' has a wrong offset!");

// Function Being.BeingLocationTracker.GetLocationHistory
// 0x0010 (0x0010 - 0x0000)
struct BeingLocationTracker_GetLocationHistory final
{
public:
	TArray<struct FVector>                        ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingLocationTracker_GetLocationHistory) == 0x000008, "Wrong alignment on BeingLocationTracker_GetLocationHistory");
static_assert(sizeof(BeingLocationTracker_GetLocationHistory) == 0x000010, "Wrong size on BeingLocationTracker_GetLocationHistory");
static_assert(offsetof(BeingLocationTracker_GetLocationHistory, ReturnValue) == 0x000000, "Member 'BeingLocationTracker_GetLocationHistory::ReturnValue' has a wrong offset!");

// Function Being.BeingMaxSpeedStat.SetMaxSpeed
// 0x0004 (0x0004 - 0x0000)
struct BeingMaxSpeedStat_SetMaxSpeed final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingMaxSpeedStat_SetMaxSpeed) == 0x000004, "Wrong alignment on BeingMaxSpeedStat_SetMaxSpeed");
static_assert(sizeof(BeingMaxSpeedStat_SetMaxSpeed) == 0x000004, "Wrong size on BeingMaxSpeedStat_SetMaxSpeed");
static_assert(offsetof(BeingMaxSpeedStat_SetMaxSpeed, Value) == 0x000000, "Member 'BeingMaxSpeedStat_SetMaxSpeed::Value' has a wrong offset!");

// Function Being.BeingMaxSpeedStat.GetMaxSpeed
// 0x0004 (0x0004 - 0x0000)
struct BeingMaxSpeedStat_GetMaxSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingMaxSpeedStat_GetMaxSpeed) == 0x000004, "Wrong alignment on BeingMaxSpeedStat_GetMaxSpeed");
static_assert(sizeof(BeingMaxSpeedStat_GetMaxSpeed) == 0x000004, "Wrong size on BeingMaxSpeedStat_GetMaxSpeed");
static_assert(offsetof(BeingMaxSpeedStat_GetMaxSpeed, ReturnValue) == 0x000000, "Member 'BeingMaxSpeedStat_GetMaxSpeed::ReturnValue' has a wrong offset!");

// Function Being.BeingMaxWalkSpeedStat.OverrideSpeedValues
// 0x0050 (0x0050 - 0x0000)
struct BeingMaxWalkSpeedStat_OverrideSpeedValues final
{
public:
	TMap<EBeingWalkingStance, float>              MaxSpeeds;                                         // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingMaxWalkSpeedStat_OverrideSpeedValues) == 0x000008, "Wrong alignment on BeingMaxWalkSpeedStat_OverrideSpeedValues");
static_assert(sizeof(BeingMaxWalkSpeedStat_OverrideSpeedValues) == 0x000050, "Wrong size on BeingMaxWalkSpeedStat_OverrideSpeedValues");
static_assert(offsetof(BeingMaxWalkSpeedStat_OverrideSpeedValues, MaxSpeeds) == 0x000000, "Member 'BeingMaxWalkSpeedStat_OverrideSpeedValues::MaxSpeeds' has a wrong offset!");

// Function Being.BeingMaxWalkSpeedStat.SetWalkingStance
// 0x0002 (0x0002 - 0x0000)
struct BeingMaxWalkSpeedStat_SetWalkingStance final
{
public:
	EBeingWalkingStance                           Stance;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingMaxWalkSpeedStat_SetWalkingStance) == 0x000001, "Wrong alignment on BeingMaxWalkSpeedStat_SetWalkingStance");
static_assert(sizeof(BeingMaxWalkSpeedStat_SetWalkingStance) == 0x000002, "Wrong size on BeingMaxWalkSpeedStat_SetWalkingStance");
static_assert(offsetof(BeingMaxWalkSpeedStat_SetWalkingStance, Stance) == 0x000000, "Member 'BeingMaxWalkSpeedStat_SetWalkingStance::Stance' has a wrong offset!");
static_assert(offsetof(BeingMaxWalkSpeedStat_SetWalkingStance, Priority) == 0x000001, "Member 'BeingMaxWalkSpeedStat_SetWalkingStance::Priority' has a wrong offset!");

// Function Being.BeingMaxWalkSpeedStat.GetTotalMaxSpeed
// 0x0004 (0x0004 - 0x0000)
struct BeingMaxWalkSpeedStat_GetTotalMaxSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingMaxWalkSpeedStat_GetTotalMaxSpeed) == 0x000004, "Wrong alignment on BeingMaxWalkSpeedStat_GetTotalMaxSpeed");
static_assert(sizeof(BeingMaxWalkSpeedStat_GetTotalMaxSpeed) == 0x000004, "Wrong size on BeingMaxWalkSpeedStat_GetTotalMaxSpeed");
static_assert(offsetof(BeingMaxWalkSpeedStat_GetTotalMaxSpeed, ReturnValue) == 0x000000, "Member 'BeingMaxWalkSpeedStat_GetTotalMaxSpeed::ReturnValue' has a wrong offset!");

// Function Being.BeingMaxWalkSpeedStat.GetWalkingStance
// 0x0001 (0x0001 - 0x0000)
struct BeingMaxWalkSpeedStat_GetWalkingStance final
{
public:
	EBeingWalkingStance                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingMaxWalkSpeedStat_GetWalkingStance) == 0x000001, "Wrong alignment on BeingMaxWalkSpeedStat_GetWalkingStance");
static_assert(sizeof(BeingMaxWalkSpeedStat_GetWalkingStance) == 0x000001, "Wrong size on BeingMaxWalkSpeedStat_GetWalkingStance");
static_assert(offsetof(BeingMaxWalkSpeedStat_GetWalkingStance, ReturnValue) == 0x000000, "Member 'BeingMaxWalkSpeedStat_GetWalkingStance::ReturnValue' has a wrong offset!");

// Function Being.BeingNoiseLevelStat.SetNoiseLevel
// 0x0004 (0x0004 - 0x0000)
struct BeingNoiseLevelStat_SetNoiseLevel final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingNoiseLevelStat_SetNoiseLevel) == 0x000004, "Wrong alignment on BeingNoiseLevelStat_SetNoiseLevel");
static_assert(sizeof(BeingNoiseLevelStat_SetNoiseLevel) == 0x000004, "Wrong size on BeingNoiseLevelStat_SetNoiseLevel");
static_assert(offsetof(BeingNoiseLevelStat_SetNoiseLevel, Value) == 0x000000, "Member 'BeingNoiseLevelStat_SetNoiseLevel::Value' has a wrong offset!");

// Function Being.BeingNoiseLevelStat.GetNoiseLevel
// 0x0004 (0x0004 - 0x0000)
struct BeingNoiseLevelStat_GetNoiseLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingNoiseLevelStat_GetNoiseLevel) == 0x000004, "Wrong alignment on BeingNoiseLevelStat_GetNoiseLevel");
static_assert(sizeof(BeingNoiseLevelStat_GetNoiseLevel) == 0x000004, "Wrong size on BeingNoiseLevelStat_GetNoiseLevel");
static_assert(offsetof(BeingNoiseLevelStat_GetNoiseLevel, ReturnValue) == 0x000000, "Member 'BeingNoiseLevelStat_GetNoiseLevel::ReturnValue' has a wrong offset!");

// Function Being.BeingNoiseLevelStat.IsNoiseMuted
// 0x000C (0x000C - 0x0000)
struct BeingNoiseLevelStat_IsNoiseMuted final
{
public:
	class FName                                   NoiseTag;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingNoiseLevelStat_IsNoiseMuted) == 0x000004, "Wrong alignment on BeingNoiseLevelStat_IsNoiseMuted");
static_assert(sizeof(BeingNoiseLevelStat_IsNoiseMuted) == 0x00000C, "Wrong size on BeingNoiseLevelStat_IsNoiseMuted");
static_assert(offsetof(BeingNoiseLevelStat_IsNoiseMuted, NoiseTag) == 0x000000, "Member 'BeingNoiseLevelStat_IsNoiseMuted::NoiseTag' has a wrong offset!");
static_assert(offsetof(BeingNoiseLevelStat_IsNoiseMuted, ReturnValue) == 0x000008, "Member 'BeingNoiseLevelStat_IsNoiseMuted::ReturnValue' has a wrong offset!");

// Function Being.BeingNoiseModStat.SetModLevel
// 0x0004 (0x0004 - 0x0000)
struct BeingNoiseModStat_SetModLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingNoiseModStat_SetModLevel) == 0x000004, "Wrong alignment on BeingNoiseModStat_SetModLevel");
static_assert(sizeof(BeingNoiseModStat_SetModLevel) == 0x000004, "Wrong size on BeingNoiseModStat_SetModLevel");
static_assert(offsetof(BeingNoiseModStat_SetModLevel, Level) == 0x000000, "Member 'BeingNoiseModStat_SetModLevel::Level' has a wrong offset!");

// Function Being.BeingOdorLevelStat.SetOdorLevel
// 0x0004 (0x0004 - 0x0000)
struct BeingOdorLevelStat_SetOdorLevel final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingOdorLevelStat_SetOdorLevel) == 0x000004, "Wrong alignment on BeingOdorLevelStat_SetOdorLevel");
static_assert(sizeof(BeingOdorLevelStat_SetOdorLevel) == 0x000004, "Wrong size on BeingOdorLevelStat_SetOdorLevel");
static_assert(offsetof(BeingOdorLevelStat_SetOdorLevel, Value) == 0x000000, "Member 'BeingOdorLevelStat_SetOdorLevel::Value' has a wrong offset!");

// Function Being.BeingOdorLevelStat.GetOdorLevel
// 0x0004 (0x0004 - 0x0000)
struct BeingOdorLevelStat_GetOdorLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingOdorLevelStat_GetOdorLevel) == 0x000004, "Wrong alignment on BeingOdorLevelStat_GetOdorLevel");
static_assert(sizeof(BeingOdorLevelStat_GetOdorLevel) == 0x000004, "Wrong size on BeingOdorLevelStat_GetOdorLevel");
static_assert(offsetof(BeingOdorLevelStat_GetOdorLevel, ReturnValue) == 0x000000, "Member 'BeingOdorLevelStat_GetOdorLevel::ReturnValue' has a wrong offset!");

// Function Being.BeingOdorModStat.SetModLevel
// 0x0004 (0x0004 - 0x0000)
struct BeingOdorModStat_SetModLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingOdorModStat_SetModLevel) == 0x000004, "Wrong alignment on BeingOdorModStat_SetModLevel");
static_assert(sizeof(BeingOdorModStat_SetModLevel) == 0x000004, "Wrong size on BeingOdorModStat_SetModLevel");
static_assert(offsetof(BeingOdorModStat_SetModLevel, Level) == 0x000000, "Member 'BeingOdorModStat_SetModLevel::Level' has a wrong offset!");

// Function Being.BeingRootMotionBank.Stamp
// 0x0018 (0x0018 - 0x0000)
struct BeingRootMotionBank_Stamp final
{
public:
	const class UAnimSequence*                    Animation;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingRootMotionBank_Stamp) == 0x000008, "Wrong alignment on BeingRootMotionBank_Stamp");
static_assert(sizeof(BeingRootMotionBank_Stamp) == 0x000018, "Wrong size on BeingRootMotionBank_Stamp");
static_assert(offsetof(BeingRootMotionBank_Stamp, Animation) == 0x000000, "Member 'BeingRootMotionBank_Stamp::Animation' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_Stamp, Color) == 0x000008, "Member 'BeingRootMotionBank_Stamp::Color' has a wrong offset!");

// Function Being.BeingRootMotionBank.StampBS
// 0x0038 (0x0038 - 0x0000)
struct BeingRootMotionBank_StampBS final
{
public:
	const class UBlendSpace*                      BlendSpace;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetLocation;                                    // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0028(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingRootMotionBank_StampBS) == 0x000008, "Wrong alignment on BeingRootMotionBank_StampBS");
static_assert(sizeof(BeingRootMotionBank_StampBS) == 0x000038, "Wrong size on BeingRootMotionBank_StampBS");
static_assert(offsetof(BeingRootMotionBank_StampBS, BlendSpace) == 0x000000, "Member 'BeingRootMotionBank_StampBS::BlendSpace' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_StampBS, Yaw) == 0x000008, "Member 'BeingRootMotionBank_StampBS::Yaw' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_StampBS, TargetLocation) == 0x000010, "Member 'BeingRootMotionBank_StampBS::TargetLocation' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_StampBS, Color) == 0x000028, "Member 'BeingRootMotionBank_StampBS::Color' has a wrong offset!");

// Function Being.BeingRootMotionBank.CanGotoWithBlendspace
// 0x0038 (0x0038 - 0x0000)
struct BeingRootMotionBank_CanGotoWithBlendspace final
{
public:
	const class UBlendSpace*                      BlendSpace;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingRootMotionBank_CanGotoWithBlendspace) == 0x000008, "Wrong alignment on BeingRootMotionBank_CanGotoWithBlendspace");
static_assert(sizeof(BeingRootMotionBank_CanGotoWithBlendspace) == 0x000038, "Wrong size on BeingRootMotionBank_CanGotoWithBlendspace");
static_assert(offsetof(BeingRootMotionBank_CanGotoWithBlendspace, BlendSpace) == 0x000000, "Member 'BeingRootMotionBank_CanGotoWithBlendspace::BlendSpace' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_CanGotoWithBlendspace, Location) == 0x000008, "Member 'BeingRootMotionBank_CanGotoWithBlendspace::Location' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_CanGotoWithBlendspace, Distance) == 0x000020, "Member 'BeingRootMotionBank_CanGotoWithBlendspace::Distance' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_CanGotoWithBlendspace, FilterClass) == 0x000028, "Member 'BeingRootMotionBank_CanGotoWithBlendspace::FilterClass' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_CanGotoWithBlendspace, ReturnValue) == 0x000030, "Member 'BeingRootMotionBank_CanGotoWithBlendspace::ReturnValue' has a wrong offset!");

// Function Being.BeingRootMotionBank.CanGoWithAnim
// 0x0020 (0x0020 - 0x0000)
struct BeingRootMotionBank_CanGoWithAnim final
{
public:
	const class UAnimSequence*                    Animation;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingRootMotionBank_CanGoWithAnim) == 0x000008, "Wrong alignment on BeingRootMotionBank_CanGoWithAnim");
static_assert(sizeof(BeingRootMotionBank_CanGoWithAnim) == 0x000020, "Wrong size on BeingRootMotionBank_CanGoWithAnim");
static_assert(offsetof(BeingRootMotionBank_CanGoWithAnim, Animation) == 0x000000, "Member 'BeingRootMotionBank_CanGoWithAnim::Animation' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_CanGoWithAnim, Distance) == 0x000008, "Member 'BeingRootMotionBank_CanGoWithAnim::Distance' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_CanGoWithAnim, FilterClass) == 0x000010, "Member 'BeingRootMotionBank_CanGoWithAnim::FilterClass' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_CanGoWithAnim, ReturnValue) == 0x000018, "Member 'BeingRootMotionBank_CanGoWithAnim::ReturnValue' has a wrong offset!");

// Function Being.BeingRootMotionBank.CanGoWithBlendspace
// 0x0020 (0x0020 - 0x0000)
struct BeingRootMotionBank_CanGoWithBlendspace final
{
public:
	const class UBlendSpace*                      BlendSpace;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingRootMotionBank_CanGoWithBlendspace) == 0x000008, "Wrong alignment on BeingRootMotionBank_CanGoWithBlendspace");
static_assert(sizeof(BeingRootMotionBank_CanGoWithBlendspace) == 0x000020, "Wrong size on BeingRootMotionBank_CanGoWithBlendspace");
static_assert(offsetof(BeingRootMotionBank_CanGoWithBlendspace, BlendSpace) == 0x000000, "Member 'BeingRootMotionBank_CanGoWithBlendspace::BlendSpace' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_CanGoWithBlendspace, Yaw) == 0x000008, "Member 'BeingRootMotionBank_CanGoWithBlendspace::Yaw' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_CanGoWithBlendspace, Distance) == 0x00000C, "Member 'BeingRootMotionBank_CanGoWithBlendspace::Distance' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_CanGoWithBlendspace, FilterClass) == 0x000010, "Member 'BeingRootMotionBank_CanGoWithBlendspace::FilterClass' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_CanGoWithBlendspace, ReturnValue) == 0x000018, "Member 'BeingRootMotionBank_CanGoWithBlendspace::ReturnValue' has a wrong offset!");

// Function Being.BeingRootMotionBank.FindBestAngleForBlendSpace
// 0x0028 (0x0028 - 0x0000)
struct BeingRootMotionBank_FindBestAngleForBlendSpace final
{
public:
	const class UBlendSpace*                      BlendSpace;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingRootMotionBank_FindBestAngleForBlendSpace) == 0x000008, "Wrong alignment on BeingRootMotionBank_FindBestAngleForBlendSpace");
static_assert(sizeof(BeingRootMotionBank_FindBestAngleForBlendSpace) == 0x000028, "Wrong size on BeingRootMotionBank_FindBestAngleForBlendSpace");
static_assert(offsetof(BeingRootMotionBank_FindBestAngleForBlendSpace, BlendSpace) == 0x000000, "Member 'BeingRootMotionBank_FindBestAngleForBlendSpace::BlendSpace' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_FindBestAngleForBlendSpace, Location) == 0x000008, "Member 'BeingRootMotionBank_FindBestAngleForBlendSpace::Location' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_FindBestAngleForBlendSpace, ReturnValue) == 0x000020, "Member 'BeingRootMotionBank_FindBestAngleForBlendSpace::ReturnValue' has a wrong offset!");

// Function Being.BeingRootMotionBank.FindBestSpeedForAnim
// 0x0028 (0x0028 - 0x0000)
struct BeingRootMotionBank_FindBestSpeedForAnim final
{
public:
	const class UAnimSequence*                    Animation;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingRootMotionBank_FindBestSpeedForAnim) == 0x000008, "Wrong alignment on BeingRootMotionBank_FindBestSpeedForAnim");
static_assert(sizeof(BeingRootMotionBank_FindBestSpeedForAnim) == 0x000028, "Wrong size on BeingRootMotionBank_FindBestSpeedForAnim");
static_assert(offsetof(BeingRootMotionBank_FindBestSpeedForAnim, Animation) == 0x000000, "Member 'BeingRootMotionBank_FindBestSpeedForAnim::Animation' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_FindBestSpeedForAnim, Location) == 0x000008, "Member 'BeingRootMotionBank_FindBestSpeedForAnim::Location' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_FindBestSpeedForAnim, ReturnValue) == 0x000020, "Member 'BeingRootMotionBank_FindBestSpeedForAnim::ReturnValue' has a wrong offset!");

// Function Being.BeingRootMotionBank.FindBestSpeedForBlendSpace
// 0x0028 (0x0028 - 0x0000)
struct BeingRootMotionBank_FindBestSpeedForBlendSpace final
{
public:
	const class UBlendSpace*                      BlendSpace;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingRootMotionBank_FindBestSpeedForBlendSpace) == 0x000008, "Wrong alignment on BeingRootMotionBank_FindBestSpeedForBlendSpace");
static_assert(sizeof(BeingRootMotionBank_FindBestSpeedForBlendSpace) == 0x000028, "Wrong size on BeingRootMotionBank_FindBestSpeedForBlendSpace");
static_assert(offsetof(BeingRootMotionBank_FindBestSpeedForBlendSpace, BlendSpace) == 0x000000, "Member 'BeingRootMotionBank_FindBestSpeedForBlendSpace::BlendSpace' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_FindBestSpeedForBlendSpace, Location) == 0x000008, "Member 'BeingRootMotionBank_FindBestSpeedForBlendSpace::Location' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_FindBestSpeedForBlendSpace, ReturnValue) == 0x000020, "Member 'BeingRootMotionBank_FindBestSpeedForBlendSpace::ReturnValue' has a wrong offset!");

// Function Being.BeingRootMotionBank.GetBoneFinalTransform
// 0x0080 (0x0080 - 0x0000)
struct BeingRootMotionBank_GetBoneFinalTransform final
{
public:
	const class UAnimSequence*                    AnimationSequence;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0xF];                                       // 0x0071(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingRootMotionBank_GetBoneFinalTransform) == 0x000010, "Wrong alignment on BeingRootMotionBank_GetBoneFinalTransform");
static_assert(sizeof(BeingRootMotionBank_GetBoneFinalTransform) == 0x000080, "Wrong size on BeingRootMotionBank_GetBoneFinalTransform");
static_assert(offsetof(BeingRootMotionBank_GetBoneFinalTransform, AnimationSequence) == 0x000000, "Member 'BeingRootMotionBank_GetBoneFinalTransform::AnimationSequence' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_GetBoneFinalTransform, BoneName) == 0x000008, "Member 'BeingRootMotionBank_GetBoneFinalTransform::BoneName' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_GetBoneFinalTransform, Transform) == 0x000010, "Member 'BeingRootMotionBank_GetBoneFinalTransform::Transform' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_GetBoneFinalTransform, ReturnValue) == 0x000070, "Member 'BeingRootMotionBank_GetBoneFinalTransform::ReturnValue' has a wrong offset!");

// Function Being.BeingRootMotionBank.GetBoneInitialTransform
// 0x0080 (0x0080 - 0x0000)
struct BeingRootMotionBank_GetBoneInitialTransform final
{
public:
	const class UAnimSequence*                    AnimationSequence;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0xF];                                       // 0x0071(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingRootMotionBank_GetBoneInitialTransform) == 0x000010, "Wrong alignment on BeingRootMotionBank_GetBoneInitialTransform");
static_assert(sizeof(BeingRootMotionBank_GetBoneInitialTransform) == 0x000080, "Wrong size on BeingRootMotionBank_GetBoneInitialTransform");
static_assert(offsetof(BeingRootMotionBank_GetBoneInitialTransform, AnimationSequence) == 0x000000, "Member 'BeingRootMotionBank_GetBoneInitialTransform::AnimationSequence' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_GetBoneInitialTransform, BoneName) == 0x000008, "Member 'BeingRootMotionBank_GetBoneInitialTransform::BoneName' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_GetBoneInitialTransform, Transform) == 0x000010, "Member 'BeingRootMotionBank_GetBoneInitialTransform::Transform' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_GetBoneInitialTransform, ReturnValue) == 0x000070, "Member 'BeingRootMotionBank_GetBoneInitialTransform::ReturnValue' has a wrong offset!");

// Function Being.BeingRootMotionBank.GetBoneMovement
// 0x0080 (0x0080 - 0x0000)
struct BeingRootMotionBank_GetBoneMovement final
{
public:
	const class UAnimSequence*                    AnimationSequence;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Movement;                                          // 0x0010(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0xF];                                       // 0x0071(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingRootMotionBank_GetBoneMovement) == 0x000010, "Wrong alignment on BeingRootMotionBank_GetBoneMovement");
static_assert(sizeof(BeingRootMotionBank_GetBoneMovement) == 0x000080, "Wrong size on BeingRootMotionBank_GetBoneMovement");
static_assert(offsetof(BeingRootMotionBank_GetBoneMovement, AnimationSequence) == 0x000000, "Member 'BeingRootMotionBank_GetBoneMovement::AnimationSequence' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_GetBoneMovement, BoneName) == 0x000008, "Member 'BeingRootMotionBank_GetBoneMovement::BoneName' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_GetBoneMovement, Movement) == 0x000010, "Member 'BeingRootMotionBank_GetBoneMovement::Movement' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_GetBoneMovement, ReturnValue) == 0x000070, "Member 'BeingRootMotionBank_GetBoneMovement::ReturnValue' has a wrong offset!");

// Function Being.BeingRootMotionBank.GetLocalOffset
// 0x0020 (0x0020 - 0x0000)
struct BeingRootMotionBank_GetLocalOffset final
{
public:
	const class UAnimSequence*                    Animation;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingRootMotionBank_GetLocalOffset) == 0x000008, "Wrong alignment on BeingRootMotionBank_GetLocalOffset");
static_assert(sizeof(BeingRootMotionBank_GetLocalOffset) == 0x000020, "Wrong size on BeingRootMotionBank_GetLocalOffset");
static_assert(offsetof(BeingRootMotionBank_GetLocalOffset, Animation) == 0x000000, "Member 'BeingRootMotionBank_GetLocalOffset::Animation' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_GetLocalOffset, ReturnValue) == 0x000008, "Member 'BeingRootMotionBank_GetLocalOffset::ReturnValue' has a wrong offset!");

// Function Being.BeingRootMotionBank.TryGetRootMotionData
// 0x0058 (0x0058 - 0x0000)
struct BeingRootMotionBank_TryGetRootMotionData final
{
public:
	const class UAnimSequence*                    Animation;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnimationRootMotion                   Outdata;                                           // 0x0008(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          InActorRotation;                                   // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0051(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingRootMotionBank_TryGetRootMotionData) == 0x000008, "Wrong alignment on BeingRootMotionBank_TryGetRootMotionData");
static_assert(sizeof(BeingRootMotionBank_TryGetRootMotionData) == 0x000058, "Wrong size on BeingRootMotionBank_TryGetRootMotionData");
static_assert(offsetof(BeingRootMotionBank_TryGetRootMotionData, Animation) == 0x000000, "Member 'BeingRootMotionBank_TryGetRootMotionData::Animation' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_TryGetRootMotionData, Outdata) == 0x000008, "Member 'BeingRootMotionBank_TryGetRootMotionData::Outdata' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_TryGetRootMotionData, InActorRotation) == 0x000050, "Member 'BeingRootMotionBank_TryGetRootMotionData::InActorRotation' has a wrong offset!");
static_assert(offsetof(BeingRootMotionBank_TryGetRootMotionData, ReturnValue) == 0x000051, "Member 'BeingRootMotionBank_TryGetRootMotionData::ReturnValue' has a wrong offset!");

// Function Being.BeingSmellLevelStat.SetSmellLevel
// 0x0004 (0x0004 - 0x0000)
struct BeingSmellLevelStat_SetSmellLevel final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingSmellLevelStat_SetSmellLevel) == 0x000004, "Wrong alignment on BeingSmellLevelStat_SetSmellLevel");
static_assert(sizeof(BeingSmellLevelStat_SetSmellLevel) == 0x000004, "Wrong size on BeingSmellLevelStat_SetSmellLevel");
static_assert(offsetof(BeingSmellLevelStat_SetSmellLevel, Value) == 0x000000, "Member 'BeingSmellLevelStat_SetSmellLevel::Value' has a wrong offset!");

// Function Being.BeingSmellLevelStat.GetSmellLevel
// 0x0004 (0x0004 - 0x0000)
struct BeingSmellLevelStat_GetSmellLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingSmellLevelStat_GetSmellLevel) == 0x000004, "Wrong alignment on BeingSmellLevelStat_GetSmellLevel");
static_assert(sizeof(BeingSmellLevelStat_GetSmellLevel) == 0x000004, "Wrong size on BeingSmellLevelStat_GetSmellLevel");
static_assert(offsetof(BeingSmellLevelStat_GetSmellLevel, ReturnValue) == 0x000000, "Member 'BeingSmellLevelStat_GetSmellLevel::ReturnValue' has a wrong offset!");

// Function Being.BeingSmellModStat.SetModLevel
// 0x0004 (0x0004 - 0x0000)
struct BeingSmellModStat_SetModLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingSmellModStat_SetModLevel) == 0x000004, "Wrong alignment on BeingSmellModStat_SetModLevel");
static_assert(sizeof(BeingSmellModStat_SetModLevel) == 0x000004, "Wrong size on BeingSmellModStat_SetModLevel");
static_assert(offsetof(BeingSmellModStat_SetModLevel, Level) == 0x000000, "Member 'BeingSmellModStat_SetModLevel::Level' has a wrong offset!");

// Function Being.BeingSpeedModStat.SetSpeedMod
// 0x0004 (0x0004 - 0x0000)
struct BeingSpeedModStat_SetSpeedMod final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingSpeedModStat_SetSpeedMod) == 0x000004, "Wrong alignment on BeingSpeedModStat_SetSpeedMod");
static_assert(sizeof(BeingSpeedModStat_SetSpeedMod) == 0x000004, "Wrong size on BeingSpeedModStat_SetSpeedMod");
static_assert(offsetof(BeingSpeedModStat_SetSpeedMod, Value) == 0x000000, "Member 'BeingSpeedModStat_SetSpeedMod::Value' has a wrong offset!");

// Function Being.BeingSpeedModStat.GetSpeedMod
// 0x0004 (0x0004 - 0x0000)
struct BeingSpeedModStat_GetSpeedMod final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingSpeedModStat_GetSpeedMod) == 0x000004, "Wrong alignment on BeingSpeedModStat_GetSpeedMod");
static_assert(sizeof(BeingSpeedModStat_GetSpeedMod) == 0x000004, "Wrong size on BeingSpeedModStat_GetSpeedMod");
static_assert(offsetof(BeingSpeedModStat_GetSpeedMod, ReturnValue) == 0x000000, "Member 'BeingSpeedModStat_GetSpeedMod::ReturnValue' has a wrong offset!");

// Function Being.BeingBoolStat.SetBoolStat
// 0x0001 (0x0001 - 0x0000)
struct BeingBoolStat_SetBoolStat final
{
public:
	bool                                          Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingBoolStat_SetBoolStat) == 0x000001, "Wrong alignment on BeingBoolStat_SetBoolStat");
static_assert(sizeof(BeingBoolStat_SetBoolStat) == 0x000001, "Wrong size on BeingBoolStat_SetBoolStat");
static_assert(offsetof(BeingBoolStat_SetBoolStat, Stat) == 0x000000, "Member 'BeingBoolStat_SetBoolStat::Stat' has a wrong offset!");

// Function Being.BeingBoolStat.GetBoolStat
// 0x0001 (0x0001 - 0x0000)
struct BeingBoolStat_GetBoolStat final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingBoolStat_GetBoolStat) == 0x000001, "Wrong alignment on BeingBoolStat_GetBoolStat");
static_assert(sizeof(BeingBoolStat_GetBoolStat) == 0x000001, "Wrong size on BeingBoolStat_GetBoolStat");
static_assert(offsetof(BeingBoolStat_GetBoolStat, ReturnValue) == 0x000000, "Member 'BeingBoolStat_GetBoolStat::ReturnValue' has a wrong offset!");

// Function Being.BeingRelativeStat.SetRelativeStat
// 0x0010 (0x0010 - 0x0000)
struct BeingRelativeStat_SetRelativeStat final
{
public:
	class AActor*                                 Other;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Stat;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingRelativeStat_SetRelativeStat) == 0x000008, "Wrong alignment on BeingRelativeStat_SetRelativeStat");
static_assert(sizeof(BeingRelativeStat_SetRelativeStat) == 0x000010, "Wrong size on BeingRelativeStat_SetRelativeStat");
static_assert(offsetof(BeingRelativeStat_SetRelativeStat, Other) == 0x000000, "Member 'BeingRelativeStat_SetRelativeStat::Other' has a wrong offset!");
static_assert(offsetof(BeingRelativeStat_SetRelativeStat, Stat) == 0x000008, "Member 'BeingRelativeStat_SetRelativeStat::Stat' has a wrong offset!");

// Function Being.BeingRelativeStat.GetOther
// 0x0008 (0x0008 - 0x0000)
struct BeingRelativeStat_GetOther final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingRelativeStat_GetOther) == 0x000008, "Wrong alignment on BeingRelativeStat_GetOther");
static_assert(sizeof(BeingRelativeStat_GetOther) == 0x000008, "Wrong size on BeingRelativeStat_GetOther");
static_assert(offsetof(BeingRelativeStat_GetOther, ReturnValue) == 0x000000, "Member 'BeingRelativeStat_GetOther::ReturnValue' has a wrong offset!");

// Function Being.BeingRelativeStat.GetRelativeStat
// 0x0010 (0x0010 - 0x0000)
struct BeingRelativeStat_GetRelativeStat final
{
public:
	class AActor*                                 Other;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingRelativeStat_GetRelativeStat) == 0x000008, "Wrong alignment on BeingRelativeStat_GetRelativeStat");
static_assert(sizeof(BeingRelativeStat_GetRelativeStat) == 0x000010, "Wrong size on BeingRelativeStat_GetRelativeStat");
static_assert(offsetof(BeingRelativeStat_GetRelativeStat, Other) == 0x000000, "Member 'BeingRelativeStat_GetRelativeStat::Other' has a wrong offset!");
static_assert(offsetof(BeingRelativeStat_GetRelativeStat, ReturnValue) == 0x000008, "Member 'BeingRelativeStat_GetRelativeStat::ReturnValue' has a wrong offset!");

// Function Being.BeingState.createState
// 0x0018 (0x0018 - 0x0000)
struct BeingState_CreateState final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UBeingState>                Class_0;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBeingState*                            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingState_CreateState) == 0x000008, "Wrong alignment on BeingState_CreateState");
static_assert(sizeof(BeingState_CreateState) == 0x000018, "Wrong size on BeingState_CreateState");
static_assert(offsetof(BeingState_CreateState, WorldContextObject) == 0x000000, "Member 'BeingState_CreateState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BeingState_CreateState, Class_0) == 0x000008, "Member 'BeingState_CreateState::Class_0' has a wrong offset!");
static_assert(offsetof(BeingState_CreateState, ReturnValue) == 0x000010, "Member 'BeingState_CreateState::ReturnValue' has a wrong offset!");

// Function Being.BeingState.FinishState
// 0x0001 (0x0001 - 0x0000)
struct BeingState_FinishState final
{
public:
	EStateStatus                                  Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingState_FinishState) == 0x000001, "Wrong alignment on BeingState_FinishState");
static_assert(sizeof(BeingState_FinishState) == 0x000001, "Wrong size on BeingState_FinishState");
static_assert(offsetof(BeingState_FinishState, Status) == 0x000000, "Member 'BeingState_FinishState::Status' has a wrong offset!");

// Function Being.BeingState.ProcessSubStates
// 0x0008 (0x0008 - 0x0000)
struct BeingState_ProcessSubStates final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingState_ProcessSubStates) == 0x000004, "Wrong alignment on BeingState_ProcessSubStates");
static_assert(sizeof(BeingState_ProcessSubStates) == 0x000008, "Wrong size on BeingState_ProcessSubStates");
static_assert(offsetof(BeingState_ProcessSubStates, DeltaSeconds) == 0x000000, "Member 'BeingState_ProcessSubStates::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BeingState_ProcessSubStates, ReturnValue) == 0x000004, "Member 'BeingState_ProcessSubStates::ReturnValue' has a wrong offset!");

// Function Being.BeingState.ReceiveExit
// 0x0001 (0x0001 - 0x0000)
struct BeingState_ReceiveExit final
{
public:
	EStateStatus                                  Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingState_ReceiveExit) == 0x000001, "Wrong alignment on BeingState_ReceiveExit");
static_assert(sizeof(BeingState_ReceiveExit) == 0x000001, "Wrong size on BeingState_ReceiveExit");
static_assert(offsetof(BeingState_ReceiveExit, Status) == 0x000000, "Member 'BeingState_ReceiveExit::Status' has a wrong offset!");

// Function Being.BeingState.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BeingState_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingState_ReceiveTick) == 0x000004, "Wrong alignment on BeingState_ReceiveTick");
static_assert(sizeof(BeingState_ReceiveTick) == 0x000004, "Wrong size on BeingState_ReceiveTick");
static_assert(offsetof(BeingState_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BeingState_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function Being.BeingState.GetOwner
// 0x0008 (0x0008 - 0x0000)
struct BeingState_GetOwner final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingState_GetOwner) == 0x000008, "Wrong alignment on BeingState_GetOwner");
static_assert(sizeof(BeingState_GetOwner) == 0x000008, "Wrong size on BeingState_GetOwner");
static_assert(offsetof(BeingState_GetOwner, ReturnValue) == 0x000000, "Member 'BeingState_GetOwner::ReturnValue' has a wrong offset!");

// Function Being.BeingState.GetRuntimeInfoScript
// 0x0010 (0x0010 - 0x0000)
struct BeingState_GetRuntimeInfoScript final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingState_GetRuntimeInfoScript) == 0x000008, "Wrong alignment on BeingState_GetRuntimeInfoScript");
static_assert(sizeof(BeingState_GetRuntimeInfoScript) == 0x000010, "Wrong size on BeingState_GetRuntimeInfoScript");
static_assert(offsetof(BeingState_GetRuntimeInfoScript, ReturnValue) == 0x000000, "Member 'BeingState_GetRuntimeInfoScript::ReturnValue' has a wrong offset!");

// Function Being.BeingState.GetStatesComponent
// 0x0008 (0x0008 - 0x0000)
struct BeingState_GetStatesComponent final
{
public:
	class UBeingStatesComponent*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingState_GetStatesComponent) == 0x000008, "Wrong alignment on BeingState_GetStatesComponent");
static_assert(sizeof(BeingState_GetStatesComponent) == 0x000008, "Wrong size on BeingState_GetStatesComponent");
static_assert(offsetof(BeingState_GetStatesComponent, ReturnValue) == 0x000000, "Member 'BeingState_GetStatesComponent::ReturnValue' has a wrong offset!");

// Function Being.BeingState.GetStatus
// 0x0001 (0x0001 - 0x0000)
struct BeingState_GetStatus final
{
public:
	EStateStatus                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingState_GetStatus) == 0x000001, "Wrong alignment on BeingState_GetStatus");
static_assert(sizeof(BeingState_GetStatus) == 0x000001, "Wrong size on BeingState_GetStatus");
static_assert(offsetof(BeingState_GetStatus, ReturnValue) == 0x000000, "Member 'BeingState_GetStatus::ReturnValue' has a wrong offset!");

// Function Being.BeingState.GetSubState
// 0x0010 (0x0010 - 0x0000)
struct BeingState_GetSubState final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBeingState*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingState_GetSubState) == 0x000008, "Wrong alignment on BeingState_GetSubState");
static_assert(sizeof(BeingState_GetSubState) == 0x000010, "Wrong size on BeingState_GetSubState");
static_assert(offsetof(BeingState_GetSubState, Index_0) == 0x000000, "Member 'BeingState_GetSubState::Index_0' has a wrong offset!");
static_assert(offsetof(BeingState_GetSubState, ReturnValue) == 0x000008, "Member 'BeingState_GetSubState::ReturnValue' has a wrong offset!");

// Function Being.BeingState.GetSubStateNum
// 0x0004 (0x0004 - 0x0000)
struct BeingState_GetSubStateNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingState_GetSubStateNum) == 0x000004, "Wrong alignment on BeingState_GetSubStateNum");
static_assert(sizeof(BeingState_GetSubStateNum) == 0x000004, "Wrong size on BeingState_GetSubStateNum");
static_assert(offsetof(BeingState_GetSubStateNum, ReturnValue) == 0x000000, "Member 'BeingState_GetSubStateNum::ReturnValue' has a wrong offset!");

// Function Being.BeingState.IsFinished
// 0x0001 (0x0001 - 0x0000)
struct BeingState_IsFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingState_IsFinished) == 0x000001, "Wrong alignment on BeingState_IsFinished");
static_assert(sizeof(BeingState_IsFinished) == 0x000001, "Wrong size on BeingState_IsFinished");
static_assert(offsetof(BeingState_IsFinished, ReturnValue) == 0x000000, "Member 'BeingState_IsFinished::ReturnValue' has a wrong offset!");

// Function Being.BeingState.IsMeetConditionsScript
// 0x0001 (0x0001 - 0x0000)
struct BeingState_IsMeetConditionsScript final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingState_IsMeetConditionsScript) == 0x000001, "Wrong alignment on BeingState_IsMeetConditionsScript");
static_assert(sizeof(BeingState_IsMeetConditionsScript) == 0x000001, "Wrong size on BeingState_IsMeetConditionsScript");
static_assert(offsetof(BeingState_IsMeetConditionsScript, ReturnValue) == 0x000000, "Member 'BeingState_IsMeetConditionsScript::ReturnValue' has a wrong offset!");

// Function Being.BeingState.IsRunning
// 0x0001 (0x0001 - 0x0000)
struct BeingState_IsRunning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingState_IsRunning) == 0x000001, "Wrong alignment on BeingState_IsRunning");
static_assert(sizeof(BeingState_IsRunning) == 0x000001, "Wrong size on BeingState_IsRunning");
static_assert(offsetof(BeingState_IsRunning, ReturnValue) == 0x000000, "Member 'BeingState_IsRunning::ReturnValue' has a wrong offset!");

// Function Being.BeingStatesComponent.AbortStateByClass
// 0x0008 (0x0008 - 0x0000)
struct BeingStatesComponent_AbortStateByClass final
{
public:
	TSubclassOf<class UBeingState>                StateClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingStatesComponent_AbortStateByClass) == 0x000008, "Wrong alignment on BeingStatesComponent_AbortStateByClass");
static_assert(sizeof(BeingStatesComponent_AbortStateByClass) == 0x000008, "Wrong size on BeingStatesComponent_AbortStateByClass");
static_assert(offsetof(BeingStatesComponent_AbortStateByClass, StateClass) == 0x000000, "Member 'BeingStatesComponent_AbortStateByClass::StateClass' has a wrong offset!");

// Function Being.BeingStatesComponent.ActivateStateByClass
// 0x0008 (0x0008 - 0x0000)
struct BeingStatesComponent_ActivateStateByClass final
{
public:
	TSubclassOf<class UBeingState>                StateClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingStatesComponent_ActivateStateByClass) == 0x000008, "Wrong alignment on BeingStatesComponent_ActivateStateByClass");
static_assert(sizeof(BeingStatesComponent_ActivateStateByClass) == 0x000008, "Wrong size on BeingStatesComponent_ActivateStateByClass");
static_assert(offsetof(BeingStatesComponent_ActivateStateByClass, StateClass) == 0x000000, "Member 'BeingStatesComponent_ActivateStateByClass::StateClass' has a wrong offset!");

// Function Being.BeingStatesComponent.AddState
// 0x0010 (0x0010 - 0x0000)
struct BeingStatesComponent_AddState final
{
public:
	class UBeingState*                            State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Activate_0;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingStatesComponent_AddState) == 0x000008, "Wrong alignment on BeingStatesComponent_AddState");
static_assert(sizeof(BeingStatesComponent_AddState) == 0x000010, "Wrong size on BeingStatesComponent_AddState");
static_assert(offsetof(BeingStatesComponent_AddState, State) == 0x000000, "Member 'BeingStatesComponent_AddState::State' has a wrong offset!");
static_assert(offsetof(BeingStatesComponent_AddState, Activate_0) == 0x000008, "Member 'BeingStatesComponent_AddState::Activate_0' has a wrong offset!");

// Function Being.BeingStatesComponent.AddStateByClass
// 0x0010 (0x0010 - 0x0000)
struct BeingStatesComponent_AddStateByClass final
{
public:
	TSubclassOf<class UBeingState>                StateClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBeingState*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingStatesComponent_AddStateByClass) == 0x000008, "Wrong alignment on BeingStatesComponent_AddStateByClass");
static_assert(sizeof(BeingStatesComponent_AddStateByClass) == 0x000010, "Wrong size on BeingStatesComponent_AddStateByClass");
static_assert(offsetof(BeingStatesComponent_AddStateByClass, StateClass) == 0x000000, "Member 'BeingStatesComponent_AddStateByClass::StateClass' has a wrong offset!");
static_assert(offsetof(BeingStatesComponent_AddStateByClass, ReturnValue) == 0x000008, "Member 'BeingStatesComponent_AddStateByClass::ReturnValue' has a wrong offset!");

// Function Being.BeingStatesComponent.GetStateByClass
// 0x0010 (0x0010 - 0x0000)
struct BeingStatesComponent_GetStateByClass final
{
public:
	TSubclassOf<class UBeingState>                StateClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBeingState*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingStatesComponent_GetStateByClass) == 0x000008, "Wrong alignment on BeingStatesComponent_GetStateByClass");
static_assert(sizeof(BeingStatesComponent_GetStateByClass) == 0x000010, "Wrong size on BeingStatesComponent_GetStateByClass");
static_assert(offsetof(BeingStatesComponent_GetStateByClass, StateClass) == 0x000000, "Member 'BeingStatesComponent_GetStateByClass::StateClass' has a wrong offset!");
static_assert(offsetof(BeingStatesComponent_GetStateByClass, ReturnValue) == 0x000008, "Member 'BeingStatesComponent_GetStateByClass::ReturnValue' has a wrong offset!");

// Function Being.BeingStatesComponent.RemoveState
// 0x0008 (0x0008 - 0x0000)
struct BeingStatesComponent_RemoveState final
{
public:
	class UBeingState*                            State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingStatesComponent_RemoveState) == 0x000008, "Wrong alignment on BeingStatesComponent_RemoveState");
static_assert(sizeof(BeingStatesComponent_RemoveState) == 0x000008, "Wrong size on BeingStatesComponent_RemoveState");
static_assert(offsetof(BeingStatesComponent_RemoveState, State) == 0x000000, "Member 'BeingStatesComponent_RemoveState::State' has a wrong offset!");

// Function Being.BeingStatesComponent.RemoveStatesByClass
// 0x0008 (0x0008 - 0x0000)
struct BeingStatesComponent_RemoveStatesByClass final
{
public:
	TSubclassOf<class UBeingState>                StateClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingStatesComponent_RemoveStatesByClass) == 0x000008, "Wrong alignment on BeingStatesComponent_RemoveStatesByClass");
static_assert(sizeof(BeingStatesComponent_RemoveStatesByClass) == 0x000008, "Wrong size on BeingStatesComponent_RemoveStatesByClass");
static_assert(offsetof(BeingStatesComponent_RemoveStatesByClass, StateClass) == 0x000000, "Member 'BeingStatesComponent_RemoveStatesByClass::StateClass' has a wrong offset!");

// Function Being.BeingStatesComponent.FindStateByClass
// 0x0010 (0x0010 - 0x0000)
struct BeingStatesComponent_FindStateByClass final
{
public:
	TSubclassOf<class UBeingState>                StateClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBeingState*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingStatesComponent_FindStateByClass) == 0x000008, "Wrong alignment on BeingStatesComponent_FindStateByClass");
static_assert(sizeof(BeingStatesComponent_FindStateByClass) == 0x000010, "Wrong size on BeingStatesComponent_FindStateByClass");
static_assert(offsetof(BeingStatesComponent_FindStateByClass, StateClass) == 0x000000, "Member 'BeingStatesComponent_FindStateByClass::StateClass' has a wrong offset!");
static_assert(offsetof(BeingStatesComponent_FindStateByClass, ReturnValue) == 0x000008, "Member 'BeingStatesComponent_FindStateByClass::ReturnValue' has a wrong offset!");

// Function Being.BeingStatesComponent.FindStateByName
// 0x0010 (0x0010 - 0x0000)
struct BeingStatesComponent_FindStateByName final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBeingState*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingStatesComponent_FindStateByName) == 0x000008, "Wrong alignment on BeingStatesComponent_FindStateByName");
static_assert(sizeof(BeingStatesComponent_FindStateByName) == 0x000010, "Wrong size on BeingStatesComponent_FindStateByName");
static_assert(offsetof(BeingStatesComponent_FindStateByName, Name_0) == 0x000000, "Member 'BeingStatesComponent_FindStateByName::Name_0' has a wrong offset!");
static_assert(offsetof(BeingStatesComponent_FindStateByName, ReturnValue) == 0x000008, "Member 'BeingStatesComponent_FindStateByName::ReturnValue' has a wrong offset!");

// Function Being.BeingStatesComponent.FindStatesByClass
// 0x0018 (0x0018 - 0x0000)
struct BeingStatesComponent_FindStatesByClass final
{
public:
	TSubclassOf<class UBeingState>                StateClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UBeingState*>                    ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeingStatesComponent_FindStatesByClass) == 0x000008, "Wrong alignment on BeingStatesComponent_FindStatesByClass");
static_assert(sizeof(BeingStatesComponent_FindStatesByClass) == 0x000018, "Wrong size on BeingStatesComponent_FindStatesByClass");
static_assert(offsetof(BeingStatesComponent_FindStatesByClass, StateClass) == 0x000000, "Member 'BeingStatesComponent_FindStatesByClass::StateClass' has a wrong offset!");
static_assert(offsetof(BeingStatesComponent_FindStatesByClass, ReturnValue) == 0x000008, "Member 'BeingStatesComponent_FindStatesByClass::ReturnValue' has a wrong offset!");

// Function Being.BeingStatesComponent.IsStateActive
// 0x0010 (0x0010 - 0x0000)
struct BeingStatesComponent_IsStateActive final
{
public:
	TSubclassOf<class UBeingState>                StateClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeingStatesComponent_IsStateActive) == 0x000008, "Wrong alignment on BeingStatesComponent_IsStateActive");
static_assert(sizeof(BeingStatesComponent_IsStateActive) == 0x000010, "Wrong size on BeingStatesComponent_IsStateActive");
static_assert(offsetof(BeingStatesComponent_IsStateActive, StateClass) == 0x000000, "Member 'BeingStatesComponent_IsStateActive::StateClass' has a wrong offset!");
static_assert(offsetof(BeingStatesComponent_IsStateActive, ReturnValue) == 0x000008, "Member 'BeingStatesComponent_IsStateActive::ReturnValue' has a wrong offset!");

}

