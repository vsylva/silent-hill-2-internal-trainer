#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FakeFogCard_01_A_BP

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass FakeFogCard_01_A_BP.FakeFogCard_01_A_BP_C
// 0x00E0 (0x0390 - 0x02B0)
class AFakeFogCard_01_A_BP_C final : public AActor
{
public:
	class UStaticMeshComponent*                   Plane;                                             // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          UseOverlayTexture;                                 // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               MultiplyTexture1;                                  // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               MultiplyTexture2;                                  // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Rotation;                                          // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TextureSpeed;                                      // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TextureContrast;                                   // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TextureScale;                                      // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DistortionPower;                                   // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DistortionSpeed;                                   // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DistortionScaleX;                                  // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DistortionScaleY;                                  // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseAlbedoTexture;                                  // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Emissive;                                          // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Tint;                                              // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Opacity;                                           // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        BlendingNearSurfaceDistance;                       // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        SoftEdges;                                         // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        FalloffExponent;                                   // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               FalloffTexture;                                    // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        FallofTextureOpasity;                              // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OneSide;                                           // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DepthBasedDensity;                                 // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        DepthBasedStartDistance;                           // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               FogMat;                                            // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        FakeBlur;                                          // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FakeFogCard_01_A_BP_C">();
	}
	static class AFakeFogCard_01_A_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFakeFogCard_01_A_BP_C>();
	}
};
static_assert(alignof(AFakeFogCard_01_A_BP_C) == 0x000008, "Wrong alignment on AFakeFogCard_01_A_BP_C");
static_assert(sizeof(AFakeFogCard_01_A_BP_C) == 0x000390, "Wrong size on AFakeFogCard_01_A_BP_C");
static_assert(offsetof(AFakeFogCard_01_A_BP_C, Plane) == 0x0002B0, "Member 'AFakeFogCard_01_A_BP_C::Plane' has a wrong offset!");
static_assert(offsetof(AFakeFogCard_01_A_BP_C, DefaultSceneRoot) == 0x0002B8, "Member 'AFakeFogCard_01_A_BP_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AFakeFogCard_01_A_BP_C, UseOverlayTexture) == 0x0002C0, "Member 'AFakeFogCard_01_A_BP_C::UseOverlayTexture' has a wrong offset!");
static_assert(offsetof(AFakeFogCard_01_A_BP_C, MultiplyTexture1) == 0x0002C8, "Member 'AFakeFogCard_01_A_BP_C::MultiplyTexture1' has a wrong offset!");
static_assert(offsetof(AFakeFogCard_01_A_BP_C, MultiplyTexture2) == 0x0002D0, "Member 'AFakeFogCard_01_A_BP_C::MultiplyTexture2' has a wrong offset!");
static_assert(offsetof(AFakeFogCard_01_A_BP_C, Rotation) == 0x0002D8, "Member 'AFakeFogCard_01_A_BP_C::Rotation' has a wrong offset!");
static_assert(offsetof(AFakeFogCard_01_A_BP_C, TextureSpeed) == 0x0002E0, "Member 'AFakeFogCard_01_A_BP_C::TextureSpeed' has a wrong offset!");
static_assert(offsetof(AFakeFogCard_01_A_BP_C, TextureContrast) == 0x0002E8, "Member 'AFakeFogCard_01_A_BP_C::TextureContrast' has a wrong offset!");
static_assert(offsetof(AFakeFogCard_01_A_BP_C, TextureScale) == 0x0002F0, "Member 'AFakeFogCard_01_A_BP_C::TextureScale' has a wrong offset!");
static_assert(offsetof(AFakeFogCard_01_A_BP_C, DistortionPower) == 0x0002F8, "Member 'AFakeFogCard_01_A_BP_C::DistortionPower' has a wrong offset!");
static_assert(offsetof(AFakeFogCard_01_A_BP_C, DistortionSpeed) == 0x000300, "Member 'AFakeFogCard_01_A_BP_C::DistortionSpeed' has a wrong offset!");
static_assert(offsetof(AFakeFogCard_01_A_BP_C, DistortionScaleX) == 0x000308, "Member 'AFakeFogCard_01_A_BP_C::DistortionScaleX' has a wrong offset!");
static_assert(offsetof(AFakeFogCard_01_A_BP_C, DistortionScaleY) == 0x000310, "Member 'AFakeFogCard_01_A_BP_C::DistortionScaleY' has a wrong offset!");
static_assert(offsetof(AFakeFogCard_01_A_BP_C, UseAlbedoTexture) == 0x000318, "Member 'AFakeFogCard_01_A_BP_C::UseAlbedoTexture' has a wrong offset!");
static_assert(offsetof(AFakeFogCard_01_A_BP_C, Emissive) == 0x000320, "Member 'AFakeFogCard_01_A_BP_C::Emissive' has a wrong offset!");
static_assert(offsetof(AFakeFogCard_01_A_BP_C, Tint) == 0x000328, "Member 'AFakeFogCard_01_A_BP_C::Tint' has a wrong offset!");
static_assert(offsetof(AFakeFogCard_01_A_BP_C, Opacity) == 0x000338, "Member 'AFakeFogCard_01_A_BP_C::Opacity' has a wrong offset!");
static_assert(offsetof(AFakeFogCard_01_A_BP_C, BlendingNearSurfaceDistance) == 0x000340, "Member 'AFakeFogCard_01_A_BP_C::BlendingNearSurfaceDistance' has a wrong offset!");
static_assert(offsetof(AFakeFogCard_01_A_BP_C, SoftEdges) == 0x000348, "Member 'AFakeFogCard_01_A_BP_C::SoftEdges' has a wrong offset!");
static_assert(offsetof(AFakeFogCard_01_A_BP_C, FalloffExponent) == 0x000350, "Member 'AFakeFogCard_01_A_BP_C::FalloffExponent' has a wrong offset!");
static_assert(offsetof(AFakeFogCard_01_A_BP_C, FalloffTexture) == 0x000358, "Member 'AFakeFogCard_01_A_BP_C::FalloffTexture' has a wrong offset!");
static_assert(offsetof(AFakeFogCard_01_A_BP_C, FallofTextureOpasity) == 0x000360, "Member 'AFakeFogCard_01_A_BP_C::FallofTextureOpasity' has a wrong offset!");
static_assert(offsetof(AFakeFogCard_01_A_BP_C, OneSide) == 0x000368, "Member 'AFakeFogCard_01_A_BP_C::OneSide' has a wrong offset!");
static_assert(offsetof(AFakeFogCard_01_A_BP_C, DepthBasedDensity) == 0x000370, "Member 'AFakeFogCard_01_A_BP_C::DepthBasedDensity' has a wrong offset!");
static_assert(offsetof(AFakeFogCard_01_A_BP_C, DepthBasedStartDistance) == 0x000378, "Member 'AFakeFogCard_01_A_BP_C::DepthBasedStartDistance' has a wrong offset!");
static_assert(offsetof(AFakeFogCard_01_A_BP_C, FogMat) == 0x000380, "Member 'AFakeFogCard_01_A_BP_C::FogMat' has a wrong offset!");
static_assert(offsetof(AFakeFogCard_01_A_BP_C, FakeBlur) == 0x000388, "Member 'AFakeFogCard_01_A_BP_C::FakeBlur' has a wrong offset!");

}

