#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Dai

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Dai_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function Dai.GraphObject.SetRuntimeInfo
// 0x0010 (0x0010 - 0x0000)
struct GraphObject_SetRuntimeInfo final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GraphObject_SetRuntimeInfo) == 0x000008, "Wrong alignment on GraphObject_SetRuntimeInfo");
static_assert(sizeof(GraphObject_SetRuntimeInfo) == 0x000010, "Wrong size on GraphObject_SetRuntimeInfo");
static_assert(offsetof(GraphObject_SetRuntimeInfo, Text) == 0x000000, "Member 'GraphObject_SetRuntimeInfo::Text' has a wrong offset!");

// Function Dai.GraphObject.getDisplayName
// 0x0010 (0x0010 - 0x0000)
struct GraphObject_GetDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GraphObject_GetDisplayName) == 0x000008, "Wrong alignment on GraphObject_GetDisplayName");
static_assert(sizeof(GraphObject_GetDisplayName) == 0x000010, "Wrong size on GraphObject_GetDisplayName");
static_assert(offsetof(GraphObject_GetDisplayName, ReturnValue) == 0x000000, "Member 'GraphObject_GetDisplayName::ReturnValue' has a wrong offset!");

// Function Dai.GraphObject.GetPropertiesDescription
// 0x0010 (0x0010 - 0x0000)
struct GraphObject_GetPropertiesDescription final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GraphObject_GetPropertiesDescription) == 0x000008, "Wrong alignment on GraphObject_GetPropertiesDescription");
static_assert(sizeof(GraphObject_GetPropertiesDescription) == 0x000010, "Wrong size on GraphObject_GetPropertiesDescription");
static_assert(offsetof(GraphObject_GetPropertiesDescription, ReturnValue) == 0x000000, "Member 'GraphObject_GetPropertiesDescription::ReturnValue' has a wrong offset!");

// Function Dai.GraphObject.GetRuntimeInfo
// 0x0010 (0x0010 - 0x0000)
struct GraphObject_GetRuntimeInfo final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GraphObject_GetRuntimeInfo) == 0x000008, "Wrong alignment on GraphObject_GetRuntimeInfo");
static_assert(sizeof(GraphObject_GetRuntimeInfo) == 0x000010, "Wrong size on GraphObject_GetRuntimeInfo");
static_assert(offsetof(GraphObject_GetRuntimeInfo, ReturnValue) == 0x000000, "Member 'GraphObject_GetRuntimeInfo::ReturnValue' has a wrong offset!");

// Function Dai.DaiCondition.AddConditionsListener
// 0x0040 (0x0040 - 0x0000)
struct DaiCondition_AddConditionsListener final
{
public:
	struct FDaiConditions                         Conditions;                                        // 0x0000(0x0030)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TScriptInterface<class IDaiConditionsListenerInterface> Listener;                                          // 0x0030(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiCondition_AddConditionsListener) == 0x000008, "Wrong alignment on DaiCondition_AddConditionsListener");
static_assert(sizeof(DaiCondition_AddConditionsListener) == 0x000040, "Wrong size on DaiCondition_AddConditionsListener");
static_assert(offsetof(DaiCondition_AddConditionsListener, Conditions) == 0x000000, "Member 'DaiCondition_AddConditionsListener::Conditions' has a wrong offset!");
static_assert(offsetof(DaiCondition_AddConditionsListener, Listener) == 0x000030, "Member 'DaiCondition_AddConditionsListener::Listener' has a wrong offset!");

// Function Dai.DaiCondition.compareFloat
// 0x0010 (0x0010 - 0x0000)
struct DaiCondition_CompareFloat final
{
public:
	ENumberCompareOperation                       Operation;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         A;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaiCondition_CompareFloat) == 0x000004, "Wrong alignment on DaiCondition_CompareFloat");
static_assert(sizeof(DaiCondition_CompareFloat) == 0x000010, "Wrong size on DaiCondition_CompareFloat");
static_assert(offsetof(DaiCondition_CompareFloat, Operation) == 0x000000, "Member 'DaiCondition_CompareFloat::Operation' has a wrong offset!");
static_assert(offsetof(DaiCondition_CompareFloat, A) == 0x000004, "Member 'DaiCondition_CompareFloat::A' has a wrong offset!");
static_assert(offsetof(DaiCondition_CompareFloat, B) == 0x000008, "Member 'DaiCondition_CompareFloat::B' has a wrong offset!");
static_assert(offsetof(DaiCondition_CompareFloat, ReturnValue) == 0x00000C, "Member 'DaiCondition_CompareFloat::ReturnValue' has a wrong offset!");

// Function Dai.DaiCondition.compareInt
// 0x0010 (0x0010 - 0x0000)
struct DaiCondition_CompareInt final
{
public:
	ENumberCompareOperation                       Operation;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         A;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         B;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaiCondition_CompareInt) == 0x000004, "Wrong alignment on DaiCondition_CompareInt");
static_assert(sizeof(DaiCondition_CompareInt) == 0x000010, "Wrong size on DaiCondition_CompareInt");
static_assert(offsetof(DaiCondition_CompareInt, Operation) == 0x000000, "Member 'DaiCondition_CompareInt::Operation' has a wrong offset!");
static_assert(offsetof(DaiCondition_CompareInt, A) == 0x000004, "Member 'DaiCondition_CompareInt::A' has a wrong offset!");
static_assert(offsetof(DaiCondition_CompareInt, B) == 0x000008, "Member 'DaiCondition_CompareInt::B' has a wrong offset!");
static_assert(offsetof(DaiCondition_CompareInt, ReturnValue) == 0x00000C, "Member 'DaiCondition_CompareInt::ReturnValue' has a wrong offset!");

// Function Dai.DaiCondition.getOperationSymbol
// 0x0018 (0x0018 - 0x0000)
struct DaiCondition_GetOperationSymbol final
{
public:
	ENumberCompareOperation                       Operation;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiCondition_GetOperationSymbol) == 0x000008, "Wrong alignment on DaiCondition_GetOperationSymbol");
static_assert(sizeof(DaiCondition_GetOperationSymbol) == 0x000018, "Wrong size on DaiCondition_GetOperationSymbol");
static_assert(offsetof(DaiCondition_GetOperationSymbol, Operation) == 0x000000, "Member 'DaiCondition_GetOperationSymbol::Operation' has a wrong offset!");
static_assert(offsetof(DaiCondition_GetOperationSymbol, ReturnValue) == 0x000008, "Member 'DaiCondition_GetOperationSymbol::ReturnValue' has a wrong offset!");

// Function Dai.DaiCondition.performConditions
// 0x0048 (0x0048 - 0x0000)
struct DaiCondition_PerformConditions final
{
public:
	struct FDaiConditions                         Conditions;                                        // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Caller;                                            // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Debug;                                             // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0041(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaiCondition_PerformConditions) == 0x000008, "Wrong alignment on DaiCondition_PerformConditions");
static_assert(sizeof(DaiCondition_PerformConditions) == 0x000048, "Wrong size on DaiCondition_PerformConditions");
static_assert(offsetof(DaiCondition_PerformConditions, Conditions) == 0x000000, "Member 'DaiCondition_PerformConditions::Conditions' has a wrong offset!");
static_assert(offsetof(DaiCondition_PerformConditions, Context) == 0x000030, "Member 'DaiCondition_PerformConditions::Context' has a wrong offset!");
static_assert(offsetof(DaiCondition_PerformConditions, Caller) == 0x000038, "Member 'DaiCondition_PerformConditions::Caller' has a wrong offset!");
static_assert(offsetof(DaiCondition_PerformConditions, Debug) == 0x000040, "Member 'DaiCondition_PerformConditions::Debug' has a wrong offset!");
static_assert(offsetof(DaiCondition_PerformConditions, ReturnValue) == 0x000041, "Member 'DaiCondition_PerformConditions::ReturnValue' has a wrong offset!");

// Function Dai.DaiCondition.RemoveConditionsListener
// 0x0040 (0x0040 - 0x0000)
struct DaiCondition_RemoveConditionsListener final
{
public:
	struct FDaiConditions                         Conditions;                                        // 0x0000(0x0030)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TScriptInterface<class IDaiConditionsListenerInterface> Listener;                                          // 0x0030(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiCondition_RemoveConditionsListener) == 0x000008, "Wrong alignment on DaiCondition_RemoveConditionsListener");
static_assert(sizeof(DaiCondition_RemoveConditionsListener) == 0x000040, "Wrong size on DaiCondition_RemoveConditionsListener");
static_assert(offsetof(DaiCondition_RemoveConditionsListener, Conditions) == 0x000000, "Member 'DaiCondition_RemoveConditionsListener::Conditions' has a wrong offset!");
static_assert(offsetof(DaiCondition_RemoveConditionsListener, Listener) == 0x000030, "Member 'DaiCondition_RemoveConditionsListener::Listener' has a wrong offset!");

// Function Dai.ScriptDaiCondition.ScriptPerformCondition
// 0x0018 (0x0018 - 0x0000)
struct ScriptDaiCondition_ScriptPerformCondition final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Caller;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScriptDaiCondition_ScriptPerformCondition) == 0x000008, "Wrong alignment on ScriptDaiCondition_ScriptPerformCondition");
static_assert(sizeof(ScriptDaiCondition_ScriptPerformCondition) == 0x000018, "Wrong size on ScriptDaiCondition_ScriptPerformCondition");
static_assert(offsetof(ScriptDaiCondition_ScriptPerformCondition, Context) == 0x000000, "Member 'ScriptDaiCondition_ScriptPerformCondition::Context' has a wrong offset!");
static_assert(offsetof(ScriptDaiCondition_ScriptPerformCondition, Caller) == 0x000008, "Member 'ScriptDaiCondition_ScriptPerformCondition::Caller' has a wrong offset!");
static_assert(offsetof(ScriptDaiCondition_ScriptPerformCondition, ReturnValue) == 0x000010, "Member 'ScriptDaiCondition_ScriptPerformCondition::ReturnValue' has a wrong offset!");

// Function Dai.ScriptDaiCondition.ScriptToString
// 0x0010 (0x0010 - 0x0000)
struct ScriptDaiCondition_ScriptToString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptDaiCondition_ScriptToString) == 0x000008, "Wrong alignment on ScriptDaiCondition_ScriptToString");
static_assert(sizeof(ScriptDaiCondition_ScriptToString) == 0x000010, "Wrong size on ScriptDaiCondition_ScriptToString");
static_assert(offsetof(ScriptDaiCondition_ScriptToString, ReturnValue) == 0x000000, "Member 'ScriptDaiCondition_ScriptToString::ReturnValue' has a wrong offset!");

// Function Dai.DaiAnimSet.getBestAngleAnimParams
// 0x0090 (0x0090 - 0x0000)
struct DaiAnimSet_GetBestAngleAnimParams final
{
public:
	TArray<struct FDaiAnimPlayParams>             PlayParams;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDaiAnimPlayParams                     ReturnValue;                                       // 0x0018(0x0078)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiAnimSet_GetBestAngleAnimParams) == 0x000008, "Wrong alignment on DaiAnimSet_GetBestAngleAnimParams");
static_assert(sizeof(DaiAnimSet_GetBestAngleAnimParams) == 0x000090, "Wrong size on DaiAnimSet_GetBestAngleAnimParams");
static_assert(offsetof(DaiAnimSet_GetBestAngleAnimParams, PlayParams) == 0x000000, "Member 'DaiAnimSet_GetBestAngleAnimParams::PlayParams' has a wrong offset!");
static_assert(offsetof(DaiAnimSet_GetBestAngleAnimParams, Angle) == 0x000010, "Member 'DaiAnimSet_GetBestAngleAnimParams::Angle' has a wrong offset!");
static_assert(offsetof(DaiAnimSet_GetBestAngleAnimParams, ReturnValue) == 0x000018, "Member 'DaiAnimSet_GetBestAngleAnimParams::ReturnValue' has a wrong offset!");

// Function Dai.DaiAnimSet.getRandomAnimParams
// 0x0088 (0x0088 - 0x0000)
struct DaiAnimSet_GetRandomAnimParams final
{
public:
	TArray<struct FDaiAnimPlayParams>             PlayParams;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FDaiAnimPlayParams                     ReturnValue;                                       // 0x0010(0x0078)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiAnimSet_GetRandomAnimParams) == 0x000008, "Wrong alignment on DaiAnimSet_GetRandomAnimParams");
static_assert(sizeof(DaiAnimSet_GetRandomAnimParams) == 0x000088, "Wrong size on DaiAnimSet_GetRandomAnimParams");
static_assert(offsetof(DaiAnimSet_GetRandomAnimParams, PlayParams) == 0x000000, "Member 'DaiAnimSet_GetRandomAnimParams::PlayParams' has a wrong offset!");
static_assert(offsetof(DaiAnimSet_GetRandomAnimParams, ReturnValue) == 0x000010, "Member 'DaiAnimSet_GetRandomAnimParams::ReturnValue' has a wrong offset!");

// Function Dai.DaiAnimSet.ClearInjection
// 0x0008 (0x0008 - 0x0000)
struct DaiAnimSet_ClearInjection final
{
public:
	struct FGameplayTag                           AnimSet;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiAnimSet_ClearInjection) == 0x000004, "Wrong alignment on DaiAnimSet_ClearInjection");
static_assert(sizeof(DaiAnimSet_ClearInjection) == 0x000008, "Wrong size on DaiAnimSet_ClearInjection");
static_assert(offsetof(DaiAnimSet_ClearInjection, AnimSet) == 0x000000, "Member 'DaiAnimSet_ClearInjection::AnimSet' has a wrong offset!");

// Function Dai.DaiAnimSet.InjectAnim
// 0x0080 (0x0080 - 0x0000)
struct DaiAnimSet_InjectAnim final
{
public:
	struct FGameplayTag                           AnimSet;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDaiAnimPlayParams                     Injection;                                         // 0x0008(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiAnimSet_InjectAnim) == 0x000008, "Wrong alignment on DaiAnimSet_InjectAnim");
static_assert(sizeof(DaiAnimSet_InjectAnim) == 0x000080, "Wrong size on DaiAnimSet_InjectAnim");
static_assert(offsetof(DaiAnimSet_InjectAnim, AnimSet) == 0x000000, "Member 'DaiAnimSet_InjectAnim::AnimSet' has a wrong offset!");
static_assert(offsetof(DaiAnimSet_InjectAnim, Injection) == 0x000008, "Member 'DaiAnimSet_InjectAnim::Injection' has a wrong offset!");

// Function Dai.DaiAnimSet.InjectAnimsList
// 0x0018 (0x0018 - 0x0000)
struct DaiAnimSet_InjectAnimsList final
{
public:
	struct FGameplayTag                           AnimSet;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDaiAnimPlayParams>             Injection;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiAnimSet_InjectAnimsList) == 0x000008, "Wrong alignment on DaiAnimSet_InjectAnimsList");
static_assert(sizeof(DaiAnimSet_InjectAnimsList) == 0x000018, "Wrong size on DaiAnimSet_InjectAnimsList");
static_assert(offsetof(DaiAnimSet_InjectAnimsList, AnimSet) == 0x000000, "Member 'DaiAnimSet_InjectAnimsList::AnimSet' has a wrong offset!");
static_assert(offsetof(DaiAnimSet_InjectAnimsList, Injection) == 0x000008, "Member 'DaiAnimSet_InjectAnimsList::Injection' has a wrong offset!");

// Function Dai.DaiAnimSet.InjectAnimsTag
// 0x0028 (0x0028 - 0x0000)
struct DaiAnimSet_InjectAnimsTag final
{
public:
	struct FGameplayTag                           AnimSet;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Injection;                                         // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiAnimSet_InjectAnimsTag) == 0x000008, "Wrong alignment on DaiAnimSet_InjectAnimsTag");
static_assert(sizeof(DaiAnimSet_InjectAnimsTag) == 0x000028, "Wrong size on DaiAnimSet_InjectAnimsTag");
static_assert(offsetof(DaiAnimSet_InjectAnimsTag, AnimSet) == 0x000000, "Member 'DaiAnimSet_InjectAnimsTag::AnimSet' has a wrong offset!");
static_assert(offsetof(DaiAnimSet_InjectAnimsTag, Injection) == 0x000008, "Member 'DaiAnimSet_InjectAnimsTag::Injection' has a wrong offset!");

// Function Dai.DaiAnimSet.GetAllAnimsByTag
// 0x0030 (0x0030 - 0x0000)
struct DaiAnimSet_GetAllAnimsByTag final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FDaiAnimPlayParams>             ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiAnimSet_GetAllAnimsByTag) == 0x000008, "Wrong alignment on DaiAnimSet_GetAllAnimsByTag");
static_assert(sizeof(DaiAnimSet_GetAllAnimsByTag) == 0x000030, "Wrong size on DaiAnimSet_GetAllAnimsByTag");
static_assert(offsetof(DaiAnimSet_GetAllAnimsByTag, Tags) == 0x000000, "Member 'DaiAnimSet_GetAllAnimsByTag::Tags' has a wrong offset!");
static_assert(offsetof(DaiAnimSet_GetAllAnimsByTag, ReturnValue) == 0x000020, "Member 'DaiAnimSet_GetAllAnimsByTag::ReturnValue' has a wrong offset!");

// Function Dai.DaiAnimSet.GetAnimByTag
// 0x00A0 (0x00A0 - 0x0000)
struct DaiAnimSet_GetAnimByTag final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FDaiAnimPlayParams                     PlayParams;                                        // 0x0020(0x0078)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        ReturnValue;                                       // 0x0098(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiAnimSet_GetAnimByTag) == 0x000008, "Wrong alignment on DaiAnimSet_GetAnimByTag");
static_assert(sizeof(DaiAnimSet_GetAnimByTag) == 0x0000A0, "Wrong size on DaiAnimSet_GetAnimByTag");
static_assert(offsetof(DaiAnimSet_GetAnimByTag, Tags) == 0x000000, "Member 'DaiAnimSet_GetAnimByTag::Tags' has a wrong offset!");
static_assert(offsetof(DaiAnimSet_GetAnimByTag, PlayParams) == 0x000020, "Member 'DaiAnimSet_GetAnimByTag::PlayParams' has a wrong offset!");
static_assert(offsetof(DaiAnimSet_GetAnimByTag, ReturnValue) == 0x000098, "Member 'DaiAnimSet_GetAnimByTag::ReturnValue' has a wrong offset!");

// Function Dai.DaiAnimSetInterface.GetAllAnimsByTag
// 0x0030 (0x0030 - 0x0000)
struct DaiAnimSetInterface_GetAllAnimsByTag final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FDaiAnimPlayParams>             ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiAnimSetInterface_GetAllAnimsByTag) == 0x000008, "Wrong alignment on DaiAnimSetInterface_GetAllAnimsByTag");
static_assert(sizeof(DaiAnimSetInterface_GetAllAnimsByTag) == 0x000030, "Wrong size on DaiAnimSetInterface_GetAllAnimsByTag");
static_assert(offsetof(DaiAnimSetInterface_GetAllAnimsByTag, Tags) == 0x000000, "Member 'DaiAnimSetInterface_GetAllAnimsByTag::Tags' has a wrong offset!");
static_assert(offsetof(DaiAnimSetInterface_GetAllAnimsByTag, ReturnValue) == 0x000020, "Member 'DaiAnimSetInterface_GetAllAnimsByTag::ReturnValue' has a wrong offset!");

// Function Dai.DaiAnimSetInterface.GetAnimByTag
// 0x0088 (0x0088 - 0x0000)
struct DaiAnimSetInterface_GetAnimByTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDaiAnimPlayParams                     PlayParams;                                        // 0x0008(0x0078)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        ReturnValue;                                       // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiAnimSetInterface_GetAnimByTag) == 0x000008, "Wrong alignment on DaiAnimSetInterface_GetAnimByTag");
static_assert(sizeof(DaiAnimSetInterface_GetAnimByTag) == 0x000088, "Wrong size on DaiAnimSetInterface_GetAnimByTag");
static_assert(offsetof(DaiAnimSetInterface_GetAnimByTag, Tag) == 0x000000, "Member 'DaiAnimSetInterface_GetAnimByTag::Tag' has a wrong offset!");
static_assert(offsetof(DaiAnimSetInterface_GetAnimByTag, PlayParams) == 0x000008, "Member 'DaiAnimSetInterface_GetAnimByTag::PlayParams' has a wrong offset!");
static_assert(offsetof(DaiAnimSetInterface_GetAnimByTag, ReturnValue) == 0x000080, "Member 'DaiAnimSetInterface_GetAnimByTag::ReturnValue' has a wrong offset!");

// Function Dai.ScriptDaiContextGetter.ScriptGetDescription
// 0x0010 (0x0010 - 0x0000)
struct ScriptDaiContextGetter_ScriptGetDescription final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptDaiContextGetter_ScriptGetDescription) == 0x000008, "Wrong alignment on ScriptDaiContextGetter_ScriptGetDescription");
static_assert(sizeof(ScriptDaiContextGetter_ScriptGetDescription) == 0x000010, "Wrong size on ScriptDaiContextGetter_ScriptGetDescription");
static_assert(offsetof(ScriptDaiContextGetter_ScriptGetDescription, ReturnValue) == 0x000000, "Member 'ScriptDaiContextGetter_ScriptGetDescription::ReturnValue' has a wrong offset!");

// Function Dai.ScriptDaiContextGetter.ScriptProvideObjectSet
// 0x0020 (0x0020 - 0x0000)
struct ScriptDaiContextGetter_ScriptProvideObjectSet final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Caller;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptDaiContextGetter_ScriptProvideObjectSet) == 0x000008, "Wrong alignment on ScriptDaiContextGetter_ScriptProvideObjectSet");
static_assert(sizeof(ScriptDaiContextGetter_ScriptProvideObjectSet) == 0x000020, "Wrong size on ScriptDaiContextGetter_ScriptProvideObjectSet");
static_assert(offsetof(ScriptDaiContextGetter_ScriptProvideObjectSet, Context) == 0x000000, "Member 'ScriptDaiContextGetter_ScriptProvideObjectSet::Context' has a wrong offset!");
static_assert(offsetof(ScriptDaiContextGetter_ScriptProvideObjectSet, Caller) == 0x000008, "Member 'ScriptDaiContextGetter_ScriptProvideObjectSet::Caller' has a wrong offset!");
static_assert(offsetof(ScriptDaiContextGetter_ScriptProvideObjectSet, ReturnValue) == 0x000010, "Member 'ScriptDaiContextGetter_ScriptProvideObjectSet::ReturnValue' has a wrong offset!");

// Function Dai.ScriptDaiContextGetter.ScriptProvideSingleObject
// 0x0018 (0x0018 - 0x0000)
struct ScriptDaiContextGetter_ScriptProvideSingleObject final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Caller;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptDaiContextGetter_ScriptProvideSingleObject) == 0x000008, "Wrong alignment on ScriptDaiContextGetter_ScriptProvideSingleObject");
static_assert(sizeof(ScriptDaiContextGetter_ScriptProvideSingleObject) == 0x000018, "Wrong size on ScriptDaiContextGetter_ScriptProvideSingleObject");
static_assert(offsetof(ScriptDaiContextGetter_ScriptProvideSingleObject, Context) == 0x000000, "Member 'ScriptDaiContextGetter_ScriptProvideSingleObject::Context' has a wrong offset!");
static_assert(offsetof(ScriptDaiContextGetter_ScriptProvideSingleObject, Caller) == 0x000008, "Member 'ScriptDaiContextGetter_ScriptProvideSingleObject::Caller' has a wrong offset!");
static_assert(offsetof(ScriptDaiContextGetter_ScriptProvideSingleObject, ReturnValue) == 0x000010, "Member 'ScriptDaiContextGetter_ScriptProvideSingleObject::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.blockadeIsBlocked
// 0x0020 (0x0020 - 0x0000)
struct DaiFunctions_blockadeIsBlocked final
{
public:
	struct FDaiBlockade                           blockade;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaiFunctions_blockadeIsBlocked) == 0x000008, "Wrong alignment on DaiFunctions_blockadeIsBlocked");
static_assert(sizeof(DaiFunctions_blockadeIsBlocked) == 0x000020, "Wrong size on DaiFunctions_blockadeIsBlocked");
static_assert(offsetof(DaiFunctions_blockadeIsBlocked, blockade) == 0x000000, "Member 'DaiFunctions_blockadeIsBlocked::blockade' has a wrong offset!");
static_assert(offsetof(DaiFunctions_blockadeIsBlocked, ReturnValue) == 0x000018, "Member 'DaiFunctions_blockadeIsBlocked::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.blockadeIsBlockedBy
// 0x0028 (0x0028 - 0x0000)
struct DaiFunctions_blockadeIsBlockedBy final
{
public:
	struct FDaiBlockade                           blockade;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaiFunctions_blockadeIsBlockedBy) == 0x000008, "Wrong alignment on DaiFunctions_blockadeIsBlockedBy");
static_assert(sizeof(DaiFunctions_blockadeIsBlockedBy) == 0x000028, "Wrong size on DaiFunctions_blockadeIsBlockedBy");
static_assert(offsetof(DaiFunctions_blockadeIsBlockedBy, blockade) == 0x000000, "Member 'DaiFunctions_blockadeIsBlockedBy::blockade' has a wrong offset!");
static_assert(offsetof(DaiFunctions_blockadeIsBlockedBy, Tag) == 0x000018, "Member 'DaiFunctions_blockadeIsBlockedBy::Tag' has a wrong offset!");
static_assert(offsetof(DaiFunctions_blockadeIsBlockedBy, ReturnValue) == 0x000020, "Member 'DaiFunctions_blockadeIsBlockedBy::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.blockadeSetBlocked
// 0x0028 (0x0028 - 0x0000)
struct DaiFunctions_blockadeSetBlocked final
{
public:
	struct FDaiBlockade                           blockade;                                          // 0x0000(0x0018)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Set;                                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Tag;                                               // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaiFunctions_blockadeSetBlocked) == 0x000008, "Wrong alignment on DaiFunctions_blockadeSetBlocked");
static_assert(sizeof(DaiFunctions_blockadeSetBlocked) == 0x000028, "Wrong size on DaiFunctions_blockadeSetBlocked");
static_assert(offsetof(DaiFunctions_blockadeSetBlocked, blockade) == 0x000000, "Member 'DaiFunctions_blockadeSetBlocked::blockade' has a wrong offset!");
static_assert(offsetof(DaiFunctions_blockadeSetBlocked, Set) == 0x000018, "Member 'DaiFunctions_blockadeSetBlocked::Set' has a wrong offset!");
static_assert(offsetof(DaiFunctions_blockadeSetBlocked, Tag) == 0x00001C, "Member 'DaiFunctions_blockadeSetBlocked::Tag' has a wrong offset!");

// Function Dai.DaiFunctions.blockadeToString
// 0x0028 (0x0028 - 0x0000)
struct DaiFunctions_blockadeToString final
{
public:
	struct FDaiBlockade                           blockade;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiFunctions_blockadeToString) == 0x000008, "Wrong alignment on DaiFunctions_blockadeToString");
static_assert(sizeof(DaiFunctions_blockadeToString) == 0x000028, "Wrong size on DaiFunctions_blockadeToString");
static_assert(offsetof(DaiFunctions_blockadeToString, blockade) == 0x000000, "Member 'DaiFunctions_blockadeToString::blockade' has a wrong offset!");
static_assert(offsetof(DaiFunctions_blockadeToString, ReturnValue) == 0x000018, "Member 'DaiFunctions_blockadeToString::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.CheckGameplayTags
// 0x0030 (0x0030 - 0x0000)
struct DaiFunctions_CheckGameplayTags final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	EGameplayContainerMatchType                   MatchType;                                         // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckComponents;                                   // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaiFunctions_CheckGameplayTags) == 0x000008, "Wrong alignment on DaiFunctions_CheckGameplayTags");
static_assert(sizeof(DaiFunctions_CheckGameplayTags) == 0x000030, "Wrong size on DaiFunctions_CheckGameplayTags");
static_assert(offsetof(DaiFunctions_CheckGameplayTags, Actor) == 0x000000, "Member 'DaiFunctions_CheckGameplayTags::Actor' has a wrong offset!");
static_assert(offsetof(DaiFunctions_CheckGameplayTags, Tags) == 0x000008, "Member 'DaiFunctions_CheckGameplayTags::Tags' has a wrong offset!");
static_assert(offsetof(DaiFunctions_CheckGameplayTags, MatchType) == 0x000028, "Member 'DaiFunctions_CheckGameplayTags::MatchType' has a wrong offset!");
static_assert(offsetof(DaiFunctions_CheckGameplayTags, CheckComponents) == 0x000029, "Member 'DaiFunctions_CheckGameplayTags::CheckComponents' has a wrong offset!");
static_assert(offsetof(DaiFunctions_CheckGameplayTags, ReturnValue) == 0x00002A, "Member 'DaiFunctions_CheckGameplayTags::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.clearBit
// 0x000C (0x000C - 0x0000)
struct DaiFunctions_ClearBit final
{
public:
	int32                                         bitmask;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiFunctions_ClearBit) == 0x000004, "Wrong alignment on DaiFunctions_ClearBit");
static_assert(sizeof(DaiFunctions_ClearBit) == 0x00000C, "Wrong size on DaiFunctions_ClearBit");
static_assert(offsetof(DaiFunctions_ClearBit, bitmask) == 0x000000, "Member 'DaiFunctions_ClearBit::bitmask' has a wrong offset!");
static_assert(offsetof(DaiFunctions_ClearBit, Index_0) == 0x000004, "Member 'DaiFunctions_ClearBit::Index_0' has a wrong offset!");
static_assert(offsetof(DaiFunctions_ClearBit, ReturnValue) == 0x000008, "Member 'DaiFunctions_ClearBit::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.containsAnimation
// 0x0018 (0x0018 - 0x0000)
struct DaiFunctions_ContainsAnimation final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Anim;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaiFunctions_ContainsAnimation) == 0x000008, "Wrong alignment on DaiFunctions_ContainsAnimation");
static_assert(sizeof(DaiFunctions_ContainsAnimation) == 0x000018, "Wrong size on DaiFunctions_ContainsAnimation");
static_assert(offsetof(DaiFunctions_ContainsAnimation, Montage) == 0x000000, "Member 'DaiFunctions_ContainsAnimation::Montage' has a wrong offset!");
static_assert(offsetof(DaiFunctions_ContainsAnimation, Anim) == 0x000008, "Member 'DaiFunctions_ContainsAnimation::Anim' has a wrong offset!");
static_assert(offsetof(DaiFunctions_ContainsAnimation, ReturnValue) == 0x000010, "Member 'DaiFunctions_ContainsAnimation::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.findActorByActorName
// 0x0028 (0x0028 - 0x0000)
struct DaiFunctions_FindActorByActorName final
{
public:
	const class UObject*                          Context;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDaiActorName                          Name_0;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiFunctions_FindActorByActorName) == 0x000008, "Wrong alignment on DaiFunctions_FindActorByActorName");
static_assert(sizeof(DaiFunctions_FindActorByActorName) == 0x000028, "Wrong size on DaiFunctions_FindActorByActorName");
static_assert(offsetof(DaiFunctions_FindActorByActorName, Context) == 0x000000, "Member 'DaiFunctions_FindActorByActorName::Context' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindActorByActorName, Name_0) == 0x000008, "Member 'DaiFunctions_FindActorByActorName::Name_0' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindActorByActorName, ActorClass) == 0x000018, "Member 'DaiFunctions_FindActorByActorName::ActorClass' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindActorByActorName, ReturnValue) == 0x000020, "Member 'DaiFunctions_FindActorByActorName::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.findActorByGameplayTag
// 0x0020 (0x0020 - 0x0000)
struct DaiFunctions_FindActorByGameplayTag final
{
public:
	const class UObject*                          Context;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiFunctions_FindActorByGameplayTag) == 0x000008, "Wrong alignment on DaiFunctions_FindActorByGameplayTag");
static_assert(sizeof(DaiFunctions_FindActorByGameplayTag) == 0x000020, "Wrong size on DaiFunctions_FindActorByGameplayTag");
static_assert(offsetof(DaiFunctions_FindActorByGameplayTag, Context) == 0x000000, "Member 'DaiFunctions_FindActorByGameplayTag::Context' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindActorByGameplayTag, Tag) == 0x000008, "Member 'DaiFunctions_FindActorByGameplayTag::Tag' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindActorByGameplayTag, ActorClass) == 0x000010, "Member 'DaiFunctions_FindActorByGameplayTag::ActorClass' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindActorByGameplayTag, ReturnValue) == 0x000018, "Member 'DaiFunctions_FindActorByGameplayTag::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.findActorByName
// 0x0028 (0x0028 - 0x0000)
struct DaiFunctions_FindActorByName final
{
public:
	const class UObject*                          Context;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Exact;                                             // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiFunctions_FindActorByName) == 0x000008, "Wrong alignment on DaiFunctions_FindActorByName");
static_assert(sizeof(DaiFunctions_FindActorByName) == 0x000028, "Wrong size on DaiFunctions_FindActorByName");
static_assert(offsetof(DaiFunctions_FindActorByName, Context) == 0x000000, "Member 'DaiFunctions_FindActorByName::Context' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindActorByName, Name_0) == 0x000008, "Member 'DaiFunctions_FindActorByName::Name_0' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindActorByName, ActorClass) == 0x000010, "Member 'DaiFunctions_FindActorByName::ActorClass' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindActorByName, Exact) == 0x000018, "Member 'DaiFunctions_FindActorByName::Exact' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindActorByName, ReturnValue) == 0x000020, "Member 'DaiFunctions_FindActorByName::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.findActorByTag
// 0x0020 (0x0020 - 0x0000)
struct DaiFunctions_FindActorByTag final
{
public:
	const class UObject*                          Context;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiFunctions_FindActorByTag) == 0x000008, "Wrong alignment on DaiFunctions_FindActorByTag");
static_assert(sizeof(DaiFunctions_FindActorByTag) == 0x000020, "Wrong size on DaiFunctions_FindActorByTag");
static_assert(offsetof(DaiFunctions_FindActorByTag, Context) == 0x000000, "Member 'DaiFunctions_FindActorByTag::Context' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindActorByTag, Tag) == 0x000008, "Member 'DaiFunctions_FindActorByTag::Tag' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindActorByTag, ActorClass) == 0x000010, "Member 'DaiFunctions_FindActorByTag::ActorClass' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindActorByTag, ReturnValue) == 0x000018, "Member 'DaiFunctions_FindActorByTag::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.findActorWithInterface
// 0x0020 (0x0020 - 0x0000)
struct DaiFunctions_FindActorWithInterface final
{
public:
	const class UObject*                          Context;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class IInterface>                 Ainterface;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiFunctions_FindActorWithInterface) == 0x000008, "Wrong alignment on DaiFunctions_FindActorWithInterface");
static_assert(sizeof(DaiFunctions_FindActorWithInterface) == 0x000020, "Wrong size on DaiFunctions_FindActorWithInterface");
static_assert(offsetof(DaiFunctions_FindActorWithInterface, Context) == 0x000000, "Member 'DaiFunctions_FindActorWithInterface::Context' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindActorWithInterface, Tag) == 0x000008, "Member 'DaiFunctions_FindActorWithInterface::Tag' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindActorWithInterface, Ainterface) == 0x000010, "Member 'DaiFunctions_FindActorWithInterface::Ainterface' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindActorWithInterface, ReturnValue) == 0x000018, "Member 'DaiFunctions_FindActorWithInterface::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.findAllActorsByGameplayTag
// 0x0028 (0x0028 - 0x0000)
struct DaiFunctions_FindAllActorsByGameplayTag final
{
public:
	const class UObject*                          Context;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         Actors;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiFunctions_FindAllActorsByGameplayTag) == 0x000008, "Wrong alignment on DaiFunctions_FindAllActorsByGameplayTag");
static_assert(sizeof(DaiFunctions_FindAllActorsByGameplayTag) == 0x000028, "Wrong size on DaiFunctions_FindAllActorsByGameplayTag");
static_assert(offsetof(DaiFunctions_FindAllActorsByGameplayTag, Context) == 0x000000, "Member 'DaiFunctions_FindAllActorsByGameplayTag::Context' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindAllActorsByGameplayTag, Tag) == 0x000008, "Member 'DaiFunctions_FindAllActorsByGameplayTag::Tag' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindAllActorsByGameplayTag, ActorClass) == 0x000010, "Member 'DaiFunctions_FindAllActorsByGameplayTag::ActorClass' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindAllActorsByGameplayTag, Actors) == 0x000018, "Member 'DaiFunctions_FindAllActorsByGameplayTag::Actors' has a wrong offset!");

// Function Dai.DaiFunctions.findAllActorsByTag
// 0x0028 (0x0028 - 0x0000)
struct DaiFunctions_FindAllActorsByTag final
{
public:
	const class UObject*                          Context;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         Actors;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiFunctions_FindAllActorsByTag) == 0x000008, "Wrong alignment on DaiFunctions_FindAllActorsByTag");
static_assert(sizeof(DaiFunctions_FindAllActorsByTag) == 0x000028, "Wrong size on DaiFunctions_FindAllActorsByTag");
static_assert(offsetof(DaiFunctions_FindAllActorsByTag, Context) == 0x000000, "Member 'DaiFunctions_FindAllActorsByTag::Context' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindAllActorsByTag, Tag) == 0x000008, "Member 'DaiFunctions_FindAllActorsByTag::Tag' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindAllActorsByTag, ActorClass) == 0x000010, "Member 'DaiFunctions_FindAllActorsByTag::ActorClass' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindAllActorsByTag, Actors) == 0x000018, "Member 'DaiFunctions_FindAllActorsByTag::Actors' has a wrong offset!");

// Function Dai.DaiFunctions.FindAllActorsWithComponent
// 0x0020 (0x0020 - 0x0000)
struct DaiFunctions_FindAllActorsWithComponent final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UActorComponent>            ActorComponent;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutActors;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiFunctions_FindAllActorsWithComponent) == 0x000008, "Wrong alignment on DaiFunctions_FindAllActorsWithComponent");
static_assert(sizeof(DaiFunctions_FindAllActorsWithComponent) == 0x000020, "Wrong size on DaiFunctions_FindAllActorsWithComponent");
static_assert(offsetof(DaiFunctions_FindAllActorsWithComponent, Context) == 0x000000, "Member 'DaiFunctions_FindAllActorsWithComponent::Context' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindAllActorsWithComponent, ActorComponent) == 0x000008, "Member 'DaiFunctions_FindAllActorsWithComponent::ActorComponent' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindAllActorsWithComponent, OutActors) == 0x000010, "Member 'DaiFunctions_FindAllActorsWithComponent::OutActors' has a wrong offset!");

// Function Dai.DaiFunctions.findAllActorsWithInterface
// 0x0028 (0x0028 - 0x0000)
struct DaiFunctions_FindAllActorsWithInterface final
{
public:
	const class UObject*                          Context;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class IInterface>                 Ainterface;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutActors;                                         // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiFunctions_FindAllActorsWithInterface) == 0x000008, "Wrong alignment on DaiFunctions_FindAllActorsWithInterface");
static_assert(sizeof(DaiFunctions_FindAllActorsWithInterface) == 0x000028, "Wrong size on DaiFunctions_FindAllActorsWithInterface");
static_assert(offsetof(DaiFunctions_FindAllActorsWithInterface, Context) == 0x000000, "Member 'DaiFunctions_FindAllActorsWithInterface::Context' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindAllActorsWithInterface, Tag) == 0x000008, "Member 'DaiFunctions_FindAllActorsWithInterface::Tag' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindAllActorsWithInterface, Ainterface) == 0x000010, "Member 'DaiFunctions_FindAllActorsWithInterface::Ainterface' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindAllActorsWithInterface, OutActors) == 0x000018, "Member 'DaiFunctions_FindAllActorsWithInterface::OutActors' has a wrong offset!");

// Function Dai.DaiFunctions.findNearestActorByGameplayTag
// 0x0038 (0x0038 - 0x0000)
struct DaiFunctions_FindNearestActorByGameplayTag final
{
public:
	const class UObject*                          Context;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0020(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiFunctions_FindNearestActorByGameplayTag) == 0x000008, "Wrong alignment on DaiFunctions_FindNearestActorByGameplayTag");
static_assert(sizeof(DaiFunctions_FindNearestActorByGameplayTag) == 0x000038, "Wrong size on DaiFunctions_FindNearestActorByGameplayTag");
static_assert(offsetof(DaiFunctions_FindNearestActorByGameplayTag, Context) == 0x000000, "Member 'DaiFunctions_FindNearestActorByGameplayTag::Context' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindNearestActorByGameplayTag, Origin) == 0x000008, "Member 'DaiFunctions_FindNearestActorByGameplayTag::Origin' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindNearestActorByGameplayTag, Tag) == 0x000020, "Member 'DaiFunctions_FindNearestActorByGameplayTag::Tag' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindNearestActorByGameplayTag, ActorClass) == 0x000028, "Member 'DaiFunctions_FindNearestActorByGameplayTag::ActorClass' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindNearestActorByGameplayTag, ReturnValue) == 0x000030, "Member 'DaiFunctions_FindNearestActorByGameplayTag::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.findNearestActorByTag
// 0x0038 (0x0038 - 0x0000)
struct DaiFunctions_FindNearestActorByTag final
{
public:
	const class UObject*                          Context;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiFunctions_FindNearestActorByTag) == 0x000008, "Wrong alignment on DaiFunctions_FindNearestActorByTag");
static_assert(sizeof(DaiFunctions_FindNearestActorByTag) == 0x000038, "Wrong size on DaiFunctions_FindNearestActorByTag");
static_assert(offsetof(DaiFunctions_FindNearestActorByTag, Context) == 0x000000, "Member 'DaiFunctions_FindNearestActorByTag::Context' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindNearestActorByTag, Origin) == 0x000008, "Member 'DaiFunctions_FindNearestActorByTag::Origin' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindNearestActorByTag, Tag) == 0x000020, "Member 'DaiFunctions_FindNearestActorByTag::Tag' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindNearestActorByTag, ActorClass) == 0x000028, "Member 'DaiFunctions_FindNearestActorByTag::ActorClass' has a wrong offset!");
static_assert(offsetof(DaiFunctions_FindNearestActorByTag, ReturnValue) == 0x000030, "Member 'DaiFunctions_FindNearestActorByTag::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.getAnimByAngle
// 0x00B8 (0x00B8 - 0x0000)
struct DaiFunctions_GetAnimByAngle final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         Hangle;                                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDaiAnimPlayParams                     PlayParams;                                        // 0x0030(0x0078)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          CheckComponents;                                   // 0x00A8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationAsset*                        ReturnValue;                                       // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiFunctions_GetAnimByAngle) == 0x000008, "Wrong alignment on DaiFunctions_GetAnimByAngle");
static_assert(sizeof(DaiFunctions_GetAnimByAngle) == 0x0000B8, "Wrong size on DaiFunctions_GetAnimByAngle");
static_assert(offsetof(DaiFunctions_GetAnimByAngle, Actor) == 0x000000, "Member 'DaiFunctions_GetAnimByAngle::Actor' has a wrong offset!");
static_assert(offsetof(DaiFunctions_GetAnimByAngle, Tags) == 0x000008, "Member 'DaiFunctions_GetAnimByAngle::Tags' has a wrong offset!");
static_assert(offsetof(DaiFunctions_GetAnimByAngle, Hangle) == 0x000028, "Member 'DaiFunctions_GetAnimByAngle::Hangle' has a wrong offset!");
static_assert(offsetof(DaiFunctions_GetAnimByAngle, PlayParams) == 0x000030, "Member 'DaiFunctions_GetAnimByAngle::PlayParams' has a wrong offset!");
static_assert(offsetof(DaiFunctions_GetAnimByAngle, CheckComponents) == 0x0000A8, "Member 'DaiFunctions_GetAnimByAngle::CheckComponents' has a wrong offset!");
static_assert(offsetof(DaiFunctions_GetAnimByAngle, ReturnValue) == 0x0000B0, "Member 'DaiFunctions_GetAnimByAngle::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.GetAnimByTag
// 0x0098 (0x0098 - 0x0000)
struct DaiFunctions_GetAnimByTag final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDaiAnimPlayParams                     PlayParams;                                        // 0x0010(0x0078)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          CheckComponents;                                   // 0x0088(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationAsset*                        ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiFunctions_GetAnimByTag) == 0x000008, "Wrong alignment on DaiFunctions_GetAnimByTag");
static_assert(sizeof(DaiFunctions_GetAnimByTag) == 0x000098, "Wrong size on DaiFunctions_GetAnimByTag");
static_assert(offsetof(DaiFunctions_GetAnimByTag, Actor) == 0x000000, "Member 'DaiFunctions_GetAnimByTag::Actor' has a wrong offset!");
static_assert(offsetof(DaiFunctions_GetAnimByTag, Tag) == 0x000008, "Member 'DaiFunctions_GetAnimByTag::Tag' has a wrong offset!");
static_assert(offsetof(DaiFunctions_GetAnimByTag, PlayParams) == 0x000010, "Member 'DaiFunctions_GetAnimByTag::PlayParams' has a wrong offset!");
static_assert(offsetof(DaiFunctions_GetAnimByTag, CheckComponents) == 0x000088, "Member 'DaiFunctions_GetAnimByTag::CheckComponents' has a wrong offset!");
static_assert(offsetof(DaiFunctions_GetAnimByTag, ReturnValue) == 0x000090, "Member 'DaiFunctions_GetAnimByTag::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.getAnimByTags
// 0x00B0 (0x00B0 - 0x0000)
struct DaiFunctions_GetAnimByTags final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FDaiAnimPlayParams                     PlayParams;                                        // 0x0028(0x0078)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          CheckComponents;                                   // 0x00A0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationAsset*                        ReturnValue;                                       // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiFunctions_GetAnimByTags) == 0x000008, "Wrong alignment on DaiFunctions_GetAnimByTags");
static_assert(sizeof(DaiFunctions_GetAnimByTags) == 0x0000B0, "Wrong size on DaiFunctions_GetAnimByTags");
static_assert(offsetof(DaiFunctions_GetAnimByTags, Actor) == 0x000000, "Member 'DaiFunctions_GetAnimByTags::Actor' has a wrong offset!");
static_assert(offsetof(DaiFunctions_GetAnimByTags, Tags) == 0x000008, "Member 'DaiFunctions_GetAnimByTags::Tags' has a wrong offset!");
static_assert(offsetof(DaiFunctions_GetAnimByTags, PlayParams) == 0x000028, "Member 'DaiFunctions_GetAnimByTags::PlayParams' has a wrong offset!");
static_assert(offsetof(DaiFunctions_GetAnimByTags, CheckComponents) == 0x0000A0, "Member 'DaiFunctions_GetAnimByTags::CheckComponents' has a wrong offset!");
static_assert(offsetof(DaiFunctions_GetAnimByTags, ReturnValue) == 0x0000A8, "Member 'DaiFunctions_GetAnimByTags::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.getAnimFromSection
// 0x0018 (0x0018 - 0x0000)
struct DaiFunctions_GetAnimFromSection final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Section;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAnimSequence*                    ReturnValue;                                       // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiFunctions_GetAnimFromSection) == 0x000008, "Wrong alignment on DaiFunctions_GetAnimFromSection");
static_assert(sizeof(DaiFunctions_GetAnimFromSection) == 0x000018, "Wrong size on DaiFunctions_GetAnimFromSection");
static_assert(offsetof(DaiFunctions_GetAnimFromSection, Montage) == 0x000000, "Member 'DaiFunctions_GetAnimFromSection::Montage' has a wrong offset!");
static_assert(offsetof(DaiFunctions_GetAnimFromSection, Section) == 0x000008, "Member 'DaiFunctions_GetAnimFromSection::Section' has a wrong offset!");
static_assert(offsetof(DaiFunctions_GetAnimFromSection, ReturnValue) == 0x000010, "Member 'DaiFunctions_GetAnimFromSection::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.getObjectSet
// 0x00A8 (0x00A8 - 0x0000)
struct DaiFunctions_GetObjectSet final
{
public:
	struct FDaiContext                            Query;                                             // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0080(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Caller;                                            // 0x0088(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    ObjectClass;                                       // 0x0090(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        ReturnValue;                                       // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiFunctions_GetObjectSet) == 0x000008, "Wrong alignment on DaiFunctions_GetObjectSet");
static_assert(sizeof(DaiFunctions_GetObjectSet) == 0x0000A8, "Wrong size on DaiFunctions_GetObjectSet");
static_assert(offsetof(DaiFunctions_GetObjectSet, Query) == 0x000000, "Member 'DaiFunctions_GetObjectSet::Query' has a wrong offset!");
static_assert(offsetof(DaiFunctions_GetObjectSet, Context) == 0x000080, "Member 'DaiFunctions_GetObjectSet::Context' has a wrong offset!");
static_assert(offsetof(DaiFunctions_GetObjectSet, Caller) == 0x000088, "Member 'DaiFunctions_GetObjectSet::Caller' has a wrong offset!");
static_assert(offsetof(DaiFunctions_GetObjectSet, ObjectClass) == 0x000090, "Member 'DaiFunctions_GetObjectSet::ObjectClass' has a wrong offset!");
static_assert(offsetof(DaiFunctions_GetObjectSet, ReturnValue) == 0x000098, "Member 'DaiFunctions_GetObjectSet::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.getSingleObject
// 0x00A0 (0x00A0 - 0x0000)
struct DaiFunctions_GetSingleObject final
{
public:
	struct FDaiContext                            Query;                                             // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0080(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Caller;                                            // 0x0088(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    ObjectClass;                                       // 0x0090(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0098(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiFunctions_GetSingleObject) == 0x000008, "Wrong alignment on DaiFunctions_GetSingleObject");
static_assert(sizeof(DaiFunctions_GetSingleObject) == 0x0000A0, "Wrong size on DaiFunctions_GetSingleObject");
static_assert(offsetof(DaiFunctions_GetSingleObject, Query) == 0x000000, "Member 'DaiFunctions_GetSingleObject::Query' has a wrong offset!");
static_assert(offsetof(DaiFunctions_GetSingleObject, Context) == 0x000080, "Member 'DaiFunctions_GetSingleObject::Context' has a wrong offset!");
static_assert(offsetof(DaiFunctions_GetSingleObject, Caller) == 0x000088, "Member 'DaiFunctions_GetSingleObject::Caller' has a wrong offset!");
static_assert(offsetof(DaiFunctions_GetSingleObject, ObjectClass) == 0x000090, "Member 'DaiFunctions_GetSingleObject::ObjectClass' has a wrong offset!");
static_assert(offsetof(DaiFunctions_GetSingleObject, ReturnValue) == 0x000098, "Member 'DaiFunctions_GetSingleObject::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.hasBit
// 0x000C (0x000C - 0x0000)
struct DaiFunctions_HasBit final
{
public:
	int32                                         bitmask;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaiFunctions_HasBit) == 0x000004, "Wrong alignment on DaiFunctions_HasBit");
static_assert(sizeof(DaiFunctions_HasBit) == 0x00000C, "Wrong size on DaiFunctions_HasBit");
static_assert(offsetof(DaiFunctions_HasBit, bitmask) == 0x000000, "Member 'DaiFunctions_HasBit::bitmask' has a wrong offset!");
static_assert(offsetof(DaiFunctions_HasBit, Index_0) == 0x000004, "Member 'DaiFunctions_HasBit::Index_0' has a wrong offset!");
static_assert(offsetof(DaiFunctions_HasBit, ReturnValue) == 0x000008, "Member 'DaiFunctions_HasBit::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.hasGameplayTag
// 0x0018 (0x0018 - 0x0000)
struct DaiFunctions_HasGameplayTag final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckComponents;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaiFunctions_HasGameplayTag) == 0x000008, "Wrong alignment on DaiFunctions_HasGameplayTag");
static_assert(sizeof(DaiFunctions_HasGameplayTag) == 0x000018, "Wrong size on DaiFunctions_HasGameplayTag");
static_assert(offsetof(DaiFunctions_HasGameplayTag, Actor) == 0x000000, "Member 'DaiFunctions_HasGameplayTag::Actor' has a wrong offset!");
static_assert(offsetof(DaiFunctions_HasGameplayTag, Tag) == 0x000008, "Member 'DaiFunctions_HasGameplayTag::Tag' has a wrong offset!");
static_assert(offsetof(DaiFunctions_HasGameplayTag, CheckComponents) == 0x000010, "Member 'DaiFunctions_HasGameplayTag::CheckComponents' has a wrong offset!");
static_assert(offsetof(DaiFunctions_HasGameplayTag, ReturnValue) == 0x000011, "Member 'DaiFunctions_HasGameplayTag::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.hasSlotAnimation
// 0x0018 (0x0018 - 0x0000)
struct DaiFunctions_HasSlotAnimation final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaiFunctions_HasSlotAnimation) == 0x000008, "Wrong alignment on DaiFunctions_HasSlotAnimation");
static_assert(sizeof(DaiFunctions_HasSlotAnimation) == 0x000018, "Wrong size on DaiFunctions_HasSlotAnimation");
static_assert(offsetof(DaiFunctions_HasSlotAnimation, Montage) == 0x000000, "Member 'DaiFunctions_HasSlotAnimation::Montage' has a wrong offset!");
static_assert(offsetof(DaiFunctions_HasSlotAnimation, SlotName) == 0x000008, "Member 'DaiFunctions_HasSlotAnimation::SlotName' has a wrong offset!");
static_assert(offsetof(DaiFunctions_HasSlotAnimation, ReturnValue) == 0x000010, "Member 'DaiFunctions_HasSlotAnimation::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.IsActorTraceableByPlayer
// 0x0028 (0x0028 - 0x0000)
struct DaiFunctions_IsActorTraceableByPlayer final
{
public:
	class APlayerController*                      PlayerCtrl;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	ETraceableByPlayerLevel                       TraceLevel;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceableByPlayerConditions                  TraceCondition;                                    // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0022(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaiFunctions_IsActorTraceableByPlayer) == 0x000008, "Wrong alignment on DaiFunctions_IsActorTraceableByPlayer");
static_assert(sizeof(DaiFunctions_IsActorTraceableByPlayer) == 0x000028, "Wrong size on DaiFunctions_IsActorTraceableByPlayer");
static_assert(offsetof(DaiFunctions_IsActorTraceableByPlayer, PlayerCtrl) == 0x000000, "Member 'DaiFunctions_IsActorTraceableByPlayer::PlayerCtrl' has a wrong offset!");
static_assert(offsetof(DaiFunctions_IsActorTraceableByPlayer, Actor) == 0x000008, "Member 'DaiFunctions_IsActorTraceableByPlayer::Actor' has a wrong offset!");
static_assert(offsetof(DaiFunctions_IsActorTraceableByPlayer, IgnoreActors) == 0x000010, "Member 'DaiFunctions_IsActorTraceableByPlayer::IgnoreActors' has a wrong offset!");
static_assert(offsetof(DaiFunctions_IsActorTraceableByPlayer, TraceLevel) == 0x000020, "Member 'DaiFunctions_IsActorTraceableByPlayer::TraceLevel' has a wrong offset!");
static_assert(offsetof(DaiFunctions_IsActorTraceableByPlayer, TraceCondition) == 0x000021, "Member 'DaiFunctions_IsActorTraceableByPlayer::TraceCondition' has a wrong offset!");
static_assert(offsetof(DaiFunctions_IsActorTraceableByPlayer, ReturnValue) == 0x000022, "Member 'DaiFunctions_IsActorTraceableByPlayer::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.IsActorVisibleByPlayer
// 0x0018 (0x0018 - 0x0000)
struct DaiFunctions_IsActorVisibleByPlayer final
{
public:
	class APlayerController*                      PlayerCtrl;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FOVDownScale;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaiFunctions_IsActorVisibleByPlayer) == 0x000008, "Wrong alignment on DaiFunctions_IsActorVisibleByPlayer");
static_assert(sizeof(DaiFunctions_IsActorVisibleByPlayer) == 0x000018, "Wrong size on DaiFunctions_IsActorVisibleByPlayer");
static_assert(offsetof(DaiFunctions_IsActorVisibleByPlayer, PlayerCtrl) == 0x000000, "Member 'DaiFunctions_IsActorVisibleByPlayer::PlayerCtrl' has a wrong offset!");
static_assert(offsetof(DaiFunctions_IsActorVisibleByPlayer, Actor) == 0x000008, "Member 'DaiFunctions_IsActorVisibleByPlayer::Actor' has a wrong offset!");
static_assert(offsetof(DaiFunctions_IsActorVisibleByPlayer, FOVDownScale) == 0x000010, "Member 'DaiFunctions_IsActorVisibleByPlayer::FOVDownScale' has a wrong offset!");
static_assert(offsetof(DaiFunctions_IsActorVisibleByPlayer, ReturnValue) == 0x000014, "Member 'DaiFunctions_IsActorVisibleByPlayer::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.IsComponentMasked
// 0x0010 (0x0010 - 0x0000)
struct DaiFunctions_IsComponentMasked final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaskFilter                                   SearchedMask;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaiFunctions_IsComponentMasked) == 0x000008, "Wrong alignment on DaiFunctions_IsComponentMasked");
static_assert(sizeof(DaiFunctions_IsComponentMasked) == 0x000010, "Wrong size on DaiFunctions_IsComponentMasked");
static_assert(offsetof(DaiFunctions_IsComponentMasked, Component) == 0x000000, "Member 'DaiFunctions_IsComponentMasked::Component' has a wrong offset!");
static_assert(offsetof(DaiFunctions_IsComponentMasked, SearchedMask) == 0x000008, "Member 'DaiFunctions_IsComponentMasked::SearchedMask' has a wrong offset!");
static_assert(offsetof(DaiFunctions_IsComponentMasked, ReturnValue) == 0x000009, "Member 'DaiFunctions_IsComponentMasked::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.IsComponentTraceableByPlayer
// 0x0028 (0x0028 - 0x0000)
struct DaiFunctions_IsComponentTraceableByPlayer final
{
public:
	class APlayerController*                      PlayerCtrl;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	ETraceableByPlayerLevel                       TraceLevel;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceableByPlayerConditions                  TraceCondition;                                    // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0022(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaiFunctions_IsComponentTraceableByPlayer) == 0x000008, "Wrong alignment on DaiFunctions_IsComponentTraceableByPlayer");
static_assert(sizeof(DaiFunctions_IsComponentTraceableByPlayer) == 0x000028, "Wrong size on DaiFunctions_IsComponentTraceableByPlayer");
static_assert(offsetof(DaiFunctions_IsComponentTraceableByPlayer, PlayerCtrl) == 0x000000, "Member 'DaiFunctions_IsComponentTraceableByPlayer::PlayerCtrl' has a wrong offset!");
static_assert(offsetof(DaiFunctions_IsComponentTraceableByPlayer, Component) == 0x000008, "Member 'DaiFunctions_IsComponentTraceableByPlayer::Component' has a wrong offset!");
static_assert(offsetof(DaiFunctions_IsComponentTraceableByPlayer, IgnoreActors) == 0x000010, "Member 'DaiFunctions_IsComponentTraceableByPlayer::IgnoreActors' has a wrong offset!");
static_assert(offsetof(DaiFunctions_IsComponentTraceableByPlayer, TraceLevel) == 0x000020, "Member 'DaiFunctions_IsComponentTraceableByPlayer::TraceLevel' has a wrong offset!");
static_assert(offsetof(DaiFunctions_IsComponentTraceableByPlayer, TraceCondition) == 0x000021, "Member 'DaiFunctions_IsComponentTraceableByPlayer::TraceCondition' has a wrong offset!");
static_assert(offsetof(DaiFunctions_IsComponentTraceableByPlayer, ReturnValue) == 0x000022, "Member 'DaiFunctions_IsComponentTraceableByPlayer::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.IsComponentVisibleByPlayer
// 0x0018 (0x0018 - 0x0000)
struct DaiFunctions_IsComponentVisibleByPlayer final
{
public:
	class APlayerController*                      PlayerCtrl;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FOVDownScale;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaiFunctions_IsComponentVisibleByPlayer) == 0x000008, "Wrong alignment on DaiFunctions_IsComponentVisibleByPlayer");
static_assert(sizeof(DaiFunctions_IsComponentVisibleByPlayer) == 0x000018, "Wrong size on DaiFunctions_IsComponentVisibleByPlayer");
static_assert(offsetof(DaiFunctions_IsComponentVisibleByPlayer, PlayerCtrl) == 0x000000, "Member 'DaiFunctions_IsComponentVisibleByPlayer::PlayerCtrl' has a wrong offset!");
static_assert(offsetof(DaiFunctions_IsComponentVisibleByPlayer, Component) == 0x000008, "Member 'DaiFunctions_IsComponentVisibleByPlayer::Component' has a wrong offset!");
static_assert(offsetof(DaiFunctions_IsComponentVisibleByPlayer, FOVDownScale) == 0x000010, "Member 'DaiFunctions_IsComponentVisibleByPlayer::FOVDownScale' has a wrong offset!");
static_assert(offsetof(DaiFunctions_IsComponentVisibleByPlayer, ReturnValue) == 0x000014, "Member 'DaiFunctions_IsComponentVisibleByPlayer::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.isPlayingSlotAnimation
// 0x0018 (0x0018 - 0x0000)
struct DaiFunctions_IsPlayingSlotAnimation final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreIfBlendingOut;                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaiFunctions_IsPlayingSlotAnimation) == 0x000008, "Wrong alignment on DaiFunctions_IsPlayingSlotAnimation");
static_assert(sizeof(DaiFunctions_IsPlayingSlotAnimation) == 0x000018, "Wrong size on DaiFunctions_IsPlayingSlotAnimation");
static_assert(offsetof(DaiFunctions_IsPlayingSlotAnimation, AnimInstance) == 0x000000, "Member 'DaiFunctions_IsPlayingSlotAnimation::AnimInstance' has a wrong offset!");
static_assert(offsetof(DaiFunctions_IsPlayingSlotAnimation, SlotName) == 0x000008, "Member 'DaiFunctions_IsPlayingSlotAnimation::SlotName' has a wrong offset!");
static_assert(offsetof(DaiFunctions_IsPlayingSlotAnimation, IgnoreIfBlendingOut) == 0x000010, "Member 'DaiFunctions_IsPlayingSlotAnimation::IgnoreIfBlendingOut' has a wrong offset!");
static_assert(offsetof(DaiFunctions_IsPlayingSlotAnimation, ReturnValue) == 0x000011, "Member 'DaiFunctions_IsPlayingSlotAnimation::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.makeReferenceQuery
// 0x0088 (0x0088 - 0x0000)
struct DaiFunctions_MakeReferenceQuery final
{
public:
	class AActor*                                 Reference;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDaiContext                            ReturnValue;                                       // 0x0008(0x0080)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiFunctions_MakeReferenceQuery) == 0x000008, "Wrong alignment on DaiFunctions_MakeReferenceQuery");
static_assert(sizeof(DaiFunctions_MakeReferenceQuery) == 0x000088, "Wrong size on DaiFunctions_MakeReferenceQuery");
static_assert(offsetof(DaiFunctions_MakeReferenceQuery, Reference) == 0x000000, "Member 'DaiFunctions_MakeReferenceQuery::Reference' has a wrong offset!");
static_assert(offsetof(DaiFunctions_MakeReferenceQuery, ReturnValue) == 0x000008, "Member 'DaiFunctions_MakeReferenceQuery::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.MaskedSphereTraceSingleByProfile
// 0x0148 (0x0148 - 0x0000)
struct DaiFunctions_MaskedSphereTraceSingleByProfile final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProfileName;                                       // 0x003C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FHitResult                             OutHit;                                            // 0x0058(0x00E8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EMaskFilter                                   MaskFilter;                                        // 0x0140(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0141(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_142[0x6];                                      // 0x0142(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaiFunctions_MaskedSphereTraceSingleByProfile) == 0x000008, "Wrong alignment on DaiFunctions_MaskedSphereTraceSingleByProfile");
static_assert(sizeof(DaiFunctions_MaskedSphereTraceSingleByProfile) == 0x000148, "Wrong size on DaiFunctions_MaskedSphereTraceSingleByProfile");
static_assert(offsetof(DaiFunctions_MaskedSphereTraceSingleByProfile, WorldContextObject) == 0x000000, "Member 'DaiFunctions_MaskedSphereTraceSingleByProfile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DaiFunctions_MaskedSphereTraceSingleByProfile, Start) == 0x000008, "Member 'DaiFunctions_MaskedSphereTraceSingleByProfile::Start' has a wrong offset!");
static_assert(offsetof(DaiFunctions_MaskedSphereTraceSingleByProfile, End) == 0x000020, "Member 'DaiFunctions_MaskedSphereTraceSingleByProfile::End' has a wrong offset!");
static_assert(offsetof(DaiFunctions_MaskedSphereTraceSingleByProfile, Radius) == 0x000038, "Member 'DaiFunctions_MaskedSphereTraceSingleByProfile::Radius' has a wrong offset!");
static_assert(offsetof(DaiFunctions_MaskedSphereTraceSingleByProfile, ProfileName) == 0x00003C, "Member 'DaiFunctions_MaskedSphereTraceSingleByProfile::ProfileName' has a wrong offset!");
static_assert(offsetof(DaiFunctions_MaskedSphereTraceSingleByProfile, bTraceComplex) == 0x000044, "Member 'DaiFunctions_MaskedSphereTraceSingleByProfile::bTraceComplex' has a wrong offset!");
static_assert(offsetof(DaiFunctions_MaskedSphereTraceSingleByProfile, ActorsToIgnore) == 0x000048, "Member 'DaiFunctions_MaskedSphereTraceSingleByProfile::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(DaiFunctions_MaskedSphereTraceSingleByProfile, OutHit) == 0x000058, "Member 'DaiFunctions_MaskedSphereTraceSingleByProfile::OutHit' has a wrong offset!");
static_assert(offsetof(DaiFunctions_MaskedSphereTraceSingleByProfile, MaskFilter) == 0x000140, "Member 'DaiFunctions_MaskedSphereTraceSingleByProfile::MaskFilter' has a wrong offset!");
static_assert(offsetof(DaiFunctions_MaskedSphereTraceSingleByProfile, ReturnValue) == 0x000141, "Member 'DaiFunctions_MaskedSphereTraceSingleByProfile::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.playDynamicMontage
// 0x0090 (0x0090 - 0x0000)
struct DaiFunctions_PlayDynamicMontage final
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDaiAnimPlayParams                     PlayParams;                                        // 0x0008(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0080(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopCount;                                         // 0x0084(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiFunctions_PlayDynamicMontage) == 0x000008, "Wrong alignment on DaiFunctions_PlayDynamicMontage");
static_assert(sizeof(DaiFunctions_PlayDynamicMontage) == 0x000090, "Wrong size on DaiFunctions_PlayDynamicMontage");
static_assert(offsetof(DaiFunctions_PlayDynamicMontage, Mesh) == 0x000000, "Member 'DaiFunctions_PlayDynamicMontage::Mesh' has a wrong offset!");
static_assert(offsetof(DaiFunctions_PlayDynamicMontage, PlayParams) == 0x000008, "Member 'DaiFunctions_PlayDynamicMontage::PlayParams' has a wrong offset!");
static_assert(offsetof(DaiFunctions_PlayDynamicMontage, PlayRate) == 0x000080, "Member 'DaiFunctions_PlayDynamicMontage::PlayRate' has a wrong offset!");
static_assert(offsetof(DaiFunctions_PlayDynamicMontage, LoopCount) == 0x000084, "Member 'DaiFunctions_PlayDynamicMontage::LoopCount' has a wrong offset!");
static_assert(offsetof(DaiFunctions_PlayDynamicMontage, ReturnValue) == 0x000088, "Member 'DaiFunctions_PlayDynamicMontage::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.provideObjectSet
// 0x00A8 (0x00A8 - 0x0000)
struct DaiFunctions_ProvideObjectSet final
{
public:
	struct FDaiContext                            Query;                                             // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0080(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Caller;                                            // 0x0088(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    ObjectClass;                                       // 0x0090(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        ReturnValue;                                       // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiFunctions_ProvideObjectSet) == 0x000008, "Wrong alignment on DaiFunctions_ProvideObjectSet");
static_assert(sizeof(DaiFunctions_ProvideObjectSet) == 0x0000A8, "Wrong size on DaiFunctions_ProvideObjectSet");
static_assert(offsetof(DaiFunctions_ProvideObjectSet, Query) == 0x000000, "Member 'DaiFunctions_ProvideObjectSet::Query' has a wrong offset!");
static_assert(offsetof(DaiFunctions_ProvideObjectSet, Context) == 0x000080, "Member 'DaiFunctions_ProvideObjectSet::Context' has a wrong offset!");
static_assert(offsetof(DaiFunctions_ProvideObjectSet, Caller) == 0x000088, "Member 'DaiFunctions_ProvideObjectSet::Caller' has a wrong offset!");
static_assert(offsetof(DaiFunctions_ProvideObjectSet, ObjectClass) == 0x000090, "Member 'DaiFunctions_ProvideObjectSet::ObjectClass' has a wrong offset!");
static_assert(offsetof(DaiFunctions_ProvideObjectSet, ReturnValue) == 0x000098, "Member 'DaiFunctions_ProvideObjectSet::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.provideSingleObject
// 0x00A0 (0x00A0 - 0x0000)
struct DaiFunctions_ProvideSingleObject final
{
public:
	struct FDaiContext                            Query;                                             // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0080(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Caller;                                            // 0x0088(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    ObjectClass;                                       // 0x0090(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0098(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiFunctions_ProvideSingleObject) == 0x000008, "Wrong alignment on DaiFunctions_ProvideSingleObject");
static_assert(sizeof(DaiFunctions_ProvideSingleObject) == 0x0000A0, "Wrong size on DaiFunctions_ProvideSingleObject");
static_assert(offsetof(DaiFunctions_ProvideSingleObject, Query) == 0x000000, "Member 'DaiFunctions_ProvideSingleObject::Query' has a wrong offset!");
static_assert(offsetof(DaiFunctions_ProvideSingleObject, Context) == 0x000080, "Member 'DaiFunctions_ProvideSingleObject::Context' has a wrong offset!");
static_assert(offsetof(DaiFunctions_ProvideSingleObject, Caller) == 0x000088, "Member 'DaiFunctions_ProvideSingleObject::Caller' has a wrong offset!");
static_assert(offsetof(DaiFunctions_ProvideSingleObject, ObjectClass) == 0x000090, "Member 'DaiFunctions_ProvideSingleObject::ObjectClass' has a wrong offset!");
static_assert(offsetof(DaiFunctions_ProvideSingleObject, ReturnValue) == 0x000098, "Member 'DaiFunctions_ProvideSingleObject::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.selectNearestActor
// 0x0038 (0x0038 - 0x0000)
struct DaiFunctions_SelectNearestActor final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiFunctions_SelectNearestActor) == 0x000008, "Wrong alignment on DaiFunctions_SelectNearestActor");
static_assert(sizeof(DaiFunctions_SelectNearestActor) == 0x000038, "Wrong size on DaiFunctions_SelectNearestActor");
static_assert(offsetof(DaiFunctions_SelectNearestActor, Actors) == 0x000000, "Member 'DaiFunctions_SelectNearestActor::Actors' has a wrong offset!");
static_assert(offsetof(DaiFunctions_SelectNearestActor, Origin) == 0x000010, "Member 'DaiFunctions_SelectNearestActor::Origin' has a wrong offset!");
static_assert(offsetof(DaiFunctions_SelectNearestActor, ActorClass) == 0x000028, "Member 'DaiFunctions_SelectNearestActor::ActorClass' has a wrong offset!");
static_assert(offsetof(DaiFunctions_SelectNearestActor, ReturnValue) == 0x000030, "Member 'DaiFunctions_SelectNearestActor::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.setBit
// 0x000C (0x000C - 0x0000)
struct DaiFunctions_SetBit final
{
public:
	int32                                         bitmask;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiFunctions_SetBit) == 0x000004, "Wrong alignment on DaiFunctions_SetBit");
static_assert(sizeof(DaiFunctions_SetBit) == 0x00000C, "Wrong size on DaiFunctions_SetBit");
static_assert(offsetof(DaiFunctions_SetBit, bitmask) == 0x000000, "Member 'DaiFunctions_SetBit::bitmask' has a wrong offset!");
static_assert(offsetof(DaiFunctions_SetBit, Index_0) == 0x000004, "Member 'DaiFunctions_SetBit::Index_0' has a wrong offset!");
static_assert(offsetof(DaiFunctions_SetBit, ReturnValue) == 0x000008, "Member 'DaiFunctions_SetBit::ReturnValue' has a wrong offset!");

// Function Dai.DaiFunctions.toBitmask
// 0x0008 (0x0008 - 0x0000)
struct DaiFunctions_ToBitmask final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiFunctions_ToBitmask) == 0x000004, "Wrong alignment on DaiFunctions_ToBitmask");
static_assert(sizeof(DaiFunctions_ToBitmask) == 0x000008, "Wrong size on DaiFunctions_ToBitmask");
static_assert(offsetof(DaiFunctions_ToBitmask, Value) == 0x000000, "Member 'DaiFunctions_ToBitmask::Value' has a wrong offset!");
static_assert(offsetof(DaiFunctions_ToBitmask, ReturnValue) == 0x000004, "Member 'DaiFunctions_ToBitmask::ReturnValue' has a wrong offset!");

// Function Dai.DaiNotify.performNotifies
// 0x0030 (0x0030 - 0x0000)
struct DaiNotify_PerformNotifies final
{
public:
	struct FDaiNotifies                           Conditions;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Caller;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Debug;                                             // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaiNotify_PerformNotifies) == 0x000008, "Wrong alignment on DaiNotify_PerformNotifies");
static_assert(sizeof(DaiNotify_PerformNotifies) == 0x000030, "Wrong size on DaiNotify_PerformNotifies");
static_assert(offsetof(DaiNotify_PerformNotifies, Conditions) == 0x000000, "Member 'DaiNotify_PerformNotifies::Conditions' has a wrong offset!");
static_assert(offsetof(DaiNotify_PerformNotifies, Context) == 0x000018, "Member 'DaiNotify_PerformNotifies::Context' has a wrong offset!");
static_assert(offsetof(DaiNotify_PerformNotifies, Caller) == 0x000020, "Member 'DaiNotify_PerformNotifies::Caller' has a wrong offset!");
static_assert(offsetof(DaiNotify_PerformNotifies, Debug) == 0x000028, "Member 'DaiNotify_PerformNotifies::Debug' has a wrong offset!");
static_assert(offsetof(DaiNotify_PerformNotifies, ReturnValue) == 0x000029, "Member 'DaiNotify_PerformNotifies::ReturnValue' has a wrong offset!");

// Function Dai.DaiScriptNotify.ScriptPerformNotify
// 0x0018 (0x0018 - 0x0000)
struct DaiScriptNotify_ScriptPerformNotify final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Caller;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaiScriptNotify_ScriptPerformNotify) == 0x000008, "Wrong alignment on DaiScriptNotify_ScriptPerformNotify");
static_assert(sizeof(DaiScriptNotify_ScriptPerformNotify) == 0x000018, "Wrong size on DaiScriptNotify_ScriptPerformNotify");
static_assert(offsetof(DaiScriptNotify_ScriptPerformNotify, Context) == 0x000000, "Member 'DaiScriptNotify_ScriptPerformNotify::Context' has a wrong offset!");
static_assert(offsetof(DaiScriptNotify_ScriptPerformNotify, Caller) == 0x000008, "Member 'DaiScriptNotify_ScriptPerformNotify::Caller' has a wrong offset!");
static_assert(offsetof(DaiScriptNotify_ScriptPerformNotify, ReturnValue) == 0x000010, "Member 'DaiScriptNotify_ScriptPerformNotify::ReturnValue' has a wrong offset!");

// Function Dai.DaiScriptNotify.ScriptToString
// 0x0010 (0x0010 - 0x0000)
struct DaiScriptNotify_ScriptToString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiScriptNotify_ScriptToString) == 0x000008, "Wrong alignment on DaiScriptNotify_ScriptToString");
static_assert(sizeof(DaiScriptNotify_ScriptToString) == 0x000010, "Wrong size on DaiScriptNotify_ScriptToString");
static_assert(offsetof(DaiScriptNotify_ScriptToString, ReturnValue) == 0x000000, "Member 'DaiScriptNotify_ScriptToString::ReturnValue' has a wrong offset!");

// Function Dai.DaiParam.IsUpToDate
// 0x0001 (0x0001 - 0x0000)
struct DaiParam_IsUpToDate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiParam_IsUpToDate) == 0x000001, "Wrong alignment on DaiParam_IsUpToDate");
static_assert(sizeof(DaiParam_IsUpToDate) == 0x000001, "Wrong size on DaiParam_IsUpToDate");
static_assert(offsetof(DaiParam_IsUpToDate, ReturnValue) == 0x000000, "Member 'DaiParam_IsUpToDate::ReturnValue' has a wrong offset!");

// Function Dai.ScriptDaiParam.ScriptUpdate
// 0x0010 (0x0010 - 0x0000)
struct ScriptDaiParam_ScriptUpdate final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptDaiParam_ScriptUpdate) == 0x000008, "Wrong alignment on ScriptDaiParam_ScriptUpdate");
static_assert(sizeof(ScriptDaiParam_ScriptUpdate) == 0x000010, "Wrong size on ScriptDaiParam_ScriptUpdate");
static_assert(offsetof(ScriptDaiParam_ScriptUpdate, Context) == 0x000000, "Member 'ScriptDaiParam_ScriptUpdate::Context' has a wrong offset!");
static_assert(offsetof(ScriptDaiParam_ScriptUpdate, Actor) == 0x000008, "Member 'ScriptDaiParam_ScriptUpdate::Actor' has a wrong offset!");

// Function Dai.ScriptDaiParam.ScriptToString
// 0x0010 (0x0010 - 0x0000)
struct ScriptDaiParam_ScriptToString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptDaiParam_ScriptToString) == 0x000008, "Wrong alignment on ScriptDaiParam_ScriptToString");
static_assert(sizeof(ScriptDaiParam_ScriptToString) == 0x000010, "Wrong size on ScriptDaiParam_ScriptToString");
static_assert(offsetof(ScriptDaiParam_ScriptToString, ReturnValue) == 0x000000, "Member 'ScriptDaiParam_ScriptToString::ReturnValue' has a wrong offset!");

// Function Dai.DaiBoolParam.UpdateValue
// 0x0001 (0x0001 - 0x0000)
struct DaiBoolParam_UpdateValue final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiBoolParam_UpdateValue) == 0x000001, "Wrong alignment on DaiBoolParam_UpdateValue");
static_assert(sizeof(DaiBoolParam_UpdateValue) == 0x000001, "Wrong size on DaiBoolParam_UpdateValue");
static_assert(offsetof(DaiBoolParam_UpdateValue, Value) == 0x000000, "Member 'DaiBoolParam_UpdateValue::Value' has a wrong offset!");

// Function Dai.DaiBoolParam.GetUpToDateValue
// 0x0004 (0x0004 - 0x0000)
struct DaiBoolParam_GetUpToDateValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiBoolParam_GetUpToDateValue) == 0x000004, "Wrong alignment on DaiBoolParam_GetUpToDateValue");
static_assert(sizeof(DaiBoolParam_GetUpToDateValue) == 0x000004, "Wrong size on DaiBoolParam_GetUpToDateValue");
static_assert(offsetof(DaiBoolParam_GetUpToDateValue, ReturnValue) == 0x000000, "Member 'DaiBoolParam_GetUpToDateValue::ReturnValue' has a wrong offset!");

// Function Dai.DaiFloatParam.SetCustomValue
// 0x0004 (0x0004 - 0x0000)
struct DaiFloatParam_SetCustomValue final
{
public:
	float                                         Newval;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiFloatParam_SetCustomValue) == 0x000004, "Wrong alignment on DaiFloatParam_SetCustomValue");
static_assert(sizeof(DaiFloatParam_SetCustomValue) == 0x000004, "Wrong size on DaiFloatParam_SetCustomValue");
static_assert(offsetof(DaiFloatParam_SetCustomValue, Newval) == 0x000000, "Member 'DaiFloatParam_SetCustomValue::Newval' has a wrong offset!");

// Function Dai.DaiFloatParam.UpdateValue
// 0x0004 (0x0004 - 0x0000)
struct DaiFloatParam_UpdateValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiFloatParam_UpdateValue) == 0x000004, "Wrong alignment on DaiFloatParam_UpdateValue");
static_assert(sizeof(DaiFloatParam_UpdateValue) == 0x000004, "Wrong size on DaiFloatParam_UpdateValue");
static_assert(offsetof(DaiFloatParam_UpdateValue, Value) == 0x000000, "Member 'DaiFloatParam_UpdateValue::Value' has a wrong offset!");

// Function Dai.DaiFloatParam.GetUpToDateValue
// 0x0004 (0x0004 - 0x0000)
struct DaiFloatParam_GetUpToDateValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiFloatParam_GetUpToDateValue) == 0x000004, "Wrong alignment on DaiFloatParam_GetUpToDateValue");
static_assert(sizeof(DaiFloatParam_GetUpToDateValue) == 0x000004, "Wrong size on DaiFloatParam_GetUpToDateValue");
static_assert(offsetof(DaiFloatParam_GetUpToDateValue, ReturnValue) == 0x000000, "Member 'DaiFloatParam_GetUpToDateValue::ReturnValue' has a wrong offset!");

// Function Dai.DaiFloatModifier.GetDefaultValue
// 0x0004 (0x0004 - 0x0000)
struct DaiFloatModifier_GetDefaultValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiFloatModifier_GetDefaultValue) == 0x000004, "Wrong alignment on DaiFloatModifier_GetDefaultValue");
static_assert(sizeof(DaiFloatModifier_GetDefaultValue) == 0x000004, "Wrong size on DaiFloatModifier_GetDefaultValue");
static_assert(offsetof(DaiFloatModifier_GetDefaultValue, ReturnValue) == 0x000000, "Member 'DaiFloatModifier_GetDefaultValue::ReturnValue' has a wrong offset!");

// Function Dai.DaiFloatModifier2.GetOther
// 0x0008 (0x0008 - 0x0000)
struct DaiFloatModifier2_GetOther final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiFloatModifier2_GetOther) == 0x000008, "Wrong alignment on DaiFloatModifier2_GetOther");
static_assert(sizeof(DaiFloatModifier2_GetOther) == 0x000008, "Wrong size on DaiFloatModifier2_GetOther");
static_assert(offsetof(DaiFloatModifier2_GetOther, ReturnValue) == 0x000000, "Member 'DaiFloatModifier2_GetOther::ReturnValue' has a wrong offset!");

// Function Dai.DaiTagsComponent.AppendGameplayTags
// 0x0020 (0x0020 - 0x0000)
struct DaiTagsComponent_AppendGameplayTags final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiTagsComponent_AppendGameplayTags) == 0x000008, "Wrong alignment on DaiTagsComponent_AppendGameplayTags");
static_assert(sizeof(DaiTagsComponent_AppendGameplayTags) == 0x000020, "Wrong size on DaiTagsComponent_AppendGameplayTags");
static_assert(offsetof(DaiTagsComponent_AppendGameplayTags, Tags) == 0x000000, "Member 'DaiTagsComponent_AppendGameplayTags::Tags' has a wrong offset!");

// Function Dai.DaiTagsComponent.RemoveGameplayTags
// 0x0020 (0x0020 - 0x0000)
struct DaiTagsComponent_RemoveGameplayTags final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiTagsComponent_RemoveGameplayTags) == 0x000008, "Wrong alignment on DaiTagsComponent_RemoveGameplayTags");
static_assert(sizeof(DaiTagsComponent_RemoveGameplayTags) == 0x000020, "Wrong size on DaiTagsComponent_RemoveGameplayTags");
static_assert(offsetof(DaiTagsComponent_RemoveGameplayTags, Tags) == 0x000000, "Member 'DaiTagsComponent_RemoveGameplayTags::Tags' has a wrong offset!");

// Function Dai.DaiTagsComponent.SetGameplayTags
// 0x0020 (0x0020 - 0x0000)
struct DaiTagsComponent_SetGameplayTags final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiTagsComponent_SetGameplayTags) == 0x000008, "Wrong alignment on DaiTagsComponent_SetGameplayTags");
static_assert(sizeof(DaiTagsComponent_SetGameplayTags) == 0x000020, "Wrong size on DaiTagsComponent_SetGameplayTags");
static_assert(offsetof(DaiTagsComponent_SetGameplayTags, Tags) == 0x000000, "Member 'DaiTagsComponent_SetGameplayTags::Tags' has a wrong offset!");

// Function Dai.DaiTagsComponent.HasAnyGameplayTag
// 0x0001 (0x0001 - 0x0000)
struct DaiTagsComponent_HasAnyGameplayTag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaiTagsComponent_HasAnyGameplayTag) == 0x000001, "Wrong alignment on DaiTagsComponent_HasAnyGameplayTag");
static_assert(sizeof(DaiTagsComponent_HasAnyGameplayTag) == 0x000001, "Wrong size on DaiTagsComponent_HasAnyGameplayTag");
static_assert(offsetof(DaiTagsComponent_HasAnyGameplayTag, ReturnValue) == 0x000000, "Member 'DaiTagsComponent_HasAnyGameplayTag::ReturnValue' has a wrong offset!");

}

