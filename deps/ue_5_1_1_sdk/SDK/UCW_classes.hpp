#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UCW

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "UCW_structs.hpp"
#include "InputCore_structs.hpp"
#include "CommonUI_classes.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_classes.hpp"
#include "Slate_structs.hpp"


namespace SDK
{

// Class UCW.UCWTextStyle
// 0x0000 (0x01B0 - 0x01B0)
class UUCWTextStyle : public UCommonTextStyle
{
public:
	bool                                          bInheritTextColor;                                 // 0x01A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCWTextStyle">();
	}
	static class UUCWTextStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCWTextStyle>();
	}
};
static_assert(alignof(UUCWTextStyle) == 0x000010, "Wrong alignment on UUCWTextStyle");
static_assert(sizeof(UUCWTextStyle) == 0x0001B0, "Wrong size on UUCWTextStyle");
static_assert(offsetof(UUCWTextStyle, bInheritTextColor) == 0x0001A8, "Member 'UUCWTextStyle::bInheritTextColor' has a wrong offset!");

// Class UCW.BButton
// 0x0938 (0x0AA0 - 0x0168)
class UBButton : public UContentWidget
{
public:
	TSubclassOf<class UUCWButtonStyle>            Style;                                             // 0x0168(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               SingleMaterialStyleMID;                            // 0x0170(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBButtonStyle                          NormalStyle;                                       // 0x0180(0x03C0)(NativeAccessSpecifierPublic)
	struct FBButtonStyle                          WidgetStyle;                                       // 0x0540(0x03C0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FHoverablePressableStyle               AkEventsStyle;                                     // 0x0900(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorAndOpacity;                                   // 0x0918(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundColor;                                   // 0x0928(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EButtonClickMethod                            ClickMethod;                                       // 0x0938(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EButtonTouchMethod                            TouchMethod;                                       // 0x0939(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EButtonPressMethod                            PressMethod;                                       // 0x093A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFocusable;                                       // 0x093B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                Padding;                                           // 0x093C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x094C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x094D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94E[0x2];                                      // 0x094E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnClicked;                                         // 0x0950(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_960[0x10];                                     // 0x0960(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnPressed;                                         // 0x0970(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnReleased;                                        // 0x0980(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnHovered;                                         // 0x0990(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A0[0x10];                                     // 0x09A0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnUnhovered;                                       // 0x09B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C0[0x10];                                     // 0x09C0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnFocused;                                         // 0x09D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_9E0[0x10];                                     // 0x09E0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnUnfocused;                                       // 0x09F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_A00[0x20];                                     // 0x0A00(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnKeyDownEvent;                                    // 0x0A20(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_A30[0x10];                                     // 0x0A30(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnKeyUpEvent;                                      // 0x0A40(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_A50[0x50];                                     // 0x0A50(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBackgroundColor(const struct FLinearColor& InBackgroundColor);
	void SetColorAndOpacity(const struct FLinearColor& InColorAndOpacity);
	void SetStyle(TSubclassOf<class UUCWButtonStyle> InStyle);

	bool IsPressed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BButton">();
	}
	static class UBButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBButton>();
	}
};
static_assert(alignof(UBButton) == 0x000010, "Wrong alignment on UBButton");
static_assert(sizeof(UBButton) == 0x000AA0, "Wrong size on UBButton");
static_assert(offsetof(UBButton, Style) == 0x000168, "Member 'UBButton::Style' has a wrong offset!");
static_assert(offsetof(UBButton, SingleMaterialStyleMID) == 0x000170, "Member 'UBButton::SingleMaterialStyleMID' has a wrong offset!");
static_assert(offsetof(UBButton, NormalStyle) == 0x000180, "Member 'UBButton::NormalStyle' has a wrong offset!");
static_assert(offsetof(UBButton, WidgetStyle) == 0x000540, "Member 'UBButton::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UBButton, AkEventsStyle) == 0x000900, "Member 'UBButton::AkEventsStyle' has a wrong offset!");
static_assert(offsetof(UBButton, ColorAndOpacity) == 0x000918, "Member 'UBButton::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UBButton, BackgroundColor) == 0x000928, "Member 'UBButton::BackgroundColor' has a wrong offset!");
static_assert(offsetof(UBButton, ClickMethod) == 0x000938, "Member 'UBButton::ClickMethod' has a wrong offset!");
static_assert(offsetof(UBButton, TouchMethod) == 0x000939, "Member 'UBButton::TouchMethod' has a wrong offset!");
static_assert(offsetof(UBButton, PressMethod) == 0x00093A, "Member 'UBButton::PressMethod' has a wrong offset!");
static_assert(offsetof(UBButton, IsFocusable) == 0x00093B, "Member 'UBButton::IsFocusable' has a wrong offset!");
static_assert(offsetof(UBButton, Padding) == 0x00093C, "Member 'UBButton::Padding' has a wrong offset!");
static_assert(offsetof(UBButton, HorizontalAlignment) == 0x00094C, "Member 'UBButton::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UBButton, VerticalAlignment) == 0x00094D, "Member 'UBButton::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(UBButton, OnClicked) == 0x000950, "Member 'UBButton::OnClicked' has a wrong offset!");
static_assert(offsetof(UBButton, OnPressed) == 0x000970, "Member 'UBButton::OnPressed' has a wrong offset!");
static_assert(offsetof(UBButton, OnReleased) == 0x000980, "Member 'UBButton::OnReleased' has a wrong offset!");
static_assert(offsetof(UBButton, OnHovered) == 0x000990, "Member 'UBButton::OnHovered' has a wrong offset!");
static_assert(offsetof(UBButton, OnUnhovered) == 0x0009B0, "Member 'UBButton::OnUnhovered' has a wrong offset!");
static_assert(offsetof(UBButton, OnFocused) == 0x0009D0, "Member 'UBButton::OnFocused' has a wrong offset!");
static_assert(offsetof(UBButton, OnUnfocused) == 0x0009F0, "Member 'UBButton::OnUnfocused' has a wrong offset!");
static_assert(offsetof(UBButton, OnKeyDownEvent) == 0x000A20, "Member 'UBButton::OnKeyDownEvent' has a wrong offset!");
static_assert(offsetof(UBButton, OnKeyUpEvent) == 0x000A40, "Member 'UBButton::OnKeyUpEvent' has a wrong offset!");

// Class UCW.UCWScrollBox
// 0x0010 (0x0CB0 - 0x0CA0)
class UUCWScrollBox final : public UScrollBox
{
public:
	bool                                          bAllowRightStickScrolling;                         // 0x0C98(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C99[0x3];                                      // 0x0C99(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RightStickScrollMultiplier;                        // 0x0C9C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EConsumeAnalogEvent                           ConsumeAnalogEvent;                                // 0x0CA0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsFocusable;                                      // 0x0CA1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_CA2[0xE];                                      // 0x0CA2(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCWScrollBox">();
	}
	static class UUCWScrollBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCWScrollBox>();
	}
};
static_assert(alignof(UUCWScrollBox) == 0x000010, "Wrong alignment on UUCWScrollBox");
static_assert(sizeof(UUCWScrollBox) == 0x000CB0, "Wrong size on UUCWScrollBox");
static_assert(offsetof(UUCWScrollBox, bAllowRightStickScrolling) == 0x000C98, "Member 'UUCWScrollBox::bAllowRightStickScrolling' has a wrong offset!");
static_assert(offsetof(UUCWScrollBox, RightStickScrollMultiplier) == 0x000C9C, "Member 'UUCWScrollBox::RightStickScrollMultiplier' has a wrong offset!");
static_assert(offsetof(UUCWScrollBox, ConsumeAnalogEvent) == 0x000CA0, "Member 'UUCWScrollBox::ConsumeAnalogEvent' has a wrong offset!");
static_assert(offsetof(UUCWScrollBox, bIsFocusable) == 0x000CA1, "Member 'UUCWScrollBox::bIsFocusable' has a wrong offset!");

// Class UCW.BUserWidget
// 0x0028 (0x02A0 - 0x0278)
class UBUserWidget : public UUserWidget
{
public:
	uint8                                         Pad_278[0x28];                                     // 0x0278(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BlockInput();
	void InputDeviceChanged();
	void OnInputDeviceChanged();
	void UnBlockInput();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BUserWidget">();
	}
	static class UBUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBUserWidget>();
	}
};
static_assert(alignof(UBUserWidget) == 0x000008, "Wrong alignment on UBUserWidget");
static_assert(sizeof(UBUserWidget) == 0x0002A0, "Wrong size on UBUserWidget");

// Class UCW.UCWSkipWidget
// 0x00D0 (0x0348 - 0x0278)
class UUCWSkipWidget final : public UUserWidget
{
public:
	uint8                                         Pad_278[0x8];                                      // 0x0278(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UProgressBar*                           ProgressBar_wdg;                                   // 0x0280(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUCWProgressWidget*                     Progress_wdg;                                      // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SkipHoldTime;                                      // 0x0290(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bActivateOnShow;                                   // 0x0294(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSkipOnAnyKey;                                     // 0x0295(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSetVisibilityOnShow;                              // 0x0296(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSetVisibilityOnHide;                              // 0x0297(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FKey>                           SkipKeys;                                          // 0x0298(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             K2_OnSkipStart;                                    // 0x02A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B8[0x10];                                     // 0x02B8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             K2_OnSkipTick;                                     // 0x02C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D8[0x10];                                     // 0x02D8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             K2_OnSkipCancel;                                   // 0x02E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F8[0x10];                                     // 0x02F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             K2_OnSkip;                                         // 0x0308(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_318[0x30];                                     // 0x0318(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Activate();
	void BP_OnSkip();
	void BP_OnSkipCancel();
	void BP_OnSkipStart();
	void BP_OnSkipTick(float Progress);
	void Deactivate();
	void Hide();
	void InputDeviceChanged();
	void OnActivate();
	void OnDeactivate();
	void OnHide();
	void OnShow();
	void Show();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCWSkipWidget">();
	}
	static class UUCWSkipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCWSkipWidget>();
	}
};
static_assert(alignof(UUCWSkipWidget) == 0x000008, "Wrong alignment on UUCWSkipWidget");
static_assert(sizeof(UUCWSkipWidget) == 0x000348, "Wrong size on UUCWSkipWidget");
static_assert(offsetof(UUCWSkipWidget, ProgressBar_wdg) == 0x000280, "Member 'UUCWSkipWidget::ProgressBar_wdg' has a wrong offset!");
static_assert(offsetof(UUCWSkipWidget, Progress_wdg) == 0x000288, "Member 'UUCWSkipWidget::Progress_wdg' has a wrong offset!");
static_assert(offsetof(UUCWSkipWidget, SkipHoldTime) == 0x000290, "Member 'UUCWSkipWidget::SkipHoldTime' has a wrong offset!");
static_assert(offsetof(UUCWSkipWidget, bActivateOnShow) == 0x000294, "Member 'UUCWSkipWidget::bActivateOnShow' has a wrong offset!");
static_assert(offsetof(UUCWSkipWidget, bSkipOnAnyKey) == 0x000295, "Member 'UUCWSkipWidget::bSkipOnAnyKey' has a wrong offset!");
static_assert(offsetof(UUCWSkipWidget, bSetVisibilityOnShow) == 0x000296, "Member 'UUCWSkipWidget::bSetVisibilityOnShow' has a wrong offset!");
static_assert(offsetof(UUCWSkipWidget, bSetVisibilityOnHide) == 0x000297, "Member 'UUCWSkipWidget::bSetVisibilityOnHide' has a wrong offset!");
static_assert(offsetof(UUCWSkipWidget, SkipKeys) == 0x000298, "Member 'UUCWSkipWidget::SkipKeys' has a wrong offset!");
static_assert(offsetof(UUCWSkipWidget, K2_OnSkipStart) == 0x0002A8, "Member 'UUCWSkipWidget::K2_OnSkipStart' has a wrong offset!");
static_assert(offsetof(UUCWSkipWidget, K2_OnSkipTick) == 0x0002C8, "Member 'UUCWSkipWidget::K2_OnSkipTick' has a wrong offset!");
static_assert(offsetof(UUCWSkipWidget, K2_OnSkipCancel) == 0x0002E8, "Member 'UUCWSkipWidget::K2_OnSkipCancel' has a wrong offset!");
static_assert(offsetof(UUCWSkipWidget, K2_OnSkip) == 0x000308, "Member 'UUCWSkipWidget::K2_OnSkip' has a wrong offset!");

// Class UCW.AskDialogWidget
// 0x00F8 (0x0398 - 0x02A0)
class UAskDialogWidget : public UBUserWidget
{
public:
	EAskDialogType                                Type;                                              // 0x02A0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKey>                           AcceptKeys;                                        // 0x02A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FKey>                           DeclineKeys;                                       // 0x02B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FKey>                           CancelKeys;                                        // 0x02C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UBButton*                               Accept_but;                                        // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBButton*                               Decline_but;                                       // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBButton*                               Cancel_but;                                        // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          AcceptSoundEvent;                                  // 0x02F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          DeclineSoundEvent;                                 // 0x02F8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          CancelSoundEvent;                                  // 0x0300(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          WrongKeySoundEvent;                                // 0x0308(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       FadeOut_anim;                                      // 0x0310(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnAccept;                                          // 0x0318(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_328[0x10];                                     // 0x0328(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnDecline;                                         // 0x0338(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_348[0x10];                                     // 0x0348(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnCancel;                                          // 0x0358(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_368[0x10];                                     // 0x0368(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnFadedOut;                                        // 0x0378(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_388[0x10];                                     // 0x0388(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Accept();
	void Cancel();
	void Decline();
	void FadedOut();
	bool OnFadeOut();
	void OnShow();
	void Show();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AskDialogWidget">();
	}
	static class UAskDialogWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAskDialogWidget>();
	}
};
static_assert(alignof(UAskDialogWidget) == 0x000008, "Wrong alignment on UAskDialogWidget");
static_assert(sizeof(UAskDialogWidget) == 0x000398, "Wrong size on UAskDialogWidget");
static_assert(offsetof(UAskDialogWidget, Type) == 0x0002A0, "Member 'UAskDialogWidget::Type' has a wrong offset!");
static_assert(offsetof(UAskDialogWidget, AcceptKeys) == 0x0002A8, "Member 'UAskDialogWidget::AcceptKeys' has a wrong offset!");
static_assert(offsetof(UAskDialogWidget, DeclineKeys) == 0x0002B8, "Member 'UAskDialogWidget::DeclineKeys' has a wrong offset!");
static_assert(offsetof(UAskDialogWidget, CancelKeys) == 0x0002C8, "Member 'UAskDialogWidget::CancelKeys' has a wrong offset!");
static_assert(offsetof(UAskDialogWidget, Accept_but) == 0x0002D8, "Member 'UAskDialogWidget::Accept_but' has a wrong offset!");
static_assert(offsetof(UAskDialogWidget, Decline_but) == 0x0002E0, "Member 'UAskDialogWidget::Decline_but' has a wrong offset!");
static_assert(offsetof(UAskDialogWidget, Cancel_but) == 0x0002E8, "Member 'UAskDialogWidget::Cancel_but' has a wrong offset!");
static_assert(offsetof(UAskDialogWidget, AcceptSoundEvent) == 0x0002F0, "Member 'UAskDialogWidget::AcceptSoundEvent' has a wrong offset!");
static_assert(offsetof(UAskDialogWidget, DeclineSoundEvent) == 0x0002F8, "Member 'UAskDialogWidget::DeclineSoundEvent' has a wrong offset!");
static_assert(offsetof(UAskDialogWidget, CancelSoundEvent) == 0x000300, "Member 'UAskDialogWidget::CancelSoundEvent' has a wrong offset!");
static_assert(offsetof(UAskDialogWidget, WrongKeySoundEvent) == 0x000308, "Member 'UAskDialogWidget::WrongKeySoundEvent' has a wrong offset!");
static_assert(offsetof(UAskDialogWidget, FadeOut_anim) == 0x000310, "Member 'UAskDialogWidget::FadeOut_anim' has a wrong offset!");
static_assert(offsetof(UAskDialogWidget, OnAccept) == 0x000318, "Member 'UAskDialogWidget::OnAccept' has a wrong offset!");
static_assert(offsetof(UAskDialogWidget, OnDecline) == 0x000338, "Member 'UAskDialogWidget::OnDecline' has a wrong offset!");
static_assert(offsetof(UAskDialogWidget, OnCancel) == 0x000358, "Member 'UAskDialogWidget::OnCancel' has a wrong offset!");
static_assert(offsetof(UAskDialogWidget, OnFadedOut) == 0x000378, "Member 'UAskDialogWidget::OnFadedOut' has a wrong offset!");

// Class UCW.AspectAwareSpacer
// 0x0010 (0x0180 - 0x0170)
class UAspectAwareSpacer final : public USpacer
{
public:
	uint8                                         Pad_170[0xC];                                      // 0x0170(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	EAspectAwareFrameType                         FillInType;                                        // 0x017C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17D[0x3];                                      // 0x017D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AspectAwareSpacer">();
	}
	static class UAspectAwareSpacer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAspectAwareSpacer>();
	}
};
static_assert(alignof(UAspectAwareSpacer) == 0x000008, "Wrong alignment on UAspectAwareSpacer");
static_assert(sizeof(UAspectAwareSpacer) == 0x000180, "Wrong size on UAspectAwareSpacer");
static_assert(offsetof(UAspectAwareSpacer, FillInType) == 0x00017C, "Member 'UAspectAwareSpacer::FillInType' has a wrong offset!");

// Class UCW.UCWWidgetGroup
// 0x0070 (0x0098 - 0x0028)
class UUCWWidgetGroup final : public UCommonWidgetGroupBase
{
public:
	bool                                          bSelectionRequired;                                // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSelectedButtonBaseChanged;                       // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSelectionCleared;                                // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x30];                                      // 0x0068(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DeselectAll();
	void SelectButtonAtIndex(int32 ButtonIndex, const bool bAllowSound);
	void SelectNextButton(bool bAllowWrap);
	void SelectPreviousButton(bool bAllowWrap);
	void SetSelectionRequired(bool bRequireSelection);

	int32 FindButtonIndex(const class UUCWButtonBase* ButtonToFind) const;
	class UUCWButtonBase* GetButtonBaseAtIndex(int32 Index_0) const;
	int32 GetButtonCount() const;
	int32 GetHoveredButtonIndex() const;
	class UUCWButtonBase* GetSelectedButtonBase() const;
	int32 GetSelectedButtonIndex() const;
	bool HasAnyButtons() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCWWidgetGroup">();
	}
	static class UUCWWidgetGroup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCWWidgetGroup>();
	}
};
static_assert(alignof(UUCWWidgetGroup) == 0x000008, "Wrong alignment on UUCWWidgetGroup");
static_assert(sizeof(UUCWWidgetGroup) == 0x000098, "Wrong size on UUCWWidgetGroup");
static_assert(offsetof(UUCWWidgetGroup, bSelectionRequired) == 0x000028, "Member 'UUCWWidgetGroup::bSelectionRequired' has a wrong offset!");
static_assert(offsetof(UUCWWidgetGroup, OnSelectedButtonBaseChanged) == 0x000030, "Member 'UUCWWidgetGroup::OnSelectedButtonBaseChanged' has a wrong offset!");
static_assert(offsetof(UUCWWidgetGroup, OnSelectionCleared) == 0x000058, "Member 'UUCWWidgetGroup::OnSelectionCleared' has a wrong offset!");

// Class UCW.BCheckBox
// 0x0100 (0x0D80 - 0x0C80)
class UBCheckBox final : public UCheckBox
{
public:
	uint8                                         Pad_C80[0x8];                                      // 0x0C80(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnFocused;                                         // 0x0C88(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_C98[0x10];                                     // 0x0C98(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnUnfocused;                                       // 0x0CA8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_CB8[0x10];                                     // 0x0CB8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnHovered;                                         // 0x0CC8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD8[0x10];                                     // 0x0CD8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnUnhovered;                                       // 0x0CE8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_CF8[0x10];                                     // 0x0CF8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnKeyDown;                                         // 0x0D08(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnKeyUp;                                           // 0x0D18(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          _HoverOnFocus;                                     // 0x0D28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseInternalLabel;                                  // 0x0D29(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2A[0x2];                                      // 0x0D2A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           UncheckedLabelColor;                               // 0x0D2C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CheckedLabelColor;                                 // 0x0D3C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           UncheckedHoverLabelColor;                          // 0x0D4C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CheckedHoverLabelColor;                            // 0x0D5C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D6C[0x4];                                      // 0x0D6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                Label;                                             // 0x0D70(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             InternalLabel;                                     // 0x0D78(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetInternalLabel(class UTextBlock* InContent);
	void SetLabel(class UWidget* InContent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BCheckBox">();
	}
	static class UBCheckBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBCheckBox>();
	}
};
static_assert(alignof(UBCheckBox) == 0x000010, "Wrong alignment on UBCheckBox");
static_assert(sizeof(UBCheckBox) == 0x000D80, "Wrong size on UBCheckBox");
static_assert(offsetof(UBCheckBox, OnFocused) == 0x000C88, "Member 'UBCheckBox::OnFocused' has a wrong offset!");
static_assert(offsetof(UBCheckBox, OnUnfocused) == 0x000CA8, "Member 'UBCheckBox::OnUnfocused' has a wrong offset!");
static_assert(offsetof(UBCheckBox, OnHovered) == 0x000CC8, "Member 'UBCheckBox::OnHovered' has a wrong offset!");
static_assert(offsetof(UBCheckBox, OnUnhovered) == 0x000CE8, "Member 'UBCheckBox::OnUnhovered' has a wrong offset!");
static_assert(offsetof(UBCheckBox, OnKeyDown) == 0x000D08, "Member 'UBCheckBox::OnKeyDown' has a wrong offset!");
static_assert(offsetof(UBCheckBox, OnKeyUp) == 0x000D18, "Member 'UBCheckBox::OnKeyUp' has a wrong offset!");
static_assert(offsetof(UBCheckBox, _HoverOnFocus) == 0x000D28, "Member 'UBCheckBox::_HoverOnFocus' has a wrong offset!");
static_assert(offsetof(UBCheckBox, UseInternalLabel) == 0x000D29, "Member 'UBCheckBox::UseInternalLabel' has a wrong offset!");
static_assert(offsetof(UBCheckBox, UncheckedLabelColor) == 0x000D2C, "Member 'UBCheckBox::UncheckedLabelColor' has a wrong offset!");
static_assert(offsetof(UBCheckBox, CheckedLabelColor) == 0x000D3C, "Member 'UBCheckBox::CheckedLabelColor' has a wrong offset!");
static_assert(offsetof(UBCheckBox, UncheckedHoverLabelColor) == 0x000D4C, "Member 'UBCheckBox::UncheckedHoverLabelColor' has a wrong offset!");
static_assert(offsetof(UBCheckBox, CheckedHoverLabelColor) == 0x000D5C, "Member 'UBCheckBox::CheckedHoverLabelColor' has a wrong offset!");
static_assert(offsetof(UBCheckBox, Label) == 0x000D70, "Member 'UBCheckBox::Label' has a wrong offset!");
static_assert(offsetof(UBCheckBox, InternalLabel) == 0x000D78, "Member 'UBCheckBox::InternalLabel' has a wrong offset!");

// Class UCW.UCWTabPanel
// 0x0018 (0x0190 - 0x0178)
class UUCWTabPanel final : public UCanvasPanel
{
public:
	class FText                                   TabText;                                           // 0x0178(0x0018)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCWTabPanel">();
	}
	static class UUCWTabPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCWTabPanel>();
	}
};
static_assert(alignof(UUCWTabPanel) == 0x000008, "Wrong alignment on UUCWTabPanel");
static_assert(sizeof(UUCWTabPanel) == 0x000190, "Wrong size on UUCWTabPanel");
static_assert(offsetof(UUCWTabPanel, TabText) == 0x000178, "Member 'UUCWTabPanel::TabText' has a wrong offset!");

// Class UCW.UCWStyleBase
// 0x0000 (0x0028 - 0x0028)
class UUCWStyleBase : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCWStyleBase">();
	}
	static class UUCWStyleBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCWStyleBase>();
	}
};
static_assert(alignof(UUCWStyleBase) == 0x000008, "Wrong alignment on UUCWStyleBase");
static_assert(sizeof(UUCWStyleBase) == 0x000028, "Wrong size on UUCWStyleBase");

// Class UCW.UCWButtonBase
// 0x0038 (0x02B0 - 0x0278)
class UUCWButtonBase : public UUserWidget
{
public:
	uint8                                         Blocked : 1;                                       // 0x0278(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bSelectable : 1;                                   // 0x0278(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bShouldSelectUponReceivingFocus : 1;               // 0x0278(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bInteractableWhenSelected : 1;                     // 0x0278(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bToggleable : 1;                                   // 0x0278(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSelectedChanged;                                 // 0x0280(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_290[0x20];                                     // 0x0290(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnDeselected();
	void BP_OnDisabled();
	void BP_OnEnabled();
	void BP_OnLockedChanged(bool bIsLocked);
	void BP_OnSelected();
	void ClearSelection();
	void SetIsFocusable(bool bInIsFocusable);
	void SetIsInteractableWhenSelected(bool bInInteractableWhenSelected);
	void SetIsInteractionEnabled(bool bInIsInteractionEnabled);
	void SetIsLocked(bool bInIsLocked);
	void SetIsSelectable(bool bInIsSelectable);
	void SetIsSelected(bool InSelected, bool bGiveClickFeedback);
	void SetIsToggleable(bool bInIsToggleable);
	void SetSelectedInternal(bool bInSelected, bool bAllowSound, bool bBroadcast);

	bool GetLocked() const;
	bool GetSelected() const;
	bool IsFocusable() const;
	bool IsInteractionEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCWButtonBase">();
	}
	static class UUCWButtonBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCWButtonBase>();
	}
};
static_assert(alignof(UUCWButtonBase) == 0x000008, "Wrong alignment on UUCWButtonBase");
static_assert(sizeof(UUCWButtonBase) == 0x0002B0, "Wrong size on UUCWButtonBase");
static_assert(offsetof(UUCWButtonBase, OnSelectedChanged) == 0x000280, "Member 'UUCWButtonBase::OnSelectedChanged' has a wrong offset!");

// Class UCW.UCWButtonStyle
// 0x0588 (0x05B0 - 0x0028)
#pragma pack(push, 0x1)
class alignas(0x10) UUCWButtonStyle : public UUCWStyleBase
{
public:
	bool                                          bSingleMaterial;                                   // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            SingleMaterialBrush;                               // 0x0030(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            NormalBrush;                                       // 0x0100(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HoveredBrush;                                      // 0x01D0(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            FocusedBrush;                                      // 0x02A0(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            PressedBrush;                                      // 0x0370(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            DisabledBrush;                                     // 0x0440(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateColor                            NormalForeground;                                  // 0x0510(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateColor                            HoveredForeground;                                 // 0x0524(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateColor                            FocusedForeground;                                 // 0x0538(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateColor                            PressedForeground;                                 // 0x054C(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateColor                            DisabledForeground;                                // 0x0560(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FMargin                                NormalPadding;                                     // 0x0574(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                PressedPadding;                                    // 0x0584(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_594[0x4];                                      // 0x0594(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          HoveredAkEvent;                                    // 0x0598(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          PressedAkEvent;                                    // 0x05A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCWButtonStyle">();
	}
	static class UUCWButtonStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCWButtonStyle>();
	}
};
#pragma pack(pop)
static_assert(alignof(UUCWButtonStyle) == 0x000010, "Wrong alignment on UUCWButtonStyle");
static_assert(sizeof(UUCWButtonStyle) == 0x0005B0, "Wrong size on UUCWButtonStyle");
static_assert(offsetof(UUCWButtonStyle, bSingleMaterial) == 0x000028, "Member 'UUCWButtonStyle::bSingleMaterial' has a wrong offset!");
static_assert(offsetof(UUCWButtonStyle, SingleMaterialBrush) == 0x000030, "Member 'UUCWButtonStyle::SingleMaterialBrush' has a wrong offset!");
static_assert(offsetof(UUCWButtonStyle, NormalBrush) == 0x000100, "Member 'UUCWButtonStyle::NormalBrush' has a wrong offset!");
static_assert(offsetof(UUCWButtonStyle, HoveredBrush) == 0x0001D0, "Member 'UUCWButtonStyle::HoveredBrush' has a wrong offset!");
static_assert(offsetof(UUCWButtonStyle, FocusedBrush) == 0x0002A0, "Member 'UUCWButtonStyle::FocusedBrush' has a wrong offset!");
static_assert(offsetof(UUCWButtonStyle, PressedBrush) == 0x000370, "Member 'UUCWButtonStyle::PressedBrush' has a wrong offset!");
static_assert(offsetof(UUCWButtonStyle, DisabledBrush) == 0x000440, "Member 'UUCWButtonStyle::DisabledBrush' has a wrong offset!");
static_assert(offsetof(UUCWButtonStyle, NormalForeground) == 0x000510, "Member 'UUCWButtonStyle::NormalForeground' has a wrong offset!");
static_assert(offsetof(UUCWButtonStyle, HoveredForeground) == 0x000524, "Member 'UUCWButtonStyle::HoveredForeground' has a wrong offset!");
static_assert(offsetof(UUCWButtonStyle, FocusedForeground) == 0x000538, "Member 'UUCWButtonStyle::FocusedForeground' has a wrong offset!");
static_assert(offsetof(UUCWButtonStyle, PressedForeground) == 0x00054C, "Member 'UUCWButtonStyle::PressedForeground' has a wrong offset!");
static_assert(offsetof(UUCWButtonStyle, DisabledForeground) == 0x000560, "Member 'UUCWButtonStyle::DisabledForeground' has a wrong offset!");
static_assert(offsetof(UUCWButtonStyle, NormalPadding) == 0x000574, "Member 'UUCWButtonStyle::NormalPadding' has a wrong offset!");
static_assert(offsetof(UUCWButtonStyle, PressedPadding) == 0x000584, "Member 'UUCWButtonStyle::PressedPadding' has a wrong offset!");
static_assert(offsetof(UUCWButtonStyle, HoveredAkEvent) == 0x000598, "Member 'UUCWButtonStyle::HoveredAkEvent' has a wrong offset!");
static_assert(offsetof(UUCWButtonStyle, PressedAkEvent) == 0x0005A0, "Member 'UUCWButtonStyle::PressedAkEvent' has a wrong offset!");

// Class UCW.UCWTextBlock
// 0x0020 (0x0360 - 0x0340)
class UUCWTextBlock final : public UTextBlock
{
public:
	TSubclassOf<class UCommonTextStyle>           Style;                                             // 0x0338(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCommonTextScrollStyle>     ScrollStyle;                                       // 0x0340(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInheritTextColor;                                 // 0x0348(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAutoCollapseWithEmptyText;                        // 0x0349(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_34A[0x2];                                      // 0x034A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MobileFontSizeMultiplier;                          // 0x034C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_350[0x10];                                     // 0x0350(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ResetScrollState();
	void SetStyle(TSubclassOf<class UCommonTextStyle> InStyle);
	void SetTextCase(bool bUseAllCaps);
	void SetWrapTextWidth(int32 InWrapTextAt);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCWTextBlock">();
	}
	static class UUCWTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCWTextBlock>();
	}
};
static_assert(alignof(UUCWTextBlock) == 0x000010, "Wrong alignment on UUCWTextBlock");
static_assert(sizeof(UUCWTextBlock) == 0x000360, "Wrong size on UUCWTextBlock");
static_assert(offsetof(UUCWTextBlock, Style) == 0x000338, "Member 'UUCWTextBlock::Style' has a wrong offset!");
static_assert(offsetof(UUCWTextBlock, ScrollStyle) == 0x000340, "Member 'UUCWTextBlock::ScrollStyle' has a wrong offset!");
static_assert(offsetof(UUCWTextBlock, bInheritTextColor) == 0x000348, "Member 'UUCWTextBlock::bInheritTextColor' has a wrong offset!");
static_assert(offsetof(UUCWTextBlock, bAutoCollapseWithEmptyText) == 0x000349, "Member 'UUCWTextBlock::bAutoCollapseWithEmptyText' has a wrong offset!");
static_assert(offsetof(UUCWTextBlock, MobileFontSizeMultiplier) == 0x00034C, "Member 'UUCWTextBlock::MobileFontSizeMultiplier' has a wrong offset!");

// Class UCW.BButtonSlot
// 0x0028 (0x0060 - 0x0038)
class UBButtonSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x16];                                      // 0x004A(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BButtonSlot">();
	}
	static class UBButtonSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBButtonSlot>();
	}
};
static_assert(alignof(UBButtonSlot) == 0x000008, "Wrong alignment on UBButtonSlot");
static_assert(sizeof(UBButtonSlot) == 0x000060, "Wrong size on UBButtonSlot");
static_assert(offsetof(UBButtonSlot, Padding) == 0x000038, "Member 'UBButtonSlot::Padding' has a wrong offset!");
static_assert(offsetof(UBButtonSlot, HorizontalAlignment) == 0x000048, "Member 'UBButtonSlot::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UBButtonSlot, VerticalAlignment) == 0x000049, "Member 'UBButtonSlot::VerticalAlignment' has a wrong offset!");

// Class UCW.BComboBoxString
// 0x0140 (0x1770 - 0x1630)
class UBComboBoxString final : public UComboBoxString
{
public:
	FMulticastInlineDelegateProperty_             OnFocused;                                         // 0x1628(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1638[0x10];                                    // 0x1638(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnUnfocused;                                       // 0x1648(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1658[0x10];                                    // 0x1658(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnHovered;                                         // 0x1668(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1678[0x10];                                    // 0x1678(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnUnhovered;                                       // 0x1688(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1698[0x10];                                    // 0x1698(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnItemHovered;                                     // 0x16A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_16B8[0x10];                                    // 0x16B8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnKeyDown;                                         // 0x16C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnKeyUp;                                           // 0x16D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FHoverableTextStyle                    TextStyle;                                         // 0x16E8(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ETextJustify                                  Justification;                                     // 0x1730(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1731[0x7];                                     // 0x1731(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSelectionIndexChanged;                           // 0x1738(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1748[0x10];                                    // 0x1748(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          ControllLabelVisibility;                           // 0x1758(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1759[0x7];                                     // 0x1759(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                Label;                                             // 0x1760(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1768[0x8];                                     // 0x1768(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnItemHoveredDelegate__DelegateSignature(const class FString& ItemName, int32 ItemIndex);
	void OnSelectionIndexChangedEvent__DelegateSignature(int32 SelectedItem, ESelectInfo SelectionType);
	void SetLabel(class UWidget* InContent);
	void SetOptions(const TArray<class FText>& Options, int32 Num, bool PreserveSelection);
	void SetSelectedOptionIndex(int32 Index_0);
	void SetStyle(const struct FHoverableTextStyle& InStyle);

	int32 GetSelectedOptionIndex() const;
	bool HasInputCaptured() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BComboBoxString">();
	}
	static class UBComboBoxString* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBComboBoxString>();
	}
};
static_assert(alignof(UBComboBoxString) == 0x000010, "Wrong alignment on UBComboBoxString");
static_assert(sizeof(UBComboBoxString) == 0x001770, "Wrong size on UBComboBoxString");
static_assert(offsetof(UBComboBoxString, OnFocused) == 0x001628, "Member 'UBComboBoxString::OnFocused' has a wrong offset!");
static_assert(offsetof(UBComboBoxString, OnUnfocused) == 0x001648, "Member 'UBComboBoxString::OnUnfocused' has a wrong offset!");
static_assert(offsetof(UBComboBoxString, OnHovered) == 0x001668, "Member 'UBComboBoxString::OnHovered' has a wrong offset!");
static_assert(offsetof(UBComboBoxString, OnUnhovered) == 0x001688, "Member 'UBComboBoxString::OnUnhovered' has a wrong offset!");
static_assert(offsetof(UBComboBoxString, OnItemHovered) == 0x0016A8, "Member 'UBComboBoxString::OnItemHovered' has a wrong offset!");
static_assert(offsetof(UBComboBoxString, OnKeyDown) == 0x0016C8, "Member 'UBComboBoxString::OnKeyDown' has a wrong offset!");
static_assert(offsetof(UBComboBoxString, OnKeyUp) == 0x0016D8, "Member 'UBComboBoxString::OnKeyUp' has a wrong offset!");
static_assert(offsetof(UBComboBoxString, TextStyle) == 0x0016E8, "Member 'UBComboBoxString::TextStyle' has a wrong offset!");
static_assert(offsetof(UBComboBoxString, Justification) == 0x001730, "Member 'UBComboBoxString::Justification' has a wrong offset!");
static_assert(offsetof(UBComboBoxString, OnSelectionIndexChanged) == 0x001738, "Member 'UBComboBoxString::OnSelectionIndexChanged' has a wrong offset!");
static_assert(offsetof(UBComboBoxString, ControllLabelVisibility) == 0x001758, "Member 'UBComboBoxString::ControllLabelVisibility' has a wrong offset!");
static_assert(offsetof(UBComboBoxString, Label) == 0x001760, "Member 'UBComboBoxString::Label' has a wrong offset!");

// Class UCW.BExpandableArea
// 0x0000 (0x0460 - 0x0460)
class UBExpandableArea final : public UExpandableArea
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BExpandableArea">();
	}
	static class UBExpandableArea* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBExpandableArea>();
	}
};
static_assert(alignof(UBExpandableArea) == 0x000010, "Wrong alignment on UBExpandableArea");
static_assert(sizeof(UBExpandableArea) == 0x000460, "Wrong size on UBExpandableArea");

// Class UCW.BInputKeySelector
// 0x08E8 (0x0A50 - 0x0168)
class UBInputKeySelector final : public UContentWidget
{
public:
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBButtonStyle                          WidgetStyle;                                       // 0x0170(0x03C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FHoverablePressableStyle               AkEventsStyle;                                     // 0x0530(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          ResetAkEvent;                                      // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          KeyChangedAkEvent;                                 // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorAndOpacity;                                   // 0x0558(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundColor;                                   // 0x0568(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFocusable;                                       // 0x0578(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoLabel;                                          // 0x0579(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLabelFirst;                                      // 0x057A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_57B[0x1];                                      // 0x057B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                Padding;                                           // 0x057C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateChildSize                        KeyTextSize;                                       // 0x058C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0594(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0595(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_596[0x2];                                      // 0x0596(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x0598(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FTextButtonStyle                       TextStyle;                                         // 0x05B0(0x0340)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ETextJustify                                  Justification;                                     // 0x08F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8F1[0x3];                                      // 0x08F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinDesiredWidth;                                   // 0x08F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoWrapText;                                      // 0x08F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8F9[0x3];                                      // 0x08F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WrapTextAt;                                        // 0x08FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextWrappingPolicy                           WrappingPolicy;                                    // 0x0900(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_901[0x3];                                      // 0x0901(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                Margin;                                            // 0x0904(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_914[0x4];                                      // 0x0914(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   KeySelectionText;                                  // 0x0918(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   NoKeySpecifiedText;                                // 0x0930(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FInputChord                            SelectedKey;                                       // 0x0948(0x0020)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowGamepadKeys;                                 // 0x0968(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowModifierKeys;                                // 0x0969(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGamepadKeysOnly;                                  // 0x096A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnalogOnly;                                       // 0x096B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_96C[0x4];                                      // 0x096C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKey>                           EscapeKeys;                                        // 0x0970(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnHovered;                                         // 0x0980(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_990[0x10];                                     // 0x0990(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnUnhovered;                                       // 0x09A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_9B0[0x10];                                     // 0x09B0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnFocused;                                         // 0x09C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D0[0x10];                                     // 0x09D0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnUnfocused;                                       // 0x09E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_9F0[0x10];                                     // 0x09F0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnKeySelected;                                     // 0x0A00(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_A10[0x10];                                     // 0x0A10(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnIsSelectingKeyChanged;                           // 0x0A20(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_A30[0x20];                                     // 0x0A30(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnIsSelectingKeyChangedEvent__DelegateSignature();
	void OnKeySelectedEvent__DelegateSignature(const struct FInputChord& SelectedKey_0);
	void SetColorAndOpacity(const struct FLinearColor& InColor);
	void SetLabelText(const class FText& InText);
	void SetSelectedKey(const struct FInputChord& InSelectedKey);

	bool GetIsSelectingKey() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BInputKeySelector">();
	}
	static class UBInputKeySelector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBInputKeySelector>();
	}
};
static_assert(alignof(UBInputKeySelector) == 0x000010, "Wrong alignment on UBInputKeySelector");
static_assert(sizeof(UBInputKeySelector) == 0x000A50, "Wrong size on UBInputKeySelector");
static_assert(offsetof(UBInputKeySelector, WidgetStyle) == 0x000170, "Member 'UBInputKeySelector::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, AkEventsStyle) == 0x000530, "Member 'UBInputKeySelector::AkEventsStyle' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, ResetAkEvent) == 0x000548, "Member 'UBInputKeySelector::ResetAkEvent' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, KeyChangedAkEvent) == 0x000550, "Member 'UBInputKeySelector::KeyChangedAkEvent' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, ColorAndOpacity) == 0x000558, "Member 'UBInputKeySelector::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, BackgroundColor) == 0x000568, "Member 'UBInputKeySelector::BackgroundColor' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, IsFocusable) == 0x000578, "Member 'UBInputKeySelector::IsFocusable' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, bNoLabel) == 0x000579, "Member 'UBInputKeySelector::bNoLabel' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, IsLabelFirst) == 0x00057A, "Member 'UBInputKeySelector::IsLabelFirst' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, Padding) == 0x00057C, "Member 'UBInputKeySelector::Padding' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, KeyTextSize) == 0x00058C, "Member 'UBInputKeySelector::KeyTextSize' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, HorizontalAlignment) == 0x000594, "Member 'UBInputKeySelector::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, VerticalAlignment) == 0x000595, "Member 'UBInputKeySelector::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, Text) == 0x000598, "Member 'UBInputKeySelector::Text' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, TextStyle) == 0x0005B0, "Member 'UBInputKeySelector::TextStyle' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, Justification) == 0x0008F0, "Member 'UBInputKeySelector::Justification' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, MinDesiredWidth) == 0x0008F4, "Member 'UBInputKeySelector::MinDesiredWidth' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, AutoWrapText) == 0x0008F8, "Member 'UBInputKeySelector::AutoWrapText' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, WrapTextAt) == 0x0008FC, "Member 'UBInputKeySelector::WrapTextAt' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, WrappingPolicy) == 0x000900, "Member 'UBInputKeySelector::WrappingPolicy' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, Margin) == 0x000904, "Member 'UBInputKeySelector::Margin' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, KeySelectionText) == 0x000918, "Member 'UBInputKeySelector::KeySelectionText' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, NoKeySpecifiedText) == 0x000930, "Member 'UBInputKeySelector::NoKeySpecifiedText' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, SelectedKey) == 0x000948, "Member 'UBInputKeySelector::SelectedKey' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, bAllowGamepadKeys) == 0x000968, "Member 'UBInputKeySelector::bAllowGamepadKeys' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, bAllowModifierKeys) == 0x000969, "Member 'UBInputKeySelector::bAllowModifierKeys' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, bGamepadKeysOnly) == 0x00096A, "Member 'UBInputKeySelector::bGamepadKeysOnly' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, bAnalogOnly) == 0x00096B, "Member 'UBInputKeySelector::bAnalogOnly' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, EscapeKeys) == 0x000970, "Member 'UBInputKeySelector::EscapeKeys' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, OnHovered) == 0x000980, "Member 'UBInputKeySelector::OnHovered' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, OnUnhovered) == 0x0009A0, "Member 'UBInputKeySelector::OnUnhovered' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, OnFocused) == 0x0009C0, "Member 'UBInputKeySelector::OnFocused' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, OnUnfocused) == 0x0009E0, "Member 'UBInputKeySelector::OnUnfocused' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, OnKeySelected) == 0x000A00, "Member 'UBInputKeySelector::OnKeySelected' has a wrong offset!");
static_assert(offsetof(UBInputKeySelector, OnIsSelectingKeyChanged) == 0x000A20, "Member 'UBInputKeySelector::OnIsSelectingKeyChanged' has a wrong offset!");

// Class UCW.BInputKeySelectorSlot
// 0x0028 (0x0060 - 0x0038)
class UBInputKeySelectorSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x16];                                      // 0x004A(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BInputKeySelectorSlot">();
	}
	static class UBInputKeySelectorSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBInputKeySelectorSlot>();
	}
};
static_assert(alignof(UBInputKeySelectorSlot) == 0x000008, "Wrong alignment on UBInputKeySelectorSlot");
static_assert(sizeof(UBInputKeySelectorSlot) == 0x000060, "Wrong size on UBInputKeySelectorSlot");
static_assert(offsetof(UBInputKeySelectorSlot, Padding) == 0x000038, "Member 'UBInputKeySelectorSlot::Padding' has a wrong offset!");
static_assert(offsetof(UBInputKeySelectorSlot, HorizontalAlignment) == 0x000048, "Member 'UBInputKeySelectorSlot::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UBInputKeySelectorSlot, VerticalAlignment) == 0x000049, "Member 'UBInputKeySelectorSlot::VerticalAlignment' has a wrong offset!");

// Class UCW.BSlider
// 0x0150 (0x0850 - 0x0700)
class UBSlider final : public USlider
{
public:
	FMulticastInlineDelegateProperty_             OnFocused;                                         // 0x0700(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_710[0x10];                                     // 0x0710(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnUnfocused;                                       // 0x0720(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_730[0x10];                                     // 0x0730(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnHovered;                                         // 0x0740(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_750[0x10];                                     // 0x0750(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnUnhovered;                                       // 0x0760(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_770[0x10];                                     // 0x0770(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnKeyDown;                                         // 0x0780(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnKeyUp;                                           // 0x0790(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A0[0x10];                                     // 0x07A0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          HoverOnFocus;                                      // 0x07B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7B1[0x3];                                      // 0x07B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           HoverSliderBarColor;                               // 0x07B4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           HoverSliderHandleColor;                            // 0x07C4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ActiveSliderBarColor;                              // 0x07D4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ActiveSliderHandleColor;                           // 0x07E4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7F4[0x4];                                      // 0x07F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          HoveredAkEvent;                                    // 0x07F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          ChangedAkEvent;                                    // 0x0800(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateSound                            HoveredSlateSound;                                 // 0x0808(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateSound                            PressedSlateSound;                                 // 0x0820(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ControllLabelVisibility;                           // 0x0838(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_839[0x7];                                      // 0x0839(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                Label;                                             // 0x0840(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_848[0x8];                                      // 0x0848(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetLabel(class UWidget* InContent);

	bool HasInputCaptured() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BSlider">();
	}
	static class UBSlider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBSlider>();
	}
};
static_assert(alignof(UBSlider) == 0x000010, "Wrong alignment on UBSlider");
static_assert(sizeof(UBSlider) == 0x000850, "Wrong size on UBSlider");
static_assert(offsetof(UBSlider, OnFocused) == 0x000700, "Member 'UBSlider::OnFocused' has a wrong offset!");
static_assert(offsetof(UBSlider, OnUnfocused) == 0x000720, "Member 'UBSlider::OnUnfocused' has a wrong offset!");
static_assert(offsetof(UBSlider, OnHovered) == 0x000740, "Member 'UBSlider::OnHovered' has a wrong offset!");
static_assert(offsetof(UBSlider, OnUnhovered) == 0x000760, "Member 'UBSlider::OnUnhovered' has a wrong offset!");
static_assert(offsetof(UBSlider, OnKeyDown) == 0x000780, "Member 'UBSlider::OnKeyDown' has a wrong offset!");
static_assert(offsetof(UBSlider, OnKeyUp) == 0x000790, "Member 'UBSlider::OnKeyUp' has a wrong offset!");
static_assert(offsetof(UBSlider, HoverOnFocus) == 0x0007B0, "Member 'UBSlider::HoverOnFocus' has a wrong offset!");
static_assert(offsetof(UBSlider, HoverSliderBarColor) == 0x0007B4, "Member 'UBSlider::HoverSliderBarColor' has a wrong offset!");
static_assert(offsetof(UBSlider, HoverSliderHandleColor) == 0x0007C4, "Member 'UBSlider::HoverSliderHandleColor' has a wrong offset!");
static_assert(offsetof(UBSlider, ActiveSliderBarColor) == 0x0007D4, "Member 'UBSlider::ActiveSliderBarColor' has a wrong offset!");
static_assert(offsetof(UBSlider, ActiveSliderHandleColor) == 0x0007E4, "Member 'UBSlider::ActiveSliderHandleColor' has a wrong offset!");
static_assert(offsetof(UBSlider, HoveredAkEvent) == 0x0007F8, "Member 'UBSlider::HoveredAkEvent' has a wrong offset!");
static_assert(offsetof(UBSlider, ChangedAkEvent) == 0x000800, "Member 'UBSlider::ChangedAkEvent' has a wrong offset!");
static_assert(offsetof(UBSlider, HoveredSlateSound) == 0x000808, "Member 'UBSlider::HoveredSlateSound' has a wrong offset!");
static_assert(offsetof(UBSlider, PressedSlateSound) == 0x000820, "Member 'UBSlider::PressedSlateSound' has a wrong offset!");
static_assert(offsetof(UBSlider, ControllLabelVisibility) == 0x000838, "Member 'UBSlider::ControllLabelVisibility' has a wrong offset!");
static_assert(offsetof(UBSlider, Label) == 0x000840, "Member 'UBSlider::Label' has a wrong offset!");

// Class UCW.UCWSpinBoxStyle
// 0x0920 (0x0ED0 - 0x05B0)
class UUCWSpinBoxStyle final : public UUCWButtonStyle
{
public:
	bool                                          bInheritTextColor;                                 // 0x05A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A9[0x7];                                      // 0x05A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCommonTextStyle>           NormalTextStyle;                                   // 0x05B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B8[0x8];                                      // 0x05B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FB3StateBrushStyle                     InternalBorderStyle;                               // 0x05C0(0x0270)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FThreeStateImageStyle                  LeftImageStyle;                                    // 0x0830(0x0280)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FThreeStateImageStyle                  RightImageStyle;                                   // 0x0AB0(0x0280)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FB2StateBrushStyle                     IndicatorStyle;                                    // 0x0D30(0x01A0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCWSpinBoxStyle">();
	}
	static class UUCWSpinBoxStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCWSpinBoxStyle>();
	}
};
static_assert(alignof(UUCWSpinBoxStyle) == 0x000010, "Wrong alignment on UUCWSpinBoxStyle");
static_assert(sizeof(UUCWSpinBoxStyle) == 0x000ED0, "Wrong size on UUCWSpinBoxStyle");
static_assert(offsetof(UUCWSpinBoxStyle, bInheritTextColor) == 0x0005A8, "Member 'UUCWSpinBoxStyle::bInheritTextColor' has a wrong offset!");
static_assert(offsetof(UUCWSpinBoxStyle, NormalTextStyle) == 0x0005B0, "Member 'UUCWSpinBoxStyle::NormalTextStyle' has a wrong offset!");
static_assert(offsetof(UUCWSpinBoxStyle, InternalBorderStyle) == 0x0005C0, "Member 'UUCWSpinBoxStyle::InternalBorderStyle' has a wrong offset!");
static_assert(offsetof(UUCWSpinBoxStyle, LeftImageStyle) == 0x000830, "Member 'UUCWSpinBoxStyle::LeftImageStyle' has a wrong offset!");
static_assert(offsetof(UUCWSpinBoxStyle, RightImageStyle) == 0x000AB0, "Member 'UUCWSpinBoxStyle::RightImageStyle' has a wrong offset!");
static_assert(offsetof(UUCWSpinBoxStyle, IndicatorStyle) == 0x000D30, "Member 'UUCWSpinBoxStyle::IndicatorStyle' has a wrong offset!");

// Class UCW.BSpinBox
// 0x2200 (0x2350 - 0x0150)
class UBSpinBox final : public UWidget
{
public:
	TSubclassOf<class UCommonTextScrollStyle>     ScrollStyle;                                       // 0x0150(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUCWSpinBoxStyle>           Style;                                             // 0x0158(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ContentColorAndOpacity;                            // 0x0160(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ContentColorAndOpacityDelegate;                    // 0x0170(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                Padding;                                           // 0x0180(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0190(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0191(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            IndicatorVerticalAlignment;                        // 0x0192(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_193[0x5];                                      // 0x0193(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           DefaultOptions;                                    // 0x0198(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ShowArrowsIn2State;                                // 0x01A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowBottomIndicator;                               // 0x01A9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AA[0x6];                                      // 0x01AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBSpinBoxStyle                         WidgetStyle;                                       // 0x01B0(0x0D00)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTextBlockStyle                        TextStyle;                                         // 0x0EB0(0x0340)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FHoverablePressableStyle               AkEventsStyle;                                     // 0x11F0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMargin                                TextPadding;                                       // 0x1208(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETextJustify                                  Justification;                                     // 0x1218(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EButtonClickMethod                            ClickMethod;                                       // 0x1219(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EButtonTouchMethod                            TouchMethod;                                       // 0x121A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EButtonPressMethod                            PressMethod;                                       // 0x121B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFocusable;                                       // 0x121C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WrapValues;                                        // 0x121D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          SpinOnNavigation;                                  // 0x121E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          SpinOnClick;                                       // 0x121F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ToggleableIn2State;                                // 0x1220(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ControllLabelVisibility;                           // 0x1221(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1222[0x6];                                     // 0x1222(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                Label;                                             // 0x1228(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnHovered;                                         // 0x1230(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1240[0x10];                                    // 0x1240(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnUnhovered;                                       // 0x1250(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1260[0x10];                                    // 0x1260(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnFocused;                                         // 0x1270(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1280[0x10];                                    // 0x1280(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnUnfocused;                                       // 0x1290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A0[0x10];                                    // 0x12A0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnPressed;                                         // 0x12B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnReleased;                                        // 0x12C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnValueChanged;                                    // 0x12D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_12E0[0x10];                                    // 0x12E0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MobileFontSizeMultiplier;                          // 0x12F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12F4[0x14];                                    // 0x12F4(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               SingleMaterialStyleMID;                            // 0x1308(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FBSpinBoxStyle                         NormalStyle;                                       // 0x1310(0x0D00)(Protected, NativeAccessSpecifierProtected)
	struct FTextBlockStyle                        NormalTextStyle;                                   // 0x2010(0x0340)(Protected, NativeAccessSpecifierProtected)

public:
	void OnSpinBoxValueChangedEvent__DelegateSignature(int32 Value);
	void ResetScrollState();
	void SetLabel(class UWidget* InContent);
	void SetOptions(const TArray<class FText>& Options, int32 Num);
	void SetSelectedOption(int32 Option);
	void SetStyle(TSubclassOf<class UUCWSpinBoxStyle> InStyle);
	void SetValue(int32 Value);

	int32 GetSelectedOption() const;
	int32 GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BSpinBox">();
	}
	static class UBSpinBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBSpinBox>();
	}
};
static_assert(alignof(UBSpinBox) == 0x000010, "Wrong alignment on UBSpinBox");
static_assert(sizeof(UBSpinBox) == 0x002350, "Wrong size on UBSpinBox");
static_assert(offsetof(UBSpinBox, ScrollStyle) == 0x000150, "Member 'UBSpinBox::ScrollStyle' has a wrong offset!");
static_assert(offsetof(UBSpinBox, Style) == 0x000158, "Member 'UBSpinBox::Style' has a wrong offset!");
static_assert(offsetof(UBSpinBox, ContentColorAndOpacity) == 0x000160, "Member 'UBSpinBox::ContentColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UBSpinBox, ContentColorAndOpacityDelegate) == 0x000170, "Member 'UBSpinBox::ContentColorAndOpacityDelegate' has a wrong offset!");
static_assert(offsetof(UBSpinBox, Padding) == 0x000180, "Member 'UBSpinBox::Padding' has a wrong offset!");
static_assert(offsetof(UBSpinBox, HorizontalAlignment) == 0x000190, "Member 'UBSpinBox::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UBSpinBox, VerticalAlignment) == 0x000191, "Member 'UBSpinBox::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(UBSpinBox, IndicatorVerticalAlignment) == 0x000192, "Member 'UBSpinBox::IndicatorVerticalAlignment' has a wrong offset!");
static_assert(offsetof(UBSpinBox, DefaultOptions) == 0x000198, "Member 'UBSpinBox::DefaultOptions' has a wrong offset!");
static_assert(offsetof(UBSpinBox, ShowArrowsIn2State) == 0x0001A8, "Member 'UBSpinBox::ShowArrowsIn2State' has a wrong offset!");
static_assert(offsetof(UBSpinBox, ShowBottomIndicator) == 0x0001A9, "Member 'UBSpinBox::ShowBottomIndicator' has a wrong offset!");
static_assert(offsetof(UBSpinBox, WidgetStyle) == 0x0001B0, "Member 'UBSpinBox::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UBSpinBox, TextStyle) == 0x000EB0, "Member 'UBSpinBox::TextStyle' has a wrong offset!");
static_assert(offsetof(UBSpinBox, AkEventsStyle) == 0x0011F0, "Member 'UBSpinBox::AkEventsStyle' has a wrong offset!");
static_assert(offsetof(UBSpinBox, TextPadding) == 0x001208, "Member 'UBSpinBox::TextPadding' has a wrong offset!");
static_assert(offsetof(UBSpinBox, Justification) == 0x001218, "Member 'UBSpinBox::Justification' has a wrong offset!");
static_assert(offsetof(UBSpinBox, ClickMethod) == 0x001219, "Member 'UBSpinBox::ClickMethod' has a wrong offset!");
static_assert(offsetof(UBSpinBox, TouchMethod) == 0x00121A, "Member 'UBSpinBox::TouchMethod' has a wrong offset!");
static_assert(offsetof(UBSpinBox, PressMethod) == 0x00121B, "Member 'UBSpinBox::PressMethod' has a wrong offset!");
static_assert(offsetof(UBSpinBox, IsFocusable) == 0x00121C, "Member 'UBSpinBox::IsFocusable' has a wrong offset!");
static_assert(offsetof(UBSpinBox, WrapValues) == 0x00121D, "Member 'UBSpinBox::WrapValues' has a wrong offset!");
static_assert(offsetof(UBSpinBox, SpinOnNavigation) == 0x00121E, "Member 'UBSpinBox::SpinOnNavigation' has a wrong offset!");
static_assert(offsetof(UBSpinBox, SpinOnClick) == 0x00121F, "Member 'UBSpinBox::SpinOnClick' has a wrong offset!");
static_assert(offsetof(UBSpinBox, ToggleableIn2State) == 0x001220, "Member 'UBSpinBox::ToggleableIn2State' has a wrong offset!");
static_assert(offsetof(UBSpinBox, ControllLabelVisibility) == 0x001221, "Member 'UBSpinBox::ControllLabelVisibility' has a wrong offset!");
static_assert(offsetof(UBSpinBox, Label) == 0x001228, "Member 'UBSpinBox::Label' has a wrong offset!");
static_assert(offsetof(UBSpinBox, OnHovered) == 0x001230, "Member 'UBSpinBox::OnHovered' has a wrong offset!");
static_assert(offsetof(UBSpinBox, OnUnhovered) == 0x001250, "Member 'UBSpinBox::OnUnhovered' has a wrong offset!");
static_assert(offsetof(UBSpinBox, OnFocused) == 0x001270, "Member 'UBSpinBox::OnFocused' has a wrong offset!");
static_assert(offsetof(UBSpinBox, OnUnfocused) == 0x001290, "Member 'UBSpinBox::OnUnfocused' has a wrong offset!");
static_assert(offsetof(UBSpinBox, OnPressed) == 0x0012B0, "Member 'UBSpinBox::OnPressed' has a wrong offset!");
static_assert(offsetof(UBSpinBox, OnReleased) == 0x0012C0, "Member 'UBSpinBox::OnReleased' has a wrong offset!");
static_assert(offsetof(UBSpinBox, OnValueChanged) == 0x0012D0, "Member 'UBSpinBox::OnValueChanged' has a wrong offset!");
static_assert(offsetof(UBSpinBox, MobileFontSizeMultiplier) == 0x0012F0, "Member 'UBSpinBox::MobileFontSizeMultiplier' has a wrong offset!");
static_assert(offsetof(UBSpinBox, SingleMaterialStyleMID) == 0x001308, "Member 'UBSpinBox::SingleMaterialStyleMID' has a wrong offset!");
static_assert(offsetof(UBSpinBox, NormalStyle) == 0x001310, "Member 'UBSpinBox::NormalStyle' has a wrong offset!");
static_assert(offsetof(UBSpinBox, NormalTextStyle) == 0x002010, "Member 'UBSpinBox::NormalTextStyle' has a wrong offset!");

// Class UCW.DeviceAwareInterface
// 0x0000 (0x0028 - 0x0028)
class IDeviceAwareInterface final : public IInterface
{
public:
	void OnInputDeviceChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DeviceAwareInterface">();
	}
	static class IDeviceAwareInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IDeviceAwareInterface>();
	}
};
static_assert(alignof(IDeviceAwareInterface) == 0x000008, "Wrong alignment on IDeviceAwareInterface");
static_assert(sizeof(IDeviceAwareInterface) == 0x000028, "Wrong size on IDeviceAwareInterface");

// Class UCW.BVolumeControl
// 0x0AA0 (0x0BF0 - 0x0150)
class UBVolumeControl final : public UWidget
{
public:
	struct FMargin                                Padding;                                           // 0x0150(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                SpeakerIconPadding;                                // 0x0160(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorAndOpacity;                                   // 0x0170(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ColorAndOpacityDelegate;                           // 0x0180(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBVolumeControlStyle                   WidgetStyle;                                       // 0x0190(0x0960)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          MouseUsesStep;                                     // 0x0AF0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AF1[0x3];                                      // 0x0AF1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StepSize;                                          // 0x0AF4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0AF8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             VolumeDelegate;                                    // 0x0AFC(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Muted;                                             // 0x0B0C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0D[0x3];                                      // 0x0B0D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             MutedDelegate;                                     // 0x0B10(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFocusable;                                       // 0x0B20(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B21[0x7];                                      // 0x0B21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkRtpc*                                RTPCParameter;                                     // 0x0B28(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasCustomMusic;                                   // 0x0B30(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B31[0x7];                                      // 0x0B31(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          HoveredAkEvent;                                    // 0x0B38(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          UnhoveredAkEvent;                                  // 0x0B40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          ChangedAkEvent;                                    // 0x0B48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnHovered;                                         // 0x0B50(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_B60[0x10];                                     // 0x0B60(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnUnhovered;                                       // 0x0B70(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_B80[0x10];                                     // 0x0B80(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnVolumeChanged;                                   // 0x0B90(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMutedChanged;                                    // 0x0BA0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_BB0[0x20];                                     // 0x0BB0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          ControllLabelVisibility;                           // 0x0BD0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_BD1[0x7];                                      // 0x0BD1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                Label;                                             // 0x0BD8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_BE0[0x10];                                     // 0x0BE0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetLabel(class UWidget* InContent);
	void SetMuted(bool InValue);
	void SetVolume(float InVolume);

	float GetVolume() const;
	bool IsMuted() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BVolumeControl">();
	}
	static class UBVolumeControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBVolumeControl>();
	}
};
static_assert(alignof(UBVolumeControl) == 0x000010, "Wrong alignment on UBVolumeControl");
static_assert(sizeof(UBVolumeControl) == 0x000BF0, "Wrong size on UBVolumeControl");
static_assert(offsetof(UBVolumeControl, Padding) == 0x000150, "Member 'UBVolumeControl::Padding' has a wrong offset!");
static_assert(offsetof(UBVolumeControl, SpeakerIconPadding) == 0x000160, "Member 'UBVolumeControl::SpeakerIconPadding' has a wrong offset!");
static_assert(offsetof(UBVolumeControl, ColorAndOpacity) == 0x000170, "Member 'UBVolumeControl::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UBVolumeControl, ColorAndOpacityDelegate) == 0x000180, "Member 'UBVolumeControl::ColorAndOpacityDelegate' has a wrong offset!");
static_assert(offsetof(UBVolumeControl, WidgetStyle) == 0x000190, "Member 'UBVolumeControl::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UBVolumeControl, MouseUsesStep) == 0x000AF0, "Member 'UBVolumeControl::MouseUsesStep' has a wrong offset!");
static_assert(offsetof(UBVolumeControl, StepSize) == 0x000AF4, "Member 'UBVolumeControl::StepSize' has a wrong offset!");
static_assert(offsetof(UBVolumeControl, Volume) == 0x000AF8, "Member 'UBVolumeControl::Volume' has a wrong offset!");
static_assert(offsetof(UBVolumeControl, VolumeDelegate) == 0x000AFC, "Member 'UBVolumeControl::VolumeDelegate' has a wrong offset!");
static_assert(offsetof(UBVolumeControl, Muted) == 0x000B0C, "Member 'UBVolumeControl::Muted' has a wrong offset!");
static_assert(offsetof(UBVolumeControl, MutedDelegate) == 0x000B10, "Member 'UBVolumeControl::MutedDelegate' has a wrong offset!");
static_assert(offsetof(UBVolumeControl, IsFocusable) == 0x000B20, "Member 'UBVolumeControl::IsFocusable' has a wrong offset!");
static_assert(offsetof(UBVolumeControl, RTPCParameter) == 0x000B28, "Member 'UBVolumeControl::RTPCParameter' has a wrong offset!");
static_assert(offsetof(UBVolumeControl, bHasCustomMusic) == 0x000B30, "Member 'UBVolumeControl::bHasCustomMusic' has a wrong offset!");
static_assert(offsetof(UBVolumeControl, HoveredAkEvent) == 0x000B38, "Member 'UBVolumeControl::HoveredAkEvent' has a wrong offset!");
static_assert(offsetof(UBVolumeControl, UnhoveredAkEvent) == 0x000B40, "Member 'UBVolumeControl::UnhoveredAkEvent' has a wrong offset!");
static_assert(offsetof(UBVolumeControl, ChangedAkEvent) == 0x000B48, "Member 'UBVolumeControl::ChangedAkEvent' has a wrong offset!");
static_assert(offsetof(UBVolumeControl, OnHovered) == 0x000B50, "Member 'UBVolumeControl::OnHovered' has a wrong offset!");
static_assert(offsetof(UBVolumeControl, OnUnhovered) == 0x000B70, "Member 'UBVolumeControl::OnUnhovered' has a wrong offset!");
static_assert(offsetof(UBVolumeControl, OnVolumeChanged) == 0x000B90, "Member 'UBVolumeControl::OnVolumeChanged' has a wrong offset!");
static_assert(offsetof(UBVolumeControl, OnMutedChanged) == 0x000BA0, "Member 'UBVolumeControl::OnMutedChanged' has a wrong offset!");
static_assert(offsetof(UBVolumeControl, ControllLabelVisibility) == 0x000BD0, "Member 'UBVolumeControl::ControllLabelVisibility' has a wrong offset!");
static_assert(offsetof(UBVolumeControl, Label) == 0x000BD8, "Member 'UBVolumeControl::Label' has a wrong offset!");

// Class UCW.CreditsConfig
// 0x0040 (0x0070 - 0x0030)
class UCreditsConfig final : public UDataAsset
{
public:
	TArray<struct FCreditsItem>                   Rows;                                              // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              ImageSet;                                          // 0x0040(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CreditsConfig">();
	}
	static class UCreditsConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCreditsConfig>();
	}
};
static_assert(alignof(UCreditsConfig) == 0x000008, "Wrong alignment on UCreditsConfig");
static_assert(sizeof(UCreditsConfig) == 0x000070, "Wrong size on UCreditsConfig");
static_assert(offsetof(UCreditsConfig, Rows) == 0x000030, "Member 'UCreditsConfig::Rows' has a wrong offset!");
static_assert(offsetof(UCreditsConfig, ImageSet) == 0x000040, "Member 'UCreditsConfig::ImageSet' has a wrong offset!");

// Class UCW.CreditsWidget
// 0x0078 (0x02F0 - 0x0278)
class UCreditsWidget : public UUserWidget
{
public:
	class UScrollBox*                             Credits_srb;                                       // 0x0278(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       FadeIn_anim;                                       // 0x0280(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       FadeOut_anim;                                      // 0x0288(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          CreditMusic;                                       // 0x0290(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SkipHoldTime;                                      // 0x0298(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseExternalSkip;                                  // 0x029C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_29D[0x3];                                      // 0x029D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoScrollStartDelay;                              // 0x02A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AutoScrollSpeed;                                   // 0x02A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FadeAfterScrollEndDelay;                           // 0x02A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          AutoStartPlay;                                     // 0x02AC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          AutoFadeOut;                                       // 0x02AD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          AutoDestroy;                                       // 0x02AE(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2AF[0x1];                                      // 0x02AF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeOutTime;                                       // 0x02B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B4[0x3C];                                     // 0x02B4(0x003C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnFadeOutEnd();
	void FadeOut();
	void OnFadedInAnim();
	void OnFadedOutAnim();
	void OnFadeOutStart();
	void OnScrollingFinished();
	void OnScrollingStart();
	void OnShow();
	void OnSkip();
	void OnSkipCancel();
	void OnSkipStart();
	void OnSkipTick(float Progress);
	void PlayScroll();
	void Reset();
	void Show();
	void Skip();

	bool IsFullyScrolled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CreditsWidget">();
	}
	static class UCreditsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCreditsWidget>();
	}
};
static_assert(alignof(UCreditsWidget) == 0x000008, "Wrong alignment on UCreditsWidget");
static_assert(sizeof(UCreditsWidget) == 0x0002F0, "Wrong size on UCreditsWidget");
static_assert(offsetof(UCreditsWidget, Credits_srb) == 0x000278, "Member 'UCreditsWidget::Credits_srb' has a wrong offset!");
static_assert(offsetof(UCreditsWidget, FadeIn_anim) == 0x000280, "Member 'UCreditsWidget::FadeIn_anim' has a wrong offset!");
static_assert(offsetof(UCreditsWidget, FadeOut_anim) == 0x000288, "Member 'UCreditsWidget::FadeOut_anim' has a wrong offset!");
static_assert(offsetof(UCreditsWidget, CreditMusic) == 0x000290, "Member 'UCreditsWidget::CreditMusic' has a wrong offset!");
static_assert(offsetof(UCreditsWidget, SkipHoldTime) == 0x000298, "Member 'UCreditsWidget::SkipHoldTime' has a wrong offset!");
static_assert(offsetof(UCreditsWidget, bUseExternalSkip) == 0x00029C, "Member 'UCreditsWidget::bUseExternalSkip' has a wrong offset!");
static_assert(offsetof(UCreditsWidget, AutoScrollStartDelay) == 0x0002A0, "Member 'UCreditsWidget::AutoScrollStartDelay' has a wrong offset!");
static_assert(offsetof(UCreditsWidget, AutoScrollSpeed) == 0x0002A4, "Member 'UCreditsWidget::AutoScrollSpeed' has a wrong offset!");
static_assert(offsetof(UCreditsWidget, FadeAfterScrollEndDelay) == 0x0002A8, "Member 'UCreditsWidget::FadeAfterScrollEndDelay' has a wrong offset!");
static_assert(offsetof(UCreditsWidget, AutoStartPlay) == 0x0002AC, "Member 'UCreditsWidget::AutoStartPlay' has a wrong offset!");
static_assert(offsetof(UCreditsWidget, AutoFadeOut) == 0x0002AD, "Member 'UCreditsWidget::AutoFadeOut' has a wrong offset!");
static_assert(offsetof(UCreditsWidget, AutoDestroy) == 0x0002AE, "Member 'UCreditsWidget::AutoDestroy' has a wrong offset!");
static_assert(offsetof(UCreditsWidget, FadeOutTime) == 0x0002B0, "Member 'UCreditsWidget::FadeOutTime' has a wrong offset!");

// Class UCW.FancyLabelBox
// 0x03B0 (0x06C0 - 0x0310)
class UFancyLabelBox final : public UBorder
{
public:
	EWidgetState                                  State;                                             // 0x0308(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_309[0x3];                                      // 0x0309(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             StateDelegate;                                     // 0x030C(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFancyLabelStyle                       WidgetStyle;                                       // 0x0320(0x0390)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          InheritColors;                                     // 0x06B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InheritImages;                                     // 0x06B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6B2[0xE];                                      // 0x06B2(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FancyLabelBox">();
	}
	static class UFancyLabelBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFancyLabelBox>();
	}
};
static_assert(alignof(UFancyLabelBox) == 0x000010, "Wrong alignment on UFancyLabelBox");
static_assert(sizeof(UFancyLabelBox) == 0x0006C0, "Wrong size on UFancyLabelBox");
static_assert(offsetof(UFancyLabelBox, State) == 0x000308, "Member 'UFancyLabelBox::State' has a wrong offset!");
static_assert(offsetof(UFancyLabelBox, StateDelegate) == 0x00030C, "Member 'UFancyLabelBox::StateDelegate' has a wrong offset!");
static_assert(offsetof(UFancyLabelBox, WidgetStyle) == 0x000320, "Member 'UFancyLabelBox::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UFancyLabelBox, InheritColors) == 0x0006B0, "Member 'UFancyLabelBox::InheritColors' has a wrong offset!");
static_assert(offsetof(UFancyLabelBox, InheritImages) == 0x0006B1, "Member 'UFancyLabelBox::InheritImages' has a wrong offset!");

// Class UCW.InputActionView
// 0x03D8 (0x0540 - 0x0168)
class UInputActionView final : public UContentWidget
{
public:
	class FName                                   Action;                                            // 0x0168(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                Padding;                                           // 0x0170(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                TextPadding;                                       // 0x0180(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          KeyFirst;                                          // 0x0190(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_191[0x3];                                      // 0x0191(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateChildSize                        KeyTextSize;                                       // 0x0194(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x019C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x019D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19E[0x2];                                      // 0x019E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTextBlockStyle                        TextStyle;                                         // 0x01A0(0x0340)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	ETextJustify                                  Justification;                                     // 0x04E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4E1[0x3];                                      // 0x04E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ColorAndOpacity;                                   // 0x04E4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4F4[0x4C];                                     // 0x04F4(0x004C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputActionView">();
	}
	static class UInputActionView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputActionView>();
	}
};
static_assert(alignof(UInputActionView) == 0x000010, "Wrong alignment on UInputActionView");
static_assert(sizeof(UInputActionView) == 0x000540, "Wrong size on UInputActionView");
static_assert(offsetof(UInputActionView, Action) == 0x000168, "Member 'UInputActionView::Action' has a wrong offset!");
static_assert(offsetof(UInputActionView, Padding) == 0x000170, "Member 'UInputActionView::Padding' has a wrong offset!");
static_assert(offsetof(UInputActionView, TextPadding) == 0x000180, "Member 'UInputActionView::TextPadding' has a wrong offset!");
static_assert(offsetof(UInputActionView, KeyFirst) == 0x000190, "Member 'UInputActionView::KeyFirst' has a wrong offset!");
static_assert(offsetof(UInputActionView, KeyTextSize) == 0x000194, "Member 'UInputActionView::KeyTextSize' has a wrong offset!");
static_assert(offsetof(UInputActionView, HorizontalAlignment) == 0x00019C, "Member 'UInputActionView::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UInputActionView, VerticalAlignment) == 0x00019D, "Member 'UInputActionView::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(UInputActionView, TextStyle) == 0x0001A0, "Member 'UInputActionView::TextStyle' has a wrong offset!");
static_assert(offsetof(UInputActionView, Justification) == 0x0004E0, "Member 'UInputActionView::Justification' has a wrong offset!");
static_assert(offsetof(UInputActionView, ColorAndOpacity) == 0x0004E4, "Member 'UInputActionView::ColorAndOpacity' has a wrong offset!");

// Class UCW.InputActionViewSlot
// 0x0028 (0x0060 - 0x0038)
class UInputActionViewSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x16];                                      // 0x004A(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputActionViewSlot">();
	}
	static class UInputActionViewSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputActionViewSlot>();
	}
};
static_assert(alignof(UInputActionViewSlot) == 0x000008, "Wrong alignment on UInputActionViewSlot");
static_assert(sizeof(UInputActionViewSlot) == 0x000060, "Wrong size on UInputActionViewSlot");
static_assert(offsetof(UInputActionViewSlot, Padding) == 0x000038, "Member 'UInputActionViewSlot::Padding' has a wrong offset!");
static_assert(offsetof(UInputActionViewSlot, HorizontalAlignment) == 0x000048, "Member 'UInputActionViewSlot::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UInputActionViewSlot, VerticalAlignment) == 0x000049, "Member 'UInputActionViewSlot::VerticalAlignment' has a wrong offset!");

// Class UCW.InputKeyActionView
// 0x04A0 (0x05F0 - 0x0150)
class UInputKeyActionView final : public UWidget
{
public:
	struct FKey                                   Key;                                               // 0x0150(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Brush;                                             // 0x0170(0x00D0)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                Padding;                                           // 0x0240(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                TextPadding;                                       // 0x0250(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          ImageFirst;                                        // 0x0260(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_261[0xF];                                      // 0x0261(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTextBlockStyle                        TextStyle;                                         // 0x0270(0x0340)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	ETextJustify                                  Justification;                                     // 0x05B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5B1[0x3];                                      // 0x05B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ColorAndOpacity;                                   // 0x05B4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5C4[0x2C];                                     // 0x05C4(0x002C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputKeyActionView">();
	}
	static class UInputKeyActionView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputKeyActionView>();
	}
};
static_assert(alignof(UInputKeyActionView) == 0x000010, "Wrong alignment on UInputKeyActionView");
static_assert(sizeof(UInputKeyActionView) == 0x0005F0, "Wrong size on UInputKeyActionView");
static_assert(offsetof(UInputKeyActionView, Key) == 0x000150, "Member 'UInputKeyActionView::Key' has a wrong offset!");
static_assert(offsetof(UInputKeyActionView, Brush) == 0x000170, "Member 'UInputKeyActionView::Brush' has a wrong offset!");
static_assert(offsetof(UInputKeyActionView, Padding) == 0x000240, "Member 'UInputKeyActionView::Padding' has a wrong offset!");
static_assert(offsetof(UInputKeyActionView, TextPadding) == 0x000250, "Member 'UInputKeyActionView::TextPadding' has a wrong offset!");
static_assert(offsetof(UInputKeyActionView, ImageFirst) == 0x000260, "Member 'UInputKeyActionView::ImageFirst' has a wrong offset!");
static_assert(offsetof(UInputKeyActionView, TextStyle) == 0x000270, "Member 'UInputKeyActionView::TextStyle' has a wrong offset!");
static_assert(offsetof(UInputKeyActionView, Justification) == 0x0005B0, "Member 'UInputKeyActionView::Justification' has a wrong offset!");
static_assert(offsetof(UInputKeyActionView, ColorAndOpacity) == 0x0005B4, "Member 'UInputKeyActionView::ColorAndOpacity' has a wrong offset!");

// Class UCW.KeepAspectZoneSlot
// 0x0018 (0x0050 - 0x0038)
class UKeepAspectZoneSlot final : public UPanelSlot
{
public:
	EHorizontalAlignment                          HAlign;                                            // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VAlign;                                            // 0x0039(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                Padding;                                           // 0x003C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KeepAspectZoneSlot">();
	}
	static class UKeepAspectZoneSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKeepAspectZoneSlot>();
	}
};
static_assert(alignof(UKeepAspectZoneSlot) == 0x000008, "Wrong alignment on UKeepAspectZoneSlot");
static_assert(sizeof(UKeepAspectZoneSlot) == 0x000050, "Wrong size on UKeepAspectZoneSlot");
static_assert(offsetof(UKeepAspectZoneSlot, HAlign) == 0x000038, "Member 'UKeepAspectZoneSlot::HAlign' has a wrong offset!");
static_assert(offsetof(UKeepAspectZoneSlot, VAlign) == 0x000039, "Member 'UKeepAspectZoneSlot::VAlign' has a wrong offset!");
static_assert(offsetof(UKeepAspectZoneSlot, Padding) == 0x00003C, "Member 'UKeepAspectZoneSlot::Padding' has a wrong offset!");

// Class UCW.KeepAspectZone
// 0x0060 (0x01C8 - 0x0168)
class UKeepAspectZone final : public UContentWidget
{
public:
	bool                                          PadLeft;                                           // 0x0168(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          PadRight;                                          // 0x0169(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          PadTop;                                            // 0x016A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          PadBottom;                                         // 0x016B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              MinimumAspectRatio;                                // 0x0170(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bKeepAspectBelowDesire;                            // 0x0180(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              DesireAspectRatio;                                 // 0x0188(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              DesireAspectRatioUltraWide;                        // 0x0198(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              DesireAspectRatioSuperUltraWide;                   // 0x01A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B8[0x10];                                     // 0x01B8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetSidesToPad(bool InPadLeft, bool InPadRight, bool InPadTop, bool InPadBottom);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KeepAspectZone">();
	}
	static class UKeepAspectZone* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKeepAspectZone>();
	}
};
static_assert(alignof(UKeepAspectZone) == 0x000008, "Wrong alignment on UKeepAspectZone");
static_assert(sizeof(UKeepAspectZone) == 0x0001C8, "Wrong size on UKeepAspectZone");
static_assert(offsetof(UKeepAspectZone, PadLeft) == 0x000168, "Member 'UKeepAspectZone::PadLeft' has a wrong offset!");
static_assert(offsetof(UKeepAspectZone, PadRight) == 0x000169, "Member 'UKeepAspectZone::PadRight' has a wrong offset!");
static_assert(offsetof(UKeepAspectZone, PadTop) == 0x00016A, "Member 'UKeepAspectZone::PadTop' has a wrong offset!");
static_assert(offsetof(UKeepAspectZone, PadBottom) == 0x00016B, "Member 'UKeepAspectZone::PadBottom' has a wrong offset!");
static_assert(offsetof(UKeepAspectZone, MinimumAspectRatio) == 0x000170, "Member 'UKeepAspectZone::MinimumAspectRatio' has a wrong offset!");
static_assert(offsetof(UKeepAspectZone, bKeepAspectBelowDesire) == 0x000180, "Member 'UKeepAspectZone::bKeepAspectBelowDesire' has a wrong offset!");
static_assert(offsetof(UKeepAspectZone, DesireAspectRatio) == 0x000188, "Member 'UKeepAspectZone::DesireAspectRatio' has a wrong offset!");
static_assert(offsetof(UKeepAspectZone, DesireAspectRatioUltraWide) == 0x000198, "Member 'UKeepAspectZone::DesireAspectRatioUltraWide' has a wrong offset!");
static_assert(offsetof(UKeepAspectZone, DesireAspectRatioSuperUltraWide) == 0x0001A8, "Member 'UKeepAspectZone::DesireAspectRatioSuperUltraWide' has a wrong offset!");

// Class UCW.LocalizedFont
// 0x00A8 (0x00D8 - 0x0030)
class ULocalizedFont final : public UDataAsset
{
public:
	struct FSlateFontInfo                         DefaultFont;                                       // 0x0030(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FString, struct FSlateFontInfo>    Fonts;                                             // 0x0088(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LocalizedFont">();
	}
	static class ULocalizedFont* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULocalizedFont>();
	}
};
static_assert(alignof(ULocalizedFont) == 0x000008, "Wrong alignment on ULocalizedFont");
static_assert(sizeof(ULocalizedFont) == 0x0000D8, "Wrong size on ULocalizedFont");
static_assert(offsetof(ULocalizedFont, DefaultFont) == 0x000030, "Member 'ULocalizedFont::DefaultFont' has a wrong offset!");
static_assert(offsetof(ULocalizedFont, Fonts) == 0x000088, "Member 'ULocalizedFont::Fonts' has a wrong offset!");

// Class UCW.RichTextBlockColorDecorator
// 0x0000 (0x0028 - 0x0028)
class URichTextBlockColorDecorator final : public URichTextBlockDecorator
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RichTextBlockColorDecorator">();
	}
	static class URichTextBlockColorDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<URichTextBlockColorDecorator>();
	}
};
static_assert(alignof(URichTextBlockColorDecorator) == 0x000008, "Wrong alignment on URichTextBlockColorDecorator");
static_assert(sizeof(URichTextBlockColorDecorator) == 0x000028, "Wrong size on URichTextBlockColorDecorator");

// Class UCW.RichTextBlockSpanDecorator
// 0x0000 (0x0028 - 0x0028)
class URichTextBlockSpanDecorator final : public URichTextBlockDecorator
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RichTextBlockSpanDecorator">();
	}
	static class URichTextBlockSpanDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<URichTextBlockSpanDecorator>();
	}
};
static_assert(alignof(URichTextBlockSpanDecorator) == 0x000008, "Wrong alignment on URichTextBlockSpanDecorator");
static_assert(sizeof(URichTextBlockSpanDecorator) == 0x000028, "Wrong size on URichTextBlockSpanDecorator");

// Class UCW.RichTextBlockTextWithBgrDecorator
// 0x0008 (0x0030 - 0x0028)
class URichTextBlockTextWithBgrDecorator : public URichTextBlockDecorator
{
public:
	class UDataTable*                             StyleSet;                                          // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RichTextBlockTextWithBgrDecorator">();
	}
	static class URichTextBlockTextWithBgrDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<URichTextBlockTextWithBgrDecorator>();
	}
};
static_assert(alignof(URichTextBlockTextWithBgrDecorator) == 0x000008, "Wrong alignment on URichTextBlockTextWithBgrDecorator");
static_assert(sizeof(URichTextBlockTextWithBgrDecorator) == 0x000030, "Wrong size on URichTextBlockTextWithBgrDecorator");
static_assert(offsetof(URichTextBlockTextWithBgrDecorator, StyleSet) == 0x000028, "Member 'URichTextBlockTextWithBgrDecorator::StyleSet' has a wrong offset!");

// Class UCW.StyledRichTextBlock
// 0x0030 (0x08A0 - 0x0870)
class UStyledRichTextBlock : public URichTextBlock
{
public:
	TSubclassOf<class UCommonTextScrollStyle>     ScrollStyle;                                       // 0x0870(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCommonTextStyle>           TextStyle;                                         // 0x0878(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCommonFontSize;                                   // 0x0880(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_881[0x3];                                      // 0x0881(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FontSize;                                          // 0x0884(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MobileTextBlockScale;                              // 0x0888(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_88C[0x14];                                     // 0x088C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetStyle(TSubclassOf<class UCommonTextStyle> InStyle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StyledRichTextBlock">();
	}
	static class UStyledRichTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStyledRichTextBlock>();
	}
};
static_assert(alignof(UStyledRichTextBlock) == 0x000010, "Wrong alignment on UStyledRichTextBlock");
static_assert(sizeof(UStyledRichTextBlock) == 0x0008A0, "Wrong size on UStyledRichTextBlock");
static_assert(offsetof(UStyledRichTextBlock, ScrollStyle) == 0x000870, "Member 'UStyledRichTextBlock::ScrollStyle' has a wrong offset!");
static_assert(offsetof(UStyledRichTextBlock, TextStyle) == 0x000878, "Member 'UStyledRichTextBlock::TextStyle' has a wrong offset!");
static_assert(offsetof(UStyledRichTextBlock, bCommonFontSize) == 0x000880, "Member 'UStyledRichTextBlock::bCommonFontSize' has a wrong offset!");
static_assert(offsetof(UStyledRichTextBlock, FontSize) == 0x000884, "Member 'UStyledRichTextBlock::FontSize' has a wrong offset!");
static_assert(offsetof(UStyledRichTextBlock, MobileTextBlockScale) == 0x000888, "Member 'UStyledRichTextBlock::MobileTextBlockScale' has a wrong offset!");

// Class UCW.TabBox
// 0x0088 (0x0200 - 0x0178)
class UTabBox final : public UHorizontalBox
{
public:
	class UAkAudioEvent*                          TabsChangeSound;                                   // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        Switcher;                                          // 0x0180(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnPanelWillChange;                                 // 0x0188(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_198[0x10];                                     // 0x0198(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnPanelChanged;                                    // 0x01A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B8[0x34];                                     // 0x01B8(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          WrapChangeTab;                                     // 0x01EC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1ED[0x3];                                      // 0x01ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTabButton*>                     Tabs;                                              // 0x01F0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void NextTab();
	void PrevTab();
	void SelectTab(int32 NewTab, ETabChangeCause ChangeCause);
	void SetSwitcher(class UWidgetSwitcher* _Switcher);

	int32 GetTabCount() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TabBox">();
	}
	static class UTabBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTabBox>();
	}
};
static_assert(alignof(UTabBox) == 0x000008, "Wrong alignment on UTabBox");
static_assert(sizeof(UTabBox) == 0x000200, "Wrong size on UTabBox");
static_assert(offsetof(UTabBox, TabsChangeSound) == 0x000178, "Member 'UTabBox::TabsChangeSound' has a wrong offset!");
static_assert(offsetof(UTabBox, Switcher) == 0x000180, "Member 'UTabBox::Switcher' has a wrong offset!");
static_assert(offsetof(UTabBox, OnPanelWillChange) == 0x000188, "Member 'UTabBox::OnPanelWillChange' has a wrong offset!");
static_assert(offsetof(UTabBox, OnPanelChanged) == 0x0001A8, "Member 'UTabBox::OnPanelChanged' has a wrong offset!");
static_assert(offsetof(UTabBox, WrapChangeTab) == 0x0001EC, "Member 'UTabBox::WrapChangeTab' has a wrong offset!");
static_assert(offsetof(UTabBox, Tabs) == 0x0001F0, "Member 'UTabBox::Tabs' has a wrong offset!");

// Class UCW.TextButton
// 0x03C0 (0x0E60 - 0x0AA0)
class UTextButton : public UBButton
{
public:
	bool                                          _HasChildrenInTheSlot;                             // 0x0AA0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA1[0x7];                                      // 0x0AA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCommonTextScrollStyle>     ScrollStyle;                                       // 0x0AA8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTextButtonStyle                       TextStyle;                                         // 0x0AB0(0x0340)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0DF0(0x0018)(Edit, NativeAccessSpecifierPublic)
	TDelegate<void()>                             TextDelegate;                                      // 0x0E08(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDesiredWidth;                                   // 0x0E18(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextJustify                                  Justification;                                     // 0x0E1C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoWrapText;                                      // 0x0E1D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1E[0x2];                                      // 0x0E1E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WrapTextAt;                                        // 0x0E20(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextWrappingPolicy                           WrappingPolicy;                                    // 0x0E24(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E25[0x3];                                      // 0x0E25(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                Margin;                                            // 0x0E28(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         MobileFontSizeMultiplier;                          // 0x0E38(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E3C[0x24];                                     // 0x0E3C(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ResetScrollState();
	void SetText(const class FText& InText);

	class FText GetText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TextButton">();
	}
	static class UTextButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextButton>();
	}
};
static_assert(alignof(UTextButton) == 0x000010, "Wrong alignment on UTextButton");
static_assert(sizeof(UTextButton) == 0x000E60, "Wrong size on UTextButton");
static_assert(offsetof(UTextButton, _HasChildrenInTheSlot) == 0x000AA0, "Member 'UTextButton::_HasChildrenInTheSlot' has a wrong offset!");
static_assert(offsetof(UTextButton, ScrollStyle) == 0x000AA8, "Member 'UTextButton::ScrollStyle' has a wrong offset!");
static_assert(offsetof(UTextButton, TextStyle) == 0x000AB0, "Member 'UTextButton::TextStyle' has a wrong offset!");
static_assert(offsetof(UTextButton, Text) == 0x000DF0, "Member 'UTextButton::Text' has a wrong offset!");
static_assert(offsetof(UTextButton, TextDelegate) == 0x000E08, "Member 'UTextButton::TextDelegate' has a wrong offset!");
static_assert(offsetof(UTextButton, MinDesiredWidth) == 0x000E18, "Member 'UTextButton::MinDesiredWidth' has a wrong offset!");
static_assert(offsetof(UTextButton, Justification) == 0x000E1C, "Member 'UTextButton::Justification' has a wrong offset!");
static_assert(offsetof(UTextButton, AutoWrapText) == 0x000E1D, "Member 'UTextButton::AutoWrapText' has a wrong offset!");
static_assert(offsetof(UTextButton, WrapTextAt) == 0x000E20, "Member 'UTextButton::WrapTextAt' has a wrong offset!");
static_assert(offsetof(UTextButton, WrappingPolicy) == 0x000E24, "Member 'UTextButton::WrappingPolicy' has a wrong offset!");
static_assert(offsetof(UTextButton, Margin) == 0x000E28, "Member 'UTextButton::Margin' has a wrong offset!");
static_assert(offsetof(UTextButton, MobileFontSizeMultiplier) == 0x000E38, "Member 'UTextButton::MobileFontSizeMultiplier' has a wrong offset!");

// Class UCW.TabButton
// 0x0410 (0x1270 - 0x0E60)
class UTabButton final : public UTextButton
{
public:
	struct FBButtonStyle                          ActiveWidgetStyle;                                 // 0x0E60(0x03C0)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1220[0x8];                                     // 0x1220(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnTabActivated;                                    // 0x1228(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1238[0x10];                                    // 0x1238(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnTabDeactivated;                                  // 0x1248(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1258[0x18];                                    // 0x1258(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TabButton">();
	}
	static class UTabButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTabButton>();
	}
};
static_assert(alignof(UTabButton) == 0x000010, "Wrong alignment on UTabButton");
static_assert(sizeof(UTabButton) == 0x001270, "Wrong size on UTabButton");
static_assert(offsetof(UTabButton, ActiveWidgetStyle) == 0x000E60, "Member 'UTabButton::ActiveWidgetStyle' has a wrong offset!");
static_assert(offsetof(UTabButton, OnTabActivated) == 0x001228, "Member 'UTabButton::OnTabActivated' has a wrong offset!");
static_assert(offsetof(UTabButton, OnTabDeactivated) == 0x001248, "Member 'UTabButton::OnTabDeactivated' has a wrong offset!");

// Class UCW.UCWTextButtonStyle
// 0x0030 (0x05E0 - 0x05B0)
class UUCWTextButtonStyle final : public UUCWButtonStyle
{
public:
	bool                                          bSingleTextStyle;                                  // 0x05A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInheritTextColor;                                 // 0x05A9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5AA[0x6];                                      // 0x05AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCommonTextStyle>           NormalTextStyle;                                   // 0x05B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCommonTextStyle>           HoveredTextStyle;                                  // 0x05B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCommonTextStyle>           FocusedTextStyle;                                  // 0x05C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCommonTextStyle>           PressedTextStyle;                                  // 0x05C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCommonTextStyle>           DisabledTextStyle;                                 // 0x05D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D8[0x8];                                      // 0x05D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UCommonTextStyle* GetDisabledTextStyle() const;
	class UCommonTextStyle* GetFocusedTextStyle() const;
	class UCommonTextStyle* GetHoveredTextStyle() const;
	class UCommonTextStyle* GetNormalTextStyle() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCWTextButtonStyle">();
	}
	static class UUCWTextButtonStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCWTextButtonStyle>();
	}
};
static_assert(alignof(UUCWTextButtonStyle) == 0x000010, "Wrong alignment on UUCWTextButtonStyle");
static_assert(sizeof(UUCWTextButtonStyle) == 0x0005E0, "Wrong size on UUCWTextButtonStyle");
static_assert(offsetof(UUCWTextButtonStyle, bSingleTextStyle) == 0x0005A8, "Member 'UUCWTextButtonStyle::bSingleTextStyle' has a wrong offset!");
static_assert(offsetof(UUCWTextButtonStyle, bInheritTextColor) == 0x0005A9, "Member 'UUCWTextButtonStyle::bInheritTextColor' has a wrong offset!");
static_assert(offsetof(UUCWTextButtonStyle, NormalTextStyle) == 0x0005B0, "Member 'UUCWTextButtonStyle::NormalTextStyle' has a wrong offset!");
static_assert(offsetof(UUCWTextButtonStyle, HoveredTextStyle) == 0x0005B8, "Member 'UUCWTextButtonStyle::HoveredTextStyle' has a wrong offset!");
static_assert(offsetof(UUCWTextButtonStyle, FocusedTextStyle) == 0x0005C0, "Member 'UUCWTextButtonStyle::FocusedTextStyle' has a wrong offset!");
static_assert(offsetof(UUCWTextButtonStyle, PressedTextStyle) == 0x0005C8, "Member 'UUCWTextButtonStyle::PressedTextStyle' has a wrong offset!");
static_assert(offsetof(UUCWTextButtonStyle, DisabledTextStyle) == 0x0005D0, "Member 'UUCWTextButtonStyle::DisabledTextStyle' has a wrong offset!");

// Class UCW.UCWAnimatedSwitcher
// 0x0018 (0x0208 - 0x01F0)
class UUCWAnimatedSwitcher final : public UCommonAnimatedSwitcher
{
public:
	bool                                          bAllowSwitchDuringTransition;                      // 0x01F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnActiveWidgetChanged;                             // 0x01F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCWAnimatedSwitcher">();
	}
	static class UUCWAnimatedSwitcher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCWAnimatedSwitcher>();
	}
};
static_assert(alignof(UUCWAnimatedSwitcher) == 0x000008, "Wrong alignment on UUCWAnimatedSwitcher");
static_assert(sizeof(UUCWAnimatedSwitcher) == 0x000208, "Wrong size on UUCWAnimatedSwitcher");
static_assert(offsetof(UUCWAnimatedSwitcher, bAllowSwitchDuringTransition) == 0x0001F0, "Member 'UUCWAnimatedSwitcher::bAllowSwitchDuringTransition' has a wrong offset!");
static_assert(offsetof(UUCWAnimatedSwitcher, OnActiveWidgetChanged) == 0x0001F8, "Member 'UUCWAnimatedSwitcher::OnActiveWidgetChanged' has a wrong offset!");

// Class UCW.UCWCreditsRowWidget
// 0x0000 (0x0278 - 0x0278)
class UUCWCreditsRowWidget final : public UUserWidget
{
public:
	void OnSetData(const struct FCreditsItem& Item);
	void OnSetText(const class FText& Text, const class FText& Text2, const class FText& Text3);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCWCreditsRowWidget">();
	}
	static class UUCWCreditsRowWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCWCreditsRowWidget>();
	}
};
static_assert(alignof(UUCWCreditsRowWidget) == 0x000008, "Wrong alignment on UUCWCreditsRowWidget");
static_assert(sizeof(UUCWCreditsRowWidget) == 0x000278, "Wrong size on UUCWCreditsRowWidget");

// Class UCW.UCWCreditsImageRowWidget
// 0x0000 (0x0278 - 0x0278)
class UUCWCreditsImageRowWidget final : public UUserWidget
{
public:
	void OnSetBrush(const struct FSlateBrush& Brush);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCWCreditsImageRowWidget">();
	}
	static class UUCWCreditsImageRowWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCWCreditsImageRowWidget>();
	}
};
static_assert(alignof(UUCWCreditsImageRowWidget) == 0x000008, "Wrong alignment on UUCWCreditsImageRowWidget");
static_assert(sizeof(UUCWCreditsImageRowWidget) == 0x000278, "Wrong size on UUCWCreditsImageRowWidget");

// Class UCW.UCWCreditsBox
// 0x00B0 (0x0228 - 0x0178)
class UUCWCreditsBox final : public UVerticalBox
{
public:
	TSoftObjectPtr<class UCreditsConfig>          CreditsRowSet;                                     // 0x0178(0x0030)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<ECreditsItemType, TSubclassOf<class UUCWCreditsRowWidget>> RowClasses;                                        // 0x01A8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TSubclassOf<class UUCWCreditsRowWidget>       HeaderWidgetClass;                                 // 0x01F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UUCWCreditsRowWidget>       OneColumnWidgetClass;                              // 0x0200(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UUCWCreditsRowWidget>       TwoColumnWidgetClass;                              // 0x0208(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UUCWCreditsRowWidget>       ThreeColumnWidgetClass;                            // 0x0210(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UUCWCreditsImageRowWidget>  ImageWidgetClass;                                  // 0x0218(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RowSpace;                                          // 0x0220(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          AutoWrapHeader;                                    // 0x0224(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_225[0x3];                                      // 0x0225(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCWCreditsBox">();
	}
	static class UUCWCreditsBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCWCreditsBox>();
	}
};
static_assert(alignof(UUCWCreditsBox) == 0x000008, "Wrong alignment on UUCWCreditsBox");
static_assert(sizeof(UUCWCreditsBox) == 0x000228, "Wrong size on UUCWCreditsBox");
static_assert(offsetof(UUCWCreditsBox, CreditsRowSet) == 0x000178, "Member 'UUCWCreditsBox::CreditsRowSet' has a wrong offset!");
static_assert(offsetof(UUCWCreditsBox, RowClasses) == 0x0001A8, "Member 'UUCWCreditsBox::RowClasses' has a wrong offset!");
static_assert(offsetof(UUCWCreditsBox, HeaderWidgetClass) == 0x0001F8, "Member 'UUCWCreditsBox::HeaderWidgetClass' has a wrong offset!");
static_assert(offsetof(UUCWCreditsBox, OneColumnWidgetClass) == 0x000200, "Member 'UUCWCreditsBox::OneColumnWidgetClass' has a wrong offset!");
static_assert(offsetof(UUCWCreditsBox, TwoColumnWidgetClass) == 0x000208, "Member 'UUCWCreditsBox::TwoColumnWidgetClass' has a wrong offset!");
static_assert(offsetof(UUCWCreditsBox, ThreeColumnWidgetClass) == 0x000210, "Member 'UUCWCreditsBox::ThreeColumnWidgetClass' has a wrong offset!");
static_assert(offsetof(UUCWCreditsBox, ImageWidgetClass) == 0x000218, "Member 'UUCWCreditsBox::ImageWidgetClass' has a wrong offset!");
static_assert(offsetof(UUCWCreditsBox, RowSpace) == 0x000220, "Member 'UUCWCreditsBox::RowSpace' has a wrong offset!");
static_assert(offsetof(UUCWCreditsBox, AutoWrapHeader) == 0x000224, "Member 'UUCWCreditsBox::AutoWrapHeader' has a wrong offset!");

// Class UCW.UCWLazyImage
// 0x0040 (0x0400 - 0x03C0)
class UUCWLazyImage final : public UCommonLazyImage
{
public:
	TSoftObjectPtr<class UObject>                 LazyObject;                                        // 0x03C0(0x0030)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          MatchSize;                                         // 0x03F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3F1[0xF];                                      // 0x03F1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCWLazyImage">();
	}
	static class UUCWLazyImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCWLazyImage>();
	}
};
static_assert(alignof(UUCWLazyImage) == 0x000010, "Wrong alignment on UUCWLazyImage");
static_assert(sizeof(UUCWLazyImage) == 0x000400, "Wrong size on UUCWLazyImage");
static_assert(offsetof(UUCWLazyImage, LazyObject) == 0x0003C0, "Member 'UUCWLazyImage::LazyObject' has a wrong offset!");
static_assert(offsetof(UUCWLazyImage, MatchSize) == 0x0003F0, "Member 'UUCWLazyImage::MatchSize' has a wrong offset!");

// Class UCW.UCWListEntryWidget
// 0x0008 (0x0280 - 0x0278)
class UUCWListEntryWidget : public UUserWidget
{
public:
	uint8                                         Pad_278[0x8];                                      // 0x0278(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnHovered();
	void OnUnhovered();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCWListEntryWidget">();
	}
	static class UUCWListEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCWListEntryWidget>();
	}
};
static_assert(alignof(UUCWListEntryWidget) == 0x000008, "Wrong alignment on UUCWListEntryWidget");
static_assert(sizeof(UUCWListEntryWidget) == 0x000280, "Wrong size on UUCWListEntryWidget");

// Class UCW.UCWListView
// 0x0000 (0x0C20 - 0x0C20)
class UUCWListView final : public UListView
{
public:
	void SetEntrySpacing(float InEntrySpacing);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCWListView">();
	}
	static class UUCWListView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCWListView>();
	}
};
static_assert(alignof(UUCWListView) == 0x000010, "Wrong alignment on UUCWListView");
static_assert(sizeof(UUCWListView) == 0x000C20, "Wrong size on UUCWListView");

// Class UCW.UCWProgressWidget
// 0x0010 (0x0288 - 0x0278)
class UUCWProgressWidget final : public UUserWidget
{
public:
	uint8                                         Pad_278[0x8];                                      // 0x0278(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Percent;                                           // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_284[0x4];                                      // 0x0284(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InputDeviceChanged();
	void OnPercentUpdated(float InPercent);
	void SetPercent(float InPercent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCWProgressWidget">();
	}
	static class UUCWProgressWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCWProgressWidget>();
	}
};
static_assert(alignof(UUCWProgressWidget) == 0x000008, "Wrong alignment on UUCWProgressWidget");
static_assert(sizeof(UUCWProgressWidget) == 0x000288, "Wrong size on UUCWProgressWidget");
static_assert(offsetof(UUCWProgressWidget, Percent) == 0x000280, "Member 'UUCWProgressWidget::Percent' has a wrong offset!");

// Class UCW.UCWTabBar
// 0x0088 (0x0200 - 0x0178)
class UUCWTabBar final : public UHorizontalBox
{
public:
	class UWidgetSwitcher*                        Switcher;                                          // 0x0178(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          TabsChangeSound;                                   // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   TabButtonClass;                                    // 0x0188(0x0030)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InnerSlotPadding;                                  // 0x01B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1BC[0x4];                                      // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnTabSelected;                                     // 0x01C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1D0[0x28];                                     // 0x01D0(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UUCWWidgetGroup*                        TabGroup;                                          // 0x01F8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BP_OnTabSelected(class UUCWTabPanel* Panel);
	void NextTab();
	void OnTabSelected__DelegateSignature(class UUCWTabPanel* Panel);
	void PrevTab();
	void SelectTab(int32 NewTab, ETabChangeCause ChangeCause);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCWTabBar">();
	}
	static class UUCWTabBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCWTabBar>();
	}
};
static_assert(alignof(UUCWTabBar) == 0x000008, "Wrong alignment on UUCWTabBar");
static_assert(sizeof(UUCWTabBar) == 0x000200, "Wrong size on UUCWTabBar");
static_assert(offsetof(UUCWTabBar, Switcher) == 0x000178, "Member 'UUCWTabBar::Switcher' has a wrong offset!");
static_assert(offsetof(UUCWTabBar, TabsChangeSound) == 0x000180, "Member 'UUCWTabBar::TabsChangeSound' has a wrong offset!");
static_assert(offsetof(UUCWTabBar, TabButtonClass) == 0x000188, "Member 'UUCWTabBar::TabButtonClass' has a wrong offset!");
static_assert(offsetof(UUCWTabBar, InnerSlotPadding) == 0x0001B8, "Member 'UUCWTabBar::InnerSlotPadding' has a wrong offset!");
static_assert(offsetof(UUCWTabBar, OnTabSelected) == 0x0001C0, "Member 'UUCWTabBar::OnTabSelected' has a wrong offset!");
static_assert(offsetof(UUCWTabBar, TabGroup) == 0x0001F8, "Member 'UUCWTabBar::TabGroup' has a wrong offset!");

// Class UCW.UCWTabButton
// 0x0018 (0x02C8 - 0x02B0)
class UUCWTabButton : public UUCWButtonBase
{
public:
	TSubclassOf<class UUCWButtonStyle>            NormalWidgetStyle;                                 // 0x02B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UUCWButtonStyle>            SelectedWidgetStyle;                               // 0x02B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBButton*                               Root_but;                                          // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnTextChanged(const class FText& Text);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCWTabButton">();
	}
	static class UUCWTabButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCWTabButton>();
	}
};
static_assert(alignof(UUCWTabButton) == 0x000008, "Wrong alignment on UUCWTabButton");
static_assert(sizeof(UUCWTabButton) == 0x0002C8, "Wrong size on UUCWTabButton");
static_assert(offsetof(UUCWTabButton, NormalWidgetStyle) == 0x0002B0, "Member 'UUCWTabButton::NormalWidgetStyle' has a wrong offset!");
static_assert(offsetof(UUCWTabButton, SelectedWidgetStyle) == 0x0002B8, "Member 'UUCWTabButton::SelectedWidgetStyle' has a wrong offset!");
static_assert(offsetof(UUCWTabButton, Root_but) == 0x0002C0, "Member 'UUCWTabButton::Root_but' has a wrong offset!");

}

