#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SplineMeshEx

#include "Basic.hpp"

#include "SplineMeshEx_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "ProceduralMeshComponent_classes.hpp"


namespace SDK
{

// Class SplineMeshEx.MasterSplineActor
// 0x0010 (0x02C0 - 0x02B0)
class AMasterSplineActor final : public AActor
{
public:
	class USplineComponent*                       MasterSpline;                                      // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          UpdateChildsTangents;                              // 0x02B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MasterSplineActor">();
	}
	static class AMasterSplineActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMasterSplineActor>();
	}
};
static_assert(alignof(AMasterSplineActor) == 0x000008, "Wrong alignment on AMasterSplineActor");
static_assert(sizeof(AMasterSplineActor) == 0x0002C0, "Wrong size on AMasterSplineActor");
static_assert(offsetof(AMasterSplineActor, MasterSpline) == 0x0002B0, "Member 'AMasterSplineActor::MasterSpline' has a wrong offset!");
static_assert(offsetof(AMasterSplineActor, UpdateChildsTangents) == 0x0002B8, "Member 'AMasterSplineActor::UpdateChildsTangents' has a wrong offset!");

// Class SplineMeshEx.SplineDeformerActor
// 0x0010 (0x02C0 - 0x02B0)
class ASplineDeformerActor final : public AActor
{
public:
	class USplineDeformerComponent*               DeformerComponent;                                 // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineComponent*                       SplineToFollow;                                    // 0x02B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SplineDeformerActor">();
	}
	static class ASplineDeformerActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASplineDeformerActor>();
	}
};
static_assert(alignof(ASplineDeformerActor) == 0x000008, "Wrong alignment on ASplineDeformerActor");
static_assert(sizeof(ASplineDeformerActor) == 0x0002C0, "Wrong size on ASplineDeformerActor");
static_assert(offsetof(ASplineDeformerActor, DeformerComponent) == 0x0002B0, "Member 'ASplineDeformerActor::DeformerComponent' has a wrong offset!");
static_assert(offsetof(ASplineDeformerActor, SplineToFollow) == 0x0002B8, "Member 'ASplineDeformerActor::SplineToFollow' has a wrong offset!");

// Class SplineMeshEx.SplineDeformerCollisionUserData
// 0x0010 (0x0038 - 0x0028)
class USplineDeformerCollisionUserData final : public UAssetUserData
{
public:
	ECollisionEnabled                             CollisionEnabled;                                  // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CollisionProfileName;                              // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SplineDeformerCollisionUserData">();
	}
	static class USplineDeformerCollisionUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<USplineDeformerCollisionUserData>();
	}
};
static_assert(alignof(USplineDeformerCollisionUserData) == 0x000008, "Wrong alignment on USplineDeformerCollisionUserData");
static_assert(sizeof(USplineDeformerCollisionUserData) == 0x000038, "Wrong size on USplineDeformerCollisionUserData");
static_assert(offsetof(USplineDeformerCollisionUserData, CollisionEnabled) == 0x000028, "Member 'USplineDeformerCollisionUserData::CollisionEnabled' has a wrong offset!");
static_assert(offsetof(USplineDeformerCollisionUserData, CollisionProfileName) == 0x00002C, "Member 'USplineDeformerCollisionUserData::CollisionProfileName' has a wrong offset!");

// Class SplineMeshEx.SplineDeformerComponent
// 0x0030 (0x02D0 - 0x02A0)
class USplineDeformerComponent final : public USceneComponent
{
public:
	int32                                         _AutoConversionVersion;                            // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USplineMeshProcedural*>          _Bodies;                                           // 0x02A8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          EnableGeneration;                                  // 0x02C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawDebug;                                         // 0x02C1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C2[0xE];                                      // 0x02C2(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SplineDeformerComponent">();
	}
	static class USplineDeformerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USplineDeformerComponent>();
	}
};
static_assert(alignof(USplineDeformerComponent) == 0x000010, "Wrong alignment on USplineDeformerComponent");
static_assert(sizeof(USplineDeformerComponent) == 0x0002D0, "Wrong size on USplineDeformerComponent");
static_assert(offsetof(USplineDeformerComponent, _AutoConversionVersion) == 0x0002A0, "Member 'USplineDeformerComponent::_AutoConversionVersion' has a wrong offset!");
static_assert(offsetof(USplineDeformerComponent, _Bodies) == 0x0002A8, "Member 'USplineDeformerComponent::_Bodies' has a wrong offset!");
static_assert(offsetof(USplineDeformerComponent, EnableGeneration) == 0x0002C0, "Member 'USplineDeformerComponent::EnableGeneration' has a wrong offset!");
static_assert(offsetof(USplineDeformerComponent, DrawDebug) == 0x0002C1, "Member 'USplineDeformerComponent::DrawDebug' has a wrong offset!");

// Class SplineMeshEx.SplineMeshExActor
// 0x0018 (0x02C8 - 0x02B0)
class ASplineMeshExActor final : public AActor
{
public:
	class USplineMeshExComponent*                 SplineMeshExComponent;                             // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineComponent*                       SplineToFollow;                                    // 0x02B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          AllowToBeMerged;                                   // 0x02C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SplineMeshExActor">();
	}
	static class ASplineMeshExActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASplineMeshExActor>();
	}
};
static_assert(alignof(ASplineMeshExActor) == 0x000008, "Wrong alignment on ASplineMeshExActor");
static_assert(sizeof(ASplineMeshExActor) == 0x0002C8, "Wrong size on ASplineMeshExActor");
static_assert(offsetof(ASplineMeshExActor, SplineMeshExComponent) == 0x0002B0, "Member 'ASplineMeshExActor::SplineMeshExComponent' has a wrong offset!");
static_assert(offsetof(ASplineMeshExActor, SplineToFollow) == 0x0002B8, "Member 'ASplineMeshExActor::SplineToFollow' has a wrong offset!");
static_assert(offsetof(ASplineMeshExActor, AllowToBeMerged) == 0x0002C0, "Member 'ASplineMeshExActor::AllowToBeMerged' has a wrong offset!");

// Class SplineMeshEx.SplineMeshExComponent
// 0x0280 (0x0520 - 0x02A0)
class USplineMeshExComponent final : public USceneComponent
{
public:
	TArray<class USplineMeshProcedural*>          _Bodies;                                           // 0x02A0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2B0[0x20];                                     // 0x02B0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMeshSegmentInfo                       StartShape;                                        // 0x02D0(0x0090)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FMeshSegmentInfo                       EndShape;                                          // 0x0360(0x0090)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FMeshSegmentInfo>               LeftSideShapeVariants;                             // 0x03F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMeshSegmentInfo>               MiddleShapeVariants;                               // 0x0400(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMeshSegmentInfo>               RightSideShapeVariants;                            // 0x0410(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RandomSeed;                                        // 0x0420(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CastShadow;                                        // 0x0424(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_425[0x3];                                      // 0x0425(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LightMapResolution;                                // 0x0428(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLightingChannels                      LightingChannels;                                  // 0x042C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	ECollisionEnabled                             Collision;                                         // 0x042D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             CollisionChannel;                                  // 0x042E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanAffectNavigation;                               // 0x042F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StretchSegment;                                    // 0x0430(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GenerateSimplifiedCollision;                       // 0x0431(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CoalesceSides;                                     // 0x0432(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_433[0x1];                                      // 0x0433(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CoalesceLimit;                                     // 0x0434(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceMipmapsResidency;                             // 0x0438(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_439[0x7];                                      // 0x0439(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      PhysMaterialOverride;                              // 0x0440(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bRenderCustomDepth : 1;                            // 0x0448(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	ERendererStencilMask                          CustomDepthStencilWriteMask;                       // 0x0449(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44A[0x2];                                      // 0x044A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CustomDepthStencilValue;                           // 0x044C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_450[0xD0];                                     // 0x0450(0x00D0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetCustomDepthStencil(bool RenderCustomDepth, ERendererStencilMask DepthStencilWriteMask, int32 DepthStencilValue);
	void SetScalarParameterValue(class FName ParameterName, float Value);
	void SetVectorParameterValue(class FName ParameterName, const struct FLinearColor& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SplineMeshExComponent">();
	}
	static class USplineMeshExComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USplineMeshExComponent>();
	}
};
static_assert(alignof(USplineMeshExComponent) == 0x000010, "Wrong alignment on USplineMeshExComponent");
static_assert(sizeof(USplineMeshExComponent) == 0x000520, "Wrong size on USplineMeshExComponent");
static_assert(offsetof(USplineMeshExComponent, _Bodies) == 0x0002A0, "Member 'USplineMeshExComponent::_Bodies' has a wrong offset!");
static_assert(offsetof(USplineMeshExComponent, StartShape) == 0x0002D0, "Member 'USplineMeshExComponent::StartShape' has a wrong offset!");
static_assert(offsetof(USplineMeshExComponent, EndShape) == 0x000360, "Member 'USplineMeshExComponent::EndShape' has a wrong offset!");
static_assert(offsetof(USplineMeshExComponent, LeftSideShapeVariants) == 0x0003F0, "Member 'USplineMeshExComponent::LeftSideShapeVariants' has a wrong offset!");
static_assert(offsetof(USplineMeshExComponent, MiddleShapeVariants) == 0x000400, "Member 'USplineMeshExComponent::MiddleShapeVariants' has a wrong offset!");
static_assert(offsetof(USplineMeshExComponent, RightSideShapeVariants) == 0x000410, "Member 'USplineMeshExComponent::RightSideShapeVariants' has a wrong offset!");
static_assert(offsetof(USplineMeshExComponent, RandomSeed) == 0x000420, "Member 'USplineMeshExComponent::RandomSeed' has a wrong offset!");
static_assert(offsetof(USplineMeshExComponent, CastShadow) == 0x000424, "Member 'USplineMeshExComponent::CastShadow' has a wrong offset!");
static_assert(offsetof(USplineMeshExComponent, LightMapResolution) == 0x000428, "Member 'USplineMeshExComponent::LightMapResolution' has a wrong offset!");
static_assert(offsetof(USplineMeshExComponent, LightingChannels) == 0x00042C, "Member 'USplineMeshExComponent::LightingChannels' has a wrong offset!");
static_assert(offsetof(USplineMeshExComponent, Collision) == 0x00042D, "Member 'USplineMeshExComponent::Collision' has a wrong offset!");
static_assert(offsetof(USplineMeshExComponent, CollisionChannel) == 0x00042E, "Member 'USplineMeshExComponent::CollisionChannel' has a wrong offset!");
static_assert(offsetof(USplineMeshExComponent, CanAffectNavigation) == 0x00042F, "Member 'USplineMeshExComponent::CanAffectNavigation' has a wrong offset!");
static_assert(offsetof(USplineMeshExComponent, StretchSegment) == 0x000430, "Member 'USplineMeshExComponent::StretchSegment' has a wrong offset!");
static_assert(offsetof(USplineMeshExComponent, GenerateSimplifiedCollision) == 0x000431, "Member 'USplineMeshExComponent::GenerateSimplifiedCollision' has a wrong offset!");
static_assert(offsetof(USplineMeshExComponent, CoalesceSides) == 0x000432, "Member 'USplineMeshExComponent::CoalesceSides' has a wrong offset!");
static_assert(offsetof(USplineMeshExComponent, CoalesceLimit) == 0x000434, "Member 'USplineMeshExComponent::CoalesceLimit' has a wrong offset!");
static_assert(offsetof(USplineMeshExComponent, ForceMipmapsResidency) == 0x000438, "Member 'USplineMeshExComponent::ForceMipmapsResidency' has a wrong offset!");
static_assert(offsetof(USplineMeshExComponent, PhysMaterialOverride) == 0x000440, "Member 'USplineMeshExComponent::PhysMaterialOverride' has a wrong offset!");
static_assert(offsetof(USplineMeshExComponent, CustomDepthStencilWriteMask) == 0x000449, "Member 'USplineMeshExComponent::CustomDepthStencilWriteMask' has a wrong offset!");
static_assert(offsetof(USplineMeshExComponent, CustomDepthStencilValue) == 0x00044C, "Member 'USplineMeshExComponent::CustomDepthStencilValue' has a wrong offset!");

// Class SplineMeshEx.SplineMeshExMergedActor
// 0x0010 (0x02D0 - 0x02C0)
class ASplineMeshExMergedActor final : public AStaticMeshActor
{
public:
	TArray<struct FGuid>                          MergedGUIDS;                                       // 0x02C0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SplineMeshExMergedActor">();
	}
	static class ASplineMeshExMergedActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASplineMeshExMergedActor>();
	}
};
static_assert(alignof(ASplineMeshExMergedActor) == 0x000008, "Wrong alignment on ASplineMeshExMergedActor");
static_assert(sizeof(ASplineMeshExMergedActor) == 0x0002D0, "Wrong size on ASplineMeshExMergedActor");
static_assert(offsetof(ASplineMeshExMergedActor, MergedGUIDS) == 0x0002C0, "Member 'ASplineMeshExMergedActor::MergedGUIDS' has a wrong offset!");

// Class SplineMeshEx.SplineMeshProcedural
// 0x0020 (0x0620 - 0x0600)
class USplineMeshProcedural final : public UProceduralMeshComponent
{
public:
	uint8                                         Pad_5F8[0x28];                                     // 0x05F8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SplineMeshProcedural">();
	}
	static class USplineMeshProcedural* GetDefaultObj()
	{
		return GetDefaultObjImpl<USplineMeshProcedural>();
	}
};
static_assert(alignof(USplineMeshProcedural) == 0x000010, "Wrong alignment on USplineMeshProcedural");
static_assert(sizeof(USplineMeshProcedural) == 0x000620, "Wrong size on USplineMeshProcedural");

}

