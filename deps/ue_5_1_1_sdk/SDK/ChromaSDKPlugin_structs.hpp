#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChromaSDKPlugin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum ChromaSDKPlugin.EChromaSDKDeviceTypeEnum
// NumValues: 0x0003
enum class EChromaSDKDeviceTypeEnum : uint8
{
	DE_1D                                    = 0,
	DE_2D                                    = 1,
	DE_MAX                                   = 2,
};

// Enum ChromaSDKPlugin.EChromaSDKDevice1DEnum
// NumValues: 0x0004
enum class EChromaSDKDevice1DEnum : uint8
{
	DE_ChromaLink                            = 0,
	DE_Headset                               = 1,
	DE_Mousepad                              = 2,
	DE_MAX                                   = 3,
};

// Enum ChromaSDKPlugin.EChromaSDKDevice2DEnum
// NumValues: 0x0005
enum class EChromaSDKDevice2DEnum : uint8
{
	DE_Keyboard                              = 0,
	DE_Keypad                                = 1,
	DE_Mouse                                 = 2,
	DE_KeyboardExtended                      = 3,
	DE_MAX                                   = 4,
};

// Enum ChromaSDKPlugin.EChromaSDKDeviceEnum
// NumValues: 0x0008
enum class EChromaSDKDeviceEnum : uint8
{
	DE_ChromaLink                            = 0,
	DE_Headset                               = 1,
	DE_Keyboard                              = 2,
	DE_Keypad                                = 3,
	DE_Mouse                                 = 4,
	DE_Mousepad                              = 5,
	DE_KeyboardExtended                      = 6,
	DE_MAX                                   = 7,
};

// Enum ChromaSDKPlugin.EChromaSDKKeyboardKey
// NumValues: 0x007E
enum class EChromaSDKKeyboardKey : uint8
{
	KK_ESC                                   = 0,
	KK_F1                                    = 1,
	KK_F2                                    = 2,
	KK_F3                                    = 3,
	KK_F4                                    = 4,
	KK_F5                                    = 5,
	KK_F6                                    = 6,
	KK_F7                                    = 7,
	KK_F8                                    = 8,
	KK_F9                                    = 9,
	KK_F10                                   = 10,
	KK_F11                                   = 11,
	KK_F12                                   = 12,
	KK_1                                     = 13,
	KK_2                                     = 14,
	KK_3                                     = 15,
	KK_4                                     = 16,
	KK_5                                     = 17,
	KK_6                                     = 18,
	KK_7                                     = 19,
	KK_8                                     = 20,
	KK_9                                     = 21,
	KK_0                                     = 22,
	KK_A                                     = 23,
	KK_B                                     = 24,
	KK_C                                     = 25,
	KK_D                                     = 26,
	KK_E                                     = 27,
	KK_F                                     = 28,
	KK_G                                     = 29,
	KK_H                                     = 30,
	KK_I                                     = 31,
	KK_J                                     = 32,
	KK_K                                     = 33,
	KK_L                                     = 34,
	KK_M                                     = 35,
	KK_N                                     = 36,
	KK_O                                     = 37,
	KK_P                                     = 38,
	KK_Q                                     = 39,
	KK_R                                     = 40,
	KK_S                                     = 41,
	KK_T                                     = 42,
	KK_U                                     = 43,
	KK_V                                     = 44,
	KK_W                                     = 45,
	KK_X                                     = 46,
	KK_Y                                     = 47,
	KK_Z                                     = 48,
	KK_NUMLOCK                               = 49,
	KK_NUMPAD0                               = 50,
	KK_NUMPAD1                               = 51,
	KK_NUMPAD2                               = 52,
	KK_NUMPAD3                               = 53,
	KK_NUMPAD4                               = 54,
	KK_NUMPAD5                               = 55,
	KK_NUMPAD6                               = 56,
	KK_NUMPAD7                               = 57,
	KK_NUMPAD8                               = 58,
	KK_NUMPAD9                               = 59,
	KK_NUMPAD_DIVIDE                         = 60,
	KK_NUMPAD_MULTIPLY                       = 61,
	KK_NUMPAD_SUBTRACT                       = 62,
	KK_NUMPAD_ADD                            = 63,
	KK_NUMPAD_ENTER                          = 64,
	KK_NUMPAD_DECIMAL                        = 65,
	KK_PRINTSCREEN                           = 66,
	KK_SCROLL                                = 67,
	KK_PAUSE                                 = 68,
	KK_INSERT                                = 69,
	KK_HOME                                  = 70,
	KK_PAGEUP                                = 71,
	KK_DELETE                                = 72,
	KK_END                                   = 73,
	KK_PAGEDOWN                              = 74,
	KK_UP                                    = 75,
	KK_LEFT                                  = 76,
	KK_DOWN                                  = 77,
	KK_RIGHT                                 = 78,
	KK_TAB                                   = 79,
	KK_CAPSLOCK                              = 80,
	KK_BACKSPACE                             = 81,
	KK_ENTER                                 = 82,
	KK_LCTRL                                 = 83,
	KK_LWIN                                  = 84,
	KK_LALT                                  = 85,
	KK_SPACE                                 = 86,
	KK_RALT                                  = 87,
	KK_FN                                    = 88,
	KK_RMENU                                 = 89,
	KK_RCTRL                                 = 90,
	KK_LSHIFT                                = 91,
	KK_RSHIFT                                = 92,
	KK_MACRO1                                = 93,
	KK_MACRO2                                = 94,
	KK_MACRO3                                = 95,
	KK_MACRO4                                = 96,
	KK_MACRO5                                = 97,
	KK_OEM_1                                 = 98,
	KK_OEM_2                                 = 99,
	KK_OEM_3                                 = 100,
	KK_OEM_4                                 = 101,
	KK_OEM_5                                 = 102,
	KK_OEM_6                                 = 103,
	KK_OEM_7                                 = 104,
	KK_OEM_8                                 = 105,
	KK_OEM_9                                 = 106,
	KK_OEM_10                                = 107,
	KK_OEM_11                                = 108,
	KK_EUR_1                                 = 109,
	KK_EUR_2                                 = 110,
	KK_JPN_1                                 = 111,
	KK_JPN_2                                 = 112,
	KK_JPN_3                                 = 113,
	KK_JPN_4                                 = 114,
	KK_JPN_5                                 = 115,
	KK_KOR_1                                 = 116,
	KK_KOR_2                                 = 117,
	KK_KOR_3                                 = 118,
	KK_KOR_4                                 = 119,
	KK_KOR_5                                 = 120,
	KK_KOR_6                                 = 121,
	KK_KOR_7                                 = 122,
	KK_LOGO                                  = 123,
	KK_INVALID                               = 124,
	KK_MAX                                   = 125,
};

// Enum ChromaSDKPlugin.EChromaSDKMouseLed
// NumValues: 0x0017
enum class EChromaSDKMouseLed : uint8
{
	ML_SCROLLWHEEL                           = 0,
	ML_LOGO                                  = 1,
	ML_BACKLIGHT                             = 2,
	ML_LEFT_SIDE1                            = 3,
	ML_LEFT_SIDE2                            = 4,
	ML_LEFT_SIDE3                            = 5,
	ML_LEFT_SIDE4                            = 6,
	ML_LEFT_SIDE5                            = 7,
	ML_LEFT_SIDE6                            = 8,
	ML_LEFT_SIDE7                            = 9,
	ML_BOTTOM1                               = 10,
	ML_BOTTOM2                               = 11,
	ML_BOTTOM3                               = 12,
	ML_BOTTOM4                               = 13,
	ML_BOTTOM5                               = 14,
	ML_RIGHT_SIDE1                           = 15,
	ML_RIGHT_SIDE2                           = 16,
	ML_RIGHT_SIDE3                           = 17,
	ML_RIGHT_SIDE4                           = 18,
	ML_RIGHT_SIDE5                           = 19,
	ML_RIGHT_SIDE6                           = 20,
	ML_RIGHT_SIDE7                           = 21,
	ML_MAX                                   = 22,
};

// Enum ChromaSDKPlugin.EChromaSDKSceneBlend
// NumValues: 0x0005
enum class EChromaSDKSceneBlend : uint8
{
	SB_None                                  = 0,
	SB_Invert                                = 1,
	SB_Threshold                             = 2,
	SB_Lerp                                  = 3,
	SB_MAX                                   = 4,
};

// Enum ChromaSDKPlugin.EChromaSDKSceneMode
// NumValues: 0x0007
enum class EChromaSDKSceneMode : uint8
{
	SM_Replace                               = 0,
	SM_Max                                   = 1,
	SM_Min                                   = 2,
	SM_Average                               = 3,
	SM_Multiply                              = 4,
	SM_Add                                   = 5,
	SM_Subtract                              = 6,
};

// Enum ChromaSDKPlugin.EChromaSDKStreamStatusEnum
// NumValues: 0x0008
enum class EChromaSDKStreamStatusEnum : uint8
{
	READY                                    = 0,
	AUTHORIZING                              = 1,
	BROADCASTING                             = 2,
	WATCHING                                 = 3,
	NOT_AUTHORIZED                           = 4,
	BROADCAST_DUPLICATE                      = 5,
	SERVICE_OFFLINE                          = 6,
	EChromaSDKStreamStatusEnum_MAX           = 7,
};

// Enum ChromaSDKPlugin.EChromaSDKCoreDeviceTypeEnum
// NumValues: 0x000C
enum class EChromaSDKCoreDeviceTypeEnum : uint8
{
	UNASSIGNED_INVALID                       = 0,
	DEVICE_KEYBOARD                          = 1,
	DEVICE_MOUSE                             = 2,
	DEVICE_HEADSET                           = 3,
	DEVICE_MOUSEPAD                          = 4,
	DEVICE_KEYPAD                            = 5,
	DEVICE_SYSTEM                            = 6,
	DEVICE_SPEAKERS                          = 7,
	DEVICE_CHROMALINK                        = 8,
	DEVICE_ALL                               = 255,
	INVALID                                  = 256,
	EChromaSDKCoreDeviceTypeEnum_MAX         = 257,
};

// ScriptStruct ChromaSDKPlugin.ChromaSDKGuid
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FChromaSDKGuid final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChromaSDKGuid) == 0x000004, "Wrong alignment on FChromaSDKGuid");
static_assert(sizeof(FChromaSDKGuid) == 0x000010, "Wrong size on FChromaSDKGuid");

// ScriptStruct ChromaSDKPlugin.ChromaSDKEffectResult
// 0x0014 (0x0014 - 0x0000)
struct FChromaSDKEffectResult final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FChromaSDKGuid                         EffectId;                                          // 0x0004(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChromaSDKEffectResult) == 0x000004, "Wrong alignment on FChromaSDKEffectResult");
static_assert(sizeof(FChromaSDKEffectResult) == 0x000014, "Wrong size on FChromaSDKEffectResult");
static_assert(offsetof(FChromaSDKEffectResult, Result) == 0x000000, "Member 'FChromaSDKEffectResult::Result' has a wrong offset!");
static_assert(offsetof(FChromaSDKEffectResult, EffectId) == 0x000004, "Member 'FChromaSDKEffectResult::EffectId' has a wrong offset!");

// ScriptStruct ChromaSDKPlugin.ChromaSDKColors
// 0x0010 (0x0010 - 0x0000)
struct FChromaSDKColors final
{
public:
	TArray<struct FLinearColor>                   Colors;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChromaSDKColors) == 0x000008, "Wrong alignment on FChromaSDKColors");
static_assert(sizeof(FChromaSDKColors) == 0x000010, "Wrong size on FChromaSDKColors");
static_assert(offsetof(FChromaSDKColors, Colors) == 0x000000, "Member 'FChromaSDKColors::Colors' has a wrong offset!");

// ScriptStruct ChromaSDKPlugin.ChromaSDKColorFrame1D
// 0x0018 (0x0018 - 0x0000)
struct FChromaSDKColorFrame1D final
{
public:
	TArray<struct FLinearColor>                   Colors;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChromaSDKColorFrame1D) == 0x000008, "Wrong alignment on FChromaSDKColorFrame1D");
static_assert(sizeof(FChromaSDKColorFrame1D) == 0x000018, "Wrong size on FChromaSDKColorFrame1D");
static_assert(offsetof(FChromaSDKColorFrame1D, Colors) == 0x000000, "Member 'FChromaSDKColorFrame1D::Colors' has a wrong offset!");

// ScriptStruct ChromaSDKPlugin.ChromaSDKColorFrame2D
// 0x0018 (0x0018 - 0x0000)
struct FChromaSDKColorFrame2D final
{
public:
	TArray<struct FChromaSDKColors>               Colors;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChromaSDKColorFrame2D) == 0x000008, "Wrong alignment on FChromaSDKColorFrame2D");
static_assert(sizeof(FChromaSDKColorFrame2D) == 0x000018, "Wrong size on FChromaSDKColorFrame2D");
static_assert(offsetof(FChromaSDKColorFrame2D, Colors) == 0x000000, "Member 'FChromaSDKColorFrame2D::Colors' has a wrong offset!");

// ScriptStruct ChromaSDKPlugin.ChromaSDKAppInfoType
// 0x0048 (0x0048 - 0x0000)
struct FChromaSDKAppInfoType final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Author_Name;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Author_Contact;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SupportedDevice;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Category;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChromaSDKAppInfoType) == 0x000008, "Wrong alignment on FChromaSDKAppInfoType");
static_assert(sizeof(FChromaSDKAppInfoType) == 0x000048, "Wrong size on FChromaSDKAppInfoType");
static_assert(offsetof(FChromaSDKAppInfoType, Title) == 0x000000, "Member 'FChromaSDKAppInfoType::Title' has a wrong offset!");
static_assert(offsetof(FChromaSDKAppInfoType, Description) == 0x000010, "Member 'FChromaSDKAppInfoType::Description' has a wrong offset!");
static_assert(offsetof(FChromaSDKAppInfoType, Author_Name) == 0x000020, "Member 'FChromaSDKAppInfoType::Author_Name' has a wrong offset!");
static_assert(offsetof(FChromaSDKAppInfoType, Author_Contact) == 0x000030, "Member 'FChromaSDKAppInfoType::Author_Contact' has a wrong offset!");
static_assert(offsetof(FChromaSDKAppInfoType, SupportedDevice) == 0x000040, "Member 'FChromaSDKAppInfoType::SupportedDevice' has a wrong offset!");
static_assert(offsetof(FChromaSDKAppInfoType, Category) == 0x000044, "Member 'FChromaSDKAppInfoType::Category' has a wrong offset!");

// ScriptStruct ChromaSDKPlugin.ChromaSDKDeviceFrameIndex
// 0x0010 (0x0010 - 0x0000)
struct FChromaSDKDeviceFrameIndex final
{
public:
	TArray<int32>                                 FrameIndex;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChromaSDKDeviceFrameIndex) == 0x000008, "Wrong alignment on FChromaSDKDeviceFrameIndex");
static_assert(sizeof(FChromaSDKDeviceFrameIndex) == 0x000010, "Wrong size on FChromaSDKDeviceFrameIndex");
static_assert(offsetof(FChromaSDKDeviceFrameIndex, FrameIndex) == 0x000000, "Member 'FChromaSDKDeviceFrameIndex::FrameIndex' has a wrong offset!");

// ScriptStruct ChromaSDKPlugin.ChromaSDKSceneEffect
// 0x0038 (0x0038 - 0x0000)
struct FChromaSDKSceneEffect final
{
public:
	class FString                                 Animation;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          State;                                             // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PrimaryColor;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondaryColor;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Speed;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChromaSDKSceneBlend                          Blend;                                             // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChromaSDKSceneMode                           Mode;                                              // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FChromaSDKDeviceFrameIndex             FrameIndex;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChromaSDKSceneEffect) == 0x000008, "Wrong alignment on FChromaSDKSceneEffect");
static_assert(sizeof(FChromaSDKSceneEffect) == 0x000038, "Wrong size on FChromaSDKSceneEffect");
static_assert(offsetof(FChromaSDKSceneEffect, Animation) == 0x000000, "Member 'FChromaSDKSceneEffect::Animation' has a wrong offset!");
static_assert(offsetof(FChromaSDKSceneEffect, State) == 0x000010, "Member 'FChromaSDKSceneEffect::State' has a wrong offset!");
static_assert(offsetof(FChromaSDKSceneEffect, PrimaryColor) == 0x000014, "Member 'FChromaSDKSceneEffect::PrimaryColor' has a wrong offset!");
static_assert(offsetof(FChromaSDKSceneEffect, SecondaryColor) == 0x000018, "Member 'FChromaSDKSceneEffect::SecondaryColor' has a wrong offset!");
static_assert(offsetof(FChromaSDKSceneEffect, Speed) == 0x00001C, "Member 'FChromaSDKSceneEffect::Speed' has a wrong offset!");
static_assert(offsetof(FChromaSDKSceneEffect, Blend) == 0x000020, "Member 'FChromaSDKSceneEffect::Blend' has a wrong offset!");
static_assert(offsetof(FChromaSDKSceneEffect, Mode) == 0x000021, "Member 'FChromaSDKSceneEffect::Mode' has a wrong offset!");
static_assert(offsetof(FChromaSDKSceneEffect, FrameIndex) == 0x000028, "Member 'FChromaSDKSceneEffect::FrameIndex' has a wrong offset!");

// ScriptStruct ChromaSDKPlugin.ChromaSDKScene
// 0x0010 (0x0010 - 0x0000)
struct FChromaSDKScene final
{
public:
	TArray<struct FChromaSDKSceneEffect>          Effects;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChromaSDKScene) == 0x000008, "Wrong alignment on FChromaSDKScene");
static_assert(sizeof(FChromaSDKScene) == 0x000010, "Wrong size on FChromaSDKScene");
static_assert(offsetof(FChromaSDKScene, Effects) == 0x000000, "Member 'FChromaSDKScene::Effects' has a wrong offset!");

// ScriptStruct ChromaSDKPlugin.ChromaSDKDeviceInfoType
// 0x0008 (0x0008 - 0x0000)
struct FChromaSDKDeviceInfoType final
{
public:
	EChromaSDKCoreDeviceTypeEnum                  DeviceType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Connected;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChromaSDKDeviceInfoType) == 0x000004, "Wrong alignment on FChromaSDKDeviceInfoType");
static_assert(sizeof(FChromaSDKDeviceInfoType) == 0x000008, "Wrong size on FChromaSDKDeviceInfoType");
static_assert(offsetof(FChromaSDKDeviceInfoType, DeviceType) == 0x000000, "Member 'FChromaSDKDeviceInfoType::DeviceType' has a wrong offset!");
static_assert(offsetof(FChromaSDKDeviceInfoType, Connected) == 0x000004, "Member 'FChromaSDKDeviceInfoType::Connected' has a wrong offset!");

}

