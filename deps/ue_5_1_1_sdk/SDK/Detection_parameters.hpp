#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Detection

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Detection_structs.hpp"


namespace SDK::Params
{

// Function Detection.DetectableBaseComponent.BindShape
// 0x0008 (0x0008 - 0x0000)
struct DetectableBaseComponent_BindShape final
{
public:
	class UShapeComponent*                        NewShape;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DetectableBaseComponent_BindShape) == 0x000008, "Wrong alignment on DetectableBaseComponent_BindShape");
static_assert(sizeof(DetectableBaseComponent_BindShape) == 0x000008, "Wrong size on DetectableBaseComponent_BindShape");
static_assert(offsetof(DetectableBaseComponent_BindShape, NewShape) == 0x000000, "Member 'DetectableBaseComponent_BindShape::NewShape' has a wrong offset!");

// Function Detection.DetectableBaseComponent.GetShape
// 0x0008 (0x0008 - 0x0000)
struct DetectableBaseComponent_GetShape final
{
public:
	class UShapeComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DetectableBaseComponent_GetShape) == 0x000008, "Wrong alignment on DetectableBaseComponent_GetShape");
static_assert(sizeof(DetectableBaseComponent_GetShape) == 0x000008, "Wrong size on DetectableBaseComponent_GetShape");
static_assert(offsetof(DetectableBaseComponent_GetShape, ReturnValue) == 0x000000, "Member 'DetectableBaseComponent_GetShape::ReturnValue' has a wrong offset!");

// Function Detection.DetectableBaseComponent.GetShapeAsBox
// 0x0008 (0x0008 - 0x0000)
struct DetectableBaseComponent_GetShapeAsBox final
{
public:
	class UBoxComponent*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DetectableBaseComponent_GetShapeAsBox) == 0x000008, "Wrong alignment on DetectableBaseComponent_GetShapeAsBox");
static_assert(sizeof(DetectableBaseComponent_GetShapeAsBox) == 0x000008, "Wrong size on DetectableBaseComponent_GetShapeAsBox");
static_assert(offsetof(DetectableBaseComponent_GetShapeAsBox, ReturnValue) == 0x000000, "Member 'DetectableBaseComponent_GetShapeAsBox::ReturnValue' has a wrong offset!");

// Function Detection.DetectableBaseComponent.GetShapeAsCapsule
// 0x0008 (0x0008 - 0x0000)
struct DetectableBaseComponent_GetShapeAsCapsule final
{
public:
	class UCapsuleComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DetectableBaseComponent_GetShapeAsCapsule) == 0x000008, "Wrong alignment on DetectableBaseComponent_GetShapeAsCapsule");
static_assert(sizeof(DetectableBaseComponent_GetShapeAsCapsule) == 0x000008, "Wrong size on DetectableBaseComponent_GetShapeAsCapsule");
static_assert(offsetof(DetectableBaseComponent_GetShapeAsCapsule, ReturnValue) == 0x000000, "Member 'DetectableBaseComponent_GetShapeAsCapsule::ReturnValue' has a wrong offset!");

// Function Detection.DetectableBaseComponent.GetShapeAsSphere
// 0x0008 (0x0008 - 0x0000)
struct DetectableBaseComponent_GetShapeAsSphere final
{
public:
	class USphereComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DetectableBaseComponent_GetShapeAsSphere) == 0x000008, "Wrong alignment on DetectableBaseComponent_GetShapeAsSphere");
static_assert(sizeof(DetectableBaseComponent_GetShapeAsSphere) == 0x000008, "Wrong size on DetectableBaseComponent_GetShapeAsSphere");
static_assert(offsetof(DetectableBaseComponent_GetShapeAsSphere, ReturnValue) == 0x000000, "Member 'DetectableBaseComponent_GetShapeAsSphere::ReturnValue' has a wrong offset!");

// Function Detection.DetectableBaseComponent.ContainsPoint
// 0x0020 (0x0020 - 0x0000)
struct DetectableBaseComponent_ContainsPoint final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DetectableBaseComponent_ContainsPoint) == 0x000008, "Wrong alignment on DetectableBaseComponent_ContainsPoint");
static_assert(sizeof(DetectableBaseComponent_ContainsPoint) == 0x000020, "Wrong size on DetectableBaseComponent_ContainsPoint");
static_assert(offsetof(DetectableBaseComponent_ContainsPoint, WorldLocation) == 0x000000, "Member 'DetectableBaseComponent_ContainsPoint::WorldLocation' has a wrong offset!");
static_assert(offsetof(DetectableBaseComponent_ContainsPoint, ReturnValue) == 0x000018, "Member 'DetectableBaseComponent_ContainsPoint::ReturnValue' has a wrong offset!");

// Function Detection.DetectableBaseComponent.HasShape
// 0x0001 (0x0001 - 0x0000)
struct DetectableBaseComponent_HasShape final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DetectableBaseComponent_HasShape) == 0x000001, "Wrong alignment on DetectableBaseComponent_HasShape");
static_assert(sizeof(DetectableBaseComponent_HasShape) == 0x000001, "Wrong size on DetectableBaseComponent_HasShape");
static_assert(offsetof(DetectableBaseComponent_HasShape, ReturnValue) == 0x000000, "Member 'DetectableBaseComponent_HasShape::ReturnValue' has a wrong offset!");

// DelegateFunction Detection.RaycastDetectableComponent.DetectedBy__DelegateSignature
// 0x0110 (0x0110 - 0x0000)
struct RaycastDetectableComponent_DetectedBy__DelegateSignature final
{
public:
	class AActor*                                 Detector;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             CollisionChannel;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRaycastDetectableDetectEventData      Data;                                              // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0028(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaycastDetectableComponent_DetectedBy__DelegateSignature) == 0x000008, "Wrong alignment on RaycastDetectableComponent_DetectedBy__DelegateSignature");
static_assert(sizeof(RaycastDetectableComponent_DetectedBy__DelegateSignature) == 0x000110, "Wrong size on RaycastDetectableComponent_DetectedBy__DelegateSignature");
static_assert(offsetof(RaycastDetectableComponent_DetectedBy__DelegateSignature, Detector) == 0x000000, "Member 'RaycastDetectableComponent_DetectedBy__DelegateSignature::Detector' has a wrong offset!");
static_assert(offsetof(RaycastDetectableComponent_DetectedBy__DelegateSignature, CollisionChannel) == 0x000008, "Member 'RaycastDetectableComponent_DetectedBy__DelegateSignature::CollisionChannel' has a wrong offset!");
static_assert(offsetof(RaycastDetectableComponent_DetectedBy__DelegateSignature, Data) == 0x000010, "Member 'RaycastDetectableComponent_DetectedBy__DelegateSignature::Data' has a wrong offset!");
static_assert(offsetof(RaycastDetectableComponent_DetectedBy__DelegateSignature, HitResult) == 0x000028, "Member 'RaycastDetectableComponent_DetectedBy__DelegateSignature::HitResult' has a wrong offset!");

// Function Detection.RaycastDetectableComponent.DisableDetectionOnChannel
// 0x0002 (0x0002 - 0x0000)
struct RaycastDetectableComponent_DisableDetectionOnChannel final
{
public:
	ECollisionChannel                             CollisionChannel;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaycastDetectableComponent_DisableDetectionOnChannel) == 0x000001, "Wrong alignment on RaycastDetectableComponent_DisableDetectionOnChannel");
static_assert(sizeof(RaycastDetectableComponent_DisableDetectionOnChannel) == 0x000002, "Wrong size on RaycastDetectableComponent_DisableDetectionOnChannel");
static_assert(offsetof(RaycastDetectableComponent_DisableDetectionOnChannel, CollisionChannel) == 0x000000, "Member 'RaycastDetectableComponent_DisableDetectionOnChannel::CollisionChannel' has a wrong offset!");
static_assert(offsetof(RaycastDetectableComponent_DisableDetectionOnChannel, ReturnValue) == 0x000001, "Member 'RaycastDetectableComponent_DisableDetectionOnChannel::ReturnValue' has a wrong offset!");

// Function Detection.RaycastDetectableComponent.EnableDetectionOnChannel
// 0x0002 (0x0002 - 0x0000)
struct RaycastDetectableComponent_EnableDetectionOnChannel final
{
public:
	ECollisionChannel                             CollisionChannel;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaycastDetectableComponent_EnableDetectionOnChannel) == 0x000001, "Wrong alignment on RaycastDetectableComponent_EnableDetectionOnChannel");
static_assert(sizeof(RaycastDetectableComponent_EnableDetectionOnChannel) == 0x000002, "Wrong size on RaycastDetectableComponent_EnableDetectionOnChannel");
static_assert(offsetof(RaycastDetectableComponent_EnableDetectionOnChannel, CollisionChannel) == 0x000000, "Member 'RaycastDetectableComponent_EnableDetectionOnChannel::CollisionChannel' has a wrong offset!");
static_assert(offsetof(RaycastDetectableComponent_EnableDetectionOnChannel, ReturnValue) == 0x000001, "Member 'RaycastDetectableComponent_EnableDetectionOnChannel::ReturnValue' has a wrong offset!");

// Function Detection.RaycastDetectableComponent.GetWasEverDetected
// 0x0001 (0x0001 - 0x0000)
struct RaycastDetectableComponent_GetWasEverDetected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaycastDetectableComponent_GetWasEverDetected) == 0x000001, "Wrong alignment on RaycastDetectableComponent_GetWasEverDetected");
static_assert(sizeof(RaycastDetectableComponent_GetWasEverDetected) == 0x000001, "Wrong size on RaycastDetectableComponent_GetWasEverDetected");
static_assert(offsetof(RaycastDetectableComponent_GetWasEverDetected, ReturnValue) == 0x000000, "Member 'RaycastDetectableComponent_GetWasEverDetected::ReturnValue' has a wrong offset!");

// Function Detection.RaycastDetectableComponent.LoseDetectorsOnChannel
// 0x0001 (0x0001 - 0x0000)
struct RaycastDetectableComponent_LoseDetectorsOnChannel final
{
public:
	ECollisionChannel                             CollisionChannel;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaycastDetectableComponent_LoseDetectorsOnChannel) == 0x000001, "Wrong alignment on RaycastDetectableComponent_LoseDetectorsOnChannel");
static_assert(sizeof(RaycastDetectableComponent_LoseDetectorsOnChannel) == 0x000001, "Wrong size on RaycastDetectableComponent_LoseDetectorsOnChannel");
static_assert(offsetof(RaycastDetectableComponent_LoseDetectorsOnChannel, CollisionChannel) == 0x000000, "Member 'RaycastDetectableComponent_LoseDetectorsOnChannel::CollisionChannel' has a wrong offset!");

// DelegateFunction Detection.RaycastDetectableComponent.LostBy__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct RaycastDetectableComponent_LostBy__DelegateSignature final
{
public:
	class AActor*                                 Detector;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             CollisionChannel;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRaycastDetectableLoseEventData        Data;                                              // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaycastDetectableComponent_LostBy__DelegateSignature) == 0x000008, "Wrong alignment on RaycastDetectableComponent_LostBy__DelegateSignature");
static_assert(sizeof(RaycastDetectableComponent_LostBy__DelegateSignature) == 0x000028, "Wrong size on RaycastDetectableComponent_LostBy__DelegateSignature");
static_assert(offsetof(RaycastDetectableComponent_LostBy__DelegateSignature, Detector) == 0x000000, "Member 'RaycastDetectableComponent_LostBy__DelegateSignature::Detector' has a wrong offset!");
static_assert(offsetof(RaycastDetectableComponent_LostBy__DelegateSignature, CollisionChannel) == 0x000008, "Member 'RaycastDetectableComponent_LostBy__DelegateSignature::CollisionChannel' has a wrong offset!");
static_assert(offsetof(RaycastDetectableComponent_LostBy__DelegateSignature, Data) == 0x000010, "Member 'RaycastDetectableComponent_LostBy__DelegateSignature::Data' has a wrong offset!");

// Function Detection.RaycastDetectableComponent.CanBeDetectedByActor
// 0x0010 (0x0010 - 0x0000)
struct RaycastDetectableComponent_CanBeDetectedByActor final
{
public:
	class AActor*                                 Detector;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaycastDetectableComponent_CanBeDetectedByActor) == 0x000008, "Wrong alignment on RaycastDetectableComponent_CanBeDetectedByActor");
static_assert(sizeof(RaycastDetectableComponent_CanBeDetectedByActor) == 0x000010, "Wrong size on RaycastDetectableComponent_CanBeDetectedByActor");
static_assert(offsetof(RaycastDetectableComponent_CanBeDetectedByActor, Detector) == 0x000000, "Member 'RaycastDetectableComponent_CanBeDetectedByActor::Detector' has a wrong offset!");
static_assert(offsetof(RaycastDetectableComponent_CanBeDetectedByActor, Distance) == 0x000008, "Member 'RaycastDetectableComponent_CanBeDetectedByActor::Distance' has a wrong offset!");
static_assert(offsetof(RaycastDetectableComponent_CanBeDetectedByActor, ReturnValue) == 0x00000C, "Member 'RaycastDetectableComponent_CanBeDetectedByActor::ReturnValue' has a wrong offset!");

// Function Detection.RaycastDetectableComponent.CanBeDetectedByActorOnChannel
// 0x0018 (0x0018 - 0x0000)
struct RaycastDetectableComponent_CanBeDetectedByActorOnChannel final
{
public:
	class AActor*                                 Detector;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             CollisionChannel;                                  // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaycastDetectableComponent_CanBeDetectedByActorOnChannel) == 0x000008, "Wrong alignment on RaycastDetectableComponent_CanBeDetectedByActorOnChannel");
static_assert(sizeof(RaycastDetectableComponent_CanBeDetectedByActorOnChannel) == 0x000018, "Wrong size on RaycastDetectableComponent_CanBeDetectedByActorOnChannel");
static_assert(offsetof(RaycastDetectableComponent_CanBeDetectedByActorOnChannel, Detector) == 0x000000, "Member 'RaycastDetectableComponent_CanBeDetectedByActorOnChannel::Detector' has a wrong offset!");
static_assert(offsetof(RaycastDetectableComponent_CanBeDetectedByActorOnChannel, CollisionChannel) == 0x000008, "Member 'RaycastDetectableComponent_CanBeDetectedByActorOnChannel::CollisionChannel' has a wrong offset!");
static_assert(offsetof(RaycastDetectableComponent_CanBeDetectedByActorOnChannel, Distance) == 0x00000C, "Member 'RaycastDetectableComponent_CanBeDetectedByActorOnChannel::Distance' has a wrong offset!");
static_assert(offsetof(RaycastDetectableComponent_CanBeDetectedByActorOnChannel, ReturnValue) == 0x000010, "Member 'RaycastDetectableComponent_CanBeDetectedByActorOnChannel::ReturnValue' has a wrong offset!");

// Function Detection.RaycastDetectableComponent.CanBeDetectedOnChannel
// 0x0002 (0x0002 - 0x0000)
struct RaycastDetectableComponent_CanBeDetectedOnChannel final
{
public:
	ECollisionChannel                             CollisionChannel;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaycastDetectableComponent_CanBeDetectedOnChannel) == 0x000001, "Wrong alignment on RaycastDetectableComponent_CanBeDetectedOnChannel");
static_assert(sizeof(RaycastDetectableComponent_CanBeDetectedOnChannel) == 0x000002, "Wrong size on RaycastDetectableComponent_CanBeDetectedOnChannel");
static_assert(offsetof(RaycastDetectableComponent_CanBeDetectedOnChannel, CollisionChannel) == 0x000000, "Member 'RaycastDetectableComponent_CanBeDetectedOnChannel::CollisionChannel' has a wrong offset!");
static_assert(offsetof(RaycastDetectableComponent_CanBeDetectedOnChannel, ReturnValue) == 0x000001, "Member 'RaycastDetectableComponent_CanBeDetectedOnChannel::ReturnValue' has a wrong offset!");

// Function Detection.RaycastDetectableComponent.GetDistanceMethodForChannel
// 0x0002 (0x0002 - 0x0000)
struct RaycastDetectableComponent_GetDistanceMethodForChannel final
{
public:
	ECollisionChannel                             CollisionChannel;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaycastDetectableDistanceMethod              ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaycastDetectableComponent_GetDistanceMethodForChannel) == 0x000001, "Wrong alignment on RaycastDetectableComponent_GetDistanceMethodForChannel");
static_assert(sizeof(RaycastDetectableComponent_GetDistanceMethodForChannel) == 0x000002, "Wrong size on RaycastDetectableComponent_GetDistanceMethodForChannel");
static_assert(offsetof(RaycastDetectableComponent_GetDistanceMethodForChannel, CollisionChannel) == 0x000000, "Member 'RaycastDetectableComponent_GetDistanceMethodForChannel::CollisionChannel' has a wrong offset!");
static_assert(offsetof(RaycastDetectableComponent_GetDistanceMethodForChannel, ReturnValue) == 0x000001, "Member 'RaycastDetectableComponent_GetDistanceMethodForChannel::ReturnValue' has a wrong offset!");

// Function Detection.RaycastDetectableComponent.IsDetectedByActor
// 0x0010 (0x0010 - 0x0000)
struct RaycastDetectableComponent_IsDetectedByActor final
{
public:
	class AActor*                                 Detector;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaycastDetectableComponent_IsDetectedByActor) == 0x000008, "Wrong alignment on RaycastDetectableComponent_IsDetectedByActor");
static_assert(sizeof(RaycastDetectableComponent_IsDetectedByActor) == 0x000010, "Wrong size on RaycastDetectableComponent_IsDetectedByActor");
static_assert(offsetof(RaycastDetectableComponent_IsDetectedByActor, Detector) == 0x000000, "Member 'RaycastDetectableComponent_IsDetectedByActor::Detector' has a wrong offset!");
static_assert(offsetof(RaycastDetectableComponent_IsDetectedByActor, ReturnValue) == 0x000008, "Member 'RaycastDetectableComponent_IsDetectedByActor::ReturnValue' has a wrong offset!");

// Function Detection.RaycastDetectableComponent.IsDetectedByActorOnChannel
// 0x0010 (0x0010 - 0x0000)
struct RaycastDetectableComponent_IsDetectedByActorOnChannel final
{
public:
	class AActor*                                 Detector;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             CollisionChannel;                                  // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaycastDetectableComponent_IsDetectedByActorOnChannel) == 0x000008, "Wrong alignment on RaycastDetectableComponent_IsDetectedByActorOnChannel");
static_assert(sizeof(RaycastDetectableComponent_IsDetectedByActorOnChannel) == 0x000010, "Wrong size on RaycastDetectableComponent_IsDetectedByActorOnChannel");
static_assert(offsetof(RaycastDetectableComponent_IsDetectedByActorOnChannel, Detector) == 0x000000, "Member 'RaycastDetectableComponent_IsDetectedByActorOnChannel::Detector' has a wrong offset!");
static_assert(offsetof(RaycastDetectableComponent_IsDetectedByActorOnChannel, CollisionChannel) == 0x000008, "Member 'RaycastDetectableComponent_IsDetectedByActorOnChannel::CollisionChannel' has a wrong offset!");
static_assert(offsetof(RaycastDetectableComponent_IsDetectedByActorOnChannel, ReturnValue) == 0x000009, "Member 'RaycastDetectableComponent_IsDetectedByActorOnChannel::ReturnValue' has a wrong offset!");

// Function Detection.RaycastDetectableComponent.IsDetectedOnChannel
// 0x0002 (0x0002 - 0x0000)
struct RaycastDetectableComponent_IsDetectedOnChannel final
{
public:
	ECollisionChannel                             CollisionChannel;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaycastDetectableComponent_IsDetectedOnChannel) == 0x000001, "Wrong alignment on RaycastDetectableComponent_IsDetectedOnChannel");
static_assert(sizeof(RaycastDetectableComponent_IsDetectedOnChannel) == 0x000002, "Wrong size on RaycastDetectableComponent_IsDetectedOnChannel");
static_assert(offsetof(RaycastDetectableComponent_IsDetectedOnChannel, CollisionChannel) == 0x000000, "Member 'RaycastDetectableComponent_IsDetectedOnChannel::CollisionChannel' has a wrong offset!");
static_assert(offsetof(RaycastDetectableComponent_IsDetectedOnChannel, ReturnValue) == 0x000001, "Member 'RaycastDetectableComponent_IsDetectedOnChannel::ReturnValue' has a wrong offset!");

// Function Detection.RaycastDetectableComponent.IsUsingChannel
// 0x0003 (0x0003 - 0x0000)
struct RaycastDetectableComponent_IsUsingChannel final
{
public:
	ECollisionChannel                             CollisionChannel;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MustBeEnabled;                                     // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaycastDetectableComponent_IsUsingChannel) == 0x000001, "Wrong alignment on RaycastDetectableComponent_IsUsingChannel");
static_assert(sizeof(RaycastDetectableComponent_IsUsingChannel) == 0x000003, "Wrong size on RaycastDetectableComponent_IsUsingChannel");
static_assert(offsetof(RaycastDetectableComponent_IsUsingChannel, CollisionChannel) == 0x000000, "Member 'RaycastDetectableComponent_IsUsingChannel::CollisionChannel' has a wrong offset!");
static_assert(offsetof(RaycastDetectableComponent_IsUsingChannel, MustBeEnabled) == 0x000001, "Member 'RaycastDetectableComponent_IsUsingChannel::MustBeEnabled' has a wrong offset!");
static_assert(offsetof(RaycastDetectableComponent_IsUsingChannel, ReturnValue) == 0x000002, "Member 'RaycastDetectableComponent_IsUsingChannel::ReturnValue' has a wrong offset!");

// Function Detection.RaycastDetectorComponent.LoseDetectedObjects
// 0x0120 (0x0120 - 0x0000)
struct RaycastDetectorComponent_LoseDetectedObjects final
{
public:
	struct FRaycastDetectorTraceData              Data;                                              // 0x0000(0x0120)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaycastDetectorComponent_LoseDetectedObjects) == 0x000008, "Wrong alignment on RaycastDetectorComponent_LoseDetectedObjects");
static_assert(sizeof(RaycastDetectorComponent_LoseDetectedObjects) == 0x000120, "Wrong size on RaycastDetectorComponent_LoseDetectedObjects");
static_assert(offsetof(RaycastDetectorComponent_LoseDetectedObjects, Data) == 0x000000, "Member 'RaycastDetectorComponent_LoseDetectedObjects::Data' has a wrong offset!");

// Function Detection.RaycastDetectorComponent.ProcessData
// 0x0150 (0x0150 - 0x0000)
struct RaycastDetectorComponent_ProcessData final
{
public:
	struct FRaycastDetectorTraceData              Data;                                              // 0x0000(0x0120)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FVector                                TraceStart;                                        // 0x0120(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceEnd;                                          // 0x0138(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaycastDetectorComponent_ProcessData) == 0x000008, "Wrong alignment on RaycastDetectorComponent_ProcessData");
static_assert(sizeof(RaycastDetectorComponent_ProcessData) == 0x000150, "Wrong size on RaycastDetectorComponent_ProcessData");
static_assert(offsetof(RaycastDetectorComponent_ProcessData, Data) == 0x000000, "Member 'RaycastDetectorComponent_ProcessData::Data' has a wrong offset!");
static_assert(offsetof(RaycastDetectorComponent_ProcessData, TraceStart) == 0x000120, "Member 'RaycastDetectorComponent_ProcessData::TraceStart' has a wrong offset!");
static_assert(offsetof(RaycastDetectorComponent_ProcessData, TraceEnd) == 0x000138, "Member 'RaycastDetectorComponent_ProcessData::TraceEnd' has a wrong offset!");

// DelegateFunction Detection.ScreenDetectableComponent.Detected__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ScreenDetectableComponent_Detected__DelegateSignature final
{
public:
	class UScreenDetectableComponent*             Detectable;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenDetectableComponent_Detected__DelegateSignature) == 0x000008, "Wrong alignment on ScreenDetectableComponent_Detected__DelegateSignature");
static_assert(sizeof(ScreenDetectableComponent_Detected__DelegateSignature) == 0x000008, "Wrong size on ScreenDetectableComponent_Detected__DelegateSignature");
static_assert(offsetof(ScreenDetectableComponent_Detected__DelegateSignature, Detectable) == 0x000000, "Member 'ScreenDetectableComponent_Detected__DelegateSignature::Detectable' has a wrong offset!");

// DelegateFunction Detection.ScreenDetectableComponent.Lost__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ScreenDetectableComponent_Lost__DelegateSignature final
{
public:
	class UScreenDetectableComponent*             Detectable;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenDetectableComponent_Lost__DelegateSignature) == 0x000008, "Wrong alignment on ScreenDetectableComponent_Lost__DelegateSignature");
static_assert(sizeof(ScreenDetectableComponent_Lost__DelegateSignature) == 0x000008, "Wrong size on ScreenDetectableComponent_Lost__DelegateSignature");
static_assert(offsetof(ScreenDetectableComponent_Lost__DelegateSignature, Detectable) == 0x000000, "Member 'ScreenDetectableComponent_Lost__DelegateSignature::Detectable' has a wrong offset!");

// Function Detection.ScreenDetectableComponent.SetDetectionEnabled
// 0x0010 (0x0010 - 0x0000)
struct ScreenDetectableComponent_SetDetectionEnabled final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScreenDetectableComponent_SetDetectionEnabled) == 0x000008, "Wrong alignment on ScreenDetectableComponent_SetDetectionEnabled");
static_assert(sizeof(ScreenDetectableComponent_SetDetectionEnabled) == 0x000010, "Wrong size on ScreenDetectableComponent_SetDetectionEnabled");
static_assert(offsetof(ScreenDetectableComponent_SetDetectionEnabled, Object) == 0x000000, "Member 'ScreenDetectableComponent_SetDetectionEnabled::Object' has a wrong offset!");
static_assert(offsetof(ScreenDetectableComponent_SetDetectionEnabled, Enabled) == 0x000008, "Member 'ScreenDetectableComponent_SetDetectionEnabled::Enabled' has a wrong offset!");

// Function Detection.ScreenDetectableComponent.GetCurrentStatus
// 0x0001 (0x0001 - 0x0000)
struct ScreenDetectableComponent_GetCurrentStatus final
{
public:
	EScreenDetectableStatus                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenDetectableComponent_GetCurrentStatus) == 0x000001, "Wrong alignment on ScreenDetectableComponent_GetCurrentStatus");
static_assert(sizeof(ScreenDetectableComponent_GetCurrentStatus) == 0x000001, "Wrong size on ScreenDetectableComponent_GetCurrentStatus");
static_assert(offsetof(ScreenDetectableComponent_GetCurrentStatus, ReturnValue) == 0x000000, "Member 'ScreenDetectableComponent_GetCurrentStatus::ReturnValue' has a wrong offset!");

// Function Detection.ScreenDetectableComponent.IsDetected
// 0x0001 (0x0001 - 0x0000)
struct ScreenDetectableComponent_IsDetected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenDetectableComponent_IsDetected) == 0x000001, "Wrong alignment on ScreenDetectableComponent_IsDetected");
static_assert(sizeof(ScreenDetectableComponent_IsDetected) == 0x000001, "Wrong size on ScreenDetectableComponent_IsDetected");
static_assert(offsetof(ScreenDetectableComponent_IsDetected, ReturnValue) == 0x000000, "Member 'ScreenDetectableComponent_IsDetected::ReturnValue' has a wrong offset!");

// Function Detection.ScreenDetectableComponent.IsDetectionEnabled
// 0x0001 (0x0001 - 0x0000)
struct ScreenDetectableComponent_IsDetectionEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenDetectableComponent_IsDetectionEnabled) == 0x000001, "Wrong alignment on ScreenDetectableComponent_IsDetectionEnabled");
static_assert(sizeof(ScreenDetectableComponent_IsDetectionEnabled) == 0x000001, "Wrong size on ScreenDetectableComponent_IsDetectionEnabled");
static_assert(offsetof(ScreenDetectableComponent_IsDetectionEnabled, ReturnValue) == 0x000000, "Member 'ScreenDetectableComponent_IsDetectionEnabled::ReturnValue' has a wrong offset!");

}

