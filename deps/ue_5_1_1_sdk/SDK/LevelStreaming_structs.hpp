#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LevelStreaming

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum LevelStreaming.EStreamableLevelStatus
// NumValues: 0x0004
enum class EStreamableLevelStatus : uint8
{
	Unloaded                                 = 0,
	LoadedHidden                             = 1,
	LoadedVisible                            = 2,
	EStreamableLevelStatus_MAX               = 3,
};

// Enum LevelStreaming.ELevelStreamingManagerInitializationStatus
// NumValues: 0x0004
enum class ELevelStreamingManagerInitializationStatus : uint8
{
	NotInitialized                           = 0,
	InitializedPartially                     = 1,
	Initialized                              = 2,
	ELevelStreamingManagerInitializationStatus_MAX = 3,
};

// Enum LevelStreaming.EStreamingIntegrationSpeed
// NumValues: 0x0004
enum class EStreamingIntegrationSpeed : uint8
{
	ESIS_Low                                 = 0,
	ESIS_Normal                              = 1,
	ESIS_High                                = 2,
	ESIS_MAX                                 = 3,
};

// Enum LevelStreaming.ELevelStreamingTaskWorkType
// NumValues: 0x0007
enum class ELevelStreamingTaskWorkType : uint8
{
	None                                     = 0,
	LoadVisible                              = 1,
	LoadHidden                               = 2,
	Unload                                   = 3,
	Show                                     = 4,
	Hide                                     = 5,
	ELevelStreamingTaskWorkType_MAX          = 6,
};

// Enum LevelStreaming.EStreamableLevelType
// NumValues: 0x0004
enum class EStreamableLevelType : uint8
{
	Unknown                                  = 0,
	Normal                                   = 1,
	LightingScenario                         = 2,
	EStreamableLevelType_MAX                 = 3,
};

// ScriptStruct LevelStreaming.StreamableLevelBatchHandle
// 0x0008 (0x0008 - 0x0000)
struct FStreamableLevelBatchHandle final
{
public:
	class FName                                   UniqueBatchId;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FStreamableLevelBatchHandle) == 0x000004, "Wrong alignment on FStreamableLevelBatchHandle");
static_assert(sizeof(FStreamableLevelBatchHandle) == 0x000008, "Wrong size on FStreamableLevelBatchHandle");
static_assert(offsetof(FStreamableLevelBatchHandle, UniqueBatchId) == 0x000000, "Member 'FStreamableLevelBatchHandle::UniqueBatchId' has a wrong offset!");

// ScriptStruct LevelStreaming.LevelStreamingEngineLimits
// 0x001C (0x001C - 0x0000)
struct FLevelStreamingEngineLimits final
{
public:
	float                                         AsyncLoadingTimeLimit;                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PriorityAsyncLoadingExtraTime;                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActorInitializationUpdateTimeLimit;                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComponentsRegistrationGranularity;                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComponentUnregisterUpdateTimeLimit;                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComponentsUnregistrationGranularity;               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceGCAfterLevelStreamedOut;                      // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLevelStreamingEngineLimits) == 0x000004, "Wrong alignment on FLevelStreamingEngineLimits");
static_assert(sizeof(FLevelStreamingEngineLimits) == 0x00001C, "Wrong size on FLevelStreamingEngineLimits");
static_assert(offsetof(FLevelStreamingEngineLimits, AsyncLoadingTimeLimit) == 0x000000, "Member 'FLevelStreamingEngineLimits::AsyncLoadingTimeLimit' has a wrong offset!");
static_assert(offsetof(FLevelStreamingEngineLimits, PriorityAsyncLoadingExtraTime) == 0x000004, "Member 'FLevelStreamingEngineLimits::PriorityAsyncLoadingExtraTime' has a wrong offset!");
static_assert(offsetof(FLevelStreamingEngineLimits, ActorInitializationUpdateTimeLimit) == 0x000008, "Member 'FLevelStreamingEngineLimits::ActorInitializationUpdateTimeLimit' has a wrong offset!");
static_assert(offsetof(FLevelStreamingEngineLimits, ComponentsRegistrationGranularity) == 0x00000C, "Member 'FLevelStreamingEngineLimits::ComponentsRegistrationGranularity' has a wrong offset!");
static_assert(offsetof(FLevelStreamingEngineLimits, ComponentUnregisterUpdateTimeLimit) == 0x000010, "Member 'FLevelStreamingEngineLimits::ComponentUnregisterUpdateTimeLimit' has a wrong offset!");
static_assert(offsetof(FLevelStreamingEngineLimits, ComponentsUnregistrationGranularity) == 0x000014, "Member 'FLevelStreamingEngineLimits::ComponentsUnregistrationGranularity' has a wrong offset!");
static_assert(offsetof(FLevelStreamingEngineLimits, ForceGCAfterLevelStreamedOut) == 0x000018, "Member 'FLevelStreamingEngineLimits::ForceGCAfterLevelStreamedOut' has a wrong offset!");

// ScriptStruct LevelStreaming.StreamableLevelHandle
// 0x0008 (0x0008 - 0x0000)
struct FStreamableLevelHandle final
{
public:
	class FName                                   UniqueLevelId;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FStreamableLevelHandle) == 0x000004, "Wrong alignment on FStreamableLevelHandle");
static_assert(sizeof(FStreamableLevelHandle) == 0x000008, "Wrong size on FStreamableLevelHandle");
static_assert(offsetof(FStreamableLevelHandle, UniqueLevelId) == 0x000000, "Member 'FStreamableLevelHandle::UniqueLevelId' has a wrong offset!");

// ScriptStruct LevelStreaming.LevelStreamingActorAtachmentData
// 0x0080 (0x0080 - 0x0000)
struct FLevelStreamingActorAtachmentData final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ComponentName;                                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Offset;                                            // 0x0020(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelStreamingActorAtachmentData) == 0x000010, "Wrong alignment on FLevelStreamingActorAtachmentData");
static_assert(sizeof(FLevelStreamingActorAtachmentData) == 0x000080, "Wrong size on FLevelStreamingActorAtachmentData");
static_assert(offsetof(FLevelStreamingActorAtachmentData, Guid) == 0x000000, "Member 'FLevelStreamingActorAtachmentData::Guid' has a wrong offset!");
static_assert(offsetof(FLevelStreamingActorAtachmentData, ComponentName) == 0x000010, "Member 'FLevelStreamingActorAtachmentData::ComponentName' has a wrong offset!");
static_assert(offsetof(FLevelStreamingActorAtachmentData, SocketName) == 0x000018, "Member 'FLevelStreamingActorAtachmentData::SocketName' has a wrong offset!");
static_assert(offsetof(FLevelStreamingActorAtachmentData, Offset) == 0x000020, "Member 'FLevelStreamingActorAtachmentData::Offset' has a wrong offset!");

// ScriptStruct LevelStreaming.LevelStreamingComponentData
// 0x0018 (0x0018 - 0x0000)
struct FLevelStreamingComponentData final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Properties;                                        // 0x0008(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelStreamingComponentData) == 0x000008, "Wrong alignment on FLevelStreamingComponentData");
static_assert(sizeof(FLevelStreamingComponentData) == 0x000018, "Wrong size on FLevelStreamingComponentData");
static_assert(offsetof(FLevelStreamingComponentData, Name) == 0x000000, "Member 'FLevelStreamingComponentData::Name' has a wrong offset!");
static_assert(offsetof(FLevelStreamingComponentData, Properties) == 0x000008, "Member 'FLevelStreamingComponentData::Properties' has a wrong offset!");

// ScriptStruct LevelStreaming.LevelStreamingActorData
// 0x0030 (0x0030 - 0x0000)
struct FLevelStreamingActorData final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Properties;                                        // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLevelStreamingComponentData>   Components;                                        // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelStreamingActorData) == 0x000008, "Wrong alignment on FLevelStreamingActorData");
static_assert(sizeof(FLevelStreamingActorData) == 0x000030, "Wrong size on FLevelStreamingActorData");
static_assert(offsetof(FLevelStreamingActorData, Guid) == 0x000000, "Member 'FLevelStreamingActorData::Guid' has a wrong offset!");
static_assert(offsetof(FLevelStreamingActorData, Properties) == 0x000010, "Member 'FLevelStreamingActorData::Properties' has a wrong offset!");
static_assert(offsetof(FLevelStreamingActorData, Components) == 0x000020, "Member 'FLevelStreamingActorData::Components' has a wrong offset!");

// ScriptStruct LevelStreaming.LevelStreamingCachedActorData
// 0x0068 (0x0068 - 0x0000)
struct FLevelStreamingCachedActorData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftClassPath                         Class;                                             // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class AActor>                  Actor;                                             // 0x0028(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  Guid;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FLevelStreamingCachedActorData) == 0x000008, "Wrong alignment on FLevelStreamingCachedActorData");
static_assert(sizeof(FLevelStreamingCachedActorData) == 0x000068, "Wrong size on FLevelStreamingCachedActorData");
static_assert(offsetof(FLevelStreamingCachedActorData, Class) == 0x000008, "Member 'FLevelStreamingCachedActorData::Class' has a wrong offset!");
static_assert(offsetof(FLevelStreamingCachedActorData, Actor) == 0x000028, "Member 'FLevelStreamingCachedActorData::Actor' has a wrong offset!");
static_assert(offsetof(FLevelStreamingCachedActorData, Guid) == 0x000058, "Member 'FLevelStreamingCachedActorData::Guid' has a wrong offset!");

// ScriptStruct LevelStreaming.LevelStreamingRequestElement
// 0x0020 (0x0020 - 0x0000)
struct FLevelStreamingRequestElement final
{
public:
	EStreamableLevelStatus                        Status;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          AbandonIfLockhartElem;                             // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStreamableLevelBatchHandle>    Batches;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FLevelStreamingRequestElement) == 0x000008, "Wrong alignment on FLevelStreamingRequestElement");
static_assert(sizeof(FLevelStreamingRequestElement) == 0x000020, "Wrong size on FLevelStreamingRequestElement");
static_assert(offsetof(FLevelStreamingRequestElement, Status) == 0x000000, "Member 'FLevelStreamingRequestElement::Status' has a wrong offset!");
static_assert(offsetof(FLevelStreamingRequestElement, Priority) == 0x000004, "Member 'FLevelStreamingRequestElement::Priority' has a wrong offset!");
static_assert(offsetof(FLevelStreamingRequestElement, AbandonIfLockhartElem) == 0x000008, "Member 'FLevelStreamingRequestElement::AbandonIfLockhartElem' has a wrong offset!");
static_assert(offsetof(FLevelStreamingRequestElement, Batches) == 0x000010, "Member 'FLevelStreamingRequestElement::Batches' has a wrong offset!");

// ScriptStruct LevelStreaming.LevelStreamingRequest
// 0x0038 (0x0038 - 0x0000)
struct FLevelStreamingRequest final
{
public:
	class FName                                   UniqueName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   Name;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ModifyUnspecifiedLevels;                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UnspecifiedLevelPriority;                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EStreamableLevelStatus                        UnspecifiedLevelStatus;                            // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          AbandonIfLockhart;                                 // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLevelStreamingRequestElement>  Elements;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class ULevelStreamingRequests*                Requests;                                          // 0x0030(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FLevelStreamingRequest) == 0x000008, "Wrong alignment on FLevelStreamingRequest");
static_assert(sizeof(FLevelStreamingRequest) == 0x000038, "Wrong size on FLevelStreamingRequest");
static_assert(offsetof(FLevelStreamingRequest, UniqueName) == 0x000000, "Member 'FLevelStreamingRequest::UniqueName' has a wrong offset!");
static_assert(offsetof(FLevelStreamingRequest, Name) == 0x000008, "Member 'FLevelStreamingRequest::Name' has a wrong offset!");
static_assert(offsetof(FLevelStreamingRequest, ModifyUnspecifiedLevels) == 0x000010, "Member 'FLevelStreamingRequest::ModifyUnspecifiedLevels' has a wrong offset!");
static_assert(offsetof(FLevelStreamingRequest, UnspecifiedLevelPriority) == 0x000014, "Member 'FLevelStreamingRequest::UnspecifiedLevelPriority' has a wrong offset!");
static_assert(offsetof(FLevelStreamingRequest, UnspecifiedLevelStatus) == 0x000018, "Member 'FLevelStreamingRequest::UnspecifiedLevelStatus' has a wrong offset!");
static_assert(offsetof(FLevelStreamingRequest, AbandonIfLockhart) == 0x000019, "Member 'FLevelStreamingRequest::AbandonIfLockhart' has a wrong offset!");
static_assert(offsetof(FLevelStreamingRequest, Elements) == 0x000020, "Member 'FLevelStreamingRequest::Elements' has a wrong offset!");
static_assert(offsetof(FLevelStreamingRequest, Requests) == 0x000030, "Member 'FLevelStreamingRequest::Requests' has a wrong offset!");

// ScriptStruct LevelStreaming.LevelStreamingRequestHandle
// 0x0010 (0x0010 - 0x0000)
struct FLevelStreamingRequestHandle final
{
public:
	class FName                                   UniqueRequestId;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULevelStreamingRequests*                Requests;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FLevelStreamingRequestHandle) == 0x000008, "Wrong alignment on FLevelStreamingRequestHandle");
static_assert(sizeof(FLevelStreamingRequestHandle) == 0x000010, "Wrong size on FLevelStreamingRequestHandle");
static_assert(offsetof(FLevelStreamingRequestHandle, UniqueRequestId) == 0x000000, "Member 'FLevelStreamingRequestHandle::UniqueRequestId' has a wrong offset!");
static_assert(offsetof(FLevelStreamingRequestHandle, Requests) == 0x000008, "Member 'FLevelStreamingRequestHandle::Requests' has a wrong offset!");

// ScriptStruct LevelStreaming.LevelStreamingRequestBatchState
// 0x0010 (0x0010 - 0x0000)
struct FLevelStreamingRequestBatchState final
{
public:
	class UStreamableLevelBatchState*             Batch;                                             // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStreamableLevelStatus                        Status;                                            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelStreamingRequestBatchState) == 0x000008, "Wrong alignment on FLevelStreamingRequestBatchState");
static_assert(sizeof(FLevelStreamingRequestBatchState) == 0x000010, "Wrong size on FLevelStreamingRequestBatchState");
static_assert(offsetof(FLevelStreamingRequestBatchState, Batch) == 0x000000, "Member 'FLevelStreamingRequestBatchState::Batch' has a wrong offset!");
static_assert(offsetof(FLevelStreamingRequestBatchState, Status) == 0x000008, "Member 'FLevelStreamingRequestBatchState::Status' has a wrong offset!");
static_assert(offsetof(FLevelStreamingRequestBatchState, Priority) == 0x00000C, "Member 'FLevelStreamingRequestBatchState::Priority' has a wrong offset!");

// ScriptStruct LevelStreaming.LevelStreamingRuntimeActorData
// 0x0078 (0x0078 - 0x0000)
struct FLevelStreamingRuntimeActorData final
{
public:
	TSubclassOf<class UObject>                    Class;                                             // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftClassPath                         ClassPath;                                         // 0x0008(0x0020)(ZeroConstructor, SaveGame, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 StringClassReference;                              // 0x0028(0x0010)(ZeroConstructor, SaveGame, Deprecated, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FStreamableLevelHandle                 LevelHandle;                                       // 0x0038(0x0008)(SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	struct FGuid                                  Guid;                                              // 0x0040(0x0010)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Properties;                                        // 0x0050(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	TArray<struct FLevelStreamingComponentData>   Components;                                        // 0x0060(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x8];                                       // 0x0070(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLevelStreamingRuntimeActorData) == 0x000008, "Wrong alignment on FLevelStreamingRuntimeActorData");
static_assert(sizeof(FLevelStreamingRuntimeActorData) == 0x000078, "Wrong size on FLevelStreamingRuntimeActorData");
static_assert(offsetof(FLevelStreamingRuntimeActorData, Class) == 0x000000, "Member 'FLevelStreamingRuntimeActorData::Class' has a wrong offset!");
static_assert(offsetof(FLevelStreamingRuntimeActorData, ClassPath) == 0x000008, "Member 'FLevelStreamingRuntimeActorData::ClassPath' has a wrong offset!");
static_assert(offsetof(FLevelStreamingRuntimeActorData, StringClassReference) == 0x000028, "Member 'FLevelStreamingRuntimeActorData::StringClassReference' has a wrong offset!");
static_assert(offsetof(FLevelStreamingRuntimeActorData, LevelHandle) == 0x000038, "Member 'FLevelStreamingRuntimeActorData::LevelHandle' has a wrong offset!");
static_assert(offsetof(FLevelStreamingRuntimeActorData, Guid) == 0x000040, "Member 'FLevelStreamingRuntimeActorData::Guid' has a wrong offset!");
static_assert(offsetof(FLevelStreamingRuntimeActorData, Properties) == 0x000050, "Member 'FLevelStreamingRuntimeActorData::Properties' has a wrong offset!");
static_assert(offsetof(FLevelStreamingRuntimeActorData, Components) == 0x000060, "Member 'FLevelStreamingRuntimeActorData::Components' has a wrong offset!");

// ScriptStruct LevelStreaming.DataLayerStatus
// 0x0038 (0x0038 - 0x0000)
struct FDataLayerStatus final
{
public:
	TSoftObjectPtr<class UDataLayerAsset>         Handle;                                            // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataLayerRuntimeState                        State;                                             // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataLayerStatus) == 0x000008, "Wrong alignment on FDataLayerStatus");
static_assert(sizeof(FDataLayerStatus) == 0x000038, "Wrong size on FDataLayerStatus");
static_assert(offsetof(FDataLayerStatus, Handle) == 0x000000, "Member 'FDataLayerStatus::Handle' has a wrong offset!");
static_assert(offsetof(FDataLayerStatus, State) == 0x000030, "Member 'FDataLayerStatus::State' has a wrong offset!");

// ScriptStruct LevelStreaming.LevelStreamingSaveData
// 0x0038 (0x0038 - 0x0000)
struct FLevelStreamingSaveData final
{
public:
	TArray<struct FLevelStreamingActorData>       Actors;                                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLevelStreamingRuntimeActorData> RuntimeActors;                                     // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDataLayerStatus>               DataLayerStates;                                   // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLevelStreamingSaveData) == 0x000008, "Wrong alignment on FLevelStreamingSaveData");
static_assert(sizeof(FLevelStreamingSaveData) == 0x000038, "Wrong size on FLevelStreamingSaveData");
static_assert(offsetof(FLevelStreamingSaveData, Actors) == 0x000000, "Member 'FLevelStreamingSaveData::Actors' has a wrong offset!");
static_assert(offsetof(FLevelStreamingSaveData, RuntimeActors) == 0x000010, "Member 'FLevelStreamingSaveData::RuntimeActors' has a wrong offset!");
static_assert(offsetof(FLevelStreamingSaveData, DataLayerStates) == 0x000020, "Member 'FLevelStreamingSaveData::DataLayerStates' has a wrong offset!");

// ScriptStruct LevelStreaming.LevelStreamingSlotConfig
// 0x0004 (0x0004 - 0x0000)
struct FLevelStreamingSlotConfig final
{
public:
	bool                                          AllowShow;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowHide;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowLoad;                                         // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowUnload;                                       // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelStreamingSlotConfig) == 0x000001, "Wrong alignment on FLevelStreamingSlotConfig");
static_assert(sizeof(FLevelStreamingSlotConfig) == 0x000004, "Wrong size on FLevelStreamingSlotConfig");
static_assert(offsetof(FLevelStreamingSlotConfig, AllowShow) == 0x000000, "Member 'FLevelStreamingSlotConfig::AllowShow' has a wrong offset!");
static_assert(offsetof(FLevelStreamingSlotConfig, AllowHide) == 0x000001, "Member 'FLevelStreamingSlotConfig::AllowHide' has a wrong offset!");
static_assert(offsetof(FLevelStreamingSlotConfig, AllowLoad) == 0x000002, "Member 'FLevelStreamingSlotConfig::AllowLoad' has a wrong offset!");
static_assert(offsetof(FLevelStreamingSlotConfig, AllowUnload) == 0x000003, "Member 'FLevelStreamingSlotConfig::AllowUnload' has a wrong offset!");

// ScriptStruct LevelStreaming.LevelStreamingSlot
// 0x0010 (0x0010 - 0x0000)
struct FLevelStreamingSlot final
{
public:
	struct FLevelStreamingSlotConfig              Config;                                            // 0x0000(0x0004)(NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelStreamingTask*                    Task;                                              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FLevelStreamingSlot) == 0x000008, "Wrong alignment on FLevelStreamingSlot");
static_assert(sizeof(FLevelStreamingSlot) == 0x000010, "Wrong size on FLevelStreamingSlot");
static_assert(offsetof(FLevelStreamingSlot, Config) == 0x000000, "Member 'FLevelStreamingSlot::Config' has a wrong offset!");
static_assert(offsetof(FLevelStreamingSlot, Task) == 0x000008, "Member 'FLevelStreamingSlot::Task' has a wrong offset!");

// ScriptStruct LevelStreaming.StreamableLevel
// 0x0070 (0x0070 - 0x0000)
struct FStreamableLevel final
{
public:
	class FName                                   UniqueName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   Path;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UWorld>                  Level;                                             // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UStreamableLevelConfig>  Config;                                            // 0x0040(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FStreamableLevel) == 0x000008, "Wrong alignment on FStreamableLevel");
static_assert(sizeof(FStreamableLevel) == 0x000070, "Wrong size on FStreamableLevel");
static_assert(offsetof(FStreamableLevel, UniqueName) == 0x000000, "Member 'FStreamableLevel::UniqueName' has a wrong offset!");
static_assert(offsetof(FStreamableLevel, Path) == 0x000008, "Member 'FStreamableLevel::Path' has a wrong offset!");
static_assert(offsetof(FStreamableLevel, Level) == 0x000010, "Member 'FStreamableLevel::Level' has a wrong offset!");
static_assert(offsetof(FStreamableLevel, Config) == 0x000040, "Member 'FStreamableLevel::Config' has a wrong offset!");

// ScriptStruct LevelStreaming.StreamableLevelBatch
// 0x0048 (0x0048 - 0x0000)
struct FStreamableLevelBatch final
{
public:
	class FName                                   UniqueName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FStreamableLevelHandle>         Levels;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UStreamableLevelBatchConfig> Config;                                            // 0x0018(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FStreamableLevelBatch) == 0x000008, "Wrong alignment on FStreamableLevelBatch");
static_assert(sizeof(FStreamableLevelBatch) == 0x000048, "Wrong size on FStreamableLevelBatch");
static_assert(offsetof(FStreamableLevelBatch, UniqueName) == 0x000000, "Member 'FStreamableLevelBatch::UniqueName' has a wrong offset!");
static_assert(offsetof(FStreamableLevelBatch, Levels) == 0x000008, "Member 'FStreamableLevelBatch::Levels' has a wrong offset!");
static_assert(offsetof(FStreamableLevelBatch, Config) == 0x000018, "Member 'FStreamableLevelBatch::Config' has a wrong offset!");

// ScriptStruct LevelStreaming.StreamableLevelDebugWorkItem
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FStreamableLevelDebugWorkItem final
{
public:
	ELevelStreamingTaskWorkType                   Work;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WorkDuration;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Completed;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0xF];                                        // 0x0009(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStreamableLevelDebugWorkItem) == 0x000008, "Wrong alignment on FStreamableLevelDebugWorkItem");
static_assert(sizeof(FStreamableLevelDebugWorkItem) == 0x000018, "Wrong size on FStreamableLevelDebugWorkItem");
static_assert(offsetof(FStreamableLevelDebugWorkItem, Work) == 0x000000, "Member 'FStreamableLevelDebugWorkItem::Work' has a wrong offset!");
static_assert(offsetof(FStreamableLevelDebugWorkItem, WorkDuration) == 0x000004, "Member 'FStreamableLevelDebugWorkItem::WorkDuration' has a wrong offset!");
static_assert(offsetof(FStreamableLevelDebugWorkItem, Completed) == 0x000008, "Member 'FStreamableLevelDebugWorkItem::Completed' has a wrong offset!");

// ScriptStruct LevelStreaming.StreamableLevelDebugData
// 0x00D0 (0x00D0 - 0x0000)
struct FStreamableLevelDebugData final
{
public:
	struct FStreamableLevel                       Level;                                             // 0x0000(0x0070)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FStreamableLevelBatch                  Batch;                                             // 0x0070(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	EStreamableLevelStatus                        Status;                                            // 0x00B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStreamableLevelDebugWorkItem>  WorkHistory;                                       // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStreamableLevelDebugData) == 0x000008, "Wrong alignment on FStreamableLevelDebugData");
static_assert(sizeof(FStreamableLevelDebugData) == 0x0000D0, "Wrong size on FStreamableLevelDebugData");
static_assert(offsetof(FStreamableLevelDebugData, Level) == 0x000000, "Member 'FStreamableLevelDebugData::Level' has a wrong offset!");
static_assert(offsetof(FStreamableLevelDebugData, Batch) == 0x000070, "Member 'FStreamableLevelDebugData::Batch' has a wrong offset!");
static_assert(offsetof(FStreamableLevelDebugData, Status) == 0x0000B8, "Member 'FStreamableLevelDebugData::Status' has a wrong offset!");
static_assert(offsetof(FStreamableLevelDebugData, WorkHistory) == 0x0000C0, "Member 'FStreamableLevelDebugData::WorkHistory' has a wrong offset!");

// ScriptStruct LevelStreaming.ManagedStreamableLevelBatchHandle
// 0x0038 (0x0038 - 0x0000)
struct FManagedStreamableLevelBatchHandle final
{
public:
	struct FStreamableLevelBatchHandle            Batch;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EStreamableLevelStatus                        Status;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        ShowVisibleRequesters;                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        PreloadRequesters;                                 // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         HideTimer;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnloadTimer;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FManagedStreamableLevelBatchHandle) == 0x000008, "Wrong alignment on FManagedStreamableLevelBatchHandle");
static_assert(sizeof(FManagedStreamableLevelBatchHandle) == 0x000038, "Wrong size on FManagedStreamableLevelBatchHandle");
static_assert(offsetof(FManagedStreamableLevelBatchHandle, Batch) == 0x000000, "Member 'FManagedStreamableLevelBatchHandle::Batch' has a wrong offset!");
static_assert(offsetof(FManagedStreamableLevelBatchHandle, Status) == 0x000008, "Member 'FManagedStreamableLevelBatchHandle::Status' has a wrong offset!");
static_assert(offsetof(FManagedStreamableLevelBatchHandle, ShowVisibleRequesters) == 0x000010, "Member 'FManagedStreamableLevelBatchHandle::ShowVisibleRequesters' has a wrong offset!");
static_assert(offsetof(FManagedStreamableLevelBatchHandle, PreloadRequesters) == 0x000020, "Member 'FManagedStreamableLevelBatchHandle::PreloadRequesters' has a wrong offset!");
static_assert(offsetof(FManagedStreamableLevelBatchHandle, HideTimer) == 0x000030, "Member 'FManagedStreamableLevelBatchHandle::HideTimer' has a wrong offset!");
static_assert(offsetof(FManagedStreamableLevelBatchHandle, UnloadTimer) == 0x000034, "Member 'FManagedStreamableLevelBatchHandle::UnloadTimer' has a wrong offset!");

}

