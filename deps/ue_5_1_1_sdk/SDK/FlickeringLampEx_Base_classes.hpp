#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FlickeringLampEx_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SHProto_structs.hpp"
#include "SHProto_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "FlickerEndOperationLightHandlingTechinique_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass FlickeringLampEx_Base.FlickeringLampEx_Base_C
// 0x00C0 (0x0430 - 0x0370)
class AFlickeringLampEx_Base_C : public ASHFlickeringLightBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0370(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        Root;                                              // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        LightIntensity;                                    // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	int32                                         MaterialSlot;                                      // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   MaterialVarName;                                   // 0x038C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_394[0x4];                                      // 0x0394(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            FlickeringCurve;                                   // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          RandomStart;                                       // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A1[0x3];                                      // 0x03A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           MaterialEmissionColor;                             // 0x03A4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MaterialEmissionReplace;                           // 0x03B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AffectLight;                                       // 0x03B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FlickerActive;                                     // 0x03B6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	EFlickerEndOperationLightHandlingTechinique   EndOperation;                                      // 0x03B7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RandomBlinking;                                    // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B9[0x7];                                      // 0x03B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LightIntensityMin;                                 // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LightIntensityMax;                                 // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlinkingMin;                                       // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlinkingMax;                                       // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ChangeTimeMin;                                     // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ChangeTimeMax;                                     // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OffIntensity;                                      // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GentleShutdownTime;                                // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceShutdown;                                     // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_401[0x7];                                      // 0x0401(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TimePassed;                                        // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SwitchedOff;                                       // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WasActive;                                         // 0x0411(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BeginPlayCalled;                                   // 0x0412(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SwitchOffBeforeBeginPlayCalled;                    // 0x0413(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlinkingIsAbsolute;                                // 0x0414(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_415[0x3];                                      // 0x0415(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EditorTicksCounter;                                // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Breakeable;                                        // 0x041C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasBeenBroken;                                    // 0x041D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41E[0x2];                                      // 0x041E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BrokenCount;                                       // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BrokenTag;                                         // 0x0424(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BreakState;                                        // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ApplyForceFromDamage(const struct FVector& Force, const struct FVector& Location);
	void Break(class UActorComponent* Component);
	void Broken();
	void EditorExternalTick(double DeltaSeconds);
	void ExecuteUbergraph_FlickeringLampEx_Base(int32 EntryPoint);
	void OnEditorRefresh();
	void OnPostConstruction();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceivePointDamage(float Damage, const class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, class FName BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void ReceiveTick(float DeltaSeconds);
	void Reset_Intensities();
	void RestoreBrokenGroups();
	void SetLightsState(bool State);
	void SwitchOff();
	void SwitchOn();
	void UpdateBreakable();
	void UpdateParameters();
	void UserConstructionScript();

	void GetCurveBasedIntensity(double* Result) const;
	void GetLightIntensityMultiplier(double* Result) const;
	void GetLightTemperature(double* Result) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FlickeringLampEx_Base_C">();
	}
	static class AFlickeringLampEx_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFlickeringLampEx_Base_C>();
	}
};
static_assert(alignof(AFlickeringLampEx_Base_C) == 0x000008, "Wrong alignment on AFlickeringLampEx_Base_C");
static_assert(sizeof(AFlickeringLampEx_Base_C) == 0x000430, "Wrong size on AFlickeringLampEx_Base_C");
static_assert(offsetof(AFlickeringLampEx_Base_C, UberGraphFrame) == 0x000370, "Member 'AFlickeringLampEx_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, Root) == 0x000378, "Member 'AFlickeringLampEx_Base_C::Root' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, LightIntensity) == 0x000380, "Member 'AFlickeringLampEx_Base_C::LightIntensity' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, MaterialSlot) == 0x000388, "Member 'AFlickeringLampEx_Base_C::MaterialSlot' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, MaterialVarName) == 0x00038C, "Member 'AFlickeringLampEx_Base_C::MaterialVarName' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, FlickeringCurve) == 0x000398, "Member 'AFlickeringLampEx_Base_C::FlickeringCurve' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, RandomStart) == 0x0003A0, "Member 'AFlickeringLampEx_Base_C::RandomStart' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, MaterialEmissionColor) == 0x0003A4, "Member 'AFlickeringLampEx_Base_C::MaterialEmissionColor' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, MaterialEmissionReplace) == 0x0003B4, "Member 'AFlickeringLampEx_Base_C::MaterialEmissionReplace' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, AffectLight) == 0x0003B5, "Member 'AFlickeringLampEx_Base_C::AffectLight' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, FlickerActive) == 0x0003B6, "Member 'AFlickeringLampEx_Base_C::FlickerActive' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, EndOperation) == 0x0003B7, "Member 'AFlickeringLampEx_Base_C::EndOperation' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, RandomBlinking) == 0x0003B8, "Member 'AFlickeringLampEx_Base_C::RandomBlinking' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, LightIntensityMin) == 0x0003C0, "Member 'AFlickeringLampEx_Base_C::LightIntensityMin' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, LightIntensityMax) == 0x0003C8, "Member 'AFlickeringLampEx_Base_C::LightIntensityMax' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, BlinkingMin) == 0x0003D0, "Member 'AFlickeringLampEx_Base_C::BlinkingMin' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, BlinkingMax) == 0x0003D8, "Member 'AFlickeringLampEx_Base_C::BlinkingMax' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, ChangeTimeMin) == 0x0003E0, "Member 'AFlickeringLampEx_Base_C::ChangeTimeMin' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, ChangeTimeMax) == 0x0003E8, "Member 'AFlickeringLampEx_Base_C::ChangeTimeMax' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, OffIntensity) == 0x0003F0, "Member 'AFlickeringLampEx_Base_C::OffIntensity' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, GentleShutdownTime) == 0x0003F8, "Member 'AFlickeringLampEx_Base_C::GentleShutdownTime' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, ForceShutdown) == 0x000400, "Member 'AFlickeringLampEx_Base_C::ForceShutdown' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, TimePassed) == 0x000408, "Member 'AFlickeringLampEx_Base_C::TimePassed' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, SwitchedOff) == 0x000410, "Member 'AFlickeringLampEx_Base_C::SwitchedOff' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, WasActive) == 0x000411, "Member 'AFlickeringLampEx_Base_C::WasActive' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, BeginPlayCalled) == 0x000412, "Member 'AFlickeringLampEx_Base_C::BeginPlayCalled' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, SwitchOffBeforeBeginPlayCalled) == 0x000413, "Member 'AFlickeringLampEx_Base_C::SwitchOffBeforeBeginPlayCalled' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, BlinkingIsAbsolute) == 0x000414, "Member 'AFlickeringLampEx_Base_C::BlinkingIsAbsolute' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, EditorTicksCounter) == 0x000418, "Member 'AFlickeringLampEx_Base_C::EditorTicksCounter' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, Breakeable) == 0x00041C, "Member 'AFlickeringLampEx_Base_C::Breakeable' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, bHasBeenBroken) == 0x00041D, "Member 'AFlickeringLampEx_Base_C::bHasBeenBroken' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, BrokenCount) == 0x000420, "Member 'AFlickeringLampEx_Base_C::BrokenCount' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, BrokenTag) == 0x000424, "Member 'AFlickeringLampEx_Base_C::BrokenTag' has a wrong offset!");
static_assert(offsetof(AFlickeringLampEx_Base_C, BreakState) == 0x00042C, "Member 'AFlickeringLampEx_Base_C::BreakState' has a wrong offset!");

}

