#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LevelStreaming

#include "Basic.hpp"

#include "LevelStreaming_classes.hpp"
#include "LevelStreaming_parameters.hpp"


namespace SDK
{

// Function LevelStreaming.LevelStreamingActorSerializerDefault.DynamicActorOnBeginPlay
// (Final, Native, Protected)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelStreamingActorSerializerDefault::DynamicActorOnBeginPlay(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelStreamingActorSerializerDefault", "DynamicActorOnBeginPlay");

	Params::LevelStreamingActorSerializerDefault_DynamicActorOnBeginPlay Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelStreaming.LevelStreamingDataLayerSubsystem.OnDataLayerRuntimeStateChanged
// (Final, Native, Protected)
// Parameters:
// class UDataLayerInstance*               DataLayer                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDataLayerRuntimeState                  State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelStreamingDataLayerSubsystem::OnDataLayerRuntimeStateChanged(class UDataLayerInstance* DataLayer, EDataLayerRuntimeState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelStreamingDataLayerSubsystem", "OnDataLayerRuntimeStateChanged");

	Params::LevelStreamingDataLayerSubsystem_OnDataLayerRuntimeStateChanged Parms{};

	Parms.DataLayer = DataLayer;
	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelStreaming.LevelStreamingDebugWidget.OnDataRecreated
// (Event, Protected, BlueprintEvent)

void ULevelStreamingDebugWidget::OnDataRecreated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelStreamingDebugWidget", "OnDataRecreated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LevelStreaming.LevelStreamingDebugWidget.OnRefreshed
// (Event, Protected, BlueprintEvent)

void ULevelStreamingDebugWidget::OnRefreshed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelStreamingDebugWidget", "OnRefreshed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LevelStreaming.LevelStreamingDebugWidget.SelectNextLineColor
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FStreamableLevelBatch            PreviousBatch                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FStreamableLevelBatch            NextBatch                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLinearColor                     CurrentColor                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     FirstColor                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     SecondColor                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor ULevelStreamingDebugWidget::SelectNextLineColor(const struct FStreamableLevelBatch& PreviousBatch, const struct FStreamableLevelBatch& NextBatch, const struct FLinearColor& CurrentColor, const struct FLinearColor& FirstColor, const struct FLinearColor& SecondColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelStreamingDebugWidget", "SelectNextLineColor");

	Params::LevelStreamingDebugWidget_SelectNextLineColor Parms{};

	Parms.PreviousBatch = std::move(PreviousBatch);
	Parms.NextBatch = std::move(NextBatch);
	Parms.CurrentColor = std::move(CurrentColor);
	Parms.FirstColor = std::move(FirstColor);
	Parms.SecondColor = std::move(SecondColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.LevelStreamingEventsComponent.GetBatchesStatus
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// EStreamableLevelStatus                  OutStatus                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULevelStreamingEventsComponent::GetBatchesStatus(EStreamableLevelStatus* OutStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelStreamingEventsComponent", "GetBatchesStatus");

	Params::LevelStreamingEventsComponent_GetBatchesStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutStatus != nullptr)
		*OutStatus = Parms.OutStatus;

	return Parms.ReturnValue;
}


// Function LevelStreaming.LevelStreamingEventsComponent.GetLevelsStatus
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// EStreamableLevelStatus                  OutStatus                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULevelStreamingEventsComponent::GetLevelsStatus(EStreamableLevelStatus* OutStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelStreamingEventsComponent", "GetLevelsStatus");

	Params::LevelStreamingEventsComponent_GetLevelsStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutStatus != nullptr)
		*OutStatus = Parms.OutStatus;

	return Parms.ReturnValue;
}


// DelegateFunction LevelStreaming.LevelStreamingEventsComponent.StatusChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class ULevelStreamingEventsComponent*   Events                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EStreamableLevelStatus                  Status                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelStreamingEventsComponent::StatusChanged__DelegateSignature(class ULevelStreamingEventsComponent* Events, EStreamableLevelStatus Status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelStreamingEventsComponent", "StatusChanged__DelegateSignature");

	Params::LevelStreamingEventsComponent_StatusChanged__DelegateSignature Parms{};

	Parms.Events = Events;
	Parms.Status = Status;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LevelStreaming.LevelStreamingManager.OnActorEndPlay
// (Final, Native, Private)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelStreamingManager::OnActorEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelStreamingManager", "OnActorEndPlay");

	Params::LevelStreamingManager_OnActorEndPlay Parms{};

	Parms.Actor = Actor;
	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelStreaming.LevelStreamingManager.OnActorEndPlayDynamic
// (Final, Native, Private)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelStreamingManager::OnActorEndPlayDynamic(class AActor* Actor, EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelStreamingManager", "OnActorEndPlayDynamic");

	Params::LevelStreamingManager_OnActorEndPlayDynamic Parms{};

	Parms.Actor = Actor;
	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.AreLevelBatchHandlesEqual
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FStreamableLevelBatchHandle      A                                                      (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FStreamableLevelBatchHandle      B                                                      (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULevelStreamingStaticLibrary::AreLevelBatchHandlesEqual(const struct FStreamableLevelBatchHandle& A, const struct FStreamableLevelBatchHandle& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "AreLevelBatchHandlesEqual");

	Params::LevelStreamingStaticLibrary_AreLevelBatchHandlesEqual Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.AreLevelBatchHandlesNotEqual
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FStreamableLevelBatchHandle      A                                                      (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FStreamableLevelBatchHandle      B                                                      (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULevelStreamingStaticLibrary::AreLevelBatchHandlesNotEqual(const struct FStreamableLevelBatchHandle& A, const struct FStreamableLevelBatchHandle& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "AreLevelBatchHandlesNotEqual");

	Params::LevelStreamingStaticLibrary_AreLevelBatchHandlesNotEqual Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.AreLevelHandlesEqual
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FStreamableLevelHandle           A                                                      (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FStreamableLevelHandle           B                                                      (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULevelStreamingStaticLibrary::AreLevelHandlesEqual(const struct FStreamableLevelHandle& A, const struct FStreamableLevelHandle& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "AreLevelHandlesEqual");

	Params::LevelStreamingStaticLibrary_AreLevelHandlesEqual Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.AreLevelHandlesNotEqual
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FStreamableLevelHandle           A                                                      (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FStreamableLevelHandle           B                                                      (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULevelStreamingStaticLibrary::AreLevelHandlesNotEqual(const struct FStreamableLevelHandle& A, const struct FStreamableLevelHandle& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "AreLevelHandlesNotEqual");

	Params::LevelStreamingStaticLibrary_AreLevelHandlesNotEqual Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.AreRequestHandlesEqual
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLevelStreamingRequestHandle     A                                                      (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FLevelStreamingRequestHandle     B                                                      (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULevelStreamingStaticLibrary::AreRequestHandlesEqual(const struct FLevelStreamingRequestHandle& A, const struct FLevelStreamingRequestHandle& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "AreRequestHandlesEqual");

	Params::LevelStreamingStaticLibrary_AreRequestHandlesEqual Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.AreRequestHandlesNotEqual
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLevelStreamingRequestHandle     A                                                      (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FLevelStreamingRequestHandle     B                                                      (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULevelStreamingStaticLibrary::AreRequestHandlesNotEqual(const struct FLevelStreamingRequestHandle& A, const struct FLevelStreamingRequestHandle& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "AreRequestHandlesNotEqual");

	Params::LevelStreamingStaticLibrary_AreRequestHandlesNotEqual Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.CacheWorldState
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelStreamingStaticLibrary::CacheWorldState(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "CacheWorldState");

	Params::LevelStreamingStaticLibrary_CacheWorldState Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.ConvertBatchHandleToString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FStreamableLevelBatchHandle      BatchHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ULevelStreamingStaticLibrary::ConvertBatchHandleToString(const struct FStreamableLevelBatchHandle& BatchHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "ConvertBatchHandleToString");

	Params::LevelStreamingStaticLibrary_ConvertBatchHandleToString Parms{};

	Parms.BatchHandle = std::move(BatchHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.ConvertLevelHandleToLevel
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStreamableLevelHandle           LevelHandle                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FStreamableLevel                 OutLevel                                               (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    OutIsValid                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelStreamingStaticLibrary::ConvertLevelHandleToLevel(class UObject* WorldContextObject, const struct FStreamableLevelHandle& LevelHandle, struct FStreamableLevel* OutLevel, bool* OutIsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "ConvertLevelHandleToLevel");

	Params::LevelStreamingStaticLibrary_ConvertLevelHandleToLevel Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LevelHandle = std::move(LevelHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLevel != nullptr)
		*OutLevel = std::move(Parms.OutLevel);

	if (OutIsValid != nullptr)
		*OutIsValid = Parms.OutIsValid;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.ConvertLevelHandleToLevelState
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStreamableLevelHandle           LevelHandle                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UStreamableLevelState*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStreamableLevelState* ULevelStreamingStaticLibrary::ConvertLevelHandleToLevelState(class UObject* WorldContextObject, const struct FStreamableLevelHandle& LevelHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "ConvertLevelHandleToLevelState");

	Params::LevelStreamingStaticLibrary_ConvertLevelHandleToLevelState Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LevelHandle = std::move(LevelHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.ConvertLevelHandleToString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FStreamableLevelHandle           LevelHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ULevelStreamingStaticLibrary::ConvertLevelHandleToString(const struct FStreamableLevelHandle& LevelHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "ConvertLevelHandleToString");

	Params::LevelStreamingStaticLibrary_ConvertLevelHandleToString Parms{};

	Parms.LevelHandle = std::move(LevelHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.ConvertRequestHandleToString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLevelStreamingRequestHandle     RequestHandle                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ULevelStreamingStaticLibrary::ConvertRequestHandleToString(const struct FLevelStreamingRequestHandle& RequestHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "ConvertRequestHandleToString");

	Params::LevelStreamingStaticLibrary_ConvertRequestHandleToString Parms{};

	Parms.RequestHandle = std::move(RequestHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.FindActorBatchState
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStreamableLevelBatchState*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStreamableLevelBatchState* ULevelStreamingStaticLibrary::FindActorBatchState(class UObject* WorldContextObject, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "FindActorBatchState");

	Params::LevelStreamingStaticLibrary_FindActorBatchState Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.FindActorLevelState
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStreamableLevelState*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStreamableLevelState* ULevelStreamingStaticLibrary::FindActorLevelState(class UObject* WorldContextObject, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "FindActorLevelState");

	Params::LevelStreamingStaticLibrary_FindActorLevelState Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.GetAllBatchStates
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UStreamableLevelBatchState*>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UStreamableLevelBatchState*> ULevelStreamingStaticLibrary::GetAllBatchStates(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "GetAllBatchStates");

	Params::LevelStreamingStaticLibrary_GetAllBatchStates Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.GetAllLevelStates
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UStreamableLevelState*>    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UStreamableLevelState*> ULevelStreamingStaticLibrary::GetAllLevelStates(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "GetAllLevelStates");

	Params::LevelStreamingStaticLibrary_GetAllLevelStates Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.HideStreamedBatch
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStreamableLevelBatchHandle      BatchHandle                                            (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Priority                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelStreamingStaticLibrary::HideStreamedBatch(class UObject* WorldContextObject, const struct FStreamableLevelBatchHandle& BatchHandle, const int32 Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "HideStreamedBatch");

	Params::LevelStreamingStaticLibrary_HideStreamedBatch Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.BatchHandle = std::move(BatchHandle);
	Parms.Priority = Priority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.HideStreamedLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStreamableLevelHandle           LevelHandle                                            (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Priority                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelStreamingStaticLibrary::HideStreamedLevel(class UObject* WorldContextObject, const struct FStreamableLevelHandle& LevelHandle, const int32 Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "HideStreamedLevel");

	Params::LevelStreamingStaticLibrary_HideStreamedLevel Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LevelHandle = std::move(LevelHandle);
	Parms.Priority = Priority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.IsActorBatchLoadedVisible
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULevelStreamingStaticLibrary::IsActorBatchLoadedVisible(class UObject* WorldContextObject, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "IsActorBatchLoadedVisible");

	Params::LevelStreamingStaticLibrary_IsActorBatchLoadedVisible Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.RemoveRuntimeActorFromDatabase
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelStreamingStaticLibrary::RemoveRuntimeActorFromDatabase(class UObject* WorldContextObject, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "RemoveRuntimeActorFromDatabase");

	Params::LevelStreamingStaticLibrary_RemoveRuntimeActorFromDatabase Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.ResetStreamedBatchTransform
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStreamableLevelBatchHandle      BatchHandle                                            (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)

void ULevelStreamingStaticLibrary::ResetStreamedBatchTransform(class UObject* WorldContextObject, const struct FStreamableLevelBatchHandle& BatchHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "ResetStreamedBatchTransform");

	Params::LevelStreamingStaticLibrary_ResetStreamedBatchTransform Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.BatchHandle = std::move(BatchHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.ResetStreamedLevelTransform
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStreamableLevelHandle           LevelHandle                                            (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)

void ULevelStreamingStaticLibrary::ResetStreamedLevelTransform(class UObject* WorldContextObject, const struct FStreamableLevelHandle& LevelHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "ResetStreamedLevelTransform");

	Params::LevelStreamingStaticLibrary_ResetStreamedLevelTransform Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LevelHandle = std::move(LevelHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.SetStreamedBatchTransform
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStreamableLevelBatchHandle      BatchHandle                                            (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class AActor>            Pivot                                                  (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelStreamingStaticLibrary::SetStreamedBatchTransform(class UObject* WorldContextObject, const struct FStreamableLevelBatchHandle& BatchHandle, const struct FTransform& Transform, const TSoftObjectPtr<class AActor> Pivot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "SetStreamedBatchTransform");

	Params::LevelStreamingStaticLibrary_SetStreamedBatchTransform Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.BatchHandle = std::move(BatchHandle);
	Parms.Transform = std::move(Transform);
	Parms.Pivot = Pivot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.SetStreamedLevelTransform
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStreamableLevelHandle           LevelHandle                                            (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class AActor>            Pivot                                                  (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelStreamingStaticLibrary::SetStreamedLevelTransform(class UObject* WorldContextObject, const struct FStreamableLevelHandle& LevelHandle, const struct FTransform& Transform, const TSoftObjectPtr<class AActor> Pivot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "SetStreamedLevelTransform");

	Params::LevelStreamingStaticLibrary_SetStreamedLevelTransform Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LevelHandle = std::move(LevelHandle);
	Parms.Transform = std::move(Transform);
	Parms.Pivot = Pivot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.SetStreamingIntegrationSpeed
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EStreamingIntegrationSpeed              Speed                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelStreamingStaticLibrary::SetStreamingIntegrationSpeed(const class UObject* WorldContextObject, EStreamingIntegrationSpeed Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "SetStreamingIntegrationSpeed");

	Params::LevelStreamingStaticLibrary_SetStreamingIntegrationSpeed Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Speed = Speed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.ShowStreamedBatch
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStreamableLevelBatchHandle      BatchHandle                                            (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    LoadIfUnloaded                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Priority                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelStreamingStaticLibrary::ShowStreamedBatch(class UObject* WorldContextObject, const struct FStreamableLevelBatchHandle& BatchHandle, const bool LoadIfUnloaded, const int32 Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "ShowStreamedBatch");

	Params::LevelStreamingStaticLibrary_ShowStreamedBatch Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.BatchHandle = std::move(BatchHandle);
	Parms.LoadIfUnloaded = LoadIfUnloaded;
	Parms.Priority = Priority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.ShowStreamedLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStreamableLevelHandle           LevelHandle                                            (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    LoadIfUnloaded                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Priority                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelStreamingStaticLibrary::ShowStreamedLevel(class UObject* WorldContextObject, const struct FStreamableLevelHandle& LevelHandle, const bool LoadIfUnloaded, const int32 Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "ShowStreamedLevel");

	Params::LevelStreamingStaticLibrary_ShowStreamedLevel Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LevelHandle = std::move(LevelHandle);
	Parms.LoadIfUnloaded = LoadIfUnloaded;
	Parms.Priority = Priority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.StartBatchStreaming
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStreamableLevelBatchHandle      BatchHandle                                            (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    MakeVisible                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Priority                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelStreamingStaticLibrary::StartBatchStreaming(class UObject* WorldContextObject, const struct FStreamableLevelBatchHandle& BatchHandle, const bool MakeVisible, const int32 Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "StartBatchStreaming");

	Params::LevelStreamingStaticLibrary_StartBatchStreaming Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.BatchHandle = std::move(BatchHandle);
	Parms.MakeVisible = MakeVisible;
	Parms.Priority = Priority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.StartLevelStreaming
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStreamableLevelHandle           LevelHandle                                            (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    MakeVisible                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Priority                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelStreamingStaticLibrary::StartLevelStreaming(class UObject* WorldContextObject, const struct FStreamableLevelHandle& LevelHandle, const bool MakeVisible, const int32 Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "StartLevelStreaming");

	Params::LevelStreamingStaticLibrary_StartLevelStreaming Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LevelHandle = std::move(LevelHandle);
	Parms.MakeVisible = MakeVisible;
	Parms.Priority = Priority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.SubmitRequest
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLevelStreamingRequestHandle     RequestHandle                                          (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// class ULevelStreamingRequestState*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULevelStreamingRequestState* ULevelStreamingStaticLibrary::SubmitRequest(class UObject* WorldContextObject, const struct FLevelStreamingRequestHandle& RequestHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "SubmitRequest");

	Params::LevelStreamingStaticLibrary_SubmitRequest Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.RequestHandle = std::move(RequestHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.TravelToLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStreamableLevelHandle           LevelHandle                                            (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)

void ULevelStreamingStaticLibrary::TravelToLevel(class UObject* WorldContextObject, const struct FStreamableLevelHandle& LevelHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "TravelToLevel");

	Params::LevelStreamingStaticLibrary_TravelToLevel Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LevelHandle = std::move(LevelHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.UnloadStreamedBatch
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStreamableLevelBatchHandle      BatchHandle                                            (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Priority                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelStreamingStaticLibrary::UnloadStreamedBatch(class UObject* WorldContextObject, const struct FStreamableLevelBatchHandle& BatchHandle, const int32 Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "UnloadStreamedBatch");

	Params::LevelStreamingStaticLibrary_UnloadStreamedBatch Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.BatchHandle = std::move(BatchHandle);
	Parms.Priority = Priority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelStreaming.LevelStreamingStaticLibrary.UnloadStreamedLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStreamableLevelHandle           LevelHandle                                            (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Priority                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelStreamingStaticLibrary::UnloadStreamedLevel(class UObject* WorldContextObject, const struct FStreamableLevelHandle& LevelHandle, const int32 Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelStreamingStaticLibrary", "UnloadStreamedLevel");

	Params::LevelStreamingStaticLibrary_UnloadStreamedLevel Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LevelHandle = std::move(LevelHandle);
	Parms.Priority = Priority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelStreaming.StreamableLevelState.GetBatch
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UStreamableLevelBatchState*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStreamableLevelBatchState* UStreamableLevelState::GetBatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamableLevelState", "GetBatch");

	Params::StreamableLevelState_GetBatch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.StreamableLevelState.GetConfig
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UStreamableLevelConfig*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStreamableLevelConfig* UStreamableLevelState::GetConfig()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamableLevelState", "GetConfig");

	Params::StreamableLevelState_GetConfig Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.StreamableLevelState.GetLevelStreaming
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULevelStreaming*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULevelStreaming* UStreamableLevelState::GetLevelStreaming()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamableLevelState", "GetLevelStreaming");

	Params::StreamableLevelState_GetLevelStreaming Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.StreamableLevelState.HandleLevelHidden
// (Final, Native, Private)

void UStreamableLevelState::HandleLevelHidden()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamableLevelState", "HandleLevelHidden");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LevelStreaming.StreamableLevelState.HandleLevelLoaded
// (Final, Native, Private)

void UStreamableLevelState::HandleLevelLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamableLevelState", "HandleLevelLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LevelStreaming.StreamableLevelState.HandleLevelShown
// (Final, Native, Private)

void UStreamableLevelState::HandleLevelShown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamableLevelState", "HandleLevelShown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LevelStreaming.StreamableLevelState.HandleLevelUnloaded
// (Final, Native, Private)

void UStreamableLevelState::HandleLevelUnloaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamableLevelState", "HandleLevelUnloaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LevelStreaming.StreamableLevelState.GetLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FStreamableLevel           ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FStreamableLevel UStreamableLevelState::GetLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamableLevelState", "GetLevel");

	Params::StreamableLevelState_GetLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.StreamableLevelState.GetLevelHandle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FStreamableLevelHandle           ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FStreamableLevelHandle UStreamableLevelState::GetLevelHandle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamableLevelState", "GetLevelHandle");

	Params::StreamableLevelState_GetLevelHandle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.StreamableLevelState.GetLevelName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UStreamableLevelState::GetLevelName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamableLevelState", "GetLevelName");

	Params::StreamableLevelState_GetLevelName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.StreamableLevelState.GetLevelNameAsString
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class FString UStreamableLevelState::GetLevelNameAsString() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamableLevelState", "GetLevelNameAsString");

	Params::StreamableLevelState_GetLevelNameAsString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.StreamableLevelState.GetLevelPath
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UStreamableLevelState::GetLevelPath() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamableLevelState", "GetLevelPath");

	Params::StreamableLevelState_GetLevelPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.StreamableLevelState.GetLevelPathAsString
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UStreamableLevelState::GetLevelPathAsString() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamableLevelState", "GetLevelPathAsString");

	Params::StreamableLevelState_GetLevelPathAsString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.StreamableLevelState.GetLevelType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EStreamableLevelType                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EStreamableLevelType UStreamableLevelState::GetLevelType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamableLevelState", "GetLevelType");

	Params::StreamableLevelState_GetLevelType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.StreamableLevelState.GetStatus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EStreamableLevelStatus                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EStreamableLevelStatus UStreamableLevelState::GetStatus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamableLevelState", "GetStatus");

	Params::StreamableLevelState_GetStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.StreamableLevelState.GetSublevels
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class UStreamableLevelState*>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class UStreamableLevelState*> UStreamableLevelState::GetSublevels() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamableLevelState", "GetSublevels");

	Params::StreamableLevelState_GetSublevels Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.StreamableLevelState.HasBatch
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStreamableLevelState::HasBatch() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamableLevelState", "HasBatch");

	Params::StreamableLevelState_HasBatch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.StreamableLevelState.HasLevelConfig
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStreamableLevelState::HasLevelConfig() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamableLevelState", "HasLevelConfig");

	Params::StreamableLevelState_HasLevelConfig Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.StreamableLevelState.HasLevelStreaming
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStreamableLevelState::HasLevelStreaming() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamableLevelState", "HasLevelStreaming");

	Params::StreamableLevelState_HasLevelStreaming Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.StreamableLevelState.IsHidden
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStreamableLevelState::IsHidden() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamableLevelState", "IsHidden");

	Params::StreamableLevelState_IsHidden Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.StreamableLevelState.IsLoaded
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStreamableLevelState::IsLoaded() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamableLevelState", "IsLoaded");

	Params::StreamableLevelState_IsLoaded Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.StreamableLevelState.IsUnloaded
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStreamableLevelState::IsUnloaded() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamableLevelState", "IsUnloaded");

	Params::StreamableLevelState_IsUnloaded Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.StreamableLevelState.IsVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStreamableLevelState::IsVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamableLevelState", "IsVisible");

	Params::StreamableLevelState_IsVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.StreamableLevelState.ShouldBeAlwaysLoaded
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStreamableLevelState::ShouldBeAlwaysLoaded() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamableLevelState", "ShouldBeAlwaysLoaded");

	Params::StreamableLevelState_ShouldBeAlwaysLoaded Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.StreamingVolume.GetStreamingVolumeManager
// (Final, Native, Protected)
// Parameters:
// class UStreamingVolumeManager*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStreamingVolumeManager* AStreamingVolume::GetStreamingVolumeManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamingVolume", "GetStreamingVolumeManager");

	Params::StreamingVolume_GetStreamingVolumeManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.StreamingVolume.SetEnable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enable                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AStreamingVolume::SetEnable(const bool Enable, const class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamingVolume", "SetEnable");

	Params::StreamingVolume_SetEnable Parms{};

	Parms.Enable = Enable;
	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelStreaming.StreamingVolume.IsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AStreamingVolume::IsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamingVolume", "IsEnabled");

	Params::StreamingVolume_IsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelStreaming.StreamingVolumeManager.StreamingVolumeManager_DebugInstantMode
// (Final, Exec, Native, Public)

void UStreamingVolumeManager::StreamingVolumeManager_DebugInstantMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamingVolumeManager", "StreamingVolumeManager_DebugInstantMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LevelStreaming.StreamingVolumeManager.StreamingVolumeManager_DrawSingle_IndexVolume
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   InVolumeIndexToDraw                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStreamingVolumeManager::StreamingVolumeManager_DrawSingle_IndexVolume(int32 InVolumeIndexToDraw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamingVolumeManager", "StreamingVolumeManager_DrawSingle_IndexVolume");

	Params::StreamingVolumeManager_StreamingVolumeManager_DrawSingle_IndexVolume Parms{};

	Parms.InVolumeIndexToDraw = InVolumeIndexToDraw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelStreaming.StreamingVolumeManager.StreamingVolumeManager_DrawSingle_NextVolume
// (Final, Exec, Native, Public)

void UStreamingVolumeManager::StreamingVolumeManager_DrawSingle_NextVolume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamingVolumeManager", "StreamingVolumeManager_DrawSingle_NextVolume");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LevelStreaming.StreamingVolumeManager.StreamingVolumeManager_DrawSingle_PreviousVolume
// (Final, Exec, Native, Public)

void UStreamingVolumeManager::StreamingVolumeManager_DrawSingle_PreviousVolume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamingVolumeManager", "StreamingVolumeManager_DrawSingle_PreviousVolume");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LevelStreaming.StreamingVolumeManager.StreamingVolumeManager_DrawSingleDebug
// (Final, Exec, Native, Public)

void UStreamingVolumeManager::StreamingVolumeManager_DrawSingleDebug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamingVolumeManager", "StreamingVolumeManager_DrawSingleDebug");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LevelStreaming.StreamingVolumeManager.StreamingVolumeManager_DrawSmartDebug
// (Final, Exec, Native, Public)

void UStreamingVolumeManager::StreamingVolumeManager_DrawSmartDebug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamingVolumeManager", "StreamingVolumeManager_DrawSmartDebug");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LevelStreaming.StreamingVolumeManager.StreamingVolumeManager_PrintDebug
// (Final, Exec, Native, Public)

void UStreamingVolumeManager::StreamingVolumeManager_PrintDebug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamingVolumeManager", "StreamingVolumeManager_PrintDebug");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LevelStreaming.StreamingVolumeManager.StreamingVolumeManager_TestEnable
// (Final, Exec, Native, Public)

void UStreamingVolumeManager::StreamingVolumeManager_TestEnable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamingVolumeManager", "StreamingVolumeManager_TestEnable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

