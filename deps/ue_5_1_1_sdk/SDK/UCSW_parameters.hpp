#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UCSW

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UCSW_structs.hpp"
#include "GameBase_structs.hpp"


namespace SDK::Params
{

// Function UCSW.GenericSettingsPanelWidget.IsOptionsChanged
// 0x0001 (0x0001 - 0x0000)
struct GenericSettingsPanelWidget_IsOptionsChanged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GenericSettingsPanelWidget_IsOptionsChanged) == 0x000001, "Wrong alignment on GenericSettingsPanelWidget_IsOptionsChanged");
static_assert(sizeof(GenericSettingsPanelWidget_IsOptionsChanged) == 0x000001, "Wrong size on GenericSettingsPanelWidget_IsOptionsChanged");
static_assert(offsetof(GenericSettingsPanelWidget_IsOptionsChanged, ReturnValue) == 0x000000, "Member 'GenericSettingsPanelWidget_IsOptionsChanged::ReturnValue' has a wrong offset!");

// Function UCSW.BaseSettingsPanelWidget.BP_OnNeedPreApplyTest
// 0x0001 (0x0001 - 0x0000)
struct BaseSettingsPanelWidget_BP_OnNeedPreApplyTest final
{
public:
	bool                                          On;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseSettingsPanelWidget_BP_OnNeedPreApplyTest) == 0x000001, "Wrong alignment on BaseSettingsPanelWidget_BP_OnNeedPreApplyTest");
static_assert(sizeof(BaseSettingsPanelWidget_BP_OnNeedPreApplyTest) == 0x000001, "Wrong size on BaseSettingsPanelWidget_BP_OnNeedPreApplyTest");
static_assert(offsetof(BaseSettingsPanelWidget_BP_OnNeedPreApplyTest, On) == 0x000000, "Member 'BaseSettingsPanelWidget_BP_OnNeedPreApplyTest::On' has a wrong offset!");

// Function UCSW.BaseSettingsPanelWidget.BP_OnShowVisualization
// 0x0060 (0x0060 - 0x0000)
struct BaseSettingsPanelWidget_BP_OnShowVisualization final
{
public:
	struct FSettingOptionVisualizationData        Visualization;                                     // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseSettingsPanelWidget_BP_OnShowVisualization) == 0x000008, "Wrong alignment on BaseSettingsPanelWidget_BP_OnShowVisualization");
static_assert(sizeof(BaseSettingsPanelWidget_BP_OnShowVisualization) == 0x000060, "Wrong size on BaseSettingsPanelWidget_BP_OnShowVisualization");
static_assert(offsetof(BaseSettingsPanelWidget_BP_OnShowVisualization, Visualization) == 0x000000, "Member 'BaseSettingsPanelWidget_BP_OnShowVisualization::Visualization' has a wrong offset!");

// Function UCSW.ColorVisionDeficiencyVisualizationWidget.Show
// 0x0001 (0x0001 - 0x0000)
struct ColorVisionDeficiencyVisualizationWidget_Show final
{
public:
	bool                                          On;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ColorVisionDeficiencyVisualizationWidget_Show) == 0x000001, "Wrong alignment on ColorVisionDeficiencyVisualizationWidget_Show");
static_assert(sizeof(ColorVisionDeficiencyVisualizationWidget_Show) == 0x000001, "Wrong size on ColorVisionDeficiencyVisualizationWidget_Show");
static_assert(offsetof(ColorVisionDeficiencyVisualizationWidget_Show, On) == 0x000000, "Member 'ColorVisionDeficiencyVisualizationWidget_Show::On' has a wrong offset!");

// Function UCSW.ColorVisionDeficiencyVisualizationWidget.Update
// 0x0008 (0x0008 - 0x0000)
struct ColorVisionDeficiencyVisualizationWidget_Update final
{
public:
	struct FColorVisionDeficiencyData             Data;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ColorVisionDeficiencyVisualizationWidget_Update) == 0x000004, "Wrong alignment on ColorVisionDeficiencyVisualizationWidget_Update");
static_assert(sizeof(ColorVisionDeficiencyVisualizationWidget_Update) == 0x000008, "Wrong size on ColorVisionDeficiencyVisualizationWidget_Update");
static_assert(offsetof(ColorVisionDeficiencyVisualizationWidget_Update, Data) == 0x000000, "Member 'ColorVisionDeficiencyVisualizationWidget_Update::Data' has a wrong offset!");

// Function UCSW.CommandButtonWidget.OnSetText
// 0x0018 (0x0018 - 0x0000)
struct CommandButtonWidget_OnSetText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommandButtonWidget_OnSetText) == 0x000008, "Wrong alignment on CommandButtonWidget_OnSetText");
static_assert(sizeof(CommandButtonWidget_OnSetText) == 0x000018, "Wrong size on CommandButtonWidget_OnSetText");
static_assert(offsetof(CommandButtonWidget_OnSetText, Text) == 0x000000, "Member 'CommandButtonWidget_OnSetText::Text' has a wrong offset!");

// Function UCSW.ControlsSettingsPanelWidget.HasConflicts
// 0x0001 (0x0001 - 0x0000)
struct ControlsSettingsPanelWidget_HasConflicts final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlsSettingsPanelWidget_HasConflicts) == 0x000001, "Wrong alignment on ControlsSettingsPanelWidget_HasConflicts");
static_assert(sizeof(ControlsSettingsPanelWidget_HasConflicts) == 0x000001, "Wrong size on ControlsSettingsPanelWidget_HasConflicts");
static_assert(offsetof(ControlsSettingsPanelWidget_HasConflicts, ReturnValue) == 0x000000, "Member 'ControlsSettingsPanelWidget_HasConflicts::ReturnValue' has a wrong offset!");

// Function UCSW.ControlsSettingsPanelWidget.HasEmptyBinds
// 0x0001 (0x0001 - 0x0000)
struct ControlsSettingsPanelWidget_HasEmptyBinds final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlsSettingsPanelWidget_HasEmptyBinds) == 0x000001, "Wrong alignment on ControlsSettingsPanelWidget_HasEmptyBinds");
static_assert(sizeof(ControlsSettingsPanelWidget_HasEmptyBinds) == 0x000001, "Wrong size on ControlsSettingsPanelWidget_HasEmptyBinds");
static_assert(offsetof(ControlsSettingsPanelWidget_HasEmptyBinds, ReturnValue) == 0x000000, "Member 'ControlsSettingsPanelWidget_HasEmptyBinds::ReturnValue' has a wrong offset!");

// Function UCSW.ControlTipsPanel.SetTips
// 0x0010 (0x0010 - 0x0000)
struct ControlTipsPanel_SetTips final
{
public:
	TArray<class FName>                           WantedTooltips;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlTipsPanel_SetTips) == 0x000008, "Wrong alignment on ControlTipsPanel_SetTips");
static_assert(sizeof(ControlTipsPanel_SetTips) == 0x000010, "Wrong size on ControlTipsPanel_SetTips");
static_assert(offsetof(ControlTipsPanel_SetTips, WantedTooltips) == 0x000000, "Member 'ControlTipsPanel_SetTips::WantedTooltips' has a wrong offset!");

// Function UCSW.ControlTipsPanel.SetTips4Test
// 0x0018 (0x0018 - 0x0000)
struct ControlTipsPanel_SetTips4Test final
{
public:
	TArray<class FName>                           WantedTips;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FControlTipsData                       Config;                                            // 0x0010(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlTipsPanel_SetTips4Test) == 0x000008, "Wrong alignment on ControlTipsPanel_SetTips4Test");
static_assert(sizeof(ControlTipsPanel_SetTips4Test) == 0x000018, "Wrong size on ControlTipsPanel_SetTips4Test");
static_assert(offsetof(ControlTipsPanel_SetTips4Test, WantedTips) == 0x000000, "Member 'ControlTipsPanel_SetTips4Test::WantedTips' has a wrong offset!");
static_assert(offsetof(ControlTipsPanel_SetTips4Test, Config) == 0x000010, "Member 'ControlTipsPanel_SetTips4Test::Config' has a wrong offset!");

// Function UCSW.ControlTipsPanel.Update
// 0x0004 (0x0004 - 0x0000)
struct ControlTipsPanel_Update final
{
public:
	struct FControlTipsData                       Config;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlTipsPanel_Update) == 0x000001, "Wrong alignment on ControlTipsPanel_Update");
static_assert(sizeof(ControlTipsPanel_Update) == 0x000004, "Wrong size on ControlTipsPanel_Update");
static_assert(offsetof(ControlTipsPanel_Update, Config) == 0x000000, "Member 'ControlTipsPanel_Update::Config' has a wrong offset!");

// Function UCSW.ControlTipWidget.OnRefresh
// 0x0030 (0x0030 - 0x0000)
struct ControlTipWidget_OnRefresh final
{
public:
	class FText                                   Description;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Keys;                                              // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlTipWidget_OnRefresh) == 0x000008, "Wrong alignment on ControlTipWidget_OnRefresh");
static_assert(sizeof(ControlTipWidget_OnRefresh) == 0x000030, "Wrong size on ControlTipWidget_OnRefresh");
static_assert(offsetof(ControlTipWidget_OnRefresh, Description) == 0x000000, "Member 'ControlTipWidget_OnRefresh::Description' has a wrong offset!");
static_assert(offsetof(ControlTipWidget_OnRefresh, Keys) == 0x000018, "Member 'ControlTipWidget_OnRefresh::Keys' has a wrong offset!");

// Function UCSW.CountdownDialogWidget.OnUpdate
// 0x0004 (0x0004 - 0x0000)
struct CountdownDialogWidget_OnUpdate final
{
public:
	int32                                         _Counter;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CountdownDialogWidget_OnUpdate) == 0x000004, "Wrong alignment on CountdownDialogWidget_OnUpdate");
static_assert(sizeof(CountdownDialogWidget_OnUpdate) == 0x000004, "Wrong size on CountdownDialogWidget_OnUpdate");
static_assert(offsetof(CountdownDialogWidget_OnUpdate, _Counter) == 0x000000, "Member 'CountdownDialogWidget_OnUpdate::_Counter' has a wrong offset!");

// Function UCSW.DialogSubtitlesLineWidget.SetText
// 0x0040 (0x0040 - 0x0000)
struct DialogSubtitlesLineWidget_SetText final
{
public:
	int32                                         _ID;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Speaker_0;                                         // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   Text_0;                                            // 0x0020(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DialogSubtitlesLineWidget_SetText) == 0x000008, "Wrong alignment on DialogSubtitlesLineWidget_SetText");
static_assert(sizeof(DialogSubtitlesLineWidget_SetText) == 0x000040, "Wrong size on DialogSubtitlesLineWidget_SetText");
static_assert(offsetof(DialogSubtitlesLineWidget_SetText, _ID) == 0x000000, "Member 'DialogSubtitlesLineWidget_SetText::_ID' has a wrong offset!");
static_assert(offsetof(DialogSubtitlesLineWidget_SetText, Speaker_0) == 0x000008, "Member 'DialogSubtitlesLineWidget_SetText::Speaker_0' has a wrong offset!");
static_assert(offsetof(DialogSubtitlesLineWidget_SetText, Text_0) == 0x000020, "Member 'DialogSubtitlesLineWidget_SetText::Text_0' has a wrong offset!");
static_assert(offsetof(DialogSubtitlesLineWidget_SetText, Color) == 0x000038, "Member 'DialogSubtitlesLineWidget_SetText::Color' has a wrong offset!");

// Function UCSW.DialogSubtitlesLineWidget.SetText4Test
// 0x0048 (0x0048 - 0x0000)
struct DialogSubtitlesLineWidget_SetText4Test final
{
public:
	class FText                                   Speaker_0;                                         // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   Text_0;                                            // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0030(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSubtitleData                          Config;                                            // 0x0040(0x0007)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_47[0x1];                                       // 0x0047(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DialogSubtitlesLineWidget_SetText4Test) == 0x000008, "Wrong alignment on DialogSubtitlesLineWidget_SetText4Test");
static_assert(sizeof(DialogSubtitlesLineWidget_SetText4Test) == 0x000048, "Wrong size on DialogSubtitlesLineWidget_SetText4Test");
static_assert(offsetof(DialogSubtitlesLineWidget_SetText4Test, Speaker_0) == 0x000000, "Member 'DialogSubtitlesLineWidget_SetText4Test::Speaker_0' has a wrong offset!");
static_assert(offsetof(DialogSubtitlesLineWidget_SetText4Test, Text_0) == 0x000018, "Member 'DialogSubtitlesLineWidget_SetText4Test::Text_0' has a wrong offset!");
static_assert(offsetof(DialogSubtitlesLineWidget_SetText4Test, Color) == 0x000030, "Member 'DialogSubtitlesLineWidget_SetText4Test::Color' has a wrong offset!");
static_assert(offsetof(DialogSubtitlesLineWidget_SetText4Test, Config) == 0x000040, "Member 'DialogSubtitlesLineWidget_SetText4Test::Config' has a wrong offset!");

// Function UCSW.DialogSubtitlesLineWidget.HasId
// 0x0008 (0x0008 - 0x0000)
struct DialogSubtitlesLineWidget_HasId final
{
public:
	int32                                         _ID;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DialogSubtitlesLineWidget_HasId) == 0x000004, "Wrong alignment on DialogSubtitlesLineWidget_HasId");
static_assert(sizeof(DialogSubtitlesLineWidget_HasId) == 0x000008, "Wrong size on DialogSubtitlesLineWidget_HasId");
static_assert(offsetof(DialogSubtitlesLineWidget_HasId, _ID) == 0x000000, "Member 'DialogSubtitlesLineWidget_HasId::_ID' has a wrong offset!");
static_assert(offsetof(DialogSubtitlesLineWidget_HasId, ReturnValue) == 0x000004, "Member 'DialogSubtitlesLineWidget_HasId::ReturnValue' has a wrong offset!");

// Function UCSW.DialogSubtitlesLineWidget.HasText
// 0x0001 (0x0001 - 0x0000)
struct DialogSubtitlesLineWidget_HasText final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DialogSubtitlesLineWidget_HasText) == 0x000001, "Wrong alignment on DialogSubtitlesLineWidget_HasText");
static_assert(sizeof(DialogSubtitlesLineWidget_HasText) == 0x000001, "Wrong size on DialogSubtitlesLineWidget_HasText");
static_assert(offsetof(DialogSubtitlesLineWidget_HasText, ReturnValue) == 0x000000, "Member 'DialogSubtitlesLineWidget_HasText::ReturnValue' has a wrong offset!");

// Function UCSW.DialogSubtitlesWidget.AddSubtitle
// 0x0040 (0x0040 - 0x0000)
struct DialogSubtitlesWidget_AddSubtitle final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Speaker;                                           // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0020(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DialogSubtitlesWidget_AddSubtitle) == 0x000008, "Wrong alignment on DialogSubtitlesWidget_AddSubtitle");
static_assert(sizeof(DialogSubtitlesWidget_AddSubtitle) == 0x000040, "Wrong size on DialogSubtitlesWidget_AddSubtitle");
static_assert(offsetof(DialogSubtitlesWidget_AddSubtitle, ID) == 0x000000, "Member 'DialogSubtitlesWidget_AddSubtitle::ID' has a wrong offset!");
static_assert(offsetof(DialogSubtitlesWidget_AddSubtitle, Speaker) == 0x000008, "Member 'DialogSubtitlesWidget_AddSubtitle::Speaker' has a wrong offset!");
static_assert(offsetof(DialogSubtitlesWidget_AddSubtitle, Text) == 0x000020, "Member 'DialogSubtitlesWidget_AddSubtitle::Text' has a wrong offset!");
static_assert(offsetof(DialogSubtitlesWidget_AddSubtitle, Color) == 0x000038, "Member 'DialogSubtitlesWidget_AddSubtitle::Color' has a wrong offset!");

// Function UCSW.DialogSubtitlesWidget.OnAddSubtitle
// 0x0004 (0x0004 - 0x0000)
struct DialogSubtitlesWidget_OnAddSubtitle final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DialogSubtitlesWidget_OnAddSubtitle) == 0x000004, "Wrong alignment on DialogSubtitlesWidget_OnAddSubtitle");
static_assert(sizeof(DialogSubtitlesWidget_OnAddSubtitle) == 0x000004, "Wrong size on DialogSubtitlesWidget_OnAddSubtitle");
static_assert(offsetof(DialogSubtitlesWidget_OnAddSubtitle, ID) == 0x000000, "Member 'DialogSubtitlesWidget_OnAddSubtitle::ID' has a wrong offset!");

// Function UCSW.DialogSubtitlesWidget.OnRemoveSubtitle
// 0x0004 (0x0004 - 0x0000)
struct DialogSubtitlesWidget_OnRemoveSubtitle final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DialogSubtitlesWidget_OnRemoveSubtitle) == 0x000004, "Wrong alignment on DialogSubtitlesWidget_OnRemoveSubtitle");
static_assert(sizeof(DialogSubtitlesWidget_OnRemoveSubtitle) == 0x000004, "Wrong size on DialogSubtitlesWidget_OnRemoveSubtitle");
static_assert(offsetof(DialogSubtitlesWidget_OnRemoveSubtitle, ID) == 0x000000, "Member 'DialogSubtitlesWidget_OnRemoveSubtitle::ID' has a wrong offset!");

// Function UCSW.DialogSubtitlesWidget.RemoveSubtitle
// 0x0004 (0x0004 - 0x0000)
struct DialogSubtitlesWidget_RemoveSubtitle final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DialogSubtitlesWidget_RemoveSubtitle) == 0x000004, "Wrong alignment on DialogSubtitlesWidget_RemoveSubtitle");
static_assert(sizeof(DialogSubtitlesWidget_RemoveSubtitle) == 0x000004, "Wrong size on DialogSubtitlesWidget_RemoveSubtitle");
static_assert(offsetof(DialogSubtitlesWidget_RemoveSubtitle, ID) == 0x000000, "Member 'DialogSubtitlesWidget_RemoveSubtitle::ID' has a wrong offset!");

// Function UCSW.ExtraSettingsPanelWidget.BP_OnCustomBack
// 0x0001 (0x0001 - 0x0000)
struct ExtraSettingsPanelWidget_BP_OnCustomBack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExtraSettingsPanelWidget_BP_OnCustomBack) == 0x000001, "Wrong alignment on ExtraSettingsPanelWidget_BP_OnCustomBack");
static_assert(sizeof(ExtraSettingsPanelWidget_BP_OnCustomBack) == 0x000001, "Wrong size on ExtraSettingsPanelWidget_BP_OnCustomBack");
static_assert(offsetof(ExtraSettingsPanelWidget_BP_OnCustomBack, ReturnValue) == 0x000000, "Member 'ExtraSettingsPanelWidget_BP_OnCustomBack::ReturnValue' has a wrong offset!");

// Function UCSW.InputBindingOptionsBox.GetFirstChild
// 0x0008 (0x0008 - 0x0000)
struct InputBindingOptionsBox_GetFirstChild final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputBindingOptionsBox_GetFirstChild) == 0x000008, "Wrong alignment on InputBindingOptionsBox_GetFirstChild");
static_assert(sizeof(InputBindingOptionsBox_GetFirstChild) == 0x000008, "Wrong size on InputBindingOptionsBox_GetFirstChild");
static_assert(offsetof(InputBindingOptionsBox_GetFirstChild, ReturnValue) == 0x000000, "Member 'InputBindingOptionsBox_GetFirstChild::ReturnValue' has a wrong offset!");

// Function UCSW.InputBindingOptionsBox.GetLastChild
// 0x0008 (0x0008 - 0x0000)
struct InputBindingOptionsBox_GetLastChild final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputBindingOptionsBox_GetLastChild) == 0x000008, "Wrong alignment on InputBindingOptionsBox_GetLastChild");
static_assert(sizeof(InputBindingOptionsBox_GetLastChild) == 0x000008, "Wrong size on InputBindingOptionsBox_GetLastChild");
static_assert(offsetof(InputBindingOptionsBox_GetLastChild, ReturnValue) == 0x000000, "Member 'InputBindingOptionsBox_GetLastChild::ReturnValue' has a wrong offset!");

// Function UCSW.InputBindingOptionWidget.OnConflictStateChanged
// 0x0001 (0x0001 - 0x0000)
struct InputBindingOptionWidget_OnConflictStateChanged final
{
public:
	bool                                          IsInConflict;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputBindingOptionWidget_OnConflictStateChanged) == 0x000001, "Wrong alignment on InputBindingOptionWidget_OnConflictStateChanged");
static_assert(sizeof(InputBindingOptionWidget_OnConflictStateChanged) == 0x000001, "Wrong size on InputBindingOptionWidget_OnConflictStateChanged");
static_assert(offsetof(InputBindingOptionWidget_OnConflictStateChanged, IsInConflict) == 0x000000, "Member 'InputBindingOptionWidget_OnConflictStateChanged::IsInConflict' has a wrong offset!");

// Function UCSW.InputBindingOptionWidget.OnLabelTextChanged
// 0x0018 (0x0018 - 0x0000)
struct InputBindingOptionWidget_OnLabelTextChanged final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputBindingOptionWidget_OnLabelTextChanged) == 0x000008, "Wrong alignment on InputBindingOptionWidget_OnLabelTextChanged");
static_assert(sizeof(InputBindingOptionWidget_OnLabelTextChanged) == 0x000018, "Wrong size on InputBindingOptionWidget_OnLabelTextChanged");
static_assert(offsetof(InputBindingOptionWidget_OnLabelTextChanged, Text) == 0x000000, "Member 'InputBindingOptionWidget_OnLabelTextChanged::Text' has a wrong offset!");

// Function UCSW.InputBindingViewBox.GetFirstChild
// 0x0008 (0x0008 - 0x0000)
struct InputBindingViewBox_GetFirstChild final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputBindingViewBox_GetFirstChild) == 0x000008, "Wrong alignment on InputBindingViewBox_GetFirstChild");
static_assert(sizeof(InputBindingViewBox_GetFirstChild) == 0x000008, "Wrong size on InputBindingViewBox_GetFirstChild");
static_assert(offsetof(InputBindingViewBox_GetFirstChild, ReturnValue) == 0x000000, "Member 'InputBindingViewBox_GetFirstChild::ReturnValue' has a wrong offset!");

// Function UCSW.InputBindingViewBox.GetLastChild
// 0x0008 (0x0008 - 0x0000)
struct InputBindingViewBox_GetLastChild final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputBindingViewBox_GetLastChild) == 0x000008, "Wrong alignment on InputBindingViewBox_GetLastChild");
static_assert(sizeof(InputBindingViewBox_GetLastChild) == 0x000008, "Wrong size on InputBindingViewBox_GetLastChild");
static_assert(offsetof(InputBindingViewBox_GetLastChild, ReturnValue) == 0x000000, "Member 'InputBindingViewBox_GetLastChild::ReturnValue' has a wrong offset!");

// DelegateFunction UCSW.InputKeyActionSelector.OnSelectionChangedEvent__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct InputKeyActionSelector_OnSelectionChangedEvent__DelegateSignature final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputKeyActionSelector_OnSelectionChangedEvent__DelegateSignature) == 0x000004, "Wrong alignment on InputKeyActionSelector_OnSelectionChangedEvent__DelegateSignature");
static_assert(sizeof(InputKeyActionSelector_OnSelectionChangedEvent__DelegateSignature) == 0x000004, "Wrong size on InputKeyActionSelector_OnSelectionChangedEvent__DelegateSignature");
static_assert(offsetof(InputKeyActionSelector_OnSelectionChangedEvent__DelegateSignature, Value) == 0x000000, "Member 'InputKeyActionSelector_OnSelectionChangedEvent__DelegateSignature::Value' has a wrong offset!");

// Function UCSW.InputKeyActionSelector.SetSelectedOption
// 0x0004 (0x0004 - 0x0000)
struct InputKeyActionSelector_SetSelectedOption final
{
public:
	int32                                         Option;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputKeyActionSelector_SetSelectedOption) == 0x000004, "Wrong alignment on InputKeyActionSelector_SetSelectedOption");
static_assert(sizeof(InputKeyActionSelector_SetSelectedOption) == 0x000004, "Wrong size on InputKeyActionSelector_SetSelectedOption");
static_assert(offsetof(InputKeyActionSelector_SetSelectedOption, Option) == 0x000000, "Member 'InputKeyActionSelector_SetSelectedOption::Option' has a wrong offset!");

// Function UCSW.InputKeyActionSelector.GetSelectedOption
// 0x0004 (0x0004 - 0x0000)
struct InputKeyActionSelector_GetSelectedOption final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputKeyActionSelector_GetSelectedOption) == 0x000004, "Wrong alignment on InputKeyActionSelector_GetSelectedOption");
static_assert(sizeof(InputKeyActionSelector_GetSelectedOption) == 0x000004, "Wrong size on InputKeyActionSelector_GetSelectedOption");
static_assert(offsetof(InputKeyActionSelector_GetSelectedOption, ReturnValue) == 0x000000, "Member 'InputKeyActionSelector_GetSelectedOption::ReturnValue' has a wrong offset!");

// Function UCSW.SaveSlotsListWidget.AskDelete
// 0x0040 (0x0040 - 0x0000)
struct SaveSlotsListWidget_AskDelete final
{
public:
	struct FSaveSlotInfo                          SlotInfo;                                          // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SaveSlotsListWidget_AskDelete) == 0x000008, "Wrong alignment on SaveSlotsListWidget_AskDelete");
static_assert(sizeof(SaveSlotsListWidget_AskDelete) == 0x000040, "Wrong size on SaveSlotsListWidget_AskDelete");
static_assert(offsetof(SaveSlotsListWidget_AskDelete, SlotInfo) == 0x000000, "Member 'SaveSlotsListWidget_AskDelete::SlotInfo' has a wrong offset!");
static_assert(offsetof(SaveSlotsListWidget_AskDelete, ReturnValue) == 0x000038, "Member 'SaveSlotsListWidget_AskDelete::ReturnValue' has a wrong offset!");

// Function UCSW.SaveSlotsListWidget.AskOverride
// 0x0040 (0x0040 - 0x0000)
struct SaveSlotsListWidget_AskOverride final
{
public:
	struct FSaveSlotInfo                          SlotInfo;                                          // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SaveSlotsListWidget_AskOverride) == 0x000008, "Wrong alignment on SaveSlotsListWidget_AskOverride");
static_assert(sizeof(SaveSlotsListWidget_AskOverride) == 0x000040, "Wrong size on SaveSlotsListWidget_AskOverride");
static_assert(offsetof(SaveSlotsListWidget_AskOverride, SlotInfo) == 0x000000, "Member 'SaveSlotsListWidget_AskOverride::SlotInfo' has a wrong offset!");
static_assert(offsetof(SaveSlotsListWidget_AskOverride, ReturnValue) == 0x000038, "Member 'SaveSlotsListWidget_AskOverride::ReturnValue' has a wrong offset!");

// DelegateFunction UCSW.SaveSlotsListWidget.SaveSlotEvent__DelegateSignature
// 0x0038 (0x0038 - 0x0000)
struct SaveSlotsListWidget_SaveSlotEvent__DelegateSignature final
{
public:
	struct FSaveSlotInfo                          SaveSlot;                                          // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveSlotsListWidget_SaveSlotEvent__DelegateSignature) == 0x000008, "Wrong alignment on SaveSlotsListWidget_SaveSlotEvent__DelegateSignature");
static_assert(sizeof(SaveSlotsListWidget_SaveSlotEvent__DelegateSignature) == 0x000038, "Wrong size on SaveSlotsListWidget_SaveSlotEvent__DelegateSignature");
static_assert(offsetof(SaveSlotsListWidget_SaveSlotEvent__DelegateSignature, SaveSlot) == 0x000000, "Member 'SaveSlotsListWidget_SaveSlotEvent__DelegateSignature::SaveSlot' has a wrong offset!");

// Function UCSW.SaveSlotListEntryWidget.GetSlotInfo
// 0x0038 (0x0038 - 0x0000)
struct SaveSlotListEntryWidget_GetSlotInfo final
{
public:
	struct FSaveSlotInfo                          ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveSlotListEntryWidget_GetSlotInfo) == 0x000008, "Wrong alignment on SaveSlotListEntryWidget_GetSlotInfo");
static_assert(sizeof(SaveSlotListEntryWidget_GetSlotInfo) == 0x000038, "Wrong size on SaveSlotListEntryWidget_GetSlotInfo");
static_assert(offsetof(SaveSlotListEntryWidget_GetSlotInfo, ReturnValue) == 0x000000, "Member 'SaveSlotListEntryWidget_GetSlotInfo::ReturnValue' has a wrong offset!");

// Function UCSW.SaveSlotWidget.OnTextChanged
// 0x0018 (0x0018 - 0x0000)
struct SaveSlotWidget_OnTextChanged final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveSlotWidget_OnTextChanged) == 0x000008, "Wrong alignment on SaveSlotWidget_OnTextChanged");
static_assert(sizeof(SaveSlotWidget_OnTextChanged) == 0x000018, "Wrong size on SaveSlotWidget_OnTextChanged");
static_assert(offsetof(SaveSlotWidget_OnTextChanged, Text) == 0x000000, "Member 'SaveSlotWidget_OnTextChanged::Text' has a wrong offset!");

// DelegateFunction UCSW.SaveSlotWidget.SaveSlotEvent__DelegateSignature
// 0x0038 (0x0038 - 0x0000)
struct SaveSlotWidget_SaveSlotEvent__DelegateSignature final
{
public:
	struct FSaveSlotInfo                          Info;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveSlotWidget_SaveSlotEvent__DelegateSignature) == 0x000008, "Wrong alignment on SaveSlotWidget_SaveSlotEvent__DelegateSignature");
static_assert(sizeof(SaveSlotWidget_SaveSlotEvent__DelegateSignature) == 0x000038, "Wrong size on SaveSlotWidget_SaveSlotEvent__DelegateSignature");
static_assert(offsetof(SaveSlotWidget_SaveSlotEvent__DelegateSignature, Info) == 0x000000, "Member 'SaveSlotWidget_SaveSlotEvent__DelegateSignature::Info' has a wrong offset!");

// Function UCSW.SettingOptionsBoxBase.GetFirstChild
// 0x0008 (0x0008 - 0x0000)
struct SettingOptionsBoxBase_GetFirstChild final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingOptionsBoxBase_GetFirstChild) == 0x000008, "Wrong alignment on SettingOptionsBoxBase_GetFirstChild");
static_assert(sizeof(SettingOptionsBoxBase_GetFirstChild) == 0x000008, "Wrong size on SettingOptionsBoxBase_GetFirstChild");
static_assert(offsetof(SettingOptionsBoxBase_GetFirstChild, ReturnValue) == 0x000000, "Member 'SettingOptionsBoxBase_GetFirstChild::ReturnValue' has a wrong offset!");

// Function UCSW.SettingOptionsBoxBase.GetLastChild
// 0x0008 (0x0008 - 0x0000)
struct SettingOptionsBoxBase_GetLastChild final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingOptionsBoxBase_GetLastChild) == 0x000008, "Wrong alignment on SettingOptionsBoxBase_GetLastChild");
static_assert(sizeof(SettingOptionsBoxBase_GetLastChild) == 0x000008, "Wrong size on SettingOptionsBoxBase_GetLastChild");
static_assert(offsetof(SettingOptionsBoxBase_GetLastChild, ReturnValue) == 0x000000, "Member 'SettingOptionsBoxBase_GetLastChild::ReturnValue' has a wrong offset!");

// Function UCSW.SettingOptionWidget.OnLabelTextChanged
// 0x0018 (0x0018 - 0x0000)
struct SettingOptionWidget_OnLabelTextChanged final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingOptionWidget_OnLabelTextChanged) == 0x000008, "Wrong alignment on SettingOptionWidget_OnLabelTextChanged");
static_assert(sizeof(SettingOptionWidget_OnLabelTextChanged) == 0x000018, "Wrong size on SettingOptionWidget_OnLabelTextChanged");
static_assert(offsetof(SettingOptionWidget_OnLabelTextChanged, Text) == 0x000000, "Member 'SettingOptionWidget_OnLabelTextChanged::Text' has a wrong offset!");

// Function UCSW.SettingOptionWidget.IsChanged
// 0x0001 (0x0001 - 0x0000)
struct SettingOptionWidget_IsChanged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingOptionWidget_IsChanged) == 0x000001, "Wrong alignment on SettingOptionWidget_IsChanged");
static_assert(sizeof(SettingOptionWidget_IsChanged) == 0x000001, "Wrong size on SettingOptionWidget_IsChanged");
static_assert(offsetof(SettingOptionWidget_IsChanged, ReturnValue) == 0x000000, "Member 'SettingOptionWidget_IsChanged::ReturnValue' has a wrong offset!");

// Function UCSW.SettingOptionWidget.OnActivated
// 0x0001 (0x0001 - 0x0000)
struct SettingOptionWidget_OnActivated final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingOptionWidget_OnActivated) == 0x000001, "Wrong alignment on SettingOptionWidget_OnActivated");
static_assert(sizeof(SettingOptionWidget_OnActivated) == 0x000001, "Wrong size on SettingOptionWidget_OnActivated");
static_assert(offsetof(SettingOptionWidget_OnActivated, IsActive) == 0x000000, "Member 'SettingOptionWidget_OnActivated::IsActive' has a wrong offset!");

// Function UCSW.SettingOptionWidget.OnValueChanged
// 0x0008 (0x0008 - 0x0000)
struct SettingOptionWidget_OnValueChanged final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WasChanged;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SettingOptionWidget_OnValueChanged) == 0x000004, "Wrong alignment on SettingOptionWidget_OnValueChanged");
static_assert(sizeof(SettingOptionWidget_OnValueChanged) == 0x000008, "Wrong size on SettingOptionWidget_OnValueChanged");
static_assert(offsetof(SettingOptionWidget_OnValueChanged, Value) == 0x000000, "Member 'SettingOptionWidget_OnValueChanged::Value' has a wrong offset!");
static_assert(offsetof(SettingOptionWidget_OnValueChanged, WasChanged) == 0x000004, "Member 'SettingOptionWidget_OnValueChanged::WasChanged' has a wrong offset!");

// Function UCSW.SettingOptionCheckboxWidget.GetValueText
// 0x0018 (0x0018 - 0x0000)
struct SettingOptionCheckboxWidget_GetValueText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingOptionCheckboxWidget_GetValueText) == 0x000008, "Wrong alignment on SettingOptionCheckboxWidget_GetValueText");
static_assert(sizeof(SettingOptionCheckboxWidget_GetValueText) == 0x000018, "Wrong size on SettingOptionCheckboxWidget_GetValueText");
static_assert(offsetof(SettingOptionCheckboxWidget_GetValueText, ReturnValue) == 0x000000, "Member 'SettingOptionCheckboxWidget_GetValueText::ReturnValue' has a wrong offset!");

// Function UCSW.SettingOptionSliderWidget.OnFValueChanged
// 0x0008 (0x0008 - 0x0000)
struct SettingOptionSliderWidget_OnFValueChanged final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WasChanged;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SettingOptionSliderWidget_OnFValueChanged) == 0x000004, "Wrong alignment on SettingOptionSliderWidget_OnFValueChanged");
static_assert(sizeof(SettingOptionSliderWidget_OnFValueChanged) == 0x000008, "Wrong size on SettingOptionSliderWidget_OnFValueChanged");
static_assert(offsetof(SettingOptionSliderWidget_OnFValueChanged, Value) == 0x000000, "Member 'SettingOptionSliderWidget_OnFValueChanged::Value' has a wrong offset!");
static_assert(offsetof(SettingOptionSliderWidget_OnFValueChanged, WasChanged) == 0x000004, "Member 'SettingOptionSliderWidget_OnFValueChanged::WasChanged' has a wrong offset!");

// Function UCSW.SettingsDialogPanel.IsActive
// 0x0001 (0x0001 - 0x0000)
struct SettingsDialogPanel_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsDialogPanel_IsActive) == 0x000001, "Wrong alignment on SettingsDialogPanel_IsActive");
static_assert(sizeof(SettingsDialogPanel_IsActive) == 0x000001, "Wrong size on SettingsDialogPanel_IsActive");
static_assert(offsetof(SettingsDialogPanel_IsActive, ReturnValue) == 0x000000, "Member 'SettingsDialogPanel_IsActive::ReturnValue' has a wrong offset!");

// Function UCSW.SettingsPanelWidget.OnShowColorVisionDeficiencyVisualization
// 0x0001 (0x0001 - 0x0000)
struct SettingsPanelWidget_OnShowColorVisionDeficiencyVisualization final
{
public:
	bool                                          Show_0;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsPanelWidget_OnShowColorVisionDeficiencyVisualization) == 0x000001, "Wrong alignment on SettingsPanelWidget_OnShowColorVisionDeficiencyVisualization");
static_assert(sizeof(SettingsPanelWidget_OnShowColorVisionDeficiencyVisualization) == 0x000001, "Wrong size on SettingsPanelWidget_OnShowColorVisionDeficiencyVisualization");
static_assert(offsetof(SettingsPanelWidget_OnShowColorVisionDeficiencyVisualization, Show_0) == 0x000000, "Member 'SettingsPanelWidget_OnShowColorVisionDeficiencyVisualization::Show_0' has a wrong offset!");

// Function UCSW.SettingsPanelWidget.OnShowControlTipsVisualization
// 0x0001 (0x0001 - 0x0000)
struct SettingsPanelWidget_OnShowControlTipsVisualization final
{
public:
	bool                                          Show_0;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsPanelWidget_OnShowControlTipsVisualization) == 0x000001, "Wrong alignment on SettingsPanelWidget_OnShowControlTipsVisualization");
static_assert(sizeof(SettingsPanelWidget_OnShowControlTipsVisualization) == 0x000001, "Wrong size on SettingsPanelWidget_OnShowControlTipsVisualization");
static_assert(offsetof(SettingsPanelWidget_OnShowControlTipsVisualization, Show_0) == 0x000000, "Member 'SettingsPanelWidget_OnShowControlTipsVisualization::Show_0' has a wrong offset!");

// Function UCSW.SettingsPanelWidget.OnShowHDRVisualization
// 0x0001 (0x0001 - 0x0000)
struct SettingsPanelWidget_OnShowHDRVisualization final
{
public:
	bool                                          Show_0;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsPanelWidget_OnShowHDRVisualization) == 0x000001, "Wrong alignment on SettingsPanelWidget_OnShowHDRVisualization");
static_assert(sizeof(SettingsPanelWidget_OnShowHDRVisualization) == 0x000001, "Wrong size on SettingsPanelWidget_OnShowHDRVisualization");
static_assert(offsetof(SettingsPanelWidget_OnShowHDRVisualization, Show_0) == 0x000000, "Member 'SettingsPanelWidget_OnShowHDRVisualization::Show_0' has a wrong offset!");

// Function UCSW.SettingsPanelWidget.OnShowTextVisualization
// 0x0001 (0x0001 - 0x0000)
struct SettingsPanelWidget_OnShowTextVisualization final
{
public:
	bool                                          Show_0;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsPanelWidget_OnShowTextVisualization) == 0x000001, "Wrong alignment on SettingsPanelWidget_OnShowTextVisualization");
static_assert(sizeof(SettingsPanelWidget_OnShowTextVisualization) == 0x000001, "Wrong size on SettingsPanelWidget_OnShowTextVisualization");
static_assert(offsetof(SettingsPanelWidget_OnShowTextVisualization, Show_0) == 0x000000, "Member 'SettingsPanelWidget_OnShowTextVisualization::Show_0' has a wrong offset!");

// Function UCSW.SettingsPanelWidget.ShowExtPanel
// 0x0008 (0x0008 - 0x0000)
struct SettingsPanelWidget_ShowExtPanel final
{
public:
	class FName                                   PanelId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsPanelWidget_ShowExtPanel) == 0x000004, "Wrong alignment on SettingsPanelWidget_ShowExtPanel");
static_assert(sizeof(SettingsPanelWidget_ShowExtPanel) == 0x000008, "Wrong size on SettingsPanelWidget_ShowExtPanel");
static_assert(offsetof(SettingsPanelWidget_ShowExtPanel, PanelId) == 0x000000, "Member 'SettingsPanelWidget_ShowExtPanel::PanelId' has a wrong offset!");

// DelegateFunction UCSW.SettingsPanelWidget.ShowExtPanelDynamicDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SettingsPanelWidget_ShowExtPanelDynamicDelegate__DelegateSignature final
{
public:
	class FName                                   PanelId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsPanelWidget_ShowExtPanelDynamicDelegate__DelegateSignature) == 0x000004, "Wrong alignment on SettingsPanelWidget_ShowExtPanelDynamicDelegate__DelegateSignature");
static_assert(sizeof(SettingsPanelWidget_ShowExtPanelDynamicDelegate__DelegateSignature) == 0x000008, "Wrong size on SettingsPanelWidget_ShowExtPanelDynamicDelegate__DelegateSignature");
static_assert(offsetof(SettingsPanelWidget_ShowExtPanelDynamicDelegate__DelegateSignature, PanelId) == 0x000000, "Member 'SettingsPanelWidget_ShowExtPanelDynamicDelegate__DelegateSignature::PanelId' has a wrong offset!");

// Function UCSW.SettingsPanelWidget.BP_OnHDRSwitched
// 0x0001 (0x0001 - 0x0000)
struct SettingsPanelWidget_BP_OnHDRSwitched final
{
public:
	bool                                          IsOn;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsPanelWidget_BP_OnHDRSwitched) == 0x000001, "Wrong alignment on SettingsPanelWidget_BP_OnHDRSwitched");
static_assert(sizeof(SettingsPanelWidget_BP_OnHDRSwitched) == 0x000001, "Wrong size on SettingsPanelWidget_BP_OnHDRSwitched");
static_assert(offsetof(SettingsPanelWidget_BP_OnHDRSwitched, IsOn) == 0x000000, "Member 'SettingsPanelWidget_BP_OnHDRSwitched::IsOn' has a wrong offset!");

// Function UCSW.SettingsPanelWidget.GetColorVisionDeficiencyData
// 0x0008 (0x0008 - 0x0000)
struct SettingsPanelWidget_GetColorVisionDeficiencyData final
{
public:
	struct FColorVisionDeficiencyData             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsPanelWidget_GetColorVisionDeficiencyData) == 0x000004, "Wrong alignment on SettingsPanelWidget_GetColorVisionDeficiencyData");
static_assert(sizeof(SettingsPanelWidget_GetColorVisionDeficiencyData) == 0x000008, "Wrong size on SettingsPanelWidget_GetColorVisionDeficiencyData");
static_assert(offsetof(SettingsPanelWidget_GetColorVisionDeficiencyData, ReturnValue) == 0x000000, "Member 'SettingsPanelWidget_GetColorVisionDeficiencyData::ReturnValue' has a wrong offset!");

// Function UCSW.SettingsPanelWidget.GetControlTipsData
// 0x0004 (0x0004 - 0x0000)
struct SettingsPanelWidget_GetControlTipsData final
{
public:
	struct FControlTipsData                       ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsPanelWidget_GetControlTipsData) == 0x000001, "Wrong alignment on SettingsPanelWidget_GetControlTipsData");
static_assert(sizeof(SettingsPanelWidget_GetControlTipsData) == 0x000004, "Wrong size on SettingsPanelWidget_GetControlTipsData");
static_assert(offsetof(SettingsPanelWidget_GetControlTipsData, ReturnValue) == 0x000000, "Member 'SettingsPanelWidget_GetControlTipsData::ReturnValue' has a wrong offset!");

// Function UCSW.SettingsPanelWidget.GetHDRData
// 0x001C (0x001C - 0x0000)
struct SettingsPanelWidget_GetHDRData final
{
public:
	struct FHDRData                               ReturnValue;                                       // 0x0000(0x001C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsPanelWidget_GetHDRData) == 0x000004, "Wrong alignment on SettingsPanelWidget_GetHDRData");
static_assert(sizeof(SettingsPanelWidget_GetHDRData) == 0x00001C, "Wrong size on SettingsPanelWidget_GetHDRData");
static_assert(offsetof(SettingsPanelWidget_GetHDRData, ReturnValue) == 0x000000, "Member 'SettingsPanelWidget_GetHDRData::ReturnValue' has a wrong offset!");

// Function UCSW.SettingsPanelWidget.GetNeutralGamma
// 0x0004 (0x0004 - 0x0000)
struct SettingsPanelWidget_GetNeutralGamma final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsPanelWidget_GetNeutralGamma) == 0x000004, "Wrong alignment on SettingsPanelWidget_GetNeutralGamma");
static_assert(sizeof(SettingsPanelWidget_GetNeutralGamma) == 0x000004, "Wrong size on SettingsPanelWidget_GetNeutralGamma");
static_assert(offsetof(SettingsPanelWidget_GetNeutralGamma, ReturnValue) == 0x000000, "Member 'SettingsPanelWidget_GetNeutralGamma::ReturnValue' has a wrong offset!");

// Function UCSW.SettingsPanelWidget.GetSubtitleData
// 0x0007 (0x0007 - 0x0000)
struct SettingsPanelWidget_GetSubtitleData final
{
public:
	struct FSubtitleData                          ReturnValue;                                       // 0x0000(0x0007)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsPanelWidget_GetSubtitleData) == 0x000001, "Wrong alignment on SettingsPanelWidget_GetSubtitleData");
static_assert(sizeof(SettingsPanelWidget_GetSubtitleData) == 0x000007, "Wrong size on SettingsPanelWidget_GetSubtitleData");
static_assert(offsetof(SettingsPanelWidget_GetSubtitleData, ReturnValue) == 0x000000, "Member 'SettingsPanelWidget_GetSubtitleData::ReturnValue' has a wrong offset!");

// Function UCSW.SettingsPanelWidget.OnQualitySwitched
// 0x0001 (0x0001 - 0x0000)
struct SettingsPanelWidget_OnQualitySwitched final
{
public:
	bool                                          IsOn;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsPanelWidget_OnQualitySwitched) == 0x000001, "Wrong alignment on SettingsPanelWidget_OnQualitySwitched");
static_assert(sizeof(SettingsPanelWidget_OnQualitySwitched) == 0x000001, "Wrong size on SettingsPanelWidget_OnQualitySwitched");
static_assert(offsetof(SettingsPanelWidget_OnQualitySwitched, IsOn) == 0x000000, "Member 'SettingsPanelWidget_OnQualitySwitched::IsOn' has a wrong offset!");

// Function UCSW.SettingsPanelWidget.OnShowGammaVisualization
// 0x0001 (0x0001 - 0x0000)
struct SettingsPanelWidget_OnShowGammaVisualization final
{
public:
	bool                                          Show_0;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsPanelWidget_OnShowGammaVisualization) == 0x000001, "Wrong alignment on SettingsPanelWidget_OnShowGammaVisualization");
static_assert(sizeof(SettingsPanelWidget_OnShowGammaVisualization) == 0x000001, "Wrong size on SettingsPanelWidget_OnShowGammaVisualization");
static_assert(offsetof(SettingsPanelWidget_OnShowGammaVisualization, Show_0) == 0x000000, "Member 'SettingsPanelWidget_OnShowGammaVisualization::Show_0' has a wrong offset!");

// Function UCSW.SettingsPanelWidget.OnUpdateGammaVisualization
// 0x0004 (0x0004 - 0x0000)
struct SettingsPanelWidget_OnUpdateGammaVisualization final
{
public:
	float                                         Gamma;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsPanelWidget_OnUpdateGammaVisualization) == 0x000004, "Wrong alignment on SettingsPanelWidget_OnUpdateGammaVisualization");
static_assert(sizeof(SettingsPanelWidget_OnUpdateGammaVisualization) == 0x000004, "Wrong size on SettingsPanelWidget_OnUpdateGammaVisualization");
static_assert(offsetof(SettingsPanelWidget_OnUpdateGammaVisualization, Gamma) == 0x000000, "Member 'SettingsPanelWidget_OnUpdateGammaVisualization::Gamma' has a wrong offset!");

// Function UCSW.SettingsTabButtonWidget.OnPanelStateChanged
// 0x0001 (0x0001 - 0x0000)
struct SettingsTabButtonWidget_OnPanelStateChanged final
{
public:
	bool                                          WasChanged;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsTabButtonWidget_OnPanelStateChanged) == 0x000001, "Wrong alignment on SettingsTabButtonWidget_OnPanelStateChanged");
static_assert(sizeof(SettingsTabButtonWidget_OnPanelStateChanged) == 0x000001, "Wrong size on SettingsTabButtonWidget_OnPanelStateChanged");
static_assert(offsetof(SettingsTabButtonWidget_OnPanelStateChanged, WasChanged) == 0x000000, "Member 'SettingsTabButtonWidget_OnPanelStateChanged::WasChanged' has a wrong offset!");

// Function UCSW.SettingsWidget.OnActiveWidgetChanged
// 0x0010 (0x0010 - 0x0000)
struct SettingsWidget_OnActiveWidgetChanged final
{
public:
	class UWidget*                                ActiveWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActiveWidgetIndex;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SettingsWidget_OnActiveWidgetChanged) == 0x000008, "Wrong alignment on SettingsWidget_OnActiveWidgetChanged");
static_assert(sizeof(SettingsWidget_OnActiveWidgetChanged) == 0x000010, "Wrong size on SettingsWidget_OnActiveWidgetChanged");
static_assert(offsetof(SettingsWidget_OnActiveWidgetChanged, ActiveWidget) == 0x000000, "Member 'SettingsWidget_OnActiveWidgetChanged::ActiveWidget' has a wrong offset!");
static_assert(offsetof(SettingsWidget_OnActiveWidgetChanged, ActiveWidgetIndex) == 0x000008, "Member 'SettingsWidget_OnActiveWidgetChanged::ActiveWidgetIndex' has a wrong offset!");

// Function UCSW.SettingsWidget.OnExtPanel
// 0x0008 (0x0008 - 0x0000)
struct SettingsWidget_OnExtPanel final
{
public:
	class FName                                   PanelId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsWidget_OnExtPanel) == 0x000004, "Wrong alignment on SettingsWidget_OnExtPanel");
static_assert(sizeof(SettingsWidget_OnExtPanel) == 0x000008, "Wrong size on SettingsWidget_OnExtPanel");
static_assert(offsetof(SettingsWidget_OnExtPanel, PanelId) == 0x000000, "Member 'SettingsWidget_OnExtPanel::PanelId' has a wrong offset!");

// Function UCSW.SettingsWidget.OnShowBackground
// 0x0001 (0x0001 - 0x0000)
struct SettingsWidget_OnShowBackground final
{
public:
	bool                                          Show_0;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsWidget_OnShowBackground) == 0x000001, "Wrong alignment on SettingsWidget_OnShowBackground");
static_assert(sizeof(SettingsWidget_OnShowBackground) == 0x000001, "Wrong size on SettingsWidget_OnShowBackground");
static_assert(offsetof(SettingsWidget_OnShowBackground, Show_0) == 0x000000, "Member 'SettingsWidget_OnShowBackground::Show_0' has a wrong offset!");

// Function UCSW.SettingsWidget.OnShowExtraPanel
// 0x0008 (0x0008 - 0x0000)
struct SettingsWidget_OnShowExtraPanel final
{
public:
	class UExtraSettingsPanelWidget*              Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsWidget_OnShowExtraPanel) == 0x000008, "Wrong alignment on SettingsWidget_OnShowExtraPanel");
static_assert(sizeof(SettingsWidget_OnShowExtraPanel) == 0x000008, "Wrong size on SettingsWidget_OnShowExtraPanel");
static_assert(offsetof(SettingsWidget_OnShowExtraPanel, Panel) == 0x000000, "Member 'SettingsWidget_OnShowExtraPanel::Panel' has a wrong offset!");

// DelegateFunction UCSW.SettingsWidget.ShowBackgoundDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct SettingsWidget_ShowBackgoundDelegate__DelegateSignature final
{
public:
	bool                                          Show_0;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsWidget_ShowBackgoundDelegate__DelegateSignature) == 0x000001, "Wrong alignment on SettingsWidget_ShowBackgoundDelegate__DelegateSignature");
static_assert(sizeof(SettingsWidget_ShowBackgoundDelegate__DelegateSignature) == 0x000001, "Wrong size on SettingsWidget_ShowBackgoundDelegate__DelegateSignature");
static_assert(offsetof(SettingsWidget_ShowBackgoundDelegate__DelegateSignature, Show_0) == 0x000000, "Member 'SettingsWidget_ShowBackgoundDelegate__DelegateSignature::Show_0' has a wrong offset!");

// Function UCSW.SettingsWidget.ShowExtraPanel
// 0x0008 (0x0008 - 0x0000)
struct SettingsWidget_ShowExtraPanel final
{
public:
	class UWidget*                                Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsWidget_ShowExtraPanel) == 0x000008, "Wrong alignment on SettingsWidget_ShowExtraPanel");
static_assert(sizeof(SettingsWidget_ShowExtraPanel) == 0x000008, "Wrong size on SettingsWidget_ShowExtraPanel");
static_assert(offsetof(SettingsWidget_ShowExtraPanel, Panel) == 0x000000, "Member 'SettingsWidget_ShowExtraPanel::Panel' has a wrong offset!");

// Function UCSW.UCSWStartGameSettingsWidget.OnActiveWidgetChanged
// 0x0010 (0x0010 - 0x0000)
struct UCSWStartGameSettingsWidget_OnActiveWidgetChanged final
{
public:
	class UWidget*                                Active_widget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Active_widget_index;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UCSWStartGameSettingsWidget_OnActiveWidgetChanged) == 0x000008, "Wrong alignment on UCSWStartGameSettingsWidget_OnActiveWidgetChanged");
static_assert(sizeof(UCSWStartGameSettingsWidget_OnActiveWidgetChanged) == 0x000010, "Wrong size on UCSWStartGameSettingsWidget_OnActiveWidgetChanged");
static_assert(offsetof(UCSWStartGameSettingsWidget_OnActiveWidgetChanged, Active_widget) == 0x000000, "Member 'UCSWStartGameSettingsWidget_OnActiveWidgetChanged::Active_widget' has a wrong offset!");
static_assert(offsetof(UCSWStartGameSettingsWidget_OnActiveWidgetChanged, Active_widget_index) == 0x000008, "Member 'UCSWStartGameSettingsWidget_OnActiveWidgetChanged::Active_widget_index' has a wrong offset!");

// Function UCSW.UCSWStartGameSettingsWidget.OnExtPanel
// 0x0008 (0x0008 - 0x0000)
struct UCSWStartGameSettingsWidget_OnExtPanel final
{
public:
	class FName                                   PanelId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCSWStartGameSettingsWidget_OnExtPanel) == 0x000004, "Wrong alignment on UCSWStartGameSettingsWidget_OnExtPanel");
static_assert(sizeof(UCSWStartGameSettingsWidget_OnExtPanel) == 0x000008, "Wrong size on UCSWStartGameSettingsWidget_OnExtPanel");
static_assert(offsetof(UCSWStartGameSettingsWidget_OnExtPanel, PanelId) == 0x000000, "Member 'UCSWStartGameSettingsWidget_OnExtPanel::PanelId' has a wrong offset!");

// Function UCSW.UCSWStartGameSettingsWidget.OnShowBackground
// 0x0001 (0x0001 - 0x0000)
struct UCSWStartGameSettingsWidget_OnShowBackground final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCSWStartGameSettingsWidget_OnShowBackground) == 0x000001, "Wrong alignment on UCSWStartGameSettingsWidget_OnShowBackground");
static_assert(sizeof(UCSWStartGameSettingsWidget_OnShowBackground) == 0x000001, "Wrong size on UCSWStartGameSettingsWidget_OnShowBackground");
static_assert(offsetof(UCSWStartGameSettingsWidget_OnShowBackground, Show) == 0x000000, "Member 'UCSWStartGameSettingsWidget_OnShowBackground::Show' has a wrong offset!");

// Function UCSW.UCSWStartGameSettingsWidget.OnShowExtraPanel
// 0x0008 (0x0008 - 0x0000)
struct UCSWStartGameSettingsWidget_OnShowExtraPanel final
{
public:
	class UExtraSettingsPanelWidget*              Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCSWStartGameSettingsWidget_OnShowExtraPanel) == 0x000008, "Wrong alignment on UCSWStartGameSettingsWidget_OnShowExtraPanel");
static_assert(sizeof(UCSWStartGameSettingsWidget_OnShowExtraPanel) == 0x000008, "Wrong size on UCSWStartGameSettingsWidget_OnShowExtraPanel");
static_assert(offsetof(UCSWStartGameSettingsWidget_OnShowExtraPanel, Panel) == 0x000000, "Member 'UCSWStartGameSettingsWidget_OnShowExtraPanel::Panel' has a wrong offset!");

// DelegateFunction UCSW.UCSWStartGameSettingsWidget.ShowBackgoundDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct UCSWStartGameSettingsWidget_ShowBackgoundDelegate__DelegateSignature final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCSWStartGameSettingsWidget_ShowBackgoundDelegate__DelegateSignature) == 0x000001, "Wrong alignment on UCSWStartGameSettingsWidget_ShowBackgoundDelegate__DelegateSignature");
static_assert(sizeof(UCSWStartGameSettingsWidget_ShowBackgoundDelegate__DelegateSignature) == 0x000001, "Wrong size on UCSWStartGameSettingsWidget_ShowBackgoundDelegate__DelegateSignature");
static_assert(offsetof(UCSWStartGameSettingsWidget_ShowBackgoundDelegate__DelegateSignature, Show) == 0x000000, "Member 'UCSWStartGameSettingsWidget_ShowBackgoundDelegate__DelegateSignature::Show' has a wrong offset!");

// Function UCSW.UCSWStartGameSettingsWidget.ShowExtraPanel
// 0x0008 (0x0008 - 0x0000)
struct UCSWStartGameSettingsWidget_ShowExtraPanel final
{
public:
	class UUCSWStartGameSettingsPanel*            Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCSWStartGameSettingsWidget_ShowExtraPanel) == 0x000008, "Wrong alignment on UCSWStartGameSettingsWidget_ShowExtraPanel");
static_assert(sizeof(UCSWStartGameSettingsWidget_ShowExtraPanel) == 0x000008, "Wrong size on UCSWStartGameSettingsWidget_ShowExtraPanel");
static_assert(offsetof(UCSWStartGameSettingsWidget_ShowExtraPanel, Panel) == 0x000000, "Member 'UCSWStartGameSettingsWidget_ShowExtraPanel::Panel' has a wrong offset!");

}

