#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SimpleSpawnPoints

#include "Basic.hpp"

#include "LevelStreaming_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct SimpleSpawnPoints.SpawnPointData
// 0x0120 (0x0120 - 0x0000)
struct FSpawnPointData final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomName;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStreamableLevelHandle                 PersistentLevel;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FStreamableLevel                       Level;                                             // 0x0028(0x0070)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Position;                                          // 0x00A0(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLevelStreamingRequestHandle>   InitialStreamingRequests;                          // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FDataLayerStatus>               InitialDataLayerRequests;                          // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnPointData) == 0x000010, "Wrong alignment on FSpawnPointData");
static_assert(sizeof(FSpawnPointData) == 0x000120, "Wrong size on FSpawnPointData");
static_assert(offsetof(FSpawnPointData, Guid) == 0x000000, "Member 'FSpawnPointData::Guid' has a wrong offset!");
static_assert(offsetof(FSpawnPointData, CustomName) == 0x000010, "Member 'FSpawnPointData::CustomName' has a wrong offset!");
static_assert(offsetof(FSpawnPointData, PersistentLevel) == 0x000020, "Member 'FSpawnPointData::PersistentLevel' has a wrong offset!");
static_assert(offsetof(FSpawnPointData, Level) == 0x000028, "Member 'FSpawnPointData::Level' has a wrong offset!");
static_assert(offsetof(FSpawnPointData, Position) == 0x0000A0, "Member 'FSpawnPointData::Position' has a wrong offset!");
static_assert(offsetof(FSpawnPointData, InitialStreamingRequests) == 0x000100, "Member 'FSpawnPointData::InitialStreamingRequests' has a wrong offset!");
static_assert(offsetof(FSpawnPointData, InitialDataLayerRequests) == 0x000110, "Member 'FSpawnPointData::InitialDataLayerRequests' has a wrong offset!");

// ScriptStruct SimpleSpawnPoints.SpawnPointHandle
// 0x0020 (0x0020 - 0x0000)
struct FSpawnPointHandle final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Guid;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnPointHandle) == 0x000008, "Wrong alignment on FSpawnPointHandle");
static_assert(sizeof(FSpawnPointHandle) == 0x000020, "Wrong size on FSpawnPointHandle");
static_assert(offsetof(FSpawnPointHandle, Name) == 0x000000, "Member 'FSpawnPointHandle::Name' has a wrong offset!");
static_assert(offsetof(FSpawnPointHandle, Guid) == 0x000010, "Member 'FSpawnPointHandle::Guid' has a wrong offset!");

}

