#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GlobalProperties

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "CoreUObject_classes.hpp"
#include "GlobalProperties_structs.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class GlobalProperties.GlobalPropertiesCollection
// 0x0010 (0x0040 - 0x0030)
class UGlobalPropertiesCollection final : public UDataAsset
{
public:
	TArray<class UGlobalPropertiesSheet*>         Sheets;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GlobalPropertiesCollection">();
	}
	static class UGlobalPropertiesCollection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGlobalPropertiesCollection>();
	}
};
static_assert(alignof(UGlobalPropertiesCollection) == 0x000008, "Wrong alignment on UGlobalPropertiesCollection");
static_assert(sizeof(UGlobalPropertiesCollection) == 0x000040, "Wrong size on UGlobalPropertiesCollection");
static_assert(offsetof(UGlobalPropertiesCollection, Sheets) == 0x000030, "Member 'UGlobalPropertiesCollection::Sheets' has a wrong offset!");

// Class GlobalProperties.GlobalPropertiesData
// 0x0078 (0x00A0 - 0x0028)
class UGlobalPropertiesData final : public UObject
{
public:
	uint8                                         Pad_28[0x78];                                      // 0x0028(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GlobalPropertiesData">();
	}
	static class UGlobalPropertiesData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGlobalPropertiesData>();
	}
};
static_assert(alignof(UGlobalPropertiesData) == 0x000008, "Wrong alignment on UGlobalPropertiesData");
static_assert(sizeof(UGlobalPropertiesData) == 0x0000A0, "Wrong size on UGlobalPropertiesData");

// Class GlobalProperties.GlobalPropertiesDataProvider
// 0x0000 (0x0028 - 0x0028)
class IGlobalPropertiesDataProvider final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GlobalPropertiesDataProvider">();
	}
	static class IGlobalPropertiesDataProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<IGlobalPropertiesDataProvider>();
	}
};
static_assert(alignof(IGlobalPropertiesDataProvider) == 0x000008, "Wrong alignment on IGlobalPropertiesDataProvider");
static_assert(sizeof(IGlobalPropertiesDataProvider) == 0x000028, "Wrong size on IGlobalPropertiesDataProvider");

// Class GlobalProperties.GlobalPropertiesEventsComponent
// 0x0060 (0x0100 - 0x00A0)
class UGlobalPropertiesEventsComponent final : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_             OnValueChangedBool;                                // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnValueChangedInt;                                 // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnValueChangedFloat;                               // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TArray<struct FGlobalPropertyHandleBool>      ObservedBools;                                     // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FGlobalPropertyHandleInt>       ObservedInts;                                      // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FGlobalPropertyHandleFloat>     ObservedFloats;                                    // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void AddObservedBools(const TArray<struct FGlobalPropertyHandleBool>& NewBools);
	void AddObservedFloats(const TArray<struct FGlobalPropertyHandleFloat>& NewFloats);
	void AddObservedInts(const TArray<struct FGlobalPropertyHandleInt>& NewInts);
	void BoolValueChanged__DelegateSignature(class UGlobalPropertiesEventsComponent* Events, const struct FGlobalPropertyHandleBool& Property, bool Value);
	void FloatValueChanged__DelegateSignature(class UGlobalPropertiesEventsComponent* Events, const struct FGlobalPropertyHandleFloat& Property, float Value);
	void IntValueChanged__DelegateSignature(class UGlobalPropertiesEventsComponent* Events, const struct FGlobalPropertyHandleInt& Property, int32 Value);
	void SetObservedBools(const TArray<struct FGlobalPropertyHandleBool>& NewBools);
	void SetObservedFloats(const TArray<struct FGlobalPropertyHandleFloat>& NewFloats);
	void SetObservedInts(const TArray<struct FGlobalPropertyHandleInt>& NewInts);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GlobalPropertiesEventsComponent">();
	}
	static class UGlobalPropertiesEventsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGlobalPropertiesEventsComponent>();
	}
};
static_assert(alignof(UGlobalPropertiesEventsComponent) == 0x000008, "Wrong alignment on UGlobalPropertiesEventsComponent");
static_assert(sizeof(UGlobalPropertiesEventsComponent) == 0x000100, "Wrong size on UGlobalPropertiesEventsComponent");
static_assert(offsetof(UGlobalPropertiesEventsComponent, OnValueChangedBool) == 0x0000A0, "Member 'UGlobalPropertiesEventsComponent::OnValueChangedBool' has a wrong offset!");
static_assert(offsetof(UGlobalPropertiesEventsComponent, OnValueChangedInt) == 0x0000B0, "Member 'UGlobalPropertiesEventsComponent::OnValueChangedInt' has a wrong offset!");
static_assert(offsetof(UGlobalPropertiesEventsComponent, OnValueChangedFloat) == 0x0000C0, "Member 'UGlobalPropertiesEventsComponent::OnValueChangedFloat' has a wrong offset!");
static_assert(offsetof(UGlobalPropertiesEventsComponent, ObservedBools) == 0x0000D0, "Member 'UGlobalPropertiesEventsComponent::ObservedBools' has a wrong offset!");
static_assert(offsetof(UGlobalPropertiesEventsComponent, ObservedInts) == 0x0000E0, "Member 'UGlobalPropertiesEventsComponent::ObservedInts' has a wrong offset!");
static_assert(offsetof(UGlobalPropertiesEventsComponent, ObservedFloats) == 0x0000F0, "Member 'UGlobalPropertiesEventsComponent::ObservedFloats' has a wrong offset!");

// Class GlobalProperties.GlobalPropertiesSettings
// 0x0030 (0x0068 - 0x0038)
class UGlobalPropertiesSettings final : public UDeveloperSettings
{
public:
	TSoftObjectPtr<class UGlobalPropertiesCollection> Properties;                                        // 0x0038(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, Config, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GlobalPropertiesSettings">();
	}
	static class UGlobalPropertiesSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGlobalPropertiesSettings>();
	}
};
static_assert(alignof(UGlobalPropertiesSettings) == 0x000008, "Wrong alignment on UGlobalPropertiesSettings");
static_assert(sizeof(UGlobalPropertiesSettings) == 0x000068, "Wrong size on UGlobalPropertiesSettings");
static_assert(offsetof(UGlobalPropertiesSettings, Properties) == 0x000038, "Member 'UGlobalPropertiesSettings::Properties' has a wrong offset!");

// Class GlobalProperties.GlobalPropertiesSheet
// 0x0048 (0x0078 - 0x0030)
class UGlobalPropertiesSheet final : public UDataAsset
{
public:
	class FString                                 UniqueName;                                        // 0x0030(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Saveable;                                          // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGlobalPropertyConfigBool>      Bools;                                             // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FGlobalPropertyConfigInt>       Ints;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FGlobalPropertyConfigFloat>     Floats;                                            // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GlobalPropertiesSheet">();
	}
	static class UGlobalPropertiesSheet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGlobalPropertiesSheet>();
	}
};
static_assert(alignof(UGlobalPropertiesSheet) == 0x000008, "Wrong alignment on UGlobalPropertiesSheet");
static_assert(sizeof(UGlobalPropertiesSheet) == 0x000078, "Wrong size on UGlobalPropertiesSheet");
static_assert(offsetof(UGlobalPropertiesSheet, UniqueName) == 0x000030, "Member 'UGlobalPropertiesSheet::UniqueName' has a wrong offset!");
static_assert(offsetof(UGlobalPropertiesSheet, Saveable) == 0x000040, "Member 'UGlobalPropertiesSheet::Saveable' has a wrong offset!");
static_assert(offsetof(UGlobalPropertiesSheet, Bools) == 0x000048, "Member 'UGlobalPropertiesSheet::Bools' has a wrong offset!");
static_assert(offsetof(UGlobalPropertiesSheet, Ints) == 0x000058, "Member 'UGlobalPropertiesSheet::Ints' has a wrong offset!");
static_assert(offsetof(UGlobalPropertiesSheet, Floats) == 0x000068, "Member 'UGlobalPropertiesSheet::Floats' has a wrong offset!");

// Class GlobalProperties.GlobalPropertiesStaticLibrary
// 0x0000 (0x0028 - 0x0028)
class UGlobalPropertiesStaticLibrary final : public UBlueprintFunctionLibrary
{
public:
	static float AddToGlobalFloat(class UObject* WorldContextObject, const struct FGlobalPropertyHandleFloat& Handle, const float Value);
	static int32 AddToGlobalInt(class UObject* WorldContextObject, const struct FGlobalPropertyHandleInt& Handle, const int32 Value);
	static float DivideGlobalFloatBy(class UObject* WorldContextObject, const struct FGlobalPropertyHandleFloat& Handle, const float Value);
	static int32 DivideGlobalIntBy(class UObject* WorldContextObject, const struct FGlobalPropertyHandleInt& Handle, const int32 Value);
	static bool GetGlobalBool(class UObject* WorldContextObject, const struct FGlobalPropertyHandleBool& Handle);
	static float GetGlobalFloat(class UObject* WorldContextObject, const struct FGlobalPropertyHandleFloat& Handle);
	static int32 GetGlobalInt(class UObject* WorldContextObject, const struct FGlobalPropertyHandleInt& Handle);
	static float MultiplyGlobalFloatBy(class UObject* WorldContextObject, const struct FGlobalPropertyHandleFloat& Handle, const float Value);
	static int32 MultiplyGlobalIntBy(class UObject* WorldContextObject, const struct FGlobalPropertyHandleInt& Handle, const int32 Value);
	static void ResetGlobalProperties(class UObject* WorldContextObject, const class UGlobalPropertiesSheet* Sheet);
	static void SetGlobalBool(class UObject* WorldContextObject, const struct FGlobalPropertyHandleBool& Handle, const bool NewValue);
	static void SetGlobalFloat(class UObject* WorldContextObject, const struct FGlobalPropertyHandleFloat& Handle, const float NewValue);
	static void SetGlobalInt(class UObject* WorldContextObject, const struct FGlobalPropertyHandleInt& Handle, const int32 NewValue);
	static float SubtractFromGlobalFloat(class UObject* WorldContextObject, const struct FGlobalPropertyHandleFloat& Handle, const float Value);
	static int32 SubtractFromGlobalInt(class UObject* WorldContextObject, const struct FGlobalPropertyHandleInt& Handle, const int32 Value);
	static bool ToggleGlobalBool(class UObject* WorldContextObject, const struct FGlobalPropertyHandleBool& Handle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GlobalPropertiesStaticLibrary">();
	}
	static class UGlobalPropertiesStaticLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGlobalPropertiesStaticLibrary>();
	}
};
static_assert(alignof(UGlobalPropertiesStaticLibrary) == 0x000008, "Wrong alignment on UGlobalPropertiesStaticLibrary");
static_assert(sizeof(UGlobalPropertiesStaticLibrary) == 0x000028, "Wrong size on UGlobalPropertiesStaticLibrary");

}

