#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PostProcessVolumeEx

#include "Basic.hpp"

#include "PostProcessVolumeEx_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class PostProcessVolumeEx.AtmosphereCtrlWorldSettings
// 0x0008 (0x04E0 - 0x04D8)
class AAtmosphereCtrlWorldSettings : public AWorldSettings
{
public:
	TSubclassOf<class APostprocessingCtrlActor>   PostprocessingCtrlClass;                           // 0x04D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtmosphereCtrlWorldSettings">();
	}
	static class AAtmosphereCtrlWorldSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAtmosphereCtrlWorldSettings>();
	}
};
static_assert(alignof(AAtmosphereCtrlWorldSettings) == 0x000008, "Wrong alignment on AAtmosphereCtrlWorldSettings");
static_assert(sizeof(AAtmosphereCtrlWorldSettings) == 0x0004E0, "Wrong size on AAtmosphereCtrlWorldSettings");
static_assert(offsetof(AAtmosphereCtrlWorldSettings, PostprocessingCtrlClass) == 0x0004D8, "Member 'AAtmosphereCtrlWorldSettings::PostprocessingCtrlClass' has a wrong offset!");

// Class PostProcessVolumeEx.AtmosphereDOFFactorDA
// 0x0010 (0x0040 - 0x0030)
class UAtmosphereDOFFactorDA final : public UPrimaryDataAsset
{
public:
	TArray<struct FAtmosphereDOFFactor>           Factors;                                           // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtmosphereDOFFactorDA">();
	}
	static class UAtmosphereDOFFactorDA* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtmosphereDOFFactorDA>();
	}
};
static_assert(alignof(UAtmosphereDOFFactorDA) == 0x000008, "Wrong alignment on UAtmosphereDOFFactorDA");
static_assert(sizeof(UAtmosphereDOFFactorDA) == 0x000040, "Wrong size on UAtmosphereDOFFactorDA");
static_assert(offsetof(UAtmosphereDOFFactorDA, Factors) == 0x000030, "Member 'UAtmosphereDOFFactorDA::Factors' has a wrong offset!");

// Class PostProcessVolumeEx.AtmosphereVCloudsActor
// 0x0038 (0x02E8 - 0x02B0)
class AAtmosphereVCloudsActor final : public AActor
{
public:
	class USplineComponent*                       SplineComponent;                                   // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBoxComponent*                          BoxComponent;                                      // 0x02B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C0[0x8];                                      // 0x02C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UVolumeTexture*                         Volume;                                            // 0x02C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Density;                                           // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OrientToSpline;                                    // 0x02D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D5[0x3];                                      // 0x02D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimationSpeed;                                    // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LoopAnimation;                                     // 0x02DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2DD[0x3];                                      // 0x02DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SequencerTime;                                     // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E4[0x4];                                      // 0x02E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtmosphereVCloudsActor">();
	}
	static class AAtmosphereVCloudsActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAtmosphereVCloudsActor>();
	}
};
static_assert(alignof(AAtmosphereVCloudsActor) == 0x000008, "Wrong alignment on AAtmosphereVCloudsActor");
static_assert(sizeof(AAtmosphereVCloudsActor) == 0x0002E8, "Wrong size on AAtmosphereVCloudsActor");
static_assert(offsetof(AAtmosphereVCloudsActor, SplineComponent) == 0x0002B0, "Member 'AAtmosphereVCloudsActor::SplineComponent' has a wrong offset!");
static_assert(offsetof(AAtmosphereVCloudsActor, BoxComponent) == 0x0002B8, "Member 'AAtmosphereVCloudsActor::BoxComponent' has a wrong offset!");
static_assert(offsetof(AAtmosphereVCloudsActor, Volume) == 0x0002C8, "Member 'AAtmosphereVCloudsActor::Volume' has a wrong offset!");
static_assert(offsetof(AAtmosphereVCloudsActor, Density) == 0x0002D0, "Member 'AAtmosphereVCloudsActor::Density' has a wrong offset!");
static_assert(offsetof(AAtmosphereVCloudsActor, OrientToSpline) == 0x0002D4, "Member 'AAtmosphereVCloudsActor::OrientToSpline' has a wrong offset!");
static_assert(offsetof(AAtmosphereVCloudsActor, AnimationSpeed) == 0x0002D8, "Member 'AAtmosphereVCloudsActor::AnimationSpeed' has a wrong offset!");
static_assert(offsetof(AAtmosphereVCloudsActor, LoopAnimation) == 0x0002DC, "Member 'AAtmosphereVCloudsActor::LoopAnimation' has a wrong offset!");
static_assert(offsetof(AAtmosphereVCloudsActor, SequencerTime) == 0x0002E0, "Member 'AAtmosphereVCloudsActor::SequencerTime' has a wrong offset!");

// Class PostProcessVolumeEx.PostprocessingCtrlActor
// 0x13D0 (0x1680 - 0x02B0)
#pragma pack(push, 0x1)
class alignas(0x10) APostprocessingCtrlActor : public AActor
{
public:
	class UDataTable*                             CachedAtmospheresDatatable;                        // 0x02B0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             CachedPresetsOverridesDatatable;                   // 0x02B8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAtmoCtrlMaterialInstanceDynamicCached LensDistortion;                                    // 0x02C0(0x0040)(Transient, NativeAccessSpecifierPublic)
	struct FAtmoCtrlMaterialInstanceDynamicCached MagicLight;                                        // 0x0300(0x0040)(Transient, NativeAccessSpecifierPublic)
	struct FAtmoCtrlMaterialInstanceDynamicCached FogDarkeningMaterialDynamic;                       // 0x0340(0x0040)(Transient, NativeAccessSpecifierPublic)
	struct FAtmoCtrlMaterialInstanceDynamicCached VCloudsMaterialDynamic[0x2];                       // 0x0380(0x0040)(Transient, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       SkyboxDynamics;                                    // 0x0400(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	class UDirectionalLightComponent*             DirectionalLight;                                  // 0x0410(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDirectionalLightComponent*             DirectionalAmbient;                                // 0x0418(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UExponentialHeightFogComponent*         ExpHeightFog;                                      // 0x0420(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyAtmosphereComponent*                AtmSky;                                            // 0x0428(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyLightComponent*                     SkyLight;                                          // 0x0430(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   Skybox;                                            // 0x0438(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtmosphereVCloudsCtrl*                 VCloudsCtrl;                                       // 0x0440(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVolumetricCloudComponent*              VClouds;                                           // 0x0448(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSHPostprocessSkyBox                   CachedSkyBox;                                      // 0x0450(0x0190)(Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E0[0x1C];                                     // 0x05E0(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpolatedDayNightFactor;                        // 0x05FC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraParameterCollectionInstance*    NiagaraParametersCollectionInstance;               // 0x0600(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlayerPosition;                                    // 0x0608(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PreviousPlayerPosition;                            // 0x0620(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_638[0x8];                                      // 0x0638(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAtmospherePresetDataEx                OverrideData;                                      // 0x0640(0x0DD0)(Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_1410[0x1E0];                                   // 0x1410(0x01E0)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     FogDarkeningMaterial;                              // 0x15F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     LensDistortionMaterial;                            // 0x15F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     MagicLightMaterial;                                // 0x1600(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             SkyMaterials;                                      // 0x1608(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UMaterialInterface>> VCloudMaterialsSRef;                               // 0x1618(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class UTexture2D*                             DefaultWeatherTexture;                             // 0x1628(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             DefaultGradientTexture;                            // 0x1630(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeleportRotationOffset;                            // 0x1638(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkyRecaptureFrequency;                             // 0x163C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialParameterCollection*           ParametersCollection;                              // 0x1640(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialParameterCollection*           TranslucencyParametersCollection;                  // 0x1648(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraParameterCollection*            NiagaraParametersCollection;                       // 0x1650(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SSSDayNightFactorMin;                              // 0x1658(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SSSDayNightFactorMax;                              // 0x165C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FUZZDayNightFactorMin;                             // 0x1660(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FUZZDayNightFactorMax;                             // 0x1664(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BCKLGHDayNightFactorMin;                           // 0x1668(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BCKLGHDayNightFactorMax;                           // 0x166C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtmosphereDOFFactorDA*                 AtmosphereDOFFogScalingFactors;                    // 0x1670(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class APostprocessingCtrlActor* GetAtmosphereController(const class UObject* WorldContextObject);

	void DisableContactShadows();
	void EnableContactShadows();
	void OverrideGlobalSettins(const struct FAtmospherePresetDataEx& Data, bool DoOverride, bool DisableSubVolumesDuringOverride);
	void OverrideWindParameters(bool State, const struct FSHPostprocessWindData& Wind);

	float GetDayNightFactor() const;
	const struct FSHPostprocessWindData GetLastWindData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PostprocessingCtrlActor">();
	}
	static class APostprocessingCtrlActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<APostprocessingCtrlActor>();
	}
};
#pragma pack(pop)
static_assert(alignof(APostprocessingCtrlActor) == 0x000010, "Wrong alignment on APostprocessingCtrlActor");
static_assert(sizeof(APostprocessingCtrlActor) == 0x001680, "Wrong size on APostprocessingCtrlActor");
static_assert(offsetof(APostprocessingCtrlActor, CachedAtmospheresDatatable) == 0x0002B0, "Member 'APostprocessingCtrlActor::CachedAtmospheresDatatable' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, CachedPresetsOverridesDatatable) == 0x0002B8, "Member 'APostprocessingCtrlActor::CachedPresetsOverridesDatatable' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, LensDistortion) == 0x0002C0, "Member 'APostprocessingCtrlActor::LensDistortion' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, MagicLight) == 0x000300, "Member 'APostprocessingCtrlActor::MagicLight' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, FogDarkeningMaterialDynamic) == 0x000340, "Member 'APostprocessingCtrlActor::FogDarkeningMaterialDynamic' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, VCloudsMaterialDynamic) == 0x000380, "Member 'APostprocessingCtrlActor::VCloudsMaterialDynamic' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, SkyboxDynamics) == 0x000400, "Member 'APostprocessingCtrlActor::SkyboxDynamics' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, DirectionalLight) == 0x000410, "Member 'APostprocessingCtrlActor::DirectionalLight' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, DirectionalAmbient) == 0x000418, "Member 'APostprocessingCtrlActor::DirectionalAmbient' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, ExpHeightFog) == 0x000420, "Member 'APostprocessingCtrlActor::ExpHeightFog' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, AtmSky) == 0x000428, "Member 'APostprocessingCtrlActor::AtmSky' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, SkyLight) == 0x000430, "Member 'APostprocessingCtrlActor::SkyLight' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, Skybox) == 0x000438, "Member 'APostprocessingCtrlActor::Skybox' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, VCloudsCtrl) == 0x000440, "Member 'APostprocessingCtrlActor::VCloudsCtrl' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, VClouds) == 0x000448, "Member 'APostprocessingCtrlActor::VClouds' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, CachedSkyBox) == 0x000450, "Member 'APostprocessingCtrlActor::CachedSkyBox' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, InterpolatedDayNightFactor) == 0x0005FC, "Member 'APostprocessingCtrlActor::InterpolatedDayNightFactor' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, NiagaraParametersCollectionInstance) == 0x000600, "Member 'APostprocessingCtrlActor::NiagaraParametersCollectionInstance' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, PlayerPosition) == 0x000608, "Member 'APostprocessingCtrlActor::PlayerPosition' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, PreviousPlayerPosition) == 0x000620, "Member 'APostprocessingCtrlActor::PreviousPlayerPosition' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, OverrideData) == 0x000640, "Member 'APostprocessingCtrlActor::OverrideData' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, FogDarkeningMaterial) == 0x0015F0, "Member 'APostprocessingCtrlActor::FogDarkeningMaterial' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, LensDistortionMaterial) == 0x0015F8, "Member 'APostprocessingCtrlActor::LensDistortionMaterial' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, MagicLightMaterial) == 0x001600, "Member 'APostprocessingCtrlActor::MagicLightMaterial' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, SkyMaterials) == 0x001608, "Member 'APostprocessingCtrlActor::SkyMaterials' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, VCloudMaterialsSRef) == 0x001618, "Member 'APostprocessingCtrlActor::VCloudMaterialsSRef' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, DefaultWeatherTexture) == 0x001628, "Member 'APostprocessingCtrlActor::DefaultWeatherTexture' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, DefaultGradientTexture) == 0x001630, "Member 'APostprocessingCtrlActor::DefaultGradientTexture' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, TeleportRotationOffset) == 0x001638, "Member 'APostprocessingCtrlActor::TeleportRotationOffset' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, SkyRecaptureFrequency) == 0x00163C, "Member 'APostprocessingCtrlActor::SkyRecaptureFrequency' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, ParametersCollection) == 0x001640, "Member 'APostprocessingCtrlActor::ParametersCollection' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, TranslucencyParametersCollection) == 0x001648, "Member 'APostprocessingCtrlActor::TranslucencyParametersCollection' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, NiagaraParametersCollection) == 0x001650, "Member 'APostprocessingCtrlActor::NiagaraParametersCollection' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, SSSDayNightFactorMin) == 0x001658, "Member 'APostprocessingCtrlActor::SSSDayNightFactorMin' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, SSSDayNightFactorMax) == 0x00165C, "Member 'APostprocessingCtrlActor::SSSDayNightFactorMax' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, FUZZDayNightFactorMin) == 0x001660, "Member 'APostprocessingCtrlActor::FUZZDayNightFactorMin' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, FUZZDayNightFactorMax) == 0x001664, "Member 'APostprocessingCtrlActor::FUZZDayNightFactorMax' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, BCKLGHDayNightFactorMin) == 0x001668, "Member 'APostprocessingCtrlActor::BCKLGHDayNightFactorMin' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, BCKLGHDayNightFactorMax) == 0x00166C, "Member 'APostprocessingCtrlActor::BCKLGHDayNightFactorMax' has a wrong offset!");
static_assert(offsetof(APostprocessingCtrlActor, AtmosphereDOFFogScalingFactors) == 0x001670, "Member 'APostprocessingCtrlActor::AtmosphereDOFFogScalingFactors' has a wrong offset!");

// Class PostProcessVolumeEx.AtmosphereVCloudsCtrl
// 0x0008 (0x00A8 - 0x00A0)
class UAtmosphereVCloudsCtrl final : public UActorComponent
{
public:
	class UVolumeTexture*                         DefaultVolume;                                     // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtmosphereVCloudsCtrl">();
	}
	static class UAtmosphereVCloudsCtrl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtmosphereVCloudsCtrl>();
	}
};
static_assert(alignof(UAtmosphereVCloudsCtrl) == 0x000008, "Wrong alignment on UAtmosphereVCloudsCtrl");
static_assert(sizeof(UAtmosphereVCloudsCtrl) == 0x0000A8, "Wrong size on UAtmosphereVCloudsCtrl");
static_assert(offsetof(UAtmosphereVCloudsCtrl, DefaultVolume) == 0x0000A0, "Member 'UAtmosphereVCloudsCtrl::DefaultVolume' has a wrong offset!");

// Class PostProcessVolumeEx.PostProcessChildVolume
// 0x0708 (0x09F0 - 0x02E8)
class APostProcessChildVolume final : public AVolume
{
public:
	uint8                                         Pad_2E8[0x1];                                      // 0x02E8(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          IsEnabled;                                         // 0x02E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bOverride_DirectionalLightSettings : 1;            // 0x02EA(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ExponentialFogSettings : 1;              // 0x02EA(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SkyLightSettings : 1;                    // 0x02EA(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_RoughnessAndMetallicity : 1;             // 0x02EA(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Wind : 1;                                // 0x02EA(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Exposure : 1;                            // 0x02EA(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorGrading : 1;                        // 0x02EA(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Film : 1;                                // 0x02EA(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DOF : 1;                                 // 0x02EB(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	float                                         BlendWeight;                                       // 0x02EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendRadius;                                       // 0x02F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSHPostprocessDirectionalLightOverride DirectionalLightSettings;                          // 0x02F8(0x0128)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSHPostprocessExpFogOverride           ExponentialFogSettings;                            // 0x0420(0x00F0)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSHPostprocessSkyLightOverride         SkyLightSettings;                                  // 0x0510(0x0098)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSHPostprocessRoughnessMetalicityCtrlOverride RoughnessMetallicityCtrl;                          // 0x05A8(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSHPostprocessWindDataOverride         Wind;                                              // 0x0600(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSHPostprocessExposureOverride         Exposure;                                          // 0x0630(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_698[0x8];                                      // 0x0698(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSHPostprocessColorGradingOverride     ColorGrading;                                      // 0x06A0(0x02E0)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSHPostprocessFilmOverride             Film;                                              // 0x0980(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSHPostprocessDOFOverride              DOF;                                               // 0x099C(0x004C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9E8[0x8];                                      // 0x09E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetIsEnabled(bool C);

	bool GetIsEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PostProcessChildVolume">();
	}
	static class APostProcessChildVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<APostProcessChildVolume>();
	}
};
static_assert(alignof(APostProcessChildVolume) == 0x000010, "Wrong alignment on APostProcessChildVolume");
static_assert(sizeof(APostProcessChildVolume) == 0x0009F0, "Wrong size on APostProcessChildVolume");
static_assert(offsetof(APostProcessChildVolume, IsEnabled) == 0x0002E9, "Member 'APostProcessChildVolume::IsEnabled' has a wrong offset!");
static_assert(offsetof(APostProcessChildVolume, BlendWeight) == 0x0002EC, "Member 'APostProcessChildVolume::BlendWeight' has a wrong offset!");
static_assert(offsetof(APostProcessChildVolume, BlendRadius) == 0x0002F0, "Member 'APostProcessChildVolume::BlendRadius' has a wrong offset!");
static_assert(offsetof(APostProcessChildVolume, DirectionalLightSettings) == 0x0002F8, "Member 'APostProcessChildVolume::DirectionalLightSettings' has a wrong offset!");
static_assert(offsetof(APostProcessChildVolume, ExponentialFogSettings) == 0x000420, "Member 'APostProcessChildVolume::ExponentialFogSettings' has a wrong offset!");
static_assert(offsetof(APostProcessChildVolume, SkyLightSettings) == 0x000510, "Member 'APostProcessChildVolume::SkyLightSettings' has a wrong offset!");
static_assert(offsetof(APostProcessChildVolume, RoughnessMetallicityCtrl) == 0x0005A8, "Member 'APostProcessChildVolume::RoughnessMetallicityCtrl' has a wrong offset!");
static_assert(offsetof(APostProcessChildVolume, Wind) == 0x000600, "Member 'APostProcessChildVolume::Wind' has a wrong offset!");
static_assert(offsetof(APostProcessChildVolume, Exposure) == 0x000630, "Member 'APostProcessChildVolume::Exposure' has a wrong offset!");
static_assert(offsetof(APostProcessChildVolume, ColorGrading) == 0x0006A0, "Member 'APostProcessChildVolume::ColorGrading' has a wrong offset!");
static_assert(offsetof(APostProcessChildVolume, Film) == 0x000980, "Member 'APostProcessChildVolume::Film' has a wrong offset!");
static_assert(offsetof(APostProcessChildVolume, DOF) == 0x00099C, "Member 'APostProcessChildVolume::DOF' has a wrong offset!");

// Class PostProcessVolumeEx.PostProcessVolumeEx
// 0x0E70 (0x1870 - 0x0A00)
class APostProcessVolumeEx : public APostProcessVolume
{
public:
	uint8                                         Pad_A00[0x8];                                      // 0x0A00(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _OldDOFValue;                                      // 0x0A08(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _OldDOFValueWasOverriden;                          // 0x0A0C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A0D[0x3];                                      // 0x0A0D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _NowDOFValue;                                      // 0x0A10(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A14[0x4];                                      // 0x0A14(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPostProcessAutoDOFCtrl*                _DOFCtrl;                                          // 0x0A18(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _IsDuringEditionOfBoundSettings;                   // 0x0A20(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A21[0xF];                                      // 0x0A21(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   OverrideSettings;                                  // 0x0A30(0x0700)(Transient, Protected, NativeAccessSpecifierProtected)
	bool                                          HasOverrideSettings;                               // 0x1130(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1131[0x70F];                                   // 0x1131(0x070F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPresetOverride                        PresetOverride;                                    // 0x1840(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class APostProcessVolumeEx*                   ParentVolume;                                      // 0x1848(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HardConnected;                                     // 0x1850(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1851[0x3];                                     // 0x1851(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAtmospherePreset                      Preset;                                            // 0x1854(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          AutoDOFEnable;                                     // 0x185C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_185D[0x3];                                     // 0x185D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoDOFLimitMin;                                   // 0x1860(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoDOFLimitMax;                                   // 0x1864(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoDOFInterpolationSpeed;                         // 0x1868(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_186C[0x4];                                     // 0x186C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PostProcessVolumeEx">();
	}
	static class APostProcessVolumeEx* GetDefaultObj()
	{
		return GetDefaultObjImpl<APostProcessVolumeEx>();
	}
};
static_assert(alignof(APostProcessVolumeEx) == 0x000010, "Wrong alignment on APostProcessVolumeEx");
static_assert(sizeof(APostProcessVolumeEx) == 0x001870, "Wrong size on APostProcessVolumeEx");
static_assert(offsetof(APostProcessVolumeEx, _OldDOFValue) == 0x000A08, "Member 'APostProcessVolumeEx::_OldDOFValue' has a wrong offset!");
static_assert(offsetof(APostProcessVolumeEx, _OldDOFValueWasOverriden) == 0x000A0C, "Member 'APostProcessVolumeEx::_OldDOFValueWasOverriden' has a wrong offset!");
static_assert(offsetof(APostProcessVolumeEx, _NowDOFValue) == 0x000A10, "Member 'APostProcessVolumeEx::_NowDOFValue' has a wrong offset!");
static_assert(offsetof(APostProcessVolumeEx, _DOFCtrl) == 0x000A18, "Member 'APostProcessVolumeEx::_DOFCtrl' has a wrong offset!");
static_assert(offsetof(APostProcessVolumeEx, _IsDuringEditionOfBoundSettings) == 0x000A20, "Member 'APostProcessVolumeEx::_IsDuringEditionOfBoundSettings' has a wrong offset!");
static_assert(offsetof(APostProcessVolumeEx, OverrideSettings) == 0x000A30, "Member 'APostProcessVolumeEx::OverrideSettings' has a wrong offset!");
static_assert(offsetof(APostProcessVolumeEx, HasOverrideSettings) == 0x001130, "Member 'APostProcessVolumeEx::HasOverrideSettings' has a wrong offset!");
static_assert(offsetof(APostProcessVolumeEx, PresetOverride) == 0x001840, "Member 'APostProcessVolumeEx::PresetOverride' has a wrong offset!");
static_assert(offsetof(APostProcessVolumeEx, ParentVolume) == 0x001848, "Member 'APostProcessVolumeEx::ParentVolume' has a wrong offset!");
static_assert(offsetof(APostProcessVolumeEx, HardConnected) == 0x001850, "Member 'APostProcessVolumeEx::HardConnected' has a wrong offset!");
static_assert(offsetof(APostProcessVolumeEx, Preset) == 0x001854, "Member 'APostProcessVolumeEx::Preset' has a wrong offset!");
static_assert(offsetof(APostProcessVolumeEx, AutoDOFEnable) == 0x00185C, "Member 'APostProcessVolumeEx::AutoDOFEnable' has a wrong offset!");
static_assert(offsetof(APostProcessVolumeEx, AutoDOFLimitMin) == 0x001860, "Member 'APostProcessVolumeEx::AutoDOFLimitMin' has a wrong offset!");
static_assert(offsetof(APostProcessVolumeEx, AutoDOFLimitMax) == 0x001864, "Member 'APostProcessVolumeEx::AutoDOFLimitMax' has a wrong offset!");
static_assert(offsetof(APostProcessVolumeEx, AutoDOFInterpolationSpeed) == 0x001868, "Member 'APostProcessVolumeEx::AutoDOFInterpolationSpeed' has a wrong offset!");

// Class PostProcessVolumeEx.AtmosphereCtrlVolume
// 0x06C0 (0x1F30 - 0x1870)
class AAtmosphereCtrlVolume : public APostProcessVolumeEx
{
public:
	uint8                                         Pad_1870[0xC];                                     // 0x1870(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSHPostprocessExpFog                   ExponentialFogSettings;                            // 0x187C(0x00E0)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_195C[0x4];                                     // 0x195C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSHPostprocessAtmFog                   AtmosphericFogSettings;                            // 0x1960(0x0198)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSHPostprocessSkyLight                 SkyLightSettings;                                  // 0x1AF8(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSHPostprocessDirectionalLight         DirectionalLightSettings;                          // 0x1B88(0x00F8)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSHPostprocessSkyBox                   SkyBoxSettings;                                    // 0x1C80(0x0190)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSHPostprocessRoughnessMetalicityCtrl  RoughnessMetallicityCtrl;                          // 0x1E10(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSHPostprocessLevelDataCtrl            LevelDataCtrl;                                     // 0x1E58(0x0058)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSHPostprocessMagicLightData           MagicLightCtrl;                                    // 0x1EB0(0x0024)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSHPostprocessLensDistortionData       LensDistortion;                                    // 0x1ED4(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EEC[0x4];                                     // 0x1EEC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSHPostprocessWindData                 Wind;                                              // 0x1EF0(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class AAtmosphereCtrlVolume*                  AtmosphereInterpolationTarget;                     // 0x1F18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AtmosphereInterpolationFactor;                     // 0x1F20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAtmosphereInterpolationMode                  EditorInterpolationMode;                           // 0x1F24(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F25[0xB];                                     // 0x1F25(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtmosphereCtrlVolume">();
	}
	static class AAtmosphereCtrlVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAtmosphereCtrlVolume>();
	}
};
static_assert(alignof(AAtmosphereCtrlVolume) == 0x000010, "Wrong alignment on AAtmosphereCtrlVolume");
static_assert(sizeof(AAtmosphereCtrlVolume) == 0x001F30, "Wrong size on AAtmosphereCtrlVolume");
static_assert(offsetof(AAtmosphereCtrlVolume, ExponentialFogSettings) == 0x00187C, "Member 'AAtmosphereCtrlVolume::ExponentialFogSettings' has a wrong offset!");
static_assert(offsetof(AAtmosphereCtrlVolume, AtmosphericFogSettings) == 0x001960, "Member 'AAtmosphereCtrlVolume::AtmosphericFogSettings' has a wrong offset!");
static_assert(offsetof(AAtmosphereCtrlVolume, SkyLightSettings) == 0x001AF8, "Member 'AAtmosphereCtrlVolume::SkyLightSettings' has a wrong offset!");
static_assert(offsetof(AAtmosphereCtrlVolume, DirectionalLightSettings) == 0x001B88, "Member 'AAtmosphereCtrlVolume::DirectionalLightSettings' has a wrong offset!");
static_assert(offsetof(AAtmosphereCtrlVolume, SkyBoxSettings) == 0x001C80, "Member 'AAtmosphereCtrlVolume::SkyBoxSettings' has a wrong offset!");
static_assert(offsetof(AAtmosphereCtrlVolume, RoughnessMetallicityCtrl) == 0x001E10, "Member 'AAtmosphereCtrlVolume::RoughnessMetallicityCtrl' has a wrong offset!");
static_assert(offsetof(AAtmosphereCtrlVolume, LevelDataCtrl) == 0x001E58, "Member 'AAtmosphereCtrlVolume::LevelDataCtrl' has a wrong offset!");
static_assert(offsetof(AAtmosphereCtrlVolume, MagicLightCtrl) == 0x001EB0, "Member 'AAtmosphereCtrlVolume::MagicLightCtrl' has a wrong offset!");
static_assert(offsetof(AAtmosphereCtrlVolume, LensDistortion) == 0x001ED4, "Member 'AAtmosphereCtrlVolume::LensDistortion' has a wrong offset!");
static_assert(offsetof(AAtmosphereCtrlVolume, Wind) == 0x001EF0, "Member 'AAtmosphereCtrlVolume::Wind' has a wrong offset!");
static_assert(offsetof(AAtmosphereCtrlVolume, AtmosphereInterpolationTarget) == 0x001F18, "Member 'AAtmosphereCtrlVolume::AtmosphereInterpolationTarget' has a wrong offset!");
static_assert(offsetof(AAtmosphereCtrlVolume, AtmosphereInterpolationFactor) == 0x001F20, "Member 'AAtmosphereCtrlVolume::AtmosphereInterpolationFactor' has a wrong offset!");
static_assert(offsetof(AAtmosphereCtrlVolume, EditorInterpolationMode) == 0x001F24, "Member 'AAtmosphereCtrlVolume::EditorInterpolationMode' has a wrong offset!");

// Class PostProcessVolumeEx.FogCtrlSubVolumeComponent
// 0x0550 (0x0AC0 - 0x0570)
class UFogCtrlSubVolumeComponent final : public USphereComponent
{
public:
	uint8                                         bOverride_ExponentialFogSettings : 1;              // 0x0568(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SkyLightSettings : 1;                    // 0x0568(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Wind : 1;                                // 0x0568(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Exposure : 1;                            // 0x0568(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorGrading : 1;                        // 0x0568(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Film : 1;                                // 0x0568(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DOF : 1;                                 // 0x0568(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_569[0x3];                                      // 0x0569(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SphereFalloff;                                     // 0x056C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSHPostprocessExpFog                   ExponentialFogSettings;                            // 0x0570(0x00E0)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSHPostprocessSkyLight                 SkyLightSettings;                                  // 0x0650(0x0090)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSHPostprocessWindData                 Wind;                                              // 0x06E0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSHPostprocessExposureOverride         Exposure;                                          // 0x0708(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSHPostprocessColorGradingOverride     ColorGrading;                                      // 0x0770(0x02E0)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSHPostprocessFilmOverride             Film;                                              // 0x0A50(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSHPostprocessDOFOverride              DOF;                                               // 0x0A6C(0x004C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_AB8[0x8];                                      // 0x0AB8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FogCtrlSubVolumeComponent">();
	}
	static class UFogCtrlSubVolumeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFogCtrlSubVolumeComponent>();
	}
};
static_assert(alignof(UFogCtrlSubVolumeComponent) == 0x000010, "Wrong alignment on UFogCtrlSubVolumeComponent");
static_assert(sizeof(UFogCtrlSubVolumeComponent) == 0x000AC0, "Wrong size on UFogCtrlSubVolumeComponent");
static_assert(offsetof(UFogCtrlSubVolumeComponent, SphereFalloff) == 0x00056C, "Member 'UFogCtrlSubVolumeComponent::SphereFalloff' has a wrong offset!");
static_assert(offsetof(UFogCtrlSubVolumeComponent, ExponentialFogSettings) == 0x000570, "Member 'UFogCtrlSubVolumeComponent::ExponentialFogSettings' has a wrong offset!");
static_assert(offsetof(UFogCtrlSubVolumeComponent, SkyLightSettings) == 0x000650, "Member 'UFogCtrlSubVolumeComponent::SkyLightSettings' has a wrong offset!");
static_assert(offsetof(UFogCtrlSubVolumeComponent, Wind) == 0x0006E0, "Member 'UFogCtrlSubVolumeComponent::Wind' has a wrong offset!");
static_assert(offsetof(UFogCtrlSubVolumeComponent, Exposure) == 0x000708, "Member 'UFogCtrlSubVolumeComponent::Exposure' has a wrong offset!");
static_assert(offsetof(UFogCtrlSubVolumeComponent, ColorGrading) == 0x000770, "Member 'UFogCtrlSubVolumeComponent::ColorGrading' has a wrong offset!");
static_assert(offsetof(UFogCtrlSubVolumeComponent, Film) == 0x000A50, "Member 'UFogCtrlSubVolumeComponent::Film' has a wrong offset!");
static_assert(offsetof(UFogCtrlSubVolumeComponent, DOF) == 0x000A6C, "Member 'UFogCtrlSubVolumeComponent::DOF' has a wrong offset!");

// Class PostProcessVolumeEx.PostProcessAutoDOFCtrl
// 0x0038 (0x00D8 - 0x00A0)
class UPostProcessAutoDOFCtrl final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x14];                                      // 0x00A0(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	ECollisionChannel                             CollisionChannel;                                  // 0x00B4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DOFActorOffset;                                    // 0x00B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DOFFromPlayerPosition;                             // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetExternalDepthValue(float DepthValue);
	void SetExternalDriver(bool State);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PostProcessAutoDOFCtrl">();
	}
	static class UPostProcessAutoDOFCtrl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPostProcessAutoDOFCtrl>();
	}
};
static_assert(alignof(UPostProcessAutoDOFCtrl) == 0x000008, "Wrong alignment on UPostProcessAutoDOFCtrl");
static_assert(sizeof(UPostProcessAutoDOFCtrl) == 0x0000D8, "Wrong size on UPostProcessAutoDOFCtrl");
static_assert(offsetof(UPostProcessAutoDOFCtrl, CollisionChannel) == 0x0000B4, "Member 'UPostProcessAutoDOFCtrl::CollisionChannel' has a wrong offset!");
static_assert(offsetof(UPostProcessAutoDOFCtrl, DOFActorOffset) == 0x0000B8, "Member 'UPostProcessAutoDOFCtrl::DOFActorOffset' has a wrong offset!");
static_assert(offsetof(UPostProcessAutoDOFCtrl, DOFFromPlayerPosition) == 0x0000D0, "Member 'UPostProcessAutoDOFCtrl::DOFFromPlayerPosition' has a wrong offset!");

// Class PostProcessVolumeEx.PostprocessVolumeExSettings
// 0x0040 (0x0078 - 0x0038)
class UPostprocessVolumeExSettings final : public UDeveloperSettings
{
public:
	struct FSoftObjectPath                        AtmospheresDatatable;                              // 0x0038(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        PresetsOverridesDatatable;                         // 0x0058(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PostprocessVolumeExSettings">();
	}
	static class UPostprocessVolumeExSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPostprocessVolumeExSettings>();
	}
};
static_assert(alignof(UPostprocessVolumeExSettings) == 0x000008, "Wrong alignment on UPostprocessVolumeExSettings");
static_assert(sizeof(UPostprocessVolumeExSettings) == 0x000078, "Wrong size on UPostprocessVolumeExSettings");
static_assert(offsetof(UPostprocessVolumeExSettings, AtmospheresDatatable) == 0x000038, "Member 'UPostprocessVolumeExSettings::AtmospheresDatatable' has a wrong offset!");
static_assert(offsetof(UPostprocessVolumeExSettings, PresetsOverridesDatatable) == 0x000058, "Member 'UPostprocessVolumeExSettings::PresetsOverridesDatatable' has a wrong offset!");

}

