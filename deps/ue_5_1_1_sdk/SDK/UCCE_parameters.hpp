#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UCCE

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UCCE_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function UCCE.ControllerEffectsManager.HandleControllerConnectionChange
// 0x000C (0x000C - 0x0000)
struct ControllerEffectsManager_HandleControllerConnectionChange final
{
public:
	EInputDeviceConnectionState                   InputDeviceConnectionState;                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlatformUserId                        PlatformUserId;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputDeviceId                         InputDeviceId;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllerEffectsManager_HandleControllerConnectionChange) == 0x000004, "Wrong alignment on ControllerEffectsManager_HandleControllerConnectionChange");
static_assert(sizeof(ControllerEffectsManager_HandleControllerConnectionChange) == 0x00000C, "Wrong size on ControllerEffectsManager_HandleControllerConnectionChange");
static_assert(offsetof(ControllerEffectsManager_HandleControllerConnectionChange, InputDeviceConnectionState) == 0x000000, "Member 'ControllerEffectsManager_HandleControllerConnectionChange::InputDeviceConnectionState' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_HandleControllerConnectionChange, PlatformUserId) == 0x000004, "Member 'ControllerEffectsManager_HandleControllerConnectionChange::PlatformUserId' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_HandleControllerConnectionChange, InputDeviceId) == 0x000008, "Member 'ControllerEffectsManager_HandleControllerConnectionChange::InputDeviceId' has a wrong offset!");

// Function UCCE.ControllerEffectsManager.K2_PlayDynamicForceFeedback
// 0x0018 (0x0018 - 0x0000)
struct ControllerEffectsManager_K2_PlayDynamicForceFeedback final
{
public:
	struct FDynamicForceFeedbackBPHandle          InHandle;                                          // 0x0000(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsLeftLarge;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsLeftSmall;                                 // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsRightLarge;                                // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsRightSmall;                                // 0x0013(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDynamicForceFeedbackAction                   Action;                                            // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControllerEffectsManager_K2_PlayDynamicForceFeedback) == 0x000008, "Wrong alignment on ControllerEffectsManager_K2_PlayDynamicForceFeedback");
static_assert(sizeof(ControllerEffectsManager_K2_PlayDynamicForceFeedback) == 0x000018, "Wrong size on ControllerEffectsManager_K2_PlayDynamicForceFeedback");
static_assert(offsetof(ControllerEffectsManager_K2_PlayDynamicForceFeedback, InHandle) == 0x000000, "Member 'ControllerEffectsManager_K2_PlayDynamicForceFeedback::InHandle' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_K2_PlayDynamicForceFeedback, Intensity) == 0x000008, "Member 'ControllerEffectsManager_K2_PlayDynamicForceFeedback::Intensity' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_K2_PlayDynamicForceFeedback, Duration) == 0x00000C, "Member 'ControllerEffectsManager_K2_PlayDynamicForceFeedback::Duration' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_K2_PlayDynamicForceFeedback, bAffectsLeftLarge) == 0x000010, "Member 'ControllerEffectsManager_K2_PlayDynamicForceFeedback::bAffectsLeftLarge' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_K2_PlayDynamicForceFeedback, bAffectsLeftSmall) == 0x000011, "Member 'ControllerEffectsManager_K2_PlayDynamicForceFeedback::bAffectsLeftSmall' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_K2_PlayDynamicForceFeedback, bAffectsRightLarge) == 0x000012, "Member 'ControllerEffectsManager_K2_PlayDynamicForceFeedback::bAffectsRightLarge' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_K2_PlayDynamicForceFeedback, bAffectsRightSmall) == 0x000013, "Member 'ControllerEffectsManager_K2_PlayDynamicForceFeedback::bAffectsRightSmall' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_K2_PlayDynamicForceFeedback, Action) == 0x000014, "Member 'ControllerEffectsManager_K2_PlayDynamicForceFeedback::Action' has a wrong offset!");

// Function UCCE.ControllerEffectsManager.K2_PlayForceFeedback
// 0x0018 (0x0018 - 0x0000)
struct ControllerEffectsManager_K2_PlayForceFeedback final
{
public:
	class UForceFeedbackEffect*                   ForceFeedbackEffect;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreTimeDilation;                               // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayWhilePaused;                                  // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControllerEffectsManager_K2_PlayForceFeedback) == 0x000008, "Wrong alignment on ControllerEffectsManager_K2_PlayForceFeedback");
static_assert(sizeof(ControllerEffectsManager_K2_PlayForceFeedback) == 0x000018, "Wrong size on ControllerEffectsManager_K2_PlayForceFeedback");
static_assert(offsetof(ControllerEffectsManager_K2_PlayForceFeedback, ForceFeedbackEffect) == 0x000000, "Member 'ControllerEffectsManager_K2_PlayForceFeedback::ForceFeedbackEffect' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_K2_PlayForceFeedback, Tag) == 0x000008, "Member 'ControllerEffectsManager_K2_PlayForceFeedback::Tag' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_K2_PlayForceFeedback, bLooping) == 0x000010, "Member 'ControllerEffectsManager_K2_PlayForceFeedback::bLooping' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_K2_PlayForceFeedback, bIgnoreTimeDilation) == 0x000011, "Member 'ControllerEffectsManager_K2_PlayForceFeedback::bIgnoreTimeDilation' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_K2_PlayForceFeedback, bPlayWhilePaused) == 0x000012, "Member 'ControllerEffectsManager_K2_PlayForceFeedback::bPlayWhilePaused' has a wrong offset!");

// Function UCCE.ControllerEffectsManager.K2_SetTriggerEffect
// 0x0008 (0x0008 - 0x0000)
struct ControllerEffectsManager_K2_SetTriggerEffect final
{
public:
	class UTriggerEffect*                         Effect;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllerEffectsManager_K2_SetTriggerEffect) == 0x000008, "Wrong alignment on ControllerEffectsManager_K2_SetTriggerEffect");
static_assert(sizeof(ControllerEffectsManager_K2_SetTriggerEffect) == 0x000008, "Wrong size on ControllerEffectsManager_K2_SetTriggerEffect");
static_assert(offsetof(ControllerEffectsManager_K2_SetTriggerEffect, Effect) == 0x000000, "Member 'ControllerEffectsManager_K2_SetTriggerEffect::Effect' has a wrong offset!");

// Function UCCE.ControllerEffectsManager.K2_StartDynamicForceFeedback
// 0x0018 (0x0018 - 0x0000)
struct ControllerEffectsManager_K2_StartDynamicForceFeedback final
{
public:
	struct FDynamicForceFeedbackBPHandle          InHandle;                                          // 0x0000(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsLeftLarge;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsLeftSmall;                                 // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsRightLarge;                                // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsRightSmall;                                // 0x0013(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControllerEffectsManager_K2_StartDynamicForceFeedback) == 0x000008, "Wrong alignment on ControllerEffectsManager_K2_StartDynamicForceFeedback");
static_assert(sizeof(ControllerEffectsManager_K2_StartDynamicForceFeedback) == 0x000018, "Wrong size on ControllerEffectsManager_K2_StartDynamicForceFeedback");
static_assert(offsetof(ControllerEffectsManager_K2_StartDynamicForceFeedback, InHandle) == 0x000000, "Member 'ControllerEffectsManager_K2_StartDynamicForceFeedback::InHandle' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_K2_StartDynamicForceFeedback, Intensity) == 0x000008, "Member 'ControllerEffectsManager_K2_StartDynamicForceFeedback::Intensity' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_K2_StartDynamicForceFeedback, Duration) == 0x00000C, "Member 'ControllerEffectsManager_K2_StartDynamicForceFeedback::Duration' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_K2_StartDynamicForceFeedback, bAffectsLeftLarge) == 0x000010, "Member 'ControllerEffectsManager_K2_StartDynamicForceFeedback::bAffectsLeftLarge' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_K2_StartDynamicForceFeedback, bAffectsLeftSmall) == 0x000011, "Member 'ControllerEffectsManager_K2_StartDynamicForceFeedback::bAffectsLeftSmall' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_K2_StartDynamicForceFeedback, bAffectsRightLarge) == 0x000012, "Member 'ControllerEffectsManager_K2_StartDynamicForceFeedback::bAffectsRightLarge' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_K2_StartDynamicForceFeedback, bAffectsRightSmall) == 0x000013, "Member 'ControllerEffectsManager_K2_StartDynamicForceFeedback::bAffectsRightSmall' has a wrong offset!");

// Function UCCE.ControllerEffectsManager.K2_StoptDynamicForceFeedback
// 0x0010 (0x0010 - 0x0000)
struct ControllerEffectsManager_K2_StoptDynamicForceFeedback final
{
public:
	struct FDynamicForceFeedbackBPHandle          InHandle;                                          // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAffectsLeftLarge;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsLeftSmall;                                 // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsRightLarge;                                // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsRightSmall;                                // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControllerEffectsManager_K2_StoptDynamicForceFeedback) == 0x000008, "Wrong alignment on ControllerEffectsManager_K2_StoptDynamicForceFeedback");
static_assert(sizeof(ControllerEffectsManager_K2_StoptDynamicForceFeedback) == 0x000010, "Wrong size on ControllerEffectsManager_K2_StoptDynamicForceFeedback");
static_assert(offsetof(ControllerEffectsManager_K2_StoptDynamicForceFeedback, InHandle) == 0x000000, "Member 'ControllerEffectsManager_K2_StoptDynamicForceFeedback::InHandle' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_K2_StoptDynamicForceFeedback, bAffectsLeftLarge) == 0x000008, "Member 'ControllerEffectsManager_K2_StoptDynamicForceFeedback::bAffectsLeftLarge' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_K2_StoptDynamicForceFeedback, bAffectsLeftSmall) == 0x000009, "Member 'ControllerEffectsManager_K2_StoptDynamicForceFeedback::bAffectsLeftSmall' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_K2_StoptDynamicForceFeedback, bAffectsRightLarge) == 0x00000A, "Member 'ControllerEffectsManager_K2_StoptDynamicForceFeedback::bAffectsRightLarge' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_K2_StoptDynamicForceFeedback, bAffectsRightSmall) == 0x00000B, "Member 'ControllerEffectsManager_K2_StoptDynamicForceFeedback::bAffectsRightSmall' has a wrong offset!");

// Function UCCE.ControllerEffectsManager.K2_UpdateDynamicForceFeedback
// 0x0010 (0x0010 - 0x0000)
struct ControllerEffectsManager_K2_UpdateDynamicForceFeedback final
{
public:
	struct FDynamicForceFeedbackBPHandle          InHandle;                                          // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsLeftLarge;                                 // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsLeftSmall;                                 // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsRightLarge;                                // 0x000E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsRightSmall;                                // 0x000F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllerEffectsManager_K2_UpdateDynamicForceFeedback) == 0x000008, "Wrong alignment on ControllerEffectsManager_K2_UpdateDynamicForceFeedback");
static_assert(sizeof(ControllerEffectsManager_K2_UpdateDynamicForceFeedback) == 0x000010, "Wrong size on ControllerEffectsManager_K2_UpdateDynamicForceFeedback");
static_assert(offsetof(ControllerEffectsManager_K2_UpdateDynamicForceFeedback, InHandle) == 0x000000, "Member 'ControllerEffectsManager_K2_UpdateDynamicForceFeedback::InHandle' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_K2_UpdateDynamicForceFeedback, Intensity) == 0x000008, "Member 'ControllerEffectsManager_K2_UpdateDynamicForceFeedback::Intensity' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_K2_UpdateDynamicForceFeedback, bAffectsLeftLarge) == 0x00000C, "Member 'ControllerEffectsManager_K2_UpdateDynamicForceFeedback::bAffectsLeftLarge' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_K2_UpdateDynamicForceFeedback, bAffectsLeftSmall) == 0x00000D, "Member 'ControllerEffectsManager_K2_UpdateDynamicForceFeedback::bAffectsLeftSmall' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_K2_UpdateDynamicForceFeedback, bAffectsRightLarge) == 0x00000E, "Member 'ControllerEffectsManager_K2_UpdateDynamicForceFeedback::bAffectsRightLarge' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_K2_UpdateDynamicForceFeedback, bAffectsRightSmall) == 0x00000F, "Member 'ControllerEffectsManager_K2_UpdateDynamicForceFeedback::bAffectsRightSmall' has a wrong offset!");

// Function UCCE.ControllerEffectsManager.OnActorEndPlay
// 0x0010 (0x0010 - 0x0000)
struct ControllerEffectsManager_OnActorEndPlay final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControllerEffectsManager_OnActorEndPlay) == 0x000008, "Wrong alignment on ControllerEffectsManager_OnActorEndPlay");
static_assert(sizeof(ControllerEffectsManager_OnActorEndPlay) == 0x000010, "Wrong size on ControllerEffectsManager_OnActorEndPlay");
static_assert(offsetof(ControllerEffectsManager_OnActorEndPlay, Actor) == 0x000000, "Member 'ControllerEffectsManager_OnActorEndPlay::Actor' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_OnActorEndPlay, EndPlayReason) == 0x000008, "Member 'ControllerEffectsManager_OnActorEndPlay::EndPlayReason' has a wrong offset!");

// Function UCCE.ControllerEffectsManager.PlaySpecialEffect
// 0x0010 (0x0010 - 0x0000)
struct ControllerEffectsManager_PlaySpecialEffect final
{
public:
	struct FEffectHandle                          Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Variant;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllerEffectsManager_PlaySpecialEffect) == 0x000004, "Wrong alignment on ControllerEffectsManager_PlaySpecialEffect");
static_assert(sizeof(ControllerEffectsManager_PlaySpecialEffect) == 0x000010, "Wrong size on ControllerEffectsManager_PlaySpecialEffect");
static_assert(offsetof(ControllerEffectsManager_PlaySpecialEffect, Handle) == 0x000000, "Member 'ControllerEffectsManager_PlaySpecialEffect::Handle' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_PlaySpecialEffect, Loop) == 0x000008, "Member 'ControllerEffectsManager_PlaySpecialEffect::Loop' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_PlaySpecialEffect, Variant) == 0x00000C, "Member 'ControllerEffectsManager_PlaySpecialEffect::Variant' has a wrong offset!");

// Function UCCE.ControllerEffectsManager.ResetAllStates
// 0x0001 (0x0001 - 0x0000)
struct ControllerEffectsManager_ResetAllStates final
{
public:
	bool                                          PersistentEvents;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllerEffectsManager_ResetAllStates) == 0x000001, "Wrong alignment on ControllerEffectsManager_ResetAllStates");
static_assert(sizeof(ControllerEffectsManager_ResetAllStates) == 0x000001, "Wrong size on ControllerEffectsManager_ResetAllStates");
static_assert(offsetof(ControllerEffectsManager_ResetAllStates, PersistentEvents) == 0x000000, "Member 'ControllerEffectsManager_ResetAllStates::PersistentEvents' has a wrong offset!");

// Function UCCE.ControllerEffectsManager.SetControllerLightColor
// 0x0004 (0x0004 - 0x0000)
struct ControllerEffectsManager_SetControllerLightColor final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllerEffectsManager_SetControllerLightColor) == 0x000004, "Wrong alignment on ControllerEffectsManager_SetControllerLightColor");
static_assert(sizeof(ControllerEffectsManager_SetControllerLightColor) == 0x000004, "Wrong size on ControllerEffectsManager_SetControllerLightColor");
static_assert(offsetof(ControllerEffectsManager_SetControllerLightColor, Color) == 0x000000, "Member 'ControllerEffectsManager_SetControllerLightColor::Color' has a wrong offset!");

// Function UCCE.ControllerEffectsManager.SpawnForceFeedbackAtLocation
// 0x0060 (0x0060 - 0x0000)
struct ControllerEffectsManager_SpawnForceFeedbackAtLocation final
{
public:
	class UForceFeedbackEffect*                   ForceFeedbackEffect;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IntensityMultiplier;                               // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UForceFeedbackAttenuation*              AttenuationSettings;                               // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UForceFeedbackComponent*                ReturnValue;                                       // 0x0058(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllerEffectsManager_SpawnForceFeedbackAtLocation) == 0x000008, "Wrong alignment on ControllerEffectsManager_SpawnForceFeedbackAtLocation");
static_assert(sizeof(ControllerEffectsManager_SpawnForceFeedbackAtLocation) == 0x000060, "Wrong size on ControllerEffectsManager_SpawnForceFeedbackAtLocation");
static_assert(offsetof(ControllerEffectsManager_SpawnForceFeedbackAtLocation, ForceFeedbackEffect) == 0x000000, "Member 'ControllerEffectsManager_SpawnForceFeedbackAtLocation::ForceFeedbackEffect' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_SpawnForceFeedbackAtLocation, Location) == 0x000008, "Member 'ControllerEffectsManager_SpawnForceFeedbackAtLocation::Location' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_SpawnForceFeedbackAtLocation, Rotation) == 0x000020, "Member 'ControllerEffectsManager_SpawnForceFeedbackAtLocation::Rotation' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_SpawnForceFeedbackAtLocation, bLooping) == 0x000038, "Member 'ControllerEffectsManager_SpawnForceFeedbackAtLocation::bLooping' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_SpawnForceFeedbackAtLocation, IntensityMultiplier) == 0x00003C, "Member 'ControllerEffectsManager_SpawnForceFeedbackAtLocation::IntensityMultiplier' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_SpawnForceFeedbackAtLocation, StartTime) == 0x000040, "Member 'ControllerEffectsManager_SpawnForceFeedbackAtLocation::StartTime' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_SpawnForceFeedbackAtLocation, AttenuationSettings) == 0x000048, "Member 'ControllerEffectsManager_SpawnForceFeedbackAtLocation::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_SpawnForceFeedbackAtLocation, bAutoDestroy) == 0x000050, "Member 'ControllerEffectsManager_SpawnForceFeedbackAtLocation::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_SpawnForceFeedbackAtLocation, ReturnValue) == 0x000058, "Member 'ControllerEffectsManager_SpawnForceFeedbackAtLocation::ReturnValue' has a wrong offset!");

// Function UCCE.ControllerEffectsManager.SpawnForceFeedbackAttached
// 0x0070 (0x0070 - 0x0000)
struct ControllerEffectsManager_SpawnForceFeedbackAttached final
{
public:
	class UForceFeedbackEffect*                   ForceFeedbackEffect;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x004A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x1];                                       // 0x004B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IntensityMultiplier;                               // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UForceFeedbackAttenuation*              AttenuationSettings;                               // 0x0058(0x0008)(Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UForceFeedbackComponent*                ReturnValue;                                       // 0x0068(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllerEffectsManager_SpawnForceFeedbackAttached) == 0x000008, "Wrong alignment on ControllerEffectsManager_SpawnForceFeedbackAttached");
static_assert(sizeof(ControllerEffectsManager_SpawnForceFeedbackAttached) == 0x000070, "Wrong size on ControllerEffectsManager_SpawnForceFeedbackAttached");
static_assert(offsetof(ControllerEffectsManager_SpawnForceFeedbackAttached, ForceFeedbackEffect) == 0x000000, "Member 'ControllerEffectsManager_SpawnForceFeedbackAttached::ForceFeedbackEffect' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_SpawnForceFeedbackAttached, AttachToComponent) == 0x000008, "Member 'ControllerEffectsManager_SpawnForceFeedbackAttached::AttachToComponent' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_SpawnForceFeedbackAttached, AttachPointName) == 0x000010, "Member 'ControllerEffectsManager_SpawnForceFeedbackAttached::AttachPointName' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_SpawnForceFeedbackAttached, Location) == 0x000018, "Member 'ControllerEffectsManager_SpawnForceFeedbackAttached::Location' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_SpawnForceFeedbackAttached, Rotation) == 0x000030, "Member 'ControllerEffectsManager_SpawnForceFeedbackAttached::Rotation' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_SpawnForceFeedbackAttached, LocationType) == 0x000048, "Member 'ControllerEffectsManager_SpawnForceFeedbackAttached::LocationType' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_SpawnForceFeedbackAttached, bStopWhenAttachedToDestroyed) == 0x000049, "Member 'ControllerEffectsManager_SpawnForceFeedbackAttached::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_SpawnForceFeedbackAttached, bLooping) == 0x00004A, "Member 'ControllerEffectsManager_SpawnForceFeedbackAttached::bLooping' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_SpawnForceFeedbackAttached, IntensityMultiplier) == 0x00004C, "Member 'ControllerEffectsManager_SpawnForceFeedbackAttached::IntensityMultiplier' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_SpawnForceFeedbackAttached, StartTime) == 0x000050, "Member 'ControllerEffectsManager_SpawnForceFeedbackAttached::StartTime' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_SpawnForceFeedbackAttached, AttenuationSettings) == 0x000058, "Member 'ControllerEffectsManager_SpawnForceFeedbackAttached::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_SpawnForceFeedbackAttached, bAutoDestroy) == 0x000060, "Member 'ControllerEffectsManager_SpawnForceFeedbackAttached::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_SpawnForceFeedbackAttached, ReturnValue) == 0x000068, "Member 'ControllerEffectsManager_SpawnForceFeedbackAttached::ReturnValue' has a wrong offset!");

// Function UCCE.ControllerEffectsManager.StopForceFeedback
// 0x0010 (0x0010 - 0x0000)
struct ControllerEffectsManager_StopForceFeedback final
{
public:
	class UForceFeedbackEffect*                   ForceFeedbackEffect;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllerEffectsManager_StopForceFeedback) == 0x000008, "Wrong alignment on ControllerEffectsManager_StopForceFeedback");
static_assert(sizeof(ControllerEffectsManager_StopForceFeedback) == 0x000010, "Wrong size on ControllerEffectsManager_StopForceFeedback");
static_assert(offsetof(ControllerEffectsManager_StopForceFeedback, ForceFeedbackEffect) == 0x000000, "Member 'ControllerEffectsManager_StopForceFeedback::ForceFeedbackEffect' has a wrong offset!");
static_assert(offsetof(ControllerEffectsManager_StopForceFeedback, Tag) == 0x000008, "Member 'ControllerEffectsManager_StopForceFeedback::Tag' has a wrong offset!");

// Function UCCE.ControllerEffectsManager.StopSpecialEffect
// 0x0008 (0x0008 - 0x0000)
struct ControllerEffectsManager_StopSpecialEffect final
{
public:
	struct FEffectHandle                          Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllerEffectsManager_StopSpecialEffect) == 0x000004, "Wrong alignment on ControllerEffectsManager_StopSpecialEffect");
static_assert(sizeof(ControllerEffectsManager_StopSpecialEffect) == 0x000008, "Wrong size on ControllerEffectsManager_StopSpecialEffect");
static_assert(offsetof(ControllerEffectsManager_StopSpecialEffect, Handle) == 0x000000, "Member 'ControllerEffectsManager_StopSpecialEffect::Handle' has a wrong offset!");

// Function UCCE.ControllerEffectsManager.TriggerEvent
// 0x0008 (0x0008 - 0x0000)
struct ControllerEffectsManager_TriggerEvent final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllerEffectsManager_TriggerEvent) == 0x000004, "Wrong alignment on ControllerEffectsManager_TriggerEvent");
static_assert(sizeof(ControllerEffectsManager_TriggerEvent) == 0x000008, "Wrong size on ControllerEffectsManager_TriggerEvent");
static_assert(offsetof(ControllerEffectsManager_TriggerEvent, Name_0) == 0x000000, "Member 'ControllerEffectsManager_TriggerEvent::Name_0' has a wrong offset!");

}

