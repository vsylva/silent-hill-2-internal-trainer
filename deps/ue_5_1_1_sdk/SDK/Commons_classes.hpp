#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Commons

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// Class Commons.ScalingRule
// 0x0010 (0x0038 - 0x0028)
class UScalingRule final : public UDPICustomScalingRule
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScalingRule">();
	}
	static class UScalingRule* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScalingRule>();
	}
};
static_assert(alignof(UScalingRule) == 0x000008, "Wrong alignment on UScalingRule");
static_assert(sizeof(UScalingRule) == 0x000038, "Wrong size on UScalingRule");

// Class Commons.BHUD
// 0x0270 (0x0610 - 0x03A0)
class ABHUD : public AHUD
{
public:
	class UTexture2D*                             CrosshairTex;                                      // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawFPS;                                          // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawFocus;                                        // 0x03A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3AA[0x266];                                    // 0x03AA(0x0266)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetAvgFps() const;
	int32 GetHitches() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BHUD">();
	}
	static class ABHUD* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABHUD>();
	}
};
static_assert(alignof(ABHUD) == 0x000008, "Wrong alignment on ABHUD");
static_assert(sizeof(ABHUD) == 0x000610, "Wrong size on ABHUD");
static_assert(offsetof(ABHUD, CrosshairTex) == 0x0003A0, "Member 'ABHUD::CrosshairTex' has a wrong offset!");
static_assert(offsetof(ABHUD, bDrawFPS) == 0x0003A8, "Member 'ABHUD::bDrawFPS' has a wrong offset!");
static_assert(offsetof(ABHUD, bDrawFocus) == 0x0003A9, "Member 'ABHUD::bDrawFocus' has a wrong offset!");

// Class Commons.UtilityStatics
// 0x0000 (0x0028 - 0x0028)
class UUtilityStatics final : public UBlueprintFunctionLibrary
{
public:
	static bool AnglesMatchCondition(const struct FDirectionCondition& Condition, float YawAngle, float PitchAngle);
	static float ApplySimpleBentCurveAlpha(const struct FSimpleBentCurve& Curve, float ALPHA);
	static float ApplySimpleBentCurveFloat(const struct FSimpleBentCurve& Curve, float From, float To, float ALPHA);
	static struct FQuat ApplySimpleBentCurveQuat(const struct FSimpleBentCurve& Curve, const struct FQuat& From, const struct FQuat& To, float ALPHA);
	static struct FRotator ApplySimpleBentCurveRotator(const struct FSimpleBentCurve& Curve, const struct FRotator& From, const struct FRotator& To, float ALPHA);
	static void ApplySimpleBentCurveTransform(struct FTransform* Transform, const struct FSimpleBentCurve& Curve, const struct FTransform& From, const struct FTransform& To, float ALPHA);
	static struct FVector ApplySimpleBentCurveVector(const struct FSimpleBentCurve& Curve, const struct FVector& From, const struct FVector& To, float ALPHA);
	static struct FVector2D ApplySimpleBentCurveVector2D(const struct FSimpleBentCurve& Curve, const struct FVector2D& From, const struct FVector2D& To, float ALPHA);
	static bool QuatMatchesCondition(const struct FDirectionCondition& Condition, const struct FQuat& Direction);
	static bool RotatorMatchesCondition(const struct FDirectionCondition& Condition, const struct FRotator& Direction);
	static bool VectorMatchesCondition(const struct FDirectionCondition& Condition, const struct FVector& Direction, bool AllowZeroVectorAtMaximumTolerance);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UtilityStatics">();
	}
	static class UUtilityStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUtilityStatics>();
	}
};
static_assert(alignof(UUtilityStatics) == 0x000008, "Wrong alignment on UUtilityStatics");
static_assert(sizeof(UUtilityStatics) == 0x000028, "Wrong size on UUtilityStatics");

// Class Commons.CommonsGameplayStatics
// 0x0000 (0x0028 - 0x0028)
class UCommonsGameplayStatics final : public UBlueprintFunctionLibrary
{
public:
	static void DelayTicks(class UObject* WorldContextObject, int32 Ticks, const struct FLatentActionInfo& LatentInfo);
	static bool IsBuildEditor();
	static bool IsBuildShipping();
	static bool IsButtonBottomForAccept();
	static bool IsButtonRightForAccept();
	static bool IsCommandlet();
	static bool IsConsolePlatform();
	static bool IsLinuxPlatform();
	static bool IsMacPlatform();
	static bool IsPIE();
	static bool IsPs4Platform();
	static bool IsPS5Ext();
	static bool IsPs5Platform();
	static bool IsScarletPlatform();
	static bool IsSonyPlatform();
	static bool IsSwitchPlatform();
	static bool IsWindowsPlatform();
	static bool IsXLockhart();
	static bool IsXOnePlatform();
	static bool IsXPlatform();
	static bool IsXScorpio();
	static bool IsXSXPlatform();
	static void PlayGameplaySound2D(const class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, class AActor* OwningActor);
	static void PostFinalizeActorComponentCreation(class AActor* Actor, class UActorComponent* Component);
	static class UAudioComponent* SpawnGameplaySound2D(const class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool PersistAcrossLevelTransition, bool AutoDestroy);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonsGameplayStatics">();
	}
	static class UCommonsGameplayStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonsGameplayStatics>();
	}
};
static_assert(alignof(UCommonsGameplayStatics) == 0x000008, "Wrong alignment on UCommonsGameplayStatics");
static_assert(sizeof(UCommonsGameplayStatics) == 0x000028, "Wrong size on UCommonsGameplayStatics");

// Class Commons.CommonsStatics
// 0x0000 (0x0028 - 0x0028)
class UCommonsStatics final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonsStatics">();
	}
	static class UCommonsStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonsStatics>();
	}
};
static_assert(alignof(UCommonsStatics) == 0x000008, "Wrong alignment on UCommonsStatics");
static_assert(sizeof(UCommonsStatics) == 0x000028, "Wrong size on UCommonsStatics");

// Class Commons.EditorTickableActor
// 0x0000 (0x02B0 - 0x02B0)
class AEditorTickableActor final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EditorTickableActor">();
	}
	static class AEditorTickableActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEditorTickableActor>();
	}
};
static_assert(alignof(AEditorTickableActor) == 0x000008, "Wrong alignment on AEditorTickableActor");
static_assert(sizeof(AEditorTickableActor) == 0x0002B0, "Wrong size on AEditorTickableActor");

// Class Commons.EditorTickableComponent
// 0x0018 (0x00B8 - 0x00A0)
class UEditorTickableComponent final : public UActorComponent
{
public:
	bool                                          bEditorOnlyTick;                                   // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             EditorTick;                                        // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EditorTickableComponent">();
	}
	static class UEditorTickableComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEditorTickableComponent>();
	}
};
static_assert(alignof(UEditorTickableComponent) == 0x000008, "Wrong alignment on UEditorTickableComponent");
static_assert(sizeof(UEditorTickableComponent) == 0x0000B8, "Wrong size on UEditorTickableComponent");
static_assert(offsetof(UEditorTickableComponent, bEditorOnlyTick) == 0x0000A0, "Member 'UEditorTickableComponent::bEditorOnlyTick' has a wrong offset!");
static_assert(offsetof(UEditorTickableComponent, EditorTick) == 0x0000A8, "Member 'UEditorTickableComponent::EditorTick' has a wrong offset!");

// Class Commons.SharedBoolSwitchBlueprintUtility
// 0x0000 (0x0028 - 0x0028)
class USharedBoolSwitchBlueprintUtility final : public UBlueprintFunctionLibrary
{
public:
	static void Acquire(struct FSharedBoolSwitchBlueprint& BoolSwitch, class UObject* User);
	static void ChangeDefaultValue(struct FSharedBoolSwitchBlueprint& BoolSwitch, const bool NewDefaultValue);
	static void ClearAllUsers(struct FSharedBoolSwitchBlueprint& BoolSwitch);
	static bool GetCurrentValue(const struct FSharedBoolSwitchBlueprint& BoolSwitch);
	static bool GetDefaultValue(const struct FSharedBoolSwitchBlueprint& BoolSwitch);
	static bool IsSwitched(const struct FSharedBoolSwitchBlueprint& BoolSwitch);
	static void Release(struct FSharedBoolSwitchBlueprint& BoolSwitch, class UObject* User);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SharedBoolSwitchBlueprintUtility">();
	}
	static class USharedBoolSwitchBlueprintUtility* GetDefaultObj()
	{
		return GetDefaultObjImpl<USharedBoolSwitchBlueprintUtility>();
	}
};
static_assert(alignof(USharedBoolSwitchBlueprintUtility) == 0x000008, "Wrong alignment on USharedBoolSwitchBlueprintUtility");
static_assert(sizeof(USharedBoolSwitchBlueprintUtility) == 0x000028, "Wrong size on USharedBoolSwitchBlueprintUtility");

}

