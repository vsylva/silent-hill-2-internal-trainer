#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UCSW

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "UCSW_structs.hpp"
#include "UCW_structs.hpp"
#include "UCW_classes.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_classes.hpp"
#include "InputCore_structs.hpp"
#include "InputRebinding_structs.hpp"
#include "Engine_classes.hpp"
#include "Slate_structs.hpp"
#include "GameBase_structs.hpp"
#include "GameBase_classes.hpp"
#include "Commons_structs.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class UCSW.AskReloadWidget
// 0x0018 (0x03B0 - 0x0398)
class UAskReloadWidget : public UAskDialogWidget
{
public:
	uint8                                         Pad_398[0x8];                                      // 0x0398(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                Ask_Panel;                                         // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxTimeFromStartSec;                               // 0x03A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3AC[0x4];                                      // 0x03AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AskReloadWidget">();
	}
	static class UAskReloadWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAskReloadWidget>();
	}
};
static_assert(alignof(UAskReloadWidget) == 0x000008, "Wrong alignment on UAskReloadWidget");
static_assert(sizeof(UAskReloadWidget) == 0x0003B0, "Wrong size on UAskReloadWidget");
static_assert(offsetof(UAskReloadWidget, Ask_Panel) == 0x0003A0, "Member 'UAskReloadWidget::Ask_Panel' has a wrong offset!");
static_assert(offsetof(UAskReloadWidget, MaxTimeFromStartSec) == 0x0003A8, "Member 'UAskReloadWidget::MaxTimeFromStartSec' has a wrong offset!");

// Class UCSW.GenericSettingsPanelWidget
// 0x0050 (0x02F0 - 0x02A0)
class UGenericSettingsPanelWidget : public UBUserWidget
{
public:
	uint8                                         Pad_2A0[0x50];                                     // 0x02A0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Hide();
	void OnApply();
	void OnHide();
	void OnReset();
	void OnRevert();
	void OnShow();
	void OnUpdateView();
	void Reset();
	void Revert();
	void Show();

	bool IsOptionsChanged() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GenericSettingsPanelWidget">();
	}
	static class UGenericSettingsPanelWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGenericSettingsPanelWidget>();
	}
};
static_assert(alignof(UGenericSettingsPanelWidget) == 0x000008, "Wrong alignment on UGenericSettingsPanelWidget");
static_assert(sizeof(UGenericSettingsPanelWidget) == 0x0002F0, "Wrong size on UGenericSettingsPanelWidget");

// Class UCSW.BaseSettingsPanelWidget
// 0x0150 (0x0440 - 0x02F0)
class UBaseSettingsPanelWidget : public UGenericSettingsPanelWidget
{
public:
	uint8                                         Pad_2F0[0x150];                                    // 0x02F0(0x0150)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnHideVisualization();
	void BP_OnNeedPreApplyTest(bool On);
	void BP_OnShowVisualization(const struct FSettingOptionVisualizationData& Visualization);
	void RequestPreApplyTest();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BaseSettingsPanelWidget">();
	}
	static class UBaseSettingsPanelWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBaseSettingsPanelWidget>();
	}
};
static_assert(alignof(UBaseSettingsPanelWidget) == 0x000008, "Wrong alignment on UBaseSettingsPanelWidget");
static_assert(sizeof(UBaseSettingsPanelWidget) == 0x000440, "Wrong size on UBaseSettingsPanelWidget");

// Class UCSW.ColorVisionDeficiencyVisualizationWidget
// 0x0068 (0x02E0 - 0x0278)
class UColorVisionDeficiencyVisualizationWidget final : public UUserWidget
{
public:
	TMap<EColorVisionDeficiency, struct FColorVisionVisualizationImages> Images;                                            // 0x0278(0x0050)(Edit, EditFixedSize, Protected, NativeAccessSpecifierProtected)
	class UImage*                                 Visualization_img;                                 // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x02D0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D8[0x8];                                      // 0x02D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Show(bool On);
	void Update(const struct FColorVisionDeficiencyData& Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ColorVisionDeficiencyVisualizationWidget">();
	}
	static class UColorVisionDeficiencyVisualizationWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UColorVisionDeficiencyVisualizationWidget>();
	}
};
static_assert(alignof(UColorVisionDeficiencyVisualizationWidget) == 0x000008, "Wrong alignment on UColorVisionDeficiencyVisualizationWidget");
static_assert(sizeof(UColorVisionDeficiencyVisualizationWidget) == 0x0002E0, "Wrong size on UColorVisionDeficiencyVisualizationWidget");
static_assert(offsetof(UColorVisionDeficiencyVisualizationWidget, Images) == 0x000278, "Member 'UColorVisionDeficiencyVisualizationWidget::Images' has a wrong offset!");
static_assert(offsetof(UColorVisionDeficiencyVisualizationWidget, Visualization_img) == 0x0002C8, "Member 'UColorVisionDeficiencyVisualizationWidget::Visualization_img' has a wrong offset!");
static_assert(offsetof(UColorVisionDeficiencyVisualizationWidget, DynamicMaterial) == 0x0002D0, "Member 'UColorVisionDeficiencyVisualizationWidget::DynamicMaterial' has a wrong offset!");

// Class UCSW.CommandButtonWidget
// 0x0008 (0x0280 - 0x0278)
class UCommandButtonWidget final : public UUserWidget
{
public:
	class UBButton*                               Slot_but;                                          // 0x0278(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnSetText(const class FText& Text);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommandButtonWidget">();
	}
	static class UCommandButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommandButtonWidget>();
	}
};
static_assert(alignof(UCommandButtonWidget) == 0x000008, "Wrong alignment on UCommandButtonWidget");
static_assert(sizeof(UCommandButtonWidget) == 0x000280, "Wrong size on UCommandButtonWidget");
static_assert(offsetof(UCommandButtonWidget, Slot_but) == 0x000278, "Member 'UCommandButtonWidget::Slot_but' has a wrong offset!");

// Class UCSW.CommandButtonBox
// 0x0020 (0x0298 - 0x0278)
class UCommandButtonBox final : public UUserWidget
{
public:
	TSubclassOf<class UCommandButtonWidget>       ButtonWidgetClass;                                 // 0x0278(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FCommandText>                   Commands;                                          // 0x0280(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UPanelWidget*                           Content_panel;                                     // 0x0290(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommandButtonBox">();
	}
	static class UCommandButtonBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommandButtonBox>();
	}
};
static_assert(alignof(UCommandButtonBox) == 0x000008, "Wrong alignment on UCommandButtonBox");
static_assert(sizeof(UCommandButtonBox) == 0x000298, "Wrong size on UCommandButtonBox");
static_assert(offsetof(UCommandButtonBox, ButtonWidgetClass) == 0x000278, "Member 'UCommandButtonBox::ButtonWidgetClass' has a wrong offset!");
static_assert(offsetof(UCommandButtonBox, Commands) == 0x000280, "Member 'UCommandButtonBox::Commands' has a wrong offset!");
static_assert(offsetof(UCommandButtonBox, Content_panel) == 0x000290, "Member 'UCommandButtonBox::Content_panel' has a wrong offset!");

// Class UCSW.ControlsSettingsPanelWidget
// 0x0080 (0x0370 - 0x02F0)
class UControlsSettingsPanelWidget : public UGenericSettingsPanelWidget
{
public:
	TArray<struct FKey>                           BlackListKeys;                                     // 0x02F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	TArray<struct FKey>                           NotHoldableKeys;                                   // 0x0300(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	bool                                          bUnbindOnConflict;                                 // 0x0310(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_311[0x5F];                                     // 0x0311(0x005F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool HasConflicts() const;
	bool HasEmptyBinds() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlsSettingsPanelWidget">();
	}
	static class UControlsSettingsPanelWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlsSettingsPanelWidget>();
	}
};
static_assert(alignof(UControlsSettingsPanelWidget) == 0x000008, "Wrong alignment on UControlsSettingsPanelWidget");
static_assert(sizeof(UControlsSettingsPanelWidget) == 0x000370, "Wrong size on UControlsSettingsPanelWidget");
static_assert(offsetof(UControlsSettingsPanelWidget, BlackListKeys) == 0x0002F0, "Member 'UControlsSettingsPanelWidget::BlackListKeys' has a wrong offset!");
static_assert(offsetof(UControlsSettingsPanelWidget, NotHoldableKeys) == 0x000300, "Member 'UControlsSettingsPanelWidget::NotHoldableKeys' has a wrong offset!");
static_assert(offsetof(UControlsSettingsPanelWidget, bUnbindOnConflict) == 0x000310, "Member 'UControlsSettingsPanelWidget::bUnbindOnConflict' has a wrong offset!");

// Class UCSW.ControlTipsPanel
// 0x0128 (0x03A0 - 0x0278)
class alignas(0x10) UControlTipsPanel : public UUserWidget
{
public:
	class UPanelWidget*                           Tips_box;                                          // 0x0278(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             Tips;                                              // 0x0280(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUE4KeyTexts*                           KeyTexts;                                          // 0x0288(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UControlTipWidget>          TipWidgetClass;                                    // 0x0290(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          SuportVisibilitySettings;                          // 0x0298(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_299[0x3];                                      // 0x0299(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VisibilityTime;                                    // 0x029C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGameTextsConfig*                       GameTextsConfig;                                   // 0x02A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       FadeOut_anim;                                      // 0x02A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UControlTipWidget*>              TipWidgets;                                        // 0x02B0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C0[0xE0];                                     // 0x02C0(0x00E0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnFadeStoped();
	void OnInputDeviceChanged();
	void OnResetVisibility();
	void OnSetTips();
	void SetTips(const TArray<class FName>& WantedTooltips);
	void SetTips4Test(const TArray<class FName>& WantedTips, const struct FControlTipsData& Config);
	void Update(const struct FControlTipsData& Config);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlTipsPanel">();
	}
	static class UControlTipsPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlTipsPanel>();
	}
};
static_assert(alignof(UControlTipsPanel) == 0x000010, "Wrong alignment on UControlTipsPanel");
static_assert(sizeof(UControlTipsPanel) == 0x0003A0, "Wrong size on UControlTipsPanel");
static_assert(offsetof(UControlTipsPanel, Tips_box) == 0x000278, "Member 'UControlTipsPanel::Tips_box' has a wrong offset!");
static_assert(offsetof(UControlTipsPanel, Tips) == 0x000280, "Member 'UControlTipsPanel::Tips' has a wrong offset!");
static_assert(offsetof(UControlTipsPanel, KeyTexts) == 0x000288, "Member 'UControlTipsPanel::KeyTexts' has a wrong offset!");
static_assert(offsetof(UControlTipsPanel, TipWidgetClass) == 0x000290, "Member 'UControlTipsPanel::TipWidgetClass' has a wrong offset!");
static_assert(offsetof(UControlTipsPanel, SuportVisibilitySettings) == 0x000298, "Member 'UControlTipsPanel::SuportVisibilitySettings' has a wrong offset!");
static_assert(offsetof(UControlTipsPanel, VisibilityTime) == 0x00029C, "Member 'UControlTipsPanel::VisibilityTime' has a wrong offset!");
static_assert(offsetof(UControlTipsPanel, GameTextsConfig) == 0x0002A0, "Member 'UControlTipsPanel::GameTextsConfig' has a wrong offset!");
static_assert(offsetof(UControlTipsPanel, FadeOut_anim) == 0x0002A8, "Member 'UControlTipsPanel::FadeOut_anim' has a wrong offset!");
static_assert(offsetof(UControlTipsPanel, TipWidgets) == 0x0002B0, "Member 'UControlTipsPanel::TipWidgets' has a wrong offset!");

// Class UCSW.ControlTipWidget
// 0x0088 (0x0300 - 0x0278)
class UControlTipWidget final : public UUserWidget
{
public:
	class UStyledRichTextBlock*                   Key_rtx;                                           // 0x0278(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextLayoutWidget*                      Description_txt;                                   // 0x0280(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 KeyTagText;                                        // 0x0288(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 SeparatorText;                                     // 0x0298(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A8[0x58];                                     // 0x02A8(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRefresh(const class FText& Description, const class FText& Keys);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlTipWidget">();
	}
	static class UControlTipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlTipWidget>();
	}
};
static_assert(alignof(UControlTipWidget) == 0x000008, "Wrong alignment on UControlTipWidget");
static_assert(sizeof(UControlTipWidget) == 0x000300, "Wrong size on UControlTipWidget");
static_assert(offsetof(UControlTipWidget, Key_rtx) == 0x000278, "Member 'UControlTipWidget::Key_rtx' has a wrong offset!");
static_assert(offsetof(UControlTipWidget, Description_txt) == 0x000280, "Member 'UControlTipWidget::Description_txt' has a wrong offset!");
static_assert(offsetof(UControlTipWidget, KeyTagText) == 0x000288, "Member 'UControlTipWidget::KeyTagText' has a wrong offset!");
static_assert(offsetof(UControlTipWidget, SeparatorText) == 0x000298, "Member 'UControlTipWidget::SeparatorText' has a wrong offset!");

// Class UCSW.CountdownDialogWidget
// 0x0150 (0x03F0 - 0x02A0)
class alignas(0x10) UCountdownDialogWidget final : public UBUserWidget
{
public:
	TArray<struct FKey>                           ConfirmKeys;                                       // 0x02A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FKey>                           CancelKeys;                                        // 0x02B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UBButton*                               Confirm_but;                                       // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBButton*                               Cancel_but;                                        // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CountNumber;                                       // 0x02D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Counter;                                           // 0x02D4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnConfirm;                                         // 0x02D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E8[0x10];                                     // 0x02E8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnCancel;                                          // 0x02F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_308[0xE8];                                     // 0x0308(0x00E8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cancel();
	void Confirm();
	void OnShow();
	void OnUpdate(int32 _Counter);
	void Show();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CountdownDialogWidget">();
	}
	static class UCountdownDialogWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCountdownDialogWidget>();
	}
};
static_assert(alignof(UCountdownDialogWidget) == 0x000010, "Wrong alignment on UCountdownDialogWidget");
static_assert(sizeof(UCountdownDialogWidget) == 0x0003F0, "Wrong size on UCountdownDialogWidget");
static_assert(offsetof(UCountdownDialogWidget, ConfirmKeys) == 0x0002A0, "Member 'UCountdownDialogWidget::ConfirmKeys' has a wrong offset!");
static_assert(offsetof(UCountdownDialogWidget, CancelKeys) == 0x0002B0, "Member 'UCountdownDialogWidget::CancelKeys' has a wrong offset!");
static_assert(offsetof(UCountdownDialogWidget, Confirm_but) == 0x0002C0, "Member 'UCountdownDialogWidget::Confirm_but' has a wrong offset!");
static_assert(offsetof(UCountdownDialogWidget, Cancel_but) == 0x0002C8, "Member 'UCountdownDialogWidget::Cancel_but' has a wrong offset!");
static_assert(offsetof(UCountdownDialogWidget, CountNumber) == 0x0002D0, "Member 'UCountdownDialogWidget::CountNumber' has a wrong offset!");
static_assert(offsetof(UCountdownDialogWidget, Counter) == 0x0002D4, "Member 'UCountdownDialogWidget::Counter' has a wrong offset!");
static_assert(offsetof(UCountdownDialogWidget, OnConfirm) == 0x0002D8, "Member 'UCountdownDialogWidget::OnConfirm' has a wrong offset!");
static_assert(offsetof(UCountdownDialogWidget, OnCancel) == 0x0002F8, "Member 'UCountdownDialogWidget::OnCancel' has a wrong offset!");

// Class UCSW.DialogSubtitlesLineWidget
// 0x0080 (0x02F8 - 0x0278)
class UDialogSubtitlesLineWidget final : public UUserWidget
{
public:
	class UStyledRichTextBlock*                   Speaker_rtx;                                       // 0x0278(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStyledRichTextBlock*                   Text_rtx;                                          // 0x0280(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBorder*                                Text_border;                                       // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_290[0x8];                                      // 0x0290(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameTextsConfig*                       GameTextsConfig;                                   // 0x0298(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           BackgroundSolid;                                   // 0x02A0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           BackgroundTransparent;                             // 0x02B0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   Speaker;                                           // 0x02C0(0x0018)(Transient, Protected, NativeAccessSpecifierProtected)
	class FText                                   Text;                                              // 0x02D8(0x0018)(Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F0[0x8];                                      // 0x02F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearText();
	void SetText(int32 _ID, const class FText& Speaker_0, const class FText& Text_0, const struct FColor& Color);
	void SetText4Test(const class FText& Speaker_0, const class FText& Text_0, const struct FLinearColor& Color, const struct FSubtitleData& Config);

	bool HasId(int32 _ID) const;
	bool HasText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogSubtitlesLineWidget">();
	}
	static class UDialogSubtitlesLineWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogSubtitlesLineWidget>();
	}
};
static_assert(alignof(UDialogSubtitlesLineWidget) == 0x000008, "Wrong alignment on UDialogSubtitlesLineWidget");
static_assert(sizeof(UDialogSubtitlesLineWidget) == 0x0002F8, "Wrong size on UDialogSubtitlesLineWidget");
static_assert(offsetof(UDialogSubtitlesLineWidget, Speaker_rtx) == 0x000278, "Member 'UDialogSubtitlesLineWidget::Speaker_rtx' has a wrong offset!");
static_assert(offsetof(UDialogSubtitlesLineWidget, Text_rtx) == 0x000280, "Member 'UDialogSubtitlesLineWidget::Text_rtx' has a wrong offset!");
static_assert(offsetof(UDialogSubtitlesLineWidget, Text_border) == 0x000288, "Member 'UDialogSubtitlesLineWidget::Text_border' has a wrong offset!");
static_assert(offsetof(UDialogSubtitlesLineWidget, GameTextsConfig) == 0x000298, "Member 'UDialogSubtitlesLineWidget::GameTextsConfig' has a wrong offset!");
static_assert(offsetof(UDialogSubtitlesLineWidget, BackgroundSolid) == 0x0002A0, "Member 'UDialogSubtitlesLineWidget::BackgroundSolid' has a wrong offset!");
static_assert(offsetof(UDialogSubtitlesLineWidget, BackgroundTransparent) == 0x0002B0, "Member 'UDialogSubtitlesLineWidget::BackgroundTransparent' has a wrong offset!");
static_assert(offsetof(UDialogSubtitlesLineWidget, Speaker) == 0x0002C0, "Member 'UDialogSubtitlesLineWidget::Speaker' has a wrong offset!");
static_assert(offsetof(UDialogSubtitlesLineWidget, Text) == 0x0002D8, "Member 'UDialogSubtitlesLineWidget::Text' has a wrong offset!");

// Class UCSW.DialogSubtitlesWidget
// 0x0020 (0x0298 - 0x0278)
class UDialogSubtitlesWidget final : public UUserWidget
{
public:
	uint8                                         Pad_278[0x10];                                     // 0x0278(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDialogSubtitlesLineWidget*>     Lines;                                             // 0x0288(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void AddSubtitle(int32 ID, const class FText& Speaker, const class FText& Text, const struct FColor& Color);
	void ClearSubtitles();
	void OnAddSubtitle(int32 ID);
	void OnRefresh();
	void OnRemoveSubtitle(int32 ID);
	void RemoveSubtitle(int32 ID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogSubtitlesWidget">();
	}
	static class UDialogSubtitlesWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogSubtitlesWidget>();
	}
};
static_assert(alignof(UDialogSubtitlesWidget) == 0x000008, "Wrong alignment on UDialogSubtitlesWidget");
static_assert(sizeof(UDialogSubtitlesWidget) == 0x000298, "Wrong size on UDialogSubtitlesWidget");
static_assert(offsetof(UDialogSubtitlesWidget, Lines) == 0x000288, "Member 'UDialogSubtitlesWidget::Lines' has a wrong offset!");

// Class UCSW.ExtraSettingsPanelWidget
// 0x0098 (0x0338 - 0x02A0)
class UExtraSettingsPanelWidget : public UBUserWidget
{
public:
	class FName                                   PanelName;                                         // 0x02A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PanelNeedNoBackgroundView;                         // 0x02A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPanelHasCustomBackHotKey;                         // 0x02A9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPanelHasCustomBackProcedure;                      // 0x02AA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AB[0x5];                                      // 0x02AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          BackSound;                                         // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          ResetSound;                                        // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGenericSettingsPanelWidget*            Options_panel;                                     // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBButton*                               Back_but;                                          // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBButton*                               Reset_but;                                         // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             K2_OnBack;                                         // 0x02D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E8[0x10];                                     // 0x02E8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             K2_OnRevert;                                       // 0x02F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_308[0x10];                                     // 0x0308(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             K2_OnReset;                                        // 0x0318(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_328[0x10];                                     // 0x0328(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Back();
	void BP_OnBack();
	bool BP_OnCustomBack();
	void BP_OnReset();
	void BP_OnRevert();
	void Hide();
	void OnHide();
	void OnShow();
	void Reset();
	void Revert();
	void Show();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ExtraSettingsPanelWidget">();
	}
	static class UExtraSettingsPanelWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UExtraSettingsPanelWidget>();
	}
};
static_assert(alignof(UExtraSettingsPanelWidget) == 0x000008, "Wrong alignment on UExtraSettingsPanelWidget");
static_assert(sizeof(UExtraSettingsPanelWidget) == 0x000338, "Wrong size on UExtraSettingsPanelWidget");
static_assert(offsetof(UExtraSettingsPanelWidget, PanelName) == 0x0002A0, "Member 'UExtraSettingsPanelWidget::PanelName' has a wrong offset!");
static_assert(offsetof(UExtraSettingsPanelWidget, PanelNeedNoBackgroundView) == 0x0002A8, "Member 'UExtraSettingsPanelWidget::PanelNeedNoBackgroundView' has a wrong offset!");
static_assert(offsetof(UExtraSettingsPanelWidget, bPanelHasCustomBackHotKey) == 0x0002A9, "Member 'UExtraSettingsPanelWidget::bPanelHasCustomBackHotKey' has a wrong offset!");
static_assert(offsetof(UExtraSettingsPanelWidget, bPanelHasCustomBackProcedure) == 0x0002AA, "Member 'UExtraSettingsPanelWidget::bPanelHasCustomBackProcedure' has a wrong offset!");
static_assert(offsetof(UExtraSettingsPanelWidget, BackSound) == 0x0002B0, "Member 'UExtraSettingsPanelWidget::BackSound' has a wrong offset!");
static_assert(offsetof(UExtraSettingsPanelWidget, ResetSound) == 0x0002B8, "Member 'UExtraSettingsPanelWidget::ResetSound' has a wrong offset!");
static_assert(offsetof(UExtraSettingsPanelWidget, Options_panel) == 0x0002C0, "Member 'UExtraSettingsPanelWidget::Options_panel' has a wrong offset!");
static_assert(offsetof(UExtraSettingsPanelWidget, Back_but) == 0x0002C8, "Member 'UExtraSettingsPanelWidget::Back_but' has a wrong offset!");
static_assert(offsetof(UExtraSettingsPanelWidget, Reset_but) == 0x0002D0, "Member 'UExtraSettingsPanelWidget::Reset_but' has a wrong offset!");
static_assert(offsetof(UExtraSettingsPanelWidget, K2_OnBack) == 0x0002D8, "Member 'UExtraSettingsPanelWidget::K2_OnBack' has a wrong offset!");
static_assert(offsetof(UExtraSettingsPanelWidget, K2_OnRevert) == 0x0002F8, "Member 'UExtraSettingsPanelWidget::K2_OnRevert' has a wrong offset!");
static_assert(offsetof(UExtraSettingsPanelWidget, K2_OnReset) == 0x000318, "Member 'UExtraSettingsPanelWidget::K2_OnReset' has a wrong offset!");

// Class UCSW.GameTextsConfig
// 0x0450 (0x0480 - 0x0030)
class UGameTextsConfig : public UDataAsset
{
public:
	struct FGameTextData                          DialogsTextData;                                   // 0x0030(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameTextData                          ControlTipsTextData;                               // 0x01A0(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameTextData                          ControlTipsKeyTextData;                            // 0x0310(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameTextsConfig">();
	}
	static class UGameTextsConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameTextsConfig>();
	}
};
static_assert(alignof(UGameTextsConfig) == 0x000008, "Wrong alignment on UGameTextsConfig");
static_assert(sizeof(UGameTextsConfig) == 0x000480, "Wrong size on UGameTextsConfig");
static_assert(offsetof(UGameTextsConfig, DialogsTextData) == 0x000030, "Member 'UGameTextsConfig::DialogsTextData' has a wrong offset!");
static_assert(offsetof(UGameTextsConfig, ControlTipsTextData) == 0x0001A0, "Member 'UGameTextsConfig::ControlTipsTextData' has a wrong offset!");
static_assert(offsetof(UGameTextsConfig, ControlTipsKeyTextData) == 0x000310, "Member 'UGameTextsConfig::ControlTipsKeyTextData' has a wrong offset!");

// Class UCSW.InputBindingOptionsBox
// 0x0028 (0x02A0 - 0x0278)
class UInputBindingOptionsBox final : public UUserWidget
{
public:
	TSubclassOf<class UInputBindingOptionWidget>  OptionWidgetClass;                                 // 0x0278(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bButtonsOnly;                                      // 0x0280(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bColumn1ButtonsOnly;                               // 0x0281(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bColumn2ButtonsOnly;                               // 0x0282(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_283[0x5];                                      // 0x0283(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FUE4InputHandle>                Options;                                           // 0x0288(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	class UPanelWidget*                           Options_panel;                                     // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UWidget* GetFirstChild() const;
	class UWidget* GetLastChild() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputBindingOptionsBox">();
	}
	static class UInputBindingOptionsBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputBindingOptionsBox>();
	}
};
static_assert(alignof(UInputBindingOptionsBox) == 0x000008, "Wrong alignment on UInputBindingOptionsBox");
static_assert(sizeof(UInputBindingOptionsBox) == 0x0002A0, "Wrong size on UInputBindingOptionsBox");
static_assert(offsetof(UInputBindingOptionsBox, OptionWidgetClass) == 0x000278, "Member 'UInputBindingOptionsBox::OptionWidgetClass' has a wrong offset!");
static_assert(offsetof(UInputBindingOptionsBox, bButtonsOnly) == 0x000280, "Member 'UInputBindingOptionsBox::bButtonsOnly' has a wrong offset!");
static_assert(offsetof(UInputBindingOptionsBox, bColumn1ButtonsOnly) == 0x000281, "Member 'UInputBindingOptionsBox::bColumn1ButtonsOnly' has a wrong offset!");
static_assert(offsetof(UInputBindingOptionsBox, bColumn2ButtonsOnly) == 0x000282, "Member 'UInputBindingOptionsBox::bColumn2ButtonsOnly' has a wrong offset!");
static_assert(offsetof(UInputBindingOptionsBox, Options) == 0x000288, "Member 'UInputBindingOptionsBox::Options' has a wrong offset!");
static_assert(offsetof(UInputBindingOptionsBox, Options_panel) == 0x000298, "Member 'UInputBindingOptionsBox::Options_panel' has a wrong offset!");

// Class UCSW.InputBindingOptionWidget
// 0x0170 (0x03E8 - 0x0278)
class UInputBindingOptionWidget final : public UUserWidget
{
public:
	bool                                          bIs1stColumnPCOnly;                                // 0x0278(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIs2ndColumnPCOnly;                                // 0x0279(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIs3rdColumnPCOnly;                                // 0x027A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_27B[0x5];                                      // 0x027B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBInputKeySelector*                     Value_wdg;                                         // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBInputKeySelector*                     Value1_wdg;                                        // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBInputKeySelector*                     Value2_wdg;                                        // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBCheckBox*                             Toggle_ckb;                                        // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                Label_wdg;                                         // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Conflict_img;                                      // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseTag;                                           // 0x02B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseKeyTag;                                        // 0x02B1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B2[0x6];                                      // 0x02B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHoverableTextStyle                    Style;                                             // 0x02B8(0x0048)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_300[0xE8];                                     // 0x0300(0x00E8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnConflictStateChanged(bool IsInConflict);
	void OnLabelTextChanged(const class FText& Text);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputBindingOptionWidget">();
	}
	static class UInputBindingOptionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputBindingOptionWidget>();
	}
};
static_assert(alignof(UInputBindingOptionWidget) == 0x000008, "Wrong alignment on UInputBindingOptionWidget");
static_assert(sizeof(UInputBindingOptionWidget) == 0x0003E8, "Wrong size on UInputBindingOptionWidget");
static_assert(offsetof(UInputBindingOptionWidget, bIs1stColumnPCOnly) == 0x000278, "Member 'UInputBindingOptionWidget::bIs1stColumnPCOnly' has a wrong offset!");
static_assert(offsetof(UInputBindingOptionWidget, bIs2ndColumnPCOnly) == 0x000279, "Member 'UInputBindingOptionWidget::bIs2ndColumnPCOnly' has a wrong offset!");
static_assert(offsetof(UInputBindingOptionWidget, bIs3rdColumnPCOnly) == 0x00027A, "Member 'UInputBindingOptionWidget::bIs3rdColumnPCOnly' has a wrong offset!");
static_assert(offsetof(UInputBindingOptionWidget, Value_wdg) == 0x000280, "Member 'UInputBindingOptionWidget::Value_wdg' has a wrong offset!");
static_assert(offsetof(UInputBindingOptionWidget, Value1_wdg) == 0x000288, "Member 'UInputBindingOptionWidget::Value1_wdg' has a wrong offset!");
static_assert(offsetof(UInputBindingOptionWidget, Value2_wdg) == 0x000290, "Member 'UInputBindingOptionWidget::Value2_wdg' has a wrong offset!");
static_assert(offsetof(UInputBindingOptionWidget, Toggle_ckb) == 0x000298, "Member 'UInputBindingOptionWidget::Toggle_ckb' has a wrong offset!");
static_assert(offsetof(UInputBindingOptionWidget, Label_wdg) == 0x0002A0, "Member 'UInputBindingOptionWidget::Label_wdg' has a wrong offset!");
static_assert(offsetof(UInputBindingOptionWidget, Conflict_img) == 0x0002A8, "Member 'UInputBindingOptionWidget::Conflict_img' has a wrong offset!");
static_assert(offsetof(UInputBindingOptionWidget, bUseTag) == 0x0002B0, "Member 'UInputBindingOptionWidget::bUseTag' has a wrong offset!");
static_assert(offsetof(UInputBindingOptionWidget, bUseKeyTag) == 0x0002B1, "Member 'UInputBindingOptionWidget::bUseKeyTag' has a wrong offset!");
static_assert(offsetof(UInputBindingOptionWidget, Style) == 0x0002B8, "Member 'UInputBindingOptionWidget::Style' has a wrong offset!");

// Class UCSW.InputBindingViewBox
// 0x0028 (0x02A0 - 0x0278)
class UInputBindingViewBox final : public UUserWidget
{
public:
	TSubclassOf<class UActionKeysViewWidget>      ViewWidgetClass;                                   // 0x0278(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FUE4InputHandle>                Options;                                           // 0x0280(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	bool                                          bPCKeysOnly;                                       // 0x0290(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bGamepadKeysOnly;                                  // 0x0291(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bForAxisAnalogOnly;                                // 0x0292(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShowSingleKey;                                    // 0x0293(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPanelWidget*                           Options_panel;                                     // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UWidget* GetFirstChild() const;
	class UWidget* GetLastChild() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputBindingViewBox">();
	}
	static class UInputBindingViewBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputBindingViewBox>();
	}
};
static_assert(alignof(UInputBindingViewBox) == 0x000008, "Wrong alignment on UInputBindingViewBox");
static_assert(sizeof(UInputBindingViewBox) == 0x0002A0, "Wrong size on UInputBindingViewBox");
static_assert(offsetof(UInputBindingViewBox, ViewWidgetClass) == 0x000278, "Member 'UInputBindingViewBox::ViewWidgetClass' has a wrong offset!");
static_assert(offsetof(UInputBindingViewBox, Options) == 0x000280, "Member 'UInputBindingViewBox::Options' has a wrong offset!");
static_assert(offsetof(UInputBindingViewBox, bPCKeysOnly) == 0x000290, "Member 'UInputBindingViewBox::bPCKeysOnly' has a wrong offset!");
static_assert(offsetof(UInputBindingViewBox, bGamepadKeysOnly) == 0x000291, "Member 'UInputBindingViewBox::bGamepadKeysOnly' has a wrong offset!");
static_assert(offsetof(UInputBindingViewBox, bForAxisAnalogOnly) == 0x000292, "Member 'UInputBindingViewBox::bForAxisAnalogOnly' has a wrong offset!");
static_assert(offsetof(UInputBindingViewBox, bShowSingleKey) == 0x000293, "Member 'UInputBindingViewBox::bShowSingleKey' has a wrong offset!");
static_assert(offsetof(UInputBindingViewBox, Options_panel) == 0x000298, "Member 'UInputBindingViewBox::Options_panel' has a wrong offset!");

// Class UCSW.InputBindingViewWidget
// 0x0030 (0x02A8 - 0x0278)
class UInputBindingViewWidget : public UUserWidget
{
public:
	class UStyledRichTextBlock*                   Keys_rtx;                                          // 0x0278(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextLayoutWidget*                      Actions_txt;                                       // 0x0280(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 KeyTagText;                                        // 0x0288(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 SeparatorText;                                     // 0x0298(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputBindingViewWidget">();
	}
	static class UInputBindingViewWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputBindingViewWidget>();
	}
};
static_assert(alignof(UInputBindingViewWidget) == 0x000008, "Wrong alignment on UInputBindingViewWidget");
static_assert(sizeof(UInputBindingViewWidget) == 0x0002A8, "Wrong size on UInputBindingViewWidget");
static_assert(offsetof(UInputBindingViewWidget, Keys_rtx) == 0x000278, "Member 'UInputBindingViewWidget::Keys_rtx' has a wrong offset!");
static_assert(offsetof(UInputBindingViewWidget, Actions_txt) == 0x000280, "Member 'UInputBindingViewWidget::Actions_txt' has a wrong offset!");
static_assert(offsetof(UInputBindingViewWidget, KeyTagText) == 0x000288, "Member 'UInputBindingViewWidget::KeyTagText' has a wrong offset!");
static_assert(offsetof(UInputBindingViewWidget, SeparatorText) == 0x000298, "Member 'UInputBindingViewWidget::SeparatorText' has a wrong offset!");

// Class UCSW.KeyActionsViewWidget
// 0x0038 (0x02E0 - 0x02A8)
class UKeyActionsViewWidget final : public UInputBindingViewWidget
{
public:
	struct FKey                                   Key;                                               // 0x02A8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShowSingleAction;                                 // 0x02C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   NoActionText;                                      // 0x02C8(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)

public:
	void OnRefresh();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KeyActionsViewWidget">();
	}
	static class UKeyActionsViewWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKeyActionsViewWidget>();
	}
};
static_assert(alignof(UKeyActionsViewWidget) == 0x000008, "Wrong alignment on UKeyActionsViewWidget");
static_assert(sizeof(UKeyActionsViewWidget) == 0x0002E0, "Wrong size on UKeyActionsViewWidget");
static_assert(offsetof(UKeyActionsViewWidget, Key) == 0x0002A8, "Member 'UKeyActionsViewWidget::Key' has a wrong offset!");
static_assert(offsetof(UKeyActionsViewWidget, bShowSingleAction) == 0x0002C0, "Member 'UKeyActionsViewWidget::bShowSingleAction' has a wrong offset!");
static_assert(offsetof(UKeyActionsViewWidget, NoActionText) == 0x0002C8, "Member 'UKeyActionsViewWidget::NoActionText' has a wrong offset!");

// Class UCSW.ActionKeysViewWidget
// 0x0028 (0x02D0 - 0x02A8)
class UActionKeysViewWidget final : public UInputBindingViewWidget
{
public:
	struct FUE4InputHandle                        Action;                                            // 0x02A8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPCKeysOnly;                                       // 0x02B4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bGamepadKeysOnly;                                  // 0x02B5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShowSingleKey;                                    // 0x02B6(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPlus1stForAxis;                                   // 0x02B7(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   NoKeysText;                                        // 0x02B8(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	void OnRefresh();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActionKeysViewWidget">();
	}
	static class UActionKeysViewWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionKeysViewWidget>();
	}
};
static_assert(alignof(UActionKeysViewWidget) == 0x000008, "Wrong alignment on UActionKeysViewWidget");
static_assert(sizeof(UActionKeysViewWidget) == 0x0002D0, "Wrong size on UActionKeysViewWidget");
static_assert(offsetof(UActionKeysViewWidget, Action) == 0x0002A8, "Member 'UActionKeysViewWidget::Action' has a wrong offset!");
static_assert(offsetof(UActionKeysViewWidget, bPCKeysOnly) == 0x0002B4, "Member 'UActionKeysViewWidget::bPCKeysOnly' has a wrong offset!");
static_assert(offsetof(UActionKeysViewWidget, bGamepadKeysOnly) == 0x0002B5, "Member 'UActionKeysViewWidget::bGamepadKeysOnly' has a wrong offset!");
static_assert(offsetof(UActionKeysViewWidget, bShowSingleKey) == 0x0002B6, "Member 'UActionKeysViewWidget::bShowSingleKey' has a wrong offset!");
static_assert(offsetof(UActionKeysViewWidget, bPlus1stForAxis) == 0x0002B7, "Member 'UActionKeysViewWidget::bPlus1stForAxis' has a wrong offset!");
static_assert(offsetof(UActionKeysViewWidget, NoKeysText) == 0x0002B8, "Member 'UActionKeysViewWidget::NoKeysText' has a wrong offset!");

// Class UCSW.InputKeyActionSelector
// 0x1750 (0x18A0 - 0x0150)
class UInputKeyActionSelector final : public UWidget
{
public:
	struct FKey                                   Key;                                               // 0x0150(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Brush;                                             // 0x0170(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TDelegate<void()>                             BrushDelegate;                                     // 0x0240(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                Padding;                                           // 0x0250(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                TextPadding;                                       // 0x0260(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ImageFirst;                                        // 0x0270(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsShowMode;                                        // 0x0271(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_272[0x6];                                      // 0x0272(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           DefaultOptions;                                    // 0x0278(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SelectedOption;                                    // 0x0288(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28C[0x4];                                      // 0x028C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHoverableTextStyle                    TextStyle;                                         // 0x0290(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font;                                              // 0x02D8(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NotSelectedTextColorAndOpacity;                    // 0x0330(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            StrikeBrush;                                       // 0x0340(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              ShadowOffset;                                      // 0x0410(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColorAndOpacity;                             // 0x0420(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ShadowColorAndOpacityDelegate;                     // 0x0430(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextJustify                                  Justification;                                     // 0x0440(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_441[0xF];                                      // 0x0441(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FComboBoxStyle                         ComboBoxStyle;                                     // 0x0450(0x0660)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTableRowStyle                         ItemStyle;                                         // 0x0AB0(0x0D50)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMargin                                ComboBoxPadding;                                   // 0x1800(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MaxListHeight;                                     // 0x1810(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasDownArrow;                                      // 0x1814(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableGamepadNavigationMode;                       // 0x1815(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFocusable;                                       // 0x1816(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1817[0x1];                                     // 0x1817(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnHovered;                                         // 0x1818(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1828[0x10];                                    // 0x1828(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnUnhovered;                                       // 0x1838(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1848[0x10];                                    // 0x1848(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSelectionChanged;                                // 0x1858(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1868[0x38];                                    // 0x1868(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnSelectionChangedEvent__DelegateSignature(int32 Value);
	void SetSelectedOption(int32 Option);

	int32 GetSelectedOption() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputKeyActionSelector">();
	}
	static class UInputKeyActionSelector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputKeyActionSelector>();
	}
};
static_assert(alignof(UInputKeyActionSelector) == 0x000010, "Wrong alignment on UInputKeyActionSelector");
static_assert(sizeof(UInputKeyActionSelector) == 0x0018A0, "Wrong size on UInputKeyActionSelector");
static_assert(offsetof(UInputKeyActionSelector, Key) == 0x000150, "Member 'UInputKeyActionSelector::Key' has a wrong offset!");
static_assert(offsetof(UInputKeyActionSelector, Brush) == 0x000170, "Member 'UInputKeyActionSelector::Brush' has a wrong offset!");
static_assert(offsetof(UInputKeyActionSelector, BrushDelegate) == 0x000240, "Member 'UInputKeyActionSelector::BrushDelegate' has a wrong offset!");
static_assert(offsetof(UInputKeyActionSelector, Padding) == 0x000250, "Member 'UInputKeyActionSelector::Padding' has a wrong offset!");
static_assert(offsetof(UInputKeyActionSelector, TextPadding) == 0x000260, "Member 'UInputKeyActionSelector::TextPadding' has a wrong offset!");
static_assert(offsetof(UInputKeyActionSelector, ImageFirst) == 0x000270, "Member 'UInputKeyActionSelector::ImageFirst' has a wrong offset!");
static_assert(offsetof(UInputKeyActionSelector, IsShowMode) == 0x000271, "Member 'UInputKeyActionSelector::IsShowMode' has a wrong offset!");
static_assert(offsetof(UInputKeyActionSelector, DefaultOptions) == 0x000278, "Member 'UInputKeyActionSelector::DefaultOptions' has a wrong offset!");
static_assert(offsetof(UInputKeyActionSelector, SelectedOption) == 0x000288, "Member 'UInputKeyActionSelector::SelectedOption' has a wrong offset!");
static_assert(offsetof(UInputKeyActionSelector, TextStyle) == 0x000290, "Member 'UInputKeyActionSelector::TextStyle' has a wrong offset!");
static_assert(offsetof(UInputKeyActionSelector, Font) == 0x0002D8, "Member 'UInputKeyActionSelector::Font' has a wrong offset!");
static_assert(offsetof(UInputKeyActionSelector, NotSelectedTextColorAndOpacity) == 0x000330, "Member 'UInputKeyActionSelector::NotSelectedTextColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UInputKeyActionSelector, StrikeBrush) == 0x000340, "Member 'UInputKeyActionSelector::StrikeBrush' has a wrong offset!");
static_assert(offsetof(UInputKeyActionSelector, ShadowOffset) == 0x000410, "Member 'UInputKeyActionSelector::ShadowOffset' has a wrong offset!");
static_assert(offsetof(UInputKeyActionSelector, ShadowColorAndOpacity) == 0x000420, "Member 'UInputKeyActionSelector::ShadowColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UInputKeyActionSelector, ShadowColorAndOpacityDelegate) == 0x000430, "Member 'UInputKeyActionSelector::ShadowColorAndOpacityDelegate' has a wrong offset!");
static_assert(offsetof(UInputKeyActionSelector, Justification) == 0x000440, "Member 'UInputKeyActionSelector::Justification' has a wrong offset!");
static_assert(offsetof(UInputKeyActionSelector, ComboBoxStyle) == 0x000450, "Member 'UInputKeyActionSelector::ComboBoxStyle' has a wrong offset!");
static_assert(offsetof(UInputKeyActionSelector, ItemStyle) == 0x000AB0, "Member 'UInputKeyActionSelector::ItemStyle' has a wrong offset!");
static_assert(offsetof(UInputKeyActionSelector, ComboBoxPadding) == 0x001800, "Member 'UInputKeyActionSelector::ComboBoxPadding' has a wrong offset!");
static_assert(offsetof(UInputKeyActionSelector, MaxListHeight) == 0x001810, "Member 'UInputKeyActionSelector::MaxListHeight' has a wrong offset!");
static_assert(offsetof(UInputKeyActionSelector, HasDownArrow) == 0x001814, "Member 'UInputKeyActionSelector::HasDownArrow' has a wrong offset!");
static_assert(offsetof(UInputKeyActionSelector, EnableGamepadNavigationMode) == 0x001815, "Member 'UInputKeyActionSelector::EnableGamepadNavigationMode' has a wrong offset!");
static_assert(offsetof(UInputKeyActionSelector, IsFocusable) == 0x001816, "Member 'UInputKeyActionSelector::IsFocusable' has a wrong offset!");
static_assert(offsetof(UInputKeyActionSelector, OnHovered) == 0x001818, "Member 'UInputKeyActionSelector::OnHovered' has a wrong offset!");
static_assert(offsetof(UInputKeyActionSelector, OnUnhovered) == 0x001838, "Member 'UInputKeyActionSelector::OnUnhovered' has a wrong offset!");
static_assert(offsetof(UInputKeyActionSelector, OnSelectionChanged) == 0x001858, "Member 'UInputKeyActionSelector::OnSelectionChanged' has a wrong offset!");

// Class UCSW.RebindingViewWidget
// 0x0040 (0x02B8 - 0x0278)
class URebindingViewWidget : public UUserWidget
{
public:
	class UUE4KeyTexts*                           KeyTexts;                                          // 0x0278(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_280[0x38];                                     // 0x0280(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Hide();
	void OnInputDeviceChanged();
	void Show();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RebindingViewWidget">();
	}
	static class URebindingViewWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<URebindingViewWidget>();
	}
};
static_assert(alignof(URebindingViewWidget) == 0x000008, "Wrong alignment on URebindingViewWidget");
static_assert(sizeof(URebindingViewWidget) == 0x0002B8, "Wrong size on URebindingViewWidget");
static_assert(offsetof(URebindingViewWidget, KeyTexts) == 0x000278, "Member 'URebindingViewWidget::KeyTexts' has a wrong offset!");

// Class UCSW.SlotInfoItem
// 0x0010 (0x0038 - 0x0028)
class USlotInfoItem final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SlotInfoItem">();
	}
	static class USlotInfoItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USlotInfoItem>();
	}
};
static_assert(alignof(USlotInfoItem) == 0x000008, "Wrong alignment on USlotInfoItem");
static_assert(sizeof(USlotInfoItem) == 0x000038, "Wrong size on USlotInfoItem");

// Class UCSW.SaveSlotsListWidget
// 0x00D8 (0x0378 - 0x02A0)
class USaveSlotsListWidget : public UBUserWidget
{
public:
	bool                                          bSaveMode;                                         // 0x02A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSaveModeNoAuto;                                   // 0x02A1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomSaveMethod;                                 // 0x02A2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoIsFocusable;                                  // 0x02A3(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSortByDate;                                       // 0x02A4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A5[0x3];                                      // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKey>                           BackKeys;                                          // 0x02A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAllowDelete;                                      // 0x02B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKey>                           DeleteKeys;                                        // 0x02C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UUCWListView*                           Slots_lv;                                          // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 SShot_img;                                         // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       ShowAsk_anim;                                      // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       ShowSaved_anim;                                    // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       ShowAskDelete_anim;                                // 0x02F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       ShowDeleted_anim;                                  // 0x02F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_300[0x10];                                     // 0x0300(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSlotSelected;                                    // 0x0310(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_320[0x10];                                     // 0x0320(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnBack;                                            // 0x0330(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_340[0x38];                                     // 0x0340(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AskDelete(const struct FSaveSlotInfo& SlotInfo);
	bool AskOverride(const struct FSaveSlotInfo& SlotInfo);
	void Cancel();
	void Delete();
	void OnBackEvent__DelegateSignature();
	void OnClear();
	void OnFocus();
	void OnGameDeleted();
	void OnGameSaved();
	void OnShow();
	void Override();
	void SaveSlotEvent__DelegateSignature(const struct FSaveSlotInfo& SaveSlot);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SaveSlotsListWidget">();
	}
	static class USaveSlotsListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USaveSlotsListWidget>();
	}
};
static_assert(alignof(USaveSlotsListWidget) == 0x000008, "Wrong alignment on USaveSlotsListWidget");
static_assert(sizeof(USaveSlotsListWidget) == 0x000378, "Wrong size on USaveSlotsListWidget");
static_assert(offsetof(USaveSlotsListWidget, bSaveMode) == 0x0002A0, "Member 'USaveSlotsListWidget::bSaveMode' has a wrong offset!");
static_assert(offsetof(USaveSlotsListWidget, bSaveModeNoAuto) == 0x0002A1, "Member 'USaveSlotsListWidget::bSaveModeNoAuto' has a wrong offset!");
static_assert(offsetof(USaveSlotsListWidget, bCustomSaveMethod) == 0x0002A2, "Member 'USaveSlotsListWidget::bCustomSaveMethod' has a wrong offset!");
static_assert(offsetof(USaveSlotsListWidget, bAutoIsFocusable) == 0x0002A3, "Member 'USaveSlotsListWidget::bAutoIsFocusable' has a wrong offset!");
static_assert(offsetof(USaveSlotsListWidget, bSortByDate) == 0x0002A4, "Member 'USaveSlotsListWidget::bSortByDate' has a wrong offset!");
static_assert(offsetof(USaveSlotsListWidget, BackKeys) == 0x0002A8, "Member 'USaveSlotsListWidget::BackKeys' has a wrong offset!");
static_assert(offsetof(USaveSlotsListWidget, bAllowDelete) == 0x0002B8, "Member 'USaveSlotsListWidget::bAllowDelete' has a wrong offset!");
static_assert(offsetof(USaveSlotsListWidget, DeleteKeys) == 0x0002C0, "Member 'USaveSlotsListWidget::DeleteKeys' has a wrong offset!");
static_assert(offsetof(USaveSlotsListWidget, Slots_lv) == 0x0002D0, "Member 'USaveSlotsListWidget::Slots_lv' has a wrong offset!");
static_assert(offsetof(USaveSlotsListWidget, SShot_img) == 0x0002D8, "Member 'USaveSlotsListWidget::SShot_img' has a wrong offset!");
static_assert(offsetof(USaveSlotsListWidget, ShowAsk_anim) == 0x0002E0, "Member 'USaveSlotsListWidget::ShowAsk_anim' has a wrong offset!");
static_assert(offsetof(USaveSlotsListWidget, ShowSaved_anim) == 0x0002E8, "Member 'USaveSlotsListWidget::ShowSaved_anim' has a wrong offset!");
static_assert(offsetof(USaveSlotsListWidget, ShowAskDelete_anim) == 0x0002F0, "Member 'USaveSlotsListWidget::ShowAskDelete_anim' has a wrong offset!");
static_assert(offsetof(USaveSlotsListWidget, ShowDeleted_anim) == 0x0002F8, "Member 'USaveSlotsListWidget::ShowDeleted_anim' has a wrong offset!");
static_assert(offsetof(USaveSlotsListWidget, OnSlotSelected) == 0x000310, "Member 'USaveSlotsListWidget::OnSlotSelected' has a wrong offset!");
static_assert(offsetof(USaveSlotsListWidget, OnBack) == 0x000330, "Member 'USaveSlotsListWidget::OnBack' has a wrong offset!");

// Class UCSW.SaveSlotListEntryWidget
// 0x0010 (0x0290 - 0x0280)
class USaveSlotListEntryWidget : public UUCWListEntryWidget
{
public:
	uint8                                         Pad_280[0x10];                                     // 0x0280(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRefresh();

	struct FSaveSlotInfo GetSlotInfo() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SaveSlotListEntryWidget">();
	}
	static class USaveSlotListEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USaveSlotListEntryWidget>();
	}
};
static_assert(alignof(USaveSlotListEntryWidget) == 0x000008, "Wrong alignment on USaveSlotListEntryWidget");
static_assert(sizeof(USaveSlotListEntryWidget) == 0x000290, "Wrong size on USaveSlotListEntryWidget");

// Class UCSW.SaveSlotWidget
// 0x00F0 (0x0368 - 0x0278)
class USaveSlotWidget final : public UUserWidget
{
public:
	struct FSaveSlotInfo                          SlotInfo;                                          // 0x0278(0x0038)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UBButton*                               Slot_but;                                          // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnClicked;                                         // 0x02B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C8[0x10];                                     // 0x02C8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnFocused;                                         // 0x02D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E8[0x10];                                     // 0x02E8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnUnfocused;                                       // 0x02F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_308[0x10];                                     // 0x0308(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnHovered;                                         // 0x0318(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_328[0x10];                                     // 0x0328(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnUnhovered;                                       // 0x0338(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_348[0x20];                                     // 0x0348(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTextChanged(const class FText& Text);
	void SaveSlotEvent__DelegateSignature(const struct FSaveSlotInfo& Info);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SaveSlotWidget">();
	}
	static class USaveSlotWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USaveSlotWidget>();
	}
};
static_assert(alignof(USaveSlotWidget) == 0x000008, "Wrong alignment on USaveSlotWidget");
static_assert(sizeof(USaveSlotWidget) == 0x000368, "Wrong size on USaveSlotWidget");
static_assert(offsetof(USaveSlotWidget, SlotInfo) == 0x000278, "Member 'USaveSlotWidget::SlotInfo' has a wrong offset!");
static_assert(offsetof(USaveSlotWidget, Slot_but) == 0x0002B0, "Member 'USaveSlotWidget::Slot_but' has a wrong offset!");
static_assert(offsetof(USaveSlotWidget, OnClicked) == 0x0002B8, "Member 'USaveSlotWidget::OnClicked' has a wrong offset!");
static_assert(offsetof(USaveSlotWidget, OnFocused) == 0x0002D8, "Member 'USaveSlotWidget::OnFocused' has a wrong offset!");
static_assert(offsetof(USaveSlotWidget, OnUnfocused) == 0x0002F8, "Member 'USaveSlotWidget::OnUnfocused' has a wrong offset!");
static_assert(offsetof(USaveSlotWidget, OnHovered) == 0x000318, "Member 'USaveSlotWidget::OnHovered' has a wrong offset!");
static_assert(offsetof(USaveSlotWidget, OnUnhovered) == 0x000338, "Member 'USaveSlotWidget::OnUnhovered' has a wrong offset!");

// Class UCSW.SettingOptionsBoxBase
// 0x0030 (0x02A8 - 0x0278)
class USettingOptionsBoxBase : public UUserWidget
{
public:
	TSubclassOf<class USettingOptionSpinBoxWidget> SpinBoxWidgetClass;                                // 0x0278(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USettingOptionCheckboxWidget> CheckboxWidgetClass;                               // 0x0280(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USettingOptionSliderWidget> SliderWidgetClass;                                 // 0x0288(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USettingOptionVolumeWidget> VolumeWidgetClass;                                 // 0x0290(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideIfNoOptions;                                  // 0x0298(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPanelWidget*                           Options_panel;                                     // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UWidget* GetFirstChild() const;
	class UWidget* GetLastChild() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SettingOptionsBoxBase">();
	}
	static class USettingOptionsBoxBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<USettingOptionsBoxBase>();
	}
};
static_assert(alignof(USettingOptionsBoxBase) == 0x000008, "Wrong alignment on USettingOptionsBoxBase");
static_assert(sizeof(USettingOptionsBoxBase) == 0x0002A8, "Wrong size on USettingOptionsBoxBase");
static_assert(offsetof(USettingOptionsBoxBase, SpinBoxWidgetClass) == 0x000278, "Member 'USettingOptionsBoxBase::SpinBoxWidgetClass' has a wrong offset!");
static_assert(offsetof(USettingOptionsBoxBase, CheckboxWidgetClass) == 0x000280, "Member 'USettingOptionsBoxBase::CheckboxWidgetClass' has a wrong offset!");
static_assert(offsetof(USettingOptionsBoxBase, SliderWidgetClass) == 0x000288, "Member 'USettingOptionsBoxBase::SliderWidgetClass' has a wrong offset!");
static_assert(offsetof(USettingOptionsBoxBase, VolumeWidgetClass) == 0x000290, "Member 'USettingOptionsBoxBase::VolumeWidgetClass' has a wrong offset!");
static_assert(offsetof(USettingOptionsBoxBase, bHideIfNoOptions) == 0x000298, "Member 'USettingOptionsBoxBase::bHideIfNoOptions' has a wrong offset!");
static_assert(offsetof(USettingOptionsBoxBase, Options_panel) == 0x0002A0, "Member 'USettingOptionsBoxBase::Options_panel' has a wrong offset!");

// Class UCSW.SettingOptionsBox
// 0x0010 (0x02B8 - 0x02A8)
class USettingOptionsBox final : public USettingOptionsBoxBase
{
public:
	TArray<struct FSettingOptionHandle>           Options;                                           // 0x02A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SettingOptionsBox">();
	}
	static class USettingOptionsBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<USettingOptionsBox>();
	}
};
static_assert(alignof(USettingOptionsBox) == 0x000008, "Wrong alignment on USettingOptionsBox");
static_assert(sizeof(USettingOptionsBox) == 0x0002B8, "Wrong size on USettingOptionsBox");
static_assert(offsetof(USettingOptionsBox, Options) == 0x0002A8, "Member 'USettingOptionsBox::Options' has a wrong offset!");

// Class UCSW.GfxSettingsBox
// 0x0010 (0x02B8 - 0x02A8)
class UGfxSettingsBox final : public USettingOptionsBoxBase
{
public:
	TArray<struct FGfxOptionHandle>               Options;                                           // 0x02A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GfxSettingsBox">();
	}
	static class UGfxSettingsBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGfxSettingsBox>();
	}
};
static_assert(alignof(UGfxSettingsBox) == 0x000008, "Wrong alignment on UGfxSettingsBox");
static_assert(sizeof(UGfxSettingsBox) == 0x0002B8, "Wrong size on UGfxSettingsBox");
static_assert(offsetof(UGfxSettingsBox, Options) == 0x0002A8, "Member 'UGfxSettingsBox::Options' has a wrong offset!");

// Class UCSW.SettingOptionsConfig
// 0x0128 (0x0158 - 0x0030)
class USettingOptionsConfig final : public UDataAsset
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSettingOption>                 Options;                                           // 0x0038(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSettingOption>                 GfxOptions;                                        // 0x0048(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FSliderParams>       SliderParams;                                      // 0x0058(0x0050)(Edit, EditFixedSize, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStringTable>            StringTable;                                       // 0x00A8(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USettingOptionsVisualizations> Visualizations;                                    // 0x00D8(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      DefaultValues;                                     // 0x0108(0x0050)(Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SettingOptionsConfig">();
	}
	static class USettingOptionsConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<USettingOptionsConfig>();
	}
};
static_assert(alignof(USettingOptionsConfig) == 0x000008, "Wrong alignment on USettingOptionsConfig");
static_assert(sizeof(USettingOptionsConfig) == 0x000158, "Wrong size on USettingOptionsConfig");
static_assert(offsetof(USettingOptionsConfig, Options) == 0x000038, "Member 'USettingOptionsConfig::Options' has a wrong offset!");
static_assert(offsetof(USettingOptionsConfig, GfxOptions) == 0x000048, "Member 'USettingOptionsConfig::GfxOptions' has a wrong offset!");
static_assert(offsetof(USettingOptionsConfig, SliderParams) == 0x000058, "Member 'USettingOptionsConfig::SliderParams' has a wrong offset!");
static_assert(offsetof(USettingOptionsConfig, StringTable) == 0x0000A8, "Member 'USettingOptionsConfig::StringTable' has a wrong offset!");
static_assert(offsetof(USettingOptionsConfig, Visualizations) == 0x0000D8, "Member 'USettingOptionsConfig::Visualizations' has a wrong offset!");
static_assert(offsetof(USettingOptionsConfig, DefaultValues) == 0x000108, "Member 'USettingOptionsConfig::DefaultValues' has a wrong offset!");

// Class UCSW.SettingOptionsVisualizations
// 0x0010 (0x0040 - 0x0030)
class USettingOptionsVisualizations final : public UDataAsset
{
public:
	TArray<struct FSettingOptionVisualization>    Options;                                           // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SettingOptionsVisualizations">();
	}
	static class USettingOptionsVisualizations* GetDefaultObj()
	{
		return GetDefaultObjImpl<USettingOptionsVisualizations>();
	}
};
static_assert(alignof(USettingOptionsVisualizations) == 0x000008, "Wrong alignment on USettingOptionsVisualizations");
static_assert(sizeof(USettingOptionsVisualizations) == 0x000040, "Wrong size on USettingOptionsVisualizations");
static_assert(offsetof(USettingOptionsVisualizations, Options) == 0x000030, "Member 'USettingOptionsVisualizations::Options' has a wrong offset!");

// Class UCSW.SettingOptionWidget
// 0x0098 (0x0310 - 0x0278)
class USettingOptionWidget : public UUserWidget
{
public:
	class UBButton*                               Inactive_but;                                      // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FNamedHandle                           OptionHandle;                                      // 0x0280(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_288[0x88];                                     // 0x0288(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnLabelTextChanged(const class FText& Text);

	bool IsChanged() const;
	void OnActivated(bool IsActive) const;
	void OnValueChanged(int32 Value, bool WasChanged) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SettingOptionWidget">();
	}
	static class USettingOptionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USettingOptionWidget>();
	}
};
static_assert(alignof(USettingOptionWidget) == 0x000008, "Wrong alignment on USettingOptionWidget");
static_assert(sizeof(USettingOptionWidget) == 0x000310, "Wrong size on USettingOptionWidget");
static_assert(offsetof(USettingOptionWidget, Inactive_but) == 0x000278, "Member 'USettingOptionWidget::Inactive_but' has a wrong offset!");
static_assert(offsetof(USettingOptionWidget, OptionHandle) == 0x000280, "Member 'USettingOptionWidget::OptionHandle' has a wrong offset!");

// Class UCSW.SettingOptionSpinBoxWidget
// 0x0008 (0x0318 - 0x0310)
class USettingOptionSpinBoxWidget : public USettingOptionWidget
{
public:
	class UBSpinBox*                              Value_wdg;                                         // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SettingOptionSpinBoxWidget">();
	}
	static class USettingOptionSpinBoxWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USettingOptionSpinBoxWidget>();
	}
};
static_assert(alignof(USettingOptionSpinBoxWidget) == 0x000008, "Wrong alignment on USettingOptionSpinBoxWidget");
static_assert(sizeof(USettingOptionSpinBoxWidget) == 0x000318, "Wrong size on USettingOptionSpinBoxWidget");
static_assert(offsetof(USettingOptionSpinBoxWidget, Value_wdg) == 0x000310, "Member 'USettingOptionSpinBoxWidget::Value_wdg' has a wrong offset!");

// Class UCSW.SettingOptionCheckboxWidget
// 0x0040 (0x0350 - 0x0310)
class USettingOptionCheckboxWidget final : public USettingOptionWidget
{
public:
	class UBCheckBox*                             Value_wdg;                                         // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_318[0x38];                                     // 0x0318(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	const class FText GetValueText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SettingOptionCheckboxWidget">();
	}
	static class USettingOptionCheckboxWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USettingOptionCheckboxWidget>();
	}
};
static_assert(alignof(USettingOptionCheckboxWidget) == 0x000008, "Wrong alignment on USettingOptionCheckboxWidget");
static_assert(sizeof(USettingOptionCheckboxWidget) == 0x000350, "Wrong size on USettingOptionCheckboxWidget");
static_assert(offsetof(USettingOptionCheckboxWidget, Value_wdg) == 0x000310, "Member 'USettingOptionCheckboxWidget::Value_wdg' has a wrong offset!");

// Class UCSW.SettingOptionSliderWidget
// 0x0008 (0x0318 - 0x0310)
class USettingOptionSliderWidget : public USettingOptionWidget
{
public:
	class UBSlider*                               Value_wdg;                                         // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnFValueChanged(float Value, bool WasChanged) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SettingOptionSliderWidget">();
	}
	static class USettingOptionSliderWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USettingOptionSliderWidget>();
	}
};
static_assert(alignof(USettingOptionSliderWidget) == 0x000008, "Wrong alignment on USettingOptionSliderWidget");
static_assert(sizeof(USettingOptionSliderWidget) == 0x000318, "Wrong size on USettingOptionSliderWidget");
static_assert(offsetof(USettingOptionSliderWidget, Value_wdg) == 0x000310, "Member 'USettingOptionSliderWidget::Value_wdg' has a wrong offset!");

// Class UCSW.SettingOptionVolumeWidget
// 0x0018 (0x0328 - 0x0310)
class USettingOptionVolumeWidget final : public USettingOptionWidget
{
public:
	class UBVolumeControl*                        Value_wdg;                                         // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_318[0x10];                                     // 0x0318(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SettingOptionVolumeWidget">();
	}
	static class USettingOptionVolumeWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USettingOptionVolumeWidget>();
	}
};
static_assert(alignof(USettingOptionVolumeWidget) == 0x000008, "Wrong alignment on USettingOptionVolumeWidget");
static_assert(sizeof(USettingOptionVolumeWidget) == 0x000328, "Wrong size on USettingOptionVolumeWidget");
static_assert(offsetof(USettingOptionVolumeWidget, Value_wdg) == 0x000310, "Member 'USettingOptionVolumeWidget::Value_wdg' has a wrong offset!");

// Class UCSW.SettingsDialogPanel
// 0x00A8 (0x0348 - 0x02A0)
class USettingsDialogPanel final : public UBUserWidget
{
public:
	bool                                          bManageVisibilityOnShowAndHide;                    // 0x02A0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             BP_OnConfirmationResponseYes;                      // 0x02A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B8[0x10];                                     // 0x02B8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             BP_OnConfirmationResponseNo;                       // 0x02C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D8[0x10];                                     // 0x02D8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             BP_OnConfirmationResponseCancel;                   // 0x02E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F8[0x10];                                     // 0x02F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             BP_OnCountdownResponseConfirm;                     // 0x0308(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_318[0x10];                                     // 0x0318(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             BP_OnCountdownResponseCancel;                      // 0x0328(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_338[0x10];                                     // 0x0338(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ConfirmationResponseCancel();
	void ConfirmationResponseNo();
	void ConfirmationResponseYes();
	void CountdownResponseCancel();
	void CountdownResponseConfirm();
	void OnShowConfirmation();
	void OnShowCountdown();
	void ShowConfirmation();
	void ShowCountdown();

	bool IsActive() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SettingsDialogPanel">();
	}
	static class USettingsDialogPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<USettingsDialogPanel>();
	}
};
static_assert(alignof(USettingsDialogPanel) == 0x000008, "Wrong alignment on USettingsDialogPanel");
static_assert(sizeof(USettingsDialogPanel) == 0x000348, "Wrong size on USettingsDialogPanel");
static_assert(offsetof(USettingsDialogPanel, bManageVisibilityOnShowAndHide) == 0x0002A0, "Member 'USettingsDialogPanel::bManageVisibilityOnShowAndHide' has a wrong offset!");
static_assert(offsetof(USettingsDialogPanel, BP_OnConfirmationResponseYes) == 0x0002A8, "Member 'USettingsDialogPanel::BP_OnConfirmationResponseYes' has a wrong offset!");
static_assert(offsetof(USettingsDialogPanel, BP_OnConfirmationResponseNo) == 0x0002C8, "Member 'USettingsDialogPanel::BP_OnConfirmationResponseNo' has a wrong offset!");
static_assert(offsetof(USettingsDialogPanel, BP_OnConfirmationResponseCancel) == 0x0002E8, "Member 'USettingsDialogPanel::BP_OnConfirmationResponseCancel' has a wrong offset!");
static_assert(offsetof(USettingsDialogPanel, BP_OnCountdownResponseConfirm) == 0x000308, "Member 'USettingsDialogPanel::BP_OnCountdownResponseConfirm' has a wrong offset!");
static_assert(offsetof(USettingsDialogPanel, BP_OnCountdownResponseCancel) == 0x000328, "Member 'USettingsDialogPanel::BP_OnCountdownResponseCancel' has a wrong offset!");

// Class UCSW.SettingsPanelWidget
// 0x0080 (0x04C0 - 0x0440)
class USettingsPanelWidget : public UBaseSettingsPanelWidget
{
public:
	FMulticastInlineDelegateProperty_             BP_OnShowExtPanel;                                 // 0x0440(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_450[0x70];                                     // 0x0450(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnShowColorVisionDeficiencyVisualization(bool Show_0);
	void OnShowControlTipsVisualization(bool Show_0);
	void OnShowHDRVisualization(bool Show_0);
	void OnShowTextVisualization(bool Show_0);
	void OnUpdateColorVisionDeficiencyVisualization();
	void OnUpdateControlTipsVisualization();
	void OnUpdateHDRVisualization();
	void OnUpdateTextVisualization();
	void ShowExtPanel(class FName PanelId);
	void ShowExtPanelDynamicDelegate__DelegateSignature(class FName PanelId);

	void BP_OnHDRSwitched(bool IsOn) const;
	struct FColorVisionDeficiencyData GetColorVisionDeficiencyData() const;
	struct FControlTipsData GetControlTipsData() const;
	struct FHDRData GetHDRData() const;
	float GetNeutralGamma() const;
	struct FSubtitleData GetSubtitleData() const;
	void OnQualitySwitched(bool IsOn) const;
	void OnShowGammaVisualization(bool Show_0) const;
	void OnUpdateGammaVisualization(float Gamma) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SettingsPanelWidget">();
	}
	static class USettingsPanelWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USettingsPanelWidget>();
	}
};
static_assert(alignof(USettingsPanelWidget) == 0x000008, "Wrong alignment on USettingsPanelWidget");
static_assert(sizeof(USettingsPanelWidget) == 0x0004C0, "Wrong size on USettingsPanelWidget");
static_assert(offsetof(USettingsPanelWidget, BP_OnShowExtPanel) == 0x000440, "Member 'USettingsPanelWidget::BP_OnShowExtPanel' has a wrong offset!");

// Class UCSW.SettingsTabButtonWidget
// 0x0000 (0x02C8 - 0x02C8)
class USettingsTabButtonWidget final : public UUCWTabButton
{
public:
	void OnPanelStateChanged(bool WasChanged);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SettingsTabButtonWidget">();
	}
	static class USettingsTabButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USettingsTabButtonWidget>();
	}
};
static_assert(alignof(USettingsTabButtonWidget) == 0x000008, "Wrong alignment on USettingsTabButtonWidget");
static_assert(sizeof(USettingsTabButtonWidget) == 0x0002C8, "Wrong size on USettingsTabButtonWidget");

// Class UCSW.BaseSettingsWidget
// 0x00F0 (0x0390 - 0x02A0)
class UBaseSettingsWidget : public UBUserWidget
{
public:
	class FText                                   AdvQualityCustomText;                              // 0x02A0(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class UUCWTabBar*                             Main_tbar;                                         // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        Main_switcher;                                     // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       FadeIn_anim;                                       // 0x02C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       FadeOut_anim;                                      // 0x02D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bApplyButtonUsed : 1;                              // 0x02D8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bTreatChangeTabAsBack : 1;                         // 0x02D8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bSilentPositiveConfirmation : 1;                   // 0x02D8(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_2D9[0x3];                                      // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeOutSpeed;                                      // 0x02DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          BackSound;                                         // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          ResetSound;                                        // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnBack;                                            // 0x02F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_300[0x90];                                     // 0x0300(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Back();
	void ConfirmationResponseCancel();
	void ConfirmationResponseNo();
	void ConfirmationResponseYes();
	void CountdownResponseCancel();
	void CountdownResponseConfirm();
	void OnBackEvent();
	void OnBackEvent__DelegateSignature();
	void OnFadedInAnim();
	void OnFadedOutAnim();
	void OnReset();
	void OnRevert();
	void OnShowConfirmation();
	void OnShowCountdown();
	void OnShowEvent();
	void Reset();
	void Revert();
	void Show();

	void OnSave() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BaseSettingsWidget">();
	}
	static class UBaseSettingsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBaseSettingsWidget>();
	}
};
static_assert(alignof(UBaseSettingsWidget) == 0x000008, "Wrong alignment on UBaseSettingsWidget");
static_assert(sizeof(UBaseSettingsWidget) == 0x000390, "Wrong size on UBaseSettingsWidget");
static_assert(offsetof(UBaseSettingsWidget, AdvQualityCustomText) == 0x0002A0, "Member 'UBaseSettingsWidget::AdvQualityCustomText' has a wrong offset!");
static_assert(offsetof(UBaseSettingsWidget, Main_tbar) == 0x0002B8, "Member 'UBaseSettingsWidget::Main_tbar' has a wrong offset!");
static_assert(offsetof(UBaseSettingsWidget, Main_switcher) == 0x0002C0, "Member 'UBaseSettingsWidget::Main_switcher' has a wrong offset!");
static_assert(offsetof(UBaseSettingsWidget, FadeIn_anim) == 0x0002C8, "Member 'UBaseSettingsWidget::FadeIn_anim' has a wrong offset!");
static_assert(offsetof(UBaseSettingsWidget, FadeOut_anim) == 0x0002D0, "Member 'UBaseSettingsWidget::FadeOut_anim' has a wrong offset!");
static_assert(offsetof(UBaseSettingsWidget, FadeOutSpeed) == 0x0002DC, "Member 'UBaseSettingsWidget::FadeOutSpeed' has a wrong offset!");
static_assert(offsetof(UBaseSettingsWidget, BackSound) == 0x0002E0, "Member 'UBaseSettingsWidget::BackSound' has a wrong offset!");
static_assert(offsetof(UBaseSettingsWidget, ResetSound) == 0x0002E8, "Member 'UBaseSettingsWidget::ResetSound' has a wrong offset!");
static_assert(offsetof(UBaseSettingsWidget, OnBack) == 0x0002F0, "Member 'UBaseSettingsWidget::OnBack' has a wrong offset!");

// Class UCSW.SettingsWidget
// 0x0080 (0x0410 - 0x0390)
class USettingsWidget : public UBaseSettingsWidget
{
public:
	TArray<struct FKey>                           BackKeys;                                          // 0x0390(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FKey>                           ResetKeys;                                         // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FKey>                           PrevPanelKeys;                                     // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	TArray<struct FKey>                           NextPanelKeys;                                     // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	class UBButton*                               Back_but;                                          // 0x03D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBButton*                               Reset_but;                                         // 0x03D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        Primary_switcher;                                  // 0x03E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                Main_panel;                                        // 0x03E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USettingsDialogPanel*                   DialogPanel;                                       // 0x03F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             BP_OnShowBackground;                               // 0x03F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_408[0x8];                                      // 0x0408(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BackToMainPanel();
	void OnActiveWidgetChanged(class UWidget* ActiveWidget, int32 ActiveWidgetIndex);
	void OnExtPanel(class FName PanelId);
	void OnShowBackground(bool Show_0);
	void OnShowExtraPanel(class UExtraSettingsPanelWidget* Panel);
	void ShowBackgoundDelegate__DelegateSignature(bool Show_0);
	void ShowExtraPanel(class UWidget* Panel);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SettingsWidget">();
	}
	static class USettingsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USettingsWidget>();
	}
};
static_assert(alignof(USettingsWidget) == 0x000008, "Wrong alignment on USettingsWidget");
static_assert(sizeof(USettingsWidget) == 0x000410, "Wrong size on USettingsWidget");
static_assert(offsetof(USettingsWidget, BackKeys) == 0x000390, "Member 'USettingsWidget::BackKeys' has a wrong offset!");
static_assert(offsetof(USettingsWidget, ResetKeys) == 0x0003A0, "Member 'USettingsWidget::ResetKeys' has a wrong offset!");
static_assert(offsetof(USettingsWidget, PrevPanelKeys) == 0x0003B0, "Member 'USettingsWidget::PrevPanelKeys' has a wrong offset!");
static_assert(offsetof(USettingsWidget, NextPanelKeys) == 0x0003C0, "Member 'USettingsWidget::NextPanelKeys' has a wrong offset!");
static_assert(offsetof(USettingsWidget, Back_but) == 0x0003D0, "Member 'USettingsWidget::Back_but' has a wrong offset!");
static_assert(offsetof(USettingsWidget, Reset_but) == 0x0003D8, "Member 'USettingsWidget::Reset_but' has a wrong offset!");
static_assert(offsetof(USettingsWidget, Primary_switcher) == 0x0003E0, "Member 'USettingsWidget::Primary_switcher' has a wrong offset!");
static_assert(offsetof(USettingsWidget, Main_panel) == 0x0003E8, "Member 'USettingsWidget::Main_panel' has a wrong offset!");
static_assert(offsetof(USettingsWidget, DialogPanel) == 0x0003F0, "Member 'USettingsWidget::DialogPanel' has a wrong offset!");
static_assert(offsetof(USettingsWidget, BP_OnShowBackground) == 0x0003F8, "Member 'USettingsWidget::BP_OnShowBackground' has a wrong offset!");

// Class UCSW.UCSWStartGameSettingsWidget
// 0x0110 (0x03C8 - 0x02B8)
class UUCSWStartGameSettingsWidget final : public UStartGameSettingsWidget
{
public:
	TArray<struct FKey>                           ContinueKeys;                                      // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FKey>                           BackKeys;                                          // 0x02C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FKey>                           ResetKeys;                                         // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         bApplyButtonUsed : 1;                              // 0x02E8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          ContinueSound;                                     // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          BackSound;                                         // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          ResetSound;                                        // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        Main_switcher;                                     // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USettingsDialogPanel*                   DialogPanel;                                       // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       FadeIn_anim;                                       // 0x0318(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       FadeOut_anim;                                      // 0x0320(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             BP_OnShowBackground;                               // 0x0328(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_338[0x90];                                     // 0x0338(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnActiveWidgetChanged(class UWidget* Active_widget, int32 Active_widget_index);
	void OnExtPanel(class FName PanelId);
	void OnFadedInAnim();
	void OnFadedOutAnim();
	void OnReset();
	void OnRevert();
	void OnShowBackground(bool Show);
	void OnShowConfirmation();
	void OnShowCountdown();
	void OnShowExtraPanel(class UExtraSettingsPanelWidget* Panel);
	void ShowBackgoundDelegate__DelegateSignature(bool Show);
	void ShowExtraPanel(class UUCSWStartGameSettingsPanel* Panel);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCSWStartGameSettingsWidget">();
	}
	static class UUCSWStartGameSettingsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCSWStartGameSettingsWidget>();
	}
};
static_assert(alignof(UUCSWStartGameSettingsWidget) == 0x000008, "Wrong alignment on UUCSWStartGameSettingsWidget");
static_assert(sizeof(UUCSWStartGameSettingsWidget) == 0x0003C8, "Wrong size on UUCSWStartGameSettingsWidget");
static_assert(offsetof(UUCSWStartGameSettingsWidget, ContinueKeys) == 0x0002B8, "Member 'UUCSWStartGameSettingsWidget::ContinueKeys' has a wrong offset!");
static_assert(offsetof(UUCSWStartGameSettingsWidget, BackKeys) == 0x0002C8, "Member 'UUCSWStartGameSettingsWidget::BackKeys' has a wrong offset!");
static_assert(offsetof(UUCSWStartGameSettingsWidget, ResetKeys) == 0x0002D8, "Member 'UUCSWStartGameSettingsWidget::ResetKeys' has a wrong offset!");
static_assert(offsetof(UUCSWStartGameSettingsWidget, ContinueSound) == 0x0002F0, "Member 'UUCSWStartGameSettingsWidget::ContinueSound' has a wrong offset!");
static_assert(offsetof(UUCSWStartGameSettingsWidget, BackSound) == 0x0002F8, "Member 'UUCSWStartGameSettingsWidget::BackSound' has a wrong offset!");
static_assert(offsetof(UUCSWStartGameSettingsWidget, ResetSound) == 0x000300, "Member 'UUCSWStartGameSettingsWidget::ResetSound' has a wrong offset!");
static_assert(offsetof(UUCSWStartGameSettingsWidget, Main_switcher) == 0x000308, "Member 'UUCSWStartGameSettingsWidget::Main_switcher' has a wrong offset!");
static_assert(offsetof(UUCSWStartGameSettingsWidget, DialogPanel) == 0x000310, "Member 'UUCSWStartGameSettingsWidget::DialogPanel' has a wrong offset!");
static_assert(offsetof(UUCSWStartGameSettingsWidget, FadeIn_anim) == 0x000318, "Member 'UUCSWStartGameSettingsWidget::FadeIn_anim' has a wrong offset!");
static_assert(offsetof(UUCSWStartGameSettingsWidget, FadeOut_anim) == 0x000320, "Member 'UUCSWStartGameSettingsWidget::FadeOut_anim' has a wrong offset!");
static_assert(offsetof(UUCSWStartGameSettingsWidget, BP_OnShowBackground) == 0x000328, "Member 'UUCSWStartGameSettingsWidget::BP_OnShowBackground' has a wrong offset!");

// Class UCSW.UCSWStartGameSettingsPanel
// 0x0038 (0x0370 - 0x0338)
class UUCSWStartGameSettingsPanel : public UExtraSettingsPanelWidget
{
public:
	bool                                          bIsExtraPanel;                                     // 0x0338(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDefaultFocusContinue;                             // 0x0339(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_33A[0x6];                                      // 0x033A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBButton*                               Continue_but;                                      // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             K2_OnContinue;                                     // 0x0348(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_358[0x18];                                     // 0x0358(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnContinue();
	void Continue();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCSWStartGameSettingsPanel">();
	}
	static class UUCSWStartGameSettingsPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCSWStartGameSettingsPanel>();
	}
};
static_assert(alignof(UUCSWStartGameSettingsPanel) == 0x000008, "Wrong alignment on UUCSWStartGameSettingsPanel");
static_assert(sizeof(UUCSWStartGameSettingsPanel) == 0x000370, "Wrong size on UUCSWStartGameSettingsPanel");
static_assert(offsetof(UUCSWStartGameSettingsPanel, bIsExtraPanel) == 0x000338, "Member 'UUCSWStartGameSettingsPanel::bIsExtraPanel' has a wrong offset!");
static_assert(offsetof(UUCSWStartGameSettingsPanel, bDefaultFocusContinue) == 0x000339, "Member 'UUCSWStartGameSettingsPanel::bDefaultFocusContinue' has a wrong offset!");
static_assert(offsetof(UUCSWStartGameSettingsPanel, Continue_but) == 0x000340, "Member 'UUCSWStartGameSettingsPanel::Continue_but' has a wrong offset!");
static_assert(offsetof(UUCSWStartGameSettingsPanel, K2_OnContinue) == 0x000348, "Member 'UUCSWStartGameSettingsPanel::K2_OnContinue' has a wrong offset!");

// Class UCSW.UCSWInfoStartGameSettingsPanel
// 0x0000 (0x0370 - 0x0370)
class UUCSWInfoStartGameSettingsPanel final : public UUCSWStartGameSettingsPanel
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCSWInfoStartGameSettingsPanel">();
	}
	static class UUCSWInfoStartGameSettingsPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCSWInfoStartGameSettingsPanel>();
	}
};
static_assert(alignof(UUCSWInfoStartGameSettingsPanel) == 0x000008, "Wrong alignment on UUCSWInfoStartGameSettingsPanel");
static_assert(sizeof(UUCSWInfoStartGameSettingsPanel) == 0x000370, "Wrong size on UUCSWInfoStartGameSettingsPanel");

// Class UCSW.TipTextBlock
// 0x0040 (0x08E0 - 0x08A0)
class UTipTextBlock final : public UStyledRichTextBlock
{
public:
	class FText                                   MKText;                                            // 0x08A0(0x0018)(Edit, NativeAccessSpecifierPrivate)
	class FText                                   PadText;                                           // 0x08B8(0x0018)(Edit, NativeAccessSpecifierPrivate)
	bool                                          bAppendTextProperty;                               // 0x08D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8D1[0xF];                                      // 0x08D1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Refresh();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TipTextBlock">();
	}
	static class UTipTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTipTextBlock>();
	}
};
static_assert(alignof(UTipTextBlock) == 0x000010, "Wrong alignment on UTipTextBlock");
static_assert(sizeof(UTipTextBlock) == 0x0008E0, "Wrong size on UTipTextBlock");
static_assert(offsetof(UTipTextBlock, MKText) == 0x0008A0, "Member 'UTipTextBlock::MKText' has a wrong offset!");
static_assert(offsetof(UTipTextBlock, PadText) == 0x0008B8, "Member 'UTipTextBlock::PadText' has a wrong offset!");
static_assert(offsetof(UTipTextBlock, bAppendTextProperty) == 0x0008D0, "Member 'UTipTextBlock::bAppendTextProperty' has a wrong offset!");

// Class UCSW.ActionTipTextBlock
// 0x0040 (0x08E0 - 0x08A0)
class UActionTipTextBlock final : public UStyledRichTextBlock
{
public:
	struct FUE4InputHandle                        Action;                                            // 0x08A0(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8AC[0x4];                                      // 0x08AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OrginalText;                                       // 0x08B0(0x0018)(Transient, NativeAccessSpecifierPrivate)
	bool                                          bTextIsPattern;                                    // 0x08C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8C9[0x7];                                      // 0x08C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 KeyTagText;                                        // 0x08D0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void Refresh();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActionTipTextBlock">();
	}
	static class UActionTipTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionTipTextBlock>();
	}
};
static_assert(alignof(UActionTipTextBlock) == 0x000010, "Wrong alignment on UActionTipTextBlock");
static_assert(sizeof(UActionTipTextBlock) == 0x0008E0, "Wrong size on UActionTipTextBlock");
static_assert(offsetof(UActionTipTextBlock, Action) == 0x0008A0, "Member 'UActionTipTextBlock::Action' has a wrong offset!");
static_assert(offsetof(UActionTipTextBlock, OrginalText) == 0x0008B0, "Member 'UActionTipTextBlock::OrginalText' has a wrong offset!");
static_assert(offsetof(UActionTipTextBlock, bTextIsPattern) == 0x0008C8, "Member 'UActionTipTextBlock::bTextIsPattern' has a wrong offset!");
static_assert(offsetof(UActionTipTextBlock, KeyTagText) == 0x0008D0, "Member 'UActionTipTextBlock::KeyTagText' has a wrong offset!");

// Class UCSW.UCSWGameSettings
// 0x0050 (0x0088 - 0x0038)
class UUCSWGameSettings final : public UDeveloperSettings
{
public:
	TSoftObjectPtr<class USettingOptionsConfig>   SettingOptionsConfig;                              // 0x0038(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   MonitorOptionText;                                 // 0x0068(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic)
	bool                                          bChangeLanguageAtOnce;                             // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCSWGameSettings">();
	}
	static class UUCSWGameSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCSWGameSettings>();
	}
};
static_assert(alignof(UUCSWGameSettings) == 0x000008, "Wrong alignment on UUCSWGameSettings");
static_assert(sizeof(UUCSWGameSettings) == 0x000088, "Wrong size on UUCSWGameSettings");
static_assert(offsetof(UUCSWGameSettings, SettingOptionsConfig) == 0x000038, "Member 'UUCSWGameSettings::SettingOptionsConfig' has a wrong offset!");
static_assert(offsetof(UUCSWGameSettings, MonitorOptionText) == 0x000068, "Member 'UUCSWGameSettings::MonitorOptionText' has a wrong offset!");
static_assert(offsetof(UUCSWGameSettings, bChangeLanguageAtOnce) == 0x000080, "Member 'UUCSWGameSettings::bChangeLanguageAtOnce' has a wrong offset!");

// Class UCSW.UCSWMainMenuWidget
// 0x0008 (0x0360 - 0x0358)
class UUCSWMainMenuWidget : public UMainMenuWidget
{
public:
	class USaveSlotsListWidget*                   SlotsList_wdg;                                     // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCSWMainMenuWidget">();
	}
	static class UUCSWMainMenuWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCSWMainMenuWidget>();
	}
};
static_assert(alignof(UUCSWMainMenuWidget) == 0x000008, "Wrong alignment on UUCSWMainMenuWidget");
static_assert(sizeof(UUCSWMainMenuWidget) == 0x000360, "Wrong size on UUCSWMainMenuWidget");
static_assert(offsetof(UUCSWMainMenuWidget, SlotsList_wdg) == 0x000358, "Member 'UUCSWMainMenuWidget::SlotsList_wdg' has a wrong offset!");

}

