#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AtmospheresCtrl

#include "Basic.hpp"

#include "SHProto_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass AtmospheresCtrl.AtmospheresCtrl_C
// 0x0060 (0x17E0 - 0x1780)
class AAtmospheresCtrl_C final : public ASHPostprocessingCtrl
{
public:
	class UAtmosphereVCloudsCtrl*                 AtmosphereVCloudsCtrl;                             // 0x1780(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVolumetricCloudComponent*              VolumetricCloud;                                   // 0x1788(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyAtmosphereComponent*                SkyAtmosphere;                                     // 0x1790(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UExponentialHeightFogComponent*         ExponentialHeightFogComponent;                     // 0x1798(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             DirectionalLightComponent;                         // 0x17A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SkySphereComponent;                                // 0x17A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        MainDirectionalArrow;                              // 0x17B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        AmbientDirectionalArrow;                           // 0x17B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             AmbientDirectionalLight;                           // 0x17C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     SkyLightComponent;                                 // 0x17C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x17D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AtmospheresCtrl_C">();
	}
	static class AAtmospheresCtrl_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAtmospheresCtrl_C>();
	}
};
static_assert(alignof(AAtmospheresCtrl_C) == 0x000010, "Wrong alignment on AAtmospheresCtrl_C");
static_assert(sizeof(AAtmospheresCtrl_C) == 0x0017E0, "Wrong size on AAtmospheresCtrl_C");
static_assert(offsetof(AAtmospheresCtrl_C, AtmosphereVCloudsCtrl) == 0x001780, "Member 'AAtmospheresCtrl_C::AtmosphereVCloudsCtrl' has a wrong offset!");
static_assert(offsetof(AAtmospheresCtrl_C, VolumetricCloud) == 0x001788, "Member 'AAtmospheresCtrl_C::VolumetricCloud' has a wrong offset!");
static_assert(offsetof(AAtmospheresCtrl_C, SkyAtmosphere) == 0x001790, "Member 'AAtmospheresCtrl_C::SkyAtmosphere' has a wrong offset!");
static_assert(offsetof(AAtmospheresCtrl_C, ExponentialHeightFogComponent) == 0x001798, "Member 'AAtmospheresCtrl_C::ExponentialHeightFogComponent' has a wrong offset!");
static_assert(offsetof(AAtmospheresCtrl_C, DirectionalLightComponent) == 0x0017A0, "Member 'AAtmospheresCtrl_C::DirectionalLightComponent' has a wrong offset!");
static_assert(offsetof(AAtmospheresCtrl_C, SkySphereComponent) == 0x0017A8, "Member 'AAtmospheresCtrl_C::SkySphereComponent' has a wrong offset!");
static_assert(offsetof(AAtmospheresCtrl_C, MainDirectionalArrow) == 0x0017B0, "Member 'AAtmospheresCtrl_C::MainDirectionalArrow' has a wrong offset!");
static_assert(offsetof(AAtmospheresCtrl_C, AmbientDirectionalArrow) == 0x0017B8, "Member 'AAtmospheresCtrl_C::AmbientDirectionalArrow' has a wrong offset!");
static_assert(offsetof(AAtmospheresCtrl_C, AmbientDirectionalLight) == 0x0017C0, "Member 'AAtmospheresCtrl_C::AmbientDirectionalLight' has a wrong offset!");
static_assert(offsetof(AAtmospheresCtrl_C, SkyLightComponent) == 0x0017C8, "Member 'AAtmospheresCtrl_C::SkyLightComponent' has a wrong offset!");
static_assert(offsetof(AAtmospheresCtrl_C, DefaultSceneRoot) == 0x0017D0, "Member 'AAtmospheresCtrl_C::DefaultSceneRoot' has a wrong offset!");

}

