#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Being

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "Dai_structs.hpp"
#include "Dai_classes.hpp"
#include "Being_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "PhysicsCore_structs.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class Being.BeingSteering
// 0x0100 (0x01A0 - 0x00A0)
class UBeingSteering final : public UActorComponent
{
public:
	bool                                          _EnableSliding;                                    // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _UseCapsuleComponent;                              // 0x00A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             _TestChannel;                                      // 0x00A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A3[0x1];                                       // 0x00A3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _ReduceRadius;                                     // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _StandYaw;                                         // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _DelayedStart;                                     // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _DelayedStop;                                      // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EBeingTribool>                         _DontStop;                                         // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         _ForceStop : 1;                                    // 0x00C8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBeingSteeringData                     _Data;                                             // 0x00D0(0x0080)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	class ACharacter*                             _Character;                                        // 0x0150(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCapsuleComponent*                      _SteeringCapsule;                                  // 0x0158(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _DetectStart;                                      // 0x0160(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _DetectStop;                                       // 0x0164(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _CurrentSpeed;                                     // 0x0168(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _ForcedSpeed;                                      // 0x016C(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _ForcedSpeedDeceleration;                          // 0x0170(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _InstantMove;                                      // 0x0174(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _ForceDirection;                                   // 0x0175(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_176[0x2];                                      // 0x0176(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _ForcedYaw;                                        // 0x0178(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _ForcedYawTolerance;                               // 0x017C(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _CheckMoveVelocity;                                // 0x0180(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                _MoveVelocity;                                     // 0x0188(0x0018)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ClearFlag_DontStop(uint8 Priority);
	void ClearForcedVelocity(bool Speed, bool Yaw);
	void ForceSpeed(float Speed, float Deceleration, bool InstantMove);
	void ForceYaw(float Yaw, float Tolerance);
	void SetFlag_DontStop(bool Flag, uint8 Priority);
	void SetFlag_ForceStop(bool Flag);
	void UpdateSteering(float DeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingSteering">();
	}
	static class UBeingSteering* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingSteering>();
	}
};
static_assert(alignof(UBeingSteering) == 0x000008, "Wrong alignment on UBeingSteering");
static_assert(sizeof(UBeingSteering) == 0x0001A0, "Wrong size on UBeingSteering");
static_assert(offsetof(UBeingSteering, _EnableSliding) == 0x0000A0, "Member 'UBeingSteering::_EnableSliding' has a wrong offset!");
static_assert(offsetof(UBeingSteering, _UseCapsuleComponent) == 0x0000A1, "Member 'UBeingSteering::_UseCapsuleComponent' has a wrong offset!");
static_assert(offsetof(UBeingSteering, _TestChannel) == 0x0000A2, "Member 'UBeingSteering::_TestChannel' has a wrong offset!");
static_assert(offsetof(UBeingSteering, _ReduceRadius) == 0x0000A4, "Member 'UBeingSteering::_ReduceRadius' has a wrong offset!");
static_assert(offsetof(UBeingSteering, _StandYaw) == 0x0000A8, "Member 'UBeingSteering::_StandYaw' has a wrong offset!");
static_assert(offsetof(UBeingSteering, _DelayedStart) == 0x0000AC, "Member 'UBeingSteering::_DelayedStart' has a wrong offset!");
static_assert(offsetof(UBeingSteering, _DelayedStop) == 0x0000B0, "Member 'UBeingSteering::_DelayedStop' has a wrong offset!");
static_assert(offsetof(UBeingSteering, _DontStop) == 0x0000B8, "Member 'UBeingSteering::_DontStop' has a wrong offset!");
static_assert(offsetof(UBeingSteering, _Data) == 0x0000D0, "Member 'UBeingSteering::_Data' has a wrong offset!");
static_assert(offsetof(UBeingSteering, _Character) == 0x000150, "Member 'UBeingSteering::_Character' has a wrong offset!");
static_assert(offsetof(UBeingSteering, _SteeringCapsule) == 0x000158, "Member 'UBeingSteering::_SteeringCapsule' has a wrong offset!");
static_assert(offsetof(UBeingSteering, _DetectStart) == 0x000160, "Member 'UBeingSteering::_DetectStart' has a wrong offset!");
static_assert(offsetof(UBeingSteering, _DetectStop) == 0x000164, "Member 'UBeingSteering::_DetectStop' has a wrong offset!");
static_assert(offsetof(UBeingSteering, _CurrentSpeed) == 0x000168, "Member 'UBeingSteering::_CurrentSpeed' has a wrong offset!");
static_assert(offsetof(UBeingSteering, _ForcedSpeed) == 0x00016C, "Member 'UBeingSteering::_ForcedSpeed' has a wrong offset!");
static_assert(offsetof(UBeingSteering, _ForcedSpeedDeceleration) == 0x000170, "Member 'UBeingSteering::_ForcedSpeedDeceleration' has a wrong offset!");
static_assert(offsetof(UBeingSteering, _InstantMove) == 0x000174, "Member 'UBeingSteering::_InstantMove' has a wrong offset!");
static_assert(offsetof(UBeingSteering, _ForceDirection) == 0x000175, "Member 'UBeingSteering::_ForceDirection' has a wrong offset!");
static_assert(offsetof(UBeingSteering, _ForcedYaw) == 0x000178, "Member 'UBeingSteering::_ForcedYaw' has a wrong offset!");
static_assert(offsetof(UBeingSteering, _ForcedYawTolerance) == 0x00017C, "Member 'UBeingSteering::_ForcedYawTolerance' has a wrong offset!");
static_assert(offsetof(UBeingSteering, _CheckMoveVelocity) == 0x000180, "Member 'UBeingSteering::_CheckMoveVelocity' has a wrong offset!");
static_assert(offsetof(UBeingSteering, _MoveVelocity) == 0x000188, "Member 'UBeingSteering::_MoveVelocity' has a wrong offset!");

// Class Being.AnimNotifyState_Blow
// 0x0018 (0x0048 - 0x0030)
class UAnimNotifyState_Blow final : public UAnimNotifyState
{
public:
	int32                                         _ImpactID;                                         // 0x0030(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           _ColliderTags;                                     // 0x0038(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_Blow">();
	}
	static class UAnimNotifyState_Blow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_Blow>();
	}
};
static_assert(alignof(UAnimNotifyState_Blow) == 0x000008, "Wrong alignment on UAnimNotifyState_Blow");
static_assert(sizeof(UAnimNotifyState_Blow) == 0x000048, "Wrong size on UAnimNotifyState_Blow");
static_assert(offsetof(UAnimNotifyState_Blow, _ImpactID) == 0x000030, "Member 'UAnimNotifyState_Blow::_ImpactID' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_Blow, _ColliderTags) == 0x000038, "Member 'UAnimNotifyState_Blow::_ColliderTags' has a wrong offset!");

// Class Being.BeingStat
// 0x0040 (0x00E0 - 0x00A0)
class UBeingStat : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _IsUpToDate;                                       // 0x00A8(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDaiFloatModifiers1                    _Mods;                                             // 0x00B0(0x0018)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FDaiFloatModifiers2                    _PersonalizedMods;                                 // 0x00C8(0x0018)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void ForceUpdate();
	void NeedsUpdate();
	void NeedsUpdateModifier(TSubclassOf<class UDaiFloatModifier> Modclass, class FName Name_0);
	void SetUpToDate();
	void Update();

	class UDaiFloatModifier* FindFloatModifier(TSubclassOf<class UDaiFloatModifier> Modclass, class FName Name_0) const;
	bool IsUpToDate() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingStat">();
	}
	static class UBeingStat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingStat>();
	}
};
static_assert(alignof(UBeingStat) == 0x000008, "Wrong alignment on UBeingStat");
static_assert(sizeof(UBeingStat) == 0x0000E0, "Wrong size on UBeingStat");
static_assert(offsetof(UBeingStat, _IsUpToDate) == 0x0000A8, "Member 'UBeingStat::_IsUpToDate' has a wrong offset!");
static_assert(offsetof(UBeingStat, _Mods) == 0x0000B0, "Member 'UBeingStat::_Mods' has a wrong offset!");
static_assert(offsetof(UBeingStat, _PersonalizedMods) == 0x0000C8, "Member 'UBeingStat::_PersonalizedMods' has a wrong offset!");

// Class Being.BeingVisibilityLevelStat
// 0x0018 (0x00F8 - 0x00E0)
class UBeingVisibilityLevelStat final : public UBeingStat
{
public:
	float                                         _VisibilityLevel;                                  // 0x00E0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                _VisibleParts;                                     // 0x00E8(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, AdvancedDisplay, NativeAccessSpecifierPublic)

public:
	void SetVisibilityLevel(float Value);

	float GetVisibilityLevel() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingVisibilityLevelStat">();
	}
	static class UBeingVisibilityLevelStat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingVisibilityLevelStat>();
	}
};
static_assert(alignof(UBeingVisibilityLevelStat) == 0x000008, "Wrong alignment on UBeingVisibilityLevelStat");
static_assert(sizeof(UBeingVisibilityLevelStat) == 0x0000F8, "Wrong size on UBeingVisibilityLevelStat");
static_assert(offsetof(UBeingVisibilityLevelStat, _VisibilityLevel) == 0x0000E0, "Member 'UBeingVisibilityLevelStat::_VisibilityLevel' has a wrong offset!");
static_assert(offsetof(UBeingVisibilityLevelStat, _VisibleParts) == 0x0000E8, "Member 'UBeingVisibilityLevelStat::_VisibleParts' has a wrong offset!");

// Class Being.AnimNotifyState_AttackStage
// 0x0008 (0x0038 - 0x0030)
class UAnimNotifyState_AttackStage final : public UAnimNotifyState
{
public:
	EBeingAttackStage                             _Stage;                                            // 0x0030(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_AttackStage">();
	}
	static class UAnimNotifyState_AttackStage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_AttackStage>();
	}
};
static_assert(alignof(UAnimNotifyState_AttackStage) == 0x000008, "Wrong alignment on UAnimNotifyState_AttackStage");
static_assert(sizeof(UAnimNotifyState_AttackStage) == 0x000038, "Wrong size on UAnimNotifyState_AttackStage");
static_assert(offsetof(UAnimNotifyState_AttackStage, _Stage) == 0x000030, "Member 'UAnimNotifyState_AttackStage::_Stage' has a wrong offset!");

// Class Being.BeingVisionLevelStat
// 0x0008 (0x00E8 - 0x00E0)
class UBeingVisionLevelStat : public UBeingStat
{
public:
	float                                         _VisionLevel;                                      // 0x00E0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetVisionLevel(float Value);

	float GetLevelOfVisionTheActor(class AActor* Actor) const;
	float GetVisionLevel() const;
	float GetVisionLevelTheActor(class AActor* Actor) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingVisionLevelStat">();
	}
	static class UBeingVisionLevelStat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingVisionLevelStat>();
	}
};
static_assert(alignof(UBeingVisionLevelStat) == 0x000008, "Wrong alignment on UBeingVisionLevelStat");
static_assert(sizeof(UBeingVisionLevelStat) == 0x0000E8, "Wrong size on UBeingVisionLevelStat");
static_assert(offsetof(UBeingVisionLevelStat, _VisionLevel) == 0x0000E0, "Member 'UBeingVisionLevelStat::_VisionLevel' has a wrong offset!");

// Class Being.AnimNotify_AttackHit
// 0x0008 (0x0040 - 0x0038)
class UAnimNotify_AttackHit final : public UAnimNotify
{
public:
	int32                                         _ImpactID;                                         // 0x0038(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _Damage;                                           // 0x003C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_AttackHit">();
	}
	static class UAnimNotify_AttackHit* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_AttackHit>();
	}
};
static_assert(alignof(UAnimNotify_AttackHit) == 0x000008, "Wrong alignment on UAnimNotify_AttackHit");
static_assert(sizeof(UAnimNotify_AttackHit) == 0x000040, "Wrong size on UAnimNotify_AttackHit");
static_assert(offsetof(UAnimNotify_AttackHit, _ImpactID) == 0x000038, "Member 'UAnimNotify_AttackHit::_ImpactID' has a wrong offset!");
static_assert(offsetof(UAnimNotify_AttackHit, _Damage) == 0x00003C, "Member 'UAnimNotify_AttackHit::_Damage' has a wrong offset!");

// Class Being.BeingVisionModStat
// 0x0018 (0x0100 - 0x00E8)
class UBeingVisionModStat final : public UBeingVisionLevelStat
{
public:
	int32                                         _ModLevel;                                         // 0x00E8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 _Modifiers;                                        // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	void SetModLevel(int32 Level);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingVisionModStat">();
	}
	static class UBeingVisionModStat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingVisionModStat>();
	}
};
static_assert(alignof(UBeingVisionModStat) == 0x000008, "Wrong alignment on UBeingVisionModStat");
static_assert(sizeof(UBeingVisionModStat) == 0x000100, "Wrong size on UBeingVisionModStat");
static_assert(offsetof(UBeingVisionModStat, _ModLevel) == 0x0000E8, "Member 'UBeingVisionModStat::_ModLevel' has a wrong offset!");
static_assert(offsetof(UBeingVisionModStat, _Modifiers) == 0x0000F0, "Member 'UBeingVisionModStat::_Modifiers' has a wrong offset!");

// Class Being.AnimNotify_Footstep
// 0x0010 (0x0048 - 0x0038)
class UAnimNotify_Footstep : public UAnimNotify
{
public:
	EFoot                                         _Foot;                                             // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ABeingFootstep>             _OverrideFootsteps;                                // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_Footstep">();
	}
	static class UAnimNotify_Footstep* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_Footstep>();
	}
};
static_assert(alignof(UAnimNotify_Footstep) == 0x000008, "Wrong alignment on UAnimNotify_Footstep");
static_assert(sizeof(UAnimNotify_Footstep) == 0x000048, "Wrong size on UAnimNotify_Footstep");
static_assert(offsetof(UAnimNotify_Footstep, _Foot) == 0x000038, "Member 'UAnimNotify_Footstep::_Foot' has a wrong offset!");
static_assert(offsetof(UAnimNotify_Footstep, _OverrideFootsteps) == 0x000040, "Member 'UAnimNotify_Footstep::_OverrideFootsteps' has a wrong offset!");

// Class Being.AnimNotify_LeftFootstep
// 0x0000 (0x0048 - 0x0048)
class UAnimNotify_LeftFootstep final : public UAnimNotify_Footstep
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_LeftFootstep">();
	}
	static class UAnimNotify_LeftFootstep* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_LeftFootstep>();
	}
};
static_assert(alignof(UAnimNotify_LeftFootstep) == 0x000008, "Wrong alignment on UAnimNotify_LeftFootstep");
static_assert(sizeof(UAnimNotify_LeftFootstep) == 0x000048, "Wrong size on UAnimNotify_LeftFootstep");

// Class Being.AnimNotify_RightFootstep
// 0x0000 (0x0048 - 0x0048)
class UAnimNotify_RightFootstep final : public UAnimNotify_Footstep
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_RightFootstep">();
	}
	static class UAnimNotify_RightFootstep* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_RightFootstep>();
	}
};
static_assert(alignof(UAnimNotify_RightFootstep) == 0x000008, "Wrong alignment on UAnimNotify_RightFootstep");
static_assert(sizeof(UAnimNotify_RightFootstep) == 0x000048, "Wrong size on UAnimNotify_RightFootstep");

// Class Being.BeingAction
// 0x0038 (0x00A0 - 0x0068)
class UBeingAction : public UGraphObject
{
public:
	class UBeingAction*                           ChildAction;                                       // 0x0068(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBeingActionsComponent*                 OwnerComponent;                                    // 0x0070(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UObject*                                Instigator;                                        // 0x0078(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_80[0x10];                                      // 0x0080(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             ActionStateChange;                                 // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UBeingAction* CreateActionInstance(class UObject* WorldContextObject, TSubclassOf<class UBeingAction> ActionClass);

	EPawnActionAbortState Abort(bool Force);
	void ActionFinished(class APawn* ControlledPawn, EPawnActionResult WithResult);
	void ActionInit(class APawn* ControlledPawn);
	void ActionStart(class APawn* ControlledPawn);
	void ActionTick(class APawn* ControlledPawn, float DeltaSeconds);
	void Finish(EPawnActionResult WithResult);

	bool IsActive() const;
	bool IsBeingAborted() const;
	bool IsFinished() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingAction">();
	}
	static class UBeingAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingAction>();
	}
};
static_assert(alignof(UBeingAction) == 0x000008, "Wrong alignment on UBeingAction");
static_assert(sizeof(UBeingAction) == 0x0000A0, "Wrong size on UBeingAction");
static_assert(offsetof(UBeingAction, ChildAction) == 0x000068, "Member 'UBeingAction::ChildAction' has a wrong offset!");
static_assert(offsetof(UBeingAction, OwnerComponent) == 0x000070, "Member 'UBeingAction::OwnerComponent' has a wrong offset!");
static_assert(offsetof(UBeingAction, Instigator) == 0x000078, "Member 'UBeingAction::Instigator' has a wrong offset!");
static_assert(offsetof(UBeingAction, ActionStateChange) == 0x000090, "Member 'UBeingAction::ActionStateChange' has a wrong offset!");

// Class Being.BeingActionsComponent
// 0x0028 (0x00C8 - 0x00A0)
class UBeingActionsComponent final : public UActorComponent
{
public:
	struct FBeingActions                          _Actions;                                          // 0x00A0(0x0010)(Edit, EditConst, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UBeingAction*                           _CurrentAction;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B8[0x10];                                      // 0x00B8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 AbortActionsByClass(TSubclassOf<class UBeingAction> ActionClass, bool Exact);
	int32 AbortActionsByPriority(EAIRequestPriority Priority, bool Exact);
	int32 AbortActionsInstigatedBy(const class UObject* Instigator);
	bool AddAction(class UBeingAction* Action, EAIRequestPriority Priority, class UObject* Instigator);
	void ClearAllActions();
	void OnCurrentActionEvent(class UBeingAction* Action, EBeingActionEventType EventType);

	class UBeingAction* GetCurrentAction() const;
	bool HasAction(TSubclassOf<class UBeingAction> ActionClass) const;
	bool HasAnyAction() const;
	bool IsActionActive(TSubclassOf<class UBeingAction> ActionClass) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingActionsComponent">();
	}
	static class UBeingActionsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingActionsComponent>();
	}
};
static_assert(alignof(UBeingActionsComponent) == 0x000008, "Wrong alignment on UBeingActionsComponent");
static_assert(sizeof(UBeingActionsComponent) == 0x0000C8, "Wrong size on UBeingActionsComponent");
static_assert(offsetof(UBeingActionsComponent, _Actions) == 0x0000A0, "Member 'UBeingActionsComponent::_Actions' has a wrong offset!");
static_assert(offsetof(UBeingActionsComponent, _CurrentAction) == 0x0000B0, "Member 'UBeingActionsComponent::_CurrentAction' has a wrong offset!");

// Class Being.BeingAggroLevelStat
// 0x0008 (0x00E8 - 0x00E0)
class UBeingAggroLevelStat : public UBeingStat
{
public:
	float                                         _AggroLevel;                                       // 0x00E0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAggroLevel(float Value);

	float GetAggroLevel() const;
	float GetLevelOfPersonalizedAggro(class AActor* Other) const;
	float GetPersonalizedAggroLevel(class AActor* Other) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingAggroLevelStat">();
	}
	static class UBeingAggroLevelStat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingAggroLevelStat>();
	}
};
static_assert(alignof(UBeingAggroLevelStat) == 0x000008, "Wrong alignment on UBeingAggroLevelStat");
static_assert(sizeof(UBeingAggroLevelStat) == 0x0000E8, "Wrong size on UBeingAggroLevelStat");
static_assert(offsetof(UBeingAggroLevelStat, _AggroLevel) == 0x0000E0, "Member 'UBeingAggroLevelStat::_AggroLevel' has a wrong offset!");

// Class Being.BeingHearingAggroLevel
// 0x0000 (0x00E8 - 0x00E8)
class UBeingHearingAggroLevel final : public UBeingAggroLevelStat
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingHearingAggroLevel">();
	}
	static class UBeingHearingAggroLevel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingHearingAggroLevel>();
	}
};
static_assert(alignof(UBeingHearingAggroLevel) == 0x000008, "Wrong alignment on UBeingHearingAggroLevel");
static_assert(sizeof(UBeingHearingAggroLevel) == 0x0000E8, "Wrong size on UBeingHearingAggroLevel");

// Class Being.BeingSmellAggroLevel
// 0x0000 (0x00E8 - 0x00E8)
class UBeingSmellAggroLevel final : public UBeingAggroLevelStat
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingSmellAggroLevel">();
	}
	static class UBeingSmellAggroLevel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingSmellAggroLevel>();
	}
};
static_assert(alignof(UBeingSmellAggroLevel) == 0x000008, "Wrong alignment on UBeingSmellAggroLevel");
static_assert(sizeof(UBeingSmellAggroLevel) == 0x0000E8, "Wrong size on UBeingSmellAggroLevel");

// Class Being.BeingVisionAggroLevel
// 0x0000 (0x00E8 - 0x00E8)
class UBeingVisionAggroLevel final : public UBeingAggroLevelStat
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingVisionAggroLevel">();
	}
	static class UBeingVisionAggroLevel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingVisionAggroLevel>();
	}
};
static_assert(alignof(UBeingVisionAggroLevel) == 0x000008, "Wrong alignment on UBeingVisionAggroLevel");
static_assert(sizeof(UBeingVisionAggroLevel) == 0x0000E8, "Wrong size on UBeingVisionAggroLevel");

// Class Being.BeingDamage
// 0x0028 (0x0068 - 0x0040)
class UBeingDamage : public UDamageType
{
public:
	uint8                                         _KnockDownChance;                                  // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _BreakBlock : 1;                                   // 0x0041(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         _CanKill : 1;                                      // 0x0041(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         _Finisher : 1;                                     // 0x0041(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         _PureDamage : 1;                                   // 0x0041(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         _DeadlyDamage : 1;                                 // 0x0041(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         _StunDamage : 1;                                   // 0x0041(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         _AcidDamage : 1;                                   // 0x0041(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  _GameplayTags;                                     // 0x0048(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingDamage">();
	}
	static class UBeingDamage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingDamage>();
	}
};
static_assert(alignof(UBeingDamage) == 0x000008, "Wrong alignment on UBeingDamage");
static_assert(sizeof(UBeingDamage) == 0x000068, "Wrong size on UBeingDamage");
static_assert(offsetof(UBeingDamage, _KnockDownChance) == 0x000040, "Member 'UBeingDamage::_KnockDownChance' has a wrong offset!");
static_assert(offsetof(UBeingDamage, _GameplayTags) == 0x000048, "Member 'UBeingDamage::_GameplayTags' has a wrong offset!");

// Class Being.RangedDamage
// 0x0000 (0x0068 - 0x0068)
class URangedDamage : public UBeingDamage
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RangedDamage">();
	}
	static class URangedDamage* GetDefaultObj()
	{
		return GetDefaultObjImpl<URangedDamage>();
	}
};
static_assert(alignof(URangedDamage) == 0x000008, "Wrong alignment on URangedDamage");
static_assert(sizeof(URangedDamage) == 0x000068, "Wrong size on URangedDamage");

// Class Being.FireDamage
// 0x0000 (0x0068 - 0x0068)
class UFireDamage final : public UBeingDamage
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FireDamage">();
	}
	static class UFireDamage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFireDamage>();
	}
};
static_assert(alignof(UFireDamage) == 0x000008, "Wrong alignment on UFireDamage");
static_assert(sizeof(UFireDamage) == 0x000068, "Wrong size on UFireDamage");

// Class Being.FirearmDamage
// 0x0000 (0x0068 - 0x0068)
class UFirearmDamage : public URangedDamage
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FirearmDamage">();
	}
	static class UFirearmDamage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFirearmDamage>();
	}
};
static_assert(alignof(UFirearmDamage) == 0x000008, "Wrong alignment on UFirearmDamage");
static_assert(sizeof(UFirearmDamage) == 0x000068, "Wrong size on UFirearmDamage");

// Class Being.ExplosionDamage
// 0x0000 (0x0068 - 0x0068)
class UExplosionDamage final : public UBeingDamage
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ExplosionDamage">();
	}
	static class UExplosionDamage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UExplosionDamage>();
	}
};
static_assert(alignof(UExplosionDamage) == 0x000008, "Wrong alignment on UExplosionDamage");
static_assert(sizeof(UExplosionDamage) == 0x000068, "Wrong size on UExplosionDamage");

// Class Being.MeleeDamage
// 0x0000 (0x0068 - 0x0068)
class UMeleeDamage : public UBeingDamage
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MeleeDamage">();
	}
	static class UMeleeDamage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMeleeDamage>();
	}
};
static_assert(alignof(UMeleeDamage) == 0x000008, "Wrong alignment on UMeleeDamage");
static_assert(sizeof(UMeleeDamage) == 0x000068, "Wrong size on UMeleeDamage");

// Class Being.StrongMeleeDamage
// 0x0000 (0x0068 - 0x0068)
class UStrongMeleeDamage final : public UMeleeDamage
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StrongMeleeDamage">();
	}
	static class UStrongMeleeDamage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStrongMeleeDamage>();
	}
};
static_assert(alignof(UStrongMeleeDamage) == 0x000008, "Wrong alignment on UStrongMeleeDamage");
static_assert(sizeof(UStrongMeleeDamage) == 0x000068, "Wrong size on UStrongMeleeDamage");

// Class Being.BeingFighterInterface
// 0x0000 (0x0028 - 0x0028)
class IBeingFighterInterface final : public IInterface
{
public:
	void EndBlow(int32 ImpactID, const TArray<class FName>& ColliderTags);
	void HitEnemy(int32 ImpactID, float Damage);
	void OnDeath();
	void SetAttackStage(EBeingAttackStage AttackStage);
	void StartBlow(int32 ImpactID, const TArray<class FName>& ColliderTags);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingFighterInterface">();
	}
	static class IBeingFighterInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBeingFighterInterface>();
	}
};
static_assert(alignof(IBeingFighterInterface) == 0x000008, "Wrong alignment on IBeingFighterInterface");
static_assert(sizeof(IBeingFighterInterface) == 0x000028, "Wrong size on IBeingFighterInterface");

// Class Being.BeingWandererInterface
// 0x0000 (0x0028 - 0x0028)
class IBeingWandererInterface final : public IInterface
{
public:
	struct FVector GetRequestedVelocity();
	bool HasRequestedVelocity();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingWandererInterface">();
	}
	static class IBeingWandererInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBeingWandererInterface>();
	}
};
static_assert(alignof(IBeingWandererInterface) == 0x000008, "Wrong alignment on IBeingWandererInterface");
static_assert(sizeof(IBeingWandererInterface) == 0x000028, "Wrong size on IBeingWandererInterface");

// Class Being.BeingFootmarkGenerator
// 0x00C0 (0x0360 - 0x02A0)
class UBeingFootmarkGenerator final : public USceneComponent
{
public:
	uint8                                         Pad_2A0[0x8];                                      // 0x02A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _TraceComplex;                                     // 0x02A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             _TraceChannel;                                     // 0x02A9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _TraceIgnoreMask;                                  // 0x02AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AB[0x5];                                      // 0x02AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         _TraceIgnoreActors;                                // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         _TraceDownLength;                                  // 0x02C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _TraceInterval;                                    // 0x02C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     _MaskMaterial;                                     // 0x02C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     _TrailsMaterial;                                   // 0x02D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _FootmarkDrawTrails;                               // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _DrawFootmarksMask;                                // 0x02D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2DA[0x2];                                      // 0x02DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _FootmarkQuadSize;                                 // 0x02DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _TrailQuadSize;                                    // 0x02E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _TrailQuadWidth;                                   // 0x02E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _FootmarkQuadYScale;                               // 0x02E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              _FootmarkDirectionalOffset;                        // 0x02F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              _FootmarkLocationOffset;                           // 0x0300(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _FootmarkAngleOffset;                              // 0x0310(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _TrailsTiling;                                     // 0x0314(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _TrailsAngleOffset;                                // 0x0318(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _FootmarkCanvasDensity;                            // 0x031C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _FootmarkHeightLimit;                              // 0x0320(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _FootmarkLifeTime;                                 // 0x0324(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _FootmarksLimit;                                   // 0x0328(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _TrailsLimit;                                      // 0x032C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_330[0x30];                                     // 0x0330(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingFootmarkGenerator">();
	}
	static class UBeingFootmarkGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingFootmarkGenerator>();
	}
};
static_assert(alignof(UBeingFootmarkGenerator) == 0x000010, "Wrong alignment on UBeingFootmarkGenerator");
static_assert(sizeof(UBeingFootmarkGenerator) == 0x000360, "Wrong size on UBeingFootmarkGenerator");
static_assert(offsetof(UBeingFootmarkGenerator, _TraceComplex) == 0x0002A8, "Member 'UBeingFootmarkGenerator::_TraceComplex' has a wrong offset!");
static_assert(offsetof(UBeingFootmarkGenerator, _TraceChannel) == 0x0002A9, "Member 'UBeingFootmarkGenerator::_TraceChannel' has a wrong offset!");
static_assert(offsetof(UBeingFootmarkGenerator, _TraceIgnoreMask) == 0x0002AA, "Member 'UBeingFootmarkGenerator::_TraceIgnoreMask' has a wrong offset!");
static_assert(offsetof(UBeingFootmarkGenerator, _TraceIgnoreActors) == 0x0002B0, "Member 'UBeingFootmarkGenerator::_TraceIgnoreActors' has a wrong offset!");
static_assert(offsetof(UBeingFootmarkGenerator, _TraceDownLength) == 0x0002C0, "Member 'UBeingFootmarkGenerator::_TraceDownLength' has a wrong offset!");
static_assert(offsetof(UBeingFootmarkGenerator, _TraceInterval) == 0x0002C4, "Member 'UBeingFootmarkGenerator::_TraceInterval' has a wrong offset!");
static_assert(offsetof(UBeingFootmarkGenerator, _MaskMaterial) == 0x0002C8, "Member 'UBeingFootmarkGenerator::_MaskMaterial' has a wrong offset!");
static_assert(offsetof(UBeingFootmarkGenerator, _TrailsMaterial) == 0x0002D0, "Member 'UBeingFootmarkGenerator::_TrailsMaterial' has a wrong offset!");
static_assert(offsetof(UBeingFootmarkGenerator, _FootmarkDrawTrails) == 0x0002D8, "Member 'UBeingFootmarkGenerator::_FootmarkDrawTrails' has a wrong offset!");
static_assert(offsetof(UBeingFootmarkGenerator, _DrawFootmarksMask) == 0x0002D9, "Member 'UBeingFootmarkGenerator::_DrawFootmarksMask' has a wrong offset!");
static_assert(offsetof(UBeingFootmarkGenerator, _FootmarkQuadSize) == 0x0002DC, "Member 'UBeingFootmarkGenerator::_FootmarkQuadSize' has a wrong offset!");
static_assert(offsetof(UBeingFootmarkGenerator, _TrailQuadSize) == 0x0002E0, "Member 'UBeingFootmarkGenerator::_TrailQuadSize' has a wrong offset!");
static_assert(offsetof(UBeingFootmarkGenerator, _TrailQuadWidth) == 0x0002E4, "Member 'UBeingFootmarkGenerator::_TrailQuadWidth' has a wrong offset!");
static_assert(offsetof(UBeingFootmarkGenerator, _FootmarkQuadYScale) == 0x0002E8, "Member 'UBeingFootmarkGenerator::_FootmarkQuadYScale' has a wrong offset!");
static_assert(offsetof(UBeingFootmarkGenerator, _FootmarkDirectionalOffset) == 0x0002F0, "Member 'UBeingFootmarkGenerator::_FootmarkDirectionalOffset' has a wrong offset!");
static_assert(offsetof(UBeingFootmarkGenerator, _FootmarkLocationOffset) == 0x000300, "Member 'UBeingFootmarkGenerator::_FootmarkLocationOffset' has a wrong offset!");
static_assert(offsetof(UBeingFootmarkGenerator, _FootmarkAngleOffset) == 0x000310, "Member 'UBeingFootmarkGenerator::_FootmarkAngleOffset' has a wrong offset!");
static_assert(offsetof(UBeingFootmarkGenerator, _TrailsTiling) == 0x000314, "Member 'UBeingFootmarkGenerator::_TrailsTiling' has a wrong offset!");
static_assert(offsetof(UBeingFootmarkGenerator, _TrailsAngleOffset) == 0x000318, "Member 'UBeingFootmarkGenerator::_TrailsAngleOffset' has a wrong offset!");
static_assert(offsetof(UBeingFootmarkGenerator, _FootmarkCanvasDensity) == 0x00031C, "Member 'UBeingFootmarkGenerator::_FootmarkCanvasDensity' has a wrong offset!");
static_assert(offsetof(UBeingFootmarkGenerator, _FootmarkHeightLimit) == 0x000320, "Member 'UBeingFootmarkGenerator::_FootmarkHeightLimit' has a wrong offset!");
static_assert(offsetof(UBeingFootmarkGenerator, _FootmarkLifeTime) == 0x000324, "Member 'UBeingFootmarkGenerator::_FootmarkLifeTime' has a wrong offset!");
static_assert(offsetof(UBeingFootmarkGenerator, _FootmarksLimit) == 0x000328, "Member 'UBeingFootmarkGenerator::_FootmarksLimit' has a wrong offset!");
static_assert(offsetof(UBeingFootmarkGenerator, _TrailsLimit) == 0x00032C, "Member 'UBeingFootmarkGenerator::_TrailsLimit' has a wrong offset!");

// Class Being.FootmarksSubsystem
// 0x00E0 (0x0110 - 0x0030)
class UFootmarksSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     CanvasClearMaterial;                               // 0x0040(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCanvasRenderTarget2D*                  CanvasTexture;                                     // 0x0048(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FootmarksCanvasDensity;                            // 0x0050(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvas*                                FootmarksCanvas[0x2];                              // 0x0058(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_68[0xA8];                                      // 0x0068(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EnableFootmarkTracing(bool State);
	void InitializeFootmarkTracker(class UMaterialInterface* ClearMaterial, class UCanvasRenderTarget2D* Canvas, float Density);
	void SetCenterPosition(const struct FVector& OwnerPosition);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FootmarksSubsystem">();
	}
	static class UFootmarksSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFootmarksSubsystem>();
	}
};
static_assert(alignof(UFootmarksSubsystem) == 0x000008, "Wrong alignment on UFootmarksSubsystem");
static_assert(sizeof(UFootmarksSubsystem) == 0x000110, "Wrong size on UFootmarksSubsystem");
static_assert(offsetof(UFootmarksSubsystem, CanvasClearMaterial) == 0x000040, "Member 'UFootmarksSubsystem::CanvasClearMaterial' has a wrong offset!");
static_assert(offsetof(UFootmarksSubsystem, CanvasTexture) == 0x000048, "Member 'UFootmarksSubsystem::CanvasTexture' has a wrong offset!");
static_assert(offsetof(UFootmarksSubsystem, FootmarksCanvasDensity) == 0x000050, "Member 'UFootmarksSubsystem::FootmarksCanvasDensity' has a wrong offset!");
static_assert(offsetof(UFootmarksSubsystem, FootmarksCanvas) == 0x000058, "Member 'UFootmarksSubsystem::FootmarksCanvas' has a wrong offset!");

// Class Being.BeingFootsIKComponent
// 0x00C0 (0x0640 - 0x0580)
class UBeingFootsIKComponent : public ULineBatchComponent
{
public:
	uint8                                         _EnableFootIK : 1;                                 // 0x0580(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         _ClampInCapsule : 1;                               // 0x0580(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         _TraceComplex : 1;                                 // 0x0580(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_581[0x3];                                      // 0x0581(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ECollisionChannel                             _DropCollisionChannel;                             // 0x0584(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             _FootCollisionChannel;                             // 0x0585(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _QueryIgnoreMask;                                  // 0x0586(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_587[0x9];                                      // 0x0587(0x0009)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         _QueryIgnoreActors;                                // 0x0590(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         _MaxStepHeight;                                    // 0x05A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _IKInterpSpeed;                                    // 0x05A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _DropInterpSpeed;                                  // 0x05A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _DropTraceRadius;                                  // 0x05AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _FootTraceRadius;                                  // 0x05B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _CacheRange;                                       // 0x05B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _FootRotationSpeed;                                // 0x05B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5BC[0x4];                                      // 0x05BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               _FootMinRotation;                                  // 0x05C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               _FootMaxRotation;                                  // 0x05D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         _DropHeight;                                       // 0x05F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _DropFloor;                                        // 0x05F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _DropStep;                                         // 0x05F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _DropFloorTarget;                                  // 0x05FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _LastOwnerLocation;                                // 0x0600(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_618[0x20];                                     // 0x0618(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             _Character;                                        // 0x0638(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void PutFoot(EFoot Foot);
	void RaiseFoot(EFoot Foot);
	void Update(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingFootsIKComponent">();
	}
	static class UBeingFootsIKComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingFootsIKComponent>();
	}
};
static_assert(alignof(UBeingFootsIKComponent) == 0x000010, "Wrong alignment on UBeingFootsIKComponent");
static_assert(sizeof(UBeingFootsIKComponent) == 0x000640, "Wrong size on UBeingFootsIKComponent");
static_assert(offsetof(UBeingFootsIKComponent, _DropCollisionChannel) == 0x000584, "Member 'UBeingFootsIKComponent::_DropCollisionChannel' has a wrong offset!");
static_assert(offsetof(UBeingFootsIKComponent, _FootCollisionChannel) == 0x000585, "Member 'UBeingFootsIKComponent::_FootCollisionChannel' has a wrong offset!");
static_assert(offsetof(UBeingFootsIKComponent, _QueryIgnoreMask) == 0x000586, "Member 'UBeingFootsIKComponent::_QueryIgnoreMask' has a wrong offset!");
static_assert(offsetof(UBeingFootsIKComponent, _QueryIgnoreActors) == 0x000590, "Member 'UBeingFootsIKComponent::_QueryIgnoreActors' has a wrong offset!");
static_assert(offsetof(UBeingFootsIKComponent, _MaxStepHeight) == 0x0005A0, "Member 'UBeingFootsIKComponent::_MaxStepHeight' has a wrong offset!");
static_assert(offsetof(UBeingFootsIKComponent, _IKInterpSpeed) == 0x0005A4, "Member 'UBeingFootsIKComponent::_IKInterpSpeed' has a wrong offset!");
static_assert(offsetof(UBeingFootsIKComponent, _DropInterpSpeed) == 0x0005A8, "Member 'UBeingFootsIKComponent::_DropInterpSpeed' has a wrong offset!");
static_assert(offsetof(UBeingFootsIKComponent, _DropTraceRadius) == 0x0005AC, "Member 'UBeingFootsIKComponent::_DropTraceRadius' has a wrong offset!");
static_assert(offsetof(UBeingFootsIKComponent, _FootTraceRadius) == 0x0005B0, "Member 'UBeingFootsIKComponent::_FootTraceRadius' has a wrong offset!");
static_assert(offsetof(UBeingFootsIKComponent, _CacheRange) == 0x0005B4, "Member 'UBeingFootsIKComponent::_CacheRange' has a wrong offset!");
static_assert(offsetof(UBeingFootsIKComponent, _FootRotationSpeed) == 0x0005B8, "Member 'UBeingFootsIKComponent::_FootRotationSpeed' has a wrong offset!");
static_assert(offsetof(UBeingFootsIKComponent, _FootMinRotation) == 0x0005C0, "Member 'UBeingFootsIKComponent::_FootMinRotation' has a wrong offset!");
static_assert(offsetof(UBeingFootsIKComponent, _FootMaxRotation) == 0x0005D8, "Member 'UBeingFootsIKComponent::_FootMaxRotation' has a wrong offset!");
static_assert(offsetof(UBeingFootsIKComponent, _DropHeight) == 0x0005F0, "Member 'UBeingFootsIKComponent::_DropHeight' has a wrong offset!");
static_assert(offsetof(UBeingFootsIKComponent, _DropFloor) == 0x0005F4, "Member 'UBeingFootsIKComponent::_DropFloor' has a wrong offset!");
static_assert(offsetof(UBeingFootsIKComponent, _DropStep) == 0x0005F8, "Member 'UBeingFootsIKComponent::_DropStep' has a wrong offset!");
static_assert(offsetof(UBeingFootsIKComponent, _DropFloorTarget) == 0x0005FC, "Member 'UBeingFootsIKComponent::_DropFloorTarget' has a wrong offset!");
static_assert(offsetof(UBeingFootsIKComponent, _LastOwnerLocation) == 0x000600, "Member 'UBeingFootsIKComponent::_LastOwnerLocation' has a wrong offset!");
static_assert(offsetof(UBeingFootsIKComponent, _Character) == 0x000638, "Member 'UBeingFootsIKComponent::_Character' has a wrong offset!");

// Class Being.Being2FootsIKComponent
// 0x0990 (0x0FD0 - 0x0640)
class UBeing2FootsIKComponent final : public UBeingFootsIKComponent
{
public:
	class FName                                   _LeftFootSocket;                                   // 0x0640(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _RightFootSocket;                                  // 0x0648(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _LeftFingersSocket;                                // 0x0650(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _RightFingersSocket;                               // 0x0658(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFootData                              _FootsData[0x2];                                   // 0x0660(0x0420)(Edit, DisableEditOnTemplate, EditConst, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         _LeftFootOffset;                                   // 0x0EA0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _RightFootOffset;                                  // 0x0EA4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               _LeftFootRotator;                                  // 0x0EA8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               _RightFootRotator;                                 // 0x0EC0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         _TimeToNextStep;                                   // 0x0ED8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             _PredictionCollisionChannel;                       // 0x0EDC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _EnablePredictions;                                // 0x0EDD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _OldIKUpdate;                                      // 0x0EDE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _IKTryUseCache;                                    // 0x0EDF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _DropTryUseCache;                                  // 0x0EE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _IKInterpEaseIn;                                   // 0x0EE1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _DropInterpEaseIn;                                 // 0x0EE2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _DynamicDropInterp;                                // 0x0EE3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _InterpEaseMin;                                    // 0x0EE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _InterpEaseSpeed;                                  // 0x0EE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _WeldGround;                                       // 0x0EEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _StairStepHeight;                                  // 0x0EF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _MaxAllowedAngle;                                  // 0x0EF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _WalkStepDuration;                                 // 0x0EF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _WalkStepLength;                                   // 0x0EFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _RunStepDuration;                                  // 0x0F00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _RunStepLength;                                    // 0x0F04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _WalkUpStairsPlayRate;                             // 0x0F08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _WalkDownStairsPlayRate;                           // 0x0F0C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _RunUpStairsPlayRate;                              // 0x0F10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _RunDownStairsPlayRate;                            // 0x0F14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F18[0xB8];                                     // 0x0F18(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EnterSlope(float StepHeight);
	void EnterStairs(float StepHeight);
	void ExitSlope();
	void ExitStairs();

	void GetAnimMods(float* PlayRate, float* SpeedWarping) const;
	struct FFootData GetLeftFootData() const;
	struct FFootData GetRightFootData() const;
	float GetSpeedWarping() const;
	bool IsOnDownStairs() const;
	bool IsOnSlope() const;
	bool IsOnStairs() const;
	bool IsOnUpStairs() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Being2FootsIKComponent">();
	}
	static class UBeing2FootsIKComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeing2FootsIKComponent>();
	}
};
static_assert(alignof(UBeing2FootsIKComponent) == 0x000010, "Wrong alignment on UBeing2FootsIKComponent");
static_assert(sizeof(UBeing2FootsIKComponent) == 0x000FD0, "Wrong size on UBeing2FootsIKComponent");
static_assert(offsetof(UBeing2FootsIKComponent, _LeftFootSocket) == 0x000640, "Member 'UBeing2FootsIKComponent::_LeftFootSocket' has a wrong offset!");
static_assert(offsetof(UBeing2FootsIKComponent, _RightFootSocket) == 0x000648, "Member 'UBeing2FootsIKComponent::_RightFootSocket' has a wrong offset!");
static_assert(offsetof(UBeing2FootsIKComponent, _LeftFingersSocket) == 0x000650, "Member 'UBeing2FootsIKComponent::_LeftFingersSocket' has a wrong offset!");
static_assert(offsetof(UBeing2FootsIKComponent, _RightFingersSocket) == 0x000658, "Member 'UBeing2FootsIKComponent::_RightFingersSocket' has a wrong offset!");
static_assert(offsetof(UBeing2FootsIKComponent, _FootsData) == 0x000660, "Member 'UBeing2FootsIKComponent::_FootsData' has a wrong offset!");
static_assert(offsetof(UBeing2FootsIKComponent, _LeftFootOffset) == 0x000EA0, "Member 'UBeing2FootsIKComponent::_LeftFootOffset' has a wrong offset!");
static_assert(offsetof(UBeing2FootsIKComponent, _RightFootOffset) == 0x000EA4, "Member 'UBeing2FootsIKComponent::_RightFootOffset' has a wrong offset!");
static_assert(offsetof(UBeing2FootsIKComponent, _LeftFootRotator) == 0x000EA8, "Member 'UBeing2FootsIKComponent::_LeftFootRotator' has a wrong offset!");
static_assert(offsetof(UBeing2FootsIKComponent, _RightFootRotator) == 0x000EC0, "Member 'UBeing2FootsIKComponent::_RightFootRotator' has a wrong offset!");
static_assert(offsetof(UBeing2FootsIKComponent, _TimeToNextStep) == 0x000ED8, "Member 'UBeing2FootsIKComponent::_TimeToNextStep' has a wrong offset!");
static_assert(offsetof(UBeing2FootsIKComponent, _PredictionCollisionChannel) == 0x000EDC, "Member 'UBeing2FootsIKComponent::_PredictionCollisionChannel' has a wrong offset!");
static_assert(offsetof(UBeing2FootsIKComponent, _EnablePredictions) == 0x000EDD, "Member 'UBeing2FootsIKComponent::_EnablePredictions' has a wrong offset!");
static_assert(offsetof(UBeing2FootsIKComponent, _OldIKUpdate) == 0x000EDE, "Member 'UBeing2FootsIKComponent::_OldIKUpdate' has a wrong offset!");
static_assert(offsetof(UBeing2FootsIKComponent, _IKTryUseCache) == 0x000EDF, "Member 'UBeing2FootsIKComponent::_IKTryUseCache' has a wrong offset!");
static_assert(offsetof(UBeing2FootsIKComponent, _DropTryUseCache) == 0x000EE0, "Member 'UBeing2FootsIKComponent::_DropTryUseCache' has a wrong offset!");
static_assert(offsetof(UBeing2FootsIKComponent, _IKInterpEaseIn) == 0x000EE1, "Member 'UBeing2FootsIKComponent::_IKInterpEaseIn' has a wrong offset!");
static_assert(offsetof(UBeing2FootsIKComponent, _DropInterpEaseIn) == 0x000EE2, "Member 'UBeing2FootsIKComponent::_DropInterpEaseIn' has a wrong offset!");
static_assert(offsetof(UBeing2FootsIKComponent, _DynamicDropInterp) == 0x000EE3, "Member 'UBeing2FootsIKComponent::_DynamicDropInterp' has a wrong offset!");
static_assert(offsetof(UBeing2FootsIKComponent, _InterpEaseMin) == 0x000EE4, "Member 'UBeing2FootsIKComponent::_InterpEaseMin' has a wrong offset!");
static_assert(offsetof(UBeing2FootsIKComponent, _InterpEaseSpeed) == 0x000EE8, "Member 'UBeing2FootsIKComponent::_InterpEaseSpeed' has a wrong offset!");
static_assert(offsetof(UBeing2FootsIKComponent, _WeldGround) == 0x000EEC, "Member 'UBeing2FootsIKComponent::_WeldGround' has a wrong offset!");
static_assert(offsetof(UBeing2FootsIKComponent, _StairStepHeight) == 0x000EF0, "Member 'UBeing2FootsIKComponent::_StairStepHeight' has a wrong offset!");
static_assert(offsetof(UBeing2FootsIKComponent, _MaxAllowedAngle) == 0x000EF4, "Member 'UBeing2FootsIKComponent::_MaxAllowedAngle' has a wrong offset!");
static_assert(offsetof(UBeing2FootsIKComponent, _WalkStepDuration) == 0x000EF8, "Member 'UBeing2FootsIKComponent::_WalkStepDuration' has a wrong offset!");
static_assert(offsetof(UBeing2FootsIKComponent, _WalkStepLength) == 0x000EFC, "Member 'UBeing2FootsIKComponent::_WalkStepLength' has a wrong offset!");
static_assert(offsetof(UBeing2FootsIKComponent, _RunStepDuration) == 0x000F00, "Member 'UBeing2FootsIKComponent::_RunStepDuration' has a wrong offset!");
static_assert(offsetof(UBeing2FootsIKComponent, _RunStepLength) == 0x000F04, "Member 'UBeing2FootsIKComponent::_RunStepLength' has a wrong offset!");
static_assert(offsetof(UBeing2FootsIKComponent, _WalkUpStairsPlayRate) == 0x000F08, "Member 'UBeing2FootsIKComponent::_WalkUpStairsPlayRate' has a wrong offset!");
static_assert(offsetof(UBeing2FootsIKComponent, _WalkDownStairsPlayRate) == 0x000F0C, "Member 'UBeing2FootsIKComponent::_WalkDownStairsPlayRate' has a wrong offset!");
static_assert(offsetof(UBeing2FootsIKComponent, _RunUpStairsPlayRate) == 0x000F10, "Member 'UBeing2FootsIKComponent::_RunUpStairsPlayRate' has a wrong offset!");
static_assert(offsetof(UBeing2FootsIKComponent, _RunDownStairsPlayRate) == 0x000F14, "Member 'UBeing2FootsIKComponent::_RunDownStairsPlayRate' has a wrong offset!");

// Class Being.Being4FootsIKComponent
// 0x1110 (0x1750 - 0x0640)
class UBeing4FootsIKComponent final : public UBeingFootsIKComponent
{
public:
	bool                                          _OnlyDropIK;                                       // 0x0640(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_641[0x3];                                      // 0x0641(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _FootsSockets[0x4];                                // 0x0644(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _FootsFixedSockets[0x4];                           // 0x0664(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _ChestOffset;                                      // 0x0684(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _HipOffset;                                        // 0x0688(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68C[0x4];                                      // 0x068C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                _FloorNormal;                                      // 0x0690(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFootData                              _FootsData[0x4];                                   // 0x06A8(0x0420)(Edit, DisableEditOnTemplate, EditConst, NoDestructor, ContainsInstancedReference, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         _FootDropDists[0x4];                               // 0x1728(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _Lenght;                                           // 0x1738(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _MaxPitch;                                         // 0x173C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _MeshPitch;                                        // 0x1740(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1744[0xC];                                     // 0x1744(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	const struct FFootData GetLeftBackFoot() const;
	const struct FFootData GetLeftFrontFoot() const;
	const struct FFootData GetRightBackFoot() const;
	const struct FFootData GetRightFrontFoot() const;
	bool IsOnSlope(float ToleranceAngle) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Being4FootsIKComponent">();
	}
	static class UBeing4FootsIKComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeing4FootsIKComponent>();
	}
};
static_assert(alignof(UBeing4FootsIKComponent) == 0x000010, "Wrong alignment on UBeing4FootsIKComponent");
static_assert(sizeof(UBeing4FootsIKComponent) == 0x001750, "Wrong size on UBeing4FootsIKComponent");
static_assert(offsetof(UBeing4FootsIKComponent, _OnlyDropIK) == 0x000640, "Member 'UBeing4FootsIKComponent::_OnlyDropIK' has a wrong offset!");
static_assert(offsetof(UBeing4FootsIKComponent, _FootsSockets) == 0x000644, "Member 'UBeing4FootsIKComponent::_FootsSockets' has a wrong offset!");
static_assert(offsetof(UBeing4FootsIKComponent, _FootsFixedSockets) == 0x000664, "Member 'UBeing4FootsIKComponent::_FootsFixedSockets' has a wrong offset!");
static_assert(offsetof(UBeing4FootsIKComponent, _ChestOffset) == 0x000684, "Member 'UBeing4FootsIKComponent::_ChestOffset' has a wrong offset!");
static_assert(offsetof(UBeing4FootsIKComponent, _HipOffset) == 0x000688, "Member 'UBeing4FootsIKComponent::_HipOffset' has a wrong offset!");
static_assert(offsetof(UBeing4FootsIKComponent, _FloorNormal) == 0x000690, "Member 'UBeing4FootsIKComponent::_FloorNormal' has a wrong offset!");
static_assert(offsetof(UBeing4FootsIKComponent, _FootsData) == 0x0006A8, "Member 'UBeing4FootsIKComponent::_FootsData' has a wrong offset!");
static_assert(offsetof(UBeing4FootsIKComponent, _FootDropDists) == 0x001728, "Member 'UBeing4FootsIKComponent::_FootDropDists' has a wrong offset!");
static_assert(offsetof(UBeing4FootsIKComponent, _Lenght) == 0x001738, "Member 'UBeing4FootsIKComponent::_Lenght' has a wrong offset!");
static_assert(offsetof(UBeing4FootsIKComponent, _MaxPitch) == 0x00173C, "Member 'UBeing4FootsIKComponent::_MaxPitch' has a wrong offset!");
static_assert(offsetof(UBeing4FootsIKComponent, _MeshPitch) == 0x001740, "Member 'UBeing4FootsIKComponent::_MeshPitch' has a wrong offset!");

// Class Being.BeingVertexAnim
// 0x0068 (0x0098 - 0x0030)
class UBeingVertexAnim final : public UDataAsset
{
public:
	class UStaticMesh*                            _Mesh;                                             // 0x0030(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _AnimationSpeed;                                   // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                _Offset;                                           // 0x0040(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               _MinRotation;                                      // 0x0058(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               _MaxRotation;                                      // 0x0070(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         _MinScale;                                         // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _MaxScale;                                         // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _TranslucentSortPriority;                          // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingVertexAnim">();
	}
	static class UBeingVertexAnim* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingVertexAnim>();
	}
};
static_assert(alignof(UBeingVertexAnim) == 0x000008, "Wrong alignment on UBeingVertexAnim");
static_assert(sizeof(UBeingVertexAnim) == 0x000098, "Wrong size on UBeingVertexAnim");
static_assert(offsetof(UBeingVertexAnim, _Mesh) == 0x000030, "Member 'UBeingVertexAnim::_Mesh' has a wrong offset!");
static_assert(offsetof(UBeingVertexAnim, _AnimationSpeed) == 0x000038, "Member 'UBeingVertexAnim::_AnimationSpeed' has a wrong offset!");
static_assert(offsetof(UBeingVertexAnim, _Offset) == 0x000040, "Member 'UBeingVertexAnim::_Offset' has a wrong offset!");
static_assert(offsetof(UBeingVertexAnim, _MinRotation) == 0x000058, "Member 'UBeingVertexAnim::_MinRotation' has a wrong offset!");
static_assert(offsetof(UBeingVertexAnim, _MaxRotation) == 0x000070, "Member 'UBeingVertexAnim::_MaxRotation' has a wrong offset!");
static_assert(offsetof(UBeingVertexAnim, _MinScale) == 0x000088, "Member 'UBeingVertexAnim::_MinScale' has a wrong offset!");
static_assert(offsetof(UBeingVertexAnim, _MaxScale) == 0x00008C, "Member 'UBeingVertexAnim::_MaxScale' has a wrong offset!");
static_assert(offsetof(UBeingVertexAnim, _TranslucentSortPriority) == 0x000090, "Member 'UBeingVertexAnim::_TranslucentSortPriority' has a wrong offset!");

// Class Being.BeingVertexAnimComponent
// 0x0020 (0x02C0 - 0x02A0)
class UBeingVertexAnimComponent final : public USceneComponent
{
public:
	class UMaterialInstanceDynamic*               _EffectMaterial;                                   // 0x02A0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   _EffectMesh;                                       // 0x02A8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B0[0x10];                                     // 0x02B0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingVertexAnimComponent">();
	}
	static class UBeingVertexAnimComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingVertexAnimComponent>();
	}
};
static_assert(alignof(UBeingVertexAnimComponent) == 0x000010, "Wrong alignment on UBeingVertexAnimComponent");
static_assert(sizeof(UBeingVertexAnimComponent) == 0x0002C0, "Wrong size on UBeingVertexAnimComponent");
static_assert(offsetof(UBeingVertexAnimComponent, _EffectMaterial) == 0x0002A0, "Member 'UBeingVertexAnimComponent::_EffectMaterial' has a wrong offset!");
static_assert(offsetof(UBeingVertexAnimComponent, _EffectMesh) == 0x0002A8, "Member 'UBeingVertexAnimComponent::_EffectMesh' has a wrong offset!");

// Class Being.WadingDelayTimes
// 0x0050 (0x0080 - 0x0030)
class UWadingDelayTimes final : public UDataAsset
{
public:
	TMap<ESoundMovement, float>                   DelayTimes;                                        // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WadingDelayTimes">();
	}
	static class UWadingDelayTimes* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWadingDelayTimes>();
	}
};
static_assert(alignof(UWadingDelayTimes) == 0x000008, "Wrong alignment on UWadingDelayTimes");
static_assert(sizeof(UWadingDelayTimes) == 0x000080, "Wrong size on UWadingDelayTimes");
static_assert(offsetof(UWadingDelayTimes, DelayTimes) == 0x000030, "Member 'UWadingDelayTimes::DelayTimes' has a wrong offset!");

// Class Being.BeingFootstep
// 0x0250 (0x0500 - 0x02B0)
class ABeingFootstep : public AActor
{
public:
	bool                                          _AllowPutFootstepWithoutSpawn;                     // 0x02B0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                _DefaultFootstep;                                  // 0x02B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                _ClothesSound;                                     // 0x02C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFootstepEffect                        _ClothesEffect;                                    // 0x02C8(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EPhysicalSurface, struct FFootstep>      _Footsteps;                                        // 0x0310(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EPhysicalSurface, struct FWading>        _WadingSounds;                                     // 0x0360(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         _MaxSoundLife;                                     // 0x03B0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B4[0x4];                                      // 0x03B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             _SurfaceHit;                                       // 0x03B8(0x00E8)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EPhysicalSurface                              _SurfaceType;                                      // 0x04A0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              _SurfaceTypeAlter;                                 // 0x04A1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              _SurfaceTypeDecal;                                 // 0x04A2(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFoot                                         _Foot;                                             // 0x04A3(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESoundMovement                                _Movement;                                         // 0x04A4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalStance                               _VerticalStance;                                   // 0x04A5(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A6[0x2];                                      // 0x04A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _FallHeight;                                       // 0x04A8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4AC[0x4];                                      // 0x04AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        _SoundAttachToComponent;                           // 0x04B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _SoundAttachToSlot;                                // 0x04B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _ShowEffect;                                       // 0x04C0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C1[0x3];                                      // 0x04C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _DecalInitialAlpha;                                // 0x04C4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _MovementSpeed;                                    // 0x04C8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _StanceAINoiseMod;                                 // 0x04CC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _VolumeMul;                                        // 0x04D0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _OcclusionRefreshInterval;                         // 0x04D4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             _OcclusionCollisionChannel;                        // 0x04D8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D9[0x7];                                      // 0x04D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDecalComponent*                        _DecalComponent;                                   // 0x04E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               _EffectDecalMID;                                   // 0x04E8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4F0[0x10];                                     // 0x04F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PutFootstep();
	void StartEffect(const struct FFootstepEffect& Effect);

	float GetFootstepAINoise() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingFootstep">();
	}
	static class ABeingFootstep* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABeingFootstep>();
	}
};
static_assert(alignof(ABeingFootstep) == 0x000008, "Wrong alignment on ABeingFootstep");
static_assert(sizeof(ABeingFootstep) == 0x000500, "Wrong size on ABeingFootstep");
static_assert(offsetof(ABeingFootstep, _AllowPutFootstepWithoutSpawn) == 0x0002B0, "Member 'ABeingFootstep::_AllowPutFootstepWithoutSpawn' has a wrong offset!");
static_assert(offsetof(ABeingFootstep, _DefaultFootstep) == 0x0002B8, "Member 'ABeingFootstep::_DefaultFootstep' has a wrong offset!");
static_assert(offsetof(ABeingFootstep, _ClothesSound) == 0x0002C0, "Member 'ABeingFootstep::_ClothesSound' has a wrong offset!");
static_assert(offsetof(ABeingFootstep, _ClothesEffect) == 0x0002C8, "Member 'ABeingFootstep::_ClothesEffect' has a wrong offset!");
static_assert(offsetof(ABeingFootstep, _Footsteps) == 0x000310, "Member 'ABeingFootstep::_Footsteps' has a wrong offset!");
static_assert(offsetof(ABeingFootstep, _WadingSounds) == 0x000360, "Member 'ABeingFootstep::_WadingSounds' has a wrong offset!");
static_assert(offsetof(ABeingFootstep, _MaxSoundLife) == 0x0003B0, "Member 'ABeingFootstep::_MaxSoundLife' has a wrong offset!");
static_assert(offsetof(ABeingFootstep, _SurfaceHit) == 0x0003B8, "Member 'ABeingFootstep::_SurfaceHit' has a wrong offset!");
static_assert(offsetof(ABeingFootstep, _SurfaceType) == 0x0004A0, "Member 'ABeingFootstep::_SurfaceType' has a wrong offset!");
static_assert(offsetof(ABeingFootstep, _SurfaceTypeAlter) == 0x0004A1, "Member 'ABeingFootstep::_SurfaceTypeAlter' has a wrong offset!");
static_assert(offsetof(ABeingFootstep, _SurfaceTypeDecal) == 0x0004A2, "Member 'ABeingFootstep::_SurfaceTypeDecal' has a wrong offset!");
static_assert(offsetof(ABeingFootstep, _Foot) == 0x0004A3, "Member 'ABeingFootstep::_Foot' has a wrong offset!");
static_assert(offsetof(ABeingFootstep, _Movement) == 0x0004A4, "Member 'ABeingFootstep::_Movement' has a wrong offset!");
static_assert(offsetof(ABeingFootstep, _VerticalStance) == 0x0004A5, "Member 'ABeingFootstep::_VerticalStance' has a wrong offset!");
static_assert(offsetof(ABeingFootstep, _FallHeight) == 0x0004A8, "Member 'ABeingFootstep::_FallHeight' has a wrong offset!");
static_assert(offsetof(ABeingFootstep, _SoundAttachToComponent) == 0x0004B0, "Member 'ABeingFootstep::_SoundAttachToComponent' has a wrong offset!");
static_assert(offsetof(ABeingFootstep, _SoundAttachToSlot) == 0x0004B8, "Member 'ABeingFootstep::_SoundAttachToSlot' has a wrong offset!");
static_assert(offsetof(ABeingFootstep, _ShowEffect) == 0x0004C0, "Member 'ABeingFootstep::_ShowEffect' has a wrong offset!");
static_assert(offsetof(ABeingFootstep, _DecalInitialAlpha) == 0x0004C4, "Member 'ABeingFootstep::_DecalInitialAlpha' has a wrong offset!");
static_assert(offsetof(ABeingFootstep, _MovementSpeed) == 0x0004C8, "Member 'ABeingFootstep::_MovementSpeed' has a wrong offset!");
static_assert(offsetof(ABeingFootstep, _StanceAINoiseMod) == 0x0004CC, "Member 'ABeingFootstep::_StanceAINoiseMod' has a wrong offset!");
static_assert(offsetof(ABeingFootstep, _VolumeMul) == 0x0004D0, "Member 'ABeingFootstep::_VolumeMul' has a wrong offset!");
static_assert(offsetof(ABeingFootstep, _OcclusionRefreshInterval) == 0x0004D4, "Member 'ABeingFootstep::_OcclusionRefreshInterval' has a wrong offset!");
static_assert(offsetof(ABeingFootstep, _OcclusionCollisionChannel) == 0x0004D8, "Member 'ABeingFootstep::_OcclusionCollisionChannel' has a wrong offset!");
static_assert(offsetof(ABeingFootstep, _DecalComponent) == 0x0004E0, "Member 'ABeingFootstep::_DecalComponent' has a wrong offset!");
static_assert(offsetof(ABeingFootstep, _EffectDecalMID) == 0x0004E8, "Member 'ABeingFootstep::_EffectDecalMID' has a wrong offset!");

// Class Being.BeingFppFootstep
// 0x0010 (0x0510 - 0x0500)
class ABeingFppFootstep final : public ABeingFootstep
{
public:
	float                                         _PitchOffsetMul;                                   // 0x0500(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _PitchBackOffsetMul;                               // 0x0504(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _VelocityOffsetMul;                                // 0x0508(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _MinVelocity;                                      // 0x050C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingFppFootstep">();
	}
	static class ABeingFppFootstep* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABeingFppFootstep>();
	}
};
static_assert(alignof(ABeingFppFootstep) == 0x000008, "Wrong alignment on ABeingFppFootstep");
static_assert(sizeof(ABeingFppFootstep) == 0x000510, "Wrong size on ABeingFppFootstep");
static_assert(offsetof(ABeingFppFootstep, _PitchOffsetMul) == 0x000500, "Member 'ABeingFppFootstep::_PitchOffsetMul' has a wrong offset!");
static_assert(offsetof(ABeingFppFootstep, _PitchBackOffsetMul) == 0x000504, "Member 'ABeingFppFootstep::_PitchBackOffsetMul' has a wrong offset!");
static_assert(offsetof(ABeingFppFootstep, _VelocityOffsetMul) == 0x000508, "Member 'ABeingFppFootstep::_VelocityOffsetMul' has a wrong offset!");
static_assert(offsetof(ABeingFppFootstep, _MinVelocity) == 0x00050C, "Member 'ABeingFppFootstep::_MinVelocity' has a wrong offset!");

// Class Being.BeingFootstepManagerComponent
// 0x0020 (0x00C0 - 0x00A0)
class UBeingFootstepManagerComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x20];                                      // 0x00A0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingFootstepManagerComponent">();
	}
	static class UBeingFootstepManagerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingFootstepManagerComponent>();
	}
};
static_assert(alignof(UBeingFootstepManagerComponent) == 0x000008, "Wrong alignment on UBeingFootstepManagerComponent");
static_assert(sizeof(UBeingFootstepManagerComponent) == 0x0000C0, "Wrong size on UBeingFootstepManagerComponent");

// Class Being.BeingFootstepSharedData
// 0x0030 (0x0060 - 0x0030)
class UBeingFootstepSharedData final : public UEngineSubsystem
{
public:
	TArray<class UAkSwitchValue*>                 _WWiseFootSwitchesLoaded;                          // 0x0030(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class UAkSwitchValue*>                 _WWiseMoveSwitchesLoaded;                          // 0x0040(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class UAkSwitchValue*>                 _WWiseSurfSwitchesLoaded;                          // 0x0050(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingFootstepSharedData">();
	}
	static class UBeingFootstepSharedData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingFootstepSharedData>();
	}
};
static_assert(alignof(UBeingFootstepSharedData) == 0x000008, "Wrong alignment on UBeingFootstepSharedData");
static_assert(sizeof(UBeingFootstepSharedData) == 0x000060, "Wrong size on UBeingFootstepSharedData");
static_assert(offsetof(UBeingFootstepSharedData, _WWiseFootSwitchesLoaded) == 0x000030, "Member 'UBeingFootstepSharedData::_WWiseFootSwitchesLoaded' has a wrong offset!");
static_assert(offsetof(UBeingFootstepSharedData, _WWiseMoveSwitchesLoaded) == 0x000040, "Member 'UBeingFootstepSharedData::_WWiseMoveSwitchesLoaded' has a wrong offset!");
static_assert(offsetof(UBeingFootstepSharedData, _WWiseSurfSwitchesLoaded) == 0x000050, "Member 'UBeingFootstepSharedData::_WWiseSurfSwitchesLoaded' has a wrong offset!");

// Class Being.BeingFootstepTracer
// 0x02D0 (0x0570 - 0x02A0)
class UBeingFootstepTracer : public USceneComponent
{
public:
	uint8                                         Pad_2A0[0x8];                                      // 0x02A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	ECollisionChannel                             _TraceChannel;                                     // 0x02A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _TraceComplex;                                     // 0x02A9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _TraceFindInitialOverlaps;                         // 0x02AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _TraceIgnoreMask;                                  // 0x02AB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         _TraceIgnoreActors;                                // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         _TraceRadius;                                      // 0x02C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _TraceUpLength;                                    // 0x02C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _TraceDownLength;                                  // 0x02C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CC[0x4];                                      // 0x02CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   _FootstepClass;                                    // 0x02D0(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ABeingFootstep>             _FootstepClassInstance;                            // 0x0300(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ABeingFootstep>             _FootstepsTemplate;                                // 0x0308(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _FootSockets[0x4];                                 // 0x0310(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _MinStepPeriod;                                    // 0x0330(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _SingleEffect;                                     // 0x0334(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _IgnoreNextFalling;                                // 0x0335(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _TraceFoliage;                                     // 0x0336(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_337[0x1];                                      // 0x0337(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EPhysicalSurface, int32>                 _FootstepRepeatableOverride;                       // 0x0338(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          _MuteFootstep;                                     // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_389[0x7];                                      // 0x0389(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFootstepLoudness                      _FootstepLoudness[0x3];                            // 0x0390(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         _TurnLoudnessMod;                                  // 0x03D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              _LastFootSurface[0x5];                             // 0x03DC(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E1[0x7];                                      // 0x03E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             _OnFootstep;                                       // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _OnWadingFootprint;                                // 0x03F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     _MaskMaterial;                                     // 0x0408(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     _TrailsMaterial;                                   // 0x0410(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _FootstepDrawTrails;                               // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_419[0x3];                                      // 0x0419(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _FootstepQuadSize;                                 // 0x041C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _TrailQuadSize;                                    // 0x0420(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _TrailQuadWidth;                                   // 0x0424(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _FootstepQuadYScale;                               // 0x0428(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42C[0x4];                                      // 0x042C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              _FootstepDirectionalOffset;                        // 0x0430(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              _FootstepLocationOffset;                           // 0x0440(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _FootstepAngleOffset;                              // 0x0450(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _TrailsTiling;                                     // 0x0454(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _TrailsAngleOffset;                                // 0x0458(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _FootstepCanvasDensity;                            // 0x045C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _FootstepHeightLimit;                              // 0x0460(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _FootstepLifeTime;                                 // 0x0464(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _FootstepsLimit;                                   // 0x0468(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _TrailsLimit;                                      // 0x046C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _DrawFootstepsMask;                                // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _WadingSoundLoopEnabled;                           // 0x0471(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EPhysicalSurface                              _LastWadingSurface;                                // 0x0472(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_473[0x1];                                      // 0x0473(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _LastWadingDepth;                                  // 0x0474(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ABeingFootstep*                         _LastWadingFootstep;                               // 0x0478(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFXSystemComponent*                     _WadingParticle;                                   // 0x0480(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ABeingFootstep*                         _WadingParticleCaller;                             // 0x0488(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _WadingParticleTimer;                              // 0x0490(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_494[0x5];                                      // 0x0494(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _TerrainTexturesMapInitialized;                    // 0x0499(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_49A[0x6];                                      // 0x049A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             _TerrainTexturesMap;                               // 0x04A0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<uint64, class UPhysicalMaterial*>        _TerrainTextureCache;                              // 0x04A8(0x0050)(Transient, NativeAccessSpecifierPrivate)
	struct FDateTime                              _WadingTimestamp;                                  // 0x04F8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_500[0x70];                                     // 0x0500(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetWadingDepth() const;
	EPhysicalSurface GetWadingSurface() const;
	bool IsOnSurface(EPhysicalSurface Surface) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingFootstepTracer">();
	}
	static class UBeingFootstepTracer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingFootstepTracer>();
	}
};
static_assert(alignof(UBeingFootstepTracer) == 0x000010, "Wrong alignment on UBeingFootstepTracer");
static_assert(sizeof(UBeingFootstepTracer) == 0x000570, "Wrong size on UBeingFootstepTracer");
static_assert(offsetof(UBeingFootstepTracer, _TraceChannel) == 0x0002A8, "Member 'UBeingFootstepTracer::_TraceChannel' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _TraceComplex) == 0x0002A9, "Member 'UBeingFootstepTracer::_TraceComplex' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _TraceFindInitialOverlaps) == 0x0002AA, "Member 'UBeingFootstepTracer::_TraceFindInitialOverlaps' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _TraceIgnoreMask) == 0x0002AB, "Member 'UBeingFootstepTracer::_TraceIgnoreMask' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _TraceIgnoreActors) == 0x0002B0, "Member 'UBeingFootstepTracer::_TraceIgnoreActors' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _TraceRadius) == 0x0002C0, "Member 'UBeingFootstepTracer::_TraceRadius' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _TraceUpLength) == 0x0002C4, "Member 'UBeingFootstepTracer::_TraceUpLength' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _TraceDownLength) == 0x0002C8, "Member 'UBeingFootstepTracer::_TraceDownLength' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _FootstepClass) == 0x0002D0, "Member 'UBeingFootstepTracer::_FootstepClass' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _FootstepClassInstance) == 0x000300, "Member 'UBeingFootstepTracer::_FootstepClassInstance' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _FootstepsTemplate) == 0x000308, "Member 'UBeingFootstepTracer::_FootstepsTemplate' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _FootSockets) == 0x000310, "Member 'UBeingFootstepTracer::_FootSockets' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _MinStepPeriod) == 0x000330, "Member 'UBeingFootstepTracer::_MinStepPeriod' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _SingleEffect) == 0x000334, "Member 'UBeingFootstepTracer::_SingleEffect' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _IgnoreNextFalling) == 0x000335, "Member 'UBeingFootstepTracer::_IgnoreNextFalling' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _TraceFoliage) == 0x000336, "Member 'UBeingFootstepTracer::_TraceFoliage' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _FootstepRepeatableOverride) == 0x000338, "Member 'UBeingFootstepTracer::_FootstepRepeatableOverride' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _MuteFootstep) == 0x000388, "Member 'UBeingFootstepTracer::_MuteFootstep' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _FootstepLoudness) == 0x000390, "Member 'UBeingFootstepTracer::_FootstepLoudness' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _TurnLoudnessMod) == 0x0003D8, "Member 'UBeingFootstepTracer::_TurnLoudnessMod' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _LastFootSurface) == 0x0003DC, "Member 'UBeingFootstepTracer::_LastFootSurface' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _OnFootstep) == 0x0003E8, "Member 'UBeingFootstepTracer::_OnFootstep' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _OnWadingFootprint) == 0x0003F8, "Member 'UBeingFootstepTracer::_OnWadingFootprint' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _MaskMaterial) == 0x000408, "Member 'UBeingFootstepTracer::_MaskMaterial' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _TrailsMaterial) == 0x000410, "Member 'UBeingFootstepTracer::_TrailsMaterial' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _FootstepDrawTrails) == 0x000418, "Member 'UBeingFootstepTracer::_FootstepDrawTrails' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _FootstepQuadSize) == 0x00041C, "Member 'UBeingFootstepTracer::_FootstepQuadSize' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _TrailQuadSize) == 0x000420, "Member 'UBeingFootstepTracer::_TrailQuadSize' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _TrailQuadWidth) == 0x000424, "Member 'UBeingFootstepTracer::_TrailQuadWidth' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _FootstepQuadYScale) == 0x000428, "Member 'UBeingFootstepTracer::_FootstepQuadYScale' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _FootstepDirectionalOffset) == 0x000430, "Member 'UBeingFootstepTracer::_FootstepDirectionalOffset' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _FootstepLocationOffset) == 0x000440, "Member 'UBeingFootstepTracer::_FootstepLocationOffset' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _FootstepAngleOffset) == 0x000450, "Member 'UBeingFootstepTracer::_FootstepAngleOffset' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _TrailsTiling) == 0x000454, "Member 'UBeingFootstepTracer::_TrailsTiling' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _TrailsAngleOffset) == 0x000458, "Member 'UBeingFootstepTracer::_TrailsAngleOffset' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _FootstepCanvasDensity) == 0x00045C, "Member 'UBeingFootstepTracer::_FootstepCanvasDensity' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _FootstepHeightLimit) == 0x000460, "Member 'UBeingFootstepTracer::_FootstepHeightLimit' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _FootstepLifeTime) == 0x000464, "Member 'UBeingFootstepTracer::_FootstepLifeTime' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _FootstepsLimit) == 0x000468, "Member 'UBeingFootstepTracer::_FootstepsLimit' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _TrailsLimit) == 0x00046C, "Member 'UBeingFootstepTracer::_TrailsLimit' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _DrawFootstepsMask) == 0x000470, "Member 'UBeingFootstepTracer::_DrawFootstepsMask' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _WadingSoundLoopEnabled) == 0x000471, "Member 'UBeingFootstepTracer::_WadingSoundLoopEnabled' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _LastWadingSurface) == 0x000472, "Member 'UBeingFootstepTracer::_LastWadingSurface' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _LastWadingDepth) == 0x000474, "Member 'UBeingFootstepTracer::_LastWadingDepth' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _LastWadingFootstep) == 0x000478, "Member 'UBeingFootstepTracer::_LastWadingFootstep' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _WadingParticle) == 0x000480, "Member 'UBeingFootstepTracer::_WadingParticle' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _WadingParticleCaller) == 0x000488, "Member 'UBeingFootstepTracer::_WadingParticleCaller' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _WadingParticleTimer) == 0x000490, "Member 'UBeingFootstepTracer::_WadingParticleTimer' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _TerrainTexturesMapInitialized) == 0x000499, "Member 'UBeingFootstepTracer::_TerrainTexturesMapInitialized' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _TerrainTexturesMap) == 0x0004A0, "Member 'UBeingFootstepTracer::_TerrainTexturesMap' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _TerrainTextureCache) == 0x0004A8, "Member 'UBeingFootstepTracer::_TerrainTextureCache' has a wrong offset!");
static_assert(offsetof(UBeingFootstepTracer, _WadingTimestamp) == 0x0004F8, "Member 'UBeingFootstepTracer::_WadingTimestamp' has a wrong offset!");

// Class Being.FootstepMarker
// 0x0010 (0x02B0 - 0x02A0)
class UFootstepMarker final : public USceneComponent
{
public:
	float                                         MarkerRadius;                                      // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      PhysMaterial;                                      // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FootstepMarker">();
	}
	static class UFootstepMarker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFootstepMarker>();
	}
};
static_assert(alignof(UFootstepMarker) == 0x000010, "Wrong alignment on UFootstepMarker");
static_assert(sizeof(UFootstepMarker) == 0x0002B0, "Wrong size on UFootstepMarker");
static_assert(offsetof(UFootstepMarker, MarkerRadius) == 0x0002A0, "Member 'UFootstepMarker::MarkerRadius' has a wrong offset!");
static_assert(offsetof(UFootstepMarker, PhysMaterial) == 0x0002A8, "Member 'UFootstepMarker::PhysMaterial' has a wrong offset!");

// Class Being.PeriodFootstepTracer
// 0x0060 (0x05D0 - 0x0570)
class UPeriodFootstepTracer final : public UBeingFootstepTracer
{
public:
	TMap<EBeingWalkingStance, float>              _Period;                                           // 0x0570(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         _DefaultPeriod;                                    // 0x05C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBeingWalkingStance                           _CurrentStance;                                    // 0x05C4(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C5[0xB];                                      // 0x05C5(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PeriodFootstepTracer">();
	}
	static class UPeriodFootstepTracer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPeriodFootstepTracer>();
	}
};
static_assert(alignof(UPeriodFootstepTracer) == 0x000010, "Wrong alignment on UPeriodFootstepTracer");
static_assert(sizeof(UPeriodFootstepTracer) == 0x0005D0, "Wrong size on UPeriodFootstepTracer");
static_assert(offsetof(UPeriodFootstepTracer, _Period) == 0x000570, "Member 'UPeriodFootstepTracer::_Period' has a wrong offset!");
static_assert(offsetof(UPeriodFootstepTracer, _DefaultPeriod) == 0x0005C0, "Member 'UPeriodFootstepTracer::_DefaultPeriod' has a wrong offset!");
static_assert(offsetof(UPeriodFootstepTracer, _CurrentStance) == 0x0005C4, "Member 'UPeriodFootstepTracer::_CurrentStance' has a wrong offset!");

// Class Being.BeingFootstepPersonalization
// 0x0000 (0x0028 - 0x0028)
class IBeingFootstepPersonalization final : public IInterface
{
public:
	void FootstepCreated(class ABeingFootstep* Footstep) const;
	ESoundMovement GetSoundMovement() const;
	EVerticalStance GetVerticalStance() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingFootstepPersonalization">();
	}
	static class IBeingFootstepPersonalization* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBeingFootstepPersonalization>();
	}
};
static_assert(alignof(IBeingFootstepPersonalization) == 0x000008, "Wrong alignment on IBeingFootstepPersonalization");
static_assert(sizeof(IBeingFootstepPersonalization) == 0x000028, "Wrong size on IBeingFootstepPersonalization");

// Class Being.BeingFootstepVPUserData
// 0x0058 (0x0080 - 0x0028)
class UBeingFootstepVPUserData final : public UAssetUserData
{
public:
	EVPDataEvaluatorType                          Evaluator;                                         // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SingleChannelMask;                                 // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePuddles;                                        // 0x002A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ContrastBoost;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           HeightSensitivity;                                 // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           HeightAvg;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVPDataSourceChannel                          SourceChannel;                                     // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      Channel0;                                          // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      Channel1;                                          // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      Channel2;                                          // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      Channel3;                                          // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      Puddles;                                           // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingFootstepVPUserData">();
	}
	static class UBeingFootstepVPUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingFootstepVPUserData>();
	}
};
static_assert(alignof(UBeingFootstepVPUserData) == 0x000008, "Wrong alignment on UBeingFootstepVPUserData");
static_assert(sizeof(UBeingFootstepVPUserData) == 0x000080, "Wrong size on UBeingFootstepVPUserData");
static_assert(offsetof(UBeingFootstepVPUserData, Evaluator) == 0x000028, "Member 'UBeingFootstepVPUserData::Evaluator' has a wrong offset!");
static_assert(offsetof(UBeingFootstepVPUserData, SingleChannelMask) == 0x000029, "Member 'UBeingFootstepVPUserData::SingleChannelMask' has a wrong offset!");
static_assert(offsetof(UBeingFootstepVPUserData, UsePuddles) == 0x00002A, "Member 'UBeingFootstepVPUserData::UsePuddles' has a wrong offset!");
static_assert(offsetof(UBeingFootstepVPUserData, ContrastBoost) == 0x00002C, "Member 'UBeingFootstepVPUserData::ContrastBoost' has a wrong offset!");
static_assert(offsetof(UBeingFootstepVPUserData, HeightSensitivity) == 0x000030, "Member 'UBeingFootstepVPUserData::HeightSensitivity' has a wrong offset!");
static_assert(offsetof(UBeingFootstepVPUserData, HeightAvg) == 0x000040, "Member 'UBeingFootstepVPUserData::HeightAvg' has a wrong offset!");
static_assert(offsetof(UBeingFootstepVPUserData, SourceChannel) == 0x000050, "Member 'UBeingFootstepVPUserData::SourceChannel' has a wrong offset!");
static_assert(offsetof(UBeingFootstepVPUserData, Channel0) == 0x000058, "Member 'UBeingFootstepVPUserData::Channel0' has a wrong offset!");
static_assert(offsetof(UBeingFootstepVPUserData, Channel1) == 0x000060, "Member 'UBeingFootstepVPUserData::Channel1' has a wrong offset!");
static_assert(offsetof(UBeingFootstepVPUserData, Channel2) == 0x000068, "Member 'UBeingFootstepVPUserData::Channel2' has a wrong offset!");
static_assert(offsetof(UBeingFootstepVPUserData, Channel3) == 0x000070, "Member 'UBeingFootstepVPUserData::Channel3' has a wrong offset!");
static_assert(offsetof(UBeingFootstepVPUserData, Puddles) == 0x000078, "Member 'UBeingFootstepVPUserData::Puddles' has a wrong offset!");

// Class Being.BeingFunctions
// 0x0000 (0x0028 - 0x0028)
class UBeingFunctions final : public UBlueprintFunctionLibrary
{
public:
	static struct FVector ChangeDirectionSpace(const struct FVector& Forward, const struct FVector& Right, const struct FVector& Up, const struct FVector& Direction);
	static struct FRotator ChangeRotationSpace(const struct FVector& Forward, const struct FVector& Right, const struct FVector& Up, const struct FRotator& Rotation);
	static bool ChangeWalkingStanceEnum(class APawn* Being, EBeingWalkingStance Stance, uint8 Priority);
	static void ClearWalkingStanceEnum(class APawn* Being, uint8 Priority);
	static void FastRotate(class APawn* Being, float DeltaSeconds, float LocalYaw, float MinYaw, float MaxYaw, float InterpSpeed);
	static float FindDistanceToWall(class APawn* Being, const struct FVector& InLocation, struct FVector* NearestPoint);
	static bool FindLocationNearWall(class APawn* Being, float MinDistance, struct FVector* Location);
	static void ForceRollRotation(class APawn* Being, float DeltaSeconds, float LocalYaw, float YawMul, float InterpSpeed);
	static void ForceYawRotation(class APawn* Being, float DeltaSeconds, float LocalYaw, float ClampYaw, float InterpSpeed);
	static class AController* GetController(class AActor* Actor);
	static struct FVector GetDesiredVelocity(const class APawn* Being);
	static struct FVector GetGroundLocation(class AActor* Actor);
	static class APawn* GetPawn(class AActor* Actor);
	static struct FVector GetRequestedVelocity(const class APawn* Being);
	static EBeingWalkingStance GetWalkingStanceEnum(class APawn* Being);
	static EBeingWalkType GetWalkingStanceType(EBeingWalkingStance Stance);
	static void IgnoreNextFalling(class APawn* Being);
	static bool IsFollowingAPath(const class APawn* Being);
	static struct FQuat MakeQuatFromAxes(const struct FVector& Forward, const struct FVector& Right, const struct FVector& Up);
	static void MuteFootsteps(class APawn* Being, bool Mute);
	static void PutOnGround(class APawn* Being, float Time);
	static void SetComponentMaskFilter(class UPrimitiveComponent* Primitive, uint8 MaskFilter);
	static void SetComponentMoveIgnoreMask(class UPrimitiveComponent* Primitive, uint8 Mask);
	static void SetMaskFilter(class AActor* Actor, uint8 MaskFilter);
	static void SetMoveIgnoreMask(class AActor* Actor, uint8 Mask);
	static void SetRootMotionTranslationScale(class APawn* Being, float Scale);
	static float TickableFloatGet(const struct FTickableFloat& Tfloat);
	static void TickableFloatSet(struct FTickableFloat& Tfloat, float Value);
	static void TickableFloatSetInTime(struct FTickableFloat& Tfloat, float Value, float Duration);
	static void TickableFloatSetWithStep(struct FTickableFloat& Tfloat, float Value, float Step);
	static void TickableFloatTick(struct FTickableFloat& Tfloat, float Deltasec);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingFunctions">();
	}
	static class UBeingFunctions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingFunctions>();
	}
};
static_assert(alignof(UBeingFunctions) == 0x000008, "Wrong alignment on UBeingFunctions");
static_assert(sizeof(UBeingFunctions) == 0x000028, "Wrong size on UBeingFunctions");

// Class Being.BeingHearingLevelStat
// 0x0020 (0x0100 - 0x00E0)
class UBeingHearingLevelStat : public UBeingStat
{
public:
	float                                         _HearingLevel;                                     // 0x00E0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _HearableNoiseLevel;                               // 0x00E4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           _NoisesList;                                       // 0x00E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          _IgnoreNoisesFromList;                             // 0x00F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHearableNoiseLevel(float Value);
	void SetHearingLevel(float Value);

	float GetHearableNoiseLevel() const;
	float GetHearingLevel() const;
	float GetHearingLevelTheActor(class AActor* Actor) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingHearingLevelStat">();
	}
	static class UBeingHearingLevelStat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingHearingLevelStat>();
	}
};
static_assert(alignof(UBeingHearingLevelStat) == 0x000008, "Wrong alignment on UBeingHearingLevelStat");
static_assert(sizeof(UBeingHearingLevelStat) == 0x000100, "Wrong size on UBeingHearingLevelStat");
static_assert(offsetof(UBeingHearingLevelStat, _HearingLevel) == 0x0000E0, "Member 'UBeingHearingLevelStat::_HearingLevel' has a wrong offset!");
static_assert(offsetof(UBeingHearingLevelStat, _HearableNoiseLevel) == 0x0000E4, "Member 'UBeingHearingLevelStat::_HearableNoiseLevel' has a wrong offset!");
static_assert(offsetof(UBeingHearingLevelStat, _NoisesList) == 0x0000E8, "Member 'UBeingHearingLevelStat::_NoisesList' has a wrong offset!");
static_assert(offsetof(UBeingHearingLevelStat, _IgnoreNoisesFromList) == 0x0000F8, "Member 'UBeingHearingLevelStat::_IgnoreNoisesFromList' has a wrong offset!");

// Class Being.BeingHearingModStat
// 0x0018 (0x0118 - 0x0100)
class UBeingHearingModStat final : public UBeingHearingLevelStat
{
public:
	int32                                         _ModLevel;                                         // 0x0100(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 _Modifiers;                                        // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	void SetModLevel(int32 Level);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingHearingModStat">();
	}
	static class UBeingHearingModStat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingHearingModStat>();
	}
};
static_assert(alignof(UBeingHearingModStat) == 0x000008, "Wrong alignment on UBeingHearingModStat");
static_assert(sizeof(UBeingHearingModStat) == 0x000118, "Wrong size on UBeingHearingModStat");
static_assert(offsetof(UBeingHearingModStat, _ModLevel) == 0x000100, "Member 'UBeingHearingModStat::_ModLevel' has a wrong offset!");
static_assert(offsetof(UBeingHearingModStat, _Modifiers) == 0x000108, "Member 'UBeingHearingModStat::_Modifiers' has a wrong offset!");

// Class Being.BeingIgnoreMeStat
// 0x0020 (0x0100 - 0x00E0)
class UBeingIgnoreMeStat final : public UBeingStat
{
public:
	bool                                          _IgnoreMe;                                         // 0x00E0(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _IsDead;                                           // 0x00E1(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _AlwaysMissMe;                                     // 0x00E2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E3[0x5];                                       // 0x00E3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDaiBlockade                           _IgnoreMeReasons;                                  // 0x00E8(0x0018)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ClearIgnoreMeReason(class FName Reason);
	void SetAlwaysMissMe(bool MissMe);
	void SetIgnoreMeReason(class FName Reason);
	void SetIsDead(bool IsDead);

	bool GetAlwaysMissMe() const;
	bool GetIgnoreMe() const;
	bool GetIsDead() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingIgnoreMeStat">();
	}
	static class UBeingIgnoreMeStat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingIgnoreMeStat>();
	}
};
static_assert(alignof(UBeingIgnoreMeStat) == 0x000008, "Wrong alignment on UBeingIgnoreMeStat");
static_assert(sizeof(UBeingIgnoreMeStat) == 0x000100, "Wrong size on UBeingIgnoreMeStat");
static_assert(offsetof(UBeingIgnoreMeStat, _IgnoreMe) == 0x0000E0, "Member 'UBeingIgnoreMeStat::_IgnoreMe' has a wrong offset!");
static_assert(offsetof(UBeingIgnoreMeStat, _IsDead) == 0x0000E1, "Member 'UBeingIgnoreMeStat::_IsDead' has a wrong offset!");
static_assert(offsetof(UBeingIgnoreMeStat, _AlwaysMissMe) == 0x0000E2, "Member 'UBeingIgnoreMeStat::_AlwaysMissMe' has a wrong offset!");
static_assert(offsetof(UBeingIgnoreMeStat, _IgnoreMeReasons) == 0x0000E8, "Member 'UBeingIgnoreMeStat::_IgnoreMeReasons' has a wrong offset!");

// Class Being.BeingLocationTracker
// 0x0018 (0x00B8 - 0x00A0)
class UBeingLocationTracker final : public UActorComponent
{
public:
	int32                                         _LocationCountLimit;                               // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _LocationDistance;                                 // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FVector>                        _Locations;                                        // 0x00A8(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, NativeAccessSpecifierPrivate)

public:
	const TArray<struct FVector> GetLocationHistory() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingLocationTracker">();
	}
	static class UBeingLocationTracker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingLocationTracker>();
	}
};
static_assert(alignof(UBeingLocationTracker) == 0x000008, "Wrong alignment on UBeingLocationTracker");
static_assert(sizeof(UBeingLocationTracker) == 0x0000B8, "Wrong size on UBeingLocationTracker");
static_assert(offsetof(UBeingLocationTracker, _LocationCountLimit) == 0x0000A0, "Member 'UBeingLocationTracker::_LocationCountLimit' has a wrong offset!");
static_assert(offsetof(UBeingLocationTracker, _LocationDistance) == 0x0000A4, "Member 'UBeingLocationTracker::_LocationDistance' has a wrong offset!");
static_assert(offsetof(UBeingLocationTracker, _Locations) == 0x0000A8, "Member 'UBeingLocationTracker::_Locations' has a wrong offset!");

// Class Being.BeingMaxSpeedStat
// 0x0008 (0x00E8 - 0x00E0)
class UBeingMaxSpeedStat : public UBeingStat
{
public:
	float                                         _MaxSpeed;                                         // 0x00E0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetMaxSpeed(float Value);

	float GetMaxSpeed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingMaxSpeedStat">();
	}
	static class UBeingMaxSpeedStat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingMaxSpeedStat>();
	}
};
static_assert(alignof(UBeingMaxSpeedStat) == 0x000008, "Wrong alignment on UBeingMaxSpeedStat");
static_assert(sizeof(UBeingMaxSpeedStat) == 0x0000E8, "Wrong size on UBeingMaxSpeedStat");
static_assert(offsetof(UBeingMaxSpeedStat, _MaxSpeed) == 0x0000E0, "Member 'UBeingMaxSpeedStat::_MaxSpeed' has a wrong offset!");

// Class Being.BeingMaxWalkSpeedStat
// 0x0068 (0x0150 - 0x00E8)
class UBeingMaxWalkSpeedStat final : public UBeingMaxSpeedStat
{
public:
	TArray<EBeingWalkingStance>                   _Priorities;                                       // 0x00E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, AdvancedDisplay, NativeAccessSpecifierPrivate)
	uint8                                         _StancePriority;                                   // 0x00F8(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EBeingWalkingStance                           _WalkingStance;                                    // 0x00F9(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_FA[0x6];                                       // 0x00FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EBeingWalkingStance, float>              _MaxSpeeds;                                        // 0x0100(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void OverrideSpeedValues(const TMap<EBeingWalkingStance, float>& MaxSpeeds);
	void SetWalkingStance(EBeingWalkingStance Stance, uint8 Priority);

	float GetTotalMaxSpeed() const;
	EBeingWalkingStance GetWalkingStance() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingMaxWalkSpeedStat">();
	}
	static class UBeingMaxWalkSpeedStat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingMaxWalkSpeedStat>();
	}
};
static_assert(alignof(UBeingMaxWalkSpeedStat) == 0x000008, "Wrong alignment on UBeingMaxWalkSpeedStat");
static_assert(sizeof(UBeingMaxWalkSpeedStat) == 0x000150, "Wrong size on UBeingMaxWalkSpeedStat");
static_assert(offsetof(UBeingMaxWalkSpeedStat, _Priorities) == 0x0000E8, "Member 'UBeingMaxWalkSpeedStat::_Priorities' has a wrong offset!");
static_assert(offsetof(UBeingMaxWalkSpeedStat, _StancePriority) == 0x0000F8, "Member 'UBeingMaxWalkSpeedStat::_StancePriority' has a wrong offset!");
static_assert(offsetof(UBeingMaxWalkSpeedStat, _WalkingStance) == 0x0000F9, "Member 'UBeingMaxWalkSpeedStat::_WalkingStance' has a wrong offset!");
static_assert(offsetof(UBeingMaxWalkSpeedStat, _MaxSpeeds) == 0x000100, "Member 'UBeingMaxWalkSpeedStat::_MaxSpeeds' has a wrong offset!");

// Class Being.BeingNoiseLevelStat
// 0x0018 (0x00F8 - 0x00E0)
class UBeingNoiseLevelStat : public UBeingStat
{
public:
	float                                         _NoiseLevel;                                       // 0x00E0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           _MutedNoises;                                      // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void SetNoiseLevel(float Value);

	float GetNoiseLevel() const;
	float IsNoiseMuted(class FName NoiseTag) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingNoiseLevelStat">();
	}
	static class UBeingNoiseLevelStat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingNoiseLevelStat>();
	}
};
static_assert(alignof(UBeingNoiseLevelStat) == 0x000008, "Wrong alignment on UBeingNoiseLevelStat");
static_assert(sizeof(UBeingNoiseLevelStat) == 0x0000F8, "Wrong size on UBeingNoiseLevelStat");
static_assert(offsetof(UBeingNoiseLevelStat, _NoiseLevel) == 0x0000E0, "Member 'UBeingNoiseLevelStat::_NoiseLevel' has a wrong offset!");
static_assert(offsetof(UBeingNoiseLevelStat, _MutedNoises) == 0x0000E8, "Member 'UBeingNoiseLevelStat::_MutedNoises' has a wrong offset!");

// Class Being.BeingNoiseModStat
// 0x0018 (0x0110 - 0x00F8)
class UBeingNoiseModStat final : public UBeingNoiseLevelStat
{
public:
	int32                                         _ModLevel;                                         // 0x00F8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 _Modifiers;                                        // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	void SetModLevel(int32 Level);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingNoiseModStat">();
	}
	static class UBeingNoiseModStat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingNoiseModStat>();
	}
};
static_assert(alignof(UBeingNoiseModStat) == 0x000008, "Wrong alignment on UBeingNoiseModStat");
static_assert(sizeof(UBeingNoiseModStat) == 0x000110, "Wrong size on UBeingNoiseModStat");
static_assert(offsetof(UBeingNoiseModStat, _ModLevel) == 0x0000F8, "Member 'UBeingNoiseModStat::_ModLevel' has a wrong offset!");
static_assert(offsetof(UBeingNoiseModStat, _Modifiers) == 0x000100, "Member 'UBeingNoiseModStat::_Modifiers' has a wrong offset!");

// Class Being.BeingOdorLevelStat
// 0x0008 (0x00E8 - 0x00E0)
class UBeingOdorLevelStat : public UBeingStat
{
public:
	float                                         _OdorLevel;                                        // 0x00E0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetOdorLevel(float Value);

	float GetOdorLevel() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingOdorLevelStat">();
	}
	static class UBeingOdorLevelStat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingOdorLevelStat>();
	}
};
static_assert(alignof(UBeingOdorLevelStat) == 0x000008, "Wrong alignment on UBeingOdorLevelStat");
static_assert(sizeof(UBeingOdorLevelStat) == 0x0000E8, "Wrong size on UBeingOdorLevelStat");
static_assert(offsetof(UBeingOdorLevelStat, _OdorLevel) == 0x0000E0, "Member 'UBeingOdorLevelStat::_OdorLevel' has a wrong offset!");

// Class Being.BeingOdorModStat
// 0x0018 (0x0100 - 0x00E8)
class UBeingOdorModStat final : public UBeingOdorLevelStat
{
public:
	int32                                         _ModLevel;                                         // 0x00E8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 _Modifiers;                                        // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	void SetModLevel(int32 Level);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingOdorModStat">();
	}
	static class UBeingOdorModStat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingOdorModStat>();
	}
};
static_assert(alignof(UBeingOdorModStat) == 0x000008, "Wrong alignment on UBeingOdorModStat");
static_assert(sizeof(UBeingOdorModStat) == 0x000100, "Wrong size on UBeingOdorModStat");
static_assert(offsetof(UBeingOdorModStat, _ModLevel) == 0x0000E8, "Member 'UBeingOdorModStat::_ModLevel' has a wrong offset!");
static_assert(offsetof(UBeingOdorModStat, _Modifiers) == 0x0000F0, "Member 'UBeingOdorModStat::_Modifiers' has a wrong offset!");

// Class Being.BeingRootMotionData
// 0x0148 (0x0178 - 0x0030)
class UBeingRootMotionData final : public UDataAsset
{
public:
	int32                                         _MaxFramesPerSecond;                               // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _Precision;                                        // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  _AnimTags;                                         // 0x0038(0x0020)(Edit, NativeAccessSpecifierPrivate)
	TArray<class UDataTable*>                     _AnimTable;                                        // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UAnimSequence*>                  _Animations;                                       // 0x0068(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<class UBlendSpace*>                    _Blendspaces;                                      // 0x0078(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TMap<class UAnimationAsset*, struct FAnimationRootMotion> _AnimRootMotion;                                   // 0x0088(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class UBlendSpace*, struct FBlendSpaceRootMotion> _BSRootMotion;                                     // 0x00D8(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FName, struct FTaggedAnimationTransform> _BonesTransform;                                   // 0x0128(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	void GrabBones();
	void GrabMotion();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingRootMotionData">();
	}
	static class UBeingRootMotionData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingRootMotionData>();
	}
};
static_assert(alignof(UBeingRootMotionData) == 0x000008, "Wrong alignment on UBeingRootMotionData");
static_assert(sizeof(UBeingRootMotionData) == 0x000178, "Wrong size on UBeingRootMotionData");
static_assert(offsetof(UBeingRootMotionData, _MaxFramesPerSecond) == 0x000030, "Member 'UBeingRootMotionData::_MaxFramesPerSecond' has a wrong offset!");
static_assert(offsetof(UBeingRootMotionData, _Precision) == 0x000034, "Member 'UBeingRootMotionData::_Precision' has a wrong offset!");
static_assert(offsetof(UBeingRootMotionData, _AnimTags) == 0x000038, "Member 'UBeingRootMotionData::_AnimTags' has a wrong offset!");
static_assert(offsetof(UBeingRootMotionData, _AnimTable) == 0x000058, "Member 'UBeingRootMotionData::_AnimTable' has a wrong offset!");
static_assert(offsetof(UBeingRootMotionData, _Animations) == 0x000068, "Member 'UBeingRootMotionData::_Animations' has a wrong offset!");
static_assert(offsetof(UBeingRootMotionData, _Blendspaces) == 0x000078, "Member 'UBeingRootMotionData::_Blendspaces' has a wrong offset!");
static_assert(offsetof(UBeingRootMotionData, _AnimRootMotion) == 0x000088, "Member 'UBeingRootMotionData::_AnimRootMotion' has a wrong offset!");
static_assert(offsetof(UBeingRootMotionData, _BSRootMotion) == 0x0000D8, "Member 'UBeingRootMotionData::_BSRootMotion' has a wrong offset!");
static_assert(offsetof(UBeingRootMotionData, _BonesTransform) == 0x000128, "Member 'UBeingRootMotionData::_BonesTransform' has a wrong offset!");

// Class Being.BeingRootMotionBank
// 0x01C8 (0x0268 - 0x00A0)
class UBeingRootMotionBank final : public UActorComponent
{
public:
	TSoftObjectPtr<class UBeingRootMotionData>    _RootMotionDataAsset;                              // 0x00A0(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBeingRootMotionData*                   _RootMotionData;                                   // 0x00D0(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _MinSpeed;                                         // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _MaxSpeed;                                         // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _SpeedStep;                                        // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStamp>                         _Stamps;                                           // 0x00E8(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, AdvancedDisplay, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        _DebugAssetRM;                                     // 0x00F8(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _DebugDrawSpeed;                                   // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _DebugDrawBSYaw;                                   // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _DebugDrawDuration;                                // 0x0108(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _DebugDrawOffset;                                  // 0x010C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _MaxStampCount;                                    // 0x0110(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 _DebugTarget;                                      // 0x0118(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _MaxFramesPerSecond;                               // 0x0120(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _Precision;                                        // 0x0124(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  _AnimTags;                                         // 0x0128(0x0020)(Edit, NativeAccessSpecifierPublic)
	TArray<class UDataTable*>                     _AnimTable;                                        // 0x0148(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAnimSequence*>                  _Animations;                                       // 0x0158(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UBlendSpace*>                    _Blendspaces;                                      // 0x0168(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class UAnimationAsset*, struct FAnimationRootMotion> _AnimRootMotion;                                   // 0x0178(0x0050)(Edit, DisableEditOnInstance, AdvancedDisplay, NativeAccessSpecifierPublic)
	TMap<class UBlendSpace*, struct FBlendSpaceRootMotion> _BSRootMotion;                                     // 0x01C8(0x0050)(Edit, DisableEditOnInstance, AdvancedDisplay, NativeAccessSpecifierPublic)
	TMap<class FName, struct FTaggedAnimationTransform> _BonesTransform;                                   // 0x0218(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	void DebugStamp();
	void Stamp(const class UAnimSequence* Animation, const struct FLinearColor& Color);
	void StampBS(const class UBlendSpace* BlendSpace, float Yaw, const struct FVector& TargetLocation, const struct FLinearColor& Color);

	bool CanGotoWithBlendspace(const class UBlendSpace* BlendSpace, const struct FVector& Location, float Distance, TSubclassOf<class UNavigationQueryFilter> FilterClass) const;
	bool CanGoWithAnim(const class UAnimSequence* Animation, float Distance, TSubclassOf<class UNavigationQueryFilter> FilterClass) const;
	bool CanGoWithBlendspace(const class UBlendSpace* BlendSpace, float Yaw, float Distance, TSubclassOf<class UNavigationQueryFilter> FilterClass) const;
	float FindBestAngleForBlendSpace(const class UBlendSpace* BlendSpace, const struct FVector& Location) const;
	float FindBestSpeedForAnim(const class UAnimSequence* Animation, const struct FVector& Location) const;
	float FindBestSpeedForBlendSpace(const class UBlendSpace* BlendSpace, const struct FVector& Location) const;
	bool GetBoneFinalTransform(const class UAnimSequence* AnimationSequence, class FName BoneName, struct FTransform* Transform) const;
	bool GetBoneInitialTransform(const class UAnimSequence* AnimationSequence, class FName BoneName, struct FTransform* Transform) const;
	bool GetBoneMovement(const class UAnimSequence* AnimationSequence, class FName BoneName, struct FTransform* Movement) const;
	struct FVector GetLocalOffset(const class UAnimSequence* Animation) const;
	bool TryGetRootMotionData(const class UAnimSequence* Animation, struct FAnimationRootMotion* Outdata, bool InActorRotation) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingRootMotionBank">();
	}
	static class UBeingRootMotionBank* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingRootMotionBank>();
	}
};
static_assert(alignof(UBeingRootMotionBank) == 0x000008, "Wrong alignment on UBeingRootMotionBank");
static_assert(sizeof(UBeingRootMotionBank) == 0x000268, "Wrong size on UBeingRootMotionBank");
static_assert(offsetof(UBeingRootMotionBank, _RootMotionDataAsset) == 0x0000A0, "Member 'UBeingRootMotionBank::_RootMotionDataAsset' has a wrong offset!");
static_assert(offsetof(UBeingRootMotionBank, _RootMotionData) == 0x0000D0, "Member 'UBeingRootMotionBank::_RootMotionData' has a wrong offset!");
static_assert(offsetof(UBeingRootMotionBank, _MinSpeed) == 0x0000D8, "Member 'UBeingRootMotionBank::_MinSpeed' has a wrong offset!");
static_assert(offsetof(UBeingRootMotionBank, _MaxSpeed) == 0x0000DC, "Member 'UBeingRootMotionBank::_MaxSpeed' has a wrong offset!");
static_assert(offsetof(UBeingRootMotionBank, _SpeedStep) == 0x0000E0, "Member 'UBeingRootMotionBank::_SpeedStep' has a wrong offset!");
static_assert(offsetof(UBeingRootMotionBank, _Stamps) == 0x0000E8, "Member 'UBeingRootMotionBank::_Stamps' has a wrong offset!");
static_assert(offsetof(UBeingRootMotionBank, _DebugAssetRM) == 0x0000F8, "Member 'UBeingRootMotionBank::_DebugAssetRM' has a wrong offset!");
static_assert(offsetof(UBeingRootMotionBank, _DebugDrawSpeed) == 0x000100, "Member 'UBeingRootMotionBank::_DebugDrawSpeed' has a wrong offset!");
static_assert(offsetof(UBeingRootMotionBank, _DebugDrawBSYaw) == 0x000104, "Member 'UBeingRootMotionBank::_DebugDrawBSYaw' has a wrong offset!");
static_assert(offsetof(UBeingRootMotionBank, _DebugDrawDuration) == 0x000108, "Member 'UBeingRootMotionBank::_DebugDrawDuration' has a wrong offset!");
static_assert(offsetof(UBeingRootMotionBank, _DebugDrawOffset) == 0x00010C, "Member 'UBeingRootMotionBank::_DebugDrawOffset' has a wrong offset!");
static_assert(offsetof(UBeingRootMotionBank, _MaxStampCount) == 0x000110, "Member 'UBeingRootMotionBank::_MaxStampCount' has a wrong offset!");
static_assert(offsetof(UBeingRootMotionBank, _DebugTarget) == 0x000118, "Member 'UBeingRootMotionBank::_DebugTarget' has a wrong offset!");
static_assert(offsetof(UBeingRootMotionBank, _MaxFramesPerSecond) == 0x000120, "Member 'UBeingRootMotionBank::_MaxFramesPerSecond' has a wrong offset!");
static_assert(offsetof(UBeingRootMotionBank, _Precision) == 0x000124, "Member 'UBeingRootMotionBank::_Precision' has a wrong offset!");
static_assert(offsetof(UBeingRootMotionBank, _AnimTags) == 0x000128, "Member 'UBeingRootMotionBank::_AnimTags' has a wrong offset!");
static_assert(offsetof(UBeingRootMotionBank, _AnimTable) == 0x000148, "Member 'UBeingRootMotionBank::_AnimTable' has a wrong offset!");
static_assert(offsetof(UBeingRootMotionBank, _Animations) == 0x000158, "Member 'UBeingRootMotionBank::_Animations' has a wrong offset!");
static_assert(offsetof(UBeingRootMotionBank, _Blendspaces) == 0x000168, "Member 'UBeingRootMotionBank::_Blendspaces' has a wrong offset!");
static_assert(offsetof(UBeingRootMotionBank, _AnimRootMotion) == 0x000178, "Member 'UBeingRootMotionBank::_AnimRootMotion' has a wrong offset!");
static_assert(offsetof(UBeingRootMotionBank, _BSRootMotion) == 0x0001C8, "Member 'UBeingRootMotionBank::_BSRootMotion' has a wrong offset!");
static_assert(offsetof(UBeingRootMotionBank, _BonesTransform) == 0x000218, "Member 'UBeingRootMotionBank::_BonesTransform' has a wrong offset!");

// Class Being.BeingSettings
// 0x0278 (0x02B0 - 0x0038)
class UBeingSettings final : public UDeveloperSettings
{
public:
	int32                                         _WalkingStanceCount;                               // 0x0038(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWalkingStanceData>             _WalkingStances;                                   // 0x0040(0x0010)(Edit, EditFixedSize, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   _DebugFootsteps;                                   // 0x0050(0x0030)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              _DebugSurface;                                     // 0x0080(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESoundMovement                                _DebugSoundMovement;                               // 0x0081(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _DebugFootSockets[0x5];                            // 0x0084(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EPhysicalSurface, class FString>         _WwiseSurfaces;                                    // 0x00B0(0x0050)(Edit, Config, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        _WWiseFootSwitches[0x5];                           // 0x0100(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        _WWiseMoveSwitches[0x5];                           // 0x01A0(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EPhysicalSurface, struct FSoftObjectPath> _WWiseSurfSwitches;                                // 0x0240(0x0050)(Edit, Config, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        TerrainTexturesMap;                                // 0x0290(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingSettings">();
	}
	static class UBeingSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingSettings>();
	}
};
static_assert(alignof(UBeingSettings) == 0x000008, "Wrong alignment on UBeingSettings");
static_assert(sizeof(UBeingSettings) == 0x0002B0, "Wrong size on UBeingSettings");
static_assert(offsetof(UBeingSettings, _WalkingStanceCount) == 0x000038, "Member 'UBeingSettings::_WalkingStanceCount' has a wrong offset!");
static_assert(offsetof(UBeingSettings, _WalkingStances) == 0x000040, "Member 'UBeingSettings::_WalkingStances' has a wrong offset!");
static_assert(offsetof(UBeingSettings, _DebugFootsteps) == 0x000050, "Member 'UBeingSettings::_DebugFootsteps' has a wrong offset!");
static_assert(offsetof(UBeingSettings, _DebugSurface) == 0x000080, "Member 'UBeingSettings::_DebugSurface' has a wrong offset!");
static_assert(offsetof(UBeingSettings, _DebugSoundMovement) == 0x000081, "Member 'UBeingSettings::_DebugSoundMovement' has a wrong offset!");
static_assert(offsetof(UBeingSettings, _DebugFootSockets) == 0x000084, "Member 'UBeingSettings::_DebugFootSockets' has a wrong offset!");
static_assert(offsetof(UBeingSettings, _WwiseSurfaces) == 0x0000B0, "Member 'UBeingSettings::_WwiseSurfaces' has a wrong offset!");
static_assert(offsetof(UBeingSettings, _WWiseFootSwitches) == 0x000100, "Member 'UBeingSettings::_WWiseFootSwitches' has a wrong offset!");
static_assert(offsetof(UBeingSettings, _WWiseMoveSwitches) == 0x0001A0, "Member 'UBeingSettings::_WWiseMoveSwitches' has a wrong offset!");
static_assert(offsetof(UBeingSettings, _WWiseSurfSwitches) == 0x000240, "Member 'UBeingSettings::_WWiseSurfSwitches' has a wrong offset!");
static_assert(offsetof(UBeingSettings, TerrainTexturesMap) == 0x000290, "Member 'UBeingSettings::TerrainTexturesMap' has a wrong offset!");

// Class Being.BeingSmellLevelStat
// 0x0008 (0x00E8 - 0x00E0)
class UBeingSmellLevelStat : public UBeingStat
{
public:
	float                                         _SmellLevel;                                       // 0x00E0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetSmellLevel(float Value);

	float GetSmellLevel() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingSmellLevelStat">();
	}
	static class UBeingSmellLevelStat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingSmellLevelStat>();
	}
};
static_assert(alignof(UBeingSmellLevelStat) == 0x000008, "Wrong alignment on UBeingSmellLevelStat");
static_assert(sizeof(UBeingSmellLevelStat) == 0x0000E8, "Wrong size on UBeingSmellLevelStat");
static_assert(offsetof(UBeingSmellLevelStat, _SmellLevel) == 0x0000E0, "Member 'UBeingSmellLevelStat::_SmellLevel' has a wrong offset!");

// Class Being.BeingSmellModStat
// 0x0018 (0x0100 - 0x00E8)
class UBeingSmellModStat final : public UBeingSmellLevelStat
{
public:
	int32                                         _ModLevel;                                         // 0x00E8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 _Modifiers;                                        // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	void SetModLevel(int32 Level);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingSmellModStat">();
	}
	static class UBeingSmellModStat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingSmellModStat>();
	}
};
static_assert(alignof(UBeingSmellModStat) == 0x000008, "Wrong alignment on UBeingSmellModStat");
static_assert(sizeof(UBeingSmellModStat) == 0x000100, "Wrong size on UBeingSmellModStat");
static_assert(offsetof(UBeingSmellModStat, _ModLevel) == 0x0000E8, "Member 'UBeingSmellModStat::_ModLevel' has a wrong offset!");
static_assert(offsetof(UBeingSmellModStat, _Modifiers) == 0x0000F0, "Member 'UBeingSmellModStat::_Modifiers' has a wrong offset!");

// Class Being.BeingSpeedModStat
// 0x0008 (0x00E8 - 0x00E0)
class UBeingSpeedModStat final : public UBeingStat
{
public:
	float                                         _SpeedMod;                                         // 0x00E0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetSpeedMod(float Value);

	float GetSpeedMod() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingSpeedModStat">();
	}
	static class UBeingSpeedModStat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingSpeedModStat>();
	}
};
static_assert(alignof(UBeingSpeedModStat) == 0x000008, "Wrong alignment on UBeingSpeedModStat");
static_assert(sizeof(UBeingSpeedModStat) == 0x0000E8, "Wrong size on UBeingSpeedModStat");
static_assert(offsetof(UBeingSpeedModStat, _SpeedMod) == 0x0000E0, "Member 'UBeingSpeedModStat::_SpeedMod' has a wrong offset!");

// Class Being.BeingBoolStat
// 0x0008 (0x00E8 - 0x00E0)
class UBeingBoolStat final : public UBeingStat
{
public:
	bool                                          _BoolStat;                                         // 0x00E0(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBoolStat(bool Stat);

	bool GetBoolStat() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingBoolStat">();
	}
	static class UBeingBoolStat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingBoolStat>();
	}
};
static_assert(alignof(UBeingBoolStat) == 0x000008, "Wrong alignment on UBeingBoolStat");
static_assert(sizeof(UBeingBoolStat) == 0x0000E8, "Wrong size on UBeingBoolStat");
static_assert(offsetof(UBeingBoolStat, _BoolStat) == 0x0000E0, "Member 'UBeingBoolStat::_BoolStat' has a wrong offset!");

// Class Being.BeingRelativeStat
// 0x0010 (0x00F0 - 0x00E0)
class UBeingRelativeStat : public UBeingStat
{
public:
	bool                                          _RelativeStat;                                     // 0x00E0(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  _Other;                                            // 0x00E4(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetRelativeStat(class AActor* Other, bool Stat);

	class AActor* GetOther() const;
	bool GetRelativeStat(class AActor* Other) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingRelativeStat">();
	}
	static class UBeingRelativeStat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingRelativeStat>();
	}
};
static_assert(alignof(UBeingRelativeStat) == 0x000008, "Wrong alignment on UBeingRelativeStat");
static_assert(sizeof(UBeingRelativeStat) == 0x0000F0, "Wrong size on UBeingRelativeStat");
static_assert(offsetof(UBeingRelativeStat, _RelativeStat) == 0x0000E0, "Member 'UBeingRelativeStat::_RelativeStat' has a wrong offset!");
static_assert(offsetof(UBeingRelativeStat, _Other) == 0x0000E4, "Member 'UBeingRelativeStat::_Other' has a wrong offset!");

// Class Being.BeingState
// 0x0060 (0x00C8 - 0x0068)
class UBeingState : public UGraphObject
{
public:
	EStateStatus                                  _Status;                                           // 0x0068(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBeingStates                           _SubStates;                                        // 0x0070(0x0010)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         _CurrSubState;                                     // 0x0080(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 _Owner;                                            // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBeingStatesComponent*                  _StateMachine;                                     // 0x0090(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _AutoActivate;                                     // 0x0098(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _NeedDeactivate;                                   // 0x0099(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x2];                                       // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _LifeTime;                                         // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _CooldownTimer;                                    // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _TimeOut;                                          // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _Cooldown;                                         // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             StatusChanged;                                     // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0x8];                                       // 0x00C0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UBeingState* CreateState(class UObject* WorldContextObject, TSubclassOf<class UBeingState> Class_0);

	void ActivateState();
	void ConditionalActivateState();
	void FinishState(EStateStatus Status);
	bool ProcessSubStates(float DeltaSeconds);
	void ReceiveEnter();
	void ReceiveExit(EStateStatus Status);
	void ReceiveRegister();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveUnregister();

	class AActor* GetOwner() const;
	class FString GetRuntimeInfoScript() const;
	class UBeingStatesComponent* GetStatesComponent() const;
	EStateStatus GetStatus() const;
	class UBeingState* GetSubState(int32 Index_0) const;
	int32 GetSubStateNum() const;
	bool IsFinished() const;
	bool IsMeetConditionsScript() const;
	bool IsRunning() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingState">();
	}
	static class UBeingState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingState>();
	}
};
static_assert(alignof(UBeingState) == 0x000008, "Wrong alignment on UBeingState");
static_assert(sizeof(UBeingState) == 0x0000C8, "Wrong size on UBeingState");
static_assert(offsetof(UBeingState, _Status) == 0x000068, "Member 'UBeingState::_Status' has a wrong offset!");
static_assert(offsetof(UBeingState, _SubStates) == 0x000070, "Member 'UBeingState::_SubStates' has a wrong offset!");
static_assert(offsetof(UBeingState, _CurrSubState) == 0x000080, "Member 'UBeingState::_CurrSubState' has a wrong offset!");
static_assert(offsetof(UBeingState, _Owner) == 0x000088, "Member 'UBeingState::_Owner' has a wrong offset!");
static_assert(offsetof(UBeingState, _StateMachine) == 0x000090, "Member 'UBeingState::_StateMachine' has a wrong offset!");
static_assert(offsetof(UBeingState, _AutoActivate) == 0x000098, "Member 'UBeingState::_AutoActivate' has a wrong offset!");
static_assert(offsetof(UBeingState, _NeedDeactivate) == 0x000099, "Member 'UBeingState::_NeedDeactivate' has a wrong offset!");
static_assert(offsetof(UBeingState, _LifeTime) == 0x00009C, "Member 'UBeingState::_LifeTime' has a wrong offset!");
static_assert(offsetof(UBeingState, _CooldownTimer) == 0x0000A0, "Member 'UBeingState::_CooldownTimer' has a wrong offset!");
static_assert(offsetof(UBeingState, _TimeOut) == 0x0000A4, "Member 'UBeingState::_TimeOut' has a wrong offset!");
static_assert(offsetof(UBeingState, _Cooldown) == 0x0000A8, "Member 'UBeingState::_Cooldown' has a wrong offset!");
static_assert(offsetof(UBeingState, StatusChanged) == 0x0000B0, "Member 'UBeingState::StatusChanged' has a wrong offset!");

// Class Being.BeingStatesComponent
// 0x0040 (0x00E0 - 0x00A0)
class UBeingStatesComponent final : public UActorComponent
{
public:
	struct FBeingStates                           _States;                                           // 0x00A0(0x0010)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UBeingState*>                    _StatesCache;                                      // 0x00B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_             StateStarted;                                      // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             StateFinished;                                     // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void AbortStateByClass(TSubclassOf<class UBeingState> StateClass);
	void ActivateStateByClass(TSubclassOf<class UBeingState> StateClass);
	void AddState(class UBeingState* State, bool Activate_0);
	class UBeingState* AddStateByClass(TSubclassOf<class UBeingState> StateClass);
	class UBeingState* GetStateByClass(TSubclassOf<class UBeingState> StateClass);
	void RemoveState(class UBeingState* State);
	void RemoveStatesByClass(TSubclassOf<class UBeingState> StateClass);

	class UBeingState* FindStateByClass(TSubclassOf<class UBeingState> StateClass) const;
	class UBeingState* FindStateByName(class FName Name_0) const;
	TArray<class UBeingState*> FindStatesByClass(TSubclassOf<class UBeingState> StateClass) const;
	bool IsStateActive(TSubclassOf<class UBeingState> StateClass) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingStatesComponent">();
	}
	static class UBeingStatesComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingStatesComponent>();
	}
};
static_assert(alignof(UBeingStatesComponent) == 0x000008, "Wrong alignment on UBeingStatesComponent");
static_assert(sizeof(UBeingStatesComponent) == 0x0000E0, "Wrong size on UBeingStatesComponent");
static_assert(offsetof(UBeingStatesComponent, _States) == 0x0000A0, "Member 'UBeingStatesComponent::_States' has a wrong offset!");
static_assert(offsetof(UBeingStatesComponent, _StatesCache) == 0x0000B0, "Member 'UBeingStatesComponent::_StatesCache' has a wrong offset!");
static_assert(offsetof(UBeingStatesComponent, StateStarted) == 0x0000C0, "Member 'UBeingStatesComponent::StateStarted' has a wrong offset!");
static_assert(offsetof(UBeingStatesComponent, StateFinished) == 0x0000D0, "Member 'UBeingStatesComponent::StateFinished' has a wrong offset!");

// Class Being.BeingStance
// 0x0000 (0x0028 - 0x0028)
class UBeingStance : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeingStance">();
	}
	static class UBeingStance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeingStance>();
	}
};
static_assert(alignof(UBeingStance) == 0x000008, "Wrong alignment on UBeingStance");
static_assert(sizeof(UBeingStance) == 0x000028, "Wrong size on UBeingStance");

// Class Being.WalkingStance
// 0x0000 (0x0028 - 0x0028)
class UWalkingStance : public UBeingStance
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WalkingStance">();
	}
	static class UWalkingStance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWalkingStance>();
	}
};
static_assert(alignof(UWalkingStance) == 0x000008, "Wrong alignment on UWalkingStance");
static_assert(sizeof(UWalkingStance) == 0x000028, "Wrong size on UWalkingStance");

// Class Being.Crouch
// 0x0000 (0x0028 - 0x0028)
class UCrouch final : public UWalkingStance
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Crouch">();
	}
	static class UCrouch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCrouch>();
	}
};
static_assert(alignof(UCrouch) == 0x000008, "Wrong alignment on UCrouch");
static_assert(sizeof(UCrouch) == 0x000028, "Wrong size on UCrouch");

// Class Being.InPlace
// 0x0000 (0x0028 - 0x0028)
class UInPlace final : public UWalkingStance
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InPlace">();
	}
	static class UInPlace* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInPlace>();
	}
};
static_assert(alignof(UInPlace) == 0x000008, "Wrong alignment on UInPlace");
static_assert(sizeof(UInPlace) == 0x000028, "Wrong size on UInPlace");

// Class Being.Run
// 0x0000 (0x0028 - 0x0028)
class URun final : public UWalkingStance
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Run">();
	}
	static class URun* GetDefaultObj()
	{
		return GetDefaultObjImpl<URun>();
	}
};
static_assert(alignof(URun) == 0x000008, "Wrong alignment on URun");
static_assert(sizeof(URun) == 0x000028, "Wrong size on URun");

// Class Being.Walk
// 0x0000 (0x0028 - 0x0028)
class UWalk final : public UWalkingStance
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Walk">();
	}
	static class UWalk* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWalk>();
	}
};
static_assert(alignof(UWalk) == 0x000008, "Wrong alignment on UWalk");
static_assert(sizeof(UWalk) == 0x000028, "Wrong size on UWalk");

}

