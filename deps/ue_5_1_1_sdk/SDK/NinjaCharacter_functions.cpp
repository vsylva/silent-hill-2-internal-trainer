#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NinjaCharacter

#include "Basic.hpp"

#include "NinjaCharacter_classes.hpp"
#include "NinjaCharacter_parameters.hpp"


namespace SDK
{

// Function NinjaCharacter.NinjaCharacter.K2_OnCharMovementAxisChanged
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          OldAxisZ                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          CurrentAxisZ                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANinjaCharacter::K2_OnCharMovementAxisChanged(const struct FVector& OldAxisZ, const struct FVector& CurrentAxisZ)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacter", "K2_OnCharMovementAxisChanged");

	Params::NinjaCharacter_K2_OnCharMovementAxisChanged Parms{};

	Parms.OldAxisZ = std::move(OldAxisZ);
	Parms.CurrentAxisZ = std::move(CurrentAxisZ);

	UObject::ProcessEvent(Func, &Parms);
}


// Function NinjaCharacter.NinjaCharacter.K2_OnGravityDirectionChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// ENinjaGravityDirectionMode              OldGravityDirectionMode                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ENinjaGravityDirectionMode              CurrentGravityDirectionMode                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANinjaCharacter::K2_OnGravityDirectionChanged(ENinjaGravityDirectionMode OldGravityDirectionMode, ENinjaGravityDirectionMode CurrentGravityDirectionMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacter", "K2_OnGravityDirectionChanged");

	Params::NinjaCharacter_K2_OnGravityDirectionChanged Parms{};

	Parms.OldGravityDirectionMode = OldGravityDirectionMode;
	Parms.CurrentGravityDirectionMode = CurrentGravityDirectionMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function NinjaCharacter.NinjaCharacter.K2_OnUnwalkableHit
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ANinjaCharacter::K2_OnUnwalkableHit(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacter", "K2_OnUnwalkableHit");

	Params::NinjaCharacter_K2_OnUnwalkableHit Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function NinjaCharacter.NinjaCharacter.LaunchCharacterRotated
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          LaunchVelocity                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHorizontalOverride                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVerticalOverride                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANinjaCharacter::LaunchCharacterRotated(const struct FVector& LaunchVelocity, bool bHorizontalOverride, bool bVerticalOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacter", "LaunchCharacterRotated");

	Params::NinjaCharacter_LaunchCharacterRotated Parms{};

	Parms.LaunchVelocity = std::move(LaunchVelocity);
	Parms.bHorizontalOverride = bHorizontalOverride;
	Parms.bVerticalOverride = bVerticalOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacter.SetCharMovementAxis
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NewAxisZ                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForceFindFloor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ANinjaCharacter::SetCharMovementAxis(const struct FVector& NewAxisZ, bool bForceFindFloor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacter", "SetCharMovementAxis");

	Params::NinjaCharacter_SetCharMovementAxis Parms{};

	Parms.NewAxisZ = std::move(NewAxisZ);
	Parms.bForceFindFloor = bForceFindFloor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NinjaCharacter.NinjaCharacter.SmoothComponentLocation
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class USceneComponent*                  SceneComponent                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LocationSpeed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          RelativeLocation                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANinjaCharacter::SmoothComponentLocation(class USceneComponent* SceneComponent, float DeltaTime, float LocationSpeed, const struct FVector& RelativeLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacter", "SmoothComponentLocation");

	Params::NinjaCharacter_SmoothComponentLocation Parms{};

	Parms.SceneComponent = SceneComponent;
	Parms.DeltaTime = DeltaTime;
	Parms.LocationSpeed = LocationSpeed;
	Parms.RelativeLocation = std::move(RelativeLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacter.SmoothComponentLocationAndRotation
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class USceneComponent*                  SceneComponent                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LocationSpeed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RotationSpeed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          RelativeLocation                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         RelativeRotation                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ANinjaCharacter::SmoothComponentLocationAndRotation(class USceneComponent* SceneComponent, float DeltaTime, float LocationSpeed, float RotationSpeed, const struct FVector& RelativeLocation, const struct FRotator& RelativeRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacter", "SmoothComponentLocationAndRotation");

	Params::NinjaCharacter_SmoothComponentLocationAndRotation Parms{};

	Parms.SceneComponent = SceneComponent;
	Parms.DeltaTime = DeltaTime;
	Parms.LocationSpeed = LocationSpeed;
	Parms.RotationSpeed = RotationSpeed;
	Parms.RelativeLocation = std::move(RelativeLocation);
	Parms.RelativeRotation = std::move(RelativeRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacter.SmoothComponentRotation
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class USceneComponent*                  SceneComponent                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RotationSpeed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         RelativeRotation                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ANinjaCharacter::SmoothComponentRotation(class USceneComponent* SceneComponent, float DeltaTime, float RotationSpeed, const struct FRotator& RelativeRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacter", "SmoothComponentRotation");

	Params::NinjaCharacter_SmoothComponentRotation Parms{};

	Parms.SceneComponent = SceneComponent;
	Parms.DeltaTime = DeltaTime;
	Parms.RotationSpeed = RotationSpeed;
	Parms.RelativeRotation = std::move(RelativeRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.K2_SetFixedGravityDirection
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NewGravityDirection                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNinjaCharacterMovementComponent::K2_SetFixedGravityDirection(const struct FVector& NewGravityDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "K2_SetFixedGravityDirection");

	Params::NinjaCharacterMovementComponent_K2_SetFixedGravityDirection Parms{};

	Parms.NewGravityDirection = std::move(NewGravityDirection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.K2_SetPlaneGravityDirection
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NewGravityPlaneBase                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NewGravityPlaneNormal                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNinjaCharacterMovementComponent::K2_SetPlaneGravityDirection(const struct FVector& NewGravityPlaneBase, const struct FVector& NewGravityPlaneNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "K2_SetPlaneGravityDirection");

	Params::NinjaCharacterMovementComponent_K2_SetPlaneGravityDirection Parms{};

	Parms.NewGravityPlaneBase = std::move(NewGravityPlaneBase);
	Parms.NewGravityPlaneNormal = std::move(NewGravityPlaneNormal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.MulticastDisableAlignComponentToFloor
// (Net, NetReliable, Native, Event, NetMulticast, Protected)

void UNinjaCharacterMovementComponent::MulticastDisableAlignComponentToFloor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "MulticastDisableAlignComponentToFloor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.MulticastDisableAlignComponentToGravity
// (Net, NetReliable, Native, Event, NetMulticast, Protected)

void UNinjaCharacterMovementComponent::MulticastDisableAlignComponentToGravity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "MulticastDisableAlignComponentToGravity");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.MulticastDisableAlignGravityToBase
// (Net, NetReliable, Native, Event, NetMulticast, Protected)

void UNinjaCharacterMovementComponent::MulticastDisableAlignGravityToBase()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "MulticastDisableAlignGravityToBase");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.MulticastEnableAlignComponentToFloor
// (Net, NetReliable, Native, Event, NetMulticast, Protected)

void UNinjaCharacterMovementComponent::MulticastEnableAlignComponentToFloor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "MulticastEnableAlignComponentToFloor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.MulticastEnableAlignComponentToGravity
// (Net, NetReliable, Native, Event, NetMulticast, Protected)

void UNinjaCharacterMovementComponent::MulticastEnableAlignComponentToGravity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "MulticastEnableAlignComponentToGravity");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.MulticastEnableAlignGravityToBase
// (Net, NetReliable, Native, Event, NetMulticast, Protected)

void UNinjaCharacterMovementComponent::MulticastEnableAlignGravityToBase()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "MulticastEnableAlignGravityToBase");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.MulticastSetBoxGravityDirection
// (Net, NetReliable, Native, Event, NetMulticast, Protected, HasDefaults)
// Parameters:
// struct FVector                          NewGravityBoxOrigin                                    (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NewGravityBoxExtent                                    (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNinjaCharacterMovementComponent::MulticastSetBoxGravityDirection(const struct FVector& NewGravityBoxOrigin, const struct FVector& NewGravityBoxExtent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "MulticastSetBoxGravityDirection");

	Params::NinjaCharacterMovementComponent_MulticastSetBoxGravityDirection Parms{};

	Parms.NewGravityBoxOrigin = std::move(NewGravityBoxOrigin);
	Parms.NewGravityBoxExtent = std::move(NewGravityBoxExtent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.MulticastSetBoxGravityDirectionFromActor
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// class AActor*                           NewGravityActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNinjaCharacterMovementComponent::MulticastSetBoxGravityDirectionFromActor(class AActor* NewGravityActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "MulticastSetBoxGravityDirectionFromActor");

	Params::NinjaCharacterMovementComponent_MulticastSetBoxGravityDirectionFromActor Parms{};

	Parms.NewGravityActor = NewGravityActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.MulticastSetCollisionGravityDirection
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// class AActor*                           NewGravityActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNinjaCharacterMovementComponent::MulticastSetCollisionGravityDirection(class AActor* NewGravityActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "MulticastSetCollisionGravityDirection");

	Params::NinjaCharacterMovementComponent_MulticastSetCollisionGravityDirection Parms{};

	Parms.NewGravityActor = NewGravityActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.MulticastSetFixedGravityDirection
// (Net, NetReliable, Native, Event, NetMulticast, Protected, HasDefaults)
// Parameters:
// struct FVector                          NewFixedGravityDirection                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNinjaCharacterMovementComponent::MulticastSetFixedGravityDirection(const struct FVector& NewFixedGravityDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "MulticastSetFixedGravityDirection");

	Params::NinjaCharacterMovementComponent_MulticastSetFixedGravityDirection Parms{};

	Parms.NewFixedGravityDirection = std::move(NewFixedGravityDirection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.MulticastSetGravityScale
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// float                                   NewGravityScale                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNinjaCharacterMovementComponent::MulticastSetGravityScale(float NewGravityScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "MulticastSetGravityScale");

	Params::NinjaCharacterMovementComponent_MulticastSetGravityScale Parms{};

	Parms.NewGravityScale = NewGravityScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.MulticastSetLineGravityDirection
// (Net, NetReliable, Native, Event, NetMulticast, Protected, HasDefaults)
// Parameters:
// struct FVector                          NewGravityLineStart                                    (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NewGravityLineEnd                                      (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNinjaCharacterMovementComponent::MulticastSetLineGravityDirection(const struct FVector& NewGravityLineStart, const struct FVector& NewGravityLineEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "MulticastSetLineGravityDirection");

	Params::NinjaCharacterMovementComponent_MulticastSetLineGravityDirection Parms{};

	Parms.NewGravityLineStart = std::move(NewGravityLineStart);
	Parms.NewGravityLineEnd = std::move(NewGravityLineEnd);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.MulticastSetPlaneGravityDirection
// (Net, NetReliable, Native, Event, NetMulticast, Protected, HasDefaults)
// Parameters:
// struct FVector                          NewGravityPlaneBase                                    (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NewGravityPlaneNormal                                  (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNinjaCharacterMovementComponent::MulticastSetPlaneGravityDirection(const struct FVector& NewGravityPlaneBase, const struct FVector& NewGravityPlaneNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "MulticastSetPlaneGravityDirection");

	Params::NinjaCharacterMovementComponent_MulticastSetPlaneGravityDirection Parms{};

	Parms.NewGravityPlaneBase = std::move(NewGravityPlaneBase);
	Parms.NewGravityPlaneNormal = std::move(NewGravityPlaneNormal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.MulticastSetPointGravityDirection
// (Net, NetReliable, Native, Event, NetMulticast, Protected, HasDefaults)
// Parameters:
// struct FVector                          NewGravityPoint                                        (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNinjaCharacterMovementComponent::MulticastSetPointGravityDirection(const struct FVector& NewGravityPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "MulticastSetPointGravityDirection");

	Params::NinjaCharacterMovementComponent_MulticastSetPointGravityDirection Parms{};

	Parms.NewGravityPoint = std::move(NewGravityPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.MulticastSetPointGravityDirectionFromActor
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// class AActor*                           NewGravityActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNinjaCharacterMovementComponent::MulticastSetPointGravityDirectionFromActor(class AActor* NewGravityActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "MulticastSetPointGravityDirectionFromActor");

	Params::NinjaCharacterMovementComponent_MulticastSetPointGravityDirectionFromActor Parms{};

	Parms.NewGravityActor = NewGravityActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.MulticastSetSegmentGravityDirection
// (Net, NetReliable, Native, Event, NetMulticast, Protected, HasDefaults)
// Parameters:
// struct FVector                          NewGravitySegmentStart                                 (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NewGravitySegmentEnd                                   (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNinjaCharacterMovementComponent::MulticastSetSegmentGravityDirection(const struct FVector& NewGravitySegmentStart, const struct FVector& NewGravitySegmentEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "MulticastSetSegmentGravityDirection");

	Params::NinjaCharacterMovementComponent_MulticastSetSegmentGravityDirection Parms{};

	Parms.NewGravitySegmentStart = std::move(NewGravitySegmentStart);
	Parms.NewGravitySegmentEnd = std::move(NewGravitySegmentEnd);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.MulticastSetSplineGravityDirection
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// class AActor*                           NewGravityActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNinjaCharacterMovementComponent::MulticastSetSplineGravityDirection(class AActor* NewGravityActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "MulticastSetSplineGravityDirection");

	Params::NinjaCharacterMovementComponent_MulticastSetSplineGravityDirection Parms{};

	Parms.NewGravityActor = NewGravityActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.MulticastSetSplinePlaneGravityDirection
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// class AActor*                           NewGravityActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNinjaCharacterMovementComponent::MulticastSetSplinePlaneGravityDirection(class AActor* NewGravityActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "MulticastSetSplinePlaneGravityDirection");

	Params::NinjaCharacterMovementComponent_MulticastSetSplinePlaneGravityDirection Parms{};

	Parms.NewGravityActor = NewGravityActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.MulticastSetSplineTangentGravityDirection
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// class AActor*                           NewGravityActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNinjaCharacterMovementComponent::MulticastSetSplineTangentGravityDirection(class AActor* NewGravityActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "MulticastSetSplineTangentGravityDirection");

	Params::NinjaCharacterMovementComponent_MulticastSetSplineTangentGravityDirection Parms{};

	Parms.NewGravityActor = NewGravityActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.OnComponentHit
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComp                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UNinjaCharacterMovementComponent::OnComponentHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "OnComponentHit");

	Params::NinjaCharacterMovementComponent_OnComponentHit Parms{};

	Parms.HitComp = HitComp;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.SetAlignComponentToFloor
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewAlignComponentToFloor                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNinjaCharacterMovementComponent::SetAlignComponentToFloor(bool bNewAlignComponentToFloor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "SetAlignComponentToFloor");

	Params::NinjaCharacterMovementComponent_SetAlignComponentToFloor Parms{};

	Parms.bNewAlignComponentToFloor = bNewAlignComponentToFloor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.SetAlignComponentToGravity
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewAlignComponentToGravity                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNinjaCharacterMovementComponent::SetAlignComponentToGravity(bool bNewAlignComponentToGravity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "SetAlignComponentToGravity");

	Params::NinjaCharacterMovementComponent_SetAlignComponentToGravity Parms{};

	Parms.bNewAlignComponentToGravity = bNewAlignComponentToGravity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.SetAlignGravityToBase
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewAlignGravityToBase                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNinjaCharacterMovementComponent::SetAlignGravityToBase(bool bNewAlignGravityToBase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "SetAlignGravityToBase");

	Params::NinjaCharacterMovementComponent_SetAlignGravityToBase Parms{};

	Parms.bNewAlignGravityToBase = bNewAlignGravityToBase;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.SetBoxGravityDirection
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NewGravityBoxOrigin                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NewGravityBoxExtent                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNinjaCharacterMovementComponent::SetBoxGravityDirection(const struct FVector& NewGravityBoxOrigin, const struct FVector& NewGravityBoxExtent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "SetBoxGravityDirection");

	Params::NinjaCharacterMovementComponent_SetBoxGravityDirection Parms{};

	Parms.NewGravityBoxOrigin = std::move(NewGravityBoxOrigin);
	Parms.NewGravityBoxExtent = std::move(NewGravityBoxExtent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.SetBoxGravityDirectionFromActor
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           NewGravityActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNinjaCharacterMovementComponent::SetBoxGravityDirectionFromActor(class AActor* NewGravityActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "SetBoxGravityDirectionFromActor");

	Params::NinjaCharacterMovementComponent_SetBoxGravityDirectionFromActor Parms{};

	Parms.NewGravityActor = NewGravityActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.SetCollisionGravityDirection
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           NewGravityActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNinjaCharacterMovementComponent::SetCollisionGravityDirection(class AActor* NewGravityActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "SetCollisionGravityDirection");

	Params::NinjaCharacterMovementComponent_SetCollisionGravityDirection Parms{};

	Parms.NewGravityActor = NewGravityActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.SetLineGravityDirection
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NewGravityLineStart                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NewGravityLineEnd                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNinjaCharacterMovementComponent::SetLineGravityDirection(const struct FVector& NewGravityLineStart, const struct FVector& NewGravityLineEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "SetLineGravityDirection");

	Params::NinjaCharacterMovementComponent_SetLineGravityDirection Parms{};

	Parms.NewGravityLineStart = std::move(NewGravityLineStart);
	Parms.NewGravityLineEnd = std::move(NewGravityLineEnd);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.SetPointGravityDirection
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NewGravityPoint                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNinjaCharacterMovementComponent::SetPointGravityDirection(const struct FVector& NewGravityPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "SetPointGravityDirection");

	Params::NinjaCharacterMovementComponent_SetPointGravityDirection Parms{};

	Parms.NewGravityPoint = std::move(NewGravityPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.SetPointGravityDirectionFromActor
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           NewGravityActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNinjaCharacterMovementComponent::SetPointGravityDirectionFromActor(class AActor* NewGravityActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "SetPointGravityDirectionFromActor");

	Params::NinjaCharacterMovementComponent_SetPointGravityDirectionFromActor Parms{};

	Parms.NewGravityActor = NewGravityActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.SetSegmentGravityDirection
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NewGravitySegmentStart                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NewGravitySegmentEnd                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNinjaCharacterMovementComponent::SetSegmentGravityDirection(const struct FVector& NewGravitySegmentStart, const struct FVector& NewGravitySegmentEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "SetSegmentGravityDirection");

	Params::NinjaCharacterMovementComponent_SetSegmentGravityDirection Parms{};

	Parms.NewGravitySegmentStart = std::move(NewGravitySegmentStart);
	Parms.NewGravitySegmentEnd = std::move(NewGravitySegmentEnd);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.SetSplineGravityDirection
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           NewGravityActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNinjaCharacterMovementComponent::SetSplineGravityDirection(class AActor* NewGravityActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "SetSplineGravityDirection");

	Params::NinjaCharacterMovementComponent_SetSplineGravityDirection Parms{};

	Parms.NewGravityActor = NewGravityActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.SetSplinePlaneGravityDirection
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           NewGravityActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNinjaCharacterMovementComponent::SetSplinePlaneGravityDirection(class AActor* NewGravityActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "SetSplinePlaneGravityDirection");

	Params::NinjaCharacterMovementComponent_SetSplinePlaneGravityDirection Parms{};

	Parms.NewGravityActor = NewGravityActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.SetSplineTangentGravityDirection
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           NewGravityActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNinjaCharacterMovementComponent::SetSplineTangentGravityDirection(class AActor* NewGravityActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "SetSplineTangentGravityDirection");

	Params::NinjaCharacterMovementComponent_SetSplineTangentGravityDirection Parms{};

	Parms.NewGravityActor = NewGravityActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.GetGravityDirection
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bAvoidZeroGravity                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UNinjaCharacterMovementComponent::GetGravityDirection(bool bAvoidZeroGravity) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "GetGravityDirection");

	Params::NinjaCharacterMovementComponent_GetGravityDirection Parms{};

	Parms.bAvoidZeroGravity = bAvoidZeroGravity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NinjaCharacter.NinjaCharacterMovementComponent.GetGravityMagnitude
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UNinjaCharacterMovementComponent::GetGravityMagnitude() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaCharacterMovementComponent", "GetGravityMagnitude");

	Params::NinjaCharacterMovementComponent_GetGravityMagnitude Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NinjaCharacter.NinjaPhysicsVolume.K2_SetFixedGravityDirection
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NewGravityDirection                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANinjaPhysicsVolume::K2_SetFixedGravityDirection(const struct FVector& NewGravityDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaPhysicsVolume", "K2_SetFixedGravityDirection");

	Params::NinjaPhysicsVolume_K2_SetFixedGravityDirection Parms{};

	Parms.NewGravityDirection = std::move(NewGravityDirection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaPhysicsVolume.K2_SetPlaneGravityDirection
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NewGravityPlaneBase                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NewGravityPlaneNormal                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANinjaPhysicsVolume::K2_SetPlaneGravityDirection(const struct FVector& NewGravityPlaneBase, const struct FVector& NewGravityPlaneNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaPhysicsVolume", "K2_SetPlaneGravityDirection");

	Params::NinjaPhysicsVolume_K2_SetPlaneGravityDirection Parms{};

	Parms.NewGravityPlaneBase = std::move(NewGravityPlaneBase);
	Parms.NewGravityPlaneNormal = std::move(NewGravityPlaneNormal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaPhysicsVolume.SetBoxGravityDirection
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NewGravityBoxOrigin                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NewGravityBoxExtent                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANinjaPhysicsVolume::SetBoxGravityDirection(const struct FVector& NewGravityBoxOrigin, const struct FVector& NewGravityBoxExtent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaPhysicsVolume", "SetBoxGravityDirection");

	Params::NinjaPhysicsVolume_SetBoxGravityDirection Parms{};

	Parms.NewGravityBoxOrigin = std::move(NewGravityBoxOrigin);
	Parms.NewGravityBoxExtent = std::move(NewGravityBoxExtent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaPhysicsVolume.SetBoxGravityDirectionFromActor
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           NewGravityActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANinjaPhysicsVolume::SetBoxGravityDirectionFromActor(class AActor* NewGravityActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaPhysicsVolume", "SetBoxGravityDirectionFromActor");

	Params::NinjaPhysicsVolume_SetBoxGravityDirectionFromActor Parms{};

	Parms.NewGravityActor = NewGravityActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaPhysicsVolume.SetCollisionGravityDirection
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           NewGravityActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANinjaPhysicsVolume::SetCollisionGravityDirection(class AActor* NewGravityActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaPhysicsVolume", "SetCollisionGravityDirection");

	Params::NinjaPhysicsVolume_SetCollisionGravityDirection Parms{};

	Parms.NewGravityActor = NewGravityActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaPhysicsVolume.SetGravityScale
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewGravityScale                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANinjaPhysicsVolume::SetGravityScale(float NewGravityScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaPhysicsVolume", "SetGravityScale");

	Params::NinjaPhysicsVolume_SetGravityScale Parms{};

	Parms.NewGravityScale = NewGravityScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaPhysicsVolume.SetLineGravityDirection
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NewGravityLineStart                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NewGravityLineEnd                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANinjaPhysicsVolume::SetLineGravityDirection(const struct FVector& NewGravityLineStart, const struct FVector& NewGravityLineEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaPhysicsVolume", "SetLineGravityDirection");

	Params::NinjaPhysicsVolume_SetLineGravityDirection Parms{};

	Parms.NewGravityLineStart = std::move(NewGravityLineStart);
	Parms.NewGravityLineEnd = std::move(NewGravityLineEnd);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaPhysicsVolume.SetPointGravityDirection
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NewGravityPoint                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANinjaPhysicsVolume::SetPointGravityDirection(const struct FVector& NewGravityPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaPhysicsVolume", "SetPointGravityDirection");

	Params::NinjaPhysicsVolume_SetPointGravityDirection Parms{};

	Parms.NewGravityPoint = std::move(NewGravityPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaPhysicsVolume.SetPointGravityDirectionFromActor
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           NewGravityActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANinjaPhysicsVolume::SetPointGravityDirectionFromActor(class AActor* NewGravityActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaPhysicsVolume", "SetPointGravityDirectionFromActor");

	Params::NinjaPhysicsVolume_SetPointGravityDirectionFromActor Parms{};

	Parms.NewGravityActor = NewGravityActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaPhysicsVolume.SetSegmentGravityDirection
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NewGravitySegmentStart                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NewGravitySegmentEnd                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANinjaPhysicsVolume::SetSegmentGravityDirection(const struct FVector& NewGravitySegmentStart, const struct FVector& NewGravitySegmentEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaPhysicsVolume", "SetSegmentGravityDirection");

	Params::NinjaPhysicsVolume_SetSegmentGravityDirection Parms{};

	Parms.NewGravitySegmentStart = std::move(NewGravitySegmentStart);
	Parms.NewGravitySegmentEnd = std::move(NewGravitySegmentEnd);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaPhysicsVolume.SetSplineGravityDirection
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           NewGravityActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANinjaPhysicsVolume::SetSplineGravityDirection(class AActor* NewGravityActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaPhysicsVolume", "SetSplineGravityDirection");

	Params::NinjaPhysicsVolume_SetSplineGravityDirection Parms{};

	Parms.NewGravityActor = NewGravityActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaPhysicsVolume.SetSplinePlaneGravityDirection
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           NewGravityActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANinjaPhysicsVolume::SetSplinePlaneGravityDirection(class AActor* NewGravityActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaPhysicsVolume", "SetSplinePlaneGravityDirection");

	Params::NinjaPhysicsVolume_SetSplinePlaneGravityDirection Parms{};

	Parms.NewGravityActor = NewGravityActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaPhysicsVolume.SetSplineTangentGravityDirection
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           NewGravityActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANinjaPhysicsVolume::SetSplineTangentGravityDirection(class AActor* NewGravityActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaPhysicsVolume", "SetSplineTangentGravityDirection");

	Params::NinjaPhysicsVolume_SetSplineTangentGravityDirection Parms{};

	Parms.NewGravityActor = NewGravityActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NinjaCharacter.NinjaPhysicsVolume.GetGravity
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          Point                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ANinjaPhysicsVolume::GetGravity(const struct FVector& Point) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaPhysicsVolume", "GetGravity");

	Params::NinjaPhysicsVolume_GetGravity Parms{};

	Parms.Point = std::move(Point);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NinjaCharacter.NinjaPhysicsVolume.GetGravityDirection
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          Point                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ANinjaPhysicsVolume::GetGravityDirection(const struct FVector& Point) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaPhysicsVolume", "GetGravityDirection");

	Params::NinjaPhysicsVolume_GetGravityDirection Parms{};

	Parms.Point = std::move(Point);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NinjaCharacter.NinjaPhysicsVolume.GetGravityMagnitude
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          Point                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ANinjaPhysicsVolume::GetGravityMagnitude(const struct FVector& Point) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaPhysicsVolume", "GetGravityMagnitude");

	Params::NinjaPhysicsVolume_GetGravityMagnitude Parms{};

	Parms.Point = std::move(Point);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NinjaCharacter.NinjaPhysicsVolume.GetGravityScale
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ANinjaPhysicsVolume::GetGravityScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NinjaPhysicsVolume", "GetGravityScale");

	Params::NinjaPhysicsVolume_GetGravityScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

