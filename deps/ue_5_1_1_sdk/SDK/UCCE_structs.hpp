#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UCCE

#include "Basic.hpp"


namespace SDK
{

// Enum UCCE.EChromaSDKKeyCode
// NumValues: 0x007E
enum class EChromaSDKKeyCode : uint8
{
	KEYCODE_ESC                              = 0,
	KEYCODE_F1                               = 1,
	KEYCODE_F2                               = 2,
	KEYCODE_F3                               = 3,
	KEYCODE_F4                               = 4,
	KEYCODE_F5                               = 5,
	KEYCODE_F6                               = 6,
	KEYCODE_F7                               = 7,
	KEYCODE_F8                               = 8,
	KEYCODE_F9                               = 9,
	KEYCODE_F10                              = 10,
	KEYCODE_F11                              = 11,
	KEYCODE_F12                              = 12,
	KEYCODE_1                                = 13,
	KEYCODE_2                                = 14,
	KEYCODE_3                                = 15,
	KEYCODE_4                                = 16,
	KEYCODE_5                                = 17,
	KEYCODE_6                                = 18,
	KEYCODE_7                                = 19,
	KEYCODE_8                                = 20,
	KEYCODE_9                                = 21,
	KEYCODE_0                                = 22,
	KEYCODE_A                                = 23,
	KEYCODE_B                                = 24,
	KEYCODE_C                                = 25,
	KEYCODE_D                                = 26,
	KEYCODE_E                                = 27,
	KEYCODE_F                                = 28,
	KEYCODE_G                                = 29,
	KEYCODE_H                                = 30,
	KEYCODE_I                                = 31,
	KEYCODE_J                                = 32,
	KEYCODE_K                                = 33,
	KEYCODE_L                                = 34,
	KEYCODE_M                                = 35,
	KEYCODE_N                                = 36,
	KEYCODE_O                                = 37,
	KEYCODE_P                                = 38,
	KEYCODE_Q                                = 39,
	KEYCODE_R                                = 40,
	KEYCODE_S                                = 41,
	KEYCODE_T                                = 42,
	KEYCODE_U                                = 43,
	KEYCODE_V                                = 44,
	KEYCODE_W                                = 45,
	KEYCODE_X                                = 46,
	KEYCODE_Y                                = 47,
	KEYCODE_Z                                = 48,
	KEYCODE_NUMLOCK                          = 49,
	KEYCODE_NUMPAD0                          = 50,
	KEYCODE_NUMPAD1                          = 51,
	KEYCODE_NUMPAD2                          = 52,
	KEYCODE_NUMPAD3                          = 53,
	KEYCODE_NUMPAD4                          = 54,
	KEYCODE_NUMPAD5                          = 55,
	KEYCODE_NUMPAD6                          = 56,
	KEYCODE_NUMPAD7                          = 57,
	KEYCODE_NUMPAD8                          = 58,
	KEYCODE_NUMPAD9                          = 59,
	KEYCODE_NUMPAD_DIVIDE                    = 60,
	KEYCODE_NUMPAD_MULTIPLY                  = 61,
	KEYCODE_NUMPAD_SUBTRACT                  = 62,
	KEYCODE_NUMPAD_ADD                       = 63,
	KEYCODE_NUMPAD_ENTER                     = 64,
	KEYCODE_NUMPAD_DECIMAL                   = 65,
	KEYCODE_PRINTSCREEN                      = 66,
	KEYCODE_SCROLL                           = 67,
	KEYCODE_PAUSE                            = 68,
	KEYCODE_INSERT                           = 69,
	KEYCODE_HOME                             = 70,
	KEYCODE_PAGEUP                           = 71,
	KEYCODE_DELETE                           = 72,
	KEYCODE_END                              = 73,
	KEYCODE_PAGEDOWN                         = 74,
	KEYCODE_UP                               = 75,
	KEYCODE_LEFT                             = 76,
	KEYCODE_DOWN                             = 77,
	KEYCODE_RIGHT                            = 78,
	KEYCODE_TAB                              = 79,
	KEYCODE_CAPSLOCK                         = 80,
	KEYCODE_BACKSPACE                        = 81,
	KEYCODE_ENTER                            = 82,
	KEYCODE_LCTRL                            = 83,
	KEYCODE_LWIN                             = 84,
	KEYCODE_LALT                             = 85,
	KEYCODE_SPACE                            = 86,
	KEYCODE_RALT                             = 87,
	KEYCODE_FN                               = 88,
	KEYCODE_RMENU                            = 89,
	KEYCODE_RCTRL                            = 90,
	KEYCODE_LSHIFT                           = 91,
	KEYCODE_RSHIFT                           = 92,
	KEYCODE_MACRO1                           = 93,
	KEYCODE_MACRO2                           = 94,
	KEYCODE_MACRO3                           = 95,
	KEYCODE_MACRO4                           = 96,
	KEYCODE_MACRO5                           = 97,
	KEYCODE_OEM_1                            = 98,
	KEYCODE_OEM_2                            = 99,
	KEYCODE_OEM_3                            = 100,
	KEYCODE_OEM_4                            = 101,
	KEYCODE_OEM_5                            = 102,
	KEYCODE_OEM_6                            = 103,
	KEYCODE_OEM_7                            = 104,
	KEYCODE_OEM_8                            = 105,
	KEYCODE_OEM_9                            = 106,
	KEYCODE_OEM_10                           = 107,
	KEYCODE_OEM_11                           = 108,
	KEYCODE_EUR_1                            = 109,
	KEYCODE_EUR_2                            = 110,
	KEYCODE_JPN_1                            = 111,
	KEYCODE_JPN_2                            = 112,
	KEYCODE_JPN_3                            = 113,
	KEYCODE_JPN_4                            = 114,
	KEYCODE_JPN_5                            = 115,
	KEYCODE_KOR_1                            = 116,
	KEYCODE_KOR_2                            = 117,
	KEYCODE_KOR_3                            = 118,
	KEYCODE_KOR_4                            = 119,
	KEYCODE_KOR_5                            = 120,
	KEYCODE_KOR_6                            = 121,
	KEYCODE_KOR_7                            = 122,
	KEYCODE_LOGO                             = 123,
	KEYCODE_INVALID                          = 124,
	KEYCODE_MAX                              = 125,
};

// Enum UCCE.EChromaSDKSupportedDevice
// NumValues: 0x0007
enum class EChromaSDKSupportedDevice : uint8
{
	Keyboard                                 = 0,
	Mouse                                    = 1,
	Headset                                  = 2,
	Mousepad                                 = 3,
	Keypad                                   = 4,
	ChromaLink                               = 5,
	EChromaSDKSupportedDevice_MAX            = 6,
};

// ScriptStruct UCCE.EffectHandle
// 0x0008 (0x0008 - 0x0000)
struct FEffectHandle final
{
public:
	class FName                                   UniqueID;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEffectHandle) == 0x000004, "Wrong alignment on FEffectHandle");
static_assert(sizeof(FEffectHandle) == 0x000008, "Wrong size on FEffectHandle");
static_assert(offsetof(FEffectHandle, UniqueID) == 0x000000, "Member 'FEffectHandle::UniqueID' has a wrong offset!");

// ScriptStruct UCCE.ChromaAnimDef
// 0x0120 (0x0120 - 0x0000)
struct FChromaAnimDef final
{
public:
	TSoftObjectPtr<class UChromaAnimationAsset>   Keyboard;                                          // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UChromaAnimationAsset>   Mouse;                                             // 0x0030(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UChromaAnimationAsset>   Headset;                                           // 0x0060(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UChromaAnimationAsset>   Mousepad;                                          // 0x0090(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UChromaAnimationAsset>   Keypad;                                            // 0x00C0(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UChromaAnimationAsset>   ChromaLink;                                        // 0x00F0(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChromaAnimDef) == 0x000008, "Wrong alignment on FChromaAnimDef");
static_assert(sizeof(FChromaAnimDef) == 0x000120, "Wrong size on FChromaAnimDef");
static_assert(offsetof(FChromaAnimDef, Keyboard) == 0x000000, "Member 'FChromaAnimDef::Keyboard' has a wrong offset!");
static_assert(offsetof(FChromaAnimDef, Mouse) == 0x000030, "Member 'FChromaAnimDef::Mouse' has a wrong offset!");
static_assert(offsetof(FChromaAnimDef, Headset) == 0x000060, "Member 'FChromaAnimDef::Headset' has a wrong offset!");
static_assert(offsetof(FChromaAnimDef, Mousepad) == 0x000090, "Member 'FChromaAnimDef::Mousepad' has a wrong offset!");
static_assert(offsetof(FChromaAnimDef, Keypad) == 0x0000C0, "Member 'FChromaAnimDef::Keypad' has a wrong offset!");
static_assert(offsetof(FChromaAnimDef, ChromaLink) == 0x0000F0, "Member 'FChromaAnimDef::ChromaLink' has a wrong offset!");

// ScriptStruct UCCE.ChromaAnimProxy
// 0x0018 (0x0018 - 0x0000)
struct FChromaAnimProxy final
{
public:
	int32                                         Channel;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReplaceAll;                                        // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SendsEvent;                                        // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LoopsEvent;                                        // 0x0006(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PersistentEvent;                                   // 0x0007(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FChromaAnimDef>                 Variants;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChromaAnimProxy) == 0x000008, "Wrong alignment on FChromaAnimProxy");
static_assert(sizeof(FChromaAnimProxy) == 0x000018, "Wrong size on FChromaAnimProxy");
static_assert(offsetof(FChromaAnimProxy, Channel) == 0x000000, "Member 'FChromaAnimProxy::Channel' has a wrong offset!");
static_assert(offsetof(FChromaAnimProxy, ReplaceAll) == 0x000004, "Member 'FChromaAnimProxy::ReplaceAll' has a wrong offset!");
static_assert(offsetof(FChromaAnimProxy, SendsEvent) == 0x000005, "Member 'FChromaAnimProxy::SendsEvent' has a wrong offset!");
static_assert(offsetof(FChromaAnimProxy, LoopsEvent) == 0x000006, "Member 'FChromaAnimProxy::LoopsEvent' has a wrong offset!");
static_assert(offsetof(FChromaAnimProxy, PersistentEvent) == 0x000007, "Member 'FChromaAnimProxy::PersistentEvent' has a wrong offset!");
static_assert(offsetof(FChromaAnimProxy, Variants) == 0x000008, "Member 'FChromaAnimProxy::Variants' has a wrong offset!");

// ScriptStruct UCCE.DynamicForceFeedbackBPHandle
// 0x0008 (0x0008 - 0x0000)
struct FDynamicForceFeedbackBPHandle final
{
public:
	uint64                                        Handle;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDynamicForceFeedbackBPHandle) == 0x000008, "Wrong alignment on FDynamicForceFeedbackBPHandle");
static_assert(sizeof(FDynamicForceFeedbackBPHandle) == 0x000008, "Wrong size on FDynamicForceFeedbackBPHandle");
static_assert(offsetof(FDynamicForceFeedbackBPHandle, Handle) == 0x000000, "Member 'FDynamicForceFeedbackBPHandle::Handle' has a wrong offset!");

// ScriptStruct UCCE.ChromaSDKAppInfo
// 0x0048 (0x0048 - 0x0000)
struct FChromaSDKAppInfo final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Author_Name;                                       // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Author_Contact;                                    // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SupportedDevice;                                   // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Category;                                          // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChromaSDKAppInfo) == 0x000008, "Wrong alignment on FChromaSDKAppInfo");
static_assert(sizeof(FChromaSDKAppInfo) == 0x000048, "Wrong size on FChromaSDKAppInfo");
static_assert(offsetof(FChromaSDKAppInfo, Title) == 0x000000, "Member 'FChromaSDKAppInfo::Title' has a wrong offset!");
static_assert(offsetof(FChromaSDKAppInfo, Description) == 0x000010, "Member 'FChromaSDKAppInfo::Description' has a wrong offset!");
static_assert(offsetof(FChromaSDKAppInfo, Author_Name) == 0x000020, "Member 'FChromaSDKAppInfo::Author_Name' has a wrong offset!");
static_assert(offsetof(FChromaSDKAppInfo, Author_Contact) == 0x000030, "Member 'FChromaSDKAppInfo::Author_Contact' has a wrong offset!");
static_assert(offsetof(FChromaSDKAppInfo, SupportedDevice) == 0x000040, "Member 'FChromaSDKAppInfo::SupportedDevice' has a wrong offset!");
static_assert(offsetof(FChromaSDKAppInfo, Category) == 0x000044, "Member 'FChromaSDKAppInfo::Category' has a wrong offset!");

}

