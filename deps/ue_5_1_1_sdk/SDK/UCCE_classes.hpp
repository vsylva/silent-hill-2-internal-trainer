#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UCCE

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "UCCE_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class UCCE.TriggerEffect
// 0x0008 (0x0038 - 0x0030)
class UTriggerEffect : public UDataAsset
{
public:
	uint8                                         bIsLeftTrigger : 1;                                // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseEffectForThreshold : 1;                        // 0x0030(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TriggerEffect">();
	}
	static class UTriggerEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTriggerEffect>();
	}
};
static_assert(alignof(UTriggerEffect) == 0x000008, "Wrong alignment on UTriggerEffect");
static_assert(sizeof(UTriggerEffect) == 0x000038, "Wrong size on UTriggerEffect");

// Class UCCE.SlopeFeedbackTriggerEffect
// 0x0008 (0x0040 - 0x0038)
class USlopeFeedbackTriggerEffect final : public UTriggerEffect
{
public:
	uint8                                         StartPosition;                                     // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EndPosition;                                       // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StartStrength;                                     // 0x003A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EndStrength;                                       // 0x003B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SlopeFeedbackTriggerEffect">();
	}
	static class USlopeFeedbackTriggerEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<USlopeFeedbackTriggerEffect>();
	}
};
static_assert(alignof(USlopeFeedbackTriggerEffect) == 0x000008, "Wrong alignment on USlopeFeedbackTriggerEffect");
static_assert(sizeof(USlopeFeedbackTriggerEffect) == 0x000040, "Wrong size on USlopeFeedbackTriggerEffect");
static_assert(offsetof(USlopeFeedbackTriggerEffect, StartPosition) == 0x000038, "Member 'USlopeFeedbackTriggerEffect::StartPosition' has a wrong offset!");
static_assert(offsetof(USlopeFeedbackTriggerEffect, EndPosition) == 0x000039, "Member 'USlopeFeedbackTriggerEffect::EndPosition' has a wrong offset!");
static_assert(offsetof(USlopeFeedbackTriggerEffect, StartStrength) == 0x00003A, "Member 'USlopeFeedbackTriggerEffect::StartStrength' has a wrong offset!");
static_assert(offsetof(USlopeFeedbackTriggerEffect, EndStrength) == 0x00003B, "Member 'USlopeFeedbackTriggerEffect::EndStrength' has a wrong offset!");

// Class UCCE.ChromaAnimationAsset
// 0x0030 (0x0060 - 0x0030)
class UChromaAnimationAsset final : public UDataAsset
{
public:
	class FName                                   Name_0;                                            // 0x0030(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SourcePath;                                        // 0x0038(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DataSize;                                          // 0x0048(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Data;                                              // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChromaAnimationAsset">();
	}
	static class UChromaAnimationAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChromaAnimationAsset>();
	}
};
static_assert(alignof(UChromaAnimationAsset) == 0x000008, "Wrong alignment on UChromaAnimationAsset");
static_assert(sizeof(UChromaAnimationAsset) == 0x000060, "Wrong size on UChromaAnimationAsset");
static_assert(offsetof(UChromaAnimationAsset, Name_0) == 0x000030, "Member 'UChromaAnimationAsset::Name_0' has a wrong offset!");
static_assert(offsetof(UChromaAnimationAsset, SourcePath) == 0x000038, "Member 'UChromaAnimationAsset::SourcePath' has a wrong offset!");
static_assert(offsetof(UChromaAnimationAsset, DataSize) == 0x000048, "Member 'UChromaAnimationAsset::DataSize' has a wrong offset!");
static_assert(offsetof(UChromaAnimationAsset, Data) == 0x000050, "Member 'UChromaAnimationAsset::Data' has a wrong offset!");

// Class UCCE.ControllerEffectsManager
// 0x0C38 (0x0C68 - 0x0030)
class UControllerEffectsManager final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             BP_OnGamePadUsageOffCountdownStarted;              // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x18];                                      // 0x0048(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             BP_OnGamePadUsageOffCountdownInterrupted;          // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x18];                                      // 0x0070(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             BP_OnGamePadUsageOff;                              // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0xB78];                                     // 0x0098(0x0B78)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class APlayerController>       PlayerController;                                  // 0x0C10(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          WWiseMotionStopEvent;                              // 0x0C18(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkRtpc*                                WWiseMotionScaleRTPC;                              // 0x0C20(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkRtpc*                                WWiseMotionCtrlTypeRTPC;                           // 0x0C28(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C30[0x38];                                     // 0x0C30(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ForceStopForceFeedbackEffects();
	void HandleControllerConnectionChange(EInputDeviceConnectionState InputDeviceConnectionState, const struct FPlatformUserId& PlatformUserId, const struct FInputDeviceId& InputDeviceId);
	void K2_PlayDynamicForceFeedback(struct FDynamicForceFeedbackBPHandle* InHandle, float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, EDynamicForceFeedbackAction Action);
	void K2_PlayForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, class FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);
	void K2_SetTriggerEffect(class UTriggerEffect* Effect);
	void K2_StartDynamicForceFeedback(struct FDynamicForceFeedbackBPHandle* InHandle, float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall);
	void K2_StoptDynamicForceFeedback(const struct FDynamicForceFeedbackBPHandle& InHandle, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall);
	void K2_UpdateDynamicForceFeedback(const struct FDynamicForceFeedbackBPHandle& InHandle, float Intensity, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall);
	void OnActorEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);
	void PlaySpecialEffect(const struct FEffectHandle& Handle, bool Loop, int32 Variant);
	void ResetAllStates(bool PersistentEvents);
	void ResetControllerLightColor();
	void ResetPersistentEvents();
	void SetControllerLightColor(const struct FColor& Color);
	class UForceFeedbackComponent* SpawnForceFeedbackAtLocation(class UForceFeedbackEffect* ForceFeedbackEffect, const struct FVector& Location, const struct FRotator& Rotation, bool bLooping, float IntensityMultiplier, float StartTime, class UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);
	class UForceFeedbackComponent* SpawnForceFeedbackAttached(class UForceFeedbackEffect* ForceFeedbackEffect, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, class UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);
	void StopForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, class FName Tag);
	void StopSpecialEffect(const struct FEffectHandle& Handle);
	void TriggerEvent(class FName Name_0);
	void TurnOffTriggerEffect();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControllerEffectsManager">();
	}
	static class UControllerEffectsManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControllerEffectsManager>();
	}
};
static_assert(alignof(UControllerEffectsManager) == 0x000008, "Wrong alignment on UControllerEffectsManager");
static_assert(sizeof(UControllerEffectsManager) == 0x000C68, "Wrong size on UControllerEffectsManager");
static_assert(offsetof(UControllerEffectsManager, BP_OnGamePadUsageOffCountdownStarted) == 0x000038, "Member 'UControllerEffectsManager::BP_OnGamePadUsageOffCountdownStarted' has a wrong offset!");
static_assert(offsetof(UControllerEffectsManager, BP_OnGamePadUsageOffCountdownInterrupted) == 0x000060, "Member 'UControllerEffectsManager::BP_OnGamePadUsageOffCountdownInterrupted' has a wrong offset!");
static_assert(offsetof(UControllerEffectsManager, BP_OnGamePadUsageOff) == 0x000088, "Member 'UControllerEffectsManager::BP_OnGamePadUsageOff' has a wrong offset!");
static_assert(offsetof(UControllerEffectsManager, PlayerController) == 0x000C10, "Member 'UControllerEffectsManager::PlayerController' has a wrong offset!");
static_assert(offsetof(UControllerEffectsManager, WWiseMotionStopEvent) == 0x000C18, "Member 'UControllerEffectsManager::WWiseMotionStopEvent' has a wrong offset!");
static_assert(offsetof(UControllerEffectsManager, WWiseMotionScaleRTPC) == 0x000C20, "Member 'UControllerEffectsManager::WWiseMotionScaleRTPC' has a wrong offset!");
static_assert(offsetof(UControllerEffectsManager, WWiseMotionCtrlTypeRTPC) == 0x000C28, "Member 'UControllerEffectsManager::WWiseMotionCtrlTypeRTPC' has a wrong offset!");

// Class UCCE.ForceFeedbackEffectEx
// 0x0008 (0x0048 - 0x0040)
class UForceFeedbackEffectEx final : public UForceFeedbackEffect
{
public:
	class UAkAudioEvent*                          MotionEvent;                                       // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ForceFeedbackEffectEx">();
	}
	static class UForceFeedbackEffectEx* GetDefaultObj()
	{
		return GetDefaultObjImpl<UForceFeedbackEffectEx>();
	}
};
static_assert(alignof(UForceFeedbackEffectEx) == 0x000008, "Wrong alignment on UForceFeedbackEffectEx");
static_assert(sizeof(UForceFeedbackEffectEx) == 0x000048, "Wrong size on UForceFeedbackEffectEx");
static_assert(offsetof(UForceFeedbackEffectEx, MotionEvent) == 0x000040, "Member 'UForceFeedbackEffectEx::MotionEvent' has a wrong offset!");

// Class UCCE.WeaponTriggerEffect
// 0x0008 (0x0040 - 0x0038)
class UWeaponTriggerEffect final : public UTriggerEffect
{
public:
	uint8                                         StartPosition;                                     // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EndPosition;                                       // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Strength;                                          // 0x003A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WeaponTriggerEffect">();
	}
	static class UWeaponTriggerEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeaponTriggerEffect>();
	}
};
static_assert(alignof(UWeaponTriggerEffect) == 0x000008, "Wrong alignment on UWeaponTriggerEffect");
static_assert(sizeof(UWeaponTriggerEffect) == 0x000040, "Wrong size on UWeaponTriggerEffect");
static_assert(offsetof(UWeaponTriggerEffect, StartPosition) == 0x000038, "Member 'UWeaponTriggerEffect::StartPosition' has a wrong offset!");
static_assert(offsetof(UWeaponTriggerEffect, EndPosition) == 0x000039, "Member 'UWeaponTriggerEffect::EndPosition' has a wrong offset!");
static_assert(offsetof(UWeaponTriggerEffect, Strength) == 0x00003A, "Member 'UWeaponTriggerEffect::Strength' has a wrong offset!");

// Class UCCE.VibrationTriggerEffect
// 0x0008 (0x0040 - 0x0038)
class UVibrationTriggerEffect final : public UTriggerEffect
{
public:
	uint8                                         Position;                                          // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Frequency;                                         // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Amplitude;                                         // 0x003A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VibrationTriggerEffect">();
	}
	static class UVibrationTriggerEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVibrationTriggerEffect>();
	}
};
static_assert(alignof(UVibrationTriggerEffect) == 0x000008, "Wrong alignment on UVibrationTriggerEffect");
static_assert(sizeof(UVibrationTriggerEffect) == 0x000040, "Wrong size on UVibrationTriggerEffect");
static_assert(offsetof(UVibrationTriggerEffect, Position) == 0x000038, "Member 'UVibrationTriggerEffect::Position' has a wrong offset!");
static_assert(offsetof(UVibrationTriggerEffect, Frequency) == 0x000039, "Member 'UVibrationTriggerEffect::Frequency' has a wrong offset!");
static_assert(offsetof(UVibrationTriggerEffect, Amplitude) == 0x00003A, "Member 'UVibrationTriggerEffect::Amplitude' has a wrong offset!");

// Class UCCE.FeedbackTriggerEffect
// 0x0008 (0x0040 - 0x0038)
class UFeedbackTriggerEffect final : public UTriggerEffect
{
public:
	uint8                                         Position;                                          // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Strength;                                          // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FeedbackTriggerEffect">();
	}
	static class UFeedbackTriggerEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFeedbackTriggerEffect>();
	}
};
static_assert(alignof(UFeedbackTriggerEffect) == 0x000008, "Wrong alignment on UFeedbackTriggerEffect");
static_assert(sizeof(UFeedbackTriggerEffect) == 0x000040, "Wrong size on UFeedbackTriggerEffect");
static_assert(offsetof(UFeedbackTriggerEffect, Position) == 0x000038, "Member 'UFeedbackTriggerEffect::Position' has a wrong offset!");
static_assert(offsetof(UFeedbackTriggerEffect, Strength) == 0x000039, "Member 'UFeedbackTriggerEffect::Strength' has a wrong offset!");

// Class UCCE.MultiPositionFeedbackTriggerEffect
// 0x0010 (0x0048 - 0x0038)
class UMultiPositionFeedbackTriggerEffect final : public UTriggerEffect
{
public:
	uint8                                         Strength[0xA];                                     // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MultiPositionFeedbackTriggerEffect">();
	}
	static class UMultiPositionFeedbackTriggerEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMultiPositionFeedbackTriggerEffect>();
	}
};
static_assert(alignof(UMultiPositionFeedbackTriggerEffect) == 0x000008, "Wrong alignment on UMultiPositionFeedbackTriggerEffect");
static_assert(sizeof(UMultiPositionFeedbackTriggerEffect) == 0x000048, "Wrong size on UMultiPositionFeedbackTriggerEffect");
static_assert(offsetof(UMultiPositionFeedbackTriggerEffect, Strength) == 0x000038, "Member 'UMultiPositionFeedbackTriggerEffect::Strength' has a wrong offset!");

// Class UCCE.MultiPositionVibrationTriggerEffect
// 0x0010 (0x0048 - 0x0038)
class UMultiPositionVibrationTriggerEffect final : public UTriggerEffect
{
public:
	uint8                                         Frequency;                                         // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Amplitude[0xA];                                    // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MultiPositionVibrationTriggerEffect">();
	}
	static class UMultiPositionVibrationTriggerEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMultiPositionVibrationTriggerEffect>();
	}
};
static_assert(alignof(UMultiPositionVibrationTriggerEffect) == 0x000008, "Wrong alignment on UMultiPositionVibrationTriggerEffect");
static_assert(sizeof(UMultiPositionVibrationTriggerEffect) == 0x000048, "Wrong size on UMultiPositionVibrationTriggerEffect");
static_assert(offsetof(UMultiPositionVibrationTriggerEffect, Frequency) == 0x000038, "Member 'UMultiPositionVibrationTriggerEffect::Frequency' has a wrong offset!");
static_assert(offsetof(UMultiPositionVibrationTriggerEffect, Amplitude) == 0x000039, "Member 'UMultiPositionVibrationTriggerEffect::Amplitude' has a wrong offset!");

// Class UCCE.UCCESettings
// 0x0160 (0x0188 - 0x0028)
class UUCCESettings final : public UObject
{
public:
	float                                         GamepadLastUseStartTimeSec;                        // 0x0028(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadLastUseEndTimeSec;                          // 0x002C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         XSXForceFeedbackScale;                             // 0x0030(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ps5ForceFeedbackScale;                             // 0x0034(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseWWiseMotion;                                   // 0x0038(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MotionAudioDeviceName;                             // 0x0040(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAudioEvent>           WWiseMotionStopAllEvent;                           // 0x0050(0x0030)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkRtpc>                 WWiseMotionScale;                                  // 0x0080(0x0030)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkRtpc>                 WWiseMotionCtrlType;                               // 0x00B0(0x0030)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChromaSupported;                                  // 0x00E0(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FChromaSDKAppInfo                      ChromaAppInfo;                                     // 0x00E8(0x0048)(Edit, Config, NativeAccessSpecifierPublic)
	uint32                                        ForwardPadColor;                                   // 0x0130(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FChromaAnimProxy>    ChromaAnimationsMap;                               // 0x0138(0x0050)(Edit, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCCESettings">();
	}
	static class UUCCESettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCCESettings>();
	}
};
static_assert(alignof(UUCCESettings) == 0x000008, "Wrong alignment on UUCCESettings");
static_assert(sizeof(UUCCESettings) == 0x000188, "Wrong size on UUCCESettings");
static_assert(offsetof(UUCCESettings, GamepadLastUseStartTimeSec) == 0x000028, "Member 'UUCCESettings::GamepadLastUseStartTimeSec' has a wrong offset!");
static_assert(offsetof(UUCCESettings, GamepadLastUseEndTimeSec) == 0x00002C, "Member 'UUCCESettings::GamepadLastUseEndTimeSec' has a wrong offset!");
static_assert(offsetof(UUCCESettings, XSXForceFeedbackScale) == 0x000030, "Member 'UUCCESettings::XSXForceFeedbackScale' has a wrong offset!");
static_assert(offsetof(UUCCESettings, Ps5ForceFeedbackScale) == 0x000034, "Member 'UUCCESettings::Ps5ForceFeedbackScale' has a wrong offset!");
static_assert(offsetof(UUCCESettings, bUseWWiseMotion) == 0x000038, "Member 'UUCCESettings::bUseWWiseMotion' has a wrong offset!");
static_assert(offsetof(UUCCESettings, MotionAudioDeviceName) == 0x000040, "Member 'UUCCESettings::MotionAudioDeviceName' has a wrong offset!");
static_assert(offsetof(UUCCESettings, WWiseMotionStopAllEvent) == 0x000050, "Member 'UUCCESettings::WWiseMotionStopAllEvent' has a wrong offset!");
static_assert(offsetof(UUCCESettings, WWiseMotionScale) == 0x000080, "Member 'UUCCESettings::WWiseMotionScale' has a wrong offset!");
static_assert(offsetof(UUCCESettings, WWiseMotionCtrlType) == 0x0000B0, "Member 'UUCCESettings::WWiseMotionCtrlType' has a wrong offset!");
static_assert(offsetof(UUCCESettings, bChromaSupported) == 0x0000E0, "Member 'UUCCESettings::bChromaSupported' has a wrong offset!");
static_assert(offsetof(UUCCESettings, ChromaAppInfo) == 0x0000E8, "Member 'UUCCESettings::ChromaAppInfo' has a wrong offset!");
static_assert(offsetof(UUCCESettings, ForwardPadColor) == 0x000130, "Member 'UUCCESettings::ForwardPadColor' has a wrong offset!");
static_assert(offsetof(UUCCESettings, ChromaAnimationsMap) == 0x000138, "Member 'UUCCESettings::ChromaAnimationsMap' has a wrong offset!");

}

