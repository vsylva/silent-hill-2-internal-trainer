#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Dai

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum Dai.ENumberCompareOperation
// NumValues: 0x0007
enum class ENumberCompareOperation : uint8
{
	IsEqual                                  = 0,
	IsNotEqual                               = 1,
	IsGreater                                = 2,
	IsGreaterOrEqual                         = 3,
	IsLess                                   = 4,
	IsLessOrEqual                            = 5,
	ENumberCompareOperation_MAX              = 6,
};

// Enum Dai.EConditionMatchType
// NumValues: 0x0003
enum class EConditionMatchType : uint8
{
	All                                      = 0,
	Any                                      = 1,
	EConditionMatchType_MAX                  = 2,
};

// Enum Dai.EDaiContextType
// NumValues: 0x000B
enum class EDaiContextType : uint8
{
	Caller                                   = 0,
	Context                                  = 1,
	Player                                   = 2,
	Reference                                = 3,
	ByClass                                  = 4,
	ByGameplayTag                            = 5,
	ByTag                                    = 6,
	ByName                                   = 7,
	CustomGetter                             = 8,
	CallerAI                                 = 9,
	EDaiContextType_MAX                      = 10,
};

// Enum Dai.EDaiDistanceType
// NumValues: 0x0005
enum class EDaiDistanceType : uint8
{
	Distance2D5                              = 0,
	Distance3D                               = 1,
	Distance2D                               = 2,
	DistanceUp                               = 3,
	MAX                                      = 4,
};

// Enum Dai.ETraceableByPlayerLevel
// NumValues: 0x0005
enum class ETraceableByPlayerLevel : uint8
{
	TRACE_MINIMAL                            = 0,
	TRACE_NORMAL                             = 1,
	TRACE_MEDIUM                             = 2,
	TRACE_HIGH                               = 3,
	TRACE_MAX                                = 4,
};

// Enum Dai.ETraceableByPlayerConditions
// NumValues: 0x0004
enum class ETraceableByPlayerConditions : uint8
{
	CONDITION_AT_LEAST_1                     = 0,
	CONDITION_AT_LEAST_1_OF_4                = 1,
	CONDITION_AT_LEAST_1_OF_2                = 2,
	CONDITION_AT_LEAST_MAX                   = 3,
};

// Enum Dai.EMaskFilter
// NumValues: 0x0003
enum class EMaskFilter : uint8
{
	Nothing                                  = 0,
	SeeThrough                               = 1,
	EMaskFilter_MAX                          = 2,
};

// Enum Dai.EDaiObjectStatus
// NumValues: 0x0006
enum class EDaiObjectStatus : uint8
{
	Unknown                                  = 0,
	Running                                  = 1,
	Success                                  = 2,
	Failure                                  = 3,
	Aborted                                  = 4,
	EDaiObjectStatus_MAX                     = 5,
};

// Enum Dai.ENotifyTagOperation
// NumValues: 0x0003
enum class ENotifyTagOperation : uint8
{
	Add                                      = 0,
	Remove                                   = 1,
	ENotifyTagOperation_MAX                  = 2,
};

// Enum Dai.EDaiFloatOperator
// NumValues: 0x0006
enum class EDaiFloatOperator : uint8
{
	Mul                                      = 0,
	Add                                      = 1,
	Div                                      = 2,
	Sub                                      = 3,
	Set                                      = 4,
	EDaiFloatOperator_MAX                    = 5,
};

// ScriptStruct Dai.DaiEnum
// 0x0010 (0x0010 - 0x0000)
struct FDaiEnum final
{
public:
	class UEnum*                                  _Enum;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _Value;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _Enabled;                                          // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDaiEnum) == 0x000008, "Wrong alignment on FDaiEnum");
static_assert(sizeof(FDaiEnum) == 0x000010, "Wrong size on FDaiEnum");
static_assert(offsetof(FDaiEnum, _Enum) == 0x000000, "Member 'FDaiEnum::_Enum' has a wrong offset!");
static_assert(offsetof(FDaiEnum, _Value) == 0x000008, "Member 'FDaiEnum::_Value' has a wrong offset!");
static_assert(offsetof(FDaiEnum, _Enabled) == 0x000009, "Member 'FDaiEnum::_Enabled' has a wrong offset!");

// ScriptStruct Dai.DaiActorName
// 0x0010 (0x0010 - 0x0000)
struct FDaiActorName final
{
public:
	class FName                                   _Name;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     _Class;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDaiActorName) == 0x000008, "Wrong alignment on FDaiActorName");
static_assert(sizeof(FDaiActorName) == 0x000010, "Wrong size on FDaiActorName");
static_assert(offsetof(FDaiActorName, _Name) == 0x000000, "Member 'FDaiActorName::_Name' has a wrong offset!");
static_assert(offsetof(FDaiActorName, _Class) == 0x000008, "Member 'FDaiActorName::_Class' has a wrong offset!");

// ScriptStruct Dai.DaiTarget
// 0x0058 (0x0058 - 0x0000)
struct FDaiTarget final
{
public:
	bool                                          _DirectSet;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class AActor>                  _Actor;                                            // 0x0008(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     _Class;                                            // 0x0038(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _UseGameplayTag;                                   // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           _GameplayTag;                                      // 0x0044(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _Tag;                                              // 0x004C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDaiTarget) == 0x000008, "Wrong alignment on FDaiTarget");
static_assert(sizeof(FDaiTarget) == 0x000058, "Wrong size on FDaiTarget");
static_assert(offsetof(FDaiTarget, _DirectSet) == 0x000000, "Member 'FDaiTarget::_DirectSet' has a wrong offset!");
static_assert(offsetof(FDaiTarget, _Actor) == 0x000008, "Member 'FDaiTarget::_Actor' has a wrong offset!");
static_assert(offsetof(FDaiTarget, _Class) == 0x000038, "Member 'FDaiTarget::_Class' has a wrong offset!");
static_assert(offsetof(FDaiTarget, _UseGameplayTag) == 0x000040, "Member 'FDaiTarget::_UseGameplayTag' has a wrong offset!");
static_assert(offsetof(FDaiTarget, _GameplayTag) == 0x000044, "Member 'FDaiTarget::_GameplayTag' has a wrong offset!");
static_assert(offsetof(FDaiTarget, _Tag) == 0x00004C, "Member 'FDaiTarget::_Tag' has a wrong offset!");

// ScriptStruct Dai.DaiContext
// 0x0080 (0x0080 - 0x0000)
struct FDaiContext final
{
public:
	EDaiContextType                               _ContextType;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class AActor>                  _Reference;                                        // 0x0008(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     _Class;                                            // 0x0038(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           _GameplayTag;                                      // 0x0040(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _Tag;                                              // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDaiActorName                          _Name;                                             // 0x0050(0x0010)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDaiContextGetter*                      _Getter;                                           // 0x0060(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x18];                                      // 0x0068(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDaiContext) == 0x000008, "Wrong alignment on FDaiContext");
static_assert(sizeof(FDaiContext) == 0x000080, "Wrong size on FDaiContext");
static_assert(offsetof(FDaiContext, _ContextType) == 0x000000, "Member 'FDaiContext::_ContextType' has a wrong offset!");
static_assert(offsetof(FDaiContext, _Reference) == 0x000008, "Member 'FDaiContext::_Reference' has a wrong offset!");
static_assert(offsetof(FDaiContext, _Class) == 0x000038, "Member 'FDaiContext::_Class' has a wrong offset!");
static_assert(offsetof(FDaiContext, _GameplayTag) == 0x000040, "Member 'FDaiContext::_GameplayTag' has a wrong offset!");
static_assert(offsetof(FDaiContext, _Tag) == 0x000048, "Member 'FDaiContext::_Tag' has a wrong offset!");
static_assert(offsetof(FDaiContext, _Name) == 0x000050, "Member 'FDaiContext::_Name' has a wrong offset!");
static_assert(offsetof(FDaiContext, _Getter) == 0x000060, "Member 'FDaiContext::_Getter' has a wrong offset!");

// ScriptStruct Dai.DaiNameBox
// 0x000C (0x000C - 0x0000)
struct FDaiNameBox final
{
public:
	class FName                                   _Name;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _Index;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDaiNameBox) == 0x000004, "Wrong alignment on FDaiNameBox");
static_assert(sizeof(FDaiNameBox) == 0x00000C, "Wrong size on FDaiNameBox");
static_assert(offsetof(FDaiNameBox, _Name) == 0x000000, "Member 'FDaiNameBox::_Name' has a wrong offset!");
static_assert(offsetof(FDaiNameBox, _Index) == 0x000008, "Member 'FDaiNameBox::_Index' has a wrong offset!");

// ScriptStruct Dai.DaiConditions
// 0x0030 (0x0030 - 0x0000)
struct FDaiConditions final
{
public:
	EConditionMatchType                           _MatchType;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _Debug;                                            // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDaiCondition*>                  _List;                                             // 0x0008(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<TScriptInterface<class IDaiConditionsListenerInterface>> _Listeners;                                        // 0x0018(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDaiConditions) == 0x000008, "Wrong alignment on FDaiConditions");
static_assert(sizeof(FDaiConditions) == 0x000030, "Wrong size on FDaiConditions");
static_assert(offsetof(FDaiConditions, _MatchType) == 0x000000, "Member 'FDaiConditions::_MatchType' has a wrong offset!");
static_assert(offsetof(FDaiConditions, _Debug) == 0x000001, "Member 'FDaiConditions::_Debug' has a wrong offset!");
static_assert(offsetof(FDaiConditions, _List) == 0x000008, "Member 'FDaiConditions::_List' has a wrong offset!");
static_assert(offsetof(FDaiConditions, _Listeners) == 0x000018, "Member 'FDaiConditions::_Listeners' has a wrong offset!");

// ScriptStruct Dai.DaiAnimPlayParams
// 0x0070 (0x0078 - 0x0008)
struct FDaiAnimPlayParams final : public FTableRowBase
{
public:
	struct FGameplayTag                           _Tag;                                              // 0x0008(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _Weight;                                           // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _Angle;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        _Anim;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _PlayRate;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _TimeToStartAt;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _BlendOutTriggerTime;                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _IsMontage;                                        // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _Section;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _Slot;                                             // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _BlendInTime;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _BlendOutTime;                                     // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _SyncOffset;                                       // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               _SyncRotation;                                     // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDaiAnimPlayParams) == 0x000008, "Wrong alignment on FDaiAnimPlayParams");
static_assert(sizeof(FDaiAnimPlayParams) == 0x000078, "Wrong size on FDaiAnimPlayParams");
static_assert(offsetof(FDaiAnimPlayParams, _Tag) == 0x000008, "Member 'FDaiAnimPlayParams::_Tag' has a wrong offset!");
static_assert(offsetof(FDaiAnimPlayParams, _Weight) == 0x000010, "Member 'FDaiAnimPlayParams::_Weight' has a wrong offset!");
static_assert(offsetof(FDaiAnimPlayParams, _Angle) == 0x000014, "Member 'FDaiAnimPlayParams::_Angle' has a wrong offset!");
static_assert(offsetof(FDaiAnimPlayParams, _Anim) == 0x000018, "Member 'FDaiAnimPlayParams::_Anim' has a wrong offset!");
static_assert(offsetof(FDaiAnimPlayParams, _PlayRate) == 0x000020, "Member 'FDaiAnimPlayParams::_PlayRate' has a wrong offset!");
static_assert(offsetof(FDaiAnimPlayParams, _TimeToStartAt) == 0x000024, "Member 'FDaiAnimPlayParams::_TimeToStartAt' has a wrong offset!");
static_assert(offsetof(FDaiAnimPlayParams, _BlendOutTriggerTime) == 0x000028, "Member 'FDaiAnimPlayParams::_BlendOutTriggerTime' has a wrong offset!");
static_assert(offsetof(FDaiAnimPlayParams, _IsMontage) == 0x00002C, "Member 'FDaiAnimPlayParams::_IsMontage' has a wrong offset!");
static_assert(offsetof(FDaiAnimPlayParams, _Section) == 0x000030, "Member 'FDaiAnimPlayParams::_Section' has a wrong offset!");
static_assert(offsetof(FDaiAnimPlayParams, _Slot) == 0x000038, "Member 'FDaiAnimPlayParams::_Slot' has a wrong offset!");
static_assert(offsetof(FDaiAnimPlayParams, _BlendInTime) == 0x000040, "Member 'FDaiAnimPlayParams::_BlendInTime' has a wrong offset!");
static_assert(offsetof(FDaiAnimPlayParams, _BlendOutTime) == 0x000044, "Member 'FDaiAnimPlayParams::_BlendOutTime' has a wrong offset!");
static_assert(offsetof(FDaiAnimPlayParams, _SyncOffset) == 0x000048, "Member 'FDaiAnimPlayParams::_SyncOffset' has a wrong offset!");
static_assert(offsetof(FDaiAnimPlayParams, _SyncRotation) == 0x000060, "Member 'FDaiAnimPlayParams::_SyncRotation' has a wrong offset!");

// ScriptStruct Dai.DaiAnimsList
// 0x0010 (0x0010 - 0x0000)
struct FDaiAnimsList final
{
public:
	TArray<struct FDaiAnimPlayParams>             _Animations;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDaiAnimsList) == 0x000008, "Wrong alignment on FDaiAnimsList");
static_assert(sizeof(FDaiAnimsList) == 0x000010, "Wrong size on FDaiAnimsList");
static_assert(offsetof(FDaiAnimsList, _Animations) == 0x000000, "Member 'FDaiAnimsList::_Animations' has a wrong offset!");

// ScriptStruct Dai.DaiNotifies
// 0x0018 (0x0018 - 0x0000)
struct FDaiNotifies final
{
public:
	bool                                          _Debug;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _IgnoreFailure;                                    // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDaiNotify*>                     _List;                                             // 0x0008(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDaiNotifies) == 0x000008, "Wrong alignment on FDaiNotifies");
static_assert(sizeof(FDaiNotifies) == 0x000018, "Wrong size on FDaiNotifies");
static_assert(offsetof(FDaiNotifies, _Debug) == 0x000000, "Member 'FDaiNotifies::_Debug' has a wrong offset!");
static_assert(offsetof(FDaiNotifies, _IgnoreFailure) == 0x000001, "Member 'FDaiNotifies::_IgnoreFailure' has a wrong offset!");
static_assert(offsetof(FDaiNotifies, _List) == 0x000008, "Member 'FDaiNotifies::_List' has a wrong offset!");

// ScriptStruct Dai.DaiFloatModifiers
// 0x0018 (0x0018 - 0x0000)
struct FDaiFloatModifiers final
{
public:
	float                                         _BaseValue;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDaiFloatModifier*>              _List;                                             // 0x0008(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDaiFloatModifiers) == 0x000008, "Wrong alignment on FDaiFloatModifiers");
static_assert(sizeof(FDaiFloatModifiers) == 0x000018, "Wrong size on FDaiFloatModifiers");
static_assert(offsetof(FDaiFloatModifiers, _BaseValue) == 0x000000, "Member 'FDaiFloatModifiers::_BaseValue' has a wrong offset!");
static_assert(offsetof(FDaiFloatModifiers, _List) == 0x000008, "Member 'FDaiFloatModifiers::_List' has a wrong offset!");

// ScriptStruct Dai.DaiFloatModifiers1
// 0x0018 (0x0018 - 0x0000)
struct FDaiFloatModifiers1 final
{
public:
	float                                         _BaseValue;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDaiFloatModifier1*>             _List;                                             // 0x0008(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDaiFloatModifiers1) == 0x000008, "Wrong alignment on FDaiFloatModifiers1");
static_assert(sizeof(FDaiFloatModifiers1) == 0x000018, "Wrong size on FDaiFloatModifiers1");
static_assert(offsetof(FDaiFloatModifiers1, _BaseValue) == 0x000000, "Member 'FDaiFloatModifiers1::_BaseValue' has a wrong offset!");
static_assert(offsetof(FDaiFloatModifiers1, _List) == 0x000008, "Member 'FDaiFloatModifiers1::_List' has a wrong offset!");

// ScriptStruct Dai.DaiFloatModifiers2
// 0x0018 (0x0018 - 0x0000)
struct FDaiFloatModifiers2 final
{
public:
	float                                         _BaseValue;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDaiFloatModifier2*>             _List;                                             // 0x0008(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDaiFloatModifiers2) == 0x000008, "Wrong alignment on FDaiFloatModifiers2");
static_assert(sizeof(FDaiFloatModifiers2) == 0x000018, "Wrong size on FDaiFloatModifiers2");
static_assert(offsetof(FDaiFloatModifiers2, _BaseValue) == 0x000000, "Member 'FDaiFloatModifiers2::_BaseValue' has a wrong offset!");
static_assert(offsetof(FDaiFloatModifiers2, _List) == 0x000008, "Member 'FDaiFloatModifiers2::_List' has a wrong offset!");

// ScriptStruct Dai.DaiParams
// 0x0010 (0x0010 - 0x0000)
struct FDaiParams final
{
public:
	TArray<class UDaiParam*>                      _List;                                             // 0x0000(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDaiParams) == 0x000008, "Wrong alignment on FDaiParams");
static_assert(sizeof(FDaiParams) == 0x000010, "Wrong size on FDaiParams");
static_assert(offsetof(FDaiParams, _List) == 0x000000, "Member 'FDaiParams::_List' has a wrong offset!");

// ScriptStruct Dai.DaiBlockade
// 0x0018 (0x0018 - 0x0000)
struct FDaiBlockade final
{
public:
	bool                                          _Blocked;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           _Blockers;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDaiBlockade) == 0x000008, "Wrong alignment on FDaiBlockade");
static_assert(sizeof(FDaiBlockade) == 0x000018, "Wrong size on FDaiBlockade");
static_assert(offsetof(FDaiBlockade, _Blocked) == 0x000000, "Member 'FDaiBlockade::_Blocked' has a wrong offset!");
static_assert(offsetof(FDaiBlockade, _Blockers) == 0x000008, "Member 'FDaiBlockade::_Blockers' has a wrong offset!");

// ScriptStruct Dai.DaiSpecialTags
// 0x0010 (0x0010 - 0x0000)
struct FDaiSpecialTags final
{
public:
	class FName                                   _OwnerTag;                                         // 0x0000(0x0008)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _CallerTag;                                        // 0x0008(0x0008)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDaiSpecialTags) == 0x000004, "Wrong alignment on FDaiSpecialTags");
static_assert(sizeof(FDaiSpecialTags) == 0x000010, "Wrong size on FDaiSpecialTags");
static_assert(offsetof(FDaiSpecialTags, _OwnerTag) == 0x000000, "Member 'FDaiSpecialTags::_OwnerTag' has a wrong offset!");
static_assert(offsetof(FDaiSpecialTags, _CallerTag) == 0x000008, "Member 'FDaiSpecialTags::_CallerTag' has a wrong offset!");

}

