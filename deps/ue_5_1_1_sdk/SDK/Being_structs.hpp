#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Being

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum Being.EBeingActionEventType
// NumValues: 0x0008
enum class EBeingActionEventType : uint8
{
	Unknown                                  = 0,
	FailedToStart                            = 1,
	Started                                  = 2,
	Abort                                    = 3,
	Finished                                 = 4,
	Push                                     = 5,
	Pop                                      = 6,
	EBeingActionEventType_MAX                = 7,
};

// Enum Being.EFoot
// NumValues: 0x0007
enum class EFoot : uint8
{
	LEFT                                     = 0,
	RIGHT                                    = 1,
	LEFT_BACK                                = 2,
	RIGHT_BACK                               = 3,
	ANY                                      = 4,
	COUNT                                    = 5,
	EFoot_MAX                                = 6,
};

// Enum Being.EStateStatus
// NumValues: 0x0006
enum class EStateStatus : uint8
{
	NotStarted                               = 0,
	InProgress                               = 1,
	Success                                  = 2,
	Failed                                   = 3,
	Aborted                                  = 4,
	EStateStatus_MAX                         = 5,
};

// Enum Being.EBeingAttackStage
// NumValues: 0x0006
enum class EBeingAttackStage : uint8
{
	UNKNOWN_STAGE                            = 0,
	PREPARATION_STAGE                        = 1,
	HIT_STAGE                                = 2,
	RECOVERY_STAGE                           = 3,
	COUNT                                    = 4,
	EBeingAttackStage_MAX                    = 5,
};

// Enum Being.EFootMask
// NumValues: 0x0005
enum class EFootMask : uint8
{
	LEFT                                     = 0,
	RIGHT                                    = 1,
	LEFT_BACK                                = 2,
	RIGHT_BACK                               = 3,
	EFootMask_MAX                            = 4,
};

// Enum Being.ESoundMovement
// NumValues: 0x0007
enum class ESoundMovement : uint8
{
	SNEAK                                    = 0,
	WALK                                     = 1,
	RUN                                      = 2,
	FALL                                     = 3,
	IN_PLACE                                 = 4,
	COUNT                                    = 5,
	ESoundMovement_MAX                       = 6,
};

// Enum Being.EVerticalStance
// NumValues: 0x0004
enum class EVerticalStance : uint8
{
	ON_GROUND                                = 0,
	ON_STAIRS                                = 1,
	ON_LADDER                                = 2,
	ON_MAX                                   = 3,
};

// Enum Being.EMoveDirection
// NumValues: 0x0004
enum class EMoveDirection : uint8
{
	ANY                                      = 0,
	ONLY_FORWARD                             = 1,
	ONLY_BACKWARD                            = 2,
	EMoveDirection_MAX                       = 3,
};

// Enum Being.EVPDataEvaluatorType
// NumValues: 0x0004
enum class EVPDataEvaluatorType : uint8
{
	TwoChannels                              = 0,
	ThreeChannels                            = 1,
	FourChannels                             = 2,
	EVPDataEvaluatorType_MAX                 = 3,
};

// Enum Being.EVPDataSourceChannel
// NumValues: 0x0005
enum class EVPDataSourceChannel : uint8
{
	Red                                      = 0,
	Green                                    = 1,
	Blue                                     = 2,
	Alpha                                    = 3,
	EVPDataSourceChannel_MAX                 = 4,
};

// Enum Being.EBeingTribool
// NumValues: 0x0004
enum class EBeingTribool : uint8
{
	Unkonown                                 = 0,
	Set                                      = 1,
	Unset                                    = 2,
	EBeingTribool_MAX                        = 3,
};

// Enum Being.EBeingWalkType
// NumValues: 0x0005
enum class EBeingWalkType : uint8
{
	WALK                                     = 0,
	RUN                                      = 1,
	CROUCH                                   = 2,
	NONE                                     = 3,
	EBeingWalkType_MAX                       = 4,
};

// Enum Being.EBeingWalkingStance
// NumValues: 0x0022
enum class EBeingWalkingStance : uint8
{
	UNDEFINED                                = 0,
	STANCE_1                                 = 1,
	STANCE_2                                 = 2,
	STANCE_3                                 = 3,
	STANCE_4                                 = 4,
	STANCE_5                                 = 5,
	STANCE_6                                 = 6,
	STANCE_7                                 = 7,
	STANCE_8                                 = 8,
	STANCE_9                                 = 9,
	STANCE_10                                = 10,
	STANCE_11                                = 11,
	STANCE_12                                = 12,
	STANCE_13                                = 13,
	STANCE_14                                = 14,
	STANCE_15                                = 15,
	STANCE_16                                = 16,
	STANCE_17                                = 17,
	STANCE_18                                = 18,
	STANCE_19                                = 19,
	STANCE_20                                = 20,
	STANCE_21                                = 21,
	STANCE_22                                = 22,
	STANCE_23                                = 23,
	STANCE_24                                = 24,
	STANCE_25                                = 25,
	STANCE_26                                = 26,
	STANCE_27                                = 27,
	STANCE_28                                = 28,
	STANCE_29                                = 29,
	STANCE_30                                = 30,
	STANCE_31                                = 31,
	UNKNOWN                                  = 255,
	EBeingWalkingStance_MAX                  = 256,
};

// ScriptStruct Being.BeingActions
// 0x0010 (0x0010 - 0x0000)
struct FBeingActions final
{
public:
	TArray<class UBeingAction*>                   _List;                                             // 0x0000(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBeingActions) == 0x000008, "Wrong alignment on FBeingActions");
static_assert(sizeof(FBeingActions) == 0x000010, "Wrong size on FBeingActions");
static_assert(offsetof(FBeingActions, _List) == 0x000000, "Member 'FBeingActions::_List' has a wrong offset!");

// ScriptStruct Being.FootSocketData
// 0x01D0 (0x01D0 - 0x0000)
struct FFootSocketData final
{
public:
	struct FHitResult                             _FootHit;                                          // 0x0000(0x00E8)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FHitResult                             _DropHit;                                          // 0x00E8(0x00E8)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFootSocketData) == 0x000008, "Wrong alignment on FFootSocketData");
static_assert(sizeof(FFootSocketData) == 0x0001D0, "Wrong size on FFootSocketData");
static_assert(offsetof(FFootSocketData, _FootHit) == 0x000000, "Member 'FFootSocketData::_FootHit' has a wrong offset!");
static_assert(offsetof(FFootSocketData, _DropHit) == 0x0000E8, "Member 'FFootSocketData::_DropHit' has a wrong offset!");

// ScriptStruct Being.FootData
// 0x0420 (0x0420 - 0x0000)
struct FFootData final
{
public:
	struct FVector                                _Location;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _Offset;                                           // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               _Rotation;                                         // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFootSocketData                        _FootData;                                         // 0x0048(0x01D0)(NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FFootSocketData                        _FingersData;                                      // 0x0218(0x01D0)(NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         _Step;                                             // 0x03E8(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _FootOnGround;                                     // 0x03EC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3ED[0x3];                                      // 0x03ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                _Local;                                            // 0x03F0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _World;                                            // 0x0408(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFootData) == 0x000008, "Wrong alignment on FFootData");
static_assert(sizeof(FFootData) == 0x000420, "Wrong size on FFootData");
static_assert(offsetof(FFootData, _Location) == 0x000000, "Member 'FFootData::_Location' has a wrong offset!");
static_assert(offsetof(FFootData, _Offset) == 0x000018, "Member 'FFootData::_Offset' has a wrong offset!");
static_assert(offsetof(FFootData, _Rotation) == 0x000030, "Member 'FFootData::_Rotation' has a wrong offset!");
static_assert(offsetof(FFootData, _FootData) == 0x000048, "Member 'FFootData::_FootData' has a wrong offset!");
static_assert(offsetof(FFootData, _FingersData) == 0x000218, "Member 'FFootData::_FingersData' has a wrong offset!");
static_assert(offsetof(FFootData, _Step) == 0x0003E8, "Member 'FFootData::_Step' has a wrong offset!");
static_assert(offsetof(FFootData, _FootOnGround) == 0x0003EC, "Member 'FFootData::_FootOnGround' has a wrong offset!");
static_assert(offsetof(FFootData, _Local) == 0x0003F0, "Member 'FFootData::_Local' has a wrong offset!");
static_assert(offsetof(FFootData, _World) == 0x000408, "Member 'FFootData::_World' has a wrong offset!");

// ScriptStruct Being.FootstepEffect
// 0x0048 (0x0048 - 0x0000)
struct FFootstepEffect final
{
public:
	uint8                                         _FootMask;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMoveDirection                                _MoveDirection;                                    // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemAsset*                         _Particle;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UBeingVertexAnim*>               _VertexAnims;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      _DecalMaterial;                                    // 0x0020(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _DecalLifeTime;                                    // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                _DecalSize;                                        // 0x0030(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFootstepEffect) == 0x000008, "Wrong alignment on FFootstepEffect");
static_assert(sizeof(FFootstepEffect) == 0x000048, "Wrong size on FFootstepEffect");
static_assert(offsetof(FFootstepEffect, _FootMask) == 0x000000, "Member 'FFootstepEffect::_FootMask' has a wrong offset!");
static_assert(offsetof(FFootstepEffect, _MoveDirection) == 0x000001, "Member 'FFootstepEffect::_MoveDirection' has a wrong offset!");
static_assert(offsetof(FFootstepEffect, _Particle) == 0x000008, "Member 'FFootstepEffect::_Particle' has a wrong offset!");
static_assert(offsetof(FFootstepEffect, _VertexAnims) == 0x000010, "Member 'FFootstepEffect::_VertexAnims' has a wrong offset!");
static_assert(offsetof(FFootstepEffect, _DecalMaterial) == 0x000020, "Member 'FFootstepEffect::_DecalMaterial' has a wrong offset!");
static_assert(offsetof(FFootstepEffect, _DecalLifeTime) == 0x000028, "Member 'FFootstepEffect::_DecalLifeTime' has a wrong offset!");
static_assert(offsetof(FFootstepEffect, _DecalSize) == 0x000030, "Member 'FFootstepEffect::_DecalSize' has a wrong offset!");

// ScriptStruct Being.Footstep
// 0x0070 (0x0070 - 0x0000)
struct FFootstep final
{
public:
	class UObject*                                _Sound;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                _BackSound;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _AINoiseModifier;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFootstepEffect>                _Effects;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFootstepEffect>                _LeftEffects;                                      // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFootstepEffect>                _RightEffects;                                     // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFootstepEffect>                _LeftBackEffects;                                  // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFootstepEffect>                _RightBackEffects;                                 // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         _FoliagePlayProbability;                           // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFootstep) == 0x000008, "Wrong alignment on FFootstep");
static_assert(sizeof(FFootstep) == 0x000070, "Wrong size on FFootstep");
static_assert(offsetof(FFootstep, _Sound) == 0x000000, "Member 'FFootstep::_Sound' has a wrong offset!");
static_assert(offsetof(FFootstep, _BackSound) == 0x000008, "Member 'FFootstep::_BackSound' has a wrong offset!");
static_assert(offsetof(FFootstep, _AINoiseModifier) == 0x000010, "Member 'FFootstep::_AINoiseModifier' has a wrong offset!");
static_assert(offsetof(FFootstep, _Effects) == 0x000018, "Member 'FFootstep::_Effects' has a wrong offset!");
static_assert(offsetof(FFootstep, _LeftEffects) == 0x000028, "Member 'FFootstep::_LeftEffects' has a wrong offset!");
static_assert(offsetof(FFootstep, _RightEffects) == 0x000038, "Member 'FFootstep::_RightEffects' has a wrong offset!");
static_assert(offsetof(FFootstep, _LeftBackEffects) == 0x000048, "Member 'FFootstep::_LeftBackEffects' has a wrong offset!");
static_assert(offsetof(FFootstep, _RightBackEffects) == 0x000058, "Member 'FFootstep::_RightBackEffects' has a wrong offset!");
static_assert(offsetof(FFootstep, _FoliagePlayProbability) == 0x000068, "Member 'FFootstep::_FoliagePlayProbability' has a wrong offset!");

// ScriptStruct Being.Wading
// 0x0058 (0x0058 - 0x0000)
struct FWading final
{
public:
	struct FSoftObjectPath                        _SoundAsset;                                       // 0x0000(0x0020)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        _DelayTimes;                                       // 0x0020(0x0020)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _MinDepth;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _MaxDepth;                                         // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         _Particle;                                         // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _FireAndForgetFX;                                  // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _TranslucentSortPriority;                          // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWading) == 0x000008, "Wrong alignment on FWading");
static_assert(sizeof(FWading) == 0x000058, "Wrong size on FWading");
static_assert(offsetof(FWading, _SoundAsset) == 0x000000, "Member 'FWading::_SoundAsset' has a wrong offset!");
static_assert(offsetof(FWading, _DelayTimes) == 0x000020, "Member 'FWading::_DelayTimes' has a wrong offset!");
static_assert(offsetof(FWading, _MinDepth) == 0x000040, "Member 'FWading::_MinDepth' has a wrong offset!");
static_assert(offsetof(FWading, _MaxDepth) == 0x000044, "Member 'FWading::_MaxDepth' has a wrong offset!");
static_assert(offsetof(FWading, _Particle) == 0x000048, "Member 'FWading::_Particle' has a wrong offset!");
static_assert(offsetof(FWading, _FireAndForgetFX) == 0x000050, "Member 'FWading::_FireAndForgetFX' has a wrong offset!");
static_assert(offsetof(FWading, _TranslucentSortPriority) == 0x000054, "Member 'FWading::_TranslucentSortPriority' has a wrong offset!");

// ScriptStruct Being.FootstepLoudness
// 0x0018 (0x0018 - 0x0000)
struct FFootstepLoudness final
{
public:
	float                                         _AINoiseModifier;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            _Curve;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _NormalizedCurve;                                  // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _MaxSpeed;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFootstepLoudness) == 0x000008, "Wrong alignment on FFootstepLoudness");
static_assert(sizeof(FFootstepLoudness) == 0x000018, "Wrong size on FFootstepLoudness");
static_assert(offsetof(FFootstepLoudness, _AINoiseModifier) == 0x000000, "Member 'FFootstepLoudness::_AINoiseModifier' has a wrong offset!");
static_assert(offsetof(FFootstepLoudness, _Curve) == 0x000008, "Member 'FFootstepLoudness::_Curve' has a wrong offset!");
static_assert(offsetof(FFootstepLoudness, _NormalizedCurve) == 0x000010, "Member 'FFootstepLoudness::_NormalizedCurve' has a wrong offset!");
static_assert(offsetof(FFootstepLoudness, _MaxSpeed) == 0x000014, "Member 'FFootstepLoudness::_MaxSpeed' has a wrong offset!");

// ScriptStruct Being.FootstepTerrainTextures
// 0x0038 (0x0040 - 0x0008)
struct FFootstepTerrainTextures final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture2D>              Texture;                                           // 0x0008(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      Material;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFootstepTerrainTextures) == 0x000008, "Wrong alignment on FFootstepTerrainTextures");
static_assert(sizeof(FFootstepTerrainTextures) == 0x000040, "Wrong size on FFootstepTerrainTextures");
static_assert(offsetof(FFootstepTerrainTextures, Texture) == 0x000008, "Member 'FFootstepTerrainTextures::Texture' has a wrong offset!");
static_assert(offsetof(FFootstepTerrainTextures, Material) == 0x000038, "Member 'FFootstepTerrainTextures::Material' has a wrong offset!");

// ScriptStruct Being.TickableFloat
// 0x000C (0x000C - 0x0000)
struct FTickableFloat final
{
public:
	float                                         _Value;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _TargetValue;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _Step;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTickableFloat) == 0x000004, "Wrong alignment on FTickableFloat");
static_assert(sizeof(FTickableFloat) == 0x00000C, "Wrong size on FTickableFloat");
static_assert(offsetof(FTickableFloat, _Value) == 0x000000, "Member 'FTickableFloat::_Value' has a wrong offset!");
static_assert(offsetof(FTickableFloat, _TargetValue) == 0x000004, "Member 'FTickableFloat::_TargetValue' has a wrong offset!");
static_assert(offsetof(FTickableFloat, _Step) == 0x000008, "Member 'FTickableFloat::_Step' has a wrong offset!");

// ScriptStruct Being.AnimationBoneTransform
// 0x0130 (0x0130 - 0x0000)
struct FAnimationBoneTransform final
{
public:
	class UAnimSequence*                          _Anim;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             _Initial;                                          // 0x0010(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             _Final;                                            // 0x0070(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             _Movement;                                         // 0x00D0(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimationBoneTransform) == 0x000010, "Wrong alignment on FAnimationBoneTransform");
static_assert(sizeof(FAnimationBoneTransform) == 0x000130, "Wrong size on FAnimationBoneTransform");
static_assert(offsetof(FAnimationBoneTransform, _Anim) == 0x000000, "Member 'FAnimationBoneTransform::_Anim' has a wrong offset!");
static_assert(offsetof(FAnimationBoneTransform, _Initial) == 0x000010, "Member 'FAnimationBoneTransform::_Initial' has a wrong offset!");
static_assert(offsetof(FAnimationBoneTransform, _Final) == 0x000070, "Member 'FAnimationBoneTransform::_Final' has a wrong offset!");
static_assert(offsetof(FAnimationBoneTransform, _Movement) == 0x0000D0, "Member 'FAnimationBoneTransform::_Movement' has a wrong offset!");

// ScriptStruct Being.TaggedAnimationTransform
// 0x0040 (0x0040 - 0x0000)
struct FTaggedAnimationTransform final
{
public:
	TArray<class UAnimSequence*>                  _Animations;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  _AnimTags;                                         // 0x0010(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FAnimationBoneTransform>        _BoneTransforms;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTaggedAnimationTransform) == 0x000008, "Wrong alignment on FTaggedAnimationTransform");
static_assert(sizeof(FTaggedAnimationTransform) == 0x000040, "Wrong size on FTaggedAnimationTransform");
static_assert(offsetof(FTaggedAnimationTransform, _Animations) == 0x000000, "Member 'FTaggedAnimationTransform::_Animations' has a wrong offset!");
static_assert(offsetof(FTaggedAnimationTransform, _AnimTags) == 0x000010, "Member 'FTaggedAnimationTransform::_AnimTags' has a wrong offset!");
static_assert(offsetof(FTaggedAnimationTransform, _BoneTransforms) == 0x000030, "Member 'FTaggedAnimationTransform::_BoneTransforms' has a wrong offset!");

// ScriptStruct Being.AnimationRootMotion
// 0x0048 (0x0048 - 0x0000)
struct FAnimationRootMotion final
{
public:
	float                                         _Length;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _FramesPerSecond;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _PlayRate;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                _Offset;                                           // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FQuat>                          _Rotation;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        _Translation;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimationRootMotion) == 0x000008, "Wrong alignment on FAnimationRootMotion");
static_assert(sizeof(FAnimationRootMotion) == 0x000048, "Wrong size on FAnimationRootMotion");
static_assert(offsetof(FAnimationRootMotion, _Length) == 0x000000, "Member 'FAnimationRootMotion::_Length' has a wrong offset!");
static_assert(offsetof(FAnimationRootMotion, _FramesPerSecond) == 0x000004, "Member 'FAnimationRootMotion::_FramesPerSecond' has a wrong offset!");
static_assert(offsetof(FAnimationRootMotion, _PlayRate) == 0x000008, "Member 'FAnimationRootMotion::_PlayRate' has a wrong offset!");
static_assert(offsetof(FAnimationRootMotion, _Offset) == 0x000010, "Member 'FAnimationRootMotion::_Offset' has a wrong offset!");
static_assert(offsetof(FAnimationRootMotion, _Rotation) == 0x000028, "Member 'FAnimationRootMotion::_Rotation' has a wrong offset!");
static_assert(offsetof(FAnimationRootMotion, _Translation) == 0x000038, "Member 'FAnimationRootMotion::_Translation' has a wrong offset!");

// ScriptStruct Being.SectionRootMotion
// 0x0058 (0x0058 - 0x0000)
struct FSectionRootMotion final
{
public:
	class FName                                   _Name;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _StartPos;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimationRootMotion                   _AnimData;                                         // 0x0010(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSectionRootMotion) == 0x000008, "Wrong alignment on FSectionRootMotion");
static_assert(sizeof(FSectionRootMotion) == 0x000058, "Wrong size on FSectionRootMotion");
static_assert(offsetof(FSectionRootMotion, _Name) == 0x000000, "Member 'FSectionRootMotion::_Name' has a wrong offset!");
static_assert(offsetof(FSectionRootMotion, _StartPos) == 0x000008, "Member 'FSectionRootMotion::_StartPos' has a wrong offset!");
static_assert(offsetof(FSectionRootMotion, _AnimData) == 0x000010, "Member 'FSectionRootMotion::_AnimData' has a wrong offset!");

// ScriptStruct Being.MontageRootMotion
// 0x0010 (0x0010 - 0x0000)
struct FMontageRootMotion final
{
public:
	TArray<struct FSectionRootMotion>             _Sections;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMontageRootMotion) == 0x000008, "Wrong alignment on FMontageRootMotion");
static_assert(sizeof(FMontageRootMotion) == 0x000010, "Wrong size on FMontageRootMotion");
static_assert(offsetof(FMontageRootMotion, _Sections) == 0x000000, "Member 'FMontageRootMotion::_Sections' has a wrong offset!");

// ScriptStruct Being.AnimationOrRootMotion
// 0x0058 (0x0058 - 0x0000)
struct FAnimationOrRootMotion final
{
public:
	bool                                          _HasData;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationAsset*                        _Anim;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnimationRootMotion                   _RootMotion;                                       // 0x0010(0x0048)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimationOrRootMotion) == 0x000008, "Wrong alignment on FAnimationOrRootMotion");
static_assert(sizeof(FAnimationOrRootMotion) == 0x000058, "Wrong size on FAnimationOrRootMotion");
static_assert(offsetof(FAnimationOrRootMotion, _HasData) == 0x000000, "Member 'FAnimationOrRootMotion::_HasData' has a wrong offset!");
static_assert(offsetof(FAnimationOrRootMotion, _Anim) == 0x000008, "Member 'FAnimationOrRootMotion::_Anim' has a wrong offset!");
static_assert(offsetof(FAnimationOrRootMotion, _RootMotion) == 0x000010, "Member 'FAnimationOrRootMotion::_RootMotion' has a wrong offset!");

// ScriptStruct Being.BlendSpaceRootMotion
// 0x0050 (0x0050 - 0x0000)
struct FBlendSpaceRootMotion final
{
public:
	TMap<float, struct FAnimationOrRootMotion>    _RootMotion;                                       // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlendSpaceRootMotion) == 0x000008, "Wrong alignment on FBlendSpaceRootMotion");
static_assert(sizeof(FBlendSpaceRootMotion) == 0x000050, "Wrong size on FBlendSpaceRootMotion");
static_assert(offsetof(FBlendSpaceRootMotion, _RootMotion) == 0x000000, "Member 'FBlendSpaceRootMotion::_RootMotion' has a wrong offset!");

// ScriptStruct Being.StampPath
// 0x0050 (0x0050 - 0x0000)
struct FStampPath final
{
public:
	struct FColor                                 _Color;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimationRootMotion                   _RootMotion;                                       // 0x0008(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStampPath) == 0x000008, "Wrong alignment on FStampPath");
static_assert(sizeof(FStampPath) == 0x000050, "Wrong size on FStampPath");
static_assert(offsetof(FStampPath, _Color) == 0x000000, "Member 'FStampPath::_Color' has a wrong offset!");
static_assert(offsetof(FStampPath, _RootMotion) == 0x000008, "Member 'FStampPath::_RootMotion' has a wrong offset!");

// ScriptStruct Being.Stamp
// 0x0028 (0x0028 - 0x0000)
struct FStamp final
{
public:
	TArray<struct FStampPath>                     _Paths;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                _TargetLocation;                                   // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStamp) == 0x000008, "Wrong alignment on FStamp");
static_assert(sizeof(FStamp) == 0x000028, "Wrong size on FStamp");
static_assert(offsetof(FStamp, _Paths) == 0x000000, "Member 'FStamp::_Paths' has a wrong offset!");
static_assert(offsetof(FStamp, _TargetLocation) == 0x000010, "Member 'FStamp::_TargetLocation' has a wrong offset!");

// ScriptStruct Being.BeingStates
// 0x0010 (0x0010 - 0x0000)
struct FBeingStates final
{
public:
	TArray<class UBeingState*>                    _List;                                             // 0x0000(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBeingStates) == 0x000008, "Wrong alignment on FBeingStates");
static_assert(sizeof(FBeingStates) == 0x000010, "Wrong size on FBeingStates");
static_assert(offsetof(FBeingStates, _List) == 0x000000, "Member 'FBeingStates::_List' has a wrong offset!");

// ScriptStruct Being.BeingSteeringData
// 0x0080 (0x0080 - 0x0000)
struct FBeingSteeringData final
{
public:
	bool                                          _IsCrouching;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _IsFollowingAPath;                                 // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _IsMoving;                                         // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _IsSliding;                                        // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _StartTurn;                                        // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                _RequestedVelocity;                                // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _DesiredVelocity;                                  // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               _Rotation;                                         // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               _ControlLocalRotation;                             // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               _LocalRotation;                                    // 0x0068(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBeingSteeringData) == 0x000008, "Wrong alignment on FBeingSteeringData");
static_assert(sizeof(FBeingSteeringData) == 0x000080, "Wrong size on FBeingSteeringData");
static_assert(offsetof(FBeingSteeringData, _IsCrouching) == 0x000000, "Member 'FBeingSteeringData::_IsCrouching' has a wrong offset!");
static_assert(offsetof(FBeingSteeringData, _IsFollowingAPath) == 0x000001, "Member 'FBeingSteeringData::_IsFollowingAPath' has a wrong offset!");
static_assert(offsetof(FBeingSteeringData, _IsMoving) == 0x000002, "Member 'FBeingSteeringData::_IsMoving' has a wrong offset!");
static_assert(offsetof(FBeingSteeringData, _IsSliding) == 0x000003, "Member 'FBeingSteeringData::_IsSliding' has a wrong offset!");
static_assert(offsetof(FBeingSteeringData, _StartTurn) == 0x000004, "Member 'FBeingSteeringData::_StartTurn' has a wrong offset!");
static_assert(offsetof(FBeingSteeringData, _RequestedVelocity) == 0x000008, "Member 'FBeingSteeringData::_RequestedVelocity' has a wrong offset!");
static_assert(offsetof(FBeingSteeringData, _DesiredVelocity) == 0x000020, "Member 'FBeingSteeringData::_DesiredVelocity' has a wrong offset!");
static_assert(offsetof(FBeingSteeringData, _Rotation) == 0x000038, "Member 'FBeingSteeringData::_Rotation' has a wrong offset!");
static_assert(offsetof(FBeingSteeringData, _ControlLocalRotation) == 0x000050, "Member 'FBeingSteeringData::_ControlLocalRotation' has a wrong offset!");
static_assert(offsetof(FBeingSteeringData, _LocalRotation) == 0x000068, "Member 'FBeingSteeringData::_LocalRotation' has a wrong offset!");

// ScriptStruct Being.WalkingStanceData
// 0x000C (0x000C - 0x0000)
struct FWalkingStanceData final
{
public:
	class FName                                   _Name;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBeingWalkType                                _Type;                                             // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWalkingStanceData) == 0x000004, "Wrong alignment on FWalkingStanceData");
static_assert(sizeof(FWalkingStanceData) == 0x00000C, "Wrong size on FWalkingStanceData");
static_assert(offsetof(FWalkingStanceData, _Name) == 0x000000, "Member 'FWalkingStanceData::_Name' has a wrong offset!");
static_assert(offsetof(FWalkingStanceData, _Type) == 0x000008, "Member 'FWalkingStanceData::_Type' has a wrong offset!");

}

