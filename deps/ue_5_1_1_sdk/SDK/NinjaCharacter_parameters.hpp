#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NinjaCharacter

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "NinjaCharacter_structs.hpp"


namespace SDK::Params
{

// Function NinjaCharacter.NinjaCharacter.K2_OnCharMovementAxisChanged
// 0x0030 (0x0030 - 0x0000)
struct NinjaCharacter_K2_OnCharMovementAxisChanged final
{
public:
	struct FVector                                OldAxisZ;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CurrentAxisZ;                                      // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacter_K2_OnCharMovementAxisChanged) == 0x000008, "Wrong alignment on NinjaCharacter_K2_OnCharMovementAxisChanged");
static_assert(sizeof(NinjaCharacter_K2_OnCharMovementAxisChanged) == 0x000030, "Wrong size on NinjaCharacter_K2_OnCharMovementAxisChanged");
static_assert(offsetof(NinjaCharacter_K2_OnCharMovementAxisChanged, OldAxisZ) == 0x000000, "Member 'NinjaCharacter_K2_OnCharMovementAxisChanged::OldAxisZ' has a wrong offset!");
static_assert(offsetof(NinjaCharacter_K2_OnCharMovementAxisChanged, CurrentAxisZ) == 0x000018, "Member 'NinjaCharacter_K2_OnCharMovementAxisChanged::CurrentAxisZ' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacter.K2_OnGravityDirectionChanged
// 0x0002 (0x0002 - 0x0000)
struct NinjaCharacter_K2_OnGravityDirectionChanged final
{
public:
	ENinjaGravityDirectionMode                    OldGravityDirectionMode;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENinjaGravityDirectionMode                    CurrentGravityDirectionMode;                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacter_K2_OnGravityDirectionChanged) == 0x000001, "Wrong alignment on NinjaCharacter_K2_OnGravityDirectionChanged");
static_assert(sizeof(NinjaCharacter_K2_OnGravityDirectionChanged) == 0x000002, "Wrong size on NinjaCharacter_K2_OnGravityDirectionChanged");
static_assert(offsetof(NinjaCharacter_K2_OnGravityDirectionChanged, OldGravityDirectionMode) == 0x000000, "Member 'NinjaCharacter_K2_OnGravityDirectionChanged::OldGravityDirectionMode' has a wrong offset!");
static_assert(offsetof(NinjaCharacter_K2_OnGravityDirectionChanged, CurrentGravityDirectionMode) == 0x000001, "Member 'NinjaCharacter_K2_OnGravityDirectionChanged::CurrentGravityDirectionMode' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacter.K2_OnUnwalkableHit
// 0x00E8 (0x00E8 - 0x0000)
struct NinjaCharacter_K2_OnUnwalkableHit final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacter_K2_OnUnwalkableHit) == 0x000008, "Wrong alignment on NinjaCharacter_K2_OnUnwalkableHit");
static_assert(sizeof(NinjaCharacter_K2_OnUnwalkableHit) == 0x0000E8, "Wrong size on NinjaCharacter_K2_OnUnwalkableHit");
static_assert(offsetof(NinjaCharacter_K2_OnUnwalkableHit, Hit) == 0x000000, "Member 'NinjaCharacter_K2_OnUnwalkableHit::Hit' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacter.LaunchCharacterRotated
// 0x0020 (0x0020 - 0x0000)
struct NinjaCharacter_LaunchCharacterRotated final
{
public:
	struct FVector                                LaunchVelocity;                                    // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHorizontalOverride;                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVerticalOverride;                                 // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NinjaCharacter_LaunchCharacterRotated) == 0x000008, "Wrong alignment on NinjaCharacter_LaunchCharacterRotated");
static_assert(sizeof(NinjaCharacter_LaunchCharacterRotated) == 0x000020, "Wrong size on NinjaCharacter_LaunchCharacterRotated");
static_assert(offsetof(NinjaCharacter_LaunchCharacterRotated, LaunchVelocity) == 0x000000, "Member 'NinjaCharacter_LaunchCharacterRotated::LaunchVelocity' has a wrong offset!");
static_assert(offsetof(NinjaCharacter_LaunchCharacterRotated, bHorizontalOverride) == 0x000018, "Member 'NinjaCharacter_LaunchCharacterRotated::bHorizontalOverride' has a wrong offset!");
static_assert(offsetof(NinjaCharacter_LaunchCharacterRotated, bVerticalOverride) == 0x000019, "Member 'NinjaCharacter_LaunchCharacterRotated::bVerticalOverride' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacter.SetCharMovementAxis
// 0x0020 (0x0020 - 0x0000)
struct NinjaCharacter_SetCharMovementAxis final
{
public:
	struct FVector                                NewAxisZ;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceFindFloor;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NinjaCharacter_SetCharMovementAxis) == 0x000008, "Wrong alignment on NinjaCharacter_SetCharMovementAxis");
static_assert(sizeof(NinjaCharacter_SetCharMovementAxis) == 0x000020, "Wrong size on NinjaCharacter_SetCharMovementAxis");
static_assert(offsetof(NinjaCharacter_SetCharMovementAxis, NewAxisZ) == 0x000000, "Member 'NinjaCharacter_SetCharMovementAxis::NewAxisZ' has a wrong offset!");
static_assert(offsetof(NinjaCharacter_SetCharMovementAxis, bForceFindFloor) == 0x000018, "Member 'NinjaCharacter_SetCharMovementAxis::bForceFindFloor' has a wrong offset!");
static_assert(offsetof(NinjaCharacter_SetCharMovementAxis, ReturnValue) == 0x000019, "Member 'NinjaCharacter_SetCharMovementAxis::ReturnValue' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacter.SmoothComponentLocation
// 0x0028 (0x0028 - 0x0000)
struct NinjaCharacter_SmoothComponentLocation final
{
public:
	class USceneComponent*                        SceneComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocationSpeed;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeLocation;                                  // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacter_SmoothComponentLocation) == 0x000008, "Wrong alignment on NinjaCharacter_SmoothComponentLocation");
static_assert(sizeof(NinjaCharacter_SmoothComponentLocation) == 0x000028, "Wrong size on NinjaCharacter_SmoothComponentLocation");
static_assert(offsetof(NinjaCharacter_SmoothComponentLocation, SceneComponent) == 0x000000, "Member 'NinjaCharacter_SmoothComponentLocation::SceneComponent' has a wrong offset!");
static_assert(offsetof(NinjaCharacter_SmoothComponentLocation, DeltaTime) == 0x000008, "Member 'NinjaCharacter_SmoothComponentLocation::DeltaTime' has a wrong offset!");
static_assert(offsetof(NinjaCharacter_SmoothComponentLocation, LocationSpeed) == 0x00000C, "Member 'NinjaCharacter_SmoothComponentLocation::LocationSpeed' has a wrong offset!");
static_assert(offsetof(NinjaCharacter_SmoothComponentLocation, RelativeLocation) == 0x000010, "Member 'NinjaCharacter_SmoothComponentLocation::RelativeLocation' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacter.SmoothComponentLocationAndRotation
// 0x0048 (0x0048 - 0x0000)
struct NinjaCharacter_SmoothComponentLocationAndRotation final
{
public:
	class USceneComponent*                        SceneComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocationSpeed;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationSpeed;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RelativeLocation;                                  // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0030(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacter_SmoothComponentLocationAndRotation) == 0x000008, "Wrong alignment on NinjaCharacter_SmoothComponentLocationAndRotation");
static_assert(sizeof(NinjaCharacter_SmoothComponentLocationAndRotation) == 0x000048, "Wrong size on NinjaCharacter_SmoothComponentLocationAndRotation");
static_assert(offsetof(NinjaCharacter_SmoothComponentLocationAndRotation, SceneComponent) == 0x000000, "Member 'NinjaCharacter_SmoothComponentLocationAndRotation::SceneComponent' has a wrong offset!");
static_assert(offsetof(NinjaCharacter_SmoothComponentLocationAndRotation, DeltaTime) == 0x000008, "Member 'NinjaCharacter_SmoothComponentLocationAndRotation::DeltaTime' has a wrong offset!");
static_assert(offsetof(NinjaCharacter_SmoothComponentLocationAndRotation, LocationSpeed) == 0x00000C, "Member 'NinjaCharacter_SmoothComponentLocationAndRotation::LocationSpeed' has a wrong offset!");
static_assert(offsetof(NinjaCharacter_SmoothComponentLocationAndRotation, RotationSpeed) == 0x000010, "Member 'NinjaCharacter_SmoothComponentLocationAndRotation::RotationSpeed' has a wrong offset!");
static_assert(offsetof(NinjaCharacter_SmoothComponentLocationAndRotation, RelativeLocation) == 0x000018, "Member 'NinjaCharacter_SmoothComponentLocationAndRotation::RelativeLocation' has a wrong offset!");
static_assert(offsetof(NinjaCharacter_SmoothComponentLocationAndRotation, RelativeRotation) == 0x000030, "Member 'NinjaCharacter_SmoothComponentLocationAndRotation::RelativeRotation' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacter.SmoothComponentRotation
// 0x0028 (0x0028 - 0x0000)
struct NinjaCharacter_SmoothComponentRotation final
{
public:
	class USceneComponent*                        SceneComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationSpeed;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacter_SmoothComponentRotation) == 0x000008, "Wrong alignment on NinjaCharacter_SmoothComponentRotation");
static_assert(sizeof(NinjaCharacter_SmoothComponentRotation) == 0x000028, "Wrong size on NinjaCharacter_SmoothComponentRotation");
static_assert(offsetof(NinjaCharacter_SmoothComponentRotation, SceneComponent) == 0x000000, "Member 'NinjaCharacter_SmoothComponentRotation::SceneComponent' has a wrong offset!");
static_assert(offsetof(NinjaCharacter_SmoothComponentRotation, DeltaTime) == 0x000008, "Member 'NinjaCharacter_SmoothComponentRotation::DeltaTime' has a wrong offset!");
static_assert(offsetof(NinjaCharacter_SmoothComponentRotation, RotationSpeed) == 0x00000C, "Member 'NinjaCharacter_SmoothComponentRotation::RotationSpeed' has a wrong offset!");
static_assert(offsetof(NinjaCharacter_SmoothComponentRotation, RelativeRotation) == 0x000010, "Member 'NinjaCharacter_SmoothComponentRotation::RelativeRotation' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacterMovementComponent.K2_SetFixedGravityDirection
// 0x0018 (0x0018 - 0x0000)
struct NinjaCharacterMovementComponent_K2_SetFixedGravityDirection final
{
public:
	struct FVector                                NewGravityDirection;                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacterMovementComponent_K2_SetFixedGravityDirection) == 0x000008, "Wrong alignment on NinjaCharacterMovementComponent_K2_SetFixedGravityDirection");
static_assert(sizeof(NinjaCharacterMovementComponent_K2_SetFixedGravityDirection) == 0x000018, "Wrong size on NinjaCharacterMovementComponent_K2_SetFixedGravityDirection");
static_assert(offsetof(NinjaCharacterMovementComponent_K2_SetFixedGravityDirection, NewGravityDirection) == 0x000000, "Member 'NinjaCharacterMovementComponent_K2_SetFixedGravityDirection::NewGravityDirection' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacterMovementComponent.K2_SetPlaneGravityDirection
// 0x0030 (0x0030 - 0x0000)
struct NinjaCharacterMovementComponent_K2_SetPlaneGravityDirection final
{
public:
	struct FVector                                NewGravityPlaneBase;                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewGravityPlaneNormal;                             // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacterMovementComponent_K2_SetPlaneGravityDirection) == 0x000008, "Wrong alignment on NinjaCharacterMovementComponent_K2_SetPlaneGravityDirection");
static_assert(sizeof(NinjaCharacterMovementComponent_K2_SetPlaneGravityDirection) == 0x000030, "Wrong size on NinjaCharacterMovementComponent_K2_SetPlaneGravityDirection");
static_assert(offsetof(NinjaCharacterMovementComponent_K2_SetPlaneGravityDirection, NewGravityPlaneBase) == 0x000000, "Member 'NinjaCharacterMovementComponent_K2_SetPlaneGravityDirection::NewGravityPlaneBase' has a wrong offset!");
static_assert(offsetof(NinjaCharacterMovementComponent_K2_SetPlaneGravityDirection, NewGravityPlaneNormal) == 0x000018, "Member 'NinjaCharacterMovementComponent_K2_SetPlaneGravityDirection::NewGravityPlaneNormal' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacterMovementComponent.MulticastSetBoxGravityDirection
// 0x0030 (0x0030 - 0x0000)
struct NinjaCharacterMovementComponent_MulticastSetBoxGravityDirection final
{
public:
	struct FVector                                NewGravityBoxOrigin;                               // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewGravityBoxExtent;                               // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacterMovementComponent_MulticastSetBoxGravityDirection) == 0x000008, "Wrong alignment on NinjaCharacterMovementComponent_MulticastSetBoxGravityDirection");
static_assert(sizeof(NinjaCharacterMovementComponent_MulticastSetBoxGravityDirection) == 0x000030, "Wrong size on NinjaCharacterMovementComponent_MulticastSetBoxGravityDirection");
static_assert(offsetof(NinjaCharacterMovementComponent_MulticastSetBoxGravityDirection, NewGravityBoxOrigin) == 0x000000, "Member 'NinjaCharacterMovementComponent_MulticastSetBoxGravityDirection::NewGravityBoxOrigin' has a wrong offset!");
static_assert(offsetof(NinjaCharacterMovementComponent_MulticastSetBoxGravityDirection, NewGravityBoxExtent) == 0x000018, "Member 'NinjaCharacterMovementComponent_MulticastSetBoxGravityDirection::NewGravityBoxExtent' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacterMovementComponent.MulticastSetBoxGravityDirectionFromActor
// 0x0008 (0x0008 - 0x0000)
struct NinjaCharacterMovementComponent_MulticastSetBoxGravityDirectionFromActor final
{
public:
	class AActor*                                 NewGravityActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacterMovementComponent_MulticastSetBoxGravityDirectionFromActor) == 0x000008, "Wrong alignment on NinjaCharacterMovementComponent_MulticastSetBoxGravityDirectionFromActor");
static_assert(sizeof(NinjaCharacterMovementComponent_MulticastSetBoxGravityDirectionFromActor) == 0x000008, "Wrong size on NinjaCharacterMovementComponent_MulticastSetBoxGravityDirectionFromActor");
static_assert(offsetof(NinjaCharacterMovementComponent_MulticastSetBoxGravityDirectionFromActor, NewGravityActor) == 0x000000, "Member 'NinjaCharacterMovementComponent_MulticastSetBoxGravityDirectionFromActor::NewGravityActor' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacterMovementComponent.MulticastSetCollisionGravityDirection
// 0x0008 (0x0008 - 0x0000)
struct NinjaCharacterMovementComponent_MulticastSetCollisionGravityDirection final
{
public:
	class AActor*                                 NewGravityActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacterMovementComponent_MulticastSetCollisionGravityDirection) == 0x000008, "Wrong alignment on NinjaCharacterMovementComponent_MulticastSetCollisionGravityDirection");
static_assert(sizeof(NinjaCharacterMovementComponent_MulticastSetCollisionGravityDirection) == 0x000008, "Wrong size on NinjaCharacterMovementComponent_MulticastSetCollisionGravityDirection");
static_assert(offsetof(NinjaCharacterMovementComponent_MulticastSetCollisionGravityDirection, NewGravityActor) == 0x000000, "Member 'NinjaCharacterMovementComponent_MulticastSetCollisionGravityDirection::NewGravityActor' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacterMovementComponent.MulticastSetFixedGravityDirection
// 0x0018 (0x0018 - 0x0000)
struct NinjaCharacterMovementComponent_MulticastSetFixedGravityDirection final
{
public:
	struct FVector                                NewFixedGravityDirection;                          // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacterMovementComponent_MulticastSetFixedGravityDirection) == 0x000008, "Wrong alignment on NinjaCharacterMovementComponent_MulticastSetFixedGravityDirection");
static_assert(sizeof(NinjaCharacterMovementComponent_MulticastSetFixedGravityDirection) == 0x000018, "Wrong size on NinjaCharacterMovementComponent_MulticastSetFixedGravityDirection");
static_assert(offsetof(NinjaCharacterMovementComponent_MulticastSetFixedGravityDirection, NewFixedGravityDirection) == 0x000000, "Member 'NinjaCharacterMovementComponent_MulticastSetFixedGravityDirection::NewFixedGravityDirection' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacterMovementComponent.MulticastSetGravityScale
// 0x0004 (0x0004 - 0x0000)
struct NinjaCharacterMovementComponent_MulticastSetGravityScale final
{
public:
	float                                         NewGravityScale;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacterMovementComponent_MulticastSetGravityScale) == 0x000004, "Wrong alignment on NinjaCharacterMovementComponent_MulticastSetGravityScale");
static_assert(sizeof(NinjaCharacterMovementComponent_MulticastSetGravityScale) == 0x000004, "Wrong size on NinjaCharacterMovementComponent_MulticastSetGravityScale");
static_assert(offsetof(NinjaCharacterMovementComponent_MulticastSetGravityScale, NewGravityScale) == 0x000000, "Member 'NinjaCharacterMovementComponent_MulticastSetGravityScale::NewGravityScale' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacterMovementComponent.MulticastSetLineGravityDirection
// 0x0030 (0x0030 - 0x0000)
struct NinjaCharacterMovementComponent_MulticastSetLineGravityDirection final
{
public:
	struct FVector                                NewGravityLineStart;                               // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewGravityLineEnd;                                 // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacterMovementComponent_MulticastSetLineGravityDirection) == 0x000008, "Wrong alignment on NinjaCharacterMovementComponent_MulticastSetLineGravityDirection");
static_assert(sizeof(NinjaCharacterMovementComponent_MulticastSetLineGravityDirection) == 0x000030, "Wrong size on NinjaCharacterMovementComponent_MulticastSetLineGravityDirection");
static_assert(offsetof(NinjaCharacterMovementComponent_MulticastSetLineGravityDirection, NewGravityLineStart) == 0x000000, "Member 'NinjaCharacterMovementComponent_MulticastSetLineGravityDirection::NewGravityLineStart' has a wrong offset!");
static_assert(offsetof(NinjaCharacterMovementComponent_MulticastSetLineGravityDirection, NewGravityLineEnd) == 0x000018, "Member 'NinjaCharacterMovementComponent_MulticastSetLineGravityDirection::NewGravityLineEnd' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacterMovementComponent.MulticastSetPlaneGravityDirection
// 0x0030 (0x0030 - 0x0000)
struct NinjaCharacterMovementComponent_MulticastSetPlaneGravityDirection final
{
public:
	struct FVector                                NewGravityPlaneBase;                               // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewGravityPlaneNormal;                             // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacterMovementComponent_MulticastSetPlaneGravityDirection) == 0x000008, "Wrong alignment on NinjaCharacterMovementComponent_MulticastSetPlaneGravityDirection");
static_assert(sizeof(NinjaCharacterMovementComponent_MulticastSetPlaneGravityDirection) == 0x000030, "Wrong size on NinjaCharacterMovementComponent_MulticastSetPlaneGravityDirection");
static_assert(offsetof(NinjaCharacterMovementComponent_MulticastSetPlaneGravityDirection, NewGravityPlaneBase) == 0x000000, "Member 'NinjaCharacterMovementComponent_MulticastSetPlaneGravityDirection::NewGravityPlaneBase' has a wrong offset!");
static_assert(offsetof(NinjaCharacterMovementComponent_MulticastSetPlaneGravityDirection, NewGravityPlaneNormal) == 0x000018, "Member 'NinjaCharacterMovementComponent_MulticastSetPlaneGravityDirection::NewGravityPlaneNormal' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacterMovementComponent.MulticastSetPointGravityDirection
// 0x0018 (0x0018 - 0x0000)
struct NinjaCharacterMovementComponent_MulticastSetPointGravityDirection final
{
public:
	struct FVector                                NewGravityPoint;                                   // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacterMovementComponent_MulticastSetPointGravityDirection) == 0x000008, "Wrong alignment on NinjaCharacterMovementComponent_MulticastSetPointGravityDirection");
static_assert(sizeof(NinjaCharacterMovementComponent_MulticastSetPointGravityDirection) == 0x000018, "Wrong size on NinjaCharacterMovementComponent_MulticastSetPointGravityDirection");
static_assert(offsetof(NinjaCharacterMovementComponent_MulticastSetPointGravityDirection, NewGravityPoint) == 0x000000, "Member 'NinjaCharacterMovementComponent_MulticastSetPointGravityDirection::NewGravityPoint' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacterMovementComponent.MulticastSetPointGravityDirectionFromActor
// 0x0008 (0x0008 - 0x0000)
struct NinjaCharacterMovementComponent_MulticastSetPointGravityDirectionFromActor final
{
public:
	class AActor*                                 NewGravityActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacterMovementComponent_MulticastSetPointGravityDirectionFromActor) == 0x000008, "Wrong alignment on NinjaCharacterMovementComponent_MulticastSetPointGravityDirectionFromActor");
static_assert(sizeof(NinjaCharacterMovementComponent_MulticastSetPointGravityDirectionFromActor) == 0x000008, "Wrong size on NinjaCharacterMovementComponent_MulticastSetPointGravityDirectionFromActor");
static_assert(offsetof(NinjaCharacterMovementComponent_MulticastSetPointGravityDirectionFromActor, NewGravityActor) == 0x000000, "Member 'NinjaCharacterMovementComponent_MulticastSetPointGravityDirectionFromActor::NewGravityActor' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacterMovementComponent.MulticastSetSegmentGravityDirection
// 0x0030 (0x0030 - 0x0000)
struct NinjaCharacterMovementComponent_MulticastSetSegmentGravityDirection final
{
public:
	struct FVector                                NewGravitySegmentStart;                            // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewGravitySegmentEnd;                              // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacterMovementComponent_MulticastSetSegmentGravityDirection) == 0x000008, "Wrong alignment on NinjaCharacterMovementComponent_MulticastSetSegmentGravityDirection");
static_assert(sizeof(NinjaCharacterMovementComponent_MulticastSetSegmentGravityDirection) == 0x000030, "Wrong size on NinjaCharacterMovementComponent_MulticastSetSegmentGravityDirection");
static_assert(offsetof(NinjaCharacterMovementComponent_MulticastSetSegmentGravityDirection, NewGravitySegmentStart) == 0x000000, "Member 'NinjaCharacterMovementComponent_MulticastSetSegmentGravityDirection::NewGravitySegmentStart' has a wrong offset!");
static_assert(offsetof(NinjaCharacterMovementComponent_MulticastSetSegmentGravityDirection, NewGravitySegmentEnd) == 0x000018, "Member 'NinjaCharacterMovementComponent_MulticastSetSegmentGravityDirection::NewGravitySegmentEnd' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacterMovementComponent.MulticastSetSplineGravityDirection
// 0x0008 (0x0008 - 0x0000)
struct NinjaCharacterMovementComponent_MulticastSetSplineGravityDirection final
{
public:
	class AActor*                                 NewGravityActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacterMovementComponent_MulticastSetSplineGravityDirection) == 0x000008, "Wrong alignment on NinjaCharacterMovementComponent_MulticastSetSplineGravityDirection");
static_assert(sizeof(NinjaCharacterMovementComponent_MulticastSetSplineGravityDirection) == 0x000008, "Wrong size on NinjaCharacterMovementComponent_MulticastSetSplineGravityDirection");
static_assert(offsetof(NinjaCharacterMovementComponent_MulticastSetSplineGravityDirection, NewGravityActor) == 0x000000, "Member 'NinjaCharacterMovementComponent_MulticastSetSplineGravityDirection::NewGravityActor' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacterMovementComponent.MulticastSetSplinePlaneGravityDirection
// 0x0008 (0x0008 - 0x0000)
struct NinjaCharacterMovementComponent_MulticastSetSplinePlaneGravityDirection final
{
public:
	class AActor*                                 NewGravityActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacterMovementComponent_MulticastSetSplinePlaneGravityDirection) == 0x000008, "Wrong alignment on NinjaCharacterMovementComponent_MulticastSetSplinePlaneGravityDirection");
static_assert(sizeof(NinjaCharacterMovementComponent_MulticastSetSplinePlaneGravityDirection) == 0x000008, "Wrong size on NinjaCharacterMovementComponent_MulticastSetSplinePlaneGravityDirection");
static_assert(offsetof(NinjaCharacterMovementComponent_MulticastSetSplinePlaneGravityDirection, NewGravityActor) == 0x000000, "Member 'NinjaCharacterMovementComponent_MulticastSetSplinePlaneGravityDirection::NewGravityActor' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacterMovementComponent.MulticastSetSplineTangentGravityDirection
// 0x0008 (0x0008 - 0x0000)
struct NinjaCharacterMovementComponent_MulticastSetSplineTangentGravityDirection final
{
public:
	class AActor*                                 NewGravityActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacterMovementComponent_MulticastSetSplineTangentGravityDirection) == 0x000008, "Wrong alignment on NinjaCharacterMovementComponent_MulticastSetSplineTangentGravityDirection");
static_assert(sizeof(NinjaCharacterMovementComponent_MulticastSetSplineTangentGravityDirection) == 0x000008, "Wrong size on NinjaCharacterMovementComponent_MulticastSetSplineTangentGravityDirection");
static_assert(offsetof(NinjaCharacterMovementComponent_MulticastSetSplineTangentGravityDirection, NewGravityActor) == 0x000000, "Member 'NinjaCharacterMovementComponent_MulticastSetSplineTangentGravityDirection::NewGravityActor' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacterMovementComponent.OnComponentHit
// 0x0118 (0x0118 - 0x0000)
struct NinjaCharacterMovementComponent_OnComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComp;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0030(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacterMovementComponent_OnComponentHit) == 0x000008, "Wrong alignment on NinjaCharacterMovementComponent_OnComponentHit");
static_assert(sizeof(NinjaCharacterMovementComponent_OnComponentHit) == 0x000118, "Wrong size on NinjaCharacterMovementComponent_OnComponentHit");
static_assert(offsetof(NinjaCharacterMovementComponent_OnComponentHit, HitComp) == 0x000000, "Member 'NinjaCharacterMovementComponent_OnComponentHit::HitComp' has a wrong offset!");
static_assert(offsetof(NinjaCharacterMovementComponent_OnComponentHit, OtherActor) == 0x000008, "Member 'NinjaCharacterMovementComponent_OnComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(NinjaCharacterMovementComponent_OnComponentHit, OtherComp) == 0x000010, "Member 'NinjaCharacterMovementComponent_OnComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(NinjaCharacterMovementComponent_OnComponentHit, NormalImpulse) == 0x000018, "Member 'NinjaCharacterMovementComponent_OnComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(NinjaCharacterMovementComponent_OnComponentHit, Hit) == 0x000030, "Member 'NinjaCharacterMovementComponent_OnComponentHit::Hit' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacterMovementComponent.SetAlignComponentToFloor
// 0x0001 (0x0001 - 0x0000)
struct NinjaCharacterMovementComponent_SetAlignComponentToFloor final
{
public:
	bool                                          bNewAlignComponentToFloor;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacterMovementComponent_SetAlignComponentToFloor) == 0x000001, "Wrong alignment on NinjaCharacterMovementComponent_SetAlignComponentToFloor");
static_assert(sizeof(NinjaCharacterMovementComponent_SetAlignComponentToFloor) == 0x000001, "Wrong size on NinjaCharacterMovementComponent_SetAlignComponentToFloor");
static_assert(offsetof(NinjaCharacterMovementComponent_SetAlignComponentToFloor, bNewAlignComponentToFloor) == 0x000000, "Member 'NinjaCharacterMovementComponent_SetAlignComponentToFloor::bNewAlignComponentToFloor' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacterMovementComponent.SetAlignComponentToGravity
// 0x0001 (0x0001 - 0x0000)
struct NinjaCharacterMovementComponent_SetAlignComponentToGravity final
{
public:
	bool                                          bNewAlignComponentToGravity;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacterMovementComponent_SetAlignComponentToGravity) == 0x000001, "Wrong alignment on NinjaCharacterMovementComponent_SetAlignComponentToGravity");
static_assert(sizeof(NinjaCharacterMovementComponent_SetAlignComponentToGravity) == 0x000001, "Wrong size on NinjaCharacterMovementComponent_SetAlignComponentToGravity");
static_assert(offsetof(NinjaCharacterMovementComponent_SetAlignComponentToGravity, bNewAlignComponentToGravity) == 0x000000, "Member 'NinjaCharacterMovementComponent_SetAlignComponentToGravity::bNewAlignComponentToGravity' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacterMovementComponent.SetAlignGravityToBase
// 0x0001 (0x0001 - 0x0000)
struct NinjaCharacterMovementComponent_SetAlignGravityToBase final
{
public:
	bool                                          bNewAlignGravityToBase;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacterMovementComponent_SetAlignGravityToBase) == 0x000001, "Wrong alignment on NinjaCharacterMovementComponent_SetAlignGravityToBase");
static_assert(sizeof(NinjaCharacterMovementComponent_SetAlignGravityToBase) == 0x000001, "Wrong size on NinjaCharacterMovementComponent_SetAlignGravityToBase");
static_assert(offsetof(NinjaCharacterMovementComponent_SetAlignGravityToBase, bNewAlignGravityToBase) == 0x000000, "Member 'NinjaCharacterMovementComponent_SetAlignGravityToBase::bNewAlignGravityToBase' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacterMovementComponent.SetBoxGravityDirection
// 0x0030 (0x0030 - 0x0000)
struct NinjaCharacterMovementComponent_SetBoxGravityDirection final
{
public:
	struct FVector                                NewGravityBoxOrigin;                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewGravityBoxExtent;                               // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacterMovementComponent_SetBoxGravityDirection) == 0x000008, "Wrong alignment on NinjaCharacterMovementComponent_SetBoxGravityDirection");
static_assert(sizeof(NinjaCharacterMovementComponent_SetBoxGravityDirection) == 0x000030, "Wrong size on NinjaCharacterMovementComponent_SetBoxGravityDirection");
static_assert(offsetof(NinjaCharacterMovementComponent_SetBoxGravityDirection, NewGravityBoxOrigin) == 0x000000, "Member 'NinjaCharacterMovementComponent_SetBoxGravityDirection::NewGravityBoxOrigin' has a wrong offset!");
static_assert(offsetof(NinjaCharacterMovementComponent_SetBoxGravityDirection, NewGravityBoxExtent) == 0x000018, "Member 'NinjaCharacterMovementComponent_SetBoxGravityDirection::NewGravityBoxExtent' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacterMovementComponent.SetBoxGravityDirectionFromActor
// 0x0008 (0x0008 - 0x0000)
struct NinjaCharacterMovementComponent_SetBoxGravityDirectionFromActor final
{
public:
	class AActor*                                 NewGravityActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacterMovementComponent_SetBoxGravityDirectionFromActor) == 0x000008, "Wrong alignment on NinjaCharacterMovementComponent_SetBoxGravityDirectionFromActor");
static_assert(sizeof(NinjaCharacterMovementComponent_SetBoxGravityDirectionFromActor) == 0x000008, "Wrong size on NinjaCharacterMovementComponent_SetBoxGravityDirectionFromActor");
static_assert(offsetof(NinjaCharacterMovementComponent_SetBoxGravityDirectionFromActor, NewGravityActor) == 0x000000, "Member 'NinjaCharacterMovementComponent_SetBoxGravityDirectionFromActor::NewGravityActor' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacterMovementComponent.SetCollisionGravityDirection
// 0x0008 (0x0008 - 0x0000)
struct NinjaCharacterMovementComponent_SetCollisionGravityDirection final
{
public:
	class AActor*                                 NewGravityActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacterMovementComponent_SetCollisionGravityDirection) == 0x000008, "Wrong alignment on NinjaCharacterMovementComponent_SetCollisionGravityDirection");
static_assert(sizeof(NinjaCharacterMovementComponent_SetCollisionGravityDirection) == 0x000008, "Wrong size on NinjaCharacterMovementComponent_SetCollisionGravityDirection");
static_assert(offsetof(NinjaCharacterMovementComponent_SetCollisionGravityDirection, NewGravityActor) == 0x000000, "Member 'NinjaCharacterMovementComponent_SetCollisionGravityDirection::NewGravityActor' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacterMovementComponent.SetLineGravityDirection
// 0x0030 (0x0030 - 0x0000)
struct NinjaCharacterMovementComponent_SetLineGravityDirection final
{
public:
	struct FVector                                NewGravityLineStart;                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewGravityLineEnd;                                 // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacterMovementComponent_SetLineGravityDirection) == 0x000008, "Wrong alignment on NinjaCharacterMovementComponent_SetLineGravityDirection");
static_assert(sizeof(NinjaCharacterMovementComponent_SetLineGravityDirection) == 0x000030, "Wrong size on NinjaCharacterMovementComponent_SetLineGravityDirection");
static_assert(offsetof(NinjaCharacterMovementComponent_SetLineGravityDirection, NewGravityLineStart) == 0x000000, "Member 'NinjaCharacterMovementComponent_SetLineGravityDirection::NewGravityLineStart' has a wrong offset!");
static_assert(offsetof(NinjaCharacterMovementComponent_SetLineGravityDirection, NewGravityLineEnd) == 0x000018, "Member 'NinjaCharacterMovementComponent_SetLineGravityDirection::NewGravityLineEnd' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacterMovementComponent.SetPointGravityDirection
// 0x0018 (0x0018 - 0x0000)
struct NinjaCharacterMovementComponent_SetPointGravityDirection final
{
public:
	struct FVector                                NewGravityPoint;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacterMovementComponent_SetPointGravityDirection) == 0x000008, "Wrong alignment on NinjaCharacterMovementComponent_SetPointGravityDirection");
static_assert(sizeof(NinjaCharacterMovementComponent_SetPointGravityDirection) == 0x000018, "Wrong size on NinjaCharacterMovementComponent_SetPointGravityDirection");
static_assert(offsetof(NinjaCharacterMovementComponent_SetPointGravityDirection, NewGravityPoint) == 0x000000, "Member 'NinjaCharacterMovementComponent_SetPointGravityDirection::NewGravityPoint' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacterMovementComponent.SetPointGravityDirectionFromActor
// 0x0008 (0x0008 - 0x0000)
struct NinjaCharacterMovementComponent_SetPointGravityDirectionFromActor final
{
public:
	class AActor*                                 NewGravityActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacterMovementComponent_SetPointGravityDirectionFromActor) == 0x000008, "Wrong alignment on NinjaCharacterMovementComponent_SetPointGravityDirectionFromActor");
static_assert(sizeof(NinjaCharacterMovementComponent_SetPointGravityDirectionFromActor) == 0x000008, "Wrong size on NinjaCharacterMovementComponent_SetPointGravityDirectionFromActor");
static_assert(offsetof(NinjaCharacterMovementComponent_SetPointGravityDirectionFromActor, NewGravityActor) == 0x000000, "Member 'NinjaCharacterMovementComponent_SetPointGravityDirectionFromActor::NewGravityActor' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacterMovementComponent.SetSegmentGravityDirection
// 0x0030 (0x0030 - 0x0000)
struct NinjaCharacterMovementComponent_SetSegmentGravityDirection final
{
public:
	struct FVector                                NewGravitySegmentStart;                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewGravitySegmentEnd;                              // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacterMovementComponent_SetSegmentGravityDirection) == 0x000008, "Wrong alignment on NinjaCharacterMovementComponent_SetSegmentGravityDirection");
static_assert(sizeof(NinjaCharacterMovementComponent_SetSegmentGravityDirection) == 0x000030, "Wrong size on NinjaCharacterMovementComponent_SetSegmentGravityDirection");
static_assert(offsetof(NinjaCharacterMovementComponent_SetSegmentGravityDirection, NewGravitySegmentStart) == 0x000000, "Member 'NinjaCharacterMovementComponent_SetSegmentGravityDirection::NewGravitySegmentStart' has a wrong offset!");
static_assert(offsetof(NinjaCharacterMovementComponent_SetSegmentGravityDirection, NewGravitySegmentEnd) == 0x000018, "Member 'NinjaCharacterMovementComponent_SetSegmentGravityDirection::NewGravitySegmentEnd' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacterMovementComponent.SetSplineGravityDirection
// 0x0008 (0x0008 - 0x0000)
struct NinjaCharacterMovementComponent_SetSplineGravityDirection final
{
public:
	class AActor*                                 NewGravityActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacterMovementComponent_SetSplineGravityDirection) == 0x000008, "Wrong alignment on NinjaCharacterMovementComponent_SetSplineGravityDirection");
static_assert(sizeof(NinjaCharacterMovementComponent_SetSplineGravityDirection) == 0x000008, "Wrong size on NinjaCharacterMovementComponent_SetSplineGravityDirection");
static_assert(offsetof(NinjaCharacterMovementComponent_SetSplineGravityDirection, NewGravityActor) == 0x000000, "Member 'NinjaCharacterMovementComponent_SetSplineGravityDirection::NewGravityActor' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacterMovementComponent.SetSplinePlaneGravityDirection
// 0x0008 (0x0008 - 0x0000)
struct NinjaCharacterMovementComponent_SetSplinePlaneGravityDirection final
{
public:
	class AActor*                                 NewGravityActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacterMovementComponent_SetSplinePlaneGravityDirection) == 0x000008, "Wrong alignment on NinjaCharacterMovementComponent_SetSplinePlaneGravityDirection");
static_assert(sizeof(NinjaCharacterMovementComponent_SetSplinePlaneGravityDirection) == 0x000008, "Wrong size on NinjaCharacterMovementComponent_SetSplinePlaneGravityDirection");
static_assert(offsetof(NinjaCharacterMovementComponent_SetSplinePlaneGravityDirection, NewGravityActor) == 0x000000, "Member 'NinjaCharacterMovementComponent_SetSplinePlaneGravityDirection::NewGravityActor' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacterMovementComponent.SetSplineTangentGravityDirection
// 0x0008 (0x0008 - 0x0000)
struct NinjaCharacterMovementComponent_SetSplineTangentGravityDirection final
{
public:
	class AActor*                                 NewGravityActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacterMovementComponent_SetSplineTangentGravityDirection) == 0x000008, "Wrong alignment on NinjaCharacterMovementComponent_SetSplineTangentGravityDirection");
static_assert(sizeof(NinjaCharacterMovementComponent_SetSplineTangentGravityDirection) == 0x000008, "Wrong size on NinjaCharacterMovementComponent_SetSplineTangentGravityDirection");
static_assert(offsetof(NinjaCharacterMovementComponent_SetSplineTangentGravityDirection, NewGravityActor) == 0x000000, "Member 'NinjaCharacterMovementComponent_SetSplineTangentGravityDirection::NewGravityActor' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacterMovementComponent.GetGravityDirection
// 0x0020 (0x0020 - 0x0000)
struct NinjaCharacterMovementComponent_GetGravityDirection final
{
public:
	bool                                          bAvoidZeroGravity;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacterMovementComponent_GetGravityDirection) == 0x000008, "Wrong alignment on NinjaCharacterMovementComponent_GetGravityDirection");
static_assert(sizeof(NinjaCharacterMovementComponent_GetGravityDirection) == 0x000020, "Wrong size on NinjaCharacterMovementComponent_GetGravityDirection");
static_assert(offsetof(NinjaCharacterMovementComponent_GetGravityDirection, bAvoidZeroGravity) == 0x000000, "Member 'NinjaCharacterMovementComponent_GetGravityDirection::bAvoidZeroGravity' has a wrong offset!");
static_assert(offsetof(NinjaCharacterMovementComponent_GetGravityDirection, ReturnValue) == 0x000008, "Member 'NinjaCharacterMovementComponent_GetGravityDirection::ReturnValue' has a wrong offset!");

// Function NinjaCharacter.NinjaCharacterMovementComponent.GetGravityMagnitude
// 0x0004 (0x0004 - 0x0000)
struct NinjaCharacterMovementComponent_GetGravityMagnitude final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaCharacterMovementComponent_GetGravityMagnitude) == 0x000004, "Wrong alignment on NinjaCharacterMovementComponent_GetGravityMagnitude");
static_assert(sizeof(NinjaCharacterMovementComponent_GetGravityMagnitude) == 0x000004, "Wrong size on NinjaCharacterMovementComponent_GetGravityMagnitude");
static_assert(offsetof(NinjaCharacterMovementComponent_GetGravityMagnitude, ReturnValue) == 0x000000, "Member 'NinjaCharacterMovementComponent_GetGravityMagnitude::ReturnValue' has a wrong offset!");

// Function NinjaCharacter.NinjaPhysicsVolume.K2_SetFixedGravityDirection
// 0x0018 (0x0018 - 0x0000)
struct NinjaPhysicsVolume_K2_SetFixedGravityDirection final
{
public:
	struct FVector                                NewGravityDirection;                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaPhysicsVolume_K2_SetFixedGravityDirection) == 0x000008, "Wrong alignment on NinjaPhysicsVolume_K2_SetFixedGravityDirection");
static_assert(sizeof(NinjaPhysicsVolume_K2_SetFixedGravityDirection) == 0x000018, "Wrong size on NinjaPhysicsVolume_K2_SetFixedGravityDirection");
static_assert(offsetof(NinjaPhysicsVolume_K2_SetFixedGravityDirection, NewGravityDirection) == 0x000000, "Member 'NinjaPhysicsVolume_K2_SetFixedGravityDirection::NewGravityDirection' has a wrong offset!");

// Function NinjaCharacter.NinjaPhysicsVolume.K2_SetPlaneGravityDirection
// 0x0030 (0x0030 - 0x0000)
struct NinjaPhysicsVolume_K2_SetPlaneGravityDirection final
{
public:
	struct FVector                                NewGravityPlaneBase;                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewGravityPlaneNormal;                             // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaPhysicsVolume_K2_SetPlaneGravityDirection) == 0x000008, "Wrong alignment on NinjaPhysicsVolume_K2_SetPlaneGravityDirection");
static_assert(sizeof(NinjaPhysicsVolume_K2_SetPlaneGravityDirection) == 0x000030, "Wrong size on NinjaPhysicsVolume_K2_SetPlaneGravityDirection");
static_assert(offsetof(NinjaPhysicsVolume_K2_SetPlaneGravityDirection, NewGravityPlaneBase) == 0x000000, "Member 'NinjaPhysicsVolume_K2_SetPlaneGravityDirection::NewGravityPlaneBase' has a wrong offset!");
static_assert(offsetof(NinjaPhysicsVolume_K2_SetPlaneGravityDirection, NewGravityPlaneNormal) == 0x000018, "Member 'NinjaPhysicsVolume_K2_SetPlaneGravityDirection::NewGravityPlaneNormal' has a wrong offset!");

// Function NinjaCharacter.NinjaPhysicsVolume.SetBoxGravityDirection
// 0x0030 (0x0030 - 0x0000)
struct NinjaPhysicsVolume_SetBoxGravityDirection final
{
public:
	struct FVector                                NewGravityBoxOrigin;                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewGravityBoxExtent;                               // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaPhysicsVolume_SetBoxGravityDirection) == 0x000008, "Wrong alignment on NinjaPhysicsVolume_SetBoxGravityDirection");
static_assert(sizeof(NinjaPhysicsVolume_SetBoxGravityDirection) == 0x000030, "Wrong size on NinjaPhysicsVolume_SetBoxGravityDirection");
static_assert(offsetof(NinjaPhysicsVolume_SetBoxGravityDirection, NewGravityBoxOrigin) == 0x000000, "Member 'NinjaPhysicsVolume_SetBoxGravityDirection::NewGravityBoxOrigin' has a wrong offset!");
static_assert(offsetof(NinjaPhysicsVolume_SetBoxGravityDirection, NewGravityBoxExtent) == 0x000018, "Member 'NinjaPhysicsVolume_SetBoxGravityDirection::NewGravityBoxExtent' has a wrong offset!");

// Function NinjaCharacter.NinjaPhysicsVolume.SetBoxGravityDirectionFromActor
// 0x0008 (0x0008 - 0x0000)
struct NinjaPhysicsVolume_SetBoxGravityDirectionFromActor final
{
public:
	class AActor*                                 NewGravityActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaPhysicsVolume_SetBoxGravityDirectionFromActor) == 0x000008, "Wrong alignment on NinjaPhysicsVolume_SetBoxGravityDirectionFromActor");
static_assert(sizeof(NinjaPhysicsVolume_SetBoxGravityDirectionFromActor) == 0x000008, "Wrong size on NinjaPhysicsVolume_SetBoxGravityDirectionFromActor");
static_assert(offsetof(NinjaPhysicsVolume_SetBoxGravityDirectionFromActor, NewGravityActor) == 0x000000, "Member 'NinjaPhysicsVolume_SetBoxGravityDirectionFromActor::NewGravityActor' has a wrong offset!");

// Function NinjaCharacter.NinjaPhysicsVolume.SetCollisionGravityDirection
// 0x0008 (0x0008 - 0x0000)
struct NinjaPhysicsVolume_SetCollisionGravityDirection final
{
public:
	class AActor*                                 NewGravityActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaPhysicsVolume_SetCollisionGravityDirection) == 0x000008, "Wrong alignment on NinjaPhysicsVolume_SetCollisionGravityDirection");
static_assert(sizeof(NinjaPhysicsVolume_SetCollisionGravityDirection) == 0x000008, "Wrong size on NinjaPhysicsVolume_SetCollisionGravityDirection");
static_assert(offsetof(NinjaPhysicsVolume_SetCollisionGravityDirection, NewGravityActor) == 0x000000, "Member 'NinjaPhysicsVolume_SetCollisionGravityDirection::NewGravityActor' has a wrong offset!");

// Function NinjaCharacter.NinjaPhysicsVolume.SetGravityScale
// 0x0004 (0x0004 - 0x0000)
struct NinjaPhysicsVolume_SetGravityScale final
{
public:
	float                                         NewGravityScale;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaPhysicsVolume_SetGravityScale) == 0x000004, "Wrong alignment on NinjaPhysicsVolume_SetGravityScale");
static_assert(sizeof(NinjaPhysicsVolume_SetGravityScale) == 0x000004, "Wrong size on NinjaPhysicsVolume_SetGravityScale");
static_assert(offsetof(NinjaPhysicsVolume_SetGravityScale, NewGravityScale) == 0x000000, "Member 'NinjaPhysicsVolume_SetGravityScale::NewGravityScale' has a wrong offset!");

// Function NinjaCharacter.NinjaPhysicsVolume.SetLineGravityDirection
// 0x0030 (0x0030 - 0x0000)
struct NinjaPhysicsVolume_SetLineGravityDirection final
{
public:
	struct FVector                                NewGravityLineStart;                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewGravityLineEnd;                                 // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaPhysicsVolume_SetLineGravityDirection) == 0x000008, "Wrong alignment on NinjaPhysicsVolume_SetLineGravityDirection");
static_assert(sizeof(NinjaPhysicsVolume_SetLineGravityDirection) == 0x000030, "Wrong size on NinjaPhysicsVolume_SetLineGravityDirection");
static_assert(offsetof(NinjaPhysicsVolume_SetLineGravityDirection, NewGravityLineStart) == 0x000000, "Member 'NinjaPhysicsVolume_SetLineGravityDirection::NewGravityLineStart' has a wrong offset!");
static_assert(offsetof(NinjaPhysicsVolume_SetLineGravityDirection, NewGravityLineEnd) == 0x000018, "Member 'NinjaPhysicsVolume_SetLineGravityDirection::NewGravityLineEnd' has a wrong offset!");

// Function NinjaCharacter.NinjaPhysicsVolume.SetPointGravityDirection
// 0x0018 (0x0018 - 0x0000)
struct NinjaPhysicsVolume_SetPointGravityDirection final
{
public:
	struct FVector                                NewGravityPoint;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaPhysicsVolume_SetPointGravityDirection) == 0x000008, "Wrong alignment on NinjaPhysicsVolume_SetPointGravityDirection");
static_assert(sizeof(NinjaPhysicsVolume_SetPointGravityDirection) == 0x000018, "Wrong size on NinjaPhysicsVolume_SetPointGravityDirection");
static_assert(offsetof(NinjaPhysicsVolume_SetPointGravityDirection, NewGravityPoint) == 0x000000, "Member 'NinjaPhysicsVolume_SetPointGravityDirection::NewGravityPoint' has a wrong offset!");

// Function NinjaCharacter.NinjaPhysicsVolume.SetPointGravityDirectionFromActor
// 0x0008 (0x0008 - 0x0000)
struct NinjaPhysicsVolume_SetPointGravityDirectionFromActor final
{
public:
	class AActor*                                 NewGravityActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaPhysicsVolume_SetPointGravityDirectionFromActor) == 0x000008, "Wrong alignment on NinjaPhysicsVolume_SetPointGravityDirectionFromActor");
static_assert(sizeof(NinjaPhysicsVolume_SetPointGravityDirectionFromActor) == 0x000008, "Wrong size on NinjaPhysicsVolume_SetPointGravityDirectionFromActor");
static_assert(offsetof(NinjaPhysicsVolume_SetPointGravityDirectionFromActor, NewGravityActor) == 0x000000, "Member 'NinjaPhysicsVolume_SetPointGravityDirectionFromActor::NewGravityActor' has a wrong offset!");

// Function NinjaCharacter.NinjaPhysicsVolume.SetSegmentGravityDirection
// 0x0030 (0x0030 - 0x0000)
struct NinjaPhysicsVolume_SetSegmentGravityDirection final
{
public:
	struct FVector                                NewGravitySegmentStart;                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewGravitySegmentEnd;                              // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaPhysicsVolume_SetSegmentGravityDirection) == 0x000008, "Wrong alignment on NinjaPhysicsVolume_SetSegmentGravityDirection");
static_assert(sizeof(NinjaPhysicsVolume_SetSegmentGravityDirection) == 0x000030, "Wrong size on NinjaPhysicsVolume_SetSegmentGravityDirection");
static_assert(offsetof(NinjaPhysicsVolume_SetSegmentGravityDirection, NewGravitySegmentStart) == 0x000000, "Member 'NinjaPhysicsVolume_SetSegmentGravityDirection::NewGravitySegmentStart' has a wrong offset!");
static_assert(offsetof(NinjaPhysicsVolume_SetSegmentGravityDirection, NewGravitySegmentEnd) == 0x000018, "Member 'NinjaPhysicsVolume_SetSegmentGravityDirection::NewGravitySegmentEnd' has a wrong offset!");

// Function NinjaCharacter.NinjaPhysicsVolume.SetSplineGravityDirection
// 0x0008 (0x0008 - 0x0000)
struct NinjaPhysicsVolume_SetSplineGravityDirection final
{
public:
	class AActor*                                 NewGravityActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaPhysicsVolume_SetSplineGravityDirection) == 0x000008, "Wrong alignment on NinjaPhysicsVolume_SetSplineGravityDirection");
static_assert(sizeof(NinjaPhysicsVolume_SetSplineGravityDirection) == 0x000008, "Wrong size on NinjaPhysicsVolume_SetSplineGravityDirection");
static_assert(offsetof(NinjaPhysicsVolume_SetSplineGravityDirection, NewGravityActor) == 0x000000, "Member 'NinjaPhysicsVolume_SetSplineGravityDirection::NewGravityActor' has a wrong offset!");

// Function NinjaCharacter.NinjaPhysicsVolume.SetSplinePlaneGravityDirection
// 0x0008 (0x0008 - 0x0000)
struct NinjaPhysicsVolume_SetSplinePlaneGravityDirection final
{
public:
	class AActor*                                 NewGravityActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaPhysicsVolume_SetSplinePlaneGravityDirection) == 0x000008, "Wrong alignment on NinjaPhysicsVolume_SetSplinePlaneGravityDirection");
static_assert(sizeof(NinjaPhysicsVolume_SetSplinePlaneGravityDirection) == 0x000008, "Wrong size on NinjaPhysicsVolume_SetSplinePlaneGravityDirection");
static_assert(offsetof(NinjaPhysicsVolume_SetSplinePlaneGravityDirection, NewGravityActor) == 0x000000, "Member 'NinjaPhysicsVolume_SetSplinePlaneGravityDirection::NewGravityActor' has a wrong offset!");

// Function NinjaCharacter.NinjaPhysicsVolume.SetSplineTangentGravityDirection
// 0x0008 (0x0008 - 0x0000)
struct NinjaPhysicsVolume_SetSplineTangentGravityDirection final
{
public:
	class AActor*                                 NewGravityActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaPhysicsVolume_SetSplineTangentGravityDirection) == 0x000008, "Wrong alignment on NinjaPhysicsVolume_SetSplineTangentGravityDirection");
static_assert(sizeof(NinjaPhysicsVolume_SetSplineTangentGravityDirection) == 0x000008, "Wrong size on NinjaPhysicsVolume_SetSplineTangentGravityDirection");
static_assert(offsetof(NinjaPhysicsVolume_SetSplineTangentGravityDirection, NewGravityActor) == 0x000000, "Member 'NinjaPhysicsVolume_SetSplineTangentGravityDirection::NewGravityActor' has a wrong offset!");

// Function NinjaCharacter.NinjaPhysicsVolume.GetGravity
// 0x0030 (0x0030 - 0x0000)
struct NinjaPhysicsVolume_GetGravity final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaPhysicsVolume_GetGravity) == 0x000008, "Wrong alignment on NinjaPhysicsVolume_GetGravity");
static_assert(sizeof(NinjaPhysicsVolume_GetGravity) == 0x000030, "Wrong size on NinjaPhysicsVolume_GetGravity");
static_assert(offsetof(NinjaPhysicsVolume_GetGravity, Point) == 0x000000, "Member 'NinjaPhysicsVolume_GetGravity::Point' has a wrong offset!");
static_assert(offsetof(NinjaPhysicsVolume_GetGravity, ReturnValue) == 0x000018, "Member 'NinjaPhysicsVolume_GetGravity::ReturnValue' has a wrong offset!");

// Function NinjaCharacter.NinjaPhysicsVolume.GetGravityDirection
// 0x0030 (0x0030 - 0x0000)
struct NinjaPhysicsVolume_GetGravityDirection final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaPhysicsVolume_GetGravityDirection) == 0x000008, "Wrong alignment on NinjaPhysicsVolume_GetGravityDirection");
static_assert(sizeof(NinjaPhysicsVolume_GetGravityDirection) == 0x000030, "Wrong size on NinjaPhysicsVolume_GetGravityDirection");
static_assert(offsetof(NinjaPhysicsVolume_GetGravityDirection, Point) == 0x000000, "Member 'NinjaPhysicsVolume_GetGravityDirection::Point' has a wrong offset!");
static_assert(offsetof(NinjaPhysicsVolume_GetGravityDirection, ReturnValue) == 0x000018, "Member 'NinjaPhysicsVolume_GetGravityDirection::ReturnValue' has a wrong offset!");

// Function NinjaCharacter.NinjaPhysicsVolume.GetGravityMagnitude
// 0x0020 (0x0020 - 0x0000)
struct NinjaPhysicsVolume_GetGravityMagnitude final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NinjaPhysicsVolume_GetGravityMagnitude) == 0x000008, "Wrong alignment on NinjaPhysicsVolume_GetGravityMagnitude");
static_assert(sizeof(NinjaPhysicsVolume_GetGravityMagnitude) == 0x000020, "Wrong size on NinjaPhysicsVolume_GetGravityMagnitude");
static_assert(offsetof(NinjaPhysicsVolume_GetGravityMagnitude, Point) == 0x000000, "Member 'NinjaPhysicsVolume_GetGravityMagnitude::Point' has a wrong offset!");
static_assert(offsetof(NinjaPhysicsVolume_GetGravityMagnitude, ReturnValue) == 0x000018, "Member 'NinjaPhysicsVolume_GetGravityMagnitude::ReturnValue' has a wrong offset!");

// Function NinjaCharacter.NinjaPhysicsVolume.GetGravityScale
// 0x0004 (0x0004 - 0x0000)
struct NinjaPhysicsVolume_GetGravityScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NinjaPhysicsVolume_GetGravityScale) == 0x000004, "Wrong alignment on NinjaPhysicsVolume_GetGravityScale");
static_assert(sizeof(NinjaPhysicsVolume_GetGravityScale) == 0x000004, "Wrong size on NinjaPhysicsVolume_GetGravityScale");
static_assert(offsetof(NinjaPhysicsVolume_GetGravityScale, ReturnValue) == 0x000000, "Member 'NinjaPhysicsVolume_GetGravityScale::ReturnValue' has a wrong offset!");

}

