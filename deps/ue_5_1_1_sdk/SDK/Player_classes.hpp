#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Player

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "Player_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class Player.BInputSource
// 0x0038 (0x0060 - 0x0028)
class UBInputSource : public UObject
{
public:
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputEventState*                       InputEventState;                                   // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FBInputSourceReceiver>          Receivers;                                         // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BInputSource">();
	}
	static class UBInputSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBInputSource>();
	}
};
static_assert(alignof(UBInputSource) == 0x000008, "Wrong alignment on UBInputSource");
static_assert(sizeof(UBInputSource) == 0x000060, "Wrong size on UBInputSource");
static_assert(offsetof(UBInputSource, InputEventState) == 0x000048, "Member 'UBInputSource::InputEventState' has a wrong offset!");
static_assert(offsetof(UBInputSource, Receivers) == 0x000050, "Member 'UBInputSource::Receivers' has a wrong offset!");

// Class Player.BasicCharacter
// 0x0010 (0x0650 - 0x0640)
class ABasicCharacter final : public ACharacter
{
public:
	class USpringArmComponent*                    CameraRoot;                                        // 0x0638(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCameraComponent*                       Camera;                                            // 0x0640(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_648[0x8];                                      // 0x0648(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UBasicInputComponent* GetBasicInput();
	class UBasicCharacterMovementComponent* GetBasicMovement();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BasicCharacter">();
	}
	static class ABasicCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABasicCharacter>();
	}
};
static_assert(alignof(ABasicCharacter) == 0x000010, "Wrong alignment on ABasicCharacter");
static_assert(sizeof(ABasicCharacter) == 0x000650, "Wrong size on ABasicCharacter");
static_assert(offsetof(ABasicCharacter, CameraRoot) == 0x000638, "Member 'ABasicCharacter::CameraRoot' has a wrong offset!");
static_assert(offsetof(ABasicCharacter, Camera) == 0x000640, "Member 'ABasicCharacter::Camera' has a wrong offset!");

// Class Player.BasicCharacterMovementComponent
// 0x0030 (0x0F30 - 0x0F00)
class UBasicCharacterMovementComponent final : public UCharacterMovementComponent
{
public:
	float                                         MovementInputScale;                                // 0x0EF8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RotationInputDeltaScale;                           // 0x0EFC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            RotationInputDeltaScaleOverTime;                   // 0x0F00(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RotationInputScaleSpeed;                           // 0x0F08(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F0C[0x4];                                      // 0x0F0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            RotationInputScaleSpeedOverTime;                   // 0x0F10(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          LimitScaleRotationSpeed;                           // 0x0F18(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F19[0x3];                                      // 0x0F19(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxScaleRotationSpeed;                             // 0x0F1C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F20[0x10];                                     // 0x0F20(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BasicCharacterMovementComponent">();
	}
	static class UBasicCharacterMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBasicCharacterMovementComponent>();
	}
};
static_assert(alignof(UBasicCharacterMovementComponent) == 0x000010, "Wrong alignment on UBasicCharacterMovementComponent");
static_assert(sizeof(UBasicCharacterMovementComponent) == 0x000F30, "Wrong size on UBasicCharacterMovementComponent");
static_assert(offsetof(UBasicCharacterMovementComponent, MovementInputScale) == 0x000EF8, "Member 'UBasicCharacterMovementComponent::MovementInputScale' has a wrong offset!");
static_assert(offsetof(UBasicCharacterMovementComponent, RotationInputDeltaScale) == 0x000EFC, "Member 'UBasicCharacterMovementComponent::RotationInputDeltaScale' has a wrong offset!");
static_assert(offsetof(UBasicCharacterMovementComponent, RotationInputDeltaScaleOverTime) == 0x000F00, "Member 'UBasicCharacterMovementComponent::RotationInputDeltaScaleOverTime' has a wrong offset!");
static_assert(offsetof(UBasicCharacterMovementComponent, RotationInputScaleSpeed) == 0x000F08, "Member 'UBasicCharacterMovementComponent::RotationInputScaleSpeed' has a wrong offset!");
static_assert(offsetof(UBasicCharacterMovementComponent, RotationInputScaleSpeedOverTime) == 0x000F10, "Member 'UBasicCharacterMovementComponent::RotationInputScaleSpeedOverTime' has a wrong offset!");
static_assert(offsetof(UBasicCharacterMovementComponent, LimitScaleRotationSpeed) == 0x000F18, "Member 'UBasicCharacterMovementComponent::LimitScaleRotationSpeed' has a wrong offset!");
static_assert(offsetof(UBasicCharacterMovementComponent, MaxScaleRotationSpeed) == 0x000F1C, "Member 'UBasicCharacterMovementComponent::MaxScaleRotationSpeed' has a wrong offset!");

// Class Player.BasicInputComponent
// 0x0018 (0x0140 - 0x0128)
class UBasicInputComponent final : public UInputComponent
{
public:
	class UBInputMovement*                        Movement;                                          // 0x0128(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBInputRotation*                        Rotation;                                          // 0x0130(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBInputCursor*                          Cursor;                                            // 0x0138(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BasicInputComponent">();
	}
	static class UBasicInputComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBasicInputComponent>();
	}
};
static_assert(alignof(UBasicInputComponent) == 0x000008, "Wrong alignment on UBasicInputComponent");
static_assert(sizeof(UBasicInputComponent) == 0x000140, "Wrong size on UBasicInputComponent");
static_assert(offsetof(UBasicInputComponent, Movement) == 0x000128, "Member 'UBasicInputComponent::Movement' has a wrong offset!");
static_assert(offsetof(UBasicInputComponent, Rotation) == 0x000130, "Member 'UBasicInputComponent::Rotation' has a wrong offset!");
static_assert(offsetof(UBasicInputComponent, Cursor) == 0x000138, "Member 'UBasicInputComponent::Cursor' has a wrong offset!");

// Class Player.BInputAction
// 0x00A0 (0x0100 - 0x0060)
class UBInputAction final : public UBInputSource
{
public:
	uint8                                         Pad_60[0xA0];                                      // 0x0060(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FKey GetLastPressedKey() const;
	int32 GetRepeatCount() const;
	bool IsPressed() const;
	bool IsReleased() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BInputAction">();
	}
	static class UBInputAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBInputAction>();
	}
};
static_assert(alignof(UBInputAction) == 0x000008, "Wrong alignment on UBInputAction");
static_assert(sizeof(UBInputAction) == 0x000100, "Wrong size on UBInputAction");

// Class Player.BInputAxis
// 0x0068 (0x00C8 - 0x0060)
class UBInputAxis final : public UBInputSource
{
public:
	uint8                                         Pad_60[0x68];                                      // 0x0060(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FName GetAxisName() const;
	float GetCurrentValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BInputAxis">();
	}
	static class UBInputAxis* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBInputAxis>();
	}
};
static_assert(alignof(UBInputAxis) == 0x000008, "Wrong alignment on UBInputAxis");
static_assert(sizeof(UBInputAxis) == 0x0000C8, "Wrong size on UBInputAxis");

// Class Player.BInputCursor
// 0x0060 (0x00C0 - 0x0060)
class UBInputCursor final : public UBInputSource
{
public:
	uint8                                         Pad_60[0x60];                                      // 0x0060(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BInputCursor">();
	}
	static class UBInputCursor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBInputCursor>();
	}
};
static_assert(alignof(UBInputCursor) == 0x000008, "Wrong alignment on UBInputCursor");
static_assert(sizeof(UBInputCursor) == 0x0000C0, "Wrong size on UBInputCursor");

// Class Player.BInputMovement
// 0x0050 (0x00B0 - 0x0060)
class UBInputMovement final : public UBInputSource
{
public:
	class UBInputAxis*                            Forward;                                           // 0x0060(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBInputAxis*                            Right;                                             // 0x0068(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBInputAxis*                            Up;                                                // 0x0070(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_78[0x38];                                      // 0x0078(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetCurrentValue(const struct FVector& NextValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BInputMovement">();
	}
	static class UBInputMovement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBInputMovement>();
	}
};
static_assert(alignof(UBInputMovement) == 0x000008, "Wrong alignment on UBInputMovement");
static_assert(sizeof(UBInputMovement) == 0x0000B0, "Wrong size on UBInputMovement");
static_assert(offsetof(UBInputMovement, Forward) == 0x000060, "Member 'UBInputMovement::Forward' has a wrong offset!");
static_assert(offsetof(UBInputMovement, Right) == 0x000068, "Member 'UBInputMovement::Right' has a wrong offset!");
static_assert(offsetof(UBInputMovement, Up) == 0x000070, "Member 'UBInputMovement::Up' has a wrong offset!");

// Class Player.BInputRotation
// 0x0030 (0x0090 - 0x0060)
class UBInputRotation final : public UBInputSource
{
public:
	class UBInputTwoAxes*                         RotationDelta;                                     // 0x0060(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBInputTwoAxes*                         RotationScale;                                     // 0x0068(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_70[0x20];                                      // 0x0070(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BInputRotation">();
	}
	static class UBInputRotation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBInputRotation>();
	}
};
static_assert(alignof(UBInputRotation) == 0x000008, "Wrong alignment on UBInputRotation");
static_assert(sizeof(UBInputRotation) == 0x000090, "Wrong size on UBInputRotation");
static_assert(offsetof(UBInputRotation, RotationDelta) == 0x000060, "Member 'UBInputRotation::RotationDelta' has a wrong offset!");
static_assert(offsetof(UBInputRotation, RotationScale) == 0x000068, "Member 'UBInputRotation::RotationScale' has a wrong offset!");

// Class Player.BInputTwoAxes
// 0x0080 (0x00E0 - 0x0060)
class UBInputTwoAxes final : public UBInputSource
{
public:
	uint8                                         Pad_60[0x80];                                      // 0x0060(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FVector2D GetCurrentValue() const;
	const class FName GetFirstAxisName() const;
	const class FName GetSecondAxisName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BInputTwoAxes">();
	}
	static class UBInputTwoAxes* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBInputTwoAxes>();
	}
};
static_assert(alignof(UBInputTwoAxes) == 0x000008, "Wrong alignment on UBInputTwoAxes");
static_assert(sizeof(UBInputTwoAxes) == 0x0000E0, "Wrong size on UBInputTwoAxes");

// Class Player.InputEventState
// 0x0010 (0x0038 - 0x0028)
class UInputEventState final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool Consume(class UObject* NewConsumer);

	class UObject* GetConsumer() const;
	bool IsConsumed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputEventState">();
	}
	static class UInputEventState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputEventState>();
	}
};
static_assert(alignof(UInputEventState) == 0x000008, "Wrong alignment on UInputEventState");
static_assert(sizeof(UInputEventState) == 0x000038, "Wrong size on UInputEventState");

// Class Player.InputReceiver
// 0x0000 (0x0028 - 0x0028)
class IInputReceiver : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputReceiver">();
	}
	static class IInputReceiver* GetDefaultObj()
	{
		return GetDefaultObjImpl<IInputReceiver>();
	}
};
static_assert(alignof(IInputReceiver) == 0x000008, "Wrong alignment on IInputReceiver");
static_assert(sizeof(IInputReceiver) == 0x000028, "Wrong size on IInputReceiver");

}

