#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PostProcessVolumeEx

#include "Basic.hpp"

#include "PostProcessVolumeEx_structs.hpp"


namespace SDK::Params
{

// Function PostProcessVolumeEx.PostprocessingCtrlActor.GetAtmosphereController
// 0x0010 (0x0010 - 0x0000)
struct PostprocessingCtrlActor_GetAtmosphereController final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APostprocessingCtrlActor*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostprocessingCtrlActor_GetAtmosphereController) == 0x000008, "Wrong alignment on PostprocessingCtrlActor_GetAtmosphereController");
static_assert(sizeof(PostprocessingCtrlActor_GetAtmosphereController) == 0x000010, "Wrong size on PostprocessingCtrlActor_GetAtmosphereController");
static_assert(offsetof(PostprocessingCtrlActor_GetAtmosphereController, WorldContextObject) == 0x000000, "Member 'PostprocessingCtrlActor_GetAtmosphereController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PostprocessingCtrlActor_GetAtmosphereController, ReturnValue) == 0x000008, "Member 'PostprocessingCtrlActor_GetAtmosphereController::ReturnValue' has a wrong offset!");

// Function PostProcessVolumeEx.PostprocessingCtrlActor.OverrideGlobalSettins
// 0x0DE0 (0x0DE0 - 0x0000)
struct PostprocessingCtrlActor_OverrideGlobalSettins final
{
public:
	struct FAtmospherePresetDataEx                Data;                                              // 0x0000(0x0DD0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          DoOverride;                                        // 0x0DD0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableSubVolumesDuringOverride;                   // 0x0DD1(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD2[0xE];                                      // 0x0DD2(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PostprocessingCtrlActor_OverrideGlobalSettins) == 0x000010, "Wrong alignment on PostprocessingCtrlActor_OverrideGlobalSettins");
static_assert(sizeof(PostprocessingCtrlActor_OverrideGlobalSettins) == 0x000DE0, "Wrong size on PostprocessingCtrlActor_OverrideGlobalSettins");
static_assert(offsetof(PostprocessingCtrlActor_OverrideGlobalSettins, Data) == 0x000000, "Member 'PostprocessingCtrlActor_OverrideGlobalSettins::Data' has a wrong offset!");
static_assert(offsetof(PostprocessingCtrlActor_OverrideGlobalSettins, DoOverride) == 0x000DD0, "Member 'PostprocessingCtrlActor_OverrideGlobalSettins::DoOverride' has a wrong offset!");
static_assert(offsetof(PostprocessingCtrlActor_OverrideGlobalSettins, DisableSubVolumesDuringOverride) == 0x000DD1, "Member 'PostprocessingCtrlActor_OverrideGlobalSettins::DisableSubVolumesDuringOverride' has a wrong offset!");

// Function PostProcessVolumeEx.PostprocessingCtrlActor.OverrideWindParameters
// 0x0030 (0x0030 - 0x0000)
struct PostprocessingCtrlActor_OverrideWindParameters final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSHPostprocessWindData                 Wind;                                              // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostprocessingCtrlActor_OverrideWindParameters) == 0x000008, "Wrong alignment on PostprocessingCtrlActor_OverrideWindParameters");
static_assert(sizeof(PostprocessingCtrlActor_OverrideWindParameters) == 0x000030, "Wrong size on PostprocessingCtrlActor_OverrideWindParameters");
static_assert(offsetof(PostprocessingCtrlActor_OverrideWindParameters, State) == 0x000000, "Member 'PostprocessingCtrlActor_OverrideWindParameters::State' has a wrong offset!");
static_assert(offsetof(PostprocessingCtrlActor_OverrideWindParameters, Wind) == 0x000008, "Member 'PostprocessingCtrlActor_OverrideWindParameters::Wind' has a wrong offset!");

// Function PostProcessVolumeEx.PostprocessingCtrlActor.GetDayNightFactor
// 0x0004 (0x0004 - 0x0000)
struct PostprocessingCtrlActor_GetDayNightFactor final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostprocessingCtrlActor_GetDayNightFactor) == 0x000004, "Wrong alignment on PostprocessingCtrlActor_GetDayNightFactor");
static_assert(sizeof(PostprocessingCtrlActor_GetDayNightFactor) == 0x000004, "Wrong size on PostprocessingCtrlActor_GetDayNightFactor");
static_assert(offsetof(PostprocessingCtrlActor_GetDayNightFactor, ReturnValue) == 0x000000, "Member 'PostprocessingCtrlActor_GetDayNightFactor::ReturnValue' has a wrong offset!");

// Function PostProcessVolumeEx.PostprocessingCtrlActor.GetLastWindData
// 0x0028 (0x0028 - 0x0000)
struct PostprocessingCtrlActor_GetLastWindData final
{
public:
	struct FSHPostprocessWindData                 ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostprocessingCtrlActor_GetLastWindData) == 0x000008, "Wrong alignment on PostprocessingCtrlActor_GetLastWindData");
static_assert(sizeof(PostprocessingCtrlActor_GetLastWindData) == 0x000028, "Wrong size on PostprocessingCtrlActor_GetLastWindData");
static_assert(offsetof(PostprocessingCtrlActor_GetLastWindData, ReturnValue) == 0x000000, "Member 'PostprocessingCtrlActor_GetLastWindData::ReturnValue' has a wrong offset!");

// Function PostProcessVolumeEx.PostProcessChildVolume.SetIsEnabled
// 0x0001 (0x0001 - 0x0000)
struct PostProcessChildVolume_SetIsEnabled final
{
public:
	bool                                          C;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostProcessChildVolume_SetIsEnabled) == 0x000001, "Wrong alignment on PostProcessChildVolume_SetIsEnabled");
static_assert(sizeof(PostProcessChildVolume_SetIsEnabled) == 0x000001, "Wrong size on PostProcessChildVolume_SetIsEnabled");
static_assert(offsetof(PostProcessChildVolume_SetIsEnabled, C) == 0x000000, "Member 'PostProcessChildVolume_SetIsEnabled::C' has a wrong offset!");

// Function PostProcessVolumeEx.PostProcessChildVolume.GetIsEnabled
// 0x0001 (0x0001 - 0x0000)
struct PostProcessChildVolume_GetIsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostProcessChildVolume_GetIsEnabled) == 0x000001, "Wrong alignment on PostProcessChildVolume_GetIsEnabled");
static_assert(sizeof(PostProcessChildVolume_GetIsEnabled) == 0x000001, "Wrong size on PostProcessChildVolume_GetIsEnabled");
static_assert(offsetof(PostProcessChildVolume_GetIsEnabled, ReturnValue) == 0x000000, "Member 'PostProcessChildVolume_GetIsEnabled::ReturnValue' has a wrong offset!");

// Function PostProcessVolumeEx.PostProcessAutoDOFCtrl.SetExternalDepthValue
// 0x0004 (0x0004 - 0x0000)
struct PostProcessAutoDOFCtrl_SetExternalDepthValue final
{
public:
	float                                         DepthValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostProcessAutoDOFCtrl_SetExternalDepthValue) == 0x000004, "Wrong alignment on PostProcessAutoDOFCtrl_SetExternalDepthValue");
static_assert(sizeof(PostProcessAutoDOFCtrl_SetExternalDepthValue) == 0x000004, "Wrong size on PostProcessAutoDOFCtrl_SetExternalDepthValue");
static_assert(offsetof(PostProcessAutoDOFCtrl_SetExternalDepthValue, DepthValue) == 0x000000, "Member 'PostProcessAutoDOFCtrl_SetExternalDepthValue::DepthValue' has a wrong offset!");

// Function PostProcessVolumeEx.PostProcessAutoDOFCtrl.SetExternalDriver
// 0x0001 (0x0001 - 0x0000)
struct PostProcessAutoDOFCtrl_SetExternalDriver final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostProcessAutoDOFCtrl_SetExternalDriver) == 0x000001, "Wrong alignment on PostProcessAutoDOFCtrl_SetExternalDriver");
static_assert(sizeof(PostProcessAutoDOFCtrl_SetExternalDriver) == 0x000001, "Wrong size on PostProcessAutoDOFCtrl_SetExternalDriver");
static_assert(offsetof(PostProcessAutoDOFCtrl_SetExternalDriver, State) == 0x000000, "Member 'PostProcessAutoDOFCtrl_SetExternalDriver::State' has a wrong offset!");

}

