#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UCW

#include "Basic.hpp"

#include "UCW_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Slate_structs.hpp"


namespace SDK::Params
{

// Function UCW.BButton.SetBackgroundColor
// 0x0010 (0x0010 - 0x0000)
struct BButton_SetBackgroundColor final
{
public:
	struct FLinearColor                           InBackgroundColor;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BButton_SetBackgroundColor) == 0x000004, "Wrong alignment on BButton_SetBackgroundColor");
static_assert(sizeof(BButton_SetBackgroundColor) == 0x000010, "Wrong size on BButton_SetBackgroundColor");
static_assert(offsetof(BButton_SetBackgroundColor, InBackgroundColor) == 0x000000, "Member 'BButton_SetBackgroundColor::InBackgroundColor' has a wrong offset!");

// Function UCW.BButton.SetColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct BButton_SetColorAndOpacity final
{
public:
	struct FLinearColor                           InColorAndOpacity;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BButton_SetColorAndOpacity) == 0x000004, "Wrong alignment on BButton_SetColorAndOpacity");
static_assert(sizeof(BButton_SetColorAndOpacity) == 0x000010, "Wrong size on BButton_SetColorAndOpacity");
static_assert(offsetof(BButton_SetColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'BButton_SetColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function UCW.BButton.SetStyle
// 0x0008 (0x0008 - 0x0000)
struct BButton_SetStyle final
{
public:
	TSubclassOf<class UUCWButtonStyle>            InStyle;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BButton_SetStyle) == 0x000008, "Wrong alignment on BButton_SetStyle");
static_assert(sizeof(BButton_SetStyle) == 0x000008, "Wrong size on BButton_SetStyle");
static_assert(offsetof(BButton_SetStyle, InStyle) == 0x000000, "Member 'BButton_SetStyle::InStyle' has a wrong offset!");

// Function UCW.BButton.IsPressed
// 0x0001 (0x0001 - 0x0000)
struct BButton_IsPressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BButton_IsPressed) == 0x000001, "Wrong alignment on BButton_IsPressed");
static_assert(sizeof(BButton_IsPressed) == 0x000001, "Wrong size on BButton_IsPressed");
static_assert(offsetof(BButton_IsPressed, ReturnValue) == 0x000000, "Member 'BButton_IsPressed::ReturnValue' has a wrong offset!");

// Function UCW.UCWSkipWidget.BP_OnSkipTick
// 0x0004 (0x0004 - 0x0000)
struct UCWSkipWidget_BP_OnSkipTick final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWSkipWidget_BP_OnSkipTick) == 0x000004, "Wrong alignment on UCWSkipWidget_BP_OnSkipTick");
static_assert(sizeof(UCWSkipWidget_BP_OnSkipTick) == 0x000004, "Wrong size on UCWSkipWidget_BP_OnSkipTick");
static_assert(offsetof(UCWSkipWidget_BP_OnSkipTick, Progress) == 0x000000, "Member 'UCWSkipWidget_BP_OnSkipTick::Progress' has a wrong offset!");

// Function UCW.AskDialogWidget.OnFadeOut
// 0x0001 (0x0001 - 0x0000)
struct AskDialogWidget_OnFadeOut final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AskDialogWidget_OnFadeOut) == 0x000001, "Wrong alignment on AskDialogWidget_OnFadeOut");
static_assert(sizeof(AskDialogWidget_OnFadeOut) == 0x000001, "Wrong size on AskDialogWidget_OnFadeOut");
static_assert(offsetof(AskDialogWidget_OnFadeOut, ReturnValue) == 0x000000, "Member 'AskDialogWidget_OnFadeOut::ReturnValue' has a wrong offset!");

// Function UCW.UCWWidgetGroup.SelectButtonAtIndex
// 0x0008 (0x0008 - 0x0000)
struct UCWWidgetGroup_SelectButtonAtIndex final
{
public:
	int32                                         ButtonIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowSound;                                       // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UCWWidgetGroup_SelectButtonAtIndex) == 0x000004, "Wrong alignment on UCWWidgetGroup_SelectButtonAtIndex");
static_assert(sizeof(UCWWidgetGroup_SelectButtonAtIndex) == 0x000008, "Wrong size on UCWWidgetGroup_SelectButtonAtIndex");
static_assert(offsetof(UCWWidgetGroup_SelectButtonAtIndex, ButtonIndex) == 0x000000, "Member 'UCWWidgetGroup_SelectButtonAtIndex::ButtonIndex' has a wrong offset!");
static_assert(offsetof(UCWWidgetGroup_SelectButtonAtIndex, bAllowSound) == 0x000004, "Member 'UCWWidgetGroup_SelectButtonAtIndex::bAllowSound' has a wrong offset!");

// Function UCW.UCWWidgetGroup.SelectNextButton
// 0x0001 (0x0001 - 0x0000)
struct UCWWidgetGroup_SelectNextButton final
{
public:
	bool                                          bAllowWrap;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWWidgetGroup_SelectNextButton) == 0x000001, "Wrong alignment on UCWWidgetGroup_SelectNextButton");
static_assert(sizeof(UCWWidgetGroup_SelectNextButton) == 0x000001, "Wrong size on UCWWidgetGroup_SelectNextButton");
static_assert(offsetof(UCWWidgetGroup_SelectNextButton, bAllowWrap) == 0x000000, "Member 'UCWWidgetGroup_SelectNextButton::bAllowWrap' has a wrong offset!");

// Function UCW.UCWWidgetGroup.SelectPreviousButton
// 0x0001 (0x0001 - 0x0000)
struct UCWWidgetGroup_SelectPreviousButton final
{
public:
	bool                                          bAllowWrap;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWWidgetGroup_SelectPreviousButton) == 0x000001, "Wrong alignment on UCWWidgetGroup_SelectPreviousButton");
static_assert(sizeof(UCWWidgetGroup_SelectPreviousButton) == 0x000001, "Wrong size on UCWWidgetGroup_SelectPreviousButton");
static_assert(offsetof(UCWWidgetGroup_SelectPreviousButton, bAllowWrap) == 0x000000, "Member 'UCWWidgetGroup_SelectPreviousButton::bAllowWrap' has a wrong offset!");

// Function UCW.UCWWidgetGroup.SetSelectionRequired
// 0x0001 (0x0001 - 0x0000)
struct UCWWidgetGroup_SetSelectionRequired final
{
public:
	bool                                          bRequireSelection;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWWidgetGroup_SetSelectionRequired) == 0x000001, "Wrong alignment on UCWWidgetGroup_SetSelectionRequired");
static_assert(sizeof(UCWWidgetGroup_SetSelectionRequired) == 0x000001, "Wrong size on UCWWidgetGroup_SetSelectionRequired");
static_assert(offsetof(UCWWidgetGroup_SetSelectionRequired, bRequireSelection) == 0x000000, "Member 'UCWWidgetGroup_SetSelectionRequired::bRequireSelection' has a wrong offset!");

// Function UCW.UCWWidgetGroup.FindButtonIndex
// 0x0010 (0x0010 - 0x0000)
struct UCWWidgetGroup_FindButtonIndex final
{
public:
	const class UUCWButtonBase*                   ButtonToFind;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UCWWidgetGroup_FindButtonIndex) == 0x000008, "Wrong alignment on UCWWidgetGroup_FindButtonIndex");
static_assert(sizeof(UCWWidgetGroup_FindButtonIndex) == 0x000010, "Wrong size on UCWWidgetGroup_FindButtonIndex");
static_assert(offsetof(UCWWidgetGroup_FindButtonIndex, ButtonToFind) == 0x000000, "Member 'UCWWidgetGroup_FindButtonIndex::ButtonToFind' has a wrong offset!");
static_assert(offsetof(UCWWidgetGroup_FindButtonIndex, ReturnValue) == 0x000008, "Member 'UCWWidgetGroup_FindButtonIndex::ReturnValue' has a wrong offset!");

// Function UCW.UCWWidgetGroup.GetButtonBaseAtIndex
// 0x0010 (0x0010 - 0x0000)
struct UCWWidgetGroup_GetButtonBaseAtIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUCWButtonBase*                         ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWWidgetGroup_GetButtonBaseAtIndex) == 0x000008, "Wrong alignment on UCWWidgetGroup_GetButtonBaseAtIndex");
static_assert(sizeof(UCWWidgetGroup_GetButtonBaseAtIndex) == 0x000010, "Wrong size on UCWWidgetGroup_GetButtonBaseAtIndex");
static_assert(offsetof(UCWWidgetGroup_GetButtonBaseAtIndex, Index_0) == 0x000000, "Member 'UCWWidgetGroup_GetButtonBaseAtIndex::Index_0' has a wrong offset!");
static_assert(offsetof(UCWWidgetGroup_GetButtonBaseAtIndex, ReturnValue) == 0x000008, "Member 'UCWWidgetGroup_GetButtonBaseAtIndex::ReturnValue' has a wrong offset!");

// Function UCW.UCWWidgetGroup.GetButtonCount
// 0x0004 (0x0004 - 0x0000)
struct UCWWidgetGroup_GetButtonCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWWidgetGroup_GetButtonCount) == 0x000004, "Wrong alignment on UCWWidgetGroup_GetButtonCount");
static_assert(sizeof(UCWWidgetGroup_GetButtonCount) == 0x000004, "Wrong size on UCWWidgetGroup_GetButtonCount");
static_assert(offsetof(UCWWidgetGroup_GetButtonCount, ReturnValue) == 0x000000, "Member 'UCWWidgetGroup_GetButtonCount::ReturnValue' has a wrong offset!");

// Function UCW.UCWWidgetGroup.GetHoveredButtonIndex
// 0x0004 (0x0004 - 0x0000)
struct UCWWidgetGroup_GetHoveredButtonIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWWidgetGroup_GetHoveredButtonIndex) == 0x000004, "Wrong alignment on UCWWidgetGroup_GetHoveredButtonIndex");
static_assert(sizeof(UCWWidgetGroup_GetHoveredButtonIndex) == 0x000004, "Wrong size on UCWWidgetGroup_GetHoveredButtonIndex");
static_assert(offsetof(UCWWidgetGroup_GetHoveredButtonIndex, ReturnValue) == 0x000000, "Member 'UCWWidgetGroup_GetHoveredButtonIndex::ReturnValue' has a wrong offset!");

// Function UCW.UCWWidgetGroup.GetSelectedButtonBase
// 0x0008 (0x0008 - 0x0000)
struct UCWWidgetGroup_GetSelectedButtonBase final
{
public:
	class UUCWButtonBase*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWWidgetGroup_GetSelectedButtonBase) == 0x000008, "Wrong alignment on UCWWidgetGroup_GetSelectedButtonBase");
static_assert(sizeof(UCWWidgetGroup_GetSelectedButtonBase) == 0x000008, "Wrong size on UCWWidgetGroup_GetSelectedButtonBase");
static_assert(offsetof(UCWWidgetGroup_GetSelectedButtonBase, ReturnValue) == 0x000000, "Member 'UCWWidgetGroup_GetSelectedButtonBase::ReturnValue' has a wrong offset!");

// Function UCW.UCWWidgetGroup.GetSelectedButtonIndex
// 0x0004 (0x0004 - 0x0000)
struct UCWWidgetGroup_GetSelectedButtonIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWWidgetGroup_GetSelectedButtonIndex) == 0x000004, "Wrong alignment on UCWWidgetGroup_GetSelectedButtonIndex");
static_assert(sizeof(UCWWidgetGroup_GetSelectedButtonIndex) == 0x000004, "Wrong size on UCWWidgetGroup_GetSelectedButtonIndex");
static_assert(offsetof(UCWWidgetGroup_GetSelectedButtonIndex, ReturnValue) == 0x000000, "Member 'UCWWidgetGroup_GetSelectedButtonIndex::ReturnValue' has a wrong offset!");

// Function UCW.UCWWidgetGroup.HasAnyButtons
// 0x0001 (0x0001 - 0x0000)
struct UCWWidgetGroup_HasAnyButtons final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWWidgetGroup_HasAnyButtons) == 0x000001, "Wrong alignment on UCWWidgetGroup_HasAnyButtons");
static_assert(sizeof(UCWWidgetGroup_HasAnyButtons) == 0x000001, "Wrong size on UCWWidgetGroup_HasAnyButtons");
static_assert(offsetof(UCWWidgetGroup_HasAnyButtons, ReturnValue) == 0x000000, "Member 'UCWWidgetGroup_HasAnyButtons::ReturnValue' has a wrong offset!");

// Function UCW.BCheckBox.SetInternalLabel
// 0x0008 (0x0008 - 0x0000)
struct BCheckBox_SetInternalLabel final
{
public:
	class UTextBlock*                             InContent;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BCheckBox_SetInternalLabel) == 0x000008, "Wrong alignment on BCheckBox_SetInternalLabel");
static_assert(sizeof(BCheckBox_SetInternalLabel) == 0x000008, "Wrong size on BCheckBox_SetInternalLabel");
static_assert(offsetof(BCheckBox_SetInternalLabel, InContent) == 0x000000, "Member 'BCheckBox_SetInternalLabel::InContent' has a wrong offset!");

// Function UCW.BCheckBox.SetLabel
// 0x0008 (0x0008 - 0x0000)
struct BCheckBox_SetLabel final
{
public:
	class UWidget*                                InContent;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BCheckBox_SetLabel) == 0x000008, "Wrong alignment on BCheckBox_SetLabel");
static_assert(sizeof(BCheckBox_SetLabel) == 0x000008, "Wrong size on BCheckBox_SetLabel");
static_assert(offsetof(BCheckBox_SetLabel, InContent) == 0x000000, "Member 'BCheckBox_SetLabel::InContent' has a wrong offset!");

// Function UCW.UCWButtonBase.BP_OnLockedChanged
// 0x0001 (0x0001 - 0x0000)
struct UCWButtonBase_BP_OnLockedChanged final
{
public:
	bool                                          bIsLocked;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWButtonBase_BP_OnLockedChanged) == 0x000001, "Wrong alignment on UCWButtonBase_BP_OnLockedChanged");
static_assert(sizeof(UCWButtonBase_BP_OnLockedChanged) == 0x000001, "Wrong size on UCWButtonBase_BP_OnLockedChanged");
static_assert(offsetof(UCWButtonBase_BP_OnLockedChanged, bIsLocked) == 0x000000, "Member 'UCWButtonBase_BP_OnLockedChanged::bIsLocked' has a wrong offset!");

// Function UCW.UCWButtonBase.SetIsFocusable
// 0x0001 (0x0001 - 0x0000)
struct UCWButtonBase_SetIsFocusable final
{
public:
	bool                                          bInIsFocusable;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWButtonBase_SetIsFocusable) == 0x000001, "Wrong alignment on UCWButtonBase_SetIsFocusable");
static_assert(sizeof(UCWButtonBase_SetIsFocusable) == 0x000001, "Wrong size on UCWButtonBase_SetIsFocusable");
static_assert(offsetof(UCWButtonBase_SetIsFocusable, bInIsFocusable) == 0x000000, "Member 'UCWButtonBase_SetIsFocusable::bInIsFocusable' has a wrong offset!");

// Function UCW.UCWButtonBase.SetIsInteractableWhenSelected
// 0x0001 (0x0001 - 0x0000)
struct UCWButtonBase_SetIsInteractableWhenSelected final
{
public:
	bool                                          bInInteractableWhenSelected;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWButtonBase_SetIsInteractableWhenSelected) == 0x000001, "Wrong alignment on UCWButtonBase_SetIsInteractableWhenSelected");
static_assert(sizeof(UCWButtonBase_SetIsInteractableWhenSelected) == 0x000001, "Wrong size on UCWButtonBase_SetIsInteractableWhenSelected");
static_assert(offsetof(UCWButtonBase_SetIsInteractableWhenSelected, bInInteractableWhenSelected) == 0x000000, "Member 'UCWButtonBase_SetIsInteractableWhenSelected::bInInteractableWhenSelected' has a wrong offset!");

// Function UCW.UCWButtonBase.SetIsInteractionEnabled
// 0x0001 (0x0001 - 0x0000)
struct UCWButtonBase_SetIsInteractionEnabled final
{
public:
	bool                                          bInIsInteractionEnabled;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWButtonBase_SetIsInteractionEnabled) == 0x000001, "Wrong alignment on UCWButtonBase_SetIsInteractionEnabled");
static_assert(sizeof(UCWButtonBase_SetIsInteractionEnabled) == 0x000001, "Wrong size on UCWButtonBase_SetIsInteractionEnabled");
static_assert(offsetof(UCWButtonBase_SetIsInteractionEnabled, bInIsInteractionEnabled) == 0x000000, "Member 'UCWButtonBase_SetIsInteractionEnabled::bInIsInteractionEnabled' has a wrong offset!");

// Function UCW.UCWButtonBase.SetIsLocked
// 0x0001 (0x0001 - 0x0000)
struct UCWButtonBase_SetIsLocked final
{
public:
	bool                                          bInIsLocked;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWButtonBase_SetIsLocked) == 0x000001, "Wrong alignment on UCWButtonBase_SetIsLocked");
static_assert(sizeof(UCWButtonBase_SetIsLocked) == 0x000001, "Wrong size on UCWButtonBase_SetIsLocked");
static_assert(offsetof(UCWButtonBase_SetIsLocked, bInIsLocked) == 0x000000, "Member 'UCWButtonBase_SetIsLocked::bInIsLocked' has a wrong offset!");

// Function UCW.UCWButtonBase.SetIsSelectable
// 0x0001 (0x0001 - 0x0000)
struct UCWButtonBase_SetIsSelectable final
{
public:
	bool                                          bInIsSelectable;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWButtonBase_SetIsSelectable) == 0x000001, "Wrong alignment on UCWButtonBase_SetIsSelectable");
static_assert(sizeof(UCWButtonBase_SetIsSelectable) == 0x000001, "Wrong size on UCWButtonBase_SetIsSelectable");
static_assert(offsetof(UCWButtonBase_SetIsSelectable, bInIsSelectable) == 0x000000, "Member 'UCWButtonBase_SetIsSelectable::bInIsSelectable' has a wrong offset!");

// Function UCW.UCWButtonBase.SetIsSelected
// 0x0002 (0x0002 - 0x0000)
struct UCWButtonBase_SetIsSelected final
{
public:
	bool                                          InSelected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGiveClickFeedback;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWButtonBase_SetIsSelected) == 0x000001, "Wrong alignment on UCWButtonBase_SetIsSelected");
static_assert(sizeof(UCWButtonBase_SetIsSelected) == 0x000002, "Wrong size on UCWButtonBase_SetIsSelected");
static_assert(offsetof(UCWButtonBase_SetIsSelected, InSelected) == 0x000000, "Member 'UCWButtonBase_SetIsSelected::InSelected' has a wrong offset!");
static_assert(offsetof(UCWButtonBase_SetIsSelected, bGiveClickFeedback) == 0x000001, "Member 'UCWButtonBase_SetIsSelected::bGiveClickFeedback' has a wrong offset!");

// Function UCW.UCWButtonBase.SetIsToggleable
// 0x0001 (0x0001 - 0x0000)
struct UCWButtonBase_SetIsToggleable final
{
public:
	bool                                          bInIsToggleable;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWButtonBase_SetIsToggleable) == 0x000001, "Wrong alignment on UCWButtonBase_SetIsToggleable");
static_assert(sizeof(UCWButtonBase_SetIsToggleable) == 0x000001, "Wrong size on UCWButtonBase_SetIsToggleable");
static_assert(offsetof(UCWButtonBase_SetIsToggleable, bInIsToggleable) == 0x000000, "Member 'UCWButtonBase_SetIsToggleable::bInIsToggleable' has a wrong offset!");

// Function UCW.UCWButtonBase.SetSelectedInternal
// 0x0003 (0x0003 - 0x0000)
struct UCWButtonBase_SetSelectedInternal final
{
public:
	bool                                          bInSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowSound;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBroadcast;                                        // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWButtonBase_SetSelectedInternal) == 0x000001, "Wrong alignment on UCWButtonBase_SetSelectedInternal");
static_assert(sizeof(UCWButtonBase_SetSelectedInternal) == 0x000003, "Wrong size on UCWButtonBase_SetSelectedInternal");
static_assert(offsetof(UCWButtonBase_SetSelectedInternal, bInSelected) == 0x000000, "Member 'UCWButtonBase_SetSelectedInternal::bInSelected' has a wrong offset!");
static_assert(offsetof(UCWButtonBase_SetSelectedInternal, bAllowSound) == 0x000001, "Member 'UCWButtonBase_SetSelectedInternal::bAllowSound' has a wrong offset!");
static_assert(offsetof(UCWButtonBase_SetSelectedInternal, bBroadcast) == 0x000002, "Member 'UCWButtonBase_SetSelectedInternal::bBroadcast' has a wrong offset!");

// Function UCW.UCWButtonBase.GetLocked
// 0x0001 (0x0001 - 0x0000)
struct UCWButtonBase_GetLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWButtonBase_GetLocked) == 0x000001, "Wrong alignment on UCWButtonBase_GetLocked");
static_assert(sizeof(UCWButtonBase_GetLocked) == 0x000001, "Wrong size on UCWButtonBase_GetLocked");
static_assert(offsetof(UCWButtonBase_GetLocked, ReturnValue) == 0x000000, "Member 'UCWButtonBase_GetLocked::ReturnValue' has a wrong offset!");

// Function UCW.UCWButtonBase.GetSelected
// 0x0001 (0x0001 - 0x0000)
struct UCWButtonBase_GetSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWButtonBase_GetSelected) == 0x000001, "Wrong alignment on UCWButtonBase_GetSelected");
static_assert(sizeof(UCWButtonBase_GetSelected) == 0x000001, "Wrong size on UCWButtonBase_GetSelected");
static_assert(offsetof(UCWButtonBase_GetSelected, ReturnValue) == 0x000000, "Member 'UCWButtonBase_GetSelected::ReturnValue' has a wrong offset!");

// Function UCW.UCWButtonBase.IsFocusable
// 0x0001 (0x0001 - 0x0000)
struct UCWButtonBase_IsFocusable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWButtonBase_IsFocusable) == 0x000001, "Wrong alignment on UCWButtonBase_IsFocusable");
static_assert(sizeof(UCWButtonBase_IsFocusable) == 0x000001, "Wrong size on UCWButtonBase_IsFocusable");
static_assert(offsetof(UCWButtonBase_IsFocusable, ReturnValue) == 0x000000, "Member 'UCWButtonBase_IsFocusable::ReturnValue' has a wrong offset!");

// Function UCW.UCWButtonBase.IsInteractionEnabled
// 0x0001 (0x0001 - 0x0000)
struct UCWButtonBase_IsInteractionEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWButtonBase_IsInteractionEnabled) == 0x000001, "Wrong alignment on UCWButtonBase_IsInteractionEnabled");
static_assert(sizeof(UCWButtonBase_IsInteractionEnabled) == 0x000001, "Wrong size on UCWButtonBase_IsInteractionEnabled");
static_assert(offsetof(UCWButtonBase_IsInteractionEnabled, ReturnValue) == 0x000000, "Member 'UCWButtonBase_IsInteractionEnabled::ReturnValue' has a wrong offset!");

// Function UCW.UCWTextBlock.SetStyle
// 0x0008 (0x0008 - 0x0000)
struct UCWTextBlock_SetStyle final
{
public:
	TSubclassOf<class UCommonTextStyle>           InStyle;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWTextBlock_SetStyle) == 0x000008, "Wrong alignment on UCWTextBlock_SetStyle");
static_assert(sizeof(UCWTextBlock_SetStyle) == 0x000008, "Wrong size on UCWTextBlock_SetStyle");
static_assert(offsetof(UCWTextBlock_SetStyle, InStyle) == 0x000000, "Member 'UCWTextBlock_SetStyle::InStyle' has a wrong offset!");

// Function UCW.UCWTextBlock.SetTextCase
// 0x0001 (0x0001 - 0x0000)
struct UCWTextBlock_SetTextCase final
{
public:
	bool                                          bUseAllCaps;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWTextBlock_SetTextCase) == 0x000001, "Wrong alignment on UCWTextBlock_SetTextCase");
static_assert(sizeof(UCWTextBlock_SetTextCase) == 0x000001, "Wrong size on UCWTextBlock_SetTextCase");
static_assert(offsetof(UCWTextBlock_SetTextCase, bUseAllCaps) == 0x000000, "Member 'UCWTextBlock_SetTextCase::bUseAllCaps' has a wrong offset!");

// Function UCW.UCWTextBlock.SetWrapTextWidth
// 0x0004 (0x0004 - 0x0000)
struct UCWTextBlock_SetWrapTextWidth final
{
public:
	int32                                         InWrapTextAt;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWTextBlock_SetWrapTextWidth) == 0x000004, "Wrong alignment on UCWTextBlock_SetWrapTextWidth");
static_assert(sizeof(UCWTextBlock_SetWrapTextWidth) == 0x000004, "Wrong size on UCWTextBlock_SetWrapTextWidth");
static_assert(offsetof(UCWTextBlock_SetWrapTextWidth, InWrapTextAt) == 0x000000, "Member 'UCWTextBlock_SetWrapTextWidth::InWrapTextAt' has a wrong offset!");

// Function UCW.BButtonSlot.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct BButtonSlot_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          InHorizontalAlignment;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BButtonSlot_SetHorizontalAlignment) == 0x000001, "Wrong alignment on BButtonSlot_SetHorizontalAlignment");
static_assert(sizeof(BButtonSlot_SetHorizontalAlignment) == 0x000001, "Wrong size on BButtonSlot_SetHorizontalAlignment");
static_assert(offsetof(BButtonSlot_SetHorizontalAlignment, InHorizontalAlignment) == 0x000000, "Member 'BButtonSlot_SetHorizontalAlignment::InHorizontalAlignment' has a wrong offset!");

// Function UCW.BButtonSlot.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct BButtonSlot_SetPadding final
{
public:
	struct FMargin                                InPadding;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BButtonSlot_SetPadding) == 0x000004, "Wrong alignment on BButtonSlot_SetPadding");
static_assert(sizeof(BButtonSlot_SetPadding) == 0x000010, "Wrong size on BButtonSlot_SetPadding");
static_assert(offsetof(BButtonSlot_SetPadding, InPadding) == 0x000000, "Member 'BButtonSlot_SetPadding::InPadding' has a wrong offset!");

// Function UCW.BButtonSlot.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct BButtonSlot_SetVerticalAlignment final
{
public:
	EVerticalAlignment                            InVerticalAlignment;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BButtonSlot_SetVerticalAlignment) == 0x000001, "Wrong alignment on BButtonSlot_SetVerticalAlignment");
static_assert(sizeof(BButtonSlot_SetVerticalAlignment) == 0x000001, "Wrong size on BButtonSlot_SetVerticalAlignment");
static_assert(offsetof(BButtonSlot_SetVerticalAlignment, InVerticalAlignment) == 0x000000, "Member 'BButtonSlot_SetVerticalAlignment::InVerticalAlignment' has a wrong offset!");

// DelegateFunction UCW.BComboBoxString.OnItemHoveredDelegate__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct BComboBoxString_OnItemHoveredDelegate__DelegateSignature final
{
public:
	class FString                                 ItemName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BComboBoxString_OnItemHoveredDelegate__DelegateSignature) == 0x000008, "Wrong alignment on BComboBoxString_OnItemHoveredDelegate__DelegateSignature");
static_assert(sizeof(BComboBoxString_OnItemHoveredDelegate__DelegateSignature) == 0x000018, "Wrong size on BComboBoxString_OnItemHoveredDelegate__DelegateSignature");
static_assert(offsetof(BComboBoxString_OnItemHoveredDelegate__DelegateSignature, ItemName) == 0x000000, "Member 'BComboBoxString_OnItemHoveredDelegate__DelegateSignature::ItemName' has a wrong offset!");
static_assert(offsetof(BComboBoxString_OnItemHoveredDelegate__DelegateSignature, ItemIndex) == 0x000010, "Member 'BComboBoxString_OnItemHoveredDelegate__DelegateSignature::ItemIndex' has a wrong offset!");

// DelegateFunction UCW.BComboBoxString.OnSelectionIndexChangedEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BComboBoxString_OnSelectionIndexChangedEvent__DelegateSignature final
{
public:
	int32                                         SelectedItem;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectInfo                                   SelectionType;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BComboBoxString_OnSelectionIndexChangedEvent__DelegateSignature) == 0x000004, "Wrong alignment on BComboBoxString_OnSelectionIndexChangedEvent__DelegateSignature");
static_assert(sizeof(BComboBoxString_OnSelectionIndexChangedEvent__DelegateSignature) == 0x000008, "Wrong size on BComboBoxString_OnSelectionIndexChangedEvent__DelegateSignature");
static_assert(offsetof(BComboBoxString_OnSelectionIndexChangedEvent__DelegateSignature, SelectedItem) == 0x000000, "Member 'BComboBoxString_OnSelectionIndexChangedEvent__DelegateSignature::SelectedItem' has a wrong offset!");
static_assert(offsetof(BComboBoxString_OnSelectionIndexChangedEvent__DelegateSignature, SelectionType) == 0x000004, "Member 'BComboBoxString_OnSelectionIndexChangedEvent__DelegateSignature::SelectionType' has a wrong offset!");

// Function UCW.BComboBoxString.SetLabel
// 0x0008 (0x0008 - 0x0000)
struct BComboBoxString_SetLabel final
{
public:
	class UWidget*                                InContent;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BComboBoxString_SetLabel) == 0x000008, "Wrong alignment on BComboBoxString_SetLabel");
static_assert(sizeof(BComboBoxString_SetLabel) == 0x000008, "Wrong size on BComboBoxString_SetLabel");
static_assert(offsetof(BComboBoxString_SetLabel, InContent) == 0x000000, "Member 'BComboBoxString_SetLabel::InContent' has a wrong offset!");

// Function UCW.BComboBoxString.SetOptions
// 0x0018 (0x0018 - 0x0000)
struct BComboBoxString_SetOptions final
{
public:
	TArray<class FText>                           Options;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PreserveSelection;                                 // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BComboBoxString_SetOptions) == 0x000008, "Wrong alignment on BComboBoxString_SetOptions");
static_assert(sizeof(BComboBoxString_SetOptions) == 0x000018, "Wrong size on BComboBoxString_SetOptions");
static_assert(offsetof(BComboBoxString_SetOptions, Options) == 0x000000, "Member 'BComboBoxString_SetOptions::Options' has a wrong offset!");
static_assert(offsetof(BComboBoxString_SetOptions, Num) == 0x000010, "Member 'BComboBoxString_SetOptions::Num' has a wrong offset!");
static_assert(offsetof(BComboBoxString_SetOptions, PreserveSelection) == 0x000014, "Member 'BComboBoxString_SetOptions::PreserveSelection' has a wrong offset!");

// Function UCW.BComboBoxString.SetSelectedOptionIndex
// 0x0004 (0x0004 - 0x0000)
struct BComboBoxString_SetSelectedOptionIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BComboBoxString_SetSelectedOptionIndex) == 0x000004, "Wrong alignment on BComboBoxString_SetSelectedOptionIndex");
static_assert(sizeof(BComboBoxString_SetSelectedOptionIndex) == 0x000004, "Wrong size on BComboBoxString_SetSelectedOptionIndex");
static_assert(offsetof(BComboBoxString_SetSelectedOptionIndex, Index_0) == 0x000000, "Member 'BComboBoxString_SetSelectedOptionIndex::Index_0' has a wrong offset!");

// Function UCW.BComboBoxString.SetStyle
// 0x0048 (0x0048 - 0x0000)
struct BComboBoxString_SetStyle final
{
public:
	struct FHoverableTextStyle                    InStyle;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BComboBoxString_SetStyle) == 0x000008, "Wrong alignment on BComboBoxString_SetStyle");
static_assert(sizeof(BComboBoxString_SetStyle) == 0x000048, "Wrong size on BComboBoxString_SetStyle");
static_assert(offsetof(BComboBoxString_SetStyle, InStyle) == 0x000000, "Member 'BComboBoxString_SetStyle::InStyle' has a wrong offset!");

// Function UCW.BComboBoxString.GetSelectedOptionIndex
// 0x0004 (0x0004 - 0x0000)
struct BComboBoxString_GetSelectedOptionIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BComboBoxString_GetSelectedOptionIndex) == 0x000004, "Wrong alignment on BComboBoxString_GetSelectedOptionIndex");
static_assert(sizeof(BComboBoxString_GetSelectedOptionIndex) == 0x000004, "Wrong size on BComboBoxString_GetSelectedOptionIndex");
static_assert(offsetof(BComboBoxString_GetSelectedOptionIndex, ReturnValue) == 0x000000, "Member 'BComboBoxString_GetSelectedOptionIndex::ReturnValue' has a wrong offset!");

// Function UCW.BComboBoxString.HasInputCaptured
// 0x0001 (0x0001 - 0x0000)
struct BComboBoxString_HasInputCaptured final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BComboBoxString_HasInputCaptured) == 0x000001, "Wrong alignment on BComboBoxString_HasInputCaptured");
static_assert(sizeof(BComboBoxString_HasInputCaptured) == 0x000001, "Wrong size on BComboBoxString_HasInputCaptured");
static_assert(offsetof(BComboBoxString_HasInputCaptured, ReturnValue) == 0x000000, "Member 'BComboBoxString_HasInputCaptured::ReturnValue' has a wrong offset!");

// DelegateFunction UCW.BInputKeySelector.OnKeySelectedEvent__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BInputKeySelector_OnKeySelectedEvent__DelegateSignature final
{
public:
	struct FInputChord                            SelectedKey_0;                                     // 0x0000(0x0020)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BInputKeySelector_OnKeySelectedEvent__DelegateSignature) == 0x000008, "Wrong alignment on BInputKeySelector_OnKeySelectedEvent__DelegateSignature");
static_assert(sizeof(BInputKeySelector_OnKeySelectedEvent__DelegateSignature) == 0x000020, "Wrong size on BInputKeySelector_OnKeySelectedEvent__DelegateSignature");
static_assert(offsetof(BInputKeySelector_OnKeySelectedEvent__DelegateSignature, SelectedKey_0) == 0x000000, "Member 'BInputKeySelector_OnKeySelectedEvent__DelegateSignature::SelectedKey_0' has a wrong offset!");

// Function UCW.BInputKeySelector.SetColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct BInputKeySelector_SetColorAndOpacity final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BInputKeySelector_SetColorAndOpacity) == 0x000004, "Wrong alignment on BInputKeySelector_SetColorAndOpacity");
static_assert(sizeof(BInputKeySelector_SetColorAndOpacity) == 0x000010, "Wrong size on BInputKeySelector_SetColorAndOpacity");
static_assert(offsetof(BInputKeySelector_SetColorAndOpacity, InColor) == 0x000000, "Member 'BInputKeySelector_SetColorAndOpacity::InColor' has a wrong offset!");

// Function UCW.BInputKeySelector.SetLabelText
// 0x0018 (0x0018 - 0x0000)
struct BInputKeySelector_SetLabelText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BInputKeySelector_SetLabelText) == 0x000008, "Wrong alignment on BInputKeySelector_SetLabelText");
static_assert(sizeof(BInputKeySelector_SetLabelText) == 0x000018, "Wrong size on BInputKeySelector_SetLabelText");
static_assert(offsetof(BInputKeySelector_SetLabelText, InText) == 0x000000, "Member 'BInputKeySelector_SetLabelText::InText' has a wrong offset!");

// Function UCW.BInputKeySelector.SetSelectedKey
// 0x0020 (0x0020 - 0x0000)
struct BInputKeySelector_SetSelectedKey final
{
public:
	struct FInputChord                            InSelectedKey;                                     // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BInputKeySelector_SetSelectedKey) == 0x000008, "Wrong alignment on BInputKeySelector_SetSelectedKey");
static_assert(sizeof(BInputKeySelector_SetSelectedKey) == 0x000020, "Wrong size on BInputKeySelector_SetSelectedKey");
static_assert(offsetof(BInputKeySelector_SetSelectedKey, InSelectedKey) == 0x000000, "Member 'BInputKeySelector_SetSelectedKey::InSelectedKey' has a wrong offset!");

// Function UCW.BInputKeySelector.GetIsSelectingKey
// 0x0001 (0x0001 - 0x0000)
struct BInputKeySelector_GetIsSelectingKey final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BInputKeySelector_GetIsSelectingKey) == 0x000001, "Wrong alignment on BInputKeySelector_GetIsSelectingKey");
static_assert(sizeof(BInputKeySelector_GetIsSelectingKey) == 0x000001, "Wrong size on BInputKeySelector_GetIsSelectingKey");
static_assert(offsetof(BInputKeySelector_GetIsSelectingKey, ReturnValue) == 0x000000, "Member 'BInputKeySelector_GetIsSelectingKey::ReturnValue' has a wrong offset!");

// Function UCW.BSlider.SetLabel
// 0x0008 (0x0008 - 0x0000)
struct BSlider_SetLabel final
{
public:
	class UWidget*                                InContent;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BSlider_SetLabel) == 0x000008, "Wrong alignment on BSlider_SetLabel");
static_assert(sizeof(BSlider_SetLabel) == 0x000008, "Wrong size on BSlider_SetLabel");
static_assert(offsetof(BSlider_SetLabel, InContent) == 0x000000, "Member 'BSlider_SetLabel::InContent' has a wrong offset!");

// Function UCW.BSlider.HasInputCaptured
// 0x0001 (0x0001 - 0x0000)
struct BSlider_HasInputCaptured final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BSlider_HasInputCaptured) == 0x000001, "Wrong alignment on BSlider_HasInputCaptured");
static_assert(sizeof(BSlider_HasInputCaptured) == 0x000001, "Wrong size on BSlider_HasInputCaptured");
static_assert(offsetof(BSlider_HasInputCaptured, ReturnValue) == 0x000000, "Member 'BSlider_HasInputCaptured::ReturnValue' has a wrong offset!");

// DelegateFunction UCW.BSpinBox.OnSpinBoxValueChangedEvent__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct BSpinBox_OnSpinBoxValueChangedEvent__DelegateSignature final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BSpinBox_OnSpinBoxValueChangedEvent__DelegateSignature) == 0x000004, "Wrong alignment on BSpinBox_OnSpinBoxValueChangedEvent__DelegateSignature");
static_assert(sizeof(BSpinBox_OnSpinBoxValueChangedEvent__DelegateSignature) == 0x000004, "Wrong size on BSpinBox_OnSpinBoxValueChangedEvent__DelegateSignature");
static_assert(offsetof(BSpinBox_OnSpinBoxValueChangedEvent__DelegateSignature, Value) == 0x000000, "Member 'BSpinBox_OnSpinBoxValueChangedEvent__DelegateSignature::Value' has a wrong offset!");

// Function UCW.BSpinBox.SetLabel
// 0x0008 (0x0008 - 0x0000)
struct BSpinBox_SetLabel final
{
public:
	class UWidget*                                InContent;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BSpinBox_SetLabel) == 0x000008, "Wrong alignment on BSpinBox_SetLabel");
static_assert(sizeof(BSpinBox_SetLabel) == 0x000008, "Wrong size on BSpinBox_SetLabel");
static_assert(offsetof(BSpinBox_SetLabel, InContent) == 0x000000, "Member 'BSpinBox_SetLabel::InContent' has a wrong offset!");

// Function UCW.BSpinBox.SetOptions
// 0x0018 (0x0018 - 0x0000)
struct BSpinBox_SetOptions final
{
public:
	TArray<class FText>                           Options;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BSpinBox_SetOptions) == 0x000008, "Wrong alignment on BSpinBox_SetOptions");
static_assert(sizeof(BSpinBox_SetOptions) == 0x000018, "Wrong size on BSpinBox_SetOptions");
static_assert(offsetof(BSpinBox_SetOptions, Options) == 0x000000, "Member 'BSpinBox_SetOptions::Options' has a wrong offset!");
static_assert(offsetof(BSpinBox_SetOptions, Num) == 0x000010, "Member 'BSpinBox_SetOptions::Num' has a wrong offset!");

// Function UCW.BSpinBox.SetSelectedOption
// 0x0004 (0x0004 - 0x0000)
struct BSpinBox_SetSelectedOption final
{
public:
	int32                                         Option;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BSpinBox_SetSelectedOption) == 0x000004, "Wrong alignment on BSpinBox_SetSelectedOption");
static_assert(sizeof(BSpinBox_SetSelectedOption) == 0x000004, "Wrong size on BSpinBox_SetSelectedOption");
static_assert(offsetof(BSpinBox_SetSelectedOption, Option) == 0x000000, "Member 'BSpinBox_SetSelectedOption::Option' has a wrong offset!");

// Function UCW.BSpinBox.SetStyle
// 0x0008 (0x0008 - 0x0000)
struct BSpinBox_SetStyle final
{
public:
	TSubclassOf<class UUCWSpinBoxStyle>           InStyle;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BSpinBox_SetStyle) == 0x000008, "Wrong alignment on BSpinBox_SetStyle");
static_assert(sizeof(BSpinBox_SetStyle) == 0x000008, "Wrong size on BSpinBox_SetStyle");
static_assert(offsetof(BSpinBox_SetStyle, InStyle) == 0x000000, "Member 'BSpinBox_SetStyle::InStyle' has a wrong offset!");

// Function UCW.BSpinBox.SetValue
// 0x0004 (0x0004 - 0x0000)
struct BSpinBox_SetValue final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BSpinBox_SetValue) == 0x000004, "Wrong alignment on BSpinBox_SetValue");
static_assert(sizeof(BSpinBox_SetValue) == 0x000004, "Wrong size on BSpinBox_SetValue");
static_assert(offsetof(BSpinBox_SetValue, Value) == 0x000000, "Member 'BSpinBox_SetValue::Value' has a wrong offset!");

// Function UCW.BSpinBox.GetSelectedOption
// 0x0004 (0x0004 - 0x0000)
struct BSpinBox_GetSelectedOption final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BSpinBox_GetSelectedOption) == 0x000004, "Wrong alignment on BSpinBox_GetSelectedOption");
static_assert(sizeof(BSpinBox_GetSelectedOption) == 0x000004, "Wrong size on BSpinBox_GetSelectedOption");
static_assert(offsetof(BSpinBox_GetSelectedOption, ReturnValue) == 0x000000, "Member 'BSpinBox_GetSelectedOption::ReturnValue' has a wrong offset!");

// Function UCW.BSpinBox.GetValue
// 0x0004 (0x0004 - 0x0000)
struct BSpinBox_GetValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BSpinBox_GetValue) == 0x000004, "Wrong alignment on BSpinBox_GetValue");
static_assert(sizeof(BSpinBox_GetValue) == 0x000004, "Wrong size on BSpinBox_GetValue");
static_assert(offsetof(BSpinBox_GetValue, ReturnValue) == 0x000000, "Member 'BSpinBox_GetValue::ReturnValue' has a wrong offset!");

// Function UCW.BVolumeControl.SetLabel
// 0x0008 (0x0008 - 0x0000)
struct BVolumeControl_SetLabel final
{
public:
	class UWidget*                                InContent;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BVolumeControl_SetLabel) == 0x000008, "Wrong alignment on BVolumeControl_SetLabel");
static_assert(sizeof(BVolumeControl_SetLabel) == 0x000008, "Wrong size on BVolumeControl_SetLabel");
static_assert(offsetof(BVolumeControl_SetLabel, InContent) == 0x000000, "Member 'BVolumeControl_SetLabel::InContent' has a wrong offset!");

// Function UCW.BVolumeControl.SetMuted
// 0x0001 (0x0001 - 0x0000)
struct BVolumeControl_SetMuted final
{
public:
	bool                                          InValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BVolumeControl_SetMuted) == 0x000001, "Wrong alignment on BVolumeControl_SetMuted");
static_assert(sizeof(BVolumeControl_SetMuted) == 0x000001, "Wrong size on BVolumeControl_SetMuted");
static_assert(offsetof(BVolumeControl_SetMuted, InValue) == 0x000000, "Member 'BVolumeControl_SetMuted::InValue' has a wrong offset!");

// Function UCW.BVolumeControl.SetVolume
// 0x0004 (0x0004 - 0x0000)
struct BVolumeControl_SetVolume final
{
public:
	float                                         InVolume;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BVolumeControl_SetVolume) == 0x000004, "Wrong alignment on BVolumeControl_SetVolume");
static_assert(sizeof(BVolumeControl_SetVolume) == 0x000004, "Wrong size on BVolumeControl_SetVolume");
static_assert(offsetof(BVolumeControl_SetVolume, InVolume) == 0x000000, "Member 'BVolumeControl_SetVolume::InVolume' has a wrong offset!");

// Function UCW.BVolumeControl.GetVolume
// 0x0004 (0x0004 - 0x0000)
struct BVolumeControl_GetVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BVolumeControl_GetVolume) == 0x000004, "Wrong alignment on BVolumeControl_GetVolume");
static_assert(sizeof(BVolumeControl_GetVolume) == 0x000004, "Wrong size on BVolumeControl_GetVolume");
static_assert(offsetof(BVolumeControl_GetVolume, ReturnValue) == 0x000000, "Member 'BVolumeControl_GetVolume::ReturnValue' has a wrong offset!");

// Function UCW.BVolumeControl.IsMuted
// 0x0001 (0x0001 - 0x0000)
struct BVolumeControl_IsMuted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BVolumeControl_IsMuted) == 0x000001, "Wrong alignment on BVolumeControl_IsMuted");
static_assert(sizeof(BVolumeControl_IsMuted) == 0x000001, "Wrong size on BVolumeControl_IsMuted");
static_assert(offsetof(BVolumeControl_IsMuted, ReturnValue) == 0x000000, "Member 'BVolumeControl_IsMuted::ReturnValue' has a wrong offset!");

// Function UCW.CreditsWidget.OnSkipTick
// 0x0004 (0x0004 - 0x0000)
struct CreditsWidget_OnSkipTick final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreditsWidget_OnSkipTick) == 0x000004, "Wrong alignment on CreditsWidget_OnSkipTick");
static_assert(sizeof(CreditsWidget_OnSkipTick) == 0x000004, "Wrong size on CreditsWidget_OnSkipTick");
static_assert(offsetof(CreditsWidget_OnSkipTick, Progress) == 0x000000, "Member 'CreditsWidget_OnSkipTick::Progress' has a wrong offset!");

// Function UCW.CreditsWidget.IsFullyScrolled
// 0x0001 (0x0001 - 0x0000)
struct CreditsWidget_IsFullyScrolled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreditsWidget_IsFullyScrolled) == 0x000001, "Wrong alignment on CreditsWidget_IsFullyScrolled");
static_assert(sizeof(CreditsWidget_IsFullyScrolled) == 0x000001, "Wrong size on CreditsWidget_IsFullyScrolled");
static_assert(offsetof(CreditsWidget_IsFullyScrolled, ReturnValue) == 0x000000, "Member 'CreditsWidget_IsFullyScrolled::ReturnValue' has a wrong offset!");

// Function UCW.KeepAspectZone.SetSidesToPad
// 0x0004 (0x0004 - 0x0000)
struct KeepAspectZone_SetSidesToPad final
{
public:
	bool                                          InPadLeft;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPadRight;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPadTop;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPadBottom;                                       // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepAspectZone_SetSidesToPad) == 0x000001, "Wrong alignment on KeepAspectZone_SetSidesToPad");
static_assert(sizeof(KeepAspectZone_SetSidesToPad) == 0x000004, "Wrong size on KeepAspectZone_SetSidesToPad");
static_assert(offsetof(KeepAspectZone_SetSidesToPad, InPadLeft) == 0x000000, "Member 'KeepAspectZone_SetSidesToPad::InPadLeft' has a wrong offset!");
static_assert(offsetof(KeepAspectZone_SetSidesToPad, InPadRight) == 0x000001, "Member 'KeepAspectZone_SetSidesToPad::InPadRight' has a wrong offset!");
static_assert(offsetof(KeepAspectZone_SetSidesToPad, InPadTop) == 0x000002, "Member 'KeepAspectZone_SetSidesToPad::InPadTop' has a wrong offset!");
static_assert(offsetof(KeepAspectZone_SetSidesToPad, InPadBottom) == 0x000003, "Member 'KeepAspectZone_SetSidesToPad::InPadBottom' has a wrong offset!");

// Function UCW.StyledRichTextBlock.SetStyle
// 0x0008 (0x0008 - 0x0000)
struct StyledRichTextBlock_SetStyle final
{
public:
	TSubclassOf<class UCommonTextStyle>           InStyle;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StyledRichTextBlock_SetStyle) == 0x000008, "Wrong alignment on StyledRichTextBlock_SetStyle");
static_assert(sizeof(StyledRichTextBlock_SetStyle) == 0x000008, "Wrong size on StyledRichTextBlock_SetStyle");
static_assert(offsetof(StyledRichTextBlock_SetStyle, InStyle) == 0x000000, "Member 'StyledRichTextBlock_SetStyle::InStyle' has a wrong offset!");

// Function UCW.TabBox.SelectTab
// 0x0008 (0x0008 - 0x0000)
struct TabBox_SelectTab final
{
public:
	int32                                         NewTab;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETabChangeCause                               ChangeCause;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TabBox_SelectTab) == 0x000004, "Wrong alignment on TabBox_SelectTab");
static_assert(sizeof(TabBox_SelectTab) == 0x000008, "Wrong size on TabBox_SelectTab");
static_assert(offsetof(TabBox_SelectTab, NewTab) == 0x000000, "Member 'TabBox_SelectTab::NewTab' has a wrong offset!");
static_assert(offsetof(TabBox_SelectTab, ChangeCause) == 0x000004, "Member 'TabBox_SelectTab::ChangeCause' has a wrong offset!");

// Function UCW.TabBox.SetSwitcher
// 0x0008 (0x0008 - 0x0000)
struct TabBox_SetSwitcher final
{
public:
	class UWidgetSwitcher*                        _Switcher;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TabBox_SetSwitcher) == 0x000008, "Wrong alignment on TabBox_SetSwitcher");
static_assert(sizeof(TabBox_SetSwitcher) == 0x000008, "Wrong size on TabBox_SetSwitcher");
static_assert(offsetof(TabBox_SetSwitcher, _Switcher) == 0x000000, "Member 'TabBox_SetSwitcher::_Switcher' has a wrong offset!");

// Function UCW.TabBox.GetTabCount
// 0x0004 (0x0004 - 0x0000)
struct TabBox_GetTabCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TabBox_GetTabCount) == 0x000004, "Wrong alignment on TabBox_GetTabCount");
static_assert(sizeof(TabBox_GetTabCount) == 0x000004, "Wrong size on TabBox_GetTabCount");
static_assert(offsetof(TabBox_GetTabCount, ReturnValue) == 0x000000, "Member 'TabBox_GetTabCount::ReturnValue' has a wrong offset!");

// Function UCW.TextButton.SetText
// 0x0018 (0x0018 - 0x0000)
struct TextButton_SetText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextButton_SetText) == 0x000008, "Wrong alignment on TextButton_SetText");
static_assert(sizeof(TextButton_SetText) == 0x000018, "Wrong size on TextButton_SetText");
static_assert(offsetof(TextButton_SetText, InText) == 0x000000, "Member 'TextButton_SetText::InText' has a wrong offset!");

// Function UCW.TextButton.GetText
// 0x0018 (0x0018 - 0x0000)
struct TextButton_GetText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextButton_GetText) == 0x000008, "Wrong alignment on TextButton_GetText");
static_assert(sizeof(TextButton_GetText) == 0x000018, "Wrong size on TextButton_GetText");
static_assert(offsetof(TextButton_GetText, ReturnValue) == 0x000000, "Member 'TextButton_GetText::ReturnValue' has a wrong offset!");

// Function UCW.UCWTextButtonStyle.GetDisabledTextStyle
// 0x0008 (0x0008 - 0x0000)
struct UCWTextButtonStyle_GetDisabledTextStyle final
{
public:
	class UCommonTextStyle*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWTextButtonStyle_GetDisabledTextStyle) == 0x000008, "Wrong alignment on UCWTextButtonStyle_GetDisabledTextStyle");
static_assert(sizeof(UCWTextButtonStyle_GetDisabledTextStyle) == 0x000008, "Wrong size on UCWTextButtonStyle_GetDisabledTextStyle");
static_assert(offsetof(UCWTextButtonStyle_GetDisabledTextStyle, ReturnValue) == 0x000000, "Member 'UCWTextButtonStyle_GetDisabledTextStyle::ReturnValue' has a wrong offset!");

// Function UCW.UCWTextButtonStyle.GetFocusedTextStyle
// 0x0008 (0x0008 - 0x0000)
struct UCWTextButtonStyle_GetFocusedTextStyle final
{
public:
	class UCommonTextStyle*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWTextButtonStyle_GetFocusedTextStyle) == 0x000008, "Wrong alignment on UCWTextButtonStyle_GetFocusedTextStyle");
static_assert(sizeof(UCWTextButtonStyle_GetFocusedTextStyle) == 0x000008, "Wrong size on UCWTextButtonStyle_GetFocusedTextStyle");
static_assert(offsetof(UCWTextButtonStyle_GetFocusedTextStyle, ReturnValue) == 0x000000, "Member 'UCWTextButtonStyle_GetFocusedTextStyle::ReturnValue' has a wrong offset!");

// Function UCW.UCWTextButtonStyle.GetHoveredTextStyle
// 0x0008 (0x0008 - 0x0000)
struct UCWTextButtonStyle_GetHoveredTextStyle final
{
public:
	class UCommonTextStyle*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWTextButtonStyle_GetHoveredTextStyle) == 0x000008, "Wrong alignment on UCWTextButtonStyle_GetHoveredTextStyle");
static_assert(sizeof(UCWTextButtonStyle_GetHoveredTextStyle) == 0x000008, "Wrong size on UCWTextButtonStyle_GetHoveredTextStyle");
static_assert(offsetof(UCWTextButtonStyle_GetHoveredTextStyle, ReturnValue) == 0x000000, "Member 'UCWTextButtonStyle_GetHoveredTextStyle::ReturnValue' has a wrong offset!");

// Function UCW.UCWTextButtonStyle.GetNormalTextStyle
// 0x0008 (0x0008 - 0x0000)
struct UCWTextButtonStyle_GetNormalTextStyle final
{
public:
	class UCommonTextStyle*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWTextButtonStyle_GetNormalTextStyle) == 0x000008, "Wrong alignment on UCWTextButtonStyle_GetNormalTextStyle");
static_assert(sizeof(UCWTextButtonStyle_GetNormalTextStyle) == 0x000008, "Wrong size on UCWTextButtonStyle_GetNormalTextStyle");
static_assert(offsetof(UCWTextButtonStyle_GetNormalTextStyle, ReturnValue) == 0x000000, "Member 'UCWTextButtonStyle_GetNormalTextStyle::ReturnValue' has a wrong offset!");

// Function UCW.UCWCreditsRowWidget.OnSetData
// 0x0070 (0x0070 - 0x0000)
struct UCWCreditsRowWidget_OnSetData final
{
public:
	struct FCreditsItem                           Item;                                              // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWCreditsRowWidget_OnSetData) == 0x000008, "Wrong alignment on UCWCreditsRowWidget_OnSetData");
static_assert(sizeof(UCWCreditsRowWidget_OnSetData) == 0x000070, "Wrong size on UCWCreditsRowWidget_OnSetData");
static_assert(offsetof(UCWCreditsRowWidget_OnSetData, Item) == 0x000000, "Member 'UCWCreditsRowWidget_OnSetData::Item' has a wrong offset!");

// Function UCW.UCWCreditsRowWidget.OnSetText
// 0x0048 (0x0048 - 0x0000)
struct UCWCreditsRowWidget_OnSetText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Text2;                                             // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Text3;                                             // 0x0030(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWCreditsRowWidget_OnSetText) == 0x000008, "Wrong alignment on UCWCreditsRowWidget_OnSetText");
static_assert(sizeof(UCWCreditsRowWidget_OnSetText) == 0x000048, "Wrong size on UCWCreditsRowWidget_OnSetText");
static_assert(offsetof(UCWCreditsRowWidget_OnSetText, Text) == 0x000000, "Member 'UCWCreditsRowWidget_OnSetText::Text' has a wrong offset!");
static_assert(offsetof(UCWCreditsRowWidget_OnSetText, Text2) == 0x000018, "Member 'UCWCreditsRowWidget_OnSetText::Text2' has a wrong offset!");
static_assert(offsetof(UCWCreditsRowWidget_OnSetText, Text3) == 0x000030, "Member 'UCWCreditsRowWidget_OnSetText::Text3' has a wrong offset!");

// Function UCW.UCWCreditsImageRowWidget.OnSetBrush
// 0x00D0 (0x00D0 - 0x0000)
struct UCWCreditsImageRowWidget_OnSetBrush final
{
public:
	struct FSlateBrush                            Brush;                                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWCreditsImageRowWidget_OnSetBrush) == 0x000010, "Wrong alignment on UCWCreditsImageRowWidget_OnSetBrush");
static_assert(sizeof(UCWCreditsImageRowWidget_OnSetBrush) == 0x0000D0, "Wrong size on UCWCreditsImageRowWidget_OnSetBrush");
static_assert(offsetof(UCWCreditsImageRowWidget_OnSetBrush, Brush) == 0x000000, "Member 'UCWCreditsImageRowWidget_OnSetBrush::Brush' has a wrong offset!");

// Function UCW.UCWListView.SetEntrySpacing
// 0x0004 (0x0004 - 0x0000)
struct UCWListView_SetEntrySpacing final
{
public:
	float                                         InEntrySpacing;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWListView_SetEntrySpacing) == 0x000004, "Wrong alignment on UCWListView_SetEntrySpacing");
static_assert(sizeof(UCWListView_SetEntrySpacing) == 0x000004, "Wrong size on UCWListView_SetEntrySpacing");
static_assert(offsetof(UCWListView_SetEntrySpacing, InEntrySpacing) == 0x000000, "Member 'UCWListView_SetEntrySpacing::InEntrySpacing' has a wrong offset!");

// Function UCW.UCWProgressWidget.OnPercentUpdated
// 0x0004 (0x0004 - 0x0000)
struct UCWProgressWidget_OnPercentUpdated final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWProgressWidget_OnPercentUpdated) == 0x000004, "Wrong alignment on UCWProgressWidget_OnPercentUpdated");
static_assert(sizeof(UCWProgressWidget_OnPercentUpdated) == 0x000004, "Wrong size on UCWProgressWidget_OnPercentUpdated");
static_assert(offsetof(UCWProgressWidget_OnPercentUpdated, InPercent) == 0x000000, "Member 'UCWProgressWidget_OnPercentUpdated::InPercent' has a wrong offset!");

// Function UCW.UCWProgressWidget.SetPercent
// 0x0004 (0x0004 - 0x0000)
struct UCWProgressWidget_SetPercent final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWProgressWidget_SetPercent) == 0x000004, "Wrong alignment on UCWProgressWidget_SetPercent");
static_assert(sizeof(UCWProgressWidget_SetPercent) == 0x000004, "Wrong size on UCWProgressWidget_SetPercent");
static_assert(offsetof(UCWProgressWidget_SetPercent, InPercent) == 0x000000, "Member 'UCWProgressWidget_SetPercent::InPercent' has a wrong offset!");

// Function UCW.UCWTabBar.BP_OnTabSelected
// 0x0008 (0x0008 - 0x0000)
struct UCWTabBar_BP_OnTabSelected final
{
public:
	class UUCWTabPanel*                           Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWTabBar_BP_OnTabSelected) == 0x000008, "Wrong alignment on UCWTabBar_BP_OnTabSelected");
static_assert(sizeof(UCWTabBar_BP_OnTabSelected) == 0x000008, "Wrong size on UCWTabBar_BP_OnTabSelected");
static_assert(offsetof(UCWTabBar_BP_OnTabSelected, Panel) == 0x000000, "Member 'UCWTabBar_BP_OnTabSelected::Panel' has a wrong offset!");

// DelegateFunction UCW.UCWTabBar.OnTabSelected__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct UCWTabBar_OnTabSelected__DelegateSignature final
{
public:
	class UUCWTabPanel*                           Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWTabBar_OnTabSelected__DelegateSignature) == 0x000008, "Wrong alignment on UCWTabBar_OnTabSelected__DelegateSignature");
static_assert(sizeof(UCWTabBar_OnTabSelected__DelegateSignature) == 0x000008, "Wrong size on UCWTabBar_OnTabSelected__DelegateSignature");
static_assert(offsetof(UCWTabBar_OnTabSelected__DelegateSignature, Panel) == 0x000000, "Member 'UCWTabBar_OnTabSelected__DelegateSignature::Panel' has a wrong offset!");

// Function UCW.UCWTabBar.SelectTab
// 0x0008 (0x0008 - 0x0000)
struct UCWTabBar_SelectTab final
{
public:
	int32                                         NewTab;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETabChangeCause                               ChangeCause;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UCWTabBar_SelectTab) == 0x000004, "Wrong alignment on UCWTabBar_SelectTab");
static_assert(sizeof(UCWTabBar_SelectTab) == 0x000008, "Wrong size on UCWTabBar_SelectTab");
static_assert(offsetof(UCWTabBar_SelectTab, NewTab) == 0x000000, "Member 'UCWTabBar_SelectTab::NewTab' has a wrong offset!");
static_assert(offsetof(UCWTabBar_SelectTab, ChangeCause) == 0x000004, "Member 'UCWTabBar_SelectTab::ChangeCause' has a wrong offset!");

// Function UCW.UCWTabButton.OnTextChanged
// 0x0018 (0x0018 - 0x0000)
struct UCWTabButton_OnTextChanged final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UCWTabButton_OnTextChanged) == 0x000008, "Wrong alignment on UCWTabButton_OnTextChanged");
static_assert(sizeof(UCWTabButton_OnTextChanged) == 0x000018, "Wrong size on UCWTabButton_OnTextChanged");
static_assert(offsetof(UCWTabButton_OnTextChanged, Text) == 0x000000, "Member 'UCWTabButton_OnTextChanged::Text' has a wrong offset!");

}

