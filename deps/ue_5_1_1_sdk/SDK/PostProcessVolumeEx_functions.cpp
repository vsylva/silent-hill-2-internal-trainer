#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PostProcessVolumeEx

#include "Basic.hpp"

#include "PostProcessVolumeEx_classes.hpp"
#include "PostProcessVolumeEx_parameters.hpp"


namespace SDK
{

// Function PostProcessVolumeEx.PostprocessingCtrlActor.GetAtmosphereController
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APostprocessingCtrlActor*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APostprocessingCtrlActor* APostprocessingCtrlActor::GetAtmosphereController(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PostprocessingCtrlActor", "GetAtmosphereController");

	Params::PostprocessingCtrlActor_GetAtmosphereController Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PostProcessVolumeEx.PostprocessingCtrlActor.DisableContactShadows
// (Final, Native, Public, BlueprintCallable)

void APostprocessingCtrlActor::DisableContactShadows()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostprocessingCtrlActor", "DisableContactShadows");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PostProcessVolumeEx.PostprocessingCtrlActor.EnableContactShadows
// (Final, Native, Public, BlueprintCallable)

void APostprocessingCtrlActor::EnableContactShadows()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostprocessingCtrlActor", "EnableContactShadows");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PostProcessVolumeEx.PostprocessingCtrlActor.OverrideGlobalSettins
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAtmospherePresetDataEx          Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    DoOverride                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    DisableSubVolumesDuringOverride                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APostprocessingCtrlActor::OverrideGlobalSettins(const struct FAtmospherePresetDataEx& Data, bool DoOverride, bool DisableSubVolumesDuringOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostprocessingCtrlActor", "OverrideGlobalSettins");

	Params::PostprocessingCtrlActor_OverrideGlobalSettins Parms{};

	Parms.Data = std::move(Data);
	Parms.DoOverride = DoOverride;
	Parms.DisableSubVolumesDuringOverride = DisableSubVolumesDuringOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PostProcessVolumeEx.PostprocessingCtrlActor.OverrideWindParameters
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSHPostprocessWindData           Wind                                                   (Parm, NoDestructor, NativeAccessSpecifierPublic)

void APostprocessingCtrlActor::OverrideWindParameters(bool State, const struct FSHPostprocessWindData& Wind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostprocessingCtrlActor", "OverrideWindParameters");

	Params::PostprocessingCtrlActor_OverrideWindParameters Parms{};

	Parms.State = State;
	Parms.Wind = std::move(Wind);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PostProcessVolumeEx.PostprocessingCtrlActor.GetDayNightFactor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float APostprocessingCtrlActor::GetDayNightFactor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostprocessingCtrlActor", "GetDayNightFactor");

	Params::PostprocessingCtrlActor_GetDayNightFactor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PostProcessVolumeEx.PostprocessingCtrlActor.GetLastWindData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FSHPostprocessWindData     ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FSHPostprocessWindData APostprocessingCtrlActor::GetLastWindData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostprocessingCtrlActor", "GetLastWindData");

	Params::PostprocessingCtrlActor_GetLastWindData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PostProcessVolumeEx.PostProcessChildVolume.SetIsEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    C                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APostProcessChildVolume::SetIsEnabled(bool C)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostProcessChildVolume", "SetIsEnabled");

	Params::PostProcessChildVolume_SetIsEnabled Parms{};

	Parms.C = C;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PostProcessVolumeEx.PostProcessChildVolume.GetIsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool APostProcessChildVolume::GetIsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostProcessChildVolume", "GetIsEnabled");

	Params::PostProcessChildVolume_GetIsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PostProcessVolumeEx.PostProcessAutoDOFCtrl.SetExternalDepthValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DepthValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPostProcessAutoDOFCtrl::SetExternalDepthValue(float DepthValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostProcessAutoDOFCtrl", "SetExternalDepthValue");

	Params::PostProcessAutoDOFCtrl_SetExternalDepthValue Parms{};

	Parms.DepthValue = DepthValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PostProcessVolumeEx.PostProcessAutoDOFCtrl.SetExternalDriver
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPostProcessAutoDOFCtrl::SetExternalDriver(bool State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostProcessAutoDOFCtrl", "SetExternalDriver");

	Params::PostProcessAutoDOFCtrl_SetExternalDriver Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

