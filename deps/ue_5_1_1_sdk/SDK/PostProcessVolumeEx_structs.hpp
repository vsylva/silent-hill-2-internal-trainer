#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PostProcessVolumeEx

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum PostProcessVolumeEx.EAtmosphereInterpolationMode
// NumValues: 0x0004
enum class EAtmosphereInterpolationMode : uint8
{
	EAIM_FromParameter                       = 0,
	EAIM_LeaveSource                         = 1,
	EAIM_LeaveTarget                         = 2,
	EAIM_MAX                                 = 3,
};

// Enum PostProcessVolumeEx.EAtmosphereMood
// NumValues: 0x0009
enum class EAtmosphereMood : uint8
{
	EAMD_None                                = 0,
	EAMD_Custom0                             = 1,
	EAMD_Custom1                             = 2,
	EAMD_Custom2                             = 3,
	EAMD_Custom3                             = 4,
	EAMD_Custom4                             = 5,
	EAMD_Custom5                             = 6,
	EAMD_Custom6                             = 7,
	EAMD_MAX                                 = 8,
};

// Enum PostProcessVolumeEx.ESunShadowsQuality
// NumValues: 0x0004
enum class ESunShadowsQuality : uint8
{
	ESSQ_Low                                 = 0,
	ESSQ_Medium                              = 1,
	ESSQ_High                                = 2,
	ESSQ_MAX                                 = 3,
};

// Enum PostProcessVolumeEx.ESkyLightCaptureFrequency
// NumValues: 0x0004
enum class ESkyLightCaptureFrequency : uint8
{
	ESLF_Low                                 = 0,
	ESLF_Medium                              = 1,
	ESLF_High                                = 2,
	ESLF_MAX                                 = 3,
};

// Enum PostProcessVolumeEx.EAtmosphereDLightVisLQ
// NumValues: 0x0005
enum class EAtmosphereDLightVisLQ : uint8
{
	EDLV_AsIs                                = 0,
	EDLV_AlwaysOn                            = 1,
	EDLV_AlwaysOff                           = 2,
	EDLV_AlwaysOffC                          = 3,
	EDLV_MAX                                 = 4,
};

// ScriptStruct PostProcessVolumeEx.SHPostprocessExpFog
// 0x00E0 (0x00E0 - 0x0000)
struct FSHPostprocessExpFog final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FogDensity;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogInscatteringColor;                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogHeightFalloff;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogMaxOpacity;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistance;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogCutoffDistance;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondFogDensity;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondFogHeightFalloff;                            // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondFogHeightOffset;                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringExponent;                   // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringStartDistance;              // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DirectionalInscatteringColor;                      // 0x003C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableVolumetricFog;                              // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumetricFogScatteringDistribution;               // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 VolumetricFogAlbedo;                               // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           VolumetricFogEmissive;                             // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogExtinctionScale;                      // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogDistance;                             // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogStaticLightingScatteringIntensity;    // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideLightColorsWithFogInscatteringColors;     // 0x0074(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HeightIsCameraRelative;                            // 0x0075(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_76[0x2];                                       // 0x0076(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WorldOriginHeightOffset;                           // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FogDarkening;                                      // 0x007C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           FogDarkeningTint;                                  // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogDarkeningExponent;                              // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogDarkeningDepthThreshold;                        // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogDarkeningDepthThresholdFade;                    // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogDarkeningFadeBias;                              // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogDarkeningFadeExponent;                          // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogDarkeningFadeScale;                             // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogDistanceScale;                                  // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogContrast;                                       // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogNoiseScaleMultiplier;                           // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogSpeedMultiplier;                                // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogIntensityMultiplier;                            // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogTint;                                           // 0x00BC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReflectionsFog;                                    // 0x00CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReflectionsFogNearCutOut;                          // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReflectionsFogDensityScale;                        // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReflectionsFogAbsorbtionScale;                     // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReflectionsFogBrightnessScale;                     // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSHPostprocessExpFog) == 0x000004, "Wrong alignment on FSHPostprocessExpFog");
static_assert(sizeof(FSHPostprocessExpFog) == 0x0000E0, "Wrong size on FSHPostprocessExpFog");
static_assert(offsetof(FSHPostprocessExpFog, Visible) == 0x000000, "Member 'FSHPostprocessExpFog::Visible' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, FogDensity) == 0x000004, "Member 'FSHPostprocessExpFog::FogDensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, FogInscatteringColor) == 0x000008, "Member 'FSHPostprocessExpFog::FogInscatteringColor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, FogHeightFalloff) == 0x000018, "Member 'FSHPostprocessExpFog::FogHeightFalloff' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, FogMaxOpacity) == 0x00001C, "Member 'FSHPostprocessExpFog::FogMaxOpacity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, StartDistance) == 0x000020, "Member 'FSHPostprocessExpFog::StartDistance' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, FogCutoffDistance) == 0x000024, "Member 'FSHPostprocessExpFog::FogCutoffDistance' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, SecondFogDensity) == 0x000028, "Member 'FSHPostprocessExpFog::SecondFogDensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, SecondFogHeightFalloff) == 0x00002C, "Member 'FSHPostprocessExpFog::SecondFogHeightFalloff' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, SecondFogHeightOffset) == 0x000030, "Member 'FSHPostprocessExpFog::SecondFogHeightOffset' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, DirectionalInscatteringExponent) == 0x000034, "Member 'FSHPostprocessExpFog::DirectionalInscatteringExponent' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, DirectionalInscatteringStartDistance) == 0x000038, "Member 'FSHPostprocessExpFog::DirectionalInscatteringStartDistance' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, DirectionalInscatteringColor) == 0x00003C, "Member 'FSHPostprocessExpFog::DirectionalInscatteringColor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, bEnableVolumetricFog) == 0x00004C, "Member 'FSHPostprocessExpFog::bEnableVolumetricFog' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, VolumetricFogScatteringDistribution) == 0x000050, "Member 'FSHPostprocessExpFog::VolumetricFogScatteringDistribution' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, VolumetricFogAlbedo) == 0x000054, "Member 'FSHPostprocessExpFog::VolumetricFogAlbedo' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, VolumetricFogEmissive) == 0x000058, "Member 'FSHPostprocessExpFog::VolumetricFogEmissive' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, VolumetricFogExtinctionScale) == 0x000068, "Member 'FSHPostprocessExpFog::VolumetricFogExtinctionScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, VolumetricFogDistance) == 0x00006C, "Member 'FSHPostprocessExpFog::VolumetricFogDistance' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, VolumetricFogStaticLightingScatteringIntensity) == 0x000070, "Member 'FSHPostprocessExpFog::VolumetricFogStaticLightingScatteringIntensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, bOverrideLightColorsWithFogInscatteringColors) == 0x000074, "Member 'FSHPostprocessExpFog::bOverrideLightColorsWithFogInscatteringColors' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, HeightIsCameraRelative) == 0x000075, "Member 'FSHPostprocessExpFog::HeightIsCameraRelative' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, WorldOriginHeightOffset) == 0x000078, "Member 'FSHPostprocessExpFog::WorldOriginHeightOffset' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, FogDarkening) == 0x00007C, "Member 'FSHPostprocessExpFog::FogDarkening' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, FogDarkeningTint) == 0x000080, "Member 'FSHPostprocessExpFog::FogDarkeningTint' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, FogDarkeningExponent) == 0x000090, "Member 'FSHPostprocessExpFog::FogDarkeningExponent' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, FogDarkeningDepthThreshold) == 0x000094, "Member 'FSHPostprocessExpFog::FogDarkeningDepthThreshold' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, FogDarkeningDepthThresholdFade) == 0x000098, "Member 'FSHPostprocessExpFog::FogDarkeningDepthThresholdFade' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, FogDarkeningFadeBias) == 0x00009C, "Member 'FSHPostprocessExpFog::FogDarkeningFadeBias' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, FogDarkeningFadeExponent) == 0x0000A0, "Member 'FSHPostprocessExpFog::FogDarkeningFadeExponent' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, FogDarkeningFadeScale) == 0x0000A4, "Member 'FSHPostprocessExpFog::FogDarkeningFadeScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, FogDistanceScale) == 0x0000A8, "Member 'FSHPostprocessExpFog::FogDistanceScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, FogContrast) == 0x0000AC, "Member 'FSHPostprocessExpFog::FogContrast' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, FogNoiseScaleMultiplier) == 0x0000B0, "Member 'FSHPostprocessExpFog::FogNoiseScaleMultiplier' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, FogSpeedMultiplier) == 0x0000B4, "Member 'FSHPostprocessExpFog::FogSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, FogIntensityMultiplier) == 0x0000B8, "Member 'FSHPostprocessExpFog::FogIntensityMultiplier' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, FogTint) == 0x0000BC, "Member 'FSHPostprocessExpFog::FogTint' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, ReflectionsFog) == 0x0000CC, "Member 'FSHPostprocessExpFog::ReflectionsFog' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, ReflectionsFogNearCutOut) == 0x0000D0, "Member 'FSHPostprocessExpFog::ReflectionsFogNearCutOut' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, ReflectionsFogDensityScale) == 0x0000D4, "Member 'FSHPostprocessExpFog::ReflectionsFogDensityScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, ReflectionsFogAbsorbtionScale) == 0x0000D8, "Member 'FSHPostprocessExpFog::ReflectionsFogAbsorbtionScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFog, ReflectionsFogBrightnessScale) == 0x0000DC, "Member 'FSHPostprocessExpFog::ReflectionsFogBrightnessScale' has a wrong offset!");

// ScriptStruct PostProcessVolumeEx.SHPostprocessLevelDataCtrl
// 0x0058 (0x0058 - 0x0000)
struct FSHPostprocessLevelDataCtrl final
{
public:
	float                                         ForcedLastLODDistance;                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HDRFinalExponent;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HDRFinalMultiplier;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableGI;                                          // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RimLightIntensity;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RimLightColor;                                     // 0x0014(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RimLightETA;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RimLightBias;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RimLightAngleMin;                                  // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RimLightAngleMax;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterLightIntensity;                           // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CharacterLightColor;                               // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowTexelsPerPixel;                              // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowTexelsPerPixelPointlight;                    // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowTexelsPerPixelSpotlight;                     // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowTexelsPerPixelRectlight;                     // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSHPostprocessLevelDataCtrl) == 0x000004, "Wrong alignment on FSHPostprocessLevelDataCtrl");
static_assert(sizeof(FSHPostprocessLevelDataCtrl) == 0x000058, "Wrong size on FSHPostprocessLevelDataCtrl");
static_assert(offsetof(FSHPostprocessLevelDataCtrl, ForcedLastLODDistance) == 0x000000, "Member 'FSHPostprocessLevelDataCtrl::ForcedLastLODDistance' has a wrong offset!");
static_assert(offsetof(FSHPostprocessLevelDataCtrl, HDRFinalExponent) == 0x000004, "Member 'FSHPostprocessLevelDataCtrl::HDRFinalExponent' has a wrong offset!");
static_assert(offsetof(FSHPostprocessLevelDataCtrl, HDRFinalMultiplier) == 0x000008, "Member 'FSHPostprocessLevelDataCtrl::HDRFinalMultiplier' has a wrong offset!");
static_assert(offsetof(FSHPostprocessLevelDataCtrl, EnableGI) == 0x00000C, "Member 'FSHPostprocessLevelDataCtrl::EnableGI' has a wrong offset!");
static_assert(offsetof(FSHPostprocessLevelDataCtrl, RimLightIntensity) == 0x000010, "Member 'FSHPostprocessLevelDataCtrl::RimLightIntensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessLevelDataCtrl, RimLightColor) == 0x000014, "Member 'FSHPostprocessLevelDataCtrl::RimLightColor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessLevelDataCtrl, RimLightETA) == 0x000024, "Member 'FSHPostprocessLevelDataCtrl::RimLightETA' has a wrong offset!");
static_assert(offsetof(FSHPostprocessLevelDataCtrl, RimLightBias) == 0x000028, "Member 'FSHPostprocessLevelDataCtrl::RimLightBias' has a wrong offset!");
static_assert(offsetof(FSHPostprocessLevelDataCtrl, RimLightAngleMin) == 0x00002C, "Member 'FSHPostprocessLevelDataCtrl::RimLightAngleMin' has a wrong offset!");
static_assert(offsetof(FSHPostprocessLevelDataCtrl, RimLightAngleMax) == 0x000030, "Member 'FSHPostprocessLevelDataCtrl::RimLightAngleMax' has a wrong offset!");
static_assert(offsetof(FSHPostprocessLevelDataCtrl, CharacterLightIntensity) == 0x000034, "Member 'FSHPostprocessLevelDataCtrl::CharacterLightIntensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessLevelDataCtrl, CharacterLightColor) == 0x000038, "Member 'FSHPostprocessLevelDataCtrl::CharacterLightColor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessLevelDataCtrl, ShadowTexelsPerPixel) == 0x000048, "Member 'FSHPostprocessLevelDataCtrl::ShadowTexelsPerPixel' has a wrong offset!");
static_assert(offsetof(FSHPostprocessLevelDataCtrl, ShadowTexelsPerPixelPointlight) == 0x00004C, "Member 'FSHPostprocessLevelDataCtrl::ShadowTexelsPerPixelPointlight' has a wrong offset!");
static_assert(offsetof(FSHPostprocessLevelDataCtrl, ShadowTexelsPerPixelSpotlight) == 0x000050, "Member 'FSHPostprocessLevelDataCtrl::ShadowTexelsPerPixelSpotlight' has a wrong offset!");
static_assert(offsetof(FSHPostprocessLevelDataCtrl, ShadowTexelsPerPixelRectlight) == 0x000054, "Member 'FSHPostprocessLevelDataCtrl::ShadowTexelsPerPixelRectlight' has a wrong offset!");

// ScriptStruct PostProcessVolumeEx.SHPostprocessEpicClouds
// 0x00C0 (0x00C0 - 0x0000)
struct FSHPostprocessEpicClouds final
{
public:
	float                                         BaseNoiseExp;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseNoiseScale;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeerPowder;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeerPowderPower;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ErosionExp;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ErosionMax;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ErosionMin;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ErosionNoiseScale;                                 // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ErosionScale;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ErosionStrength;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtinctionScale;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultiScatteringContribution;                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultiScatteringEccentricity;                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultiScatteringOcclusion;                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseHeightExp;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseHeightRange;                                  // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhaseBlend;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhaseG;                                            // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhaseG2;                                           // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeatherUVScale;                                    // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Albedo;                                            // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Emissive;                                          // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Extinction;                                        // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           WindVector;                                        // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             WeatherTexture;                                    // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeatherTextureRotation;                            // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             GradientTexture;                                   // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseCloudsGizmos;                                   // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           NoiseModScale;                                     // 0x00AC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSHPostprocessEpicClouds) == 0x000008, "Wrong alignment on FSHPostprocessEpicClouds");
static_assert(sizeof(FSHPostprocessEpicClouds) == 0x0000C0, "Wrong size on FSHPostprocessEpicClouds");
static_assert(offsetof(FSHPostprocessEpicClouds, BaseNoiseExp) == 0x000000, "Member 'FSHPostprocessEpicClouds::BaseNoiseExp' has a wrong offset!");
static_assert(offsetof(FSHPostprocessEpicClouds, BaseNoiseScale) == 0x000004, "Member 'FSHPostprocessEpicClouds::BaseNoiseScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessEpicClouds, BeerPowder) == 0x000008, "Member 'FSHPostprocessEpicClouds::BeerPowder' has a wrong offset!");
static_assert(offsetof(FSHPostprocessEpicClouds, BeerPowderPower) == 0x00000C, "Member 'FSHPostprocessEpicClouds::BeerPowderPower' has a wrong offset!");
static_assert(offsetof(FSHPostprocessEpicClouds, ErosionExp) == 0x000010, "Member 'FSHPostprocessEpicClouds::ErosionExp' has a wrong offset!");
static_assert(offsetof(FSHPostprocessEpicClouds, ErosionMax) == 0x000014, "Member 'FSHPostprocessEpicClouds::ErosionMax' has a wrong offset!");
static_assert(offsetof(FSHPostprocessEpicClouds, ErosionMin) == 0x000018, "Member 'FSHPostprocessEpicClouds::ErosionMin' has a wrong offset!");
static_assert(offsetof(FSHPostprocessEpicClouds, ErosionNoiseScale) == 0x00001C, "Member 'FSHPostprocessEpicClouds::ErosionNoiseScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessEpicClouds, ErosionScale) == 0x000020, "Member 'FSHPostprocessEpicClouds::ErosionScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessEpicClouds, ErosionStrength) == 0x000024, "Member 'FSHPostprocessEpicClouds::ErosionStrength' has a wrong offset!");
static_assert(offsetof(FSHPostprocessEpicClouds, ExtinctionScale) == 0x000028, "Member 'FSHPostprocessEpicClouds::ExtinctionScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessEpicClouds, MultiScatteringContribution) == 0x00002C, "Member 'FSHPostprocessEpicClouds::MultiScatteringContribution' has a wrong offset!");
static_assert(offsetof(FSHPostprocessEpicClouds, MultiScatteringEccentricity) == 0x000030, "Member 'FSHPostprocessEpicClouds::MultiScatteringEccentricity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessEpicClouds, MultiScatteringOcclusion) == 0x000034, "Member 'FSHPostprocessEpicClouds::MultiScatteringOcclusion' has a wrong offset!");
static_assert(offsetof(FSHPostprocessEpicClouds, NoiseHeightExp) == 0x000038, "Member 'FSHPostprocessEpicClouds::NoiseHeightExp' has a wrong offset!");
static_assert(offsetof(FSHPostprocessEpicClouds, NoiseHeightRange) == 0x00003C, "Member 'FSHPostprocessEpicClouds::NoiseHeightRange' has a wrong offset!");
static_assert(offsetof(FSHPostprocessEpicClouds, PhaseBlend) == 0x000040, "Member 'FSHPostprocessEpicClouds::PhaseBlend' has a wrong offset!");
static_assert(offsetof(FSHPostprocessEpicClouds, PhaseG) == 0x000044, "Member 'FSHPostprocessEpicClouds::PhaseG' has a wrong offset!");
static_assert(offsetof(FSHPostprocessEpicClouds, PhaseG2) == 0x000048, "Member 'FSHPostprocessEpicClouds::PhaseG2' has a wrong offset!");
static_assert(offsetof(FSHPostprocessEpicClouds, WeatherUVScale) == 0x00004C, "Member 'FSHPostprocessEpicClouds::WeatherUVScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessEpicClouds, Albedo) == 0x000050, "Member 'FSHPostprocessEpicClouds::Albedo' has a wrong offset!");
static_assert(offsetof(FSHPostprocessEpicClouds, Emissive) == 0x000060, "Member 'FSHPostprocessEpicClouds::Emissive' has a wrong offset!");
static_assert(offsetof(FSHPostprocessEpicClouds, Extinction) == 0x000070, "Member 'FSHPostprocessEpicClouds::Extinction' has a wrong offset!");
static_assert(offsetof(FSHPostprocessEpicClouds, WindVector) == 0x000080, "Member 'FSHPostprocessEpicClouds::WindVector' has a wrong offset!");
static_assert(offsetof(FSHPostprocessEpicClouds, WeatherTexture) == 0x000090, "Member 'FSHPostprocessEpicClouds::WeatherTexture' has a wrong offset!");
static_assert(offsetof(FSHPostprocessEpicClouds, WeatherTextureRotation) == 0x000098, "Member 'FSHPostprocessEpicClouds::WeatherTextureRotation' has a wrong offset!");
static_assert(offsetof(FSHPostprocessEpicClouds, GradientTexture) == 0x0000A0, "Member 'FSHPostprocessEpicClouds::GradientTexture' has a wrong offset!");
static_assert(offsetof(FSHPostprocessEpicClouds, UseCloudsGizmos) == 0x0000A8, "Member 'FSHPostprocessEpicClouds::UseCloudsGizmos' has a wrong offset!");
static_assert(offsetof(FSHPostprocessEpicClouds, NoiseModScale) == 0x0000AC, "Member 'FSHPostprocessEpicClouds::NoiseModScale' has a wrong offset!");

// ScriptStruct PostProcessVolumeEx.SHPostprocessAtmFog
// 0x0198 (0x0198 - 0x0000)
struct FSHPostprocessAtmFog final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BottomRadius;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GroundAlbedo;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AtmosphereHeight;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultiScatteringFactor;                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceSampleCountScale;                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RayleighScatteringScale;                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RayleighScattering;                                // 0x001C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RayleighExponentialDistribution;                   // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MieScatteringScale;                                // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MieScattering;                                     // 0x0034(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MieAbsorptionScale;                                // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MieAbsorption;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MieAnisotropy;                                     // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MieExponentialDistribution;                        // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OtherAbsorptionScale;                              // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OtherAbsorption;                                   // 0x0064(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTentDistribution                      OtherTentDistribution;                             // 0x0074(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyLuminanceFactor;                                // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AerialPespectiveViewDistanceScale;                 // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightFogContribution;                             // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransmittanceMinLightElevationAngle;               // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AerialPerspectiveStartDepth;                       // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableVolumetricClouds;                            // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LayerBottomAltitude;                               // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LayerHeight;                                       // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TracingStartMaxDistance;                           // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TracingMaxDistance;                                // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePerSampleAtmosphericLightTransmittance;        // 0x00B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkyLightCloudBottomOcclusion;                      // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewSampleCountScale;                              // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReflectionViewSampleCountScale;                    // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowViewSampleCountScale;                        // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowReflectionViewSampleCountScale;              // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowTracingDistance;                             // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopTracingTransmittanceThreshold;                 // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSHPostprocessEpicClouds               VCloudsMaterialParams;                             // 0x00D8(0x00C0)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSHPostprocessAtmFog) == 0x000008, "Wrong alignment on FSHPostprocessAtmFog");
static_assert(sizeof(FSHPostprocessAtmFog) == 0x000198, "Wrong size on FSHPostprocessAtmFog");
static_assert(offsetof(FSHPostprocessAtmFog, Visible) == 0x000000, "Member 'FSHPostprocessAtmFog::Visible' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, BottomRadius) == 0x000004, "Member 'FSHPostprocessAtmFog::BottomRadius' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, GroundAlbedo) == 0x000008, "Member 'FSHPostprocessAtmFog::GroundAlbedo' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, AtmosphereHeight) == 0x00000C, "Member 'FSHPostprocessAtmFog::AtmosphereHeight' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, MultiScatteringFactor) == 0x000010, "Member 'FSHPostprocessAtmFog::MultiScatteringFactor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, TraceSampleCountScale) == 0x000014, "Member 'FSHPostprocessAtmFog::TraceSampleCountScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, RayleighScatteringScale) == 0x000018, "Member 'FSHPostprocessAtmFog::RayleighScatteringScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, RayleighScattering) == 0x00001C, "Member 'FSHPostprocessAtmFog::RayleighScattering' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, RayleighExponentialDistribution) == 0x00002C, "Member 'FSHPostprocessAtmFog::RayleighExponentialDistribution' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, MieScatteringScale) == 0x000030, "Member 'FSHPostprocessAtmFog::MieScatteringScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, MieScattering) == 0x000034, "Member 'FSHPostprocessAtmFog::MieScattering' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, MieAbsorptionScale) == 0x000044, "Member 'FSHPostprocessAtmFog::MieAbsorptionScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, MieAbsorption) == 0x000048, "Member 'FSHPostprocessAtmFog::MieAbsorption' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, MieAnisotropy) == 0x000058, "Member 'FSHPostprocessAtmFog::MieAnisotropy' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, MieExponentialDistribution) == 0x00005C, "Member 'FSHPostprocessAtmFog::MieExponentialDistribution' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, OtherAbsorptionScale) == 0x000060, "Member 'FSHPostprocessAtmFog::OtherAbsorptionScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, OtherAbsorption) == 0x000064, "Member 'FSHPostprocessAtmFog::OtherAbsorption' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, OtherTentDistribution) == 0x000074, "Member 'FSHPostprocessAtmFog::OtherTentDistribution' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, SkyLuminanceFactor) == 0x000080, "Member 'FSHPostprocessAtmFog::SkyLuminanceFactor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, AerialPespectiveViewDistanceScale) == 0x000090, "Member 'FSHPostprocessAtmFog::AerialPespectiveViewDistanceScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, HeightFogContribution) == 0x000094, "Member 'FSHPostprocessAtmFog::HeightFogContribution' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, TransmittanceMinLightElevationAngle) == 0x000098, "Member 'FSHPostprocessAtmFog::TransmittanceMinLightElevationAngle' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, AerialPerspectiveStartDepth) == 0x00009C, "Member 'FSHPostprocessAtmFog::AerialPerspectiveStartDepth' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, EnableVolumetricClouds) == 0x0000A0, "Member 'FSHPostprocessAtmFog::EnableVolumetricClouds' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, LayerBottomAltitude) == 0x0000A4, "Member 'FSHPostprocessAtmFog::LayerBottomAltitude' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, LayerHeight) == 0x0000A8, "Member 'FSHPostprocessAtmFog::LayerHeight' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, TracingStartMaxDistance) == 0x0000AC, "Member 'FSHPostprocessAtmFog::TracingStartMaxDistance' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, TracingMaxDistance) == 0x0000B0, "Member 'FSHPostprocessAtmFog::TracingMaxDistance' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, bUsePerSampleAtmosphericLightTransmittance) == 0x0000B4, "Member 'FSHPostprocessAtmFog::bUsePerSampleAtmosphericLightTransmittance' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, SkyLightCloudBottomOcclusion) == 0x0000B8, "Member 'FSHPostprocessAtmFog::SkyLightCloudBottomOcclusion' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, ViewSampleCountScale) == 0x0000BC, "Member 'FSHPostprocessAtmFog::ViewSampleCountScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, ReflectionViewSampleCountScale) == 0x0000C0, "Member 'FSHPostprocessAtmFog::ReflectionViewSampleCountScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, ShadowViewSampleCountScale) == 0x0000C4, "Member 'FSHPostprocessAtmFog::ShadowViewSampleCountScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, ShadowReflectionViewSampleCountScale) == 0x0000C8, "Member 'FSHPostprocessAtmFog::ShadowReflectionViewSampleCountScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, ShadowTracingDistance) == 0x0000CC, "Member 'FSHPostprocessAtmFog::ShadowTracingDistance' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, StopTracingTransmittanceThreshold) == 0x0000D0, "Member 'FSHPostprocessAtmFog::StopTracingTransmittanceThreshold' has a wrong offset!");
static_assert(offsetof(FSHPostprocessAtmFog, VCloudsMaterialParams) == 0x0000D8, "Member 'FSHPostprocessAtmFog::VCloudsMaterialParams' has a wrong offset!");

// ScriptStruct PostProcessVolumeEx.SHPostprocessSkyBoxInterpolator
// 0x0018 (0x0018 - 0x0000)
struct FSHPostprocessSkyBoxInterpolator final
{
public:
	class UTexture*                               Cubemap;                                           // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Clouds;                                            // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSHPostprocessSkyBoxInterpolator) == 0x000008, "Wrong alignment on FSHPostprocessSkyBoxInterpolator");
static_assert(sizeof(FSHPostprocessSkyBoxInterpolator) == 0x000018, "Wrong size on FSHPostprocessSkyBoxInterpolator");
static_assert(offsetof(FSHPostprocessSkyBoxInterpolator, Cubemap) == 0x000000, "Member 'FSHPostprocessSkyBoxInterpolator::Cubemap' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBoxInterpolator, Clouds) == 0x000008, "Member 'FSHPostprocessSkyBoxInterpolator::Clouds' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBoxInterpolator, Weight) == 0x000010, "Member 'FSHPostprocessSkyBoxInterpolator::Weight' has a wrong offset!");

// ScriptStruct PostProcessVolumeEx.SHPostprocessSkyBox
// 0x0190 (0x0190 - 0x0000)
struct FSHPostprocessSkyBox final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Orientation;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Use2DClouds;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAtmosphericSky;                                 // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CloudsDensity;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               CloudsRotationFactors;                             // 0x0010(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CloudsWindDirection;                               // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Clouds;                                            // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudsAmbient;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudsDiffuse;                                     // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               Cubemap;                                           // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HDRExponent;                                       // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HDRScale;                                          // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HDRScaleOutside;                                   // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AnimateCubemap;                                    // 0x007C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CubemapWrapDirection;                              // 0x0080(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CubemapWrapStrength;                               // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CubemapDisplaceStrength;                           // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyColor;                                          // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           HorizonColor;                                      // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           HorizonBottomColor;                                // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizonFalloff;                                    // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseMoon;                                           // 0x00D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             MoonTexture;                                       // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MoonColor;                                         // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               MoonPositionAndSize;                               // 0x00F0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseStars;                                          // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StarsIntensity;                                    // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkyLightDirectionFromDirectional;                  // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SkylightDirection;                                 // 0x0120(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunBrightness;                                     // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SunColor;                                          // 0x013C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunHardness;                                       // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunRadius;                                         // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunRimHardness;                                    // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunRimRadius;                                      // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkyBoxOpacity;                                     // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkyBoxCutOutReplace;                               // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           SkyBoxCutOut;                                      // 0x0164(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkyBoxCutOutSmooth;                                // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSHPostprocessSkyBoxInterpolator> Interpolators;                                     // 0x0178(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_188[0x8];                                      // 0x0188(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSHPostprocessSkyBox) == 0x000010, "Wrong alignment on FSHPostprocessSkyBox");
static_assert(sizeof(FSHPostprocessSkyBox) == 0x000190, "Wrong size on FSHPostprocessSkyBox");
static_assert(offsetof(FSHPostprocessSkyBox, Visible) == 0x000000, "Member 'FSHPostprocessSkyBox::Visible' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, Orientation) == 0x000004, "Member 'FSHPostprocessSkyBox::Orientation' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, Use2DClouds) == 0x000008, "Member 'FSHPostprocessSkyBox::Use2DClouds' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, UseAtmosphericSky) == 0x000009, "Member 'FSHPostprocessSkyBox::UseAtmosphericSky' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, CloudsDensity) == 0x00000C, "Member 'FSHPostprocessSkyBox::CloudsDensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, CloudsRotationFactors) == 0x000010, "Member 'FSHPostprocessSkyBox::CloudsRotationFactors' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, CloudsWindDirection) == 0x000030, "Member 'FSHPostprocessSkyBox::CloudsWindDirection' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, Clouds) == 0x000040, "Member 'FSHPostprocessSkyBox::Clouds' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, CloudsAmbient) == 0x000048, "Member 'FSHPostprocessSkyBox::CloudsAmbient' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, CloudsDiffuse) == 0x000058, "Member 'FSHPostprocessSkyBox::CloudsDiffuse' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, Cubemap) == 0x000068, "Member 'FSHPostprocessSkyBox::Cubemap' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, HDRExponent) == 0x000070, "Member 'FSHPostprocessSkyBox::HDRExponent' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, HDRScale) == 0x000074, "Member 'FSHPostprocessSkyBox::HDRScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, HDRScaleOutside) == 0x000078, "Member 'FSHPostprocessSkyBox::HDRScaleOutside' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, AnimateCubemap) == 0x00007C, "Member 'FSHPostprocessSkyBox::AnimateCubemap' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, CubemapWrapDirection) == 0x000080, "Member 'FSHPostprocessSkyBox::CubemapWrapDirection' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, CubemapWrapStrength) == 0x000098, "Member 'FSHPostprocessSkyBox::CubemapWrapStrength' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, CubemapDisplaceStrength) == 0x00009C, "Member 'FSHPostprocessSkyBox::CubemapDisplaceStrength' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, SkyColor) == 0x0000A0, "Member 'FSHPostprocessSkyBox::SkyColor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, HorizonColor) == 0x0000B0, "Member 'FSHPostprocessSkyBox::HorizonColor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, HorizonBottomColor) == 0x0000C0, "Member 'FSHPostprocessSkyBox::HorizonBottomColor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, HorizonFalloff) == 0x0000D0, "Member 'FSHPostprocessSkyBox::HorizonFalloff' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, UseMoon) == 0x0000D4, "Member 'FSHPostprocessSkyBox::UseMoon' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, MoonTexture) == 0x0000D8, "Member 'FSHPostprocessSkyBox::MoonTexture' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, MoonColor) == 0x0000E0, "Member 'FSHPostprocessSkyBox::MoonColor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, MoonPositionAndSize) == 0x0000F0, "Member 'FSHPostprocessSkyBox::MoonPositionAndSize' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, UseStars) == 0x000110, "Member 'FSHPostprocessSkyBox::UseStars' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, StarsIntensity) == 0x000114, "Member 'FSHPostprocessSkyBox::StarsIntensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, SkyLightDirectionFromDirectional) == 0x000118, "Member 'FSHPostprocessSkyBox::SkyLightDirectionFromDirectional' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, SkylightDirection) == 0x000120, "Member 'FSHPostprocessSkyBox::SkylightDirection' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, SunBrightness) == 0x000138, "Member 'FSHPostprocessSkyBox::SunBrightness' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, SunColor) == 0x00013C, "Member 'FSHPostprocessSkyBox::SunColor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, SunHardness) == 0x00014C, "Member 'FSHPostprocessSkyBox::SunHardness' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, SunRadius) == 0x000150, "Member 'FSHPostprocessSkyBox::SunRadius' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, SunRimHardness) == 0x000154, "Member 'FSHPostprocessSkyBox::SunRimHardness' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, SunRimRadius) == 0x000158, "Member 'FSHPostprocessSkyBox::SunRimRadius' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, SkyBoxOpacity) == 0x00015C, "Member 'FSHPostprocessSkyBox::SkyBoxOpacity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, SkyBoxCutOutReplace) == 0x000160, "Member 'FSHPostprocessSkyBox::SkyBoxCutOutReplace' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, SkyBoxCutOut) == 0x000164, "Member 'FSHPostprocessSkyBox::SkyBoxCutOut' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, SkyBoxCutOutSmooth) == 0x000174, "Member 'FSHPostprocessSkyBox::SkyBoxCutOutSmooth' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyBox, Interpolators) == 0x000178, "Member 'FSHPostprocessSkyBox::Interpolators' has a wrong offset!");

// ScriptStruct PostProcessVolumeEx.SHPostprocessSkyLightInterpolator
// 0x0010 (0x0010 - 0x0000)
struct FSHPostprocessSkyLightInterpolator final
{
public:
	class UTextureCube*                           Cubemap;                                           // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSHPostprocessSkyLightInterpolator) == 0x000008, "Wrong alignment on FSHPostprocessSkyLightInterpolator");
static_assert(sizeof(FSHPostprocessSkyLightInterpolator) == 0x000010, "Wrong size on FSHPostprocessSkyLightInterpolator");
static_assert(offsetof(FSHPostprocessSkyLightInterpolator, Cubemap) == 0x000000, "Member 'FSHPostprocessSkyLightInterpolator::Cubemap' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightInterpolator, Weight) == 0x000008, "Member 'FSHPostprocessSkyLightInterpolator::Weight' has a wrong offset!");

// ScriptStruct PostProcessVolumeEx.SHPostprocessSkyLight
// 0x0090 (0x0090 - 0x0000)
struct FSHPostprocessSkyLight final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkyLightSourceType                           SourceType;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureCube*                           Cubemap;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceCubemapAngle;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkyLightCaptureFrequency                     RecaptureFrequency;                                // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkyDistanceThreshold;                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IndirectLightIntensity;                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricScatteringIntensity;                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightColor;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LowerHemisphereColor;                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLowerHemisphereIsBlack;                           // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         CastShadows : 1;                                   // 0x004C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          CastRayTracingShadows;                             // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RayTracingShadowsSamplesCount;                     // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAffectTranslucentLighting : 1;                    // 0x0058(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTransmission : 1;                                 // 0x0058(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OcclusionMaxDistance;                              // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Contrast;                                          // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionExponent;                                 // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinOcclusion;                                      // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 OcclusionTint;                                     // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOcclusionCombineMode                         OcclusionCombineMode;                              // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AOScale;                                           // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LumenBiasFactor;                                   // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSHPostprocessSkyLightInterpolator> Interpolators;                                     // 0x0080(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSHPostprocessSkyLight) == 0x000008, "Wrong alignment on FSHPostprocessSkyLight");
static_assert(sizeof(FSHPostprocessSkyLight) == 0x000090, "Wrong size on FSHPostprocessSkyLight");
static_assert(offsetof(FSHPostprocessSkyLight, Visible) == 0x000000, "Member 'FSHPostprocessSkyLight::Visible' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLight, SourceType) == 0x000001, "Member 'FSHPostprocessSkyLight::SourceType' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLight, Cubemap) == 0x000008, "Member 'FSHPostprocessSkyLight::Cubemap' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLight, SourceCubemapAngle) == 0x000010, "Member 'FSHPostprocessSkyLight::SourceCubemapAngle' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLight, RecaptureFrequency) == 0x000014, "Member 'FSHPostprocessSkyLight::RecaptureFrequency' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLight, SkyDistanceThreshold) == 0x000018, "Member 'FSHPostprocessSkyLight::SkyDistanceThreshold' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLight, Intensity) == 0x00001C, "Member 'FSHPostprocessSkyLight::Intensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLight, IndirectLightIntensity) == 0x000020, "Member 'FSHPostprocessSkyLight::IndirectLightIntensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLight, VolumetricScatteringIntensity) == 0x000024, "Member 'FSHPostprocessSkyLight::VolumetricScatteringIntensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLight, LightColor) == 0x000028, "Member 'FSHPostprocessSkyLight::LightColor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLight, LowerHemisphereColor) == 0x000038, "Member 'FSHPostprocessSkyLight::LowerHemisphereColor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLight, bLowerHemisphereIsBlack) == 0x000048, "Member 'FSHPostprocessSkyLight::bLowerHemisphereIsBlack' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLight, CastRayTracingShadows) == 0x000050, "Member 'FSHPostprocessSkyLight::CastRayTracingShadows' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLight, RayTracingShadowsSamplesCount) == 0x000054, "Member 'FSHPostprocessSkyLight::RayTracingShadowsSamplesCount' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLight, OcclusionMaxDistance) == 0x00005C, "Member 'FSHPostprocessSkyLight::OcclusionMaxDistance' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLight, Contrast) == 0x000060, "Member 'FSHPostprocessSkyLight::Contrast' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLight, OcclusionExponent) == 0x000064, "Member 'FSHPostprocessSkyLight::OcclusionExponent' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLight, MinOcclusion) == 0x000068, "Member 'FSHPostprocessSkyLight::MinOcclusion' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLight, OcclusionTint) == 0x00006C, "Member 'FSHPostprocessSkyLight::OcclusionTint' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLight, OcclusionCombineMode) == 0x000070, "Member 'FSHPostprocessSkyLight::OcclusionCombineMode' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLight, AOScale) == 0x000074, "Member 'FSHPostprocessSkyLight::AOScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLight, LumenBiasFactor) == 0x000078, "Member 'FSHPostprocessSkyLight::LumenBiasFactor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLight, Interpolators) == 0x000080, "Member 'FSHPostprocessSkyLight::Interpolators' has a wrong offset!");

// ScriptStruct PostProcessVolumeEx.SHPostprocessMagicLightData
// 0x0024 (0x0024 - 0x0000)
struct FSHPostprocessMagicLightData final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Offset;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Exponent;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LuminanceLERP;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LuminanceMAX;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSHPostprocessMagicLightData) == 0x000004, "Wrong alignment on FSHPostprocessMagicLightData");
static_assert(sizeof(FSHPostprocessMagicLightData) == 0x000024, "Wrong size on FSHPostprocessMagicLightData");
static_assert(offsetof(FSHPostprocessMagicLightData, Color) == 0x000000, "Member 'FSHPostprocessMagicLightData::Color' has a wrong offset!");
static_assert(offsetof(FSHPostprocessMagicLightData, Offset) == 0x000010, "Member 'FSHPostprocessMagicLightData::Offset' has a wrong offset!");
static_assert(offsetof(FSHPostprocessMagicLightData, Radius) == 0x000014, "Member 'FSHPostprocessMagicLightData::Radius' has a wrong offset!");
static_assert(offsetof(FSHPostprocessMagicLightData, Exponent) == 0x000018, "Member 'FSHPostprocessMagicLightData::Exponent' has a wrong offset!");
static_assert(offsetof(FSHPostprocessMagicLightData, LuminanceLERP) == 0x00001C, "Member 'FSHPostprocessMagicLightData::LuminanceLERP' has a wrong offset!");
static_assert(offsetof(FSHPostprocessMagicLightData, LuminanceMAX) == 0x000020, "Member 'FSHPostprocessMagicLightData::LuminanceMAX' has a wrong offset!");

// ScriptStruct PostProcessVolumeEx.SHPostprocessDirectionalLight
// 0x00F8 (0x00F8 - 0x0000)
struct FSHPostprocessDirectionalLight final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAtmosphereDLightVisLQ                        VisibleInLowQuality;                               // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Direction;                                         // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IndirectLightingIntensity;                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricScatteringIntensity;                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 LightColor;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CastShadows;                                       // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAtmosphereDLightVisLQ                        CastShadowsInLowQuality;                           // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CastRayTracingShadows;                             // 0x0032(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RayTracingShadowsSamplesCount;                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowSharpen;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightSourceAngle;                                  // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightSourceSoftAngle;                              // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContactShadowLength;                               // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Temperature;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTemperature;                                   // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpecularScale;                                     // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowBias;                                        // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESunShadowsQuality                            ShadowsQuality;                                    // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CascadeTransitionFraction;                         // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CascadeDistributionExponent;                       // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DynamicShadowDistanceMovableLight;                 // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectDynamicIndirectLighting;                    // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableLightShaftOcclusion;                        // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OcclusionMaskDarkness;                             // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionDepthRange;                               // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableLightShaftBloom;                            // 0x0074(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BloomScale;                                        // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomThreshold;                                    // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomMaxBrightness;                                // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 BloomTint;                                         // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightShaftOverrideDirection;                       // 0x0088(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtmosphereSunLight;                               // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AtmosphereSunLightIndex;                           // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AtmosphereSunDiskColorScale;                       // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPerPixelAtmosphereTransmittance;                  // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastShadowsOnClouds;                              // 0x00B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastShadowsOnAtmosphere;                          // 0x00BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastCloudShadows;                                 // 0x00BB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowStrength;                               // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowOnAtmosphereStrength;                   // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowOnSurfaceStrength;                      // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowDepthBias;                              // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowExtent;                                 // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowMapResolutionScale;                     // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowRaySampleCountScale;                    // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudScatteredLuminanceScale;                      // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FakeAmbientIntensity;                              // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 FakeAmbientColor;                                  // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FakeAmbientFromBottom;                             // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DayNightFactor;                                    // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSHPostprocessDirectionalLight) == 0x000008, "Wrong alignment on FSHPostprocessDirectionalLight");
static_assert(sizeof(FSHPostprocessDirectionalLight) == 0x0000F8, "Wrong size on FSHPostprocessDirectionalLight");
static_assert(offsetof(FSHPostprocessDirectionalLight, Visible) == 0x000000, "Member 'FSHPostprocessDirectionalLight::Visible' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, VisibleInLowQuality) == 0x000001, "Member 'FSHPostprocessDirectionalLight::VisibleInLowQuality' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, Direction) == 0x000008, "Member 'FSHPostprocessDirectionalLight::Direction' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, Intensity) == 0x000020, "Member 'FSHPostprocessDirectionalLight::Intensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, IndirectLightingIntensity) == 0x000024, "Member 'FSHPostprocessDirectionalLight::IndirectLightingIntensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, VolumetricScatteringIntensity) == 0x000028, "Member 'FSHPostprocessDirectionalLight::VolumetricScatteringIntensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, LightColor) == 0x00002C, "Member 'FSHPostprocessDirectionalLight::LightColor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, CastShadows) == 0x000030, "Member 'FSHPostprocessDirectionalLight::CastShadows' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, CastShadowsInLowQuality) == 0x000031, "Member 'FSHPostprocessDirectionalLight::CastShadowsInLowQuality' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, CastRayTracingShadows) == 0x000032, "Member 'FSHPostprocessDirectionalLight::CastRayTracingShadows' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, RayTracingShadowsSamplesCount) == 0x000034, "Member 'FSHPostprocessDirectionalLight::RayTracingShadowsSamplesCount' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, ShadowSharpen) == 0x000038, "Member 'FSHPostprocessDirectionalLight::ShadowSharpen' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, LightSourceAngle) == 0x00003C, "Member 'FSHPostprocessDirectionalLight::LightSourceAngle' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, LightSourceSoftAngle) == 0x000040, "Member 'FSHPostprocessDirectionalLight::LightSourceSoftAngle' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, ContactShadowLength) == 0x000044, "Member 'FSHPostprocessDirectionalLight::ContactShadowLength' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, Temperature) == 0x000048, "Member 'FSHPostprocessDirectionalLight::Temperature' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, bUseTemperature) == 0x00004C, "Member 'FSHPostprocessDirectionalLight::bUseTemperature' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, SpecularScale) == 0x000050, "Member 'FSHPostprocessDirectionalLight::SpecularScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, ShadowBias) == 0x000054, "Member 'FSHPostprocessDirectionalLight::ShadowBias' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, ShadowsQuality) == 0x000058, "Member 'FSHPostprocessDirectionalLight::ShadowsQuality' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, CascadeTransitionFraction) == 0x00005C, "Member 'FSHPostprocessDirectionalLight::CascadeTransitionFraction' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, CascadeDistributionExponent) == 0x000060, "Member 'FSHPostprocessDirectionalLight::CascadeDistributionExponent' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, DynamicShadowDistanceMovableLight) == 0x000064, "Member 'FSHPostprocessDirectionalLight::DynamicShadowDistanceMovableLight' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, bAffectDynamicIndirectLighting) == 0x000068, "Member 'FSHPostprocessDirectionalLight::bAffectDynamicIndirectLighting' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, bEnableLightShaftOcclusion) == 0x000069, "Member 'FSHPostprocessDirectionalLight::bEnableLightShaftOcclusion' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, OcclusionMaskDarkness) == 0x00006C, "Member 'FSHPostprocessDirectionalLight::OcclusionMaskDarkness' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, OcclusionDepthRange) == 0x000070, "Member 'FSHPostprocessDirectionalLight::OcclusionDepthRange' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, bEnableLightShaftBloom) == 0x000074, "Member 'FSHPostprocessDirectionalLight::bEnableLightShaftBloom' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, BloomScale) == 0x000078, "Member 'FSHPostprocessDirectionalLight::BloomScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, BloomThreshold) == 0x00007C, "Member 'FSHPostprocessDirectionalLight::BloomThreshold' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, BloomMaxBrightness) == 0x000080, "Member 'FSHPostprocessDirectionalLight::BloomMaxBrightness' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, BloomTint) == 0x000084, "Member 'FSHPostprocessDirectionalLight::BloomTint' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, LightShaftOverrideDirection) == 0x000088, "Member 'FSHPostprocessDirectionalLight::LightShaftOverrideDirection' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, bAtmosphereSunLight) == 0x0000A0, "Member 'FSHPostprocessDirectionalLight::bAtmosphereSunLight' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, AtmosphereSunLightIndex) == 0x0000A4, "Member 'FSHPostprocessDirectionalLight::AtmosphereSunLightIndex' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, AtmosphereSunDiskColorScale) == 0x0000A8, "Member 'FSHPostprocessDirectionalLight::AtmosphereSunDiskColorScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, bPerPixelAtmosphereTransmittance) == 0x0000B8, "Member 'FSHPostprocessDirectionalLight::bPerPixelAtmosphereTransmittance' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, bCastShadowsOnClouds) == 0x0000B9, "Member 'FSHPostprocessDirectionalLight::bCastShadowsOnClouds' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, bCastShadowsOnAtmosphere) == 0x0000BA, "Member 'FSHPostprocessDirectionalLight::bCastShadowsOnAtmosphere' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, bCastCloudShadows) == 0x0000BB, "Member 'FSHPostprocessDirectionalLight::bCastCloudShadows' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, CloudShadowStrength) == 0x0000BC, "Member 'FSHPostprocessDirectionalLight::CloudShadowStrength' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, CloudShadowOnAtmosphereStrength) == 0x0000C0, "Member 'FSHPostprocessDirectionalLight::CloudShadowOnAtmosphereStrength' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, CloudShadowOnSurfaceStrength) == 0x0000C4, "Member 'FSHPostprocessDirectionalLight::CloudShadowOnSurfaceStrength' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, CloudShadowDepthBias) == 0x0000C8, "Member 'FSHPostprocessDirectionalLight::CloudShadowDepthBias' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, CloudShadowExtent) == 0x0000CC, "Member 'FSHPostprocessDirectionalLight::CloudShadowExtent' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, CloudShadowMapResolutionScale) == 0x0000D0, "Member 'FSHPostprocessDirectionalLight::CloudShadowMapResolutionScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, CloudShadowRaySampleCountScale) == 0x0000D4, "Member 'FSHPostprocessDirectionalLight::CloudShadowRaySampleCountScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, CloudScatteredLuminanceScale) == 0x0000D8, "Member 'FSHPostprocessDirectionalLight::CloudScatteredLuminanceScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, FakeAmbientIntensity) == 0x0000E8, "Member 'FSHPostprocessDirectionalLight::FakeAmbientIntensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, FakeAmbientColor) == 0x0000EC, "Member 'FSHPostprocessDirectionalLight::FakeAmbientColor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, FakeAmbientFromBottom) == 0x0000F0, "Member 'FSHPostprocessDirectionalLight::FakeAmbientFromBottom' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLight, DayNightFactor) == 0x0000F4, "Member 'FSHPostprocessDirectionalLight::DayNightFactor' has a wrong offset!");

// ScriptStruct PostProcessVolumeEx.SHPostprocessRoughnessMetalicityCtrl
// 0x0048 (0x0048 - 0x0000)
struct FSHPostprocessRoughnessMetalicityCtrl final
{
public:
	EAtmosphereMood                               Mood;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RoughnessScale;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RoughnessBias;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RoughnessTerrainScale;                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RoughnessTerrainBias;                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MetallicityScale;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MetallicityBias;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MetallicityTerrainScale;                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MetallicityTerrainBias;                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RaytracingCullDistance;                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RaytracingCullEnable;                              // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LumenReflectionsDownsampleFactor;                  // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LumenReflectionsDownsampleFactorHQ;                // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRoughnessToTrace;                               // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeAdpTrnsInitialPower;                            // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeAdpTrnsTurningPoint;                            // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeAdpTrnsPower;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeAdpTrnsInfluence;                               // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSHPostprocessRoughnessMetalicityCtrl) == 0x000004, "Wrong alignment on FSHPostprocessRoughnessMetalicityCtrl");
static_assert(sizeof(FSHPostprocessRoughnessMetalicityCtrl) == 0x000048, "Wrong size on FSHPostprocessRoughnessMetalicityCtrl");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrl, Mood) == 0x000000, "Member 'FSHPostprocessRoughnessMetalicityCtrl::Mood' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrl, RoughnessScale) == 0x000004, "Member 'FSHPostprocessRoughnessMetalicityCtrl::RoughnessScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrl, RoughnessBias) == 0x000008, "Member 'FSHPostprocessRoughnessMetalicityCtrl::RoughnessBias' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrl, RoughnessTerrainScale) == 0x00000C, "Member 'FSHPostprocessRoughnessMetalicityCtrl::RoughnessTerrainScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrl, RoughnessTerrainBias) == 0x000010, "Member 'FSHPostprocessRoughnessMetalicityCtrl::RoughnessTerrainBias' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrl, MetallicityScale) == 0x000014, "Member 'FSHPostprocessRoughnessMetalicityCtrl::MetallicityScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrl, MetallicityBias) == 0x000018, "Member 'FSHPostprocessRoughnessMetalicityCtrl::MetallicityBias' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrl, MetallicityTerrainScale) == 0x00001C, "Member 'FSHPostprocessRoughnessMetalicityCtrl::MetallicityTerrainScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrl, MetallicityTerrainBias) == 0x000020, "Member 'FSHPostprocessRoughnessMetalicityCtrl::MetallicityTerrainBias' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrl, RaytracingCullDistance) == 0x000024, "Member 'FSHPostprocessRoughnessMetalicityCtrl::RaytracingCullDistance' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrl, RaytracingCullEnable) == 0x000028, "Member 'FSHPostprocessRoughnessMetalicityCtrl::RaytracingCullEnable' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrl, LumenReflectionsDownsampleFactor) == 0x00002C, "Member 'FSHPostprocessRoughnessMetalicityCtrl::LumenReflectionsDownsampleFactor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrl, LumenReflectionsDownsampleFactorHQ) == 0x000030, "Member 'FSHPostprocessRoughnessMetalicityCtrl::LumenReflectionsDownsampleFactorHQ' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrl, MaxRoughnessToTrace) == 0x000034, "Member 'FSHPostprocessRoughnessMetalicityCtrl::MaxRoughnessToTrace' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrl, EyeAdpTrnsInitialPower) == 0x000038, "Member 'FSHPostprocessRoughnessMetalicityCtrl::EyeAdpTrnsInitialPower' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrl, EyeAdpTrnsTurningPoint) == 0x00003C, "Member 'FSHPostprocessRoughnessMetalicityCtrl::EyeAdpTrnsTurningPoint' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrl, EyeAdpTrnsPower) == 0x000040, "Member 'FSHPostprocessRoughnessMetalicityCtrl::EyeAdpTrnsPower' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrl, EyeAdpTrnsInfluence) == 0x000044, "Member 'FSHPostprocessRoughnessMetalicityCtrl::EyeAdpTrnsInfluence' has a wrong offset!");

// ScriptStruct PostProcessVolumeEx.SHPostprocessLensDistortionData
// 0x0018 (0x0018 - 0x0000)
struct FSHPostprocessLensDistortionData final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntensityX;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntensityY;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CenterX;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CenterY;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSHPostprocessLensDistortionData) == 0x000004, "Wrong alignment on FSHPostprocessLensDistortionData");
static_assert(sizeof(FSHPostprocessLensDistortionData) == 0x000018, "Wrong size on FSHPostprocessLensDistortionData");
static_assert(offsetof(FSHPostprocessLensDistortionData, Intensity) == 0x000000, "Member 'FSHPostprocessLensDistortionData::Intensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessLensDistortionData, IntensityX) == 0x000004, "Member 'FSHPostprocessLensDistortionData::IntensityX' has a wrong offset!");
static_assert(offsetof(FSHPostprocessLensDistortionData, IntensityY) == 0x000008, "Member 'FSHPostprocessLensDistortionData::IntensityY' has a wrong offset!");
static_assert(offsetof(FSHPostprocessLensDistortionData, CenterX) == 0x00000C, "Member 'FSHPostprocessLensDistortionData::CenterX' has a wrong offset!");
static_assert(offsetof(FSHPostprocessLensDistortionData, CenterY) == 0x000010, "Member 'FSHPostprocessLensDistortionData::CenterY' has a wrong offset!");
static_assert(offsetof(FSHPostprocessLensDistortionData, Scale) == 0x000014, "Member 'FSHPostprocessLensDistortionData::Scale' has a wrong offset!");

// ScriptStruct PostProcessVolumeEx.SHPostprocessWindData
// 0x0028 (0x0028 - 0x0000)
struct FSHPostprocessWindData final
{
public:
	float                                         BarkWindIntensity;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            BarkWindIntensityCurve;                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BarkWindScale;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeafsWindIntensity;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            LeafsWindIntensityCurve;                           // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeafsWindScale;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindDirection;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSHPostprocessWindData) == 0x000008, "Wrong alignment on FSHPostprocessWindData");
static_assert(sizeof(FSHPostprocessWindData) == 0x000028, "Wrong size on FSHPostprocessWindData");
static_assert(offsetof(FSHPostprocessWindData, BarkWindIntensity) == 0x000000, "Member 'FSHPostprocessWindData::BarkWindIntensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessWindData, BarkWindIntensityCurve) == 0x000008, "Member 'FSHPostprocessWindData::BarkWindIntensityCurve' has a wrong offset!");
static_assert(offsetof(FSHPostprocessWindData, BarkWindScale) == 0x000010, "Member 'FSHPostprocessWindData::BarkWindScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessWindData, LeafsWindIntensity) == 0x000014, "Member 'FSHPostprocessWindData::LeafsWindIntensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessWindData, LeafsWindIntensityCurve) == 0x000018, "Member 'FSHPostprocessWindData::LeafsWindIntensityCurve' has a wrong offset!");
static_assert(offsetof(FSHPostprocessWindData, LeafsWindScale) == 0x000020, "Member 'FSHPostprocessWindData::LeafsWindScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessWindData, WindDirection) == 0x000024, "Member 'FSHPostprocessWindData::WindDirection' has a wrong offset!");

// ScriptStruct PostProcessVolumeEx.AtmospherePresetData
// 0x0728 (0x0730 - 0x0008)
struct FAtmospherePresetData : public FTableRowBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   Settings;                                          // 0x0010(0x0700)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          AutoDOFEnable;                                     // 0x0710(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_711[0x3];                                      // 0x0711(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoDOFLimitMin;                                   // 0x0714(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoDOFLimitMax;                                   // 0x0718(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoDOFInterpolationSpeed;                         // 0x071C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LQAutoDOFEnable;                                   // 0x0720(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_721[0x3];                                      // 0x0721(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LQAutoDOFLimitMin;                                 // 0x0724(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LQAutoDOFLimitMax;                                 // 0x0728(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LQAutoDOFInterpolationSpeed;                       // 0x072C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtmospherePresetData) == 0x000010, "Wrong alignment on FAtmospherePresetData");
static_assert(sizeof(FAtmospherePresetData) == 0x000730, "Wrong size on FAtmospherePresetData");
static_assert(offsetof(FAtmospherePresetData, Settings) == 0x000010, "Member 'FAtmospherePresetData::Settings' has a wrong offset!");
static_assert(offsetof(FAtmospherePresetData, AutoDOFEnable) == 0x000710, "Member 'FAtmospherePresetData::AutoDOFEnable' has a wrong offset!");
static_assert(offsetof(FAtmospherePresetData, AutoDOFLimitMin) == 0x000714, "Member 'FAtmospherePresetData::AutoDOFLimitMin' has a wrong offset!");
static_assert(offsetof(FAtmospherePresetData, AutoDOFLimitMax) == 0x000718, "Member 'FAtmospherePresetData::AutoDOFLimitMax' has a wrong offset!");
static_assert(offsetof(FAtmospherePresetData, AutoDOFInterpolationSpeed) == 0x00071C, "Member 'FAtmospherePresetData::AutoDOFInterpolationSpeed' has a wrong offset!");
static_assert(offsetof(FAtmospherePresetData, LQAutoDOFEnable) == 0x000720, "Member 'FAtmospherePresetData::LQAutoDOFEnable' has a wrong offset!");
static_assert(offsetof(FAtmospherePresetData, LQAutoDOFLimitMin) == 0x000724, "Member 'FAtmospherePresetData::LQAutoDOFLimitMin' has a wrong offset!");
static_assert(offsetof(FAtmospherePresetData, LQAutoDOFLimitMax) == 0x000728, "Member 'FAtmospherePresetData::LQAutoDOFLimitMax' has a wrong offset!");
static_assert(offsetof(FAtmospherePresetData, LQAutoDOFInterpolationSpeed) == 0x00072C, "Member 'FAtmospherePresetData::LQAutoDOFInterpolationSpeed' has a wrong offset!");

// ScriptStruct PostProcessVolumeEx.AtmospherePresetDataEx
// 0x06A0 (0x0DD0 - 0x0730)
struct FAtmospherePresetDataEx final : public FAtmospherePresetData
{
public:
	struct FSHPostprocessExpFog                   ExponentialFogSettings;                            // 0x0730(0x00E0)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSHPostprocessAtmFog                   AtmosphericFogSettings;                            // 0x0810(0x0198)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSHPostprocessSkyLight                 SkyLightSettings;                                  // 0x09A8(0x0090)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSHPostprocessDirectionalLight         DirectionalLightSettings;                          // 0x0A38(0x00F8)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSHPostprocessSkyBox                   SkyBoxSettings;                                    // 0x0B30(0x0190)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSHPostprocessRoughnessMetalicityCtrl  RoughnessMetallicityCtrl;                          // 0x0CC0(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSHPostprocessLevelDataCtrl            LevelDataCtrl;                                     // 0x0D08(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSHPostprocessMagicLightData           MagicLightCtrl;                                    // 0x0D60(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSHPostprocessLensDistortionData       LensDistortion;                                    // 0x0D84(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9C[0x4];                                      // 0x0D9C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSHPostprocessWindData                 Wind;                                              // 0x0DA0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC8[0x8];                                      // 0x0DC8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAtmospherePresetDataEx) == 0x000010, "Wrong alignment on FAtmospherePresetDataEx");
static_assert(sizeof(FAtmospherePresetDataEx) == 0x000DD0, "Wrong size on FAtmospherePresetDataEx");
static_assert(offsetof(FAtmospherePresetDataEx, ExponentialFogSettings) == 0x000730, "Member 'FAtmospherePresetDataEx::ExponentialFogSettings' has a wrong offset!");
static_assert(offsetof(FAtmospherePresetDataEx, AtmosphericFogSettings) == 0x000810, "Member 'FAtmospherePresetDataEx::AtmosphericFogSettings' has a wrong offset!");
static_assert(offsetof(FAtmospherePresetDataEx, SkyLightSettings) == 0x0009A8, "Member 'FAtmospherePresetDataEx::SkyLightSettings' has a wrong offset!");
static_assert(offsetof(FAtmospherePresetDataEx, DirectionalLightSettings) == 0x000A38, "Member 'FAtmospherePresetDataEx::DirectionalLightSettings' has a wrong offset!");
static_assert(offsetof(FAtmospherePresetDataEx, SkyBoxSettings) == 0x000B30, "Member 'FAtmospherePresetDataEx::SkyBoxSettings' has a wrong offset!");
static_assert(offsetof(FAtmospherePresetDataEx, RoughnessMetallicityCtrl) == 0x000CC0, "Member 'FAtmospherePresetDataEx::RoughnessMetallicityCtrl' has a wrong offset!");
static_assert(offsetof(FAtmospherePresetDataEx, LevelDataCtrl) == 0x000D08, "Member 'FAtmospherePresetDataEx::LevelDataCtrl' has a wrong offset!");
static_assert(offsetof(FAtmospherePresetDataEx, MagicLightCtrl) == 0x000D60, "Member 'FAtmospherePresetDataEx::MagicLightCtrl' has a wrong offset!");
static_assert(offsetof(FAtmospherePresetDataEx, LensDistortion) == 0x000D84, "Member 'FAtmospherePresetDataEx::LensDistortion' has a wrong offset!");
static_assert(offsetof(FAtmospherePresetDataEx, Wind) == 0x000DA0, "Member 'FAtmospherePresetDataEx::Wind' has a wrong offset!");

// ScriptStruct PostProcessVolumeEx.AtmosphereDOFFactor
// 0x000C (0x000C - 0x0000)
struct FAtmosphereDOFFactor final
{
public:
	struct FInt32Point                            Resolution;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Factor;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtmosphereDOFFactor) == 0x000004, "Wrong alignment on FAtmosphereDOFFactor");
static_assert(sizeof(FAtmosphereDOFFactor) == 0x00000C, "Wrong size on FAtmosphereDOFFactor");
static_assert(offsetof(FAtmosphereDOFFactor, Resolution) == 0x000000, "Member 'FAtmosphereDOFFactor::Resolution' has a wrong offset!");
static_assert(offsetof(FAtmosphereDOFFactor, Factor) == 0x000008, "Member 'FAtmosphereDOFFactor::Factor' has a wrong offset!");

// ScriptStruct PostProcessVolumeEx.AtmoCtrlMaterialInstanceDynamicCached
// 0x0040 (0x0040 - 0x0000)
struct FAtmoCtrlMaterialInstanceDynamicCached final
{
public:
	class UMaterialInstanceDynamic*               Material;                                          // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8[0x38];                                       // 0x0008(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAtmoCtrlMaterialInstanceDynamicCached) == 0x000008, "Wrong alignment on FAtmoCtrlMaterialInstanceDynamicCached");
static_assert(sizeof(FAtmoCtrlMaterialInstanceDynamicCached) == 0x000040, "Wrong size on FAtmoCtrlMaterialInstanceDynamicCached");
static_assert(offsetof(FAtmoCtrlMaterialInstanceDynamicCached, Material) == 0x000000, "Member 'FAtmoCtrlMaterialInstanceDynamicCached::Material' has a wrong offset!");

// ScriptStruct PostProcessVolumeEx.SHPostprocessExpFogOverride
// 0x00F0 (0x00F0 - 0x0000)
struct FSHPostprocessExpFogOverride final
{
public:
	bool                                          bOverride_Visible;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_FogDensity;                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_FogInscatteringColor;                    // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_FogHeightFalloff;                        // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_FogMaxOpacity;                           // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_StartDistance;                           // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_FogCutoffDistance;                       // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SecondFogDensity;                        // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SecondFogHeightFalloff;                  // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SecondFogHeightOffset;                   // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_DirectionalInscatteringExponent;         // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_DirectionalInscatteringStartDistance;    // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_DirectionalInscatteringColor;            // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_bEnableVolumetricFog;                    // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_VolumetricFogScatteringDistribution;     // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_VolumetricFogAlbedo;                     // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_VolumetricFogEmissive;                   // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_VolumetricFogExtinctionScale;            // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_VolumetricFogDistance;                   // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_VolumetricFogStaticLightingScatteringIntensity; // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_bOverrideLightColorsWithFogInscatteringColors; // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_HeightIsCameraRelative;                  // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_WorldOriginHeightOffset;                 // 0x0016(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_FogDarkening;                            // 0x0017(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_FogDarkeningTint;                        // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_FogDarkeningExponent;                    // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_FogDarkeningDepthThreshold;              // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_FogDarkeningDepthThresholdFade;          // 0x001B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_FogDarkeningFadeBias;                    // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_FogDarkeningFadeExponent;                // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_FogDarkeningFadeScale;                   // 0x001E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_FogDistanceScale;                        // 0x001F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_FogContrast;                             // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_FogNoiseScaleMultiplier;                 // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_FogSpeedMultiplier;                      // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_FogIntensityMultiplier;                  // 0x0023(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_FogTint;                                 // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Visible;                                           // 0x0025(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FogDensity;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogInscatteringColor;                              // 0x002C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogHeightFalloff;                                  // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogMaxOpacity;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistance;                                     // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogCutoffDistance;                                 // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondFogDensity;                                  // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondFogHeightFalloff;                            // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondFogHeightOffset;                             // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringExponent;                   // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringStartDistance;              // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DirectionalInscatteringColor;                      // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableVolumetricFog;                              // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumetricFogScatteringDistribution;               // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 VolumetricFogAlbedo;                               // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           VolumetricFogEmissive;                             // 0x007C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogExtinctionScale;                      // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogDistance;                             // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogStaticLightingScatteringIntensity;    // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideLightColorsWithFogInscatteringColors;     // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HeightIsCameraRelative;                            // 0x0099(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x2];                                       // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WorldOriginHeightOffset;                           // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FogDarkening;                                      // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           FogDarkeningTint;                                  // 0x00A4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogDarkeningExponent;                              // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogDarkeningDepthThreshold;                        // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogDarkeningDepthThresholdFade;                    // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogDarkeningFadeBias;                              // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogDarkeningFadeExponent;                          // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogDarkeningFadeScale;                             // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogDistanceScale;                                  // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogContrast;                                       // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogNoiseScaleMultiplier;                           // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogSpeedMultiplier;                                // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogIntensityMultiplier;                            // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogTint;                                           // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSHPostprocessExpFogOverride) == 0x000004, "Wrong alignment on FSHPostprocessExpFogOverride");
static_assert(sizeof(FSHPostprocessExpFogOverride) == 0x0000F0, "Wrong size on FSHPostprocessExpFogOverride");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_Visible) == 0x000000, "Member 'FSHPostprocessExpFogOverride::bOverride_Visible' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_FogDensity) == 0x000001, "Member 'FSHPostprocessExpFogOverride::bOverride_FogDensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_FogInscatteringColor) == 0x000002, "Member 'FSHPostprocessExpFogOverride::bOverride_FogInscatteringColor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_FogHeightFalloff) == 0x000003, "Member 'FSHPostprocessExpFogOverride::bOverride_FogHeightFalloff' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_FogMaxOpacity) == 0x000004, "Member 'FSHPostprocessExpFogOverride::bOverride_FogMaxOpacity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_StartDistance) == 0x000005, "Member 'FSHPostprocessExpFogOverride::bOverride_StartDistance' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_FogCutoffDistance) == 0x000006, "Member 'FSHPostprocessExpFogOverride::bOverride_FogCutoffDistance' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_SecondFogDensity) == 0x000007, "Member 'FSHPostprocessExpFogOverride::bOverride_SecondFogDensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_SecondFogHeightFalloff) == 0x000008, "Member 'FSHPostprocessExpFogOverride::bOverride_SecondFogHeightFalloff' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_SecondFogHeightOffset) == 0x000009, "Member 'FSHPostprocessExpFogOverride::bOverride_SecondFogHeightOffset' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_DirectionalInscatteringExponent) == 0x00000A, "Member 'FSHPostprocessExpFogOverride::bOverride_DirectionalInscatteringExponent' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_DirectionalInscatteringStartDistance) == 0x00000B, "Member 'FSHPostprocessExpFogOverride::bOverride_DirectionalInscatteringStartDistance' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_DirectionalInscatteringColor) == 0x00000C, "Member 'FSHPostprocessExpFogOverride::bOverride_DirectionalInscatteringColor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_bEnableVolumetricFog) == 0x00000D, "Member 'FSHPostprocessExpFogOverride::bOverride_bEnableVolumetricFog' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_VolumetricFogScatteringDistribution) == 0x00000E, "Member 'FSHPostprocessExpFogOverride::bOverride_VolumetricFogScatteringDistribution' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_VolumetricFogAlbedo) == 0x00000F, "Member 'FSHPostprocessExpFogOverride::bOverride_VolumetricFogAlbedo' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_VolumetricFogEmissive) == 0x000010, "Member 'FSHPostprocessExpFogOverride::bOverride_VolumetricFogEmissive' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_VolumetricFogExtinctionScale) == 0x000011, "Member 'FSHPostprocessExpFogOverride::bOverride_VolumetricFogExtinctionScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_VolumetricFogDistance) == 0x000012, "Member 'FSHPostprocessExpFogOverride::bOverride_VolumetricFogDistance' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_VolumetricFogStaticLightingScatteringIntensity) == 0x000013, "Member 'FSHPostprocessExpFogOverride::bOverride_VolumetricFogStaticLightingScatteringIntensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_bOverrideLightColorsWithFogInscatteringColors) == 0x000014, "Member 'FSHPostprocessExpFogOverride::bOverride_bOverrideLightColorsWithFogInscatteringColors' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_HeightIsCameraRelative) == 0x000015, "Member 'FSHPostprocessExpFogOverride::bOverride_HeightIsCameraRelative' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_WorldOriginHeightOffset) == 0x000016, "Member 'FSHPostprocessExpFogOverride::bOverride_WorldOriginHeightOffset' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_FogDarkening) == 0x000017, "Member 'FSHPostprocessExpFogOverride::bOverride_FogDarkening' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_FogDarkeningTint) == 0x000018, "Member 'FSHPostprocessExpFogOverride::bOverride_FogDarkeningTint' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_FogDarkeningExponent) == 0x000019, "Member 'FSHPostprocessExpFogOverride::bOverride_FogDarkeningExponent' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_FogDarkeningDepthThreshold) == 0x00001A, "Member 'FSHPostprocessExpFogOverride::bOverride_FogDarkeningDepthThreshold' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_FogDarkeningDepthThresholdFade) == 0x00001B, "Member 'FSHPostprocessExpFogOverride::bOverride_FogDarkeningDepthThresholdFade' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_FogDarkeningFadeBias) == 0x00001C, "Member 'FSHPostprocessExpFogOverride::bOverride_FogDarkeningFadeBias' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_FogDarkeningFadeExponent) == 0x00001D, "Member 'FSHPostprocessExpFogOverride::bOverride_FogDarkeningFadeExponent' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_FogDarkeningFadeScale) == 0x00001E, "Member 'FSHPostprocessExpFogOverride::bOverride_FogDarkeningFadeScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_FogDistanceScale) == 0x00001F, "Member 'FSHPostprocessExpFogOverride::bOverride_FogDistanceScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_FogContrast) == 0x000020, "Member 'FSHPostprocessExpFogOverride::bOverride_FogContrast' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_FogNoiseScaleMultiplier) == 0x000021, "Member 'FSHPostprocessExpFogOverride::bOverride_FogNoiseScaleMultiplier' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_FogSpeedMultiplier) == 0x000022, "Member 'FSHPostprocessExpFogOverride::bOverride_FogSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_FogIntensityMultiplier) == 0x000023, "Member 'FSHPostprocessExpFogOverride::bOverride_FogIntensityMultiplier' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverride_FogTint) == 0x000024, "Member 'FSHPostprocessExpFogOverride::bOverride_FogTint' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, Visible) == 0x000025, "Member 'FSHPostprocessExpFogOverride::Visible' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, FogDensity) == 0x000028, "Member 'FSHPostprocessExpFogOverride::FogDensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, FogInscatteringColor) == 0x00002C, "Member 'FSHPostprocessExpFogOverride::FogInscatteringColor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, FogHeightFalloff) == 0x00003C, "Member 'FSHPostprocessExpFogOverride::FogHeightFalloff' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, FogMaxOpacity) == 0x000040, "Member 'FSHPostprocessExpFogOverride::FogMaxOpacity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, StartDistance) == 0x000044, "Member 'FSHPostprocessExpFogOverride::StartDistance' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, FogCutoffDistance) == 0x000048, "Member 'FSHPostprocessExpFogOverride::FogCutoffDistance' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, SecondFogDensity) == 0x00004C, "Member 'FSHPostprocessExpFogOverride::SecondFogDensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, SecondFogHeightFalloff) == 0x000050, "Member 'FSHPostprocessExpFogOverride::SecondFogHeightFalloff' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, SecondFogHeightOffset) == 0x000054, "Member 'FSHPostprocessExpFogOverride::SecondFogHeightOffset' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, DirectionalInscatteringExponent) == 0x000058, "Member 'FSHPostprocessExpFogOverride::DirectionalInscatteringExponent' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, DirectionalInscatteringStartDistance) == 0x00005C, "Member 'FSHPostprocessExpFogOverride::DirectionalInscatteringStartDistance' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, DirectionalInscatteringColor) == 0x000060, "Member 'FSHPostprocessExpFogOverride::DirectionalInscatteringColor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bEnableVolumetricFog) == 0x000070, "Member 'FSHPostprocessExpFogOverride::bEnableVolumetricFog' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, VolumetricFogScatteringDistribution) == 0x000074, "Member 'FSHPostprocessExpFogOverride::VolumetricFogScatteringDistribution' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, VolumetricFogAlbedo) == 0x000078, "Member 'FSHPostprocessExpFogOverride::VolumetricFogAlbedo' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, VolumetricFogEmissive) == 0x00007C, "Member 'FSHPostprocessExpFogOverride::VolumetricFogEmissive' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, VolumetricFogExtinctionScale) == 0x00008C, "Member 'FSHPostprocessExpFogOverride::VolumetricFogExtinctionScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, VolumetricFogDistance) == 0x000090, "Member 'FSHPostprocessExpFogOverride::VolumetricFogDistance' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, VolumetricFogStaticLightingScatteringIntensity) == 0x000094, "Member 'FSHPostprocessExpFogOverride::VolumetricFogStaticLightingScatteringIntensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, bOverrideLightColorsWithFogInscatteringColors) == 0x000098, "Member 'FSHPostprocessExpFogOverride::bOverrideLightColorsWithFogInscatteringColors' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, HeightIsCameraRelative) == 0x000099, "Member 'FSHPostprocessExpFogOverride::HeightIsCameraRelative' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, WorldOriginHeightOffset) == 0x00009C, "Member 'FSHPostprocessExpFogOverride::WorldOriginHeightOffset' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, FogDarkening) == 0x0000A0, "Member 'FSHPostprocessExpFogOverride::FogDarkening' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, FogDarkeningTint) == 0x0000A4, "Member 'FSHPostprocessExpFogOverride::FogDarkeningTint' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, FogDarkeningExponent) == 0x0000B4, "Member 'FSHPostprocessExpFogOverride::FogDarkeningExponent' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, FogDarkeningDepthThreshold) == 0x0000B8, "Member 'FSHPostprocessExpFogOverride::FogDarkeningDepthThreshold' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, FogDarkeningDepthThresholdFade) == 0x0000BC, "Member 'FSHPostprocessExpFogOverride::FogDarkeningDepthThresholdFade' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, FogDarkeningFadeBias) == 0x0000C0, "Member 'FSHPostprocessExpFogOverride::FogDarkeningFadeBias' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, FogDarkeningFadeExponent) == 0x0000C4, "Member 'FSHPostprocessExpFogOverride::FogDarkeningFadeExponent' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, FogDarkeningFadeScale) == 0x0000C8, "Member 'FSHPostprocessExpFogOverride::FogDarkeningFadeScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, FogDistanceScale) == 0x0000CC, "Member 'FSHPostprocessExpFogOverride::FogDistanceScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, FogContrast) == 0x0000D0, "Member 'FSHPostprocessExpFogOverride::FogContrast' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, FogNoiseScaleMultiplier) == 0x0000D4, "Member 'FSHPostprocessExpFogOverride::FogNoiseScaleMultiplier' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, FogSpeedMultiplier) == 0x0000D8, "Member 'FSHPostprocessExpFogOverride::FogSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, FogIntensityMultiplier) == 0x0000DC, "Member 'FSHPostprocessExpFogOverride::FogIntensityMultiplier' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExpFogOverride, FogTint) == 0x0000E0, "Member 'FSHPostprocessExpFogOverride::FogTint' has a wrong offset!");

// ScriptStruct PostProcessVolumeEx.SHPostprocessWindDataOverride
// 0x0030 (0x0030 - 0x0000)
struct FSHPostprocessWindDataOverride final
{
public:
	bool                                          bOverride_BarkWindIntensity;                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_BarkWindScale;                           // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_LeafsWindIntensity;                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_LeafsWindScale;                          // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_WindDirection;                           // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BarkWindIntensity;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            BarkWindIntensityCurve;                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BarkWindScale;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeafsWindIntensity;                                // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            LeafsWindIntensityCurve;                           // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeafsWindScale;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindDirection;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSHPostprocessWindDataOverride) == 0x000008, "Wrong alignment on FSHPostprocessWindDataOverride");
static_assert(sizeof(FSHPostprocessWindDataOverride) == 0x000030, "Wrong size on FSHPostprocessWindDataOverride");
static_assert(offsetof(FSHPostprocessWindDataOverride, bOverride_BarkWindIntensity) == 0x000000, "Member 'FSHPostprocessWindDataOverride::bOverride_BarkWindIntensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessWindDataOverride, bOverride_BarkWindScale) == 0x000001, "Member 'FSHPostprocessWindDataOverride::bOverride_BarkWindScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessWindDataOverride, bOverride_LeafsWindIntensity) == 0x000002, "Member 'FSHPostprocessWindDataOverride::bOverride_LeafsWindIntensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessWindDataOverride, bOverride_LeafsWindScale) == 0x000003, "Member 'FSHPostprocessWindDataOverride::bOverride_LeafsWindScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessWindDataOverride, bOverride_WindDirection) == 0x000004, "Member 'FSHPostprocessWindDataOverride::bOverride_WindDirection' has a wrong offset!");
static_assert(offsetof(FSHPostprocessWindDataOverride, BarkWindIntensity) == 0x000008, "Member 'FSHPostprocessWindDataOverride::BarkWindIntensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessWindDataOverride, BarkWindIntensityCurve) == 0x000010, "Member 'FSHPostprocessWindDataOverride::BarkWindIntensityCurve' has a wrong offset!");
static_assert(offsetof(FSHPostprocessWindDataOverride, BarkWindScale) == 0x000018, "Member 'FSHPostprocessWindDataOverride::BarkWindScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessWindDataOverride, LeafsWindIntensity) == 0x00001C, "Member 'FSHPostprocessWindDataOverride::LeafsWindIntensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessWindDataOverride, LeafsWindIntensityCurve) == 0x000020, "Member 'FSHPostprocessWindDataOverride::LeafsWindIntensityCurve' has a wrong offset!");
static_assert(offsetof(FSHPostprocessWindDataOverride, LeafsWindScale) == 0x000028, "Member 'FSHPostprocessWindDataOverride::LeafsWindScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessWindDataOverride, WindDirection) == 0x00002C, "Member 'FSHPostprocessWindDataOverride::WindDirection' has a wrong offset!");

// ScriptStruct PostProcessVolumeEx.SHPostprocessCloudscapeClouds
// 0x0048 (0x0048 - 0x0000)
struct FSHPostprocessCloudscapeClouds final
{
public:
	float                                         NoiseContrast;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseDistortion;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NoiseScale;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NoiseSpeed;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudAlbedo;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudExtinction;                                   // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSHPostprocessCloudscapeClouds) == 0x000004, "Wrong alignment on FSHPostprocessCloudscapeClouds");
static_assert(sizeof(FSHPostprocessCloudscapeClouds) == 0x000048, "Wrong size on FSHPostprocessCloudscapeClouds");
static_assert(offsetof(FSHPostprocessCloudscapeClouds, NoiseContrast) == 0x000000, "Member 'FSHPostprocessCloudscapeClouds::NoiseContrast' has a wrong offset!");
static_assert(offsetof(FSHPostprocessCloudscapeClouds, NoiseDistortion) == 0x000004, "Member 'FSHPostprocessCloudscapeClouds::NoiseDistortion' has a wrong offset!");
static_assert(offsetof(FSHPostprocessCloudscapeClouds, NoiseScale) == 0x000008, "Member 'FSHPostprocessCloudscapeClouds::NoiseScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessCloudscapeClouds, NoiseSpeed) == 0x000018, "Member 'FSHPostprocessCloudscapeClouds::NoiseSpeed' has a wrong offset!");
static_assert(offsetof(FSHPostprocessCloudscapeClouds, CloudAlbedo) == 0x000028, "Member 'FSHPostprocessCloudscapeClouds::CloudAlbedo' has a wrong offset!");
static_assert(offsetof(FSHPostprocessCloudscapeClouds, CloudExtinction) == 0x000038, "Member 'FSHPostprocessCloudscapeClouds::CloudExtinction' has a wrong offset!");

// ScriptStruct PostProcessVolumeEx.SHPostprocessSkyLightOverride
// 0x0098 (0x0098 - 0x0000)
struct FSHPostprocessSkyLightOverride final
{
public:
	bool                                          bOverride_Visible;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SourceType;                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_Cubemap;                                 // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SourceCubemapAngle;                      // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_RecaptureFrequency;                      // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SkyDistanceThreshold;                    // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_Intensity;                               // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_IndirectLightIntensity;                  // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_VolumetricScatteringIntensity;           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_LightColor;                              // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_LowerHemisphereColor;                    // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_bLowerHemisphereIsBlack;                 // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_CastShadows;                             // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_CastRayTracingShadows;                   // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_RayTracingShadowsSamplesCount;           // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_bAffectTranslucentLighting;              // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_bTransmission;                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_OcclusionMaxDistance;                    // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_Contrast;                                // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_OcclusionExponent;                       // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_MinOcclusion;                            // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_OcclusionTint;                           // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_OcclusionCombineMode;                    // 0x0016(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_AOScale;                                 // 0x0017(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_LumenBiasFactor;                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Visible;                                           // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkyLightSourceType                           SourceType;                                        // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureCube*                           Cubemap;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceCubemapAngle;                                // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkyLightCaptureFrequency                     RecaptureFrequency;                                // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkyDistanceThreshold;                              // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IndirectLightIntensity;                            // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricScatteringIntensity;                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightColor;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LowerHemisphereColor;                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLowerHemisphereIsBlack;                           // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         CastShadows : 1;                                   // 0x0064(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          CastRayTracingShadows;                             // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RayTracingShadowsSamplesCount;                     // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAffectTranslucentLighting : 1;                    // 0x0070(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTransmission : 1;                                 // 0x0070(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OcclusionMaxDistance;                              // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Contrast;                                          // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionExponent;                                 // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinOcclusion;                                      // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 OcclusionTint;                                     // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOcclusionCombineMode                         OcclusionCombineMode;                              // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AOScale;                                           // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LumenBiasFactor;                                   // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSHPostprocessSkyLightOverride) == 0x000008, "Wrong alignment on FSHPostprocessSkyLightOverride");
static_assert(sizeof(FSHPostprocessSkyLightOverride) == 0x000098, "Wrong size on FSHPostprocessSkyLightOverride");
static_assert(offsetof(FSHPostprocessSkyLightOverride, bOverride_Visible) == 0x000000, "Member 'FSHPostprocessSkyLightOverride::bOverride_Visible' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, bOverride_SourceType) == 0x000001, "Member 'FSHPostprocessSkyLightOverride::bOverride_SourceType' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, bOverride_Cubemap) == 0x000002, "Member 'FSHPostprocessSkyLightOverride::bOverride_Cubemap' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, bOverride_SourceCubemapAngle) == 0x000003, "Member 'FSHPostprocessSkyLightOverride::bOverride_SourceCubemapAngle' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, bOverride_RecaptureFrequency) == 0x000004, "Member 'FSHPostprocessSkyLightOverride::bOverride_RecaptureFrequency' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, bOverride_SkyDistanceThreshold) == 0x000005, "Member 'FSHPostprocessSkyLightOverride::bOverride_SkyDistanceThreshold' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, bOverride_Intensity) == 0x000006, "Member 'FSHPostprocessSkyLightOverride::bOverride_Intensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, bOverride_IndirectLightIntensity) == 0x000007, "Member 'FSHPostprocessSkyLightOverride::bOverride_IndirectLightIntensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, bOverride_VolumetricScatteringIntensity) == 0x000008, "Member 'FSHPostprocessSkyLightOverride::bOverride_VolumetricScatteringIntensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, bOverride_LightColor) == 0x000009, "Member 'FSHPostprocessSkyLightOverride::bOverride_LightColor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, bOverride_LowerHemisphereColor) == 0x00000A, "Member 'FSHPostprocessSkyLightOverride::bOverride_LowerHemisphereColor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, bOverride_bLowerHemisphereIsBlack) == 0x00000B, "Member 'FSHPostprocessSkyLightOverride::bOverride_bLowerHemisphereIsBlack' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, bOverride_CastShadows) == 0x00000C, "Member 'FSHPostprocessSkyLightOverride::bOverride_CastShadows' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, bOverride_CastRayTracingShadows) == 0x00000D, "Member 'FSHPostprocessSkyLightOverride::bOverride_CastRayTracingShadows' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, bOverride_RayTracingShadowsSamplesCount) == 0x00000E, "Member 'FSHPostprocessSkyLightOverride::bOverride_RayTracingShadowsSamplesCount' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, bOverride_bAffectTranslucentLighting) == 0x00000F, "Member 'FSHPostprocessSkyLightOverride::bOverride_bAffectTranslucentLighting' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, bOverride_bTransmission) == 0x000010, "Member 'FSHPostprocessSkyLightOverride::bOverride_bTransmission' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, bOverride_OcclusionMaxDistance) == 0x000011, "Member 'FSHPostprocessSkyLightOverride::bOverride_OcclusionMaxDistance' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, bOverride_Contrast) == 0x000012, "Member 'FSHPostprocessSkyLightOverride::bOverride_Contrast' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, bOverride_OcclusionExponent) == 0x000013, "Member 'FSHPostprocessSkyLightOverride::bOverride_OcclusionExponent' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, bOverride_MinOcclusion) == 0x000014, "Member 'FSHPostprocessSkyLightOverride::bOverride_MinOcclusion' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, bOverride_OcclusionTint) == 0x000015, "Member 'FSHPostprocessSkyLightOverride::bOverride_OcclusionTint' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, bOverride_OcclusionCombineMode) == 0x000016, "Member 'FSHPostprocessSkyLightOverride::bOverride_OcclusionCombineMode' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, bOverride_AOScale) == 0x000017, "Member 'FSHPostprocessSkyLightOverride::bOverride_AOScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, bOverride_LumenBiasFactor) == 0x000018, "Member 'FSHPostprocessSkyLightOverride::bOverride_LumenBiasFactor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, Visible) == 0x000019, "Member 'FSHPostprocessSkyLightOverride::Visible' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, SourceType) == 0x00001A, "Member 'FSHPostprocessSkyLightOverride::SourceType' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, Cubemap) == 0x000020, "Member 'FSHPostprocessSkyLightOverride::Cubemap' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, SourceCubemapAngle) == 0x000028, "Member 'FSHPostprocessSkyLightOverride::SourceCubemapAngle' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, RecaptureFrequency) == 0x00002C, "Member 'FSHPostprocessSkyLightOverride::RecaptureFrequency' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, SkyDistanceThreshold) == 0x000030, "Member 'FSHPostprocessSkyLightOverride::SkyDistanceThreshold' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, Intensity) == 0x000034, "Member 'FSHPostprocessSkyLightOverride::Intensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, IndirectLightIntensity) == 0x000038, "Member 'FSHPostprocessSkyLightOverride::IndirectLightIntensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, VolumetricScatteringIntensity) == 0x00003C, "Member 'FSHPostprocessSkyLightOverride::VolumetricScatteringIntensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, LightColor) == 0x000040, "Member 'FSHPostprocessSkyLightOverride::LightColor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, LowerHemisphereColor) == 0x000050, "Member 'FSHPostprocessSkyLightOverride::LowerHemisphereColor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, bLowerHemisphereIsBlack) == 0x000060, "Member 'FSHPostprocessSkyLightOverride::bLowerHemisphereIsBlack' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, CastRayTracingShadows) == 0x000068, "Member 'FSHPostprocessSkyLightOverride::CastRayTracingShadows' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, RayTracingShadowsSamplesCount) == 0x00006C, "Member 'FSHPostprocessSkyLightOverride::RayTracingShadowsSamplesCount' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, OcclusionMaxDistance) == 0x000074, "Member 'FSHPostprocessSkyLightOverride::OcclusionMaxDistance' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, Contrast) == 0x000078, "Member 'FSHPostprocessSkyLightOverride::Contrast' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, OcclusionExponent) == 0x00007C, "Member 'FSHPostprocessSkyLightOverride::OcclusionExponent' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, MinOcclusion) == 0x000080, "Member 'FSHPostprocessSkyLightOverride::MinOcclusion' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, OcclusionTint) == 0x000084, "Member 'FSHPostprocessSkyLightOverride::OcclusionTint' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, OcclusionCombineMode) == 0x000088, "Member 'FSHPostprocessSkyLightOverride::OcclusionCombineMode' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, AOScale) == 0x00008C, "Member 'FSHPostprocessSkyLightOverride::AOScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessSkyLightOverride, LumenBiasFactor) == 0x000090, "Member 'FSHPostprocessSkyLightOverride::LumenBiasFactor' has a wrong offset!");

// ScriptStruct PostProcessVolumeEx.SHPostprocessDirectionalLightOverride
// 0x0128 (0x0128 - 0x0000)
struct FSHPostprocessDirectionalLightOverride final
{
public:
	bool                                          bOverride_Visible;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_VisibleInLowQuality;                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_Direction;                               // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_Intensity;                               // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_IndirectLightingIntensity;               // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_VolumetricScatteringIntensity;           // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_LightColor;                              // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_CastShadows;                             // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_CastShadowsInLowQuality;                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_CastRayTracingShadows;                   // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_RayTracingShadowsSamplesCount;           // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ShadowSharpen;                           // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_LightSourceAngle;                        // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_LightSourceSoftAngle;                    // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ContactShadowLength;                     // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_Temperature;                             // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_bUseTemperature;                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SpecularScale;                           // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ShadowBias;                              // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ShadowsQuality;                          // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_CascadeTransitionFraction;               // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_CascadeDistributionExponent;             // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_DynamicShadowDistanceMovableLight;       // 0x0016(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_bAffectDynamicIndirectLighting;          // 0x0017(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_bEnableLightShaftOcclusion;              // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_OcclusionMaskDarkness;                   // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_OcclusionDepthRange;                     // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_bEnableLightShaftBloom;                  // 0x001B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_BloomScale;                              // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_BloomThreshold;                          // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_BloomMaxBrightness;                      // 0x001E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_BloomTint;                               // 0x001F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_LightShaftOverrideDirection;             // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_bAtmosphereSunLight;                     // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_AtmosphereSunLightIndex;                 // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_AtmosphereSunDiskColorScale;             // 0x0023(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_bPerPixelAtmosphereTransmittance;        // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_bCastShadowsOnClouds;                    // 0x0025(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_bCastShadowsOnAtmosphere;                // 0x0026(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_bCastCloudShadows;                       // 0x0027(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_CloudShadowStrength;                     // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_CloudShadowOnAtmosphereStrength;         // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_CloudShadowOnSurfaceStrength;            // 0x002A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_CloudShadowDepthBias;                    // 0x002B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_CloudShadowExtent;                       // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_CloudShadowMapResolutionScale;           // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_CloudShadowRaySampleCountScale;          // 0x002E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_CloudScatteredLuminanceScale;            // 0x002F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_FakeAmbientIntensity;                    // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_FakeAmbientColor;                        // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_FakeAmbientFromBottom;                   // 0x0032(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_DayNightFactor;                          // 0x0033(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Visible;                                           // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAtmosphereDLightVisLQ                        VisibleInLowQuality;                               // 0x0035(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Direction;                                         // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IndirectLightingIntensity;                         // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricScatteringIntensity;                     // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 LightColor;                                        // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CastShadows;                                       // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAtmosphereDLightVisLQ                        CastShadowsInLowQuality;                           // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CastRayTracingShadows;                             // 0x0062(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_63[0x1];                                       // 0x0063(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RayTracingShadowsSamplesCount;                     // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowSharpen;                                     // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightSourceAngle;                                  // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightSourceSoftAngle;                              // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContactShadowLength;                               // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Temperature;                                       // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTemperature;                                   // 0x007C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpecularScale;                                     // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowBias;                                        // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESunShadowsQuality                            ShadowsQuality;                                    // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CascadeTransitionFraction;                         // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CascadeDistributionExponent;                       // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DynamicShadowDistanceMovableLight;                 // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectDynamicIndirectLighting;                    // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableLightShaftOcclusion;                        // 0x0099(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x2];                                       // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OcclusionMaskDarkness;                             // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionDepthRange;                               // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableLightShaftBloom;                            // 0x00A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BloomScale;                                        // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomThreshold;                                    // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomMaxBrightness;                                // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 BloomTint;                                         // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightShaftOverrideDirection;                       // 0x00B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtmosphereSunLight;                               // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AtmosphereSunLightIndex;                           // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AtmosphereSunDiskColorScale;                       // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPerPixelAtmosphereTransmittance;                  // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastShadowsOnClouds;                              // 0x00E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastShadowsOnAtmosphere;                          // 0x00EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastCloudShadows;                                 // 0x00EB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowStrength;                               // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowOnAtmosphereStrength;                   // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowOnSurfaceStrength;                      // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowDepthBias;                              // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowExtent;                                 // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowMapResolutionScale;                     // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowRaySampleCountScale;                    // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudScatteredLuminanceScale;                      // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FakeAmbientIntensity;                              // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 FakeAmbientColor;                                  // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FakeAmbientFromBottom;                             // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DayNightFactor;                                    // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSHPostprocessDirectionalLightOverride) == 0x000008, "Wrong alignment on FSHPostprocessDirectionalLightOverride");
static_assert(sizeof(FSHPostprocessDirectionalLightOverride) == 0x000128, "Wrong size on FSHPostprocessDirectionalLightOverride");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_Visible) == 0x000000, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_Visible' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_VisibleInLowQuality) == 0x000001, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_VisibleInLowQuality' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_Direction) == 0x000002, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_Direction' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_Intensity) == 0x000003, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_Intensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_IndirectLightingIntensity) == 0x000004, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_IndirectLightingIntensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_VolumetricScatteringIntensity) == 0x000005, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_VolumetricScatteringIntensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_LightColor) == 0x000006, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_LightColor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_CastShadows) == 0x000007, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_CastShadows' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_CastShadowsInLowQuality) == 0x000008, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_CastShadowsInLowQuality' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_CastRayTracingShadows) == 0x000009, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_CastRayTracingShadows' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_RayTracingShadowsSamplesCount) == 0x00000A, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_RayTracingShadowsSamplesCount' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_ShadowSharpen) == 0x00000B, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_ShadowSharpen' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_LightSourceAngle) == 0x00000C, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_LightSourceAngle' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_LightSourceSoftAngle) == 0x00000D, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_LightSourceSoftAngle' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_ContactShadowLength) == 0x00000E, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_ContactShadowLength' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_Temperature) == 0x00000F, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_Temperature' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_bUseTemperature) == 0x000010, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_bUseTemperature' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_SpecularScale) == 0x000011, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_SpecularScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_ShadowBias) == 0x000012, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_ShadowBias' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_ShadowsQuality) == 0x000013, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_ShadowsQuality' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_CascadeTransitionFraction) == 0x000014, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_CascadeTransitionFraction' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_CascadeDistributionExponent) == 0x000015, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_CascadeDistributionExponent' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_DynamicShadowDistanceMovableLight) == 0x000016, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_DynamicShadowDistanceMovableLight' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_bAffectDynamicIndirectLighting) == 0x000017, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_bAffectDynamicIndirectLighting' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_bEnableLightShaftOcclusion) == 0x000018, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_bEnableLightShaftOcclusion' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_OcclusionMaskDarkness) == 0x000019, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_OcclusionMaskDarkness' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_OcclusionDepthRange) == 0x00001A, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_OcclusionDepthRange' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_bEnableLightShaftBloom) == 0x00001B, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_bEnableLightShaftBloom' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_BloomScale) == 0x00001C, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_BloomScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_BloomThreshold) == 0x00001D, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_BloomThreshold' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_BloomMaxBrightness) == 0x00001E, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_BloomMaxBrightness' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_BloomTint) == 0x00001F, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_BloomTint' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_LightShaftOverrideDirection) == 0x000020, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_LightShaftOverrideDirection' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_bAtmosphereSunLight) == 0x000021, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_bAtmosphereSunLight' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_AtmosphereSunLightIndex) == 0x000022, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_AtmosphereSunLightIndex' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_AtmosphereSunDiskColorScale) == 0x000023, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_AtmosphereSunDiskColorScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_bPerPixelAtmosphereTransmittance) == 0x000024, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_bPerPixelAtmosphereTransmittance' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_bCastShadowsOnClouds) == 0x000025, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_bCastShadowsOnClouds' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_bCastShadowsOnAtmosphere) == 0x000026, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_bCastShadowsOnAtmosphere' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_bCastCloudShadows) == 0x000027, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_bCastCloudShadows' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_CloudShadowStrength) == 0x000028, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_CloudShadowStrength' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_CloudShadowOnAtmosphereStrength) == 0x000029, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_CloudShadowOnAtmosphereStrength' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_CloudShadowOnSurfaceStrength) == 0x00002A, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_CloudShadowOnSurfaceStrength' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_CloudShadowDepthBias) == 0x00002B, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_CloudShadowDepthBias' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_CloudShadowExtent) == 0x00002C, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_CloudShadowExtent' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_CloudShadowMapResolutionScale) == 0x00002D, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_CloudShadowMapResolutionScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_CloudShadowRaySampleCountScale) == 0x00002E, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_CloudShadowRaySampleCountScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_CloudScatteredLuminanceScale) == 0x00002F, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_CloudScatteredLuminanceScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_FakeAmbientIntensity) == 0x000030, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_FakeAmbientIntensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_FakeAmbientColor) == 0x000031, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_FakeAmbientColor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_FakeAmbientFromBottom) == 0x000032, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_FakeAmbientFromBottom' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bOverride_DayNightFactor) == 0x000033, "Member 'FSHPostprocessDirectionalLightOverride::bOverride_DayNightFactor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, Visible) == 0x000034, "Member 'FSHPostprocessDirectionalLightOverride::Visible' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, VisibleInLowQuality) == 0x000035, "Member 'FSHPostprocessDirectionalLightOverride::VisibleInLowQuality' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, Direction) == 0x000038, "Member 'FSHPostprocessDirectionalLightOverride::Direction' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, Intensity) == 0x000050, "Member 'FSHPostprocessDirectionalLightOverride::Intensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, IndirectLightingIntensity) == 0x000054, "Member 'FSHPostprocessDirectionalLightOverride::IndirectLightingIntensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, VolumetricScatteringIntensity) == 0x000058, "Member 'FSHPostprocessDirectionalLightOverride::VolumetricScatteringIntensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, LightColor) == 0x00005C, "Member 'FSHPostprocessDirectionalLightOverride::LightColor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, CastShadows) == 0x000060, "Member 'FSHPostprocessDirectionalLightOverride::CastShadows' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, CastShadowsInLowQuality) == 0x000061, "Member 'FSHPostprocessDirectionalLightOverride::CastShadowsInLowQuality' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, CastRayTracingShadows) == 0x000062, "Member 'FSHPostprocessDirectionalLightOverride::CastRayTracingShadows' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, RayTracingShadowsSamplesCount) == 0x000064, "Member 'FSHPostprocessDirectionalLightOverride::RayTracingShadowsSamplesCount' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, ShadowSharpen) == 0x000068, "Member 'FSHPostprocessDirectionalLightOverride::ShadowSharpen' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, LightSourceAngle) == 0x00006C, "Member 'FSHPostprocessDirectionalLightOverride::LightSourceAngle' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, LightSourceSoftAngle) == 0x000070, "Member 'FSHPostprocessDirectionalLightOverride::LightSourceSoftAngle' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, ContactShadowLength) == 0x000074, "Member 'FSHPostprocessDirectionalLightOverride::ContactShadowLength' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, Temperature) == 0x000078, "Member 'FSHPostprocessDirectionalLightOverride::Temperature' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bUseTemperature) == 0x00007C, "Member 'FSHPostprocessDirectionalLightOverride::bUseTemperature' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, SpecularScale) == 0x000080, "Member 'FSHPostprocessDirectionalLightOverride::SpecularScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, ShadowBias) == 0x000084, "Member 'FSHPostprocessDirectionalLightOverride::ShadowBias' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, ShadowsQuality) == 0x000088, "Member 'FSHPostprocessDirectionalLightOverride::ShadowsQuality' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, CascadeTransitionFraction) == 0x00008C, "Member 'FSHPostprocessDirectionalLightOverride::CascadeTransitionFraction' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, CascadeDistributionExponent) == 0x000090, "Member 'FSHPostprocessDirectionalLightOverride::CascadeDistributionExponent' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, DynamicShadowDistanceMovableLight) == 0x000094, "Member 'FSHPostprocessDirectionalLightOverride::DynamicShadowDistanceMovableLight' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bAffectDynamicIndirectLighting) == 0x000098, "Member 'FSHPostprocessDirectionalLightOverride::bAffectDynamicIndirectLighting' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bEnableLightShaftOcclusion) == 0x000099, "Member 'FSHPostprocessDirectionalLightOverride::bEnableLightShaftOcclusion' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, OcclusionMaskDarkness) == 0x00009C, "Member 'FSHPostprocessDirectionalLightOverride::OcclusionMaskDarkness' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, OcclusionDepthRange) == 0x0000A0, "Member 'FSHPostprocessDirectionalLightOverride::OcclusionDepthRange' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bEnableLightShaftBloom) == 0x0000A4, "Member 'FSHPostprocessDirectionalLightOverride::bEnableLightShaftBloom' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, BloomScale) == 0x0000A8, "Member 'FSHPostprocessDirectionalLightOverride::BloomScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, BloomThreshold) == 0x0000AC, "Member 'FSHPostprocessDirectionalLightOverride::BloomThreshold' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, BloomMaxBrightness) == 0x0000B0, "Member 'FSHPostprocessDirectionalLightOverride::BloomMaxBrightness' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, BloomTint) == 0x0000B4, "Member 'FSHPostprocessDirectionalLightOverride::BloomTint' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, LightShaftOverrideDirection) == 0x0000B8, "Member 'FSHPostprocessDirectionalLightOverride::LightShaftOverrideDirection' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bAtmosphereSunLight) == 0x0000D0, "Member 'FSHPostprocessDirectionalLightOverride::bAtmosphereSunLight' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, AtmosphereSunLightIndex) == 0x0000D4, "Member 'FSHPostprocessDirectionalLightOverride::AtmosphereSunLightIndex' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, AtmosphereSunDiskColorScale) == 0x0000D8, "Member 'FSHPostprocessDirectionalLightOverride::AtmosphereSunDiskColorScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bPerPixelAtmosphereTransmittance) == 0x0000E8, "Member 'FSHPostprocessDirectionalLightOverride::bPerPixelAtmosphereTransmittance' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bCastShadowsOnClouds) == 0x0000E9, "Member 'FSHPostprocessDirectionalLightOverride::bCastShadowsOnClouds' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bCastShadowsOnAtmosphere) == 0x0000EA, "Member 'FSHPostprocessDirectionalLightOverride::bCastShadowsOnAtmosphere' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, bCastCloudShadows) == 0x0000EB, "Member 'FSHPostprocessDirectionalLightOverride::bCastCloudShadows' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, CloudShadowStrength) == 0x0000EC, "Member 'FSHPostprocessDirectionalLightOverride::CloudShadowStrength' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, CloudShadowOnAtmosphereStrength) == 0x0000F0, "Member 'FSHPostprocessDirectionalLightOverride::CloudShadowOnAtmosphereStrength' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, CloudShadowOnSurfaceStrength) == 0x0000F4, "Member 'FSHPostprocessDirectionalLightOverride::CloudShadowOnSurfaceStrength' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, CloudShadowDepthBias) == 0x0000F8, "Member 'FSHPostprocessDirectionalLightOverride::CloudShadowDepthBias' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, CloudShadowExtent) == 0x0000FC, "Member 'FSHPostprocessDirectionalLightOverride::CloudShadowExtent' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, CloudShadowMapResolutionScale) == 0x000100, "Member 'FSHPostprocessDirectionalLightOverride::CloudShadowMapResolutionScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, CloudShadowRaySampleCountScale) == 0x000104, "Member 'FSHPostprocessDirectionalLightOverride::CloudShadowRaySampleCountScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, CloudScatteredLuminanceScale) == 0x000108, "Member 'FSHPostprocessDirectionalLightOverride::CloudScatteredLuminanceScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, FakeAmbientIntensity) == 0x000118, "Member 'FSHPostprocessDirectionalLightOverride::FakeAmbientIntensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, FakeAmbientColor) == 0x00011C, "Member 'FSHPostprocessDirectionalLightOverride::FakeAmbientColor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, FakeAmbientFromBottom) == 0x000120, "Member 'FSHPostprocessDirectionalLightOverride::FakeAmbientFromBottom' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDirectionalLightOverride, DayNightFactor) == 0x000124, "Member 'FSHPostprocessDirectionalLightOverride::DayNightFactor' has a wrong offset!");

// ScriptStruct PostProcessVolumeEx.SHPostprocessRoughnessMetalicityCtrlOverride
// 0x0058 (0x0058 - 0x0000)
struct FSHPostprocessRoughnessMetalicityCtrlOverride final
{
public:
	bool                                          bOverride_Mood;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_RoughnessScale;                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_RoughnessBias;                           // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_RoughnessTerrainScale;                   // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_RoughnessTerrainBias;                    // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_MetallicityScale;                        // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_MetallicityBias;                         // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_MetallicityTerrainScale;                 // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_MetallicityTerrainBias;                  // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_RaytracingCullDistance;                  // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_RaytracingCullEnable;                    // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_LumenReflectionsDownsampleFactor;        // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_LumenReflectionsDownsampleFactorHQ;      // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_MaxRoughnessToTrace;                     // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_EyeAdpTrnsInitialPower;                  // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_EyeAdpTrnsTurningPoint;                  // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_EyeAdpTrnsPower;                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_EyeAdpTrnsInfluence;                     // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAtmosphereMood                               Mood;                                              // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RoughnessScale;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RoughnessBias;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RoughnessTerrainScale;                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RoughnessTerrainBias;                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MetallicityScale;                                  // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MetallicityBias;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MetallicityTerrainScale;                           // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MetallicityTerrainBias;                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RaytracingCullDistance;                            // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RaytracingCullEnable;                              // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LumenReflectionsDownsampleFactor;                  // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LumenReflectionsDownsampleFactorHQ;                // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRoughnessToTrace;                               // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeAdpTrnsInitialPower;                            // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeAdpTrnsTurningPoint;                            // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeAdpTrnsPower;                                   // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeAdpTrnsInfluence;                               // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSHPostprocessRoughnessMetalicityCtrlOverride) == 0x000004, "Wrong alignment on FSHPostprocessRoughnessMetalicityCtrlOverride");
static_assert(sizeof(FSHPostprocessRoughnessMetalicityCtrlOverride) == 0x000058, "Wrong size on FSHPostprocessRoughnessMetalicityCtrlOverride");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, bOverride_Mood) == 0x000000, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::bOverride_Mood' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, bOverride_RoughnessScale) == 0x000001, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::bOverride_RoughnessScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, bOverride_RoughnessBias) == 0x000002, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::bOverride_RoughnessBias' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, bOverride_RoughnessTerrainScale) == 0x000003, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::bOverride_RoughnessTerrainScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, bOverride_RoughnessTerrainBias) == 0x000004, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::bOverride_RoughnessTerrainBias' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, bOverride_MetallicityScale) == 0x000005, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::bOverride_MetallicityScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, bOverride_MetallicityBias) == 0x000006, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::bOverride_MetallicityBias' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, bOverride_MetallicityTerrainScale) == 0x000007, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::bOverride_MetallicityTerrainScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, bOverride_MetallicityTerrainBias) == 0x000008, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::bOverride_MetallicityTerrainBias' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, bOverride_RaytracingCullDistance) == 0x000009, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::bOverride_RaytracingCullDistance' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, bOverride_RaytracingCullEnable) == 0x00000A, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::bOverride_RaytracingCullEnable' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, bOverride_LumenReflectionsDownsampleFactor) == 0x00000B, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::bOverride_LumenReflectionsDownsampleFactor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, bOverride_LumenReflectionsDownsampleFactorHQ) == 0x00000C, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::bOverride_LumenReflectionsDownsampleFactorHQ' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, bOverride_MaxRoughnessToTrace) == 0x00000D, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::bOverride_MaxRoughnessToTrace' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, bOverride_EyeAdpTrnsInitialPower) == 0x00000E, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::bOverride_EyeAdpTrnsInitialPower' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, bOverride_EyeAdpTrnsTurningPoint) == 0x00000F, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::bOverride_EyeAdpTrnsTurningPoint' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, bOverride_EyeAdpTrnsPower) == 0x000010, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::bOverride_EyeAdpTrnsPower' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, bOverride_EyeAdpTrnsInfluence) == 0x000011, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::bOverride_EyeAdpTrnsInfluence' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, Mood) == 0x000012, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::Mood' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, RoughnessScale) == 0x000014, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::RoughnessScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, RoughnessBias) == 0x000018, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::RoughnessBias' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, RoughnessTerrainScale) == 0x00001C, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::RoughnessTerrainScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, RoughnessTerrainBias) == 0x000020, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::RoughnessTerrainBias' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, MetallicityScale) == 0x000024, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::MetallicityScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, MetallicityBias) == 0x000028, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::MetallicityBias' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, MetallicityTerrainScale) == 0x00002C, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::MetallicityTerrainScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, MetallicityTerrainBias) == 0x000030, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::MetallicityTerrainBias' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, RaytracingCullDistance) == 0x000034, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::RaytracingCullDistance' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, RaytracingCullEnable) == 0x000038, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::RaytracingCullEnable' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, LumenReflectionsDownsampleFactor) == 0x00003C, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::LumenReflectionsDownsampleFactor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, LumenReflectionsDownsampleFactorHQ) == 0x000040, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::LumenReflectionsDownsampleFactorHQ' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, MaxRoughnessToTrace) == 0x000044, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::MaxRoughnessToTrace' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, EyeAdpTrnsInitialPower) == 0x000048, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::EyeAdpTrnsInitialPower' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, EyeAdpTrnsTurningPoint) == 0x00004C, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::EyeAdpTrnsTurningPoint' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, EyeAdpTrnsPower) == 0x000050, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::EyeAdpTrnsPower' has a wrong offset!");
static_assert(offsetof(FSHPostprocessRoughnessMetalicityCtrlOverride, EyeAdpTrnsInfluence) == 0x000054, "Member 'FSHPostprocessRoughnessMetalicityCtrlOverride::EyeAdpTrnsInfluence' has a wrong offset!");

// ScriptStruct PostProcessVolumeEx.SHPostprocessExposureOverride
// 0x0068 (0x0068 - 0x0000)
struct FSHPostprocessExposureOverride final
{
public:
	bool                                          bOverride_AutoExposureMethod;                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_AutoExposureBias;                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_AutoExposureApplyPhysicalCameraExposure; // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_AutoExposureBiasCurve;                   // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_AutoExposureMeterMask;                   // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_AutoExposureLowPercent;                  // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_AutoExposureHighPercent;                 // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_AutoExposureMinBrightness;               // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_AutoExposureMaxBrightness;               // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_AutoExposureSpeedUp;                     // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_AutoExposureSpeedDown;                   // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_HistogramLogMin;                         // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_HistogramLogMax;                         // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_LocalExposureHighlightContrastScale;     // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_LocalExposureShadowContrastScale;        // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_LocalExposureDetailStrength;             // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_LocalExposureBlurredLuminanceBlend;      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_LocalExposureBlurredLuminanceKernelSizePercent; // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_LocalExposureMiddleGreyBias;             // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAutoExposureMethod                           AutoExposureMethod;                                // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureBias;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AutoExposureApplyPhysicalCameraExposure : 1;       // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            AutoExposureBiasCurve;                             // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               AutoExposureMeterMask;                             // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureLowPercent;                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureHighPercent;                           // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureMinBrightness;                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureMaxBrightness;                         // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureSpeedUp;                               // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureSpeedDown;                             // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HistogramLogMin;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HistogramLogMax;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalExposureHighlightContrastScale;               // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalExposureShadowContrastScale;                  // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalExposureDetailStrength;                       // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalExposureBlurredLuminanceBlend;                // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalExposureBlurredLuminanceKernelSizePercent;    // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalExposureMiddleGreyBias;                       // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSHPostprocessExposureOverride) == 0x000008, "Wrong alignment on FSHPostprocessExposureOverride");
static_assert(sizeof(FSHPostprocessExposureOverride) == 0x000068, "Wrong size on FSHPostprocessExposureOverride");
static_assert(offsetof(FSHPostprocessExposureOverride, bOverride_AutoExposureMethod) == 0x000000, "Member 'FSHPostprocessExposureOverride::bOverride_AutoExposureMethod' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, bOverride_AutoExposureBias) == 0x000001, "Member 'FSHPostprocessExposureOverride::bOverride_AutoExposureBias' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, bOverride_AutoExposureApplyPhysicalCameraExposure) == 0x000002, "Member 'FSHPostprocessExposureOverride::bOverride_AutoExposureApplyPhysicalCameraExposure' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, bOverride_AutoExposureBiasCurve) == 0x000003, "Member 'FSHPostprocessExposureOverride::bOverride_AutoExposureBiasCurve' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, bOverride_AutoExposureMeterMask) == 0x000004, "Member 'FSHPostprocessExposureOverride::bOverride_AutoExposureMeterMask' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, bOverride_AutoExposureLowPercent) == 0x000005, "Member 'FSHPostprocessExposureOverride::bOverride_AutoExposureLowPercent' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, bOverride_AutoExposureHighPercent) == 0x000006, "Member 'FSHPostprocessExposureOverride::bOverride_AutoExposureHighPercent' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, bOverride_AutoExposureMinBrightness) == 0x000007, "Member 'FSHPostprocessExposureOverride::bOverride_AutoExposureMinBrightness' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, bOverride_AutoExposureMaxBrightness) == 0x000008, "Member 'FSHPostprocessExposureOverride::bOverride_AutoExposureMaxBrightness' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, bOverride_AutoExposureSpeedUp) == 0x000009, "Member 'FSHPostprocessExposureOverride::bOverride_AutoExposureSpeedUp' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, bOverride_AutoExposureSpeedDown) == 0x00000A, "Member 'FSHPostprocessExposureOverride::bOverride_AutoExposureSpeedDown' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, bOverride_HistogramLogMin) == 0x00000B, "Member 'FSHPostprocessExposureOverride::bOverride_HistogramLogMin' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, bOverride_HistogramLogMax) == 0x00000C, "Member 'FSHPostprocessExposureOverride::bOverride_HistogramLogMax' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, bOverride_LocalExposureHighlightContrastScale) == 0x00000D, "Member 'FSHPostprocessExposureOverride::bOverride_LocalExposureHighlightContrastScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, bOverride_LocalExposureShadowContrastScale) == 0x00000E, "Member 'FSHPostprocessExposureOverride::bOverride_LocalExposureShadowContrastScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, bOverride_LocalExposureDetailStrength) == 0x00000F, "Member 'FSHPostprocessExposureOverride::bOverride_LocalExposureDetailStrength' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, bOverride_LocalExposureBlurredLuminanceBlend) == 0x000010, "Member 'FSHPostprocessExposureOverride::bOverride_LocalExposureBlurredLuminanceBlend' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, bOverride_LocalExposureBlurredLuminanceKernelSizePercent) == 0x000011, "Member 'FSHPostprocessExposureOverride::bOverride_LocalExposureBlurredLuminanceKernelSizePercent' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, bOverride_LocalExposureMiddleGreyBias) == 0x000012, "Member 'FSHPostprocessExposureOverride::bOverride_LocalExposureMiddleGreyBias' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, AutoExposureMethod) == 0x000013, "Member 'FSHPostprocessExposureOverride::AutoExposureMethod' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, AutoExposureBias) == 0x000014, "Member 'FSHPostprocessExposureOverride::AutoExposureBias' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, AutoExposureBiasCurve) == 0x000020, "Member 'FSHPostprocessExposureOverride::AutoExposureBiasCurve' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, AutoExposureMeterMask) == 0x000028, "Member 'FSHPostprocessExposureOverride::AutoExposureMeterMask' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, AutoExposureLowPercent) == 0x000030, "Member 'FSHPostprocessExposureOverride::AutoExposureLowPercent' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, AutoExposureHighPercent) == 0x000034, "Member 'FSHPostprocessExposureOverride::AutoExposureHighPercent' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, AutoExposureMinBrightness) == 0x000038, "Member 'FSHPostprocessExposureOverride::AutoExposureMinBrightness' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, AutoExposureMaxBrightness) == 0x00003C, "Member 'FSHPostprocessExposureOverride::AutoExposureMaxBrightness' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, AutoExposureSpeedUp) == 0x000040, "Member 'FSHPostprocessExposureOverride::AutoExposureSpeedUp' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, AutoExposureSpeedDown) == 0x000044, "Member 'FSHPostprocessExposureOverride::AutoExposureSpeedDown' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, HistogramLogMin) == 0x000048, "Member 'FSHPostprocessExposureOverride::HistogramLogMin' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, HistogramLogMax) == 0x00004C, "Member 'FSHPostprocessExposureOverride::HistogramLogMax' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, LocalExposureHighlightContrastScale) == 0x000050, "Member 'FSHPostprocessExposureOverride::LocalExposureHighlightContrastScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, LocalExposureShadowContrastScale) == 0x000054, "Member 'FSHPostprocessExposureOverride::LocalExposureShadowContrastScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, LocalExposureDetailStrength) == 0x000058, "Member 'FSHPostprocessExposureOverride::LocalExposureDetailStrength' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, LocalExposureBlurredLuminanceBlend) == 0x00005C, "Member 'FSHPostprocessExposureOverride::LocalExposureBlurredLuminanceBlend' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, LocalExposureBlurredLuminanceKernelSizePercent) == 0x000060, "Member 'FSHPostprocessExposureOverride::LocalExposureBlurredLuminanceKernelSizePercent' has a wrong offset!");
static_assert(offsetof(FSHPostprocessExposureOverride, LocalExposureMiddleGreyBias) == 0x000064, "Member 'FSHPostprocessExposureOverride::LocalExposureMiddleGreyBias' has a wrong offset!");

// ScriptStruct PostProcessVolumeEx.SHPostprocessColorGradingOverride
// 0x02E0 (0x02E0 - 0x0000)
struct FSHPostprocessColorGradingOverride final
{
public:
	bool                                          bOverride_TemperatureType;                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_WhiteTemp;                               // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_WhiteTint;                               // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorSaturation;                         // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorContrast;                           // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorGamma;                              // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorGain;                               // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorOffset;                             // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorSaturationShadows;                  // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorContrastShadows;                    // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorGammaShadows;                       // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorGainShadows;                        // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorOffsetShadows;                      // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorSaturationMidtones;                 // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorContrastMidtones;                   // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorGammaMidtones;                      // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorGainMidtones;                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorOffsetMidtones;                     // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorSaturationHighlights;               // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorContrastHighlights;                 // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorGammaHighlights;                    // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorGainHighlights;                     // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorOffsetHighlights;                   // 0x0016(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorCorrectionHighlightsMin;            // 0x0017(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorCorrectionShadowsMax;               // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_BlueCorrection;                          // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ExpandGamut;                             // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ToneCurveAmount;                         // 0x001B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SceneColorTint;                          // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorGradingIntensity;                   // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorGradingLUT;                         // 0x001E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETemperatureMethod                            TemperatureType;                                   // 0x001F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WhiteTemp;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WhiteTint;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               ColorSaturation;                                   // 0x0030(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorContrast;                                     // 0x0050(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGamma;                                        // 0x0070(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGain;                                         // 0x0090(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorOffset;                                       // 0x00B0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorSaturationShadows;                            // 0x00D0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorContrastShadows;                              // 0x00F0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGammaShadows;                                 // 0x0110(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGainShadows;                                  // 0x0130(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorOffsetShadows;                                // 0x0150(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorSaturationMidtones;                           // 0x0170(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorContrastMidtones;                             // 0x0190(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGammaMidtones;                                // 0x01B0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGainMidtones;                                 // 0x01D0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorOffsetMidtones;                               // 0x01F0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorSaturationHighlights;                         // 0x0210(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorContrastHighlights;                           // 0x0230(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGammaHighlights;                              // 0x0250(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGainHighlights;                               // 0x0270(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorOffsetHighlights;                             // 0x0290(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorCorrectionHighlightsMin;                      // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorCorrectionShadowsMax;                         // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlueCorrection;                                    // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpandGamut;                                       // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToneCurveAmount;                                   // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SceneColorTint;                                    // 0x02C4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorGradingIntensity;                             // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               ColorGradingLUT;                                   // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSHPostprocessColorGradingOverride) == 0x000010, "Wrong alignment on FSHPostprocessColorGradingOverride");
static_assert(sizeof(FSHPostprocessColorGradingOverride) == 0x0002E0, "Wrong size on FSHPostprocessColorGradingOverride");
static_assert(offsetof(FSHPostprocessColorGradingOverride, bOverride_TemperatureType) == 0x000000, "Member 'FSHPostprocessColorGradingOverride::bOverride_TemperatureType' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, bOverride_WhiteTemp) == 0x000001, "Member 'FSHPostprocessColorGradingOverride::bOverride_WhiteTemp' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, bOverride_WhiteTint) == 0x000002, "Member 'FSHPostprocessColorGradingOverride::bOverride_WhiteTint' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, bOverride_ColorSaturation) == 0x000003, "Member 'FSHPostprocessColorGradingOverride::bOverride_ColorSaturation' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, bOverride_ColorContrast) == 0x000004, "Member 'FSHPostprocessColorGradingOverride::bOverride_ColorContrast' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, bOverride_ColorGamma) == 0x000005, "Member 'FSHPostprocessColorGradingOverride::bOverride_ColorGamma' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, bOverride_ColorGain) == 0x000006, "Member 'FSHPostprocessColorGradingOverride::bOverride_ColorGain' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, bOverride_ColorOffset) == 0x000007, "Member 'FSHPostprocessColorGradingOverride::bOverride_ColorOffset' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, bOverride_ColorSaturationShadows) == 0x000008, "Member 'FSHPostprocessColorGradingOverride::bOverride_ColorSaturationShadows' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, bOverride_ColorContrastShadows) == 0x000009, "Member 'FSHPostprocessColorGradingOverride::bOverride_ColorContrastShadows' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, bOverride_ColorGammaShadows) == 0x00000A, "Member 'FSHPostprocessColorGradingOverride::bOverride_ColorGammaShadows' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, bOverride_ColorGainShadows) == 0x00000B, "Member 'FSHPostprocessColorGradingOverride::bOverride_ColorGainShadows' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, bOverride_ColorOffsetShadows) == 0x00000C, "Member 'FSHPostprocessColorGradingOverride::bOverride_ColorOffsetShadows' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, bOverride_ColorSaturationMidtones) == 0x00000D, "Member 'FSHPostprocessColorGradingOverride::bOverride_ColorSaturationMidtones' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, bOverride_ColorContrastMidtones) == 0x00000E, "Member 'FSHPostprocessColorGradingOverride::bOverride_ColorContrastMidtones' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, bOverride_ColorGammaMidtones) == 0x00000F, "Member 'FSHPostprocessColorGradingOverride::bOverride_ColorGammaMidtones' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, bOverride_ColorGainMidtones) == 0x000010, "Member 'FSHPostprocessColorGradingOverride::bOverride_ColorGainMidtones' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, bOverride_ColorOffsetMidtones) == 0x000011, "Member 'FSHPostprocessColorGradingOverride::bOverride_ColorOffsetMidtones' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, bOverride_ColorSaturationHighlights) == 0x000012, "Member 'FSHPostprocessColorGradingOverride::bOverride_ColorSaturationHighlights' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, bOverride_ColorContrastHighlights) == 0x000013, "Member 'FSHPostprocessColorGradingOverride::bOverride_ColorContrastHighlights' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, bOverride_ColorGammaHighlights) == 0x000014, "Member 'FSHPostprocessColorGradingOverride::bOverride_ColorGammaHighlights' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, bOverride_ColorGainHighlights) == 0x000015, "Member 'FSHPostprocessColorGradingOverride::bOverride_ColorGainHighlights' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, bOverride_ColorOffsetHighlights) == 0x000016, "Member 'FSHPostprocessColorGradingOverride::bOverride_ColorOffsetHighlights' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, bOverride_ColorCorrectionHighlightsMin) == 0x000017, "Member 'FSHPostprocessColorGradingOverride::bOverride_ColorCorrectionHighlightsMin' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, bOverride_ColorCorrectionShadowsMax) == 0x000018, "Member 'FSHPostprocessColorGradingOverride::bOverride_ColorCorrectionShadowsMax' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, bOverride_BlueCorrection) == 0x000019, "Member 'FSHPostprocessColorGradingOverride::bOverride_BlueCorrection' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, bOverride_ExpandGamut) == 0x00001A, "Member 'FSHPostprocessColorGradingOverride::bOverride_ExpandGamut' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, bOverride_ToneCurveAmount) == 0x00001B, "Member 'FSHPostprocessColorGradingOverride::bOverride_ToneCurveAmount' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, bOverride_SceneColorTint) == 0x00001C, "Member 'FSHPostprocessColorGradingOverride::bOverride_SceneColorTint' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, bOverride_ColorGradingIntensity) == 0x00001D, "Member 'FSHPostprocessColorGradingOverride::bOverride_ColorGradingIntensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, bOverride_ColorGradingLUT) == 0x00001E, "Member 'FSHPostprocessColorGradingOverride::bOverride_ColorGradingLUT' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, TemperatureType) == 0x00001F, "Member 'FSHPostprocessColorGradingOverride::TemperatureType' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, WhiteTemp) == 0x000020, "Member 'FSHPostprocessColorGradingOverride::WhiteTemp' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, WhiteTint) == 0x000024, "Member 'FSHPostprocessColorGradingOverride::WhiteTint' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, ColorSaturation) == 0x000030, "Member 'FSHPostprocessColorGradingOverride::ColorSaturation' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, ColorContrast) == 0x000050, "Member 'FSHPostprocessColorGradingOverride::ColorContrast' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, ColorGamma) == 0x000070, "Member 'FSHPostprocessColorGradingOverride::ColorGamma' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, ColorGain) == 0x000090, "Member 'FSHPostprocessColorGradingOverride::ColorGain' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, ColorOffset) == 0x0000B0, "Member 'FSHPostprocessColorGradingOverride::ColorOffset' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, ColorSaturationShadows) == 0x0000D0, "Member 'FSHPostprocessColorGradingOverride::ColorSaturationShadows' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, ColorContrastShadows) == 0x0000F0, "Member 'FSHPostprocessColorGradingOverride::ColorContrastShadows' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, ColorGammaShadows) == 0x000110, "Member 'FSHPostprocessColorGradingOverride::ColorGammaShadows' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, ColorGainShadows) == 0x000130, "Member 'FSHPostprocessColorGradingOverride::ColorGainShadows' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, ColorOffsetShadows) == 0x000150, "Member 'FSHPostprocessColorGradingOverride::ColorOffsetShadows' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, ColorSaturationMidtones) == 0x000170, "Member 'FSHPostprocessColorGradingOverride::ColorSaturationMidtones' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, ColorContrastMidtones) == 0x000190, "Member 'FSHPostprocessColorGradingOverride::ColorContrastMidtones' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, ColorGammaMidtones) == 0x0001B0, "Member 'FSHPostprocessColorGradingOverride::ColorGammaMidtones' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, ColorGainMidtones) == 0x0001D0, "Member 'FSHPostprocessColorGradingOverride::ColorGainMidtones' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, ColorOffsetMidtones) == 0x0001F0, "Member 'FSHPostprocessColorGradingOverride::ColorOffsetMidtones' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, ColorSaturationHighlights) == 0x000210, "Member 'FSHPostprocessColorGradingOverride::ColorSaturationHighlights' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, ColorContrastHighlights) == 0x000230, "Member 'FSHPostprocessColorGradingOverride::ColorContrastHighlights' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, ColorGammaHighlights) == 0x000250, "Member 'FSHPostprocessColorGradingOverride::ColorGammaHighlights' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, ColorGainHighlights) == 0x000270, "Member 'FSHPostprocessColorGradingOverride::ColorGainHighlights' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, ColorOffsetHighlights) == 0x000290, "Member 'FSHPostprocessColorGradingOverride::ColorOffsetHighlights' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, ColorCorrectionHighlightsMin) == 0x0002B0, "Member 'FSHPostprocessColorGradingOverride::ColorCorrectionHighlightsMin' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, ColorCorrectionShadowsMax) == 0x0002B4, "Member 'FSHPostprocessColorGradingOverride::ColorCorrectionShadowsMax' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, BlueCorrection) == 0x0002B8, "Member 'FSHPostprocessColorGradingOverride::BlueCorrection' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, ExpandGamut) == 0x0002BC, "Member 'FSHPostprocessColorGradingOverride::ExpandGamut' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, ToneCurveAmount) == 0x0002C0, "Member 'FSHPostprocessColorGradingOverride::ToneCurveAmount' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, SceneColorTint) == 0x0002C4, "Member 'FSHPostprocessColorGradingOverride::SceneColorTint' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, ColorGradingIntensity) == 0x0002D4, "Member 'FSHPostprocessColorGradingOverride::ColorGradingIntensity' has a wrong offset!");
static_assert(offsetof(FSHPostprocessColorGradingOverride, ColorGradingLUT) == 0x0002D8, "Member 'FSHPostprocessColorGradingOverride::ColorGradingLUT' has a wrong offset!");

// ScriptStruct PostProcessVolumeEx.SHPostprocessFilmOverride
// 0x001C (0x001C - 0x0000)
struct FSHPostprocessFilmOverride final
{
public:
	bool                                          bOverride_FilmSlope;                               // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_FilmToe;                                 // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_FilmShoulder;                            // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_FilmBlackClip;                           // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_FilmWhiteClip;                           // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FilmSlope;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FilmToe;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FilmShoulder;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FilmBlackClip;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FilmWhiteClip;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSHPostprocessFilmOverride) == 0x000004, "Wrong alignment on FSHPostprocessFilmOverride");
static_assert(sizeof(FSHPostprocessFilmOverride) == 0x00001C, "Wrong size on FSHPostprocessFilmOverride");
static_assert(offsetof(FSHPostprocessFilmOverride, bOverride_FilmSlope) == 0x000000, "Member 'FSHPostprocessFilmOverride::bOverride_FilmSlope' has a wrong offset!");
static_assert(offsetof(FSHPostprocessFilmOverride, bOverride_FilmToe) == 0x000001, "Member 'FSHPostprocessFilmOverride::bOverride_FilmToe' has a wrong offset!");
static_assert(offsetof(FSHPostprocessFilmOverride, bOverride_FilmShoulder) == 0x000002, "Member 'FSHPostprocessFilmOverride::bOverride_FilmShoulder' has a wrong offset!");
static_assert(offsetof(FSHPostprocessFilmOverride, bOverride_FilmBlackClip) == 0x000003, "Member 'FSHPostprocessFilmOverride::bOverride_FilmBlackClip' has a wrong offset!");
static_assert(offsetof(FSHPostprocessFilmOverride, bOverride_FilmWhiteClip) == 0x000004, "Member 'FSHPostprocessFilmOverride::bOverride_FilmWhiteClip' has a wrong offset!");
static_assert(offsetof(FSHPostprocessFilmOverride, FilmSlope) == 0x000008, "Member 'FSHPostprocessFilmOverride::FilmSlope' has a wrong offset!");
static_assert(offsetof(FSHPostprocessFilmOverride, FilmToe) == 0x00000C, "Member 'FSHPostprocessFilmOverride::FilmToe' has a wrong offset!");
static_assert(offsetof(FSHPostprocessFilmOverride, FilmShoulder) == 0x000010, "Member 'FSHPostprocessFilmOverride::FilmShoulder' has a wrong offset!");
static_assert(offsetof(FSHPostprocessFilmOverride, FilmBlackClip) == 0x000014, "Member 'FSHPostprocessFilmOverride::FilmBlackClip' has a wrong offset!");
static_assert(offsetof(FSHPostprocessFilmOverride, FilmWhiteClip) == 0x000018, "Member 'FSHPostprocessFilmOverride::FilmWhiteClip' has a wrong offset!");

// ScriptStruct PostProcessVolumeEx.SHPostprocessDOFOverride
// 0x004C (0x004C - 0x0000)
struct FSHPostprocessDOFOverride final
{
public:
	uint8                                         bOverride_DepthOfFieldSensorWidth : 1;             // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DepthOfFieldSqueezeFactor : 1;           // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DepthOfFieldFocalDistance : 1;           // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DepthOfFieldAnamorphism : 1;             // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DepthOfFieldDepthBlurAmount : 1;         // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DepthOfFieldDepthBlurRadius : 1;         // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DepthOfFieldVolumetricFogBias : 1;       // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DepthOfFieldVolumetricFogScale : 1;      // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DepthOfFieldVolumetricFogExponent : 1;   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DepthOfFieldFocalRegion : 1;             // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DepthOfFieldNearTransitionRegion : 1;    // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DepthOfFieldFarTransitionRegion : 1;     // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DepthOfFieldScale : 1;                   // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DepthOfFieldNearBlurSize : 1;            // 0x0001(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DepthOfFieldFarBlurSize : 1;             // 0x0001(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DepthOfFieldOcclusion : 1;               // 0x0001(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DepthOfFieldSkyFocusDistance : 1;        // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DepthOfFieldVignetteSize : 1;            // 0x0002(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DepthOfFieldSensorWidth;                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldSqueezeFactor;                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldFocalDistance;                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldAnamorphism;                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldDepthBlurAmount;                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldDepthBlurRadius;                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldVolumetricFogBias;                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldVolumetricFogScale;                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldVolumetricFogExponent;                 // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldFocalRegion;                           // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldNearTransitionRegion;                  // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldFarTransitionRegion;                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldScale;                                 // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldNearBlurSize;                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldFarBlurSize;                           // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldOcclusion;                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldSkyFocusDistance;                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldVignetteSize;                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSHPostprocessDOFOverride) == 0x000004, "Wrong alignment on FSHPostprocessDOFOverride");
static_assert(sizeof(FSHPostprocessDOFOverride) == 0x00004C, "Wrong size on FSHPostprocessDOFOverride");
static_assert(offsetof(FSHPostprocessDOFOverride, DepthOfFieldSensorWidth) == 0x000004, "Member 'FSHPostprocessDOFOverride::DepthOfFieldSensorWidth' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDOFOverride, DepthOfFieldSqueezeFactor) == 0x000008, "Member 'FSHPostprocessDOFOverride::DepthOfFieldSqueezeFactor' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDOFOverride, DepthOfFieldFocalDistance) == 0x00000C, "Member 'FSHPostprocessDOFOverride::DepthOfFieldFocalDistance' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDOFOverride, DepthOfFieldAnamorphism) == 0x000010, "Member 'FSHPostprocessDOFOverride::DepthOfFieldAnamorphism' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDOFOverride, DepthOfFieldDepthBlurAmount) == 0x000014, "Member 'FSHPostprocessDOFOverride::DepthOfFieldDepthBlurAmount' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDOFOverride, DepthOfFieldDepthBlurRadius) == 0x000018, "Member 'FSHPostprocessDOFOverride::DepthOfFieldDepthBlurRadius' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDOFOverride, DepthOfFieldVolumetricFogBias) == 0x00001C, "Member 'FSHPostprocessDOFOverride::DepthOfFieldVolumetricFogBias' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDOFOverride, DepthOfFieldVolumetricFogScale) == 0x000020, "Member 'FSHPostprocessDOFOverride::DepthOfFieldVolumetricFogScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDOFOverride, DepthOfFieldVolumetricFogExponent) == 0x000024, "Member 'FSHPostprocessDOFOverride::DepthOfFieldVolumetricFogExponent' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDOFOverride, DepthOfFieldFocalRegion) == 0x000028, "Member 'FSHPostprocessDOFOverride::DepthOfFieldFocalRegion' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDOFOverride, DepthOfFieldNearTransitionRegion) == 0x00002C, "Member 'FSHPostprocessDOFOverride::DepthOfFieldNearTransitionRegion' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDOFOverride, DepthOfFieldFarTransitionRegion) == 0x000030, "Member 'FSHPostprocessDOFOverride::DepthOfFieldFarTransitionRegion' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDOFOverride, DepthOfFieldScale) == 0x000034, "Member 'FSHPostprocessDOFOverride::DepthOfFieldScale' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDOFOverride, DepthOfFieldNearBlurSize) == 0x000038, "Member 'FSHPostprocessDOFOverride::DepthOfFieldNearBlurSize' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDOFOverride, DepthOfFieldFarBlurSize) == 0x00003C, "Member 'FSHPostprocessDOFOverride::DepthOfFieldFarBlurSize' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDOFOverride, DepthOfFieldOcclusion) == 0x000040, "Member 'FSHPostprocessDOFOverride::DepthOfFieldOcclusion' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDOFOverride, DepthOfFieldSkyFocusDistance) == 0x000044, "Member 'FSHPostprocessDOFOverride::DepthOfFieldSkyFocusDistance' has a wrong offset!");
static_assert(offsetof(FSHPostprocessDOFOverride, DepthOfFieldVignetteSize) == 0x000048, "Member 'FSHPostprocessDOFOverride::DepthOfFieldVignetteSize' has a wrong offset!");

// ScriptStruct PostProcessVolumeEx.AtmospherePreset
// 0x0008 (0x0008 - 0x0000)
struct FAtmospherePreset final
{
public:
	class FName                                   PresetName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtmospherePreset) == 0x000004, "Wrong alignment on FAtmospherePreset");
static_assert(sizeof(FAtmospherePreset) == 0x000008, "Wrong size on FAtmospherePreset");
static_assert(offsetof(FAtmospherePreset, PresetName) == 0x000000, "Member 'FAtmospherePreset::PresetName' has a wrong offset!");

// ScriptStruct PostProcessVolumeEx.PresetOverride
// 0x0008 (0x0008 - 0x0000)
struct FPresetOverride final
{
public:
	class FName                                   PresetName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPresetOverride) == 0x000004, "Wrong alignment on FPresetOverride");
static_assert(sizeof(FPresetOverride) == 0x000008, "Wrong size on FPresetOverride");
static_assert(offsetof(FPresetOverride, PresetName) == 0x000000, "Member 'FPresetOverride::PresetName' has a wrong offset!");

// ScriptStruct PostProcessVolumeEx.PresetOverrideData
// 0x0708 (0x0710 - 0x0008)
struct FPresetOverrideData final : public FTableRowBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   Settings;                                          // 0x0010(0x0700)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPresetOverrideData) == 0x000010, "Wrong alignment on FPresetOverrideData");
static_assert(sizeof(FPresetOverrideData) == 0x000710, "Wrong size on FPresetOverrideData");
static_assert(offsetof(FPresetOverrideData, Settings) == 0x000010, "Member 'FPresetOverrideData::Settings' has a wrong offset!");

}

