#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MaterialsSplineCtrl

#include "Basic.hpp"


namespace SDK
{

// Enum MaterialsSplineCtrl.EGizmoParameterTransfer
// NumValues: 0x0004
enum class EGizmoParameterTransfer : uint8
{
	GPS_Sphere                               = 0,
	GPS_Plane                                = 1,
	GPS_Rotation                             = 2,
	GPS_MAX                                  = 3,
};

// ScriptStruct MaterialsSplineCtrl.MaterialCtrlParam
// 0x0048 (0x0048 - 0x0000)
struct FMaterialCtrlParam final
{
public:
	int32                                         PType;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveBase*                             Curve;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseGizmoField;                                     // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGizmoParameterTransfer                       GizmoCoordsTransfer;                               // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   GizmoTagName;                                      // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GizmoTagNameOld;                                   // 0x0024(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x8];                                       // 0x002C(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          LoopsAround;                                       // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpeedScale;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueScale;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaterialCtrlParam) == 0x000008, "Wrong alignment on FMaterialCtrlParam");
static_assert(sizeof(FMaterialCtrlParam) == 0x000048, "Wrong size on FMaterialCtrlParam");
static_assert(offsetof(FMaterialCtrlParam, PType) == 0x000000, "Member 'FMaterialCtrlParam::PType' has a wrong offset!");
static_assert(offsetof(FMaterialCtrlParam, Name) == 0x000004, "Member 'FMaterialCtrlParam::Name' has a wrong offset!");
static_assert(offsetof(FMaterialCtrlParam, Curve) == 0x000010, "Member 'FMaterialCtrlParam::Curve' has a wrong offset!");
static_assert(offsetof(FMaterialCtrlParam, UseGizmoField) == 0x000018, "Member 'FMaterialCtrlParam::UseGizmoField' has a wrong offset!");
static_assert(offsetof(FMaterialCtrlParam, GizmoCoordsTransfer) == 0x000019, "Member 'FMaterialCtrlParam::GizmoCoordsTransfer' has a wrong offset!");
static_assert(offsetof(FMaterialCtrlParam, GizmoTagName) == 0x00001C, "Member 'FMaterialCtrlParam::GizmoTagName' has a wrong offset!");
static_assert(offsetof(FMaterialCtrlParam, GizmoTagNameOld) == 0x000024, "Member 'FMaterialCtrlParam::GizmoTagNameOld' has a wrong offset!");
static_assert(offsetof(FMaterialCtrlParam, LoopsAround) == 0x000034, "Member 'FMaterialCtrlParam::LoopsAround' has a wrong offset!");
static_assert(offsetof(FMaterialCtrlParam, SpeedScale) == 0x000038, "Member 'FMaterialCtrlParam::SpeedScale' has a wrong offset!");
static_assert(offsetof(FMaterialCtrlParam, ValueScale) == 0x00003C, "Member 'FMaterialCtrlParam::ValueScale' has a wrong offset!");

// ScriptStruct MaterialsSplineCtrl.MaterialCtrlParamForcedBounds
// 0x000C (0x000C - 0x0000)
struct FMaterialCtrlParamForcedBounds final
{
public:
	class FName                                   CName;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialCtrlParamForcedBounds) == 0x000004, "Wrong alignment on FMaterialCtrlParamForcedBounds");
static_assert(sizeof(FMaterialCtrlParamForcedBounds) == 0x00000C, "Wrong size on FMaterialCtrlParamForcedBounds");
static_assert(offsetof(FMaterialCtrlParamForcedBounds, CName) == 0x000000, "Member 'FMaterialCtrlParamForcedBounds::CName' has a wrong offset!");
static_assert(offsetof(FMaterialCtrlParamForcedBounds, SlotIndex) == 0x000008, "Member 'FMaterialCtrlParamForcedBounds::SlotIndex' has a wrong offset!");

// ScriptStruct MaterialsSplineCtrl.MaterialCtrl
// 0x0020 (0x0020 - 0x0000)
struct FMaterialCtrl final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     PreviousMaterial;                                  // 0x0010(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ReplacementMaterial;                               // 0x0018(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialCtrl) == 0x000008, "Wrong alignment on FMaterialCtrl");
static_assert(sizeof(FMaterialCtrl) == 0x000020, "Wrong size on FMaterialCtrl");
static_assert(offsetof(FMaterialCtrl, Material) == 0x000000, "Member 'FMaterialCtrl::Material' has a wrong offset!");
static_assert(offsetof(FMaterialCtrl, DynamicMaterial) == 0x000008, "Member 'FMaterialCtrl::DynamicMaterial' has a wrong offset!");
static_assert(offsetof(FMaterialCtrl, PreviousMaterial) == 0x000010, "Member 'FMaterialCtrl::PreviousMaterial' has a wrong offset!");
static_assert(offsetof(FMaterialCtrl, ReplacementMaterial) == 0x000018, "Member 'FMaterialCtrl::ReplacementMaterial' has a wrong offset!");

}

