#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UCA

#include "Basic.hpp"

#include "Commons_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum UCA.EAchievementCounterType
// NumValues: 0x0005
enum class EAchievementCounterType : uint32
{
	Simple                                   = 0,
	Integer                                  = 1,
	Float                                    = 2,
	Collection                               = 3,
	EAchievementCounterType_MAX              = 4,
};

// Enum UCA.ETrophyType
// NumValues: 0x0006
enum class ETrophyType : uint8
{
	Platinum                                 = 0,
	Gold                                     = 1,
	Silver                                   = 2,
	Bronze                                   = 3,
	NoTrophy                                 = 4,
	ETrophyType_MAX                          = 5,
};

// Enum UCA.EActivityFlags
// NumValues: 0x0006
enum class EActivityFlags : uint8
{
	Hidden                                   = 0,
	AvailableByDefault                       = 1,
	IsRequiredForCompletion                  = 2,
	IsOnlineMultiplay                        = 3,
	IsTeamActivity                           = 4,
	EActivityFlags_MAX                       = 5,
};

// Enum UCA.EActivityCategory
// NumValues: 0x0005
enum class EActivityCategory : uint8
{
	Progress                                 = 0,
	OpenEnded                                = 1,
	Competitive                              = 2,
	Challenge                                = 3,
	EActivityCategory_MAX                    = 4,
};

// Enum UCA.EActivityOutcome
// NumValues: 0x0004
enum class EActivityOutcome : uint8
{
	Completed                                = 0,
	Failed                                   = 1,
	Cancelled                                = 2,
	EActivityOutcome_MAX                     = 3,
};

// ScriptStruct UCA.AchievementCounterThresholdConfig
// 0x0010 (0x0010 - 0x0000)
struct FAchievementCounterThresholdConfig final
{
public:
	class FName                                   AchievementId;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Value;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSinglePlaythrough;                               // 0x000C(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAchievementCounterThresholdConfig) == 0x000004, "Wrong alignment on FAchievementCounterThresholdConfig");
static_assert(sizeof(FAchievementCounterThresholdConfig) == 0x000010, "Wrong size on FAchievementCounterThresholdConfig");
static_assert(offsetof(FAchievementCounterThresholdConfig, AchievementId) == 0x000000, "Member 'FAchievementCounterThresholdConfig::AchievementId' has a wrong offset!");
static_assert(offsetof(FAchievementCounterThresholdConfig, Value) == 0x000008, "Member 'FAchievementCounterThresholdConfig::Value' has a wrong offset!");
static_assert(offsetof(FAchievementCounterThresholdConfig, IsSinglePlaythrough) == 0x00000C, "Member 'FAchievementCounterThresholdConfig::IsSinglePlaythrough' has a wrong offset!");

// ScriptStruct UCA.AchievementCounterConfig
// 0x0020 (0x0020 - 0x0000)
struct FAchievementCounterConfig final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAchievementCounterType                       Type;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAchievementCounterThresholdConfig> Thresholds;                                        // 0x0010(0x0010)(Edit, EditFixedSize, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAchievementCounterConfig) == 0x000008, "Wrong alignment on FAchievementCounterConfig");
static_assert(sizeof(FAchievementCounterConfig) == 0x000020, "Wrong size on FAchievementCounterConfig");
static_assert(offsetof(FAchievementCounterConfig, Name) == 0x000000, "Member 'FAchievementCounterConfig::Name' has a wrong offset!");
static_assert(offsetof(FAchievementCounterConfig, Type) == 0x000008, "Member 'FAchievementCounterConfig::Type' has a wrong offset!");
static_assert(offsetof(FAchievementCounterConfig, Thresholds) == 0x000010, "Member 'FAchievementCounterConfig::Thresholds' has a wrong offset!");

// ScriptStruct UCA.AchievementHandle
// 0x0000 (0x0008 - 0x0008)
struct FAchievementHandle final : public FNamedHandle
{
};
static_assert(alignof(FAchievementHandle) == 0x000004, "Wrong alignment on FAchievementHandle");
static_assert(sizeof(FAchievementHandle) == 0x000008, "Wrong size on FAchievementHandle");

// ScriptStruct UCA.CounterHandle
// 0x0000 (0x0008 - 0x0008)
struct FCounterHandle final : public FNamedHandle
{
};
static_assert(alignof(FCounterHandle) == 0x000004, "Wrong alignment on FCounterHandle");
static_assert(sizeof(FCounterHandle) == 0x000008, "Wrong size on FCounterHandle");

// ScriptStruct UCA.IntCounterHandle
// 0x0000 (0x0008 - 0x0008)
struct FIntCounterHandle final : public FNamedHandle
{
};
static_assert(alignof(FIntCounterHandle) == 0x000004, "Wrong alignment on FIntCounterHandle");
static_assert(sizeof(FIntCounterHandle) == 0x000008, "Wrong size on FIntCounterHandle");

// ScriptStruct UCA.FloatCounterHandle
// 0x0000 (0x0008 - 0x0008)
struct FFloatCounterHandle final : public FNamedHandle
{
};
static_assert(alignof(FFloatCounterHandle) == 0x000004, "Wrong alignment on FFloatCounterHandle");
static_assert(sizeof(FFloatCounterHandle) == 0x000008, "Wrong size on FFloatCounterHandle");

// ScriptStruct UCA.CollectionHandle
// 0x0000 (0x0008 - 0x0008)
struct FCollectionHandle final : public FNamedHandle
{
};
static_assert(alignof(FCollectionHandle) == 0x000004, "Wrong alignment on FCollectionHandle");
static_assert(sizeof(FCollectionHandle) == 0x000008, "Wrong size on FCollectionHandle");

// ScriptStruct UCA.ThresholdSaveData
// 0x000C (0x000C - 0x0000)
struct FThresholdSaveData final
{
public:
	class FName                                   AchievementId;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUnlocked;                                        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FThresholdSaveData) == 0x000004, "Wrong alignment on FThresholdSaveData");
static_assert(sizeof(FThresholdSaveData) == 0x00000C, "Wrong size on FThresholdSaveData");
static_assert(offsetof(FThresholdSaveData, AchievementId) == 0x000000, "Member 'FThresholdSaveData::AchievementId' has a wrong offset!");
static_assert(offsetof(FThresholdSaveData, IsUnlocked) == 0x000008, "Member 'FThresholdSaveData::IsUnlocked' has a wrong offset!");

// ScriptStruct UCA.SimpleCounterSaveData
// 0x0014 (0x0014 - 0x0000)
struct FSimpleCounterSaveData final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AchievementId;                                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUnlocked;                                        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSimpleCounterSaveData) == 0x000004, "Wrong alignment on FSimpleCounterSaveData");
static_assert(sizeof(FSimpleCounterSaveData) == 0x000014, "Wrong size on FSimpleCounterSaveData");
static_assert(offsetof(FSimpleCounterSaveData, Name) == 0x000000, "Member 'FSimpleCounterSaveData::Name' has a wrong offset!");
static_assert(offsetof(FSimpleCounterSaveData, AchievementId) == 0x000008, "Member 'FSimpleCounterSaveData::AchievementId' has a wrong offset!");
static_assert(offsetof(FSimpleCounterSaveData, IsUnlocked) == 0x000010, "Member 'FSimpleCounterSaveData::IsUnlocked' has a wrong offset!");

// ScriptStruct UCA.IntegerCounterSaveData
// 0x0020 (0x0020 - 0x0000)
struct FIntegerCounterSaveData final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FThresholdSaveData>             Thresholds;                                        // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint32                                        Value;                                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIntegerCounterSaveData) == 0x000008, "Wrong alignment on FIntegerCounterSaveData");
static_assert(sizeof(FIntegerCounterSaveData) == 0x000020, "Wrong size on FIntegerCounterSaveData");
static_assert(offsetof(FIntegerCounterSaveData, Name) == 0x000000, "Member 'FIntegerCounterSaveData::Name' has a wrong offset!");
static_assert(offsetof(FIntegerCounterSaveData, Thresholds) == 0x000008, "Member 'FIntegerCounterSaveData::Thresholds' has a wrong offset!");
static_assert(offsetof(FIntegerCounterSaveData, Value) == 0x000018, "Member 'FIntegerCounterSaveData::Value' has a wrong offset!");

// ScriptStruct UCA.FloatCounterSaveData
// 0x0020 (0x0020 - 0x0000)
struct FFloatCounterSaveData final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FThresholdSaveData>             Thresholds;                                        // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFloatCounterSaveData) == 0x000008, "Wrong alignment on FFloatCounterSaveData");
static_assert(sizeof(FFloatCounterSaveData) == 0x000020, "Wrong size on FFloatCounterSaveData");
static_assert(offsetof(FFloatCounterSaveData, Name) == 0x000000, "Member 'FFloatCounterSaveData::Name' has a wrong offset!");
static_assert(offsetof(FFloatCounterSaveData, Thresholds) == 0x000008, "Member 'FFloatCounterSaveData::Thresholds' has a wrong offset!");
static_assert(offsetof(FFloatCounterSaveData, Value) == 0x000018, "Member 'FFloatCounterSaveData::Value' has a wrong offset!");

// ScriptStruct UCA.CollectionCounterSaveData
// 0x0028 (0x0028 - 0x0000)
struct FCollectionCounterSaveData final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FThresholdSaveData>             Thresholds;                                        // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          Value;                                             // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCollectionCounterSaveData) == 0x000008, "Wrong alignment on FCollectionCounterSaveData");
static_assert(sizeof(FCollectionCounterSaveData) == 0x000028, "Wrong size on FCollectionCounterSaveData");
static_assert(offsetof(FCollectionCounterSaveData, Name) == 0x000000, "Member 'FCollectionCounterSaveData::Name' has a wrong offset!");
static_assert(offsetof(FCollectionCounterSaveData, Thresholds) == 0x000008, "Member 'FCollectionCounterSaveData::Thresholds' has a wrong offset!");
static_assert(offsetof(FCollectionCounterSaveData, Value) == 0x000018, "Member 'FCollectionCounterSaveData::Value' has a wrong offset!");

// ScriptStruct UCA.IntegerCounterGameSaveData
// 0x000C (0x000C - 0x0000)
struct FIntegerCounterGameSaveData final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Value;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIntegerCounterGameSaveData) == 0x000004, "Wrong alignment on FIntegerCounterGameSaveData");
static_assert(sizeof(FIntegerCounterGameSaveData) == 0x00000C, "Wrong size on FIntegerCounterGameSaveData");
static_assert(offsetof(FIntegerCounterGameSaveData, Name) == 0x000000, "Member 'FIntegerCounterGameSaveData::Name' has a wrong offset!");
static_assert(offsetof(FIntegerCounterGameSaveData, Value) == 0x000008, "Member 'FIntegerCounterGameSaveData::Value' has a wrong offset!");

// ScriptStruct UCA.FloatCounterGameSaveData
// 0x000C (0x000C - 0x0000)
struct FFloatCounterGameSaveData final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFloatCounterGameSaveData) == 0x000004, "Wrong alignment on FFloatCounterGameSaveData");
static_assert(sizeof(FFloatCounterGameSaveData) == 0x00000C, "Wrong size on FFloatCounterGameSaveData");
static_assert(offsetof(FFloatCounterGameSaveData, Name) == 0x000000, "Member 'FFloatCounterGameSaveData::Name' has a wrong offset!");
static_assert(offsetof(FFloatCounterGameSaveData, Value) == 0x000008, "Member 'FFloatCounterGameSaveData::Value' has a wrong offset!");

// ScriptStruct UCA.CollectionCounterGameSaveData
// 0x0018 (0x0018 - 0x0000)
struct FCollectionCounterGameSaveData final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          Value;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCollectionCounterGameSaveData) == 0x000008, "Wrong alignment on FCollectionCounterGameSaveData");
static_assert(sizeof(FCollectionCounterGameSaveData) == 0x000018, "Wrong size on FCollectionCounterGameSaveData");
static_assert(offsetof(FCollectionCounterGameSaveData, Name) == 0x000000, "Member 'FCollectionCounterGameSaveData::Name' has a wrong offset!");
static_assert(offsetof(FCollectionCounterGameSaveData, Value) == 0x000008, "Member 'FCollectionCounterGameSaveData::Value' has a wrong offset!");

// ScriptStruct UCA.AchievementsGameSaveData
// 0x0030 (0x0030 - 0x0000)
struct FAchievementsGameSaveData final
{
public:
	TArray<struct FIntegerCounterGameSaveData>    IntegerCounters;                                   // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFloatCounterGameSaveData>      FloatCounters;                                     // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCollectionCounterGameSaveData> CollectionCounters;                                // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAchievementsGameSaveData) == 0x000008, "Wrong alignment on FAchievementsGameSaveData");
static_assert(sizeof(FAchievementsGameSaveData) == 0x000030, "Wrong size on FAchievementsGameSaveData");
static_assert(offsetof(FAchievementsGameSaveData, IntegerCounters) == 0x000000, "Member 'FAchievementsGameSaveData::IntegerCounters' has a wrong offset!");
static_assert(offsetof(FAchievementsGameSaveData, FloatCounters) == 0x000010, "Member 'FAchievementsGameSaveData::FloatCounters' has a wrong offset!");
static_assert(offsetof(FAchievementsGameSaveData, CollectionCounters) == 0x000020, "Member 'FAchievementsGameSaveData::CollectionCounters' has a wrong offset!");

// ScriptStruct UCA.HintEntity
// 0x0001 (0x0001 - 0x0000)
struct FHintEntity final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHintEntity) == 0x000001, "Wrong alignment on FHintEntity");
static_assert(sizeof(FHintEntity) == 0x000001, "Wrong size on FHintEntity");

// ScriptStruct UCA.BaseActivityTaskConfig
// 0x000C (0x000C - 0x0000)
struct FBaseActivityTaskConfig
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Flags;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBaseActivityTaskConfig) == 0x000004, "Wrong alignment on FBaseActivityTaskConfig");
static_assert(sizeof(FBaseActivityTaskConfig) == 0x00000C, "Wrong size on FBaseActivityTaskConfig");
static_assert(offsetof(FBaseActivityTaskConfig, Name) == 0x000000, "Member 'FBaseActivityTaskConfig::Name' has a wrong offset!");
static_assert(offsetof(FBaseActivityTaskConfig, Flags) == 0x000008, "Member 'FBaseActivityTaskConfig::Flags' has a wrong offset!");

// ScriptStruct UCA.ActivitySubTaskConfig
// 0x0000 (0x000C - 0x000C)
struct FActivitySubTaskConfig final : public FBaseActivityTaskConfig
{
};
static_assert(alignof(FActivitySubTaskConfig) == 0x000004, "Wrong alignment on FActivitySubTaskConfig");
static_assert(sizeof(FActivitySubTaskConfig) == 0x00000C, "Wrong size on FActivitySubTaskConfig");

// ScriptStruct UCA.ActivityTaskConfig
// 0x0014 (0x0020 - 0x000C)
struct FActivityTaskConfig final : public FBaseActivityTaskConfig
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FActivitySubTaskConfig>         SubTasks;                                          // 0x0010(0x0010)(Edit, EditFixedSize, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActivityTaskConfig) == 0x000008, "Wrong alignment on FActivityTaskConfig");
static_assert(sizeof(FActivityTaskConfig) == 0x000020, "Wrong size on FActivityTaskConfig");
static_assert(offsetof(FActivityTaskConfig, SubTasks) == 0x000010, "Member 'FActivityTaskConfig::SubTasks' has a wrong offset!");

// ScriptStruct UCA.ActivityConfig
// 0x0020 (0x0020 - 0x0000)
struct FActivityConfig final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FActivityTaskConfig>            Tasks;                                             // 0x0008(0x0010)(Edit, EditFixedSize, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint32                                        Flags;                                             // 0x0018(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActivityConfig) == 0x000008, "Wrong alignment on FActivityConfig");
static_assert(sizeof(FActivityConfig) == 0x000020, "Wrong size on FActivityConfig");
static_assert(offsetof(FActivityConfig, Name) == 0x000000, "Member 'FActivityConfig::Name' has a wrong offset!");
static_assert(offsetof(FActivityConfig, Tasks) == 0x000008, "Member 'FActivityConfig::Tasks' has a wrong offset!");
static_assert(offsetof(FActivityConfig, Flags) == 0x000018, "Member 'FActivityConfig::Flags' has a wrong offset!");

// ScriptStruct UCA.ZoneConfig
// 0x0008 (0x0008 - 0x0000)
struct FZoneConfig final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZoneConfig) == 0x000004, "Wrong alignment on FZoneConfig");
static_assert(sizeof(FZoneConfig) == 0x000008, "Wrong size on FZoneConfig");
static_assert(offsetof(FZoneConfig, Name) == 0x000000, "Member 'FZoneConfig::Name' has a wrong offset!");

// ScriptStruct UCA.ActivityZoneHandle
// 0x0000 (0x0008 - 0x0008)
struct FActivityZoneHandle final : public FNamedHandle
{
};
static_assert(alignof(FActivityZoneHandle) == 0x000004, "Wrong alignment on FActivityZoneHandle");
static_assert(sizeof(FActivityZoneHandle) == 0x000008, "Wrong size on FActivityZoneHandle");

// ScriptStruct UCA.ActivityHandle
// 0x0000 (0x0008 - 0x0008)
struct FActivityHandle final : public FNamedHandle
{
};
static_assert(alignof(FActivityHandle) == 0x000004, "Wrong alignment on FActivityHandle");
static_assert(sizeof(FActivityHandle) == 0x000008, "Wrong size on FActivityHandle");

// ScriptStruct UCA.ActivitySaveData
// 0x0010 (0x0010 - 0x0000)
struct FActivitySaveData final
{
public:
	class FName                                   ActivityId;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Flags;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        PendingState;                                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActivitySaveData) == 0x000004, "Wrong alignment on FActivitySaveData");
static_assert(sizeof(FActivitySaveData) == 0x000010, "Wrong size on FActivitySaveData");
static_assert(offsetof(FActivitySaveData, ActivityId) == 0x000000, "Member 'FActivitySaveData::ActivityId' has a wrong offset!");
static_assert(offsetof(FActivitySaveData, Flags) == 0x000008, "Member 'FActivitySaveData::Flags' has a wrong offset!");
static_assert(offsetof(FActivitySaveData, PendingState) == 0x00000C, "Member 'FActivitySaveData::PendingState' has a wrong offset!");

// ScriptStruct UCA.ActivityGameSaveData
// 0x0018 (0x0018 - 0x0000)
struct FActivityGameSaveData final
{
public:
	class FName                                   ActiveZone;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FActivitySaveData>              Activities;                                        // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActivityGameSaveData) == 0x000008, "Wrong alignment on FActivityGameSaveData");
static_assert(sizeof(FActivityGameSaveData) == 0x000018, "Wrong size on FActivityGameSaveData");
static_assert(offsetof(FActivityGameSaveData, ActiveZone) == 0x000000, "Member 'FActivityGameSaveData::ActiveZone' has a wrong offset!");
static_assert(offsetof(FActivityGameSaveData, Activities) == 0x000008, "Member 'FActivityGameSaveData::Activities' has a wrong offset!");

}

