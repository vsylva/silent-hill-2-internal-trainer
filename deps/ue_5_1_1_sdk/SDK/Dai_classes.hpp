#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Dai

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "Dai_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Class Dai.GraphObject
// 0x0040 (0x0068 - 0x0028)
class UGraphObject : public UObject
{
public:
	class FName                                   _ObjectName;                                       // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                _Context;                                          // 0x0030(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGraphObject*                           _Parent;                                           // 0x0038(0x0008)(ZeroConstructor, NoDestructor, Protected, TextExportTransient, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_40[0x28];                                      // 0x0040(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetRuntimeInfo(const class FString& Text);

	class FString GetDisplayName() const;
	class FString GetPropertiesDescription() const;
	class FString GetRuntimeInfo() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GraphObject">();
	}
	static class UGraphObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGraphObject>();
	}
};
static_assert(alignof(UGraphObject) == 0x000008, "Wrong alignment on UGraphObject");
static_assert(sizeof(UGraphObject) == 0x000068, "Wrong size on UGraphObject");
static_assert(offsetof(UGraphObject, _ObjectName) == 0x000028, "Member 'UGraphObject::_ObjectName' has a wrong offset!");
static_assert(offsetof(UGraphObject, _Context) == 0x000030, "Member 'UGraphObject::_Context' has a wrong offset!");
static_assert(offsetof(UGraphObject, _Parent) == 0x000038, "Member 'UGraphObject::_Parent' has a wrong offset!");

// Class Dai.DaiCondition
// 0x0020 (0x0088 - 0x0068)
class UDaiCondition : public UGraphObject
{
public:
	bool                                          _InversedCondition;                                // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDaiNotifies                           _OnSuccessNotifies;                                // 0x0070(0x0018)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	static void AddConditionsListener(struct FDaiConditions& Conditions, TScriptInterface<class IDaiConditionsListenerInterface> Listener);
	static bool CompareFloat(ENumberCompareOperation Operation, float A, float B);
	static bool CompareInt(ENumberCompareOperation Operation, int32 A, int32 B);
	static class FString GetOperationSymbol(ENumberCompareOperation Operation);
	static bool PerformConditions(const struct FDaiConditions& Conditions, class UObject* Context, class AActor* Caller, bool Debug);
	static void RemoveConditionsListener(struct FDaiConditions& Conditions, TScriptInterface<class IDaiConditionsListenerInterface> Listener);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DaiCondition">();
	}
	static class UDaiCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDaiCondition>();
	}
};
static_assert(alignof(UDaiCondition) == 0x000008, "Wrong alignment on UDaiCondition");
static_assert(sizeof(UDaiCondition) == 0x000088, "Wrong size on UDaiCondition");
static_assert(offsetof(UDaiCondition, _InversedCondition) == 0x000068, "Member 'UDaiCondition::_InversedCondition' has a wrong offset!");
static_assert(offsetof(UDaiCondition, _OnSuccessNotifies) == 0x000070, "Member 'UDaiCondition::_OnSuccessNotifies' has a wrong offset!");

// Class Dai.ScriptDaiCondition
// 0x0000 (0x0088 - 0x0088)
class UScriptDaiCondition : public UDaiCondition
{
public:
	bool ScriptPerformCondition(class UObject* Context, class AActor* Caller);

	class FString ScriptToString() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScriptDaiCondition">();
	}
	static class UScriptDaiCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScriptDaiCondition>();
	}
};
static_assert(alignof(UScriptDaiCondition) == 0x000008, "Wrong alignment on UScriptDaiCondition");
static_assert(sizeof(UScriptDaiCondition) == 0x000088, "Wrong size on UScriptDaiCondition");

// Class Dai.AreInSameLocation
// 0x01D8 (0x0260 - 0x0088)
class UAreInSameLocation final : public UDaiCondition
{
public:
	EDaiDistanceType                              _GeometricDistanceType;                            // 0x0088(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDaiContext                            _ObjectA;                                          // 0x0090(0x0080)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FDaiContext                            _ObjectB;                                          // 0x0110(0x0080)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         _MaxDistance;                                      // 0x0190(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _IncludeOverlapA;                                  // 0x0194(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _IncludeOverlapB;                                  // 0x0195(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _Fixed2;                                           // 0x0196(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_197[0x1];                                      // 0x0197(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDaiTarget                             _TargetA;                                          // 0x0198(0x0058)(NativeAccessSpecifierPublic)
	struct FDaiTarget                             _TargetB;                                          // 0x01F0(0x0058)(NativeAccessSpecifierPublic)
	bool                                          _Fixed;                                            // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_249[0x3];                                      // 0x0249(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           _FirstActorTag;                                    // 0x024C(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           _SecondActorTag;                                   // 0x0254(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _OverlapFirst;                                     // 0x025C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _OverlapSecond;                                    // 0x025D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25E[0x2];                                      // 0x025E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AreInSameLocation">();
	}
	static class UAreInSameLocation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAreInSameLocation>();
	}
};
static_assert(alignof(UAreInSameLocation) == 0x000008, "Wrong alignment on UAreInSameLocation");
static_assert(sizeof(UAreInSameLocation) == 0x000260, "Wrong size on UAreInSameLocation");
static_assert(offsetof(UAreInSameLocation, _GeometricDistanceType) == 0x000088, "Member 'UAreInSameLocation::_GeometricDistanceType' has a wrong offset!");
static_assert(offsetof(UAreInSameLocation, _ObjectA) == 0x000090, "Member 'UAreInSameLocation::_ObjectA' has a wrong offset!");
static_assert(offsetof(UAreInSameLocation, _ObjectB) == 0x000110, "Member 'UAreInSameLocation::_ObjectB' has a wrong offset!");
static_assert(offsetof(UAreInSameLocation, _MaxDistance) == 0x000190, "Member 'UAreInSameLocation::_MaxDistance' has a wrong offset!");
static_assert(offsetof(UAreInSameLocation, _IncludeOverlapA) == 0x000194, "Member 'UAreInSameLocation::_IncludeOverlapA' has a wrong offset!");
static_assert(offsetof(UAreInSameLocation, _IncludeOverlapB) == 0x000195, "Member 'UAreInSameLocation::_IncludeOverlapB' has a wrong offset!");
static_assert(offsetof(UAreInSameLocation, _Fixed2) == 0x000196, "Member 'UAreInSameLocation::_Fixed2' has a wrong offset!");
static_assert(offsetof(UAreInSameLocation, _TargetA) == 0x000198, "Member 'UAreInSameLocation::_TargetA' has a wrong offset!");
static_assert(offsetof(UAreInSameLocation, _TargetB) == 0x0001F0, "Member 'UAreInSameLocation::_TargetB' has a wrong offset!");
static_assert(offsetof(UAreInSameLocation, _Fixed) == 0x000248, "Member 'UAreInSameLocation::_Fixed' has a wrong offset!");
static_assert(offsetof(UAreInSameLocation, _FirstActorTag) == 0x00024C, "Member 'UAreInSameLocation::_FirstActorTag' has a wrong offset!");
static_assert(offsetof(UAreInSameLocation, _SecondActorTag) == 0x000254, "Member 'UAreInSameLocation::_SecondActorTag' has a wrong offset!");
static_assert(offsetof(UAreInSameLocation, _OverlapFirst) == 0x00025C, "Member 'UAreInSameLocation::_OverlapFirst' has a wrong offset!");
static_assert(offsetof(UAreInSameLocation, _OverlapSecond) == 0x00025D, "Member 'UAreInSameLocation::_OverlapSecond' has a wrong offset!");

// Class Dai.DaiContextGetter
// 0x0008 (0x0070 - 0x0068)
class UDaiContextGetter : public UGraphObject
{
public:
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DaiContextGetter">();
	}
	static class UDaiContextGetter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDaiContextGetter>();
	}
};
static_assert(alignof(UDaiContextGetter) == 0x000008, "Wrong alignment on UDaiContextGetter");
static_assert(sizeof(UDaiContextGetter) == 0x000070, "Wrong size on UDaiContextGetter");

// Class Dai.DaiAnimSet
// 0x0100 (0x01A0 - 0x00A0)
class UDaiAnimSet final : public UActorComponent
{
public:
	TMap<struct FGameplayTag, struct FGameplayTagContainer> _InjectedTags;                                     // 0x00A0(0x0050)(Edit, NativeAccessSpecifierPrivate)
	TArray<class UDataTable*>                     _AnimTable;                                        // 0x00F0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<struct FGameplayTag, struct FDaiAnimsList> _AnimSet;                                          // 0x0100(0x0050)(Edit, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPrivate)
	TMap<struct FGameplayTag, struct FDaiAnimsList> _InjectedSet;                                      // 0x0150(0x0050)(Edit, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPrivate)

public:
	static struct FDaiAnimPlayParams GetBestAngleAnimParams(const TArray<struct FDaiAnimPlayParams>& PlayParams, float Angle);
	static struct FDaiAnimPlayParams GetRandomAnimParams(const TArray<struct FDaiAnimPlayParams>& PlayParams);

	void ClearInjection(const struct FGameplayTag& AnimSet);
	void InjectAnim(const struct FGameplayTag& AnimSet, const struct FDaiAnimPlayParams& Injection);
	void InjectAnimsList(const struct FGameplayTag& AnimSet, const TArray<struct FDaiAnimPlayParams>& Injection);
	void InjectAnimsTag(const struct FGameplayTag& AnimSet, const struct FGameplayTagContainer& Injection);

	TArray<struct FDaiAnimPlayParams> GetAllAnimsByTag(const struct FGameplayTagContainer& Tags) const;
	class UAnimationAsset* GetAnimByTag(const struct FGameplayTagContainer& Tags, struct FDaiAnimPlayParams* PlayParams) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DaiAnimSet">();
	}
	static class UDaiAnimSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDaiAnimSet>();
	}
};
static_assert(alignof(UDaiAnimSet) == 0x000008, "Wrong alignment on UDaiAnimSet");
static_assert(sizeof(UDaiAnimSet) == 0x0001A0, "Wrong size on UDaiAnimSet");
static_assert(offsetof(UDaiAnimSet, _InjectedTags) == 0x0000A0, "Member 'UDaiAnimSet::_InjectedTags' has a wrong offset!");
static_assert(offsetof(UDaiAnimSet, _AnimTable) == 0x0000F0, "Member 'UDaiAnimSet::_AnimTable' has a wrong offset!");
static_assert(offsetof(UDaiAnimSet, _AnimSet) == 0x000100, "Member 'UDaiAnimSet::_AnimSet' has a wrong offset!");
static_assert(offsetof(UDaiAnimSet, _InjectedSet) == 0x000150, "Member 'UDaiAnimSet::_InjectedSet' has a wrong offset!");

// Class Dai.DaiAnimSetInterface
// 0x0000 (0x0028 - 0x0028)
class IDaiAnimSetInterface final : public IInterface
{
public:
	TArray<struct FDaiAnimPlayParams> GetAllAnimsByTag(const struct FGameplayTagContainer& Tags) const;
	class UAnimationAsset* GetAnimByTag(const struct FGameplayTag& Tag, struct FDaiAnimPlayParams* PlayParams) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DaiAnimSetInterface">();
	}
	static class IDaiAnimSetInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IDaiAnimSetInterface>();
	}
};
static_assert(alignof(IDaiAnimSetInterface) == 0x000008, "Wrong alignment on IDaiAnimSetInterface");
static_assert(sizeof(IDaiAnimSetInterface) == 0x000028, "Wrong size on IDaiAnimSetInterface");

// Class Dai.CompositeCondition
// 0x0030 (0x00B8 - 0x0088)
class UCompositeCondition final : public UDaiCondition
{
public:
	struct FDaiConditions                         _Conditions;                                       // 0x0088(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CompositeCondition">();
	}
	static class UCompositeCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCompositeCondition>();
	}
};
static_assert(alignof(UCompositeCondition) == 0x000008, "Wrong alignment on UCompositeCondition");
static_assert(sizeof(UCompositeCondition) == 0x0000B8, "Wrong size on UCompositeCondition");
static_assert(offsetof(UCompositeCondition, _Conditions) == 0x000088, "Member 'UCompositeCondition::_Conditions' has a wrong offset!");

// Class Dai.IsInCone
// 0x0118 (0x01A0 - 0x0088)
class UIsInCone final : public UDaiCondition
{
public:
	struct FDaiContext                            _Observer;                                         // 0x0088(0x0080)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FDaiContext                            _Observed;                                         // 0x0108(0x0080)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          _Fixed;                                            // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           _ObserverTag;                                      // 0x018C(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           _ObservedTag;                                      // 0x0194(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _ConeHalfAngle;                                    // 0x019C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IsInCone">();
	}
	static class UIsInCone* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIsInCone>();
	}
};
static_assert(alignof(UIsInCone) == 0x000008, "Wrong alignment on UIsInCone");
static_assert(sizeof(UIsInCone) == 0x0001A0, "Wrong size on UIsInCone");
static_assert(offsetof(UIsInCone, _Observer) == 0x000088, "Member 'UIsInCone::_Observer' has a wrong offset!");
static_assert(offsetof(UIsInCone, _Observed) == 0x000108, "Member 'UIsInCone::_Observed' has a wrong offset!");
static_assert(offsetof(UIsInCone, _Fixed) == 0x000188, "Member 'UIsInCone::_Fixed' has a wrong offset!");
static_assert(offsetof(UIsInCone, _ObserverTag) == 0x00018C, "Member 'UIsInCone::_ObserverTag' has a wrong offset!");
static_assert(offsetof(UIsInCone, _ObservedTag) == 0x000194, "Member 'UIsInCone::_ObservedTag' has a wrong offset!");
static_assert(offsetof(UIsInCone, _ConeHalfAngle) == 0x00019C, "Member 'UIsInCone::_ConeHalfAngle' has a wrong offset!");

// Class Dai.IsTracebleByPlayer
// 0x0088 (0x0110 - 0x0088)
class UIsTracebleByPlayer final : public UDaiCondition
{
public:
	struct FDaiContext                            _Observed;                                         // 0x0088(0x0080)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	ETraceableByPlayerLevel                       _TraceLevel;                                       // 0x0108(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceableByPlayerConditions                  _TraceCondition;                                   // 0x0109(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A[0x6];                                      // 0x010A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IsTracebleByPlayer">();
	}
	static class UIsTracebleByPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIsTracebleByPlayer>();
	}
};
static_assert(alignof(UIsTracebleByPlayer) == 0x000008, "Wrong alignment on UIsTracebleByPlayer");
static_assert(sizeof(UIsTracebleByPlayer) == 0x000110, "Wrong size on UIsTracebleByPlayer");
static_assert(offsetof(UIsTracebleByPlayer, _Observed) == 0x000088, "Member 'UIsTracebleByPlayer::_Observed' has a wrong offset!");
static_assert(offsetof(UIsTracebleByPlayer, _TraceLevel) == 0x000108, "Member 'UIsTracebleByPlayer::_TraceLevel' has a wrong offset!");
static_assert(offsetof(UIsTracebleByPlayer, _TraceCondition) == 0x000109, "Member 'UIsTracebleByPlayer::_TraceCondition' has a wrong offset!");

// Class Dai.IsVisibleOnScreen
// 0x0088 (0x0110 - 0x0088)
class UIsVisibleOnScreen final : public UDaiCondition
{
public:
	struct FDaiContext                            _Observed;                                         // 0x0088(0x0080)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         _FOVDownScale;                                     // 0x0108(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IsVisibleOnScreen">();
	}
	static class UIsVisibleOnScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIsVisibleOnScreen>();
	}
};
static_assert(alignof(UIsVisibleOnScreen) == 0x000008, "Wrong alignment on UIsVisibleOnScreen");
static_assert(sizeof(UIsVisibleOnScreen) == 0x000110, "Wrong size on UIsVisibleOnScreen");
static_assert(offsetof(UIsVisibleOnScreen, _Observed) == 0x000088, "Member 'UIsVisibleOnScreen::_Observed' has a wrong offset!");
static_assert(offsetof(UIsVisibleOnScreen, _FOVDownScale) == 0x000108, "Member 'UIsVisibleOnScreen::_FOVDownScale' has a wrong offset!");

// Class Dai.CheckGameplayTags
// 0x00B8 (0x0140 - 0x0088)
class UCheckGameplayTags final : public UDaiCondition
{
public:
	struct FDaiContext                            _Observed;                                         // 0x0088(0x0080)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          _Fixed;                                            // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           _ActorTag;                                         // 0x010C(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayContainerMatchType                   _TagsToMatch;                                      // 0x0114(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  _Tags;                                             // 0x0118(0x0020)(Edit, NativeAccessSpecifierPublic)
	bool                                          _CheckComponents;                                  // 0x0138(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheckGameplayTags">();
	}
	static class UCheckGameplayTags* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheckGameplayTags>();
	}
};
static_assert(alignof(UCheckGameplayTags) == 0x000008, "Wrong alignment on UCheckGameplayTags");
static_assert(sizeof(UCheckGameplayTags) == 0x000140, "Wrong size on UCheckGameplayTags");
static_assert(offsetof(UCheckGameplayTags, _Observed) == 0x000088, "Member 'UCheckGameplayTags::_Observed' has a wrong offset!");
static_assert(offsetof(UCheckGameplayTags, _Fixed) == 0x000108, "Member 'UCheckGameplayTags::_Fixed' has a wrong offset!");
static_assert(offsetof(UCheckGameplayTags, _ActorTag) == 0x00010C, "Member 'UCheckGameplayTags::_ActorTag' has a wrong offset!");
static_assert(offsetof(UCheckGameplayTags, _TagsToMatch) == 0x000114, "Member 'UCheckGameplayTags::_TagsToMatch' has a wrong offset!");
static_assert(offsetof(UCheckGameplayTags, _Tags) == 0x000118, "Member 'UCheckGameplayTags::_Tags' has a wrong offset!");
static_assert(offsetof(UCheckGameplayTags, _CheckComponents) == 0x000138, "Member 'UCheckGameplayTags::_CheckComponents' has a wrong offset!");

// Class Dai.CheckTags
// 0x00A0 (0x0128 - 0x0088)
class UCheckTags final : public UDaiCondition
{
public:
	struct FDaiContext                            _Observed;                                         // 0x0088(0x0080)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          _Fixed;                                            // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           _ActorTag;                                         // 0x010C(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayContainerMatchType                   _TagsToMatch;                                      // 0x0114(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           _Tags;                                             // 0x0118(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheckTags">();
	}
	static class UCheckTags* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheckTags>();
	}
};
static_assert(alignof(UCheckTags) == 0x000008, "Wrong alignment on UCheckTags");
static_assert(sizeof(UCheckTags) == 0x000128, "Wrong size on UCheckTags");
static_assert(offsetof(UCheckTags, _Observed) == 0x000088, "Member 'UCheckTags::_Observed' has a wrong offset!");
static_assert(offsetof(UCheckTags, _Fixed) == 0x000108, "Member 'UCheckTags::_Fixed' has a wrong offset!");
static_assert(offsetof(UCheckTags, _ActorTag) == 0x00010C, "Member 'UCheckTags::_ActorTag' has a wrong offset!");
static_assert(offsetof(UCheckTags, _TagsToMatch) == 0x000114, "Member 'UCheckTags::_TagsToMatch' has a wrong offset!");
static_assert(offsetof(UCheckTags, _Tags) == 0x000118, "Member 'UCheckTags::_Tags' has a wrong offset!");

// Class Dai.DaiConditionsListenerInterface
// 0x0000 (0x0028 - 0x0028)
class IDaiConditionsListenerInterface final : public IInterface
{
public:
	void OnConditionSuccess();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DaiConditionsListenerInterface">();
	}
	static class IDaiConditionsListenerInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IDaiConditionsListenerInterface>();
	}
};
static_assert(alignof(IDaiConditionsListenerInterface) == 0x000008, "Wrong alignment on IDaiConditionsListenerInterface");
static_assert(sizeof(IDaiConditionsListenerInterface) == 0x000028, "Wrong size on IDaiConditionsListenerInterface");

// Class Dai.ScriptDaiContextGetter
// 0x0008 (0x0078 - 0x0070)
class UScriptDaiContextGetter final : public UDaiContextGetter
{
public:
	uint8                                         Pad_70[0x8];                                       // 0x0070(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FString ScriptGetDescription() const;
	TArray<class UObject*> ScriptProvideObjectSet(class UObject* Context, class AActor* Caller) const;
	class UObject* ScriptProvideSingleObject(class UObject* Context, class AActor* Caller) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScriptDaiContextGetter">();
	}
	static class UScriptDaiContextGetter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScriptDaiContextGetter>();
	}
};
static_assert(alignof(UScriptDaiContextGetter) == 0x000008, "Wrong alignment on UScriptDaiContextGetter");
static_assert(sizeof(UScriptDaiContextGetter) == 0x000078, "Wrong size on UScriptDaiContextGetter");

// Class Dai.ProvideComponent
// 0x0098 (0x0108 - 0x0070)
class UProvideComponent final : public UDaiContextGetter
{
public:
	struct FDaiContext                            _Actor;                                            // 0x0070(0x0080)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	bool                                          _LockClass;                                        // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UActorComponent>            _Class;                                            // 0x00F8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   _Tag;                                              // 0x0100(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProvideComponent">();
	}
	static class UProvideComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProvideComponent>();
	}
};
static_assert(alignof(UProvideComponent) == 0x000008, "Wrong alignment on UProvideComponent");
static_assert(sizeof(UProvideComponent) == 0x000108, "Wrong size on UProvideComponent");
static_assert(offsetof(UProvideComponent, _Actor) == 0x000070, "Member 'UProvideComponent::_Actor' has a wrong offset!");
static_assert(offsetof(UProvideComponent, _LockClass) == 0x0000F0, "Member 'UProvideComponent::_LockClass' has a wrong offset!");
static_assert(offsetof(UProvideComponent, _Class) == 0x0000F8, "Member 'UProvideComponent::_Class' has a wrong offset!");
static_assert(offsetof(UProvideComponent, _Tag) == 0x000100, "Member 'UProvideComponent::_Tag' has a wrong offset!");

// Class Dai.ProvideOuter
// 0x0000 (0x0070 - 0x0070)
class UProvideOuter final : public UDaiContextGetter
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProvideOuter">();
	}
	static class UProvideOuter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProvideOuter>();
	}
};
static_assert(alignof(UProvideOuter) == 0x000008, "Wrong alignment on UProvideOuter");
static_assert(sizeof(UProvideOuter) == 0x000070, "Wrong size on UProvideOuter");

// Class Dai.ProvidePlayer
// 0x0008 (0x0078 - 0x0070)
class UProvidePlayer final : public UDaiContextGetter
{
public:
	int32                                         _Index;                                            // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProvidePlayer">();
	}
	static class UProvidePlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProvidePlayer>();
	}
};
static_assert(alignof(UProvidePlayer) == 0x000008, "Wrong alignment on UProvidePlayer");
static_assert(sizeof(UProvidePlayer) == 0x000078, "Wrong size on UProvidePlayer");
static_assert(offsetof(UProvidePlayer, _Index) == 0x000070, "Member 'UProvidePlayer::_Index' has a wrong offset!");

// Class Dai.DaiFunctions
// 0x0000 (0x0028 - 0x0028)
class UDaiFunctions : public UBlueprintFunctionLibrary
{
public:
	static bool blockadeIsBlocked(const struct FDaiBlockade& blockade);
	static bool blockadeIsBlockedBy(const struct FDaiBlockade& blockade, class FName Tag);
	static void blockadeSetBlocked(struct FDaiBlockade& blockade, bool Set, class FName Tag);
	static class FString blockadeToString(const struct FDaiBlockade& blockade);
	static bool CheckGameplayTags(class AActor* Actor, const struct FGameplayTagContainer& Tags, EGameplayContainerMatchType MatchType, bool CheckComponents);
	static int32 ClearBit(int32 bitmask, int32 Index_0);
	static bool ContainsAnimation(class UAnimMontage* Montage, class UAnimSequenceBase* Anim);
	static class AActor* FindActorByActorName(const class UObject* Context, const struct FDaiActorName& Name_0, TSubclassOf<class AActor> ActorClass);
	static class AActor* FindActorByGameplayTag(const class UObject* Context, const struct FGameplayTag& Tag, TSubclassOf<class AActor> ActorClass);
	static class AActor* FindActorByName(const class UObject* Context, class FName Name_0, TSubclassOf<class AActor> ActorClass, bool Exact);
	static class AActor* FindActorByTag(const class UObject* Context, class FName Tag, TSubclassOf<class AActor> ActorClass);
	static class AActor* FindActorWithInterface(const class UObject* Context, const struct FGameplayTag& Tag, TSubclassOf<class IInterface> Ainterface);
	static void FindAllActorsByGameplayTag(const class UObject* Context, const struct FGameplayTag& Tag, TSubclassOf<class AActor> ActorClass, TArray<class AActor*>* Actors);
	static void FindAllActorsByTag(const class UObject* Context, class FName Tag, TSubclassOf<class AActor> ActorClass, TArray<class AActor*>* Actors);
	static void FindAllActorsWithComponent(class UObject* Context, TSubclassOf<class UActorComponent> ActorComponent, TArray<class AActor*>* OutActors);
	static void FindAllActorsWithInterface(const class UObject* Context, const struct FGameplayTag& Tag, TSubclassOf<class IInterface> Ainterface, TArray<class AActor*>* OutActors);
	static class AActor* FindNearestActorByGameplayTag(const class UObject* Context, const struct FVector& Origin, const struct FGameplayTag& Tag, TSubclassOf<class AActor> ActorClass);
	static class AActor* FindNearestActorByTag(const class UObject* Context, const struct FVector& Origin, class FName Tag, TSubclassOf<class AActor> ActorClass);
	static class UAnimationAsset* GetAnimByAngle(class AActor* Actor, const struct FGameplayTagContainer& Tags, float Hangle, struct FDaiAnimPlayParams* PlayParams, bool CheckComponents);
	static class UAnimationAsset* GetAnimByTag(class AActor* Actor, const struct FGameplayTag& Tag, struct FDaiAnimPlayParams* PlayParams, bool CheckComponents);
	static class UAnimationAsset* GetAnimByTags(class AActor* Actor, const struct FGameplayTagContainer& Tags, struct FDaiAnimPlayParams* PlayParams, bool CheckComponents);
	static const class UAnimSequence* GetAnimFromSection(class UAnimMontage* Montage, class FName Section);
	static TArray<class UObject*> GetObjectSet(const struct FDaiContext& Query, class UObject* Context, class AActor* Caller, TSubclassOf<class UObject> ObjectClass);
	static class UObject* GetSingleObject(const struct FDaiContext& Query, class UObject* Context, class AActor* Caller, TSubclassOf<class UObject> ObjectClass);
	static bool HasBit(int32 bitmask, int32 Index_0);
	static bool HasGameplayTag(class AActor* Actor, const struct FGameplayTag& Tag, bool CheckComponents);
	static bool HasSlotAnimation(class UAnimMontage* Montage, class FName SlotName);
	static bool IsActorTraceableByPlayer(class APlayerController* PlayerCtrl, class AActor* Actor, const TArray<class AActor*>& IgnoreActors, ETraceableByPlayerLevel TraceLevel, ETraceableByPlayerConditions TraceCondition);
	static bool IsActorVisibleByPlayer(class APlayerController* PlayerCtrl, class AActor* Actor, float FOVDownScale);
	static bool IsComponentMasked(class UPrimitiveComponent* Component, EMaskFilter SearchedMask);
	static bool IsComponentTraceableByPlayer(class APlayerController* PlayerCtrl, class USceneComponent* Component, const TArray<class AActor*>& IgnoreActors, ETraceableByPlayerLevel TraceLevel, ETraceableByPlayerConditions TraceCondition);
	static bool IsComponentVisibleByPlayer(class APlayerController* PlayerCtrl, class USceneComponent* Component, float FOVDownScale);
	static bool IsPlayingSlotAnimation(class UAnimInstance* AnimInstance, class FName SlotName, bool IgnoreIfBlendingOut);
	static struct FDaiContext MakeReferenceQuery(class AActor* Reference);
	static bool MaskedSphereTraceSingleByProfile(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, class FName ProfileName, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, struct FHitResult* OutHit, EMaskFilter MaskFilter);
	static class UAnimMontage* PlayDynamicMontage(class USkeletalMeshComponent* Mesh, const struct FDaiAnimPlayParams& PlayParams, float PlayRate, int32 LoopCount);
	static TArray<class UObject*> ProvideObjectSet(const struct FDaiContext& Query, class UObject* Context, class AActor* Caller, TSubclassOf<class UObject> ObjectClass);
	static class UObject* ProvideSingleObject(const struct FDaiContext& Query, class UObject* Context, class AActor* Caller, TSubclassOf<class UObject> ObjectClass);
	static class AActor* SelectNearestActor(const TArray<class AActor*>& Actors, const struct FVector& Origin, TSubclassOf<class AActor> ActorClass);
	static int32 SetBit(int32 bitmask, int32 Index_0);
	static int32 ToBitmask(int32 Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DaiFunctions">();
	}
	static class UDaiFunctions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDaiFunctions>();
	}
};
static_assert(alignof(UDaiFunctions) == 0x000008, "Wrong alignment on UDaiFunctions");
static_assert(sizeof(UDaiFunctions) == 0x000028, "Wrong size on UDaiFunctions");

// Class Dai.DaiNameBoxGenerator
// 0x0000 (0x0028 - 0x0028)
class UDaiNameBoxGenerator final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DaiNameBoxGenerator">();
	}
	static class UDaiNameBoxGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDaiNameBoxGenerator>();
	}
};
static_assert(alignof(UDaiNameBoxGenerator) == 0x000008, "Wrong alignment on UDaiNameBoxGenerator");
static_assert(sizeof(UDaiNameBoxGenerator) == 0x000028, "Wrong size on UDaiNameBoxGenerator");

// Class Dai.DaiNotify
// 0x0030 (0x0098 - 0x0068)
class UDaiNotify : public UGraphObject
{
public:
	struct FDaiConditions                         _Conditions;                                       // 0x0068(0x0030)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	static bool PerformNotifies(const struct FDaiNotifies& Conditions, class UObject* Context, class AActor* Caller, bool Debug);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DaiNotify">();
	}
	static class UDaiNotify* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDaiNotify>();
	}
};
static_assert(alignof(UDaiNotify) == 0x000008, "Wrong alignment on UDaiNotify");
static_assert(sizeof(UDaiNotify) == 0x000098, "Wrong size on UDaiNotify");
static_assert(offsetof(UDaiNotify, _Conditions) == 0x000068, "Member 'UDaiNotify::_Conditions' has a wrong offset!");

// Class Dai.PlaySoundNotify
// 0x00A0 (0x0138 - 0x0098)
class UPlaySoundNotify final : public UDaiNotify
{
public:
	bool                                          _Fixed;                                            // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           _ActorTag;                                         // 0x009C(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDaiContext                            _Notified;                                         // 0x00A8(0x0080)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class USoundCue*                              _SoundToPlay;                                      // 0x0128(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _Attached;                                         // 0x0130(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlaySoundNotify">();
	}
	static class UPlaySoundNotify* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlaySoundNotify>();
	}
};
static_assert(alignof(UPlaySoundNotify) == 0x000008, "Wrong alignment on UPlaySoundNotify");
static_assert(sizeof(UPlaySoundNotify) == 0x000138, "Wrong size on UPlaySoundNotify");
static_assert(offsetof(UPlaySoundNotify, _Fixed) == 0x000098, "Member 'UPlaySoundNotify::_Fixed' has a wrong offset!");
static_assert(offsetof(UPlaySoundNotify, _ActorTag) == 0x00009C, "Member 'UPlaySoundNotify::_ActorTag' has a wrong offset!");
static_assert(offsetof(UPlaySoundNotify, _Notified) == 0x0000A8, "Member 'UPlaySoundNotify::_Notified' has a wrong offset!");
static_assert(offsetof(UPlaySoundNotify, _SoundToPlay) == 0x000128, "Member 'UPlaySoundNotify::_SoundToPlay' has a wrong offset!");
static_assert(offsetof(UPlaySoundNotify, _Attached) == 0x000130, "Member 'UPlaySoundNotify::_Attached' has a wrong offset!");

// Class Dai.ChangeTagNotify
// 0x00A0 (0x0138 - 0x0098)
class UChangeTagNotify final : public UDaiNotify
{
public:
	bool                                          _Fixed;                                            // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           _ActorTag;                                         // 0x009C(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDaiContext                            _Notified;                                         // 0x00A8(0x0080)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class FName                                   _Tag;                                              // 0x0128(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ENotifyTagOperation                           _Operation;                                        // 0x0130(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChangeTagNotify">();
	}
	static class UChangeTagNotify* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChangeTagNotify>();
	}
};
static_assert(alignof(UChangeTagNotify) == 0x000008, "Wrong alignment on UChangeTagNotify");
static_assert(sizeof(UChangeTagNotify) == 0x000138, "Wrong size on UChangeTagNotify");
static_assert(offsetof(UChangeTagNotify, _Fixed) == 0x000098, "Member 'UChangeTagNotify::_Fixed' has a wrong offset!");
static_assert(offsetof(UChangeTagNotify, _ActorTag) == 0x00009C, "Member 'UChangeTagNotify::_ActorTag' has a wrong offset!");
static_assert(offsetof(UChangeTagNotify, _Notified) == 0x0000A8, "Member 'UChangeTagNotify::_Notified' has a wrong offset!");
static_assert(offsetof(UChangeTagNotify, _Tag) == 0x000128, "Member 'UChangeTagNotify::_Tag' has a wrong offset!");
static_assert(offsetof(UChangeTagNotify, _Operation) == 0x000130, "Member 'UChangeTagNotify::_Operation' has a wrong offset!");

// Class Dai.DaiScriptNotify
// 0x0000 (0x0098 - 0x0098)
class UDaiScriptNotify final : public UDaiNotify
{
public:
	bool ScriptPerformNotify(class UObject* Context, class AActor* Caller);

	class FString ScriptToString() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DaiScriptNotify">();
	}
	static class UDaiScriptNotify* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDaiScriptNotify>();
	}
};
static_assert(alignof(UDaiScriptNotify) == 0x000008, "Wrong alignment on UDaiScriptNotify");
static_assert(sizeof(UDaiScriptNotify) == 0x000098, "Wrong size on UDaiScriptNotify");

// Class Dai.DaiParam
// 0x0010 (0x0078 - 0x0068)
class UDaiParam : public UGraphObject
{
public:
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _IsUpToDate;                                       // 0x0070(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ForceUpdate();
	void NeedsUpdate();
	void SetUpToDate();

	bool IsUpToDate() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DaiParam">();
	}
	static class UDaiParam* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDaiParam>();
	}
};
static_assert(alignof(UDaiParam) == 0x000008, "Wrong alignment on UDaiParam");
static_assert(sizeof(UDaiParam) == 0x000078, "Wrong size on UDaiParam");
static_assert(offsetof(UDaiParam, _IsUpToDate) == 0x000070, "Member 'UDaiParam::_IsUpToDate' has a wrong offset!");

// Class Dai.ScriptDaiParam
// 0x0000 (0x0078 - 0x0078)
class UScriptDaiParam : public UDaiParam
{
public:
	void ScriptUpdate(class UObject* Context, class AActor* Actor);

	class FString ScriptToString() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScriptDaiParam">();
	}
	static class UScriptDaiParam* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScriptDaiParam>();
	}
};
static_assert(alignof(UScriptDaiParam) == 0x000008, "Wrong alignment on UScriptDaiParam");
static_assert(sizeof(UScriptDaiParam) == 0x000078, "Wrong size on UScriptDaiParam");

// Class Dai.DaiBoolParam
// 0x0008 (0x0080 - 0x0078)
class UDaiBoolParam final : public UScriptDaiParam
{
public:
	bool                                          _Value;                                            // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UpdateValue(bool Value);

	float GetUpToDateValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DaiBoolParam">();
	}
	static class UDaiBoolParam* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDaiBoolParam>();
	}
};
static_assert(alignof(UDaiBoolParam) == 0x000008, "Wrong alignment on UDaiBoolParam");
static_assert(sizeof(UDaiBoolParam) == 0x000080, "Wrong size on UDaiBoolParam");
static_assert(offsetof(UDaiBoolParam, _Value) == 0x000078, "Member 'UDaiBoolParam::_Value' has a wrong offset!");

// Class Dai.DaiFloatParam
// 0x0008 (0x0080 - 0x0078)
class UDaiFloatParam : public UScriptDaiParam
{
public:
	float                                         _Value;                                            // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetCustomValue(float Newval);
	void UpdateValue(float Value);

	float GetUpToDateValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DaiFloatParam">();
	}
	static class UDaiFloatParam* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDaiFloatParam>();
	}
};
static_assert(alignof(UDaiFloatParam) == 0x000008, "Wrong alignment on UDaiFloatParam");
static_assert(sizeof(UDaiFloatParam) == 0x000080, "Wrong size on UDaiFloatParam");
static_assert(offsetof(UDaiFloatParam, _Value) == 0x000078, "Member 'UDaiFloatParam::_Value' has a wrong offset!");

// Class Dai.DaiFloatModifier
// 0x0008 (0x0088 - 0x0080)
class UDaiFloatModifier : public UDaiFloatParam
{
public:
	EDaiFloatOperator                             _Operator;                                         // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _InValue;                                          // 0x0084(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	float GetDefaultValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DaiFloatModifier">();
	}
	static class UDaiFloatModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDaiFloatModifier>();
	}
};
static_assert(alignof(UDaiFloatModifier) == 0x000008, "Wrong alignment on UDaiFloatModifier");
static_assert(sizeof(UDaiFloatModifier) == 0x000088, "Wrong size on UDaiFloatModifier");
static_assert(offsetof(UDaiFloatModifier, _Operator) == 0x000080, "Member 'UDaiFloatModifier::_Operator' has a wrong offset!");
static_assert(offsetof(UDaiFloatModifier, _InValue) == 0x000084, "Member 'UDaiFloatModifier::_InValue' has a wrong offset!");

// Class Dai.DaiFloatModifier1
// 0x0000 (0x0088 - 0x0088)
class UDaiFloatModifier1 final : public UDaiFloatModifier
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DaiFloatModifier1">();
	}
	static class UDaiFloatModifier1* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDaiFloatModifier1>();
	}
};
static_assert(alignof(UDaiFloatModifier1) == 0x000008, "Wrong alignment on UDaiFloatModifier1");
static_assert(sizeof(UDaiFloatModifier1) == 0x000088, "Wrong size on UDaiFloatModifier1");

// Class Dai.DaiFloatModifier2
// 0x0008 (0x0090 - 0x0088)
class UDaiFloatModifier2 : public UDaiFloatModifier
{
public:
	class AActor*                                 _Other;                                            // 0x0088(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class AActor* GetOther() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DaiFloatModifier2">();
	}
	static class UDaiFloatModifier2* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDaiFloatModifier2>();
	}
};
static_assert(alignof(UDaiFloatModifier2) == 0x000008, "Wrong alignment on UDaiFloatModifier2");
static_assert(sizeof(UDaiFloatModifier2) == 0x000090, "Wrong size on UDaiFloatModifier2");
static_assert(offsetof(UDaiFloatModifier2, _Other) == 0x000088, "Member 'UDaiFloatModifier2::_Other' has a wrong offset!");

// Class Dai.DaiTagsComponent
// 0x0028 (0x00C8 - 0x00A0)
class UDaiTagsComponent : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  _TagContainer;                                     // 0x00A8(0x0020)(Edit, NativeAccessSpecifierPrivate)

public:
	void AppendGameplayTags(const struct FGameplayTagContainer& Tags);
	void ClearGameplayTags();
	void RemoveGameplayTags(const struct FGameplayTagContainer& Tags);
	void SetGameplayTags(const struct FGameplayTagContainer& Tags);

	bool HasAnyGameplayTag() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DaiTagsComponent">();
	}
	static class UDaiTagsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDaiTagsComponent>();
	}
};
static_assert(alignof(UDaiTagsComponent) == 0x000008, "Wrong alignment on UDaiTagsComponent");
static_assert(sizeof(UDaiTagsComponent) == 0x0000C8, "Wrong size on UDaiTagsComponent");
static_assert(offsetof(UDaiTagsComponent, _TagContainer) == 0x0000A8, "Member 'UDaiTagsComponent::_TagContainer' has a wrong offset!");

// Class Dai.DaiUpdatableParam
// 0x0000 (0x0028 - 0x0028)
class IDaiUpdatableParam final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DaiUpdatableParam">();
	}
	static class IDaiUpdatableParam* GetDefaultObj()
	{
		return GetDefaultObjImpl<IDaiUpdatableParam>();
	}
};
static_assert(alignof(IDaiUpdatableParam) == 0x000008, "Wrong alignment on IDaiUpdatableParam");
static_assert(sizeof(IDaiUpdatableParam) == 0x000028, "Wrong size on IDaiUpdatableParam");

}

