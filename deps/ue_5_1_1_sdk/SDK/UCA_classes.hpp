#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UCA

#include "Basic.hpp"

#include "UCA_structs.hpp"
#include "Engine_classes.hpp"
#include "UMG_classes.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class UCA.AchievementsConfig
// 0x0010 (0x0040 - 0x0030)
class UAchievementsConfig final : public UDataAsset
{
public:
	TArray<struct FAchievementCounterConfig>      Counters;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AchievementsConfig">();
	}
	static class UAchievementsConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAchievementsConfig>();
	}
};
static_assert(alignof(UAchievementsConfig) == 0x000008, "Wrong alignment on UAchievementsConfig");
static_assert(sizeof(UAchievementsConfig) == 0x000040, "Wrong size on UAchievementsConfig");
static_assert(offsetof(UAchievementsConfig, Counters) == 0x000030, "Member 'UAchievementsConfig::Counters' has a wrong offset!");

// Class UCA.AchievementsSaveObject
// 0x0040 (0x0068 - 0x0028)
class UAchievementsSaveObject final : public USaveGame
{
public:
	TArray<struct FSimpleCounterSaveData>         SimpleCounters;                                    // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FIntegerCounterSaveData>        IntegerCounters;                                   // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFloatCounterSaveData>          FloatCounters;                                     // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCollectionCounterSaveData>     CollectionCounters;                                // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AchievementsSaveObject">();
	}
	static class UAchievementsSaveObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAchievementsSaveObject>();
	}
};
static_assert(alignof(UAchievementsSaveObject) == 0x000008, "Wrong alignment on UAchievementsSaveObject");
static_assert(sizeof(UAchievementsSaveObject) == 0x000068, "Wrong size on UAchievementsSaveObject");
static_assert(offsetof(UAchievementsSaveObject, SimpleCounters) == 0x000028, "Member 'UAchievementsSaveObject::SimpleCounters' has a wrong offset!");
static_assert(offsetof(UAchievementsSaveObject, IntegerCounters) == 0x000038, "Member 'UAchievementsSaveObject::IntegerCounters' has a wrong offset!");
static_assert(offsetof(UAchievementsSaveObject, FloatCounters) == 0x000048, "Member 'UAchievementsSaveObject::FloatCounters' has a wrong offset!");
static_assert(offsetof(UAchievementsSaveObject, CollectionCounters) == 0x000058, "Member 'UAchievementsSaveObject::CollectionCounters' has a wrong offset!");

// Class UCA.ActivitiesConfig
// 0x0020 (0x0050 - 0x0030)
class UActivitiesConfig final : public UDataAsset
{
public:
	TArray<struct FActivityConfig>                Activities;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FZoneConfig>                    Zones;                                             // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActivitiesConfig">();
	}
	static class UActivitiesConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActivitiesConfig>();
	}
};
static_assert(alignof(UActivitiesConfig) == 0x000008, "Wrong alignment on UActivitiesConfig");
static_assert(sizeof(UActivitiesConfig) == 0x000050, "Wrong size on UActivitiesConfig");
static_assert(offsetof(UActivitiesConfig, Activities) == 0x000030, "Member 'UActivitiesConfig::Activities' has a wrong offset!");
static_assert(offsetof(UActivitiesConfig, Zones) == 0x000040, "Member 'UActivitiesConfig::Zones' has a wrong offset!");

// Class UCA.UCADebugCounterItemWidget
// 0x0000 (0x0278 - 0x0278)
class UUCADebugCounterItemWidget final : public UUserWidget
{
public:
	void OnInit(const class FText& Name_0, const class FText& Type);
	void OnRefresh(const class FText& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCADebugCounterItemWidget">();
	}
	static class UUCADebugCounterItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCADebugCounterItemWidget>();
	}
};
static_assert(alignof(UUCADebugCounterItemWidget) == 0x000008, "Wrong alignment on UUCADebugCounterItemWidget");
static_assert(sizeof(UUCADebugCounterItemWidget) == 0x000278, "Wrong size on UUCADebugCounterItemWidget");

// Class UCA.UCADebugAchvItemWidget
// 0x0000 (0x0278 - 0x0278)
class UUCADebugAchvItemWidget final : public UUserWidget
{
public:
	void OnInit(const class FText& Name_0, bool SinglePlaythrough, int32 Threshold, bool IsSimple);
	void OnRefresh(const class FText& Progress, bool IsUnlocked);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCADebugAchvItemWidget">();
	}
	static class UUCADebugAchvItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCADebugAchvItemWidget>();
	}
};
static_assert(alignof(UUCADebugAchvItemWidget) == 0x000008, "Wrong alignment on UUCADebugAchvItemWidget");
static_assert(sizeof(UUCADebugAchvItemWidget) == 0x000278, "Wrong size on UUCADebugAchvItemWidget");

// Class UCA.UCADebugWidget
// 0x0018 (0x0290 - 0x0278)
class UUCADebugWidget final : public UUserWidget
{
public:
	TSubclassOf<class UUCADebugCounterItemWidget> CounterItemWidgetClass;                            // 0x0278(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UUCADebugAchvItemWidget>    AchvItemWidgetClass;                               // 0x0280(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           List_panel;                                        // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnRefresh(const class FText& Value);

	class FText GetOnlineSystemInfo() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCADebugWidget">();
	}
	static class UUCADebugWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCADebugWidget>();
	}
};
static_assert(alignof(UUCADebugWidget) == 0x000008, "Wrong alignment on UUCADebugWidget");
static_assert(sizeof(UUCADebugWidget) == 0x000290, "Wrong size on UUCADebugWidget");
static_assert(offsetof(UUCADebugWidget, CounterItemWidgetClass) == 0x000278, "Member 'UUCADebugWidget::CounterItemWidgetClass' has a wrong offset!");
static_assert(offsetof(UUCADebugWidget, AchvItemWidgetClass) == 0x000280, "Member 'UUCADebugWidget::AchvItemWidgetClass' has a wrong offset!");
static_assert(offsetof(UUCADebugWidget, List_panel) == 0x000288, "Member 'UUCADebugWidget::List_panel' has a wrong offset!");

// Class UCA.UCAManager
// 0x02A8 (0x02D8 - 0x0030)
class UUCAManager final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x2A0];                                     // 0x0030(0x02A0)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            DebugWidget;                                       // 0x02D0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCAManager">();
	}
	static class UUCAManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCAManager>();
	}
};
static_assert(alignof(UUCAManager) == 0x000008, "Wrong alignment on UUCAManager");
static_assert(sizeof(UUCAManager) == 0x0002D8, "Wrong size on UUCAManager");
static_assert(offsetof(UUCAManager, DebugWidget) == 0x0002D0, "Member 'UUCAManager::DebugWidget' has a wrong offset!");

// Class UCA.UCASettings
// 0x0098 (0x00D0 - 0x0038)
class UUCASettings final : public UDeveloperSettings
{
public:
	TSoftObjectPtr<class UAchievementsConfig>     AchievementsConfig;                                // 0x0038(0x0030)(Edit, Config, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   DebugWidgetClass;                                  // 0x0068(0x0030)(Edit, Config, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UActivitiesConfig>       ActivitiesConfig;                                  // 0x0098(0x0030)(Edit, Config, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPresenceSupported;                                // 0x00C8(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPresenceUseZones;                                 // 0x00C9(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCASettings">();
	}
	static class UUCASettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCASettings>();
	}
};
static_assert(alignof(UUCASettings) == 0x000008, "Wrong alignment on UUCASettings");
static_assert(sizeof(UUCASettings) == 0x0000D0, "Wrong size on UUCASettings");
static_assert(offsetof(UUCASettings, AchievementsConfig) == 0x000038, "Member 'UUCASettings::AchievementsConfig' has a wrong offset!");
static_assert(offsetof(UUCASettings, DebugWidgetClass) == 0x000068, "Member 'UUCASettings::DebugWidgetClass' has a wrong offset!");
static_assert(offsetof(UUCASettings, ActivitiesConfig) == 0x000098, "Member 'UUCASettings::ActivitiesConfig' has a wrong offset!");
static_assert(offsetof(UUCASettings, bPresenceSupported) == 0x0000C8, "Member 'UUCASettings::bPresenceSupported' has a wrong offset!");
static_assert(offsetof(UUCASettings, bPresenceUseZones) == 0x0000C9, "Member 'UUCASettings::bPresenceUseZones' has a wrong offset!");

// Class UCA.UCAStatics
// 0x0000 (0x0028 - 0x0028)
class UUCAStatics final : public UBlueprintFunctionLibrary
{
public:
	static void AddAchievementCollectionGuid(const class UObject* WorldContextObject, const struct FCollectionHandle& Collection, const struct FGuid& Guid);
	static void AddAchievementCollectionGuidFromActor(const class UObject* WorldContextObject, const struct FCollectionHandle& Collection, class AActor* Actor);
	static void AddAchievementCounter(const class UObject* WorldContextObject, const struct FCounterHandle& Counter, const int32 Delta);
	static void EndActivity(const class UObject* WorldContextObject, const struct FActivityHandle& Handle, EActivityOutcome Outcome);
	static void IncrementAchievementCounter(const class UObject* WorldContextObject, const struct FCounterHandle& Counter);
	static void ResumeActivity(const class UObject* WorldContextObject, const struct FActivityHandle& Handle);
	static void SetActivityAvailability(const class UObject* WorldContextObject, const struct FActivityHandle& Handle, const bool bEnabled);
	static void SetActualZone(const class UObject* WorldContextObject, const struct FActivityZoneHandle& Zone);
	static void StartActivity(const class UObject* WorldContextObject, const struct FActivityHandle& Handle);
	static void TerminateActivity(const class UObject* WorldContextObject);
	static void UnlockAchievement(const class UObject* WorldContextObject, const struct FAchievementHandle& Achievement);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UCAStatics">();
	}
	static class UUCAStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUCAStatics>();
	}
};
static_assert(alignof(UUCAStatics) == 0x000008, "Wrong alignment on UUCAStatics");
static_assert(sizeof(UUCAStatics) == 0x000028, "Wrong size on UUCAStatics");

}

